name: HumanEval_93_encode
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that takes a message, and encodes in such a \n    // way\
  \ that it swaps case of all letters, replaces all vowels in \n    // the message\
  \ with the letter that appears 2 places ahead of that \n    // vowel in the english\
  \ alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode('test')\n\
  \    // 'TGST'\n    // >>> encode('This is a message')\n    // 'tHKS KS C MGSSCGG'\n\
  \    def encode(message : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
  )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n\
  \    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"This is\
  \ a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw\
  \ WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
completions: ["        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 1))\n        val newVowels = vowels.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 1))\n        newMessage.zip(newVowels).map(x\
    \ => x._1 + x._2).mkString(\"\")", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.foldLeft(\"\")( (acc, elem) =>\
    \ {\n            val index = alphabet.indexOf(elem)\n            val vowelIndex\
    \ = vowels.indexOf(elem)\n            val nextVowelIndex = index + vowelIndex\n\
    \            val nextVowel = alphabet(nextVowelIndex)\n            acc + (if (index\
    \ != -1) elem else nextVowel)\n        })\n        encodedMessage", "        val\
    \ vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelsMap = Map(vowels -> letters.indexOf(\"a\"))\n        val lettersMap\
    \ = Map(letters -> letters.indexOf(\"a\"))\n        val messageMap = message.map(letter\
    \ => lettersMap(letter))\n        val messageMap2 = message.map(letter => vowelsMap(letter))\n\
    \        val messageMap3 = message.map(letter => lettersMap(letter))\n       \
    \ val messageMap4 = message.map(letter => vowelsMap(letter))\n        val messageMap5\
    \ = message.map(letter => lettersMap(letter))\n        val messageMap6 = message.map(letter\
    \ => vowelsMap(letter))\n        val messageMap7 = message.map(letter => lettersMap(letter))\n\
    \        val messageMap8 = message.map(letter => vowelsMap(letter))\n        val\
    \ messageMap9 = message.map(letter => lettersMap(letter))\n        val messageMap10\
    \ = message.map(letter => vowelsMap(letter))\n        val messageMap11 = message.map(letter\
    \ => lettersMap(letter))\n        val messageMap12 = message.map(letter => vowelsMap(letter))\n\
    \        val messageMap13 = message.map(letter => lettersMap(letter))\n      \
    \  val messageMap14 = message.map(letter => vowelsMap(letter))\n        val messageMap15\
    \ = message.map(letter => lettersMap(letter))\n        val messageMap16 = message.map(letter\
    \ => vowelsMap(letter))\n        val messageMap17 = message.map(letter => lettersMap(letter))\n\
    \        val messageMap18 = message.map(letter => vowelsMap(letter))\n       \
    \ val messageMap19 = message.map(letter => lettersMap(letter))\n        val messageMap20\
    \ = message.map(letter => vowelsMap(letter))\n        val messageMap21 = message.map(letter\
    \ => lettersMap(letter))\n        val messageMap22 = message.map(letter => vowelsMap(letter))\n\
    \        val messageMap23 = message.map(letter => lettersMap(letter))\n      \
    \  val messageMap24 = message.map(letter => vowelsMap(letter))\n        val messageMap25\
    \ = message.map(letter => lettersMap(letter))\n        val messageMap26 = message.map(letter\
    \ => vowelsMap(letter))\n        val messageMap27 = message.map(letter => lettersMap(letter))\n\
    \        val messageMap28 = message.map(letter => vowelsMap(letter))\n       \
    \ val messageMap29 = message.map(letter => lettersMap(letter))\n        val messageMap30\
    \ = message.map(letter => vowelsMap(letter))\n        ", "        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(letter => \n            if (vowels.contains(letter)) letter else\
    \ alphabet(alphabet.indexOf(letter) + 1))\n        newMessage.mkString(\"\")",
  "        val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageArray = message.split(\"\")\n        val encodedMessage =\
    \ messageArray.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 1)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 2)))\n     \
    \   val encodedMessageString = encodedMessage.toList.toString()\n        encodedMessageString.replaceAll(\"\
    [aeiouAEIOU]\", \"A\")\n        encodedMessageString.replaceAll(\"[bcdefghijklmnopqrstuvwxyz]\"\
    , \"B\")\n        encodedMessageString.replaceAll(\"[AEIOUaeiouAEIOU]\", \"C\"\
    )\n        encodedMessageString.replaceAll(\"[bcdefghijklmnopqrstuvwxyz]\", \"\
    D\")\n        encodedMessageString.replaceAll(\"[AEIOUaeiouAEIOU]\", \"E\")\n\
    \        encodedMessageString.replaceAll(\"[bcdefghijklmnopqrstuvwxyz]\", \"F\"\
    )\n        encodedMessageString.replaceAll(\"[AEIOUaeiouAEIOU]\", \"G\")\n   \
    \     encodedMessageString.replaceAll(\"[bcdefghijklmnopqrstuvwxyz]\", \"H\")\n\
    \        encodedMessageString.replaceAll(\"[AEIOUaeiouAEIOU]\", \"I\")\n     \
    \   encodedMessageString.replaceAll(\"[bcdefghijklmnopqrstuvwxyz]\", \"J\")\n\
    \        encodedMessageString.replaceAll(\"[AEIOUaeiouAEIOU]\", \"K\")\n     \
    \   encodedMessageString.replaceAll(\"[bcdefghijklmnopqrstuvwxyz]\", \"L\")\n\
    \        encodedMessageString.replaceAll(\"[AEIOUaeiouAEIOU]\", \"M\")\n     \
    \   encodedMessageString.replaceAll(\"[bcdefghijklmnopqrstuvwxyz]\", \"N\")\n\
    \        encodedMessageString.replaceAll(\"[AEIOUaeiouAEIOU]\", \"O\")\n     \
    \   encodedMessageString.replaceAll(\"[bcdefghijklmnopqrstuvwxyz]\", \"P\")\n\
    \        encodedMessageString.replaceAll(\"[AEIOUaeiouAEIOU]\", \"Q\")\n     \
    \   encodedMessageString.replaceAll(\"[bcdefghijklmnopqrstuvwxyz]\", \"R\")\n\
    \        encodedMessageString.replaceAll(\"[AEIOU", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val vowelsMap = Map(vowels\
    \ -> alphabet(vowels.indexOf('a')))\n        val messageList = message.split(\"\
    \")\n        val encodedMessage = messageList.map(letter => vowelsMap(letter))\n\
    \        val encodedMessageString = encodedMessage.toList.toString\n        encodedMessageString",
  "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            if\
    \ (vowels.contains(letter)) {\n                val vowelIndex = vowels.indexOf(letter)\n\
    \                val vowelIndex2 = vowelIndex + 1\n                val vowelIndex3\
    \ = vowelIndex2 + 1\n                val vowelIndex4 = vowelIndex3 + 1\n     \
    \           val vowelIndex5 = vowelIndex4 + 1\n                val vowelIndex6\
    \ = vowelIndex5 + 1\n                val vowelIndex7 = vowelIndex6 + 1\n     \
    \           val vowelIndex8 = vowelIndex7 + 1\n                val vowelIndex9\
    \ = vowelIndex8 + 1\n                val vowelIndex10 = vowelIndex9 + 1\n    \
    \            val vowelIndex11 = vowelIndex10 + 1\n                val vowelIndex12\
    \ = vowelIndex11 + 1\n                val vowelIndex13 = vowelIndex12 + 1\n  \
    \              val vowelIndex14 = vowelIndex13 + 1\n                val vowelIndex15\
    \ = vowelIndex14 + 1\n                val vowelIndex16 = vowelIndex15 + 1\n  \
    \              val vowelIndex17 = vowelIndex16 + 1\n                val vowelIndex18\
    \ = vowelIndex17 + 1\n                val vowelIndex19 = vowelIndex18 + 1\n  \
    \              val vowelIndex20 = vowelIndex19 + 1\n                val vowelIndex21\
    \ = vowelIndex20 + 1\n                val vowelIndex22 = vowelIndex21 + 1\n  \
    \              val vowelIndex23 = vowelIndex22 + 1\n                val vowelIndex24\
    \ = vowelIndex23 + 1\n                val vowelIndex25 = vowelIndex24 + 1\n  \
    \              val vowelIndex26 = vowelIndex25 + 1\n                val vowelIndex27\
    \ = vowelIndex26 + 1\n                val vowelIndex28 = vowelIndex27 + 1\n  \
    \              val vowelIndex29 = vowelIndex28 + 1\n                val vowelIndex30\
    \ = vowelIndex29 + 1\n                val vowelIndex31 = vowelIndex30 + 1\n  \
    \              val vowelIndex32 = vowelIndex31 + 1\n                val vowelIndex33\
    \ = vowelIndex32 + 1\n                val vowelIndex34 = vowelIndex33 + 1\n  \
    \              val vowelIndex35 = vowelIndex34 + 1\n                val vowelIndex36\
    \ = vowelIndex35 + 1\n                val vowelIndex37 = vowelIndex36 + 1\n  \
    \              val vowelIndex38 = vowelIndex37 + 1\n                val vowelIndex39\
    \ = vowelIndex38 + 1\n                val vowelIndex40 = vowelIndex39 + 1\n  \
    \              val vowelIndex41 = vowelIndex40 + 1\n                val vowelIndex42\
    \ = vowelIndex41 + 1\n                val vowelIndex43 = vowelIndex42 + 1\n  \
    \              val vowelIndex44 = vowelIndex43 + 1", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('o','a','e','i','u')\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.map(letter => \n            letter\
    \ match {\n                case letter if vowels.contains(letter) => vowels(vowels.indexOf(letter)+1)\n\
    \                case letter if alphabet.contains(letter) => alphabet(alphabet.indexOf(letter)+1)\n\
    \                case letter => letter\n            }\n        ).mkString(\"\"\
    )\n        encodedMessage", "        val vowels = \"aeiouAEIOU\".toCharArray\n\
    \        val messageArray = message.toCharArray\n        val newMessage = new\
    \ StringBuilder\n        var i = 0\n        while (i < messageArray.length) {\n\
    \            val currentChar = messageArray(i)\n            val nextChar = messageArray(i\
    \ + 1)\n            val currentCharIndex = vowels.indexOf(currentChar)\n     \
    \       val nextCharIndex = vowels.indexOf(nextChar)\n            if (currentCharIndex\
    \ != -1 && nextCharIndex != -1) {\n                if (currentCharIndex == nextCharIndex)\
    \ {\n                    newMessage.append(currentChar)\n                    newMessage.append(vowels(currentCharIndex\
    \ + 2))\n                } else {\n                    newMessage.append(currentChar)\n\
    \                    newMessage.append(vowels(currentCharIndex + 1))\n       \
    \             newMessage.append(vowels(nextCharIndex + 1))\n                }\n\
    \            } else {\n                newMessage.append(currentChar)\n      \
    \      }\n            i += 1\n        }\n        newMessage.toString", "     \
    \   val vowels = \"aeiouAEIOU\"\n        val messageLength = message.length\n\
    \        val encodedMessage = message.map(letter => vowels.indexOf(letter) match\
    \ {\n            case -1 => letter\n            case i => vowels(i + 2)\n    \
    \    }).mkString\n        val encodedMessageLength = encodedMessage.length\n \
    \       val encodedMessageLength = encodedMessageLength - messageLength\n    \
    \    val encodedMessageLength = encodedMessageLength / 2\n        val encodedMessageLength\
    \ = encodedMessageLength.toInt\n        val encodedMessageLength = encodedMessageLength\
    \ * 2\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength.toInt\n        val encodedMessageLength\
    \ = encodedMessageLength * 2\n        val encodedMessageLength = encodedMessageLength\
    \ + messageLength\n        val encodedMessageLength = encodedMessageLength.toInt\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength.toInt\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength.toInt\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength.toInt\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength.toInt\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength.toInt\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength.toInt\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength.toInt\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength.toInt\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength.toInt\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength.toInt\n\
    \        val encodedMessageLength = encodedMessageLength", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\")\n        val\
    \ newMessageArray = messageArray.map(letter => \n            letter match {\n\
    \                case vowel => vowel\n                case _ => vowels.indexOf(letter)\
    \ + vowels.indexOf(vowel) + 1 \n            })\n        val newMessage = \n  \
    \          newMessageArray.toList.map(letter => \n                vowels.indexOf(letter)\
    \ + vowels.indexOf(vowel) + 1 \n            ).mkString(\"\")\n        newMessage",
  "        val vowels = \"aeiouAEIOU\".toList\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    .toList\n        val messageList = message.split(\"\")\n        val result = new\
    \ StringBuilder\n        var i = 0\n        while (i < messageList.length) {\n\
    \            val letter = messageList(i)\n            val vowelIndex = letters.indexOf(letter)\n\
    \            if (vowelIndex != -1) {\n                val vowel = vowels(vowelIndex)\n\
    \                val vowelIndex = letters.indexOf(vowel)\n                if (vowelIndex\
    \ != -1) {\n                    val letterIndex = letters.indexOf(letter, vowelIndex\
    \ + 1)\n                    if (letterIndex != -1) {\n                       \
    \ val letter = letters(letterIndex)\n                        result.append(vowel)\n\
    \                        result.append(letter)\n                    }\n      \
    \          }\n            }\n            i += 1\n        }\n        return result.toString",
  "        val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelsMap : Map[Char, Int] = Map('a' => 0, 'e' => 1, 'i' => 2, 'o'\
    \ => 3, 'u' => 4)\n        val lettersMap : Map[Char, Int] = Map('a' => 0, 'b'\
    \ => 1, 'c' => 2, 'd' => 3, 'e' => 4, 'f' => 5, 'g' => 6, 'h' => 7, 'i' => 8,\
    \ 'j' => 9, 'k' => 10, 'l' => 11, 'm' => 12, 'n' => 13, 'o' => 14, 'p' => 15,\
    \ 'q' => 16, 'r' => 17, 's' => 18, 't' => 19, 'u' => 20, 'v' => 21, 'w' => 22,\
    \ 'x' => 23, 'y' => 24, 'z' => 25)\n        val messageList = message.split(\"\
    \")\n        val result = new StringBuilder\n        for(i <- 0 until messageList.length){\n\
    \            val currentChar = messageList(i)\n            val currentCharIndex\
    \ = letters.indexOf(currentChar)\n            val currentCharVowelIndex = vowels.indexOf(currentChar)\n\
    \            val currentCharVowelIndex2 = vowelsMap(currentChar)\n           \
    \ val currentCharIndex2 = lettersMap(currentChar)\n            val currentCharVowelIndex3\
    \ = vowelsMap(currentChar)\n            val currentCharIndex3 = lettersMap(currentChar)\n\
    \            val currentCharVowelIndex4 = vowelsMap(currentChar)\n           \
    \ val currentCharIndex4 = lettersMap(currentChar)\n            val currentCharVowelIndex5\
    \ = vowelsMap(currentChar)\n            val currentCharIndex5 = lettersMap(currentChar)\n\
    \            val currentCharVowelIndex6 = vowelsMap(currentChar)\n           \
    \ val currentCharIndex6 = lettersMap(currentChar)\n            val currentCharVowelIndex7\
    \ = vowelsMap(currentChar)\n            val currentCharIndex7 = lettersMap(currentChar)\n\
    \            val currentCharVowelIndex8 = vowelsMap(currentChar)\n           \
    \ val currentCharIndex8 = lettersMap(currentChar)\n            val currentCharVowelIndex9\
    \ = vowelsMap(currentChar)\n            val currentCharIndex9 = lettersMap(currentChar)\n\
    \            val currentCharVowelIndex10 = vowelsMap(currentChar)\n          \
    \  val currentCharIndex10 = lettersMap(currentChar)\n            val currentCharVowelIndex11\
    \ = vowelsMap(currentChar)\n            val currentCharIndex11 = lettersMap(currentChar)\n\
    \            val currentCharVowelIndex", "        val vowels = \"aeiouAEIOU\"\n\
    \        val messageArray = message.split(\"\")\n        val newMessageArray =\
    \ messageArray.map(letter => {\n            val index = vowels.indexOf(letter)\n\
    \            if (index != -1) {\n                val vowelIndex = index + 1\n\
    \                if (vowelIndex < vowels.length) vowels(vowelIndex) else letter\n\
    \            } else letter\n        })\n        val newMessage = newMessageArray.toList\n\
    \        val newMessageString = newMessage.toString.replaceAll(\"[aeiouAEIOU]\"\
    , \"$0\")\n        val newMessageArray = Array(newMessageString)\n        val\
    \ newMessageString = newMessageArray.toString.replaceAll(\"$0\", \"[aeiouAEIOU]\"\
    )\n        val newMessageArray = Array(newMessageString)\n        val newMessageString\
    \ = newMessageArray.toString.replaceAll(\"[aeiouAEIOU]\", \"$0\")\n        val\
    \ newMessageArray = Array(newMessageString)\n        val newMessageString = newMessageArray.toString.replaceAll(\"\
    $0\", \"[aeiouAEIOU]\")\n        val newMessageArray = Array(newMessageString)\n\
    \        val newMessageString = newMessageArray.toString.replaceAll(\"[aeiouAEIOU]\"\
    , \"$0\")\n        val newMessageArray = Array(newMessageString)\n        val\
    \ newMessageString = newMessageArray.toString.replaceAll(\"$0\", \"[aeiouAEIOU]\"\
    )\n        val newMessageArray = Array(newMessageString)\n        val newMessageString\
    \ = newMessageArray.toString.replaceAll(\"[aeiouAEIOU]\", \"$0\")\n        val\
    \ newMessageArray = Array(newMessageString)\n        val newMessageString = newMessageArray.toString.replaceAll(\"\
    $0\", \"[aeiouAEIOU]\")\n        val newMessageArray = Array(newMessageString)\n\
    \        val newMessageString = newMessageArray.toString.replaceAll(\"[aeiouAEIOU]\"\
    , \"$0\")\n        val newMessageArray = Array(newMessageString)\n        val\
    \ newMessageString = newMessageArray.toString.replaceAll(\"$0\", \"[aeiouAEIOU]\"\
    )\n        val newMessageArray = Array(newMessageString)\n        val newMessageString\
    \ = newMessageArray.toString.replaceAll(\"[aeiouAEIOU]\", \"$0\")\n        val\
    \ newMessageArray = Array(newMessageString)\n        val newMessageString = newMessageArray.toString.replaceAll(\"\
    $0\", \"[aeiouAEIOU]\")\n        val newMessageArray = Array(newMessageString)\n\
    \        val newMessageString = newMessageArray.toString.replaceAll(\"[aeiou",
  "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                val newLetter = vowel.charAt(0) + letter.charAt(1)\n        \
    \        vowels(vowelIndex) = newLetter\n                newLetter\n         \
    \   } else {\n                letter\n            }\n        })\n        newMessageArray.toString.toUpperCase",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val messageList = message.split(\"\
    \")\n        val newMessage = messageList.foldLeft(\"\") { (result, currentChar)\
    \ =>\n            val nextVowel = vowels.find(vowel => vowel == currentChar)\n\
    \            val nextLetter = vowels.find(letter => letter == nextVowel)\n   \
    \         val nextLetter2 = vowels.find(letter => letter == nextLetter)\n    \
    \        val nextLetter3 = vowels.find(letter => letter == nextLetter2)\n    \
    \        val nextLetter4 = vowels.find(letter => letter == nextLetter3)\n    \
    \        val nextLetter5 = vowels.find(letter => letter == nextLetter4)\n    \
    \        val nextLetter6 = vowels.find(letter => letter == nextLetter5)\n    \
    \        val nextLetter7 = vowels.find(letter => letter == nextLetter6)\n    \
    \        val nextLetter8 = vowels.find(letter => letter == nextLetter7)\n    \
    \        val nextLetter9 = vowels.find(letter => letter == nextLetter8)\n    \
    \        val nextLetter10 = vowels.find(letter => letter == nextLetter9)\n   \
    \         val nextLetter11 = vowels.find(letter => letter == nextLetter10)\n \
    \           val nextLetter12 = vowels.find(letter => letter == nextLetter11)\n\
    \            val nextLetter13 = vowels.find(letter => letter == nextLetter12)\n\
    \            val nextLetter14 = vowels.find(letter => letter == nextLetter13)\n\
    \            val nextLetter15 = vowels.find(letter => letter == nextLetter14)\n\
    \            val nextLetter16 = vowels.find(letter => letter == nextLetter15)\n\
    \            val nextLetter17 = vowels.find(letter => letter == nextLetter16)\n\
    \            val nextLetter18 = vowels.find(letter => letter == nextLetter17)\n\
    \            val nextLetter19 = vowels.find(letter => letter == nextLetter18)\n\
    \            val nextLetter20 = vowels.find(letter => letter == nextLetter19)\n\
    \            val nextLetter21 = vowels.find(letter => letter == nextLetter20)\n\
    \            val nextLetter22 = vowels.find(letter => letter == nextLetter21)\n\
    \            val nextLetter23 = vowels.find(letter => letter == nextLetter22)\n\
    \            val nextLetter24 = vowels.find(letter => letter == nextLetter23)\n\
    \            val nextLetter25 = vowels.find(letter => letter == nextLetter24)\n\
    \            val nextLetter26 = vowels.find(letter => letter == nextLetter25)\n\
    \            val nextLetter27 = vowels.find(letter => letter == nextLetter26",
  "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('e','a','i','o','u')\n        val newMessage = message.map(letter\
    \ => alphabet(alphabet.indexOf(letter)) + vowels(vowels.indexOf(letter)) + alphabet(alphabet.indexOf(letter)\
    \ + 1))\n        newMessage.toString.toLowerCase", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ mutable.Buffer.empty[Char]\n        val newAlphabet = mutable.Buffer.empty[Char]\n\
    \        val newVowels = mutable.Buffer.empty[Char]\n        val newMessageLength\
    \ = message.length\n        val newAlphabetLength = alphabet.length\n        val\
    \ newVowelsLength = vowels.length\n        val newAlphabetLength = alphabet.length\n\
    \        val newVowelsLength = vowels.length\n        val newAlphabetLength =\
    \ alphabet.length\n        val newVowelsLength = vowels.length\n        val newAlphabetLength\
    \ = alphabet.length\n        val newVowelsLength = vowels.length\n        val\
    \ newAlphabetLength = alphabet.length\n        val newVowelsLength = vowels.length\n\
    \        val newAlphabetLength = alphabet.length\n        val newVowelsLength\
    \ = vowels.length\n        val newAlphabetLength = alphabet.length\n        val\
    \ newVowelsLength = vowels.length\n        val newAlphabetLength = alphabet.length\n\
    \        val newVowelsLength = vowels.length\n        val newAlphabetLength =\
    \ alphabet.length\n        val newVowelsLength = vowels.length\n        val newAlphabetLength\
    \ = alphabet.length\n        val newVowelsLength = vowels.length\n        val\
    \ newAlphabetLength = alphabet.length\n        val newVowelsLength = vowels.length\n\
    \        val newAlphabetLength = alphabet.length\n        val newVowelsLength\
    \ = vowels.length\n        val newAlphabetLength = alphabet.length\n        val\
    \ newVowelsLength = vowels.length\n        val newAlphabetLength = alphabet.length\n\
    \        val newVowelsLength = vowels.length\n        val newAlphabetLength =\
    \ alphabet.length\n        val newVowelsLength = vowels.length\n        val newAlphabetLength\
    \ = alphabet.length\n        val newVowelsLength = vowels.length\n        val\
    \ newAlphabetLength = alphabet.length\n        val newVowelsLength = vowels.length\n\
    \        val newAlphabetLength = alphabet.length\n        val newVowelsLength\
    \ = vowels.length\n        val newAlphabetLength = alphabet.length\n        val\
    \ newVowelsLength = vowels.length\n        val newAlphabetLength = alphabet.length\n",
  "        val vowels = \"aeiouAEIOU\"\n        val messageList = message.split(\"\
    \")\n        val result = new StringBuilder\n        val vowelsCount = new mutable.HashMap[String,\
    \ Int]()\n        for (i <- 0 until messageList.length) {\n            val currentChar\
    \ = messageList(i)\n            val currentCharLower = currentChar.toLowerCase\n\
    \            val currentCharUpper = currentChar.toUpperCase\n            if (vowels.contains(currentCharLower))\
    \ {\n                vowelsCount.put(currentCharLower, vowelsCount.getOrElse(currentCharLower,\
    \ 0) + 1)\n                vowelsCount.put(currentCharUpper, vowelsCount.getOrElse(currentCharUpper,\
    \ 0) + 1)\n            }\n        }\n        for (i <- 0 until vowelsCount.size)\
    \ {\n            val currentChar = vowelsCount.get(i)._1\n            val currentCharCount\
    \ = vowelsCount.get(i)._2\n            val currentCharLower = currentChar.toLowerCase\n\
    \            val currentCharUpper = currentChar.toUpperCase\n            if (currentCharCount\
    \ > 1) {\n                val currentCharCount2 = vowelsCount.get(i + 1)._2\n\
    \                val currentCharLower2 = vowelsCount.get(i + 1)._1\n         \
    \       if (currentCharCount2 > 1) {\n                    val currentCharCount3\
    \ = vowelsCount.get(i + 2)._2\n                    val currentCharLower3 = vowelsCount.get(i\
    \ + 2)._1\n                    if (currentCharCount3 > 1) {\n                \
    \        val currentCharCount4 = vowelsCount.get(i + 3)._2\n                 \
    \       val currentCharLower4 = vowelsCount.get(i + 3)._1\n                  \
    \      if (currentCharCount4 > 1) {\n                            val currentCharCount5\
    \ = vowelsCount.get(i + 4)._2\n                            val currentCharLower5\
    \ = vowelsCount.get(i + 4)._1\n                            if (currentCharCount5\
    \ > 1) {\n                                val currentCharCount6 = vowelsCount.get(i\
    \ + 5)._2\n                                val currentCharLower6 = vowelsCount.get(i\
    \ + 5)._1\n                                if (currentCharCount6 > 1) {\n    \
    \                                val currentCharCount7 = vowelsCount.get(i + 6)._2\n\
    \                                    val currentCharLower7 = vowelsCount.get(i\
    \ + 6)._1\n                                    if (currentCharCount7 > 1) {\n\
    \                                        val currentCharCount8 = vowelsCount.get(i\
    \ + 7)._2\n                                        val currentCharLower8 = vowelsCount.get(i\
    \ + 7)._1\n                                        if (currentCharCount8 > 1)\
    \ {\n                                            val currentCharCount9 = vowelsCount.get(i\
    \ + 8)._2\n                                            val currentCharLower9 =\
    \ vowelsCount.get(i + 8).", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageArray = message.split(\"\
    \")\n        val newMessage = messageArray.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 1))\n        val newMessageArray = newMessage.map(letter => vowels(vowels.indexOf(letter)\
    \ + 1))\n        newMessageArray.toString.concat(\"'\")", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\")\n        val\
    \ newMessageArray = messageArray.map(letter => \n            if (vowels.contains(letter))\
    \ letter else \n                vowels.indexOf(vowels.find(letter => letter !=\
    \ letter - 2))\n            )\n        val newMessage = messageArray.toList.mkString(\"\
    \")\n        val newMessageArray2 = newMessageArray.toList.map(letter => \n  \
    \          if (vowels.contains(letter)) letter else \n                vowels.indexOf(vowels.find(letter\
    \ => letter != letter - 2))\n            )\n        val newMessage2 = newMessageArray2.toList.mkString(\"\
    \")\n        val newMessageArray3 = newMessage2.split(\"\").map(letter => \n \
    \           if (vowels.contains(letter)) letter else \n                vowels.indexOf(vowels.find(letter\
    \ => letter != letter - 2))\n            )\n        val newMessage3 = newMessageArray3.toList.mkString(\"\
    \")\n        val newMessageArray4 = newMessage3.split(\"\").map(letter => \n \
    \           if (vowels.contains(letter)) letter else \n                vowels.indexOf(vowels.find(letter\
    \ => letter != letter - 2))\n            )\n        val newMessage4 = newMessageArray4.toList.mkString(\"\
    \")\n        val newMessageArray5 = newMessage4.split(\"\").map(letter => \n \
    \           if (vowels.contains(letter)) letter else \n                vowels.indexOf(vowels.find(letter\
    \ => letter != letter - 2))\n            )\n        val newMessage5 = newMessageArray5.toList.mkString(\"\
    \")\n        val newMessageArray6 = newMessage5.split(\"\").map(letter => \n \
    \           if (vowels.contains(letter)) letter else \n                vowels.indexOf(vowels.find(letter\
    \ => letter != letter - 2))\n            )\n        val newMessage6 = newMessageArray6.toList.mkString(\"\
    \")\n        val newMessageArray7 = newMessage6.split(\"\").map(letter => \n \
    \           if (vowels.contains(letter)) letter else \n                vowels.indexOf(vowels.find(letter\
    \ => letter != letter - 2))\n            )\n        val newMessage7 = newMessageArray7.toList.mkString(\"\
    \")\n        val newMessageArray8 = newMessage7.split(\"\").map(letter => \n \
    \           if (vowels.contains(letter)) letter else \n                vowels.indexOf(vowels.find(letter\
    \ => letter != letter - 2))\n            )\n        val newMessage8 = newMessageArray8.toList.mkString(\"\
    \")\n        val newMessageArray9 = newMessage8.split(\"\").map(letter => \n \
    \           if (vowels.contains(letter)) letter else \n                vowels.indexOf(vowels.find(letter\
    \ => letter != letter - 2))\n            )\n        ", "        val vowels = \"\
    aeiouAEIOU\".toCharArray\n        val messageArray = message.toCharArray\n   \
    \     val newMessage = messageArray.map { c =>\n            val index = vowels.indexOf(c)\n\
    \            if (index != -1) {\n                val nextVowel = vowels(index\
    \ + 1)\n                val nextVowelIndex = vowels.indexOf(nextVowel)\n     \
    \           if (nextVowelIndex != -1) {\n                    nextVowel\n     \
    \           } else {\n                    c\n                }\n            }\
    \ else {\n                c\n            }\n        }\n        newMessage.toString",
  "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessage = messageArray.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case 0 => letter\n     \
    \       case 1 => vowels(letter - 1)\n            case 2 => vowels(letter - 2)\n\
    \            case 3 => vowels(letter - 3)\n            case 4 => vowels(letter\
    \ - 4)\n            case 5 => vowels(letter - 5)\n            case 6 => vowels(letter\
    \ - 6)\n            case 7 => vowels(letter - 7)\n            case 8 => vowels(letter\
    \ - 8)\n            case 9 => vowels(letter - 9)\n            case 10 => vowels(letter\
    \ - 10)\n            case 11 => vowels(letter - 11)\n            case 12 => vowels(letter\
    \ - 12)\n            case 13 => vowels(letter - 13)\n            case 14 => vowels(letter\
    \ - 14)\n            case 15 => vowels(letter - 15)\n            case 16 => vowels(letter\
    \ - 16)\n            case 17 => vowels(letter - 17)\n            case 18 => vowels(letter\
    \ - 18)\n            case 19 => vowels(letter - 19)\n            case 20 => vowels(letter\
    \ - 20)\n            case 21 => vowels(letter - 21)\n            case 22 => vowels(letter\
    \ - 22)\n            case 23 => vowels(letter - 23)\n            case 24 => vowels(letter\
    \ - 24)\n            case 25 => vowels(letter - 25)\n            case 26 => vowels(letter\
    \ - 26)\n            case 27 => vowels(letter - 27)\n            case 28 => vowels(letter\
    \ - 28)\n            case 29 => vowels(letter - 29)\n            case 30 => vowels(letter\
    \ - 30)\n            case 31 => vowels(letter - 31)\n            case 32 => vowels(letter\
    \ - 32)\n            case 33 => vowels(letter - 33)\n            case 34 => vowels(letter\
    \ - 34)\n            case 35 => vowels(letter - 35)\n            case 36 => vowels(letter\
    \ - 36)\n            case 37 => vowels(letter - 37)\n            case 38 => vowels(letter\
    \ - 38)\n            case 39 => vowels(letter - 39)\n            case 40 => vowels(letter\
    \ - 40)\n            case 41 => vowels(letter - 41)\n            case 42 => vowels(letter\
    \ - 42)\n            case 43 => vowels(letter - 43)\n            case 44 => vowels(letter\
    \ - 44)\n            case 45 => vowels(letter - 45)\n            case 46 => vowels(letter\
    \ - 46)\n            case 47 => vowels(letter - 47)\n            case 48 => vowels(letter\
    \ - 48)\n            case 49 ", "        val vowels = \"aeiou\"\n        val alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n        val vowelIndexes = vowels.toList.map(alphabet.indexOf(_))\n\
    \        val messageIndexes = message.map(alphabet.indexOf(_))\n        val messageIndexes2\
    \ = messageIndexes.zipWithIndex\n        val messageIndexes3 = messageIndexes2.map(x\
    \ => (x._2, x._1))\n        val messageIndexes4 = messageIndexes3.map(x => (x._1,\
    \ x._2))\n        val messageIndexes5 = messageIndexes4.map(x => (x._2, x._1))\n\
    \        val messageIndexes6 = messageIndexes5.map(x => (x._1, x._2))\n      \
    \  val messageIndexes7 = messageIndexes6.map(x => (x._2, x._1))\n        val messageIndexes8\
    \ = messageIndexes7.map(x => (x._1, x._2))\n        val messageIndexes9 = messageIndexes8.map(x\
    \ => (x._2, x._1))\n        val messageIndexes10 = messageIndexes9.map(x => (x._1,\
    \ x._2))\n        val messageIndexes11 = messageIndexes10.map(x => (x._2, x._1))\n\
    \        val messageIndexes12 = messageIndexes11.map(x => (x._1, x._2))\n    \
    \    val messageIndexes13 = messageIndexes12.map(x => (x._2, x._1))\n        val\
    \ messageIndexes14 = messageIndexes13.map(x => (x._1, x._2))\n        val messageIndexes15\
    \ = messageIndexes14.map(x => (x._2, x._1))\n        val messageIndexes16 = messageIndexes15.map(x\
    \ => (x._1, x._2))\n        val messageIndexes17 = messageIndexes16.map(x => (x._2,\
    \ x._1))\n        val messageIndexes18 = messageIndexes17.map(x => (x._1, x._2))\n\
    \        val messageIndexes19 = messageIndexes18.map(x => (x._2, x._1))\n    \
    \    val messageIndexes20 = messageIndexes19.map(x => (x._1, x._2))\n        val\
    \ messageIndexes21 = messageIndexes20.map(x => (x._2, x._1))\n        val messageIndexes22\
    \ = messageIndexes21.map(x => (x._1, x._2))\n        val messageIndexes23 = messageIndexes22.map(x\
    \ => (x._2, x._1))\n        val messageIndexes24 = messageIndexes23.map(x => (",
  "        var result = \"\"\n        for (letter <- message) {\n            result\
    \ += letter.swapCase\n        }\n        for (vowel <- \"aeiou\") {\n        \
    \    result += vowel.swapCase\n        }\n        for (vowel <- \"AEIOU\") {\n\
    \            result += vowel.swapCase\n        }\n        return result", "  \
    \      val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val newMessage = messageArray.map(letter => \n\
    \            letter match {\n                case letter if letter != 'a' && letter\
    \ != 'e' && letter != 'i' && letter != 'o' && letter != 'u' => {\n           \
    \         val index = alphabet.indexOf(letter)\n                    alphabet(index\
    \ - 2)\n                }\n                case letter if letter != 'a' && letter\
    \ != 'e' && letter != 'i' && letter != 'o' && letter != 'u' => {\n           \
    \         val index = vowels.indexOf(letter)\n                    vowels(index\
    \ - 2)\n                }\n                case letter => {\n                \
    \    letter\n                }\n            }\n        ).mkString(\"\")\n    \
    \    newMessage", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageWithVowels\
    \ = message.toLowerCase.foldLeft(\"\")( (acc, c) => acc + (if (vowels.contains(c))\
    \ c else c.swapCase) + alphabet(alphabet.indexOf(c) + 1) )\n        val messageWithVowelsAndVowelsBefore\
    \ = messageWithVowels.foldLeft(\"\")( (acc, c) => acc + (if (vowels.contains(c))\
    \ c else c.swapCase) + alphabet(alphabet.indexOf(c) + 1) )\n        val messageWithVowelsAndVowelsBeforeAndVowelsAfter\
    \ = messageWithVowelsAndVowelsBefore.foldLeft(\"\")( (acc, c) => acc + (if (vowels.contains(c))\
    \ c else c.swapCase) + alphabet(alphabet.indexOf(c) + 1) )\n        val messageWithVowelsAndVowelsBeforeAndVowelsAfterAndVowelsAfter\
    \ = messageWithVowelsAndVowelsBeforeAndVowelsAfter.foldLeft(\"\")( (acc, c) =>\
    \ acc + (if (vowels.contains(c)) c else c.swapCase) + alphabet(alphabet.indexOf(c)\
    \ + 1) )\n        val messageWithVowelsAndVowelsBeforeAndVowelsAfterAndVowelsAfterAndVowelsAfter\
    \ = messageWithVowelsAndVowelsBeforeAndVowelsAfterAndVowelsAfter.foldLeft(\"\"\
    )( (acc, c) => acc + (if (vowels.contains(c)) c else c.swapCase) + alphabet(alphabet.indexOf(c)\
    \ + 1) )\n        val messageWithVowelsAndVowelsBeforeAndVowelsAfterAndVowelsAfterAndVowelsAfterAndVowelsAfter\
    \ = messageWithVowelsAndVowelsBeforeAndVowelsAfterAndVowelsAfterAndVowelsAfter.foldLeft(\"\
    \")( (acc, c) => acc + (if (vowels.contains(c)) c else c.swapCase) + alphabet(alphabet.indexOf(c)\
    \ + 1) )\n        val message", "        val vowels = \"aeiouAEIOU\"\n       \
    \ val letters = \"abcdefghijklmnopqrstuvwxyz\"\n        val vowelsMap = Map(vowels\
    \ -> letters.indexOf(\"a\"))\n        val lettersMap = Map(letters -> letters.indexOf(\"\
    a\"))\n        val vowelsMap2 = Map(vowels -> letters.indexOf(\"A\"))\n      \
    \  val lettersMap2 = Map(letters -> letters.indexOf(\"A\"))\n        val vowelsMap3\
    \ = Map(vowels -> letters.indexOf(\"e\"))\n        val lettersMap3 = Map(letters\
    \ -> letters.indexOf(\"e\"))\n        val vowelsMap4 = Map(vowels -> letters.indexOf(\"\
    E\"))\n        val lettersMap4 = Map(letters -> letters.indexOf(\"E\"))\n    \
    \    val vowelsMap5 = Map(vowels -> letters.indexOf(\"i\"))\n        val lettersMap5\
    \ = Map(letters -> letters.indexOf(\"i\"))\n        val vowelsMap6 = Map(vowels\
    \ -> letters.indexOf(\"I\"))\n        val lettersMap6 = Map(letters -> letters.indexOf(\"\
    I\"))\n        val vowelsMap7 = Map(vowels -> letters.indexOf(\"o\"))\n      \
    \  val lettersMap7 = Map(letters -> letters.indexOf(\"o\"))\n        val vowelsMap8\
    \ = Map(vowels -> letters.indexOf(\"O\"))\n        val lettersMap8 = Map(letters\
    \ -> letters.indexOf(\"O\"))\n        val vowelsMap9 = Map(vowels -> letters.indexOf(\"\
    u\"))\n        val lettersMap9 = Map(letters -> letters.indexOf(\"u\"))\n    \
    \    val vowelsMap10 = Map(vowels -> letters.indexOf(\"U\"))\n        val lettersMap10\
    \ = Map(letters -> letters.indexOf(\"U\"))\n        val vowelsMap11 = Map(vowels\
    \ -> letters.indexOf(\"y\"))\n        val lettersMap11 = Map(letters -> letters.indexOf(\"\
    y\"))\n        val vowelsMap12 = Map(vowels -> letters.indexOf(\"Y\"))\n     \
    \   val lettersMap12 = Map(letters -> letters.indexOf(\"Y\"))\n        val vowelsMap13\
    \ = Map(vowels -> letters.indexOf(\"o\"))\n        val lettersMap13 = Map(letters\
    \ -> letters.indexOf(\"o\"))\n        val vowelsMap14 = Map(vowels -> letters.indexOf(\"\
    O\"))\n        val lettersMap14 = Map(letters -> letters.indexOf(\"O\"))\n   \
    \     val vowelsMap15 = Map(vowels -> letters.indexOf(\"u\"))\n        val ",
  "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\"\")\n        val encodedMessage = messageList.foldLeft(\"\"\
    ) { (result, currentChar) =>\n            val index = alphabet.indexOf(currentChar)\n\
    \            if (index != -1) {\n                val nextIndex = index + 2\n \
    \               if (nextIndex < alphabet.length) {\n                    val nextChar\
    \ = alphabet(nextIndex)\n                    result + vowels(index) + nextChar\n\
    \                } else {\n                    result + vowels(index)\n      \
    \          }\n            } else {\n                result + currentChar\n   \
    \         }\n        }\n        encodedMessage", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageList = message.split(\"\")\n        val newMessage = messageList.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val nextVowel = vowels(index + 1)\n              \
    \  val nextVowelIndex = vowels.indexOf(nextVowel)\n                if (nextVowelIndex\
    \ != -1) {\n                    val nextVowelIndex = nextVowelIndex + 1\n    \
    \                vowels(index) = vowels(nextVowelIndex)\n                    vowels(nextVowelIndex)\
    \ = vowels(index)\n                } else {\n                    vowels(index)\
    \ = vowels(index + 1)\n                }\n            } else {\n             \
    \   vowels(index) = letter\n            }\n            vowels\n        }).mkString(\"\
    \")\n        newMessage", "        val vowels = \"aeiouAEIOU\"\n        val letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n        val newMessage = mutable.StringBuilder()\n\
    \        val vowelsCount = mutable.Map[String, Int]()\n        val lettersCount\
    \ = mutable.Map[String, Int]()\n        val vowelsVsLetters = mutable.Map[String,\
    \ String]()\n        val vowelsVsLettersCount = mutable.Map[String, Int]()\n \
    \       val vowelsVsLettersCount2 = mutable.Map[String, Int]()\n        val vowelsVsLettersCount3\
    \ = mutable.Map[String, Int]()\n        val vowelsVsLettersCount4 = mutable.Map[String,\
    \ Int]()\n        val vowelsVsLettersCount5 = mutable.Map[String, Int]()\n   \
    \     val vowelsVsLettersCount6 = mutable.Map[String, Int]()\n        val vowelsVsLettersCount7\
    \ = mutable.Map[String, Int]()\n        val vowelsVsLettersCount8 = mutable.Map[String,\
    \ Int]()\n        val vowelsVsLettersCount9 = mutable.Map[String, Int]()\n   \
    \     val vowelsVsLettersCount10 = mutable.Map[String, Int]()\n        val vowelsVsLettersCount11\
    \ = mutable.Map[String, Int]()\n        val vowelsVsLettersCount12 = mutable.Map[String,\
    \ Int]()\n        val vowelsVsLettersCount13 = mutable.Map[String, Int]()\n  \
    \      val vowelsVsLettersCount14 = mutable.Map[String, Int]()\n        val vowelsVsLettersCount15\
    \ = mutable.Map[String, Int]()\n        val vowelsVsLettersCount16 = mutable.Map[String,\
    \ Int]()\n        val vowelsVsLettersCount17 = mutable.Map[String, Int]()\n  \
    \      val vowelsVsLettersCount18 = mutable.Map[String, Int]()\n        val vowelsVsLettersCount19\
    \ = mutable.Map[String, Int]()\n        val vowelsVsLettersCount20 = mutable.Map[String,\
    \ Int]()\n        val vowelsVsLettersCount21 = mutable.Map[String, Int]()\n  \
    \      val vowelsVsLettersCount22 = mutable.Map[String, Int]()\n        val vowelsVsLettersCount23\
    \ = mutable.Map[String, Int]()\n        val vowelsVsLetters", "        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('o','a','e','i','u')\n        val messageList = message.split(\"\
    \")\n        val newMessage = messageList.foldLeft(\"\"){ (result, current) =>\
    \ {\n            val index = alphabet.indexOf(current)\n            val nextIndex\
    \ = index + 2\n            val nextLetter = alphabet(nextIndex)\n            val\
    \ nextVowel = vowels(nextIndex)\n            val nextResult = result + nextLetter\
    \ + nextVowel\n            val nextNextIndex = nextIndex + 2\n            val\
    \ nextNextLetter = alphabet(nextNextIndex)\n            val nextNextVowel = vowels(nextNextIndex)\n\
    \            val nextNextResult = result + nextNextLetter + nextNextVowel\n  \
    \          nextResult\n        }}\n        newMessage", "        val vowels =\
    \ \"aeiouAEIOU\".toCharArray\n        val messageArray = message.toCharArray\n\
    \        val result = new StringBuilder\n        var i = 0\n        while (i <\
    \ messageArray.length) {\n            val letter = messageArray(i)\n         \
    \   if (vowels.contains(letter)) {\n                val nextLetter = messageArray(i\
    \ + 1)\n                if (vowels.contains(nextLetter)) {\n                 \
    \   result.append(letter)\n                    result.append(nextLetter)\n   \
    \                 i += 2\n                } else {\n                    result.append(letter)\n\
    \                    result.append(vowels(vowels.indexOf(letter) + 1))\n     \
    \               i += 1\n                }\n            } else {\n            \
    \    result.append(letter)\n                i += 1\n            }\n        }\n\
    \        return result.toString()", "        val vowels = \"aeiouAEIOU\"\n   \
    \     val letters = \"abcdefghijklmnopqrstuvwxyz\"\n        val newMessage = message.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0)) + 1).map(letter\
    \ => letters.charAt(letter))\n        newMessage.toString", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\")\n        val\
    \ newMessageArray = messageArray.map(letter => {\n            val index = vowels.indexOf(letter)\n\
    \            if (index != -1) {\n                val nextVowel = vowels(index\
    \ + 1)\n                val nextIndex = vowels.indexOf(nextVowel)\n          \
    \      if (nextIndex != -1) {\n                    val nextLetter = vowels(nextIndex\
    \ + 1)\n                    val nextVowelIndex = vowels.indexOf(nextLetter)\n\
    \                    if (nextVowelIndex != -1) {\n                        val\
    \ nextVowelLetter = vowels(nextVowelIndex + 1)\n                        val nextVowelLetterIndex\
    \ = vowels.indexOf(nextVowelLetter)\n                        if (nextVowelLetterIndex\
    \ != -1) {\n                            val nextVowelLetterLetter = vowels(nextVowelLetterIndex\
    \ + 1)\n                            val nextVowelLetterLetterIndex = vowels.indexOf(nextVowelLetterLetter)\n\
    \                            if (nextVowelLetterLetterIndex != -1) {\n       \
    \                         val nextVowelLetterLetterLetter = vowels(nextVowelLetterLetterIndex\
    \ + 1)\n                                val nextVowelLetterLetterLetterIndex =\
    \ vowels.indexOf(nextVowelLetterLetterLetter)\n                              \
    \  if (nextVowelLetterLetterLetterIndex != -1) {\n                           \
    \         val nextVowelLetterLetterLetterLetter = vowels(nextVowelLetterLetterLetterIndex\
    \ + 1)\n                                    val nextVowelLetterLetterLetterLetterIndex\
    \ = vowels.indexOf(nextVowelLetterLetterLetterLetter)\n                      \
    \              if (nextVowelLetterLetterLetterLetterIndex != -1) {\n         \
    \                               val nextVowelLetterLetterLetterLetter = vowels(nextVowelLetterLetterLetterLetterIndex\
    \ + 1)\n                                        val nextVowelLetterLetterLetterLetterIndex\
    \ = vowels.indexOf(nextVowelLetterLetterLetterLetter)\n                      \
    \                  if (nextVowelLetterLetterLetterLetterIndex != -1) {\n     \
    \                                       val nextVowelLetterLetterLetterLetter\
    \ = vowels(nextVowelLetterLetterLetterLetterIndex + 1)\n                     \
    \                       val nextVowelLetterLetterLetterLetterIndex = vowels.indexOf(nextVowelLetterLetterLetterLetter)\n\
    \                                            if (nextVowelLetterLetterLetterLetterIndex\
    \ != -1) {\n                                                val nextVowelLetterLetterLetterLetter\
    \ = vowels(nextVowelLetterLetterLetterLetterIndex + 1)\n                     \
    \                           val nextVowelLetterLetterLetterLetterIndex = vowels.indexOf(nextVowelLetterLetterLetterLetter)\n\
    \                                                if (nextVowelLetterLetterLetterLetterIndex\
    \ != -1) {\n                                                    val ", "     \
    \   val vowels = \"aeiouAEIOU\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageArray = message.split(\"\")\n        val encodedMessage =\
    \ messageArray.map(letter => {\n            if (vowels.contains(letter)) {\n \
    \               val vowelIndex = alphabet.indexOf(vowels)\n                val\
    \ vowel2Index = alphabet.indexOf(vowels, vowelIndex + 1)\n                alphabet(vowel2Index)\
    \ + letter\n            } else {\n                letter\n            }\n    \
    \    }).mkString\n        encodedMessage", "        val vowels = \"aeiouAEIOU\"\
    .toCharArray\n        val messageArray = message.toCharArray\n        val newMessageArray\
    \ = Array.ofDim[Char](messageArray.length)\n        val newMessageArray2 = Array.ofDim[Char](messageArray.length)\n\
    \        val newMessageArray3 = Array.ofDim[Char](messageArray.length)\n     \
    \   val newMessageArray4 = Array.ofDim[Char](messageArray.length)\n        val\
    \ newMessageArray5 = Array.ofDim[Char](messageArray.length)\n        val newMessageArray6\
    \ = Array.ofDim[Char](messageArray.length)\n        val newMessageArray7 = Array.ofDim[Char](messageArray.length)\n\
    \        val newMessageArray8 = Array.ofDim[Char](messageArray.length)\n     \
    \   val newMessageArray9 = Array.ofDim[Char](messageArray.length)\n        val\
    \ newMessageArray10 = Array.ofDim[Char](messageArray.length)\n        val newMessageArray11\
    \ = Array.ofDim[Char](messageArray.length)\n        val newMessageArray12 = Array.ofDim[Char](messageArray.length)\n\
    \        val newMessageArray13 = Array.ofDim[Char](messageArray.length)\n    \
    \    val newMessageArray14 = Array.ofDim[Char](messageArray.length)\n        val\
    \ newMessageArray15 = Array.ofDim[Char](messageArray.length)\n        val newMessageArray16\
    \ = Array.ofDim[Char](messageArray.length)\n        val newMessageArray17 = Array.ofDim[Char](messageArray.length)\n\
    \        val newMessageArray18 = Array.ofDim[Char](messageArray.length)\n    \
    \    val newMessageArray19 = Array.ofDim[Char](messageArray.length)\n        val\
    \ newMessageArray20 = Array.ofDim[Char](messageArray.length)\n        val newMessageArray21\
    \ = Array.ofDim[Char](messageArray.length)\n        val newMessageArray22 = Array.ofDim[Char](messageArray.length)\n\
    \        val newMessageArray23 = Array.ofDim[Char](messageArray.length)\n    \
    \    val newMessageArray24 = Array.ofDim[Char](messageArray.length)\n        val\
    \ newMessageArray25 = Array.ofDim[Char](messageArray.length)\n        val newMessageArray26\
    \ = Array.ofDim[Char](messageArray.length)\n        val newMessageArray27 = Array.ofDim[Char](messageArray.length)\n\
    \        val newMessageArray28 = Array.ofDim[Char](message", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\n   \
    \     val vowelsMap = Map(vowels -> letters.indexOf(\"a\"))\n        val lettersMap\
    \ = Map(letters -> letters.indexOf(\"a\"))\n        val messageList = message.split(\"\
    \")\n        val encodedMessage = messageList.map(letter => lettersMap(letter)\
    \ match {\n            case -1 => letter\n            case letter => vowelsMap(letter)\n\
    \        }).mkString(\"\")\n        encodedMessage", "        val vowels = \"\
    aeiouAEIOU\".toCharArray\n        val messageArray = message.toCharArray\n   \
    \     val result = new StringBuilder\n        val vowelsCount = new mutable.HashMap[Char,\
    \ Int]()\n        for (i <- 0 until messageArray.length) {\n            val char\
    \ = messageArray(i)\n            if (vowels.contains(char)) {\n              \
    \  vowelsCount(char) += 1\n            }\n        }\n        for (i <- 0 until\
    \ vowels.length) {\n            val vowel = vowels(i)\n            val vowelCount\
    \ = vowelsCount(vowel)\n            val nextVowel = vowels(i + 1)\n          \
    \  if (vowelCount > 1) {\n                val nextVowelCount = vowelsCount(nextVowel)\n\
    \                if (vowelCount == nextVowelCount) {\n                    result.append(vowel)\n\
    \                } else {\n                    result.append(vowel)\n        \
    \            result.append(nextVowel)\n                }\n            } else {\n\
    \                result.append(vowel)\n            }\n        }\n        return\
    \ result.toString", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 1))\n        val newVowels = vowels.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 2))\n        newMessage ++ newVowels",
  "        val vowels = \"aeiouAEIOU\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageArray = message.split(\"\")\n        val encodedMessage =\
    \ messageArray.foldLeft(\"\") { (result, currentChar) =>\n            val index\
    \ = alphabet.indexOf(currentChar)\n            if (index != -1) {\n          \
    \      val nextIndex = index + 2\n                if (nextIndex < alphabet.length)\
    \ {\n                    result + vowels(index) + alphabet(nextIndex)\n      \
    \          } else {\n                    result + vowels(index)\n            \
    \    }\n            } else {\n                result + currentChar\n         \
    \   }\n        }\n        encodedMessage", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageArray = message.split(\"\")\n        val result = new StringBuilder\n\
    \        for(i <- 0 until messageArray.length){\n            val currentChar =\
    \ messageArray(i)\n            val nextChar = messageArray(i+1)\n            if(vowels.contains(currentChar)\
    \ && vowels.contains(nextChar)){\n                val index = vowels.indexOf(currentChar)\n\
    \                val nextIndex = vowels.indexOf(nextChar)\n                val\
    \ nextChar2 = vowels(nextIndex+1)\n                val nextChar3 = vowels(nextIndex+2)\n\
    \                val nextChar4 = vowels(nextIndex+3)\n                val nextChar5\
    \ = vowels(nextIndex+4)\n                val nextChar6 = vowels(nextIndex+5)\n\
    \                val nextChar7 = vowels(nextIndex+6)\n                val nextChar8\
    \ = vowels(nextIndex+7)\n                val nextChar9 = vowels(nextIndex+8)\n\
    \                val nextChar10 = vowels(nextIndex+9)\n                val nextChar11\
    \ = vowels(nextIndex+10)\n                val nextChar12 = vowels(nextIndex+11)\n\
    \                val nextChar13 = vowels(nextIndex+12)\n                val nextChar14\
    \ = vowels(nextIndex+13)\n                val nextChar15 = vowels(nextIndex+14)\n\
    \                val nextChar16 = vowels(nextIndex+15)\n                val nextChar17\
    \ = vowels(nextIndex+16)\n                val nextChar18 = vowels(nextIndex+17)\n\
    \                val nextChar19 = vowels(nextIndex+18)\n                val nextChar20\
    \ = vowels(nextIndex+19)\n                val nextChar21 = vowels(nextIndex+20)\n\
    \                val nextChar22 = vowels(nextIndex+21)\n                val nextChar23\
    \ = vowels(nextIndex+22)\n                val nextChar24 = vowels(nextIndex+23)\n\
    \                val nextChar25 = vowels(nextIndex+24)\n                val nextChar26\
    \ = vowels(nextIndex+25)\n                val nextChar27 = vowels(nextIndex+26)\n\
    \                val nextChar28 = vowels(nextIndex+27)\n                val nextChar29\
    \ = vowels(nextIndex+28)\n                val nextChar30 = vowels(nextIndex+29)\n\
    \                val nextChar31 = vowels(nextIndex+30)\n                val nextChar32\
    \ = vowels(nextIndex+31)\n                val nextChar33 = vowels(nextIndex+32)\n\
    \                val nextChar34 = vowels(next", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageArray = message.split(\"\")\n        val newMessageArray\
    \ = messageArray.map(letter => \n            vowels.indexOf(letter) match {\n\
    \                case -1 => letter\n                case 0 => letter\n       \
    \         case 1 => vowels(vowels.indexOf(letter) + 1)\n            })\n     \
    \   val newMessage = messageArray.toList.mkString(\"\")\n        val newMessageArray2\
    \ = newMessageArray.map(letter => \n            vowels.indexOf(letter) match {\n\
    \                case -1 => letter\n                case 0 => letter\n       \
    \         case 1 => vowels(vowels.indexOf(letter) + 1)\n            })\n     \
    \   val newMessage2 = newMessageArray2.toList.mkString(\"\")\n        val newMessageArray3\
    \ = newMessage2.split(\"\").map(letter => \n            vowels.indexOf(letter)\
    \ match {\n                case -1 => letter\n                case 0 => letter\n\
    \                case 1 => vowels(vowels.indexOf(letter) + 1)\n            })\n\
    \        val newMessage3 = newMessageArray3.toList.mkString(\"\")\n        val\
    \ newMessageArray4 = newMessage3.split(\"\").map(letter => \n            vowels.indexOf(letter)\
    \ match {\n                case -1 => letter\n                case 0 => letter\n\
    \                case 1 => vowels(vowels.indexOf(letter) + 1)\n            })\n\
    \        val newMessage4 = newMessageArray4.toList.mkString(\"\")\n        val\
    \ newMessageArray5 = newMessage4.split(\"\").map(letter => \n            vowels.indexOf(letter)\
    \ match {\n                case -1 => letter\n                case 0 => letter\n\
    \                case 1 => vowels(vowels.indexOf(letter) + 1)\n            })\n\
    \        val newMessage5 = newMessageArray5.toList.mkString(\"\")\n        val\
    \ newMessageArray6 = newMessage5.split(\"\").map(letter => \n            vowels.indexOf(letter)\
    \ match {\n                case -1 => letter\n                case 0 => letter\n\
    \                case 1 => vowels(vowels.indexOf(letter) + 1)\n            })\n\
    \        val newMessage6 = newMessageArray6.toList.mkString(\"\")\n        val\
    \ newMessageArray7 = newMessage6.split(\"\").map(letter => \n            vowels.indexOf(letter)\
    \ match {\n                case -1 => letter\n                case 0 => letter\n\
    \                case 1 => vowels(vowels.indexOf(letter) + 1)\n            })\n\
    \        val newMessage7 = newMessageArray7.toList.mkString(\"\")\n        val\
    \ newMessageArray8 = newMessage7.split(\"\").map(letter => \n            vowels.indexOf(letter)\
    \ match {\n                case -1 => letter\n                case 0 => letter\n\
    \                case 1 => vowels(vowels.indexOf(letter) + 1)\n            })\n\
    \        val newMessage", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val vowelsMap = Map(vowels\
    \ -> vowels.size)\n        val messageList = message.split(\"\")\n        val\
    \ newMessageList = messageList.map(letter => {\n            val vowelIndex = alphabet.indexOf(letter)\n\
    \            val vowelCount = vowelsMap(vowels)\n            val newLetter = vowels(vowelIndex\
    \ + vowelCount)\n            vowelsMap(vowels) = vowelsMap(vowels) - vowelCount\n\
    \            newLetter\n        })\n        newMessageList.mkString(\"\")", " \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.map(letter => letter match {\n\
    \            case letter if vowels.contains(letter) => vowels(vowels.indexOf(letter)+1)\n\
    \            case letter if alphabet.contains(letter) => alphabet(alphabet.indexOf(letter)+1)\n\
    \            case letter => letter\n        }).mkString(\"\")\n        encodedMessage",
  "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => \n            letter\
    \ match {\n                case vowel => vowel\n                case _ => vowels.indexOf(letter)\
    \ + vowels.indexOf(vowel) + 1 \n            }\n        )\n        val newMessage\
    \ = messageArray.toList.mkString(\"\")\n        val newMessageArray2 = newMessageArray.map(letter\
    \ => \n            letter match {\n                case vowel => vowel\n     \
    \           case _ => vowels.indexOf(letter) + vowels.indexOf(vowel) + 1 \n  \
    \          }\n        )\n        val newMessage2 = newMessageArray2.toList.mkString(\"\
    \")\n        val newMessageArray3 = newMessage2.split(\"\")\n        val newMessage3\
    \ = newMessageArray3.map(letter => \n            letter match {\n            \
    \    case vowel => vowel\n                case _ => vowels.indexOf(letter) + vowels.indexOf(vowel)\
    \ + 1 \n            }\n        )\n        val newMessage4 = newMessage3.toList.mkString(\"\
    \")\n        val newMessageArray5 = newMessage4.split(\"\")\n        val newMessage5\
    \ = newMessageArray5.map(letter => \n            letter match {\n            \
    \    case vowel => vowel\n                case _ => vowels.indexOf(letter) + vowels.indexOf(vowel)\
    \ + 1 \n            }\n        )\n        val newMessage6 = newMessage5.toList.mkString(\"\
    \")\n        val newMessageArray7 = newMessage6.split(\"\")\n        val newMessage7\
    \ = newMessageArray7.map(letter => \n            letter match {\n            \
    \    case vowel => vowel\n                case _ => vowels.indexOf(letter) + vowels.indexOf(vowel)\
    \ + 1 \n            }\n        )\n        val newMessage8 = newMessage7.toList.mkString(\"\
    \")\n        val newMessageArray9 = newMessage8.split(\"\")\n        val newMessage9\
    \ = newMessageArray9.map(letter => \n            letter match {\n            \
    \    case vowel => vowel\n                case _ => vowels.indexOf(letter) + vowels.indexOf(vowel)\
    \ + 1 \n            }\n        )\n        val newMessage10 = newMessage9.toList.mkString(\"\
    \")\n        val newMessageArray11 = newMessage10.split(\"\")\n        val newMessage11\
    \ = newMessageArray11.map(letter => \n            letter match {\n           \
    \     case vowel => vowel\n                case _ => vowels.indexOf(letter) +\
    \ vowels.indexOf(vowel) + 1 \n            }\n        )\n        val newMessage12\
    \ = newMessage11.toList.mkString(\"\")\n        val newMessageArray13 = newMessage12.split(\"\
    \")\n        val newMessage13 = newMessageArray13.map(letter => \n           \
    \ letter match {\n                case vowel => ", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageWithVowels = message.replaceAll(vowels, vowels.toUpperCase)\n\
    \        val messageWithVowelsAndTwoAheadVowels = messageWithVowels.replaceAll(\"\
    [aeiou]{2}\", vowels.toUpperCase)\n        val messageWithVowelsAndTwoAheadVowelsAndTwoAheadVowels\
    \ = messageWithVowelsAndTwoAheadVowels.replaceAll(\"[aeiou]{3}\", vowels.toUpperCase)\n\
    \        val messageWithVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowels\
    \ = messageWithVowelsAndTwoAheadVowelsAndTwoAheadVowels.replaceAll(\"[aeiou]{4}\"\
    , vowels.toUpperCase)\n        val messageWithVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowels\
    \ = messageWithVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowels.replaceAll(\"\
    [aeiou]{5}\", vowels.toUpperCase)\n        val messageWithVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowels\
    \ = messageWithVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowels.replaceAll(\"\
    [aeiou]{6}\", vowels.toUpperCase)\n        val messageWithVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowels\
    \ = messageWithVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowels.replaceAll(\"\
    [aeiou]{7}\", vowels.toUpperCase)\n        val messageWithVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowel",
  "        val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray = message.toCharArray\n\
    \        val newMessage = messageArray.map { c =>\n            if (vowels.contains(c))\
    \ {\n                val index = vowels.indexOf(c)\n                val nextIndex\
    \ = index + 1\n                if (nextIndex < vowels.length) {\n            \
    \        vowels(index) = vowels(nextIndex)\n                }\n              \
    \  vowels(index)\n            } else {\n                c\n            }\n   \
    \     }\n        newMessage.toString", "        val vowels = \"aeiouAEIOU\"\n\
    \        val vowelsMap : Map[Char, Char] = Map('a' -> 'A', 'e' -> 'E', 'i' ->\
    \ 'I', 'o' -> 'O', 'u' -> 'U')\n        val messageChars = message.toCharArray\n\
    \        val encodedMessage = messageChars.map(c => vowelsMap(c))\n        val\
    \ encodedMessageString = encodedMessage.toList\n        val encodedMessageStringBuilder\
    \ = new StringBuilder\n        encodedMessageStringBuilder.append(encodedMessageString(0))\n\
    \        encodedMessageStringBuilder.append(encodedMessageString(1))\n       \
    \ encodedMessageStringBuilder.append(encodedMessageString(2))\n        encodedMessageStringBuilder.append(encodedMessageString(3))\n\
    \        encodedMessageStringBuilder.append(encodedMessageString(4))\n       \
    \ encodedMessageStringBuilder.append(encodedMessageString(5))\n        encodedMessageStringBuilder.append(encodedMessageString(6))\n\
    \        encodedMessageStringBuilder.append(encodedMessageString(7))\n       \
    \ encodedMessageStringBuilder.append(encodedMessageString(8))\n        encodedMessageStringBuilder.append(encodedMessageString(9))\n\
    \        encodedMessageStringBuilder.append(encodedMessageString(10))\n      \
    \  encodedMessageStringBuilder.append(encodedMessageString(11))\n        encodedMessageStringBuilder.append(encodedMessageString(12))\n\
    \        encodedMessageStringBuilder.append(encodedMessageString(13))\n      \
    \  encodedMessageStringBuilder.append(encodedMessageString(14))\n        encodedMessageStringBuilder.append(encodedMessageString(15))\n\
    \        encodedMessageStringBuilder.append(encodedMessageString(16))\n      \
    \  encodedMessageStringBuilder.append(encodedMessageString(17))\n        encodedMessageStringBuilder.append(encodedMessageString(18))\n\
    \        encodedMessageStringBuilder.append(encodedMessageString(19))\n      \
    \  encodedMessageStringBuilder.append(encodedMessageString(20))\n        encodedMessageStringBuilder.append(encodedMessageString(21))\n\
    \        encodedMessageStringBuilder.append(encodedMessageString(22))\n      \
    \  encodedMessageStringBuilder.append(encodedMessageString(23))\n        encodedMessageStringBuilder.append(encodedMessageString(24))\n\
    \        encodedMessageStringBuilder.append(encodedMessageString(25))\n      \
    \  encodedMessageStringBuilder.append(encodedMessageString(26))\n        encodedMessageStringBuilder.append(encodedMessageString(27))\n\
    \        encodedMessageStringBuilder.append(encodedMessageString(28))\n      \
    \  encodedMessageStringBuilder.append(encodedMessageString(29))\n        encodedMessageStringBuilder.append(encodedMessageString(30))\n\
    \        encodedMessageStringBuilder.append(encodedMessageString(31))\n      \
    \  encodedMessageStringBuilder.append(encodedMessage", "        val vowels = \"\
    aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\n        val\
    \ vowelsMap = Map(vowels -> letters.indexOf((vowels.toUpperCase).charAt(0)))\n\
    \        val lettersMap = Map(letters -> letters.indexOf((letters.toUpperCase).charAt(0)))\n\
    \        val messageArray = message.split(\"\")\n        val newMessage = messageArray.map\
    \ { x =>\n            if (vowelsMap.contains(x))\n                lettersMap.get(x)\
    \ + lettersMap.get(x) + lettersMap.get(x) + lettersMap.get(x)\n            else\n\
    \                x\n        }.mkString(\"\")\n        newMessage", "        val\
    \ vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\")\n  \
    \      val newMessageArray = messageArray.map(letter => \n            val index\
    \ = vowels.indexOf(letter)\n            if (index != -1) vowels(index - 1) else\
    \ letter)\n        val newMessage = newMessageArray.toList\n        val newMessageString\
    \ = newMessage.toString\n        val newMessageArray2 = newMessageString.split(\"\
    \")\n        val newMessageArray3 = newMessageArray2.map(letter => \n        \
    \    val index = vowels.indexOf(letter)\n            if (index != -1) vowels(index\
    \ - 2) else letter)\n        val newMessage2 = newMessageArray3.toList\n     \
    \   val newMessageString2 = newMessage2.toString\n        val newMessageArray4\
    \ = newMessageString2.split(\"\")\n        val newMessageArray5 = newMessageArray4.map(letter\
    \ => \n            val index = vowels.indexOf(letter)\n            if (index !=\
    \ -1) vowels(index - 3) else letter)\n        val newMessage3 = newMessageArray5.toList\n\
    \        val newMessageString3 = newMessage3.toString\n        val newMessageArray6\
    \ = newMessageString3.split(\"\")\n        val newMessageArray7 = newMessageArray6.map(letter\
    \ => \n            val index = vowels.indexOf(letter)\n            if (index !=\
    \ -1) vowels(index - 4) else letter)\n        val newMessage4 = newMessageArray7.toList\n\
    \        val newMessageString4 = newMessage4.toString\n        val newMessageArray8\
    \ = newMessageString4.split(\"\")\n        val newMessageArray9 = newMessageArray8.map(letter\
    \ => \n            val index = vowels.indexOf(letter)\n            if (index !=\
    \ -1) vowels(index - 5) else letter)\n        val newMessage5 = newMessageArray9.toList\n\
    \        val newMessageString5 = newMessage5.toString\n        val newMessageArray10\
    \ = newMessageString5.split(\"\")\n        val newMessageArray11 = newMessageArray10.map(letter\
    \ => \n            val index = vowels.indexOf(letter)\n            if (index !=\
    \ -1) vowels(index - 6) else letter)\n        val newMessage6 = newMessageArray11.toList\n\
    \        val newMessageString6 = newMessage6.toString\n        val newMessageArray12\
    \ = newMessageString6.split(\"\")\n        val newMessageArray13 = newMessageArray12.map(letter\
    \ => \n            val index = vowels.indexOf(letter)\n            if (index !=\
    \ -1) vowels(index - 7) else letter)\n        val newMessage7 = newMessageArray13.toList\n\
    \        val newMessageString7 = newMessage7.toString\n        val newMessageArray14\
    \ = new", "        val vowels = \"aeiouAEIOU\"\n        val alphabet = List(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\")\n        val result = new StringBuilder\n        for\
    \ (i <- 0 until message.length) {\n            val index = alphabet.indexOf(message.charAt(i))\n\
    \            if (index != -1) {\n                val nextIndex = alphabet.indexOf(message.charAt(i+1))\n\
    \                if (nextIndex != -1) {\n                    val nextChar = alphabet(nextIndex+1)\n\
    \                    result.append(alphabet(index))\n                    result.append(nextChar)\n\
    \                    result.append(alphabet(nextIndex))\n                }\n \
    \               else {\n                    result.append(alphabet(index))\n \
    \               }\n            }\n            else {\n                result.append(message.charAt(i))\n\
    \            }\n        }\n        result.toString", "        val vowels = \"\
    aeiouAEIOU\"\n        val messageArray = message.split(\"\")\n        val newMessage\
    \ = messageArray.map(letter => {\n            val index = vowels.indexOf(letter)\n\
    \            if (index != -1) {\n                val vowelIndex = index + 1\n\
    \                val vowel = vowels(vowelIndex)\n                vowel\n     \
    \       } else {\n                letter\n            }\n        }).mkString(\"\
    \")\n        newMessage", "        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val result = new StringBuilder\n        for (i\
    \ <- 0 until messageArray.length) {\n            val letter = messageArray(i)\n\
    \            if (vowels.contains(letter)) {\n                val nextVowel = vowels.indexOf(letter)\
    \ + 1\n                if (nextVowel < vowels.length)\n                    result.append(vowels(nextVowel))\n\
    \                else\n                    result.append(vowels(0))\n        \
    \    } else {\n                result.append(letter)\n            }\n        }\n\
    \        return result.toString()", "        val vowels = \"aeiouAEIOU\"\n   \
    \     val messageArray = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                vowels(vowelIndex) = letter\n        \
    \        vowel\n            } else {\n                letter\n            }\n\
    \        })\n        val newMessage = newMessageArray.toList\n        val newMessageString\
    \ = newMessage.toString.replaceAll(\"\\\\W\", \"\")\n        val newMessageStringArray\
    \ = newMessageString.split(\"\")\n        val newMessageStringArrayLength = newMessageStringArray.length\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength2 = newMessageStringArrayLength / 2\n \
    \       val newMessageStringArrayLength3 = newMessageStringArrayLength - newMessageStringArrayLength2\n\
    \        val newMessageStringArrayLength4 = newMessageStringArrayLength - newMessageStringArrayLength3\n\
    \        val newMessageStringArrayLength5 = newMessageStringArrayLength - newMessageStringArrayLength4\n\
    \        val newMessageStringArrayLength6 = newMessageStringArrayLength - newMessageStringArrayLength5\n\
    \        val newMessageStringArrayLength7 = newMessageStringArrayLength - newMessageStringArrayLength6\n\
    \        val newMessageStringArrayLength8 = newMessageStringArrayLength - newMessageStringArrayLength7\n\
    \        val newMessageStringArrayLength9 = newMessageStringArrayLength - newMessageStringArrayLength8\n\
    \        val newMessageStringArrayLength10 = newMessageStringArrayLength - newMessageStringArrayLength9\n\
    \        val newMessageStringArrayLength11 = newMessageStringArrayLength - newMessageStringArrayLength10\n\
    \        val newMessageStringArrayLength12 = newMessageStringArrayLength - newMessageStringArrayLength11\n\
    \        val newMessageStringArrayLength13 = newMessageStringArrayLength - newMessageStringArrayLength12\n\
    \        val newMessageStringArrayLength14 = newMessageStringArrayLength - newMessageStringArrayLength13\n\
    \        val newMessageStringArrayLength15 = newMessageStringArrayLength - newMessageStringArrayLength14\n\
    \        val newMessageStringArrayLength16 = newMessageStringArrayLength - newMessageStringArrayLength15\n\
    \        val newMessageStringArrayLength17 = newMessageStringArrayLength - newMessageStringArrayLength16\n\
    \        val newMessageStringArrayLength18 = newMessageStringArrayLength - newMessageStringArrayLength17\n\
    \        val newMessageStringArrayLength19 = newMessageStringArrayLength", " \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageArray = message.split(\"\")\n        val newMessageArray\
    \ = messageArray.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString).map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString)\n\
    \        val newMessage = messageArray.mkString(\"\")\n        val newMessageArray2\
    \ = newMessageArray.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString).map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString)\n\
    \        val newMessage2 = newMessageArray.mkString(\"\")\n        val newMessageArray3\
    \ = newMessageArray2.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString).map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString)\n\
    \        val newMessage3 = newMessageArray2.mkString(\"\")\n        val newMessageArray4\
    \ = newMessageArray3.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString).map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString)\n\
    \        val newMessage4 = newMessageArray3.mkString(\"\")\n        val newMessageArray5\
    \ = newMessageArray4.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString).map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString)\n\
    \        val newMessage5 = newMessageArray4.mkString(\"\")\n        val newMessageArray6\
    \ = newMessageArray5.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString).map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString)\n\
    \        val newMessage6 = newMessageArray5.mkString(\"\")\n        val newMessageArray7\
    \ = newMessageArray6.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString).map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString)\n\
    \        val newMessage7 = newMessageArray6.mkString(\"\")\n        val newMessageArray8\
    \ = newMessageArray7.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString).map(letter\
    \ => ", "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => \n            letter\
    \ match {\n                case vowel => vowels.indexOf(letter) + 2\n        \
    \        case _ => vowels.indexOf(letter)\n            }\n        )\n        val\
    \ newMessage = newMessageArray.toList\n        val newMessageString = newMessage.toString\n\
    \        val newMessageStringArray = newMessageString.split(\" \")\n        val\
    \ newMessageStringArrayLength = newMessageStringArray.length\n        val newMessageStringArrayLength2\
    \ = newMessageStringArrayLength / 2\n        val newMessageStringArrayLength3\
    \ = newMessageStringArrayLength - newMessageStringArrayLength2\n        val newMessageStringArrayLength4\
    \ = newMessageStringArrayLength3 - newMessageStringArrayLength2\n        val newMessageStringArrayLength5\
    \ = newMessageStringArrayLength4 - newMessageStringArrayLength2\n        val newMessageStringArrayLength6\
    \ = newMessageStringArrayLength5 - newMessageStringArrayLength2\n        val newMessageStringArrayLength7\
    \ = newMessageStringArrayLength6 - newMessageStringArrayLength2\n        val newMessageStringArrayLength8\
    \ = newMessageStringArrayLength7 - newMessageStringArrayLength2\n        val newMessageStringArrayLength9\
    \ = newMessageStringArrayLength8 - newMessageStringArrayLength2\n        val newMessageStringArrayLength10\
    \ = newMessageStringArrayLength9 - newMessageStringArrayLength2\n        val newMessageStringArrayLength11\
    \ = newMessageStringArrayLength10 - newMessageStringArrayLength2\n        val\
    \ newMessageStringArrayLength12 = newMessageStringArrayLength11 - newMessageStringArrayLength2\n\
    \        val newMessageStringArrayLength13 = newMessageStringArrayLength12 - newMessageStringArrayLength2\n\
    \        val newMessageStringArrayLength14 = newMessageStringArrayLength13 - newMessageStringArrayLength2\n\
    \        val newMessageStringArrayLength15 = newMessageStringArrayLength14 - newMessageStringArrayLength2\n\
    \        val newMessageStringArrayLength16 = newMessageStringArrayLength15 - newMessageStringArrayLength2\n\
    \        val newMessageStringArrayLength17 = newMessageStringArrayLength16 - newMessageStringArrayLength2\n\
    \        val newMessageStringArrayLength18 = newMessageStringArrayLength17 - newMessageStringArrayLength2\n\
    \        val newMessageStringArrayLength19 = newMessageStringArrayLength18 - newMessageStringArrayLength2\n\
    \        val newMessageStringArrayLength20 = newMessageStringArrayLength19 - newMessageStringArrayLength2",
  "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.map(letter => \n            letter\
    \ match {\n                case letter if vowels.contains(letter) => vowels(vowels.indexOf(letter)+1)\n\
    \                case letter if alphabet.contains(letter) => alphabet(alphabet.indexOf(letter)+1)\n\
    \                case letter => letter\n            }\n        ).mkString(\"\"\
    )\n        encodedMessage", "        val vowels = \"aeiouAEIOU\"\n        val\
    \ messageArray = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                vowel\n            } else {\n        \
    \        letter\n            }\n        })\n        val newMessage = newMessageArray.toList\n\
    \        val newMessageString = newMessage.toString.replaceAll(\"[aeiouAEIOU]\"\
    , \"$0\")\n        newMessageString", "        var result = \"\"\n        for\
    \ (i <- 0 until message.length){\n            val c = message.charAt(i)\n    \
    \        val l = c.toLowerCase \n            val v = l.toUpperCase\n         \
    \   val vowels = \"AEIOUaeiou\"\n            val vowelIndex = vowels.indexOf(v)\n\
    \            if (vowelIndex != -1){\n                val vowelIndex = vowelIndex\
    \ + 2\n                val vowel = vowels(vowelIndex)\n                result\
    \ += vowel\n            }\n            result += c\n        }\n        return\
    \ result", "        val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelsMap : Map[Char, Int] = \n            Map(a -> 1, e -> 1, i\
    \ -> 1, o -> 1, u -> 1, y -> 1, \n                A -> 2, E -> 2, I -> 2, O ->\
    \ 2, U -> 2, Y -> 2)\n        val lettersMap : Map[Char, Int] = \n           \
    \ Map(a -> 1, b -> 2, c -> 3, d -> 4, e -> 5, f -> 6, g -> 7, h -> 8, \n     \
    \           i -> 9, j -> 10, k -> 11, l -> 12, m -> 13, n -> 14, o -> 15, p ->\
    \ 16, \n                q -> 17, r -> 18, s -> 19, t -> 20, u -> 21, v -> 22,\
    \ w -> 23, x -> 24, \n                y -> 25, z -> 26)\n        val messageArray\
    \ = message.split(\"\")\n        val newMessage = messageArray.map(letter => \n\
    \            lettersMap(letter) + vowelsMap(vowels.charAt(letter))).mkString\n\
    \        newMessage", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.foldLeft(\"\
    \"){ (acc, elem) => \n            val index = alphabet.indexOf(elem)\n       \
    \     val vowelIndex = vowels.indexOf(elem)\n            val nextIndex = index\
    \ + vowelIndex\n            val nextElem = alphabet(nextIndex)\n            acc\
    \ += nextElem\n        }\n        encodedMessage", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) match {\n            case -1\
    \ => letter\n            case i => alphabet(i+2)\n        })\n        val messageWithVowelsReversed\
    \ = messageWithVowels.reverse\n        val messageWithVowelsReversedWithVowelsReplaced\
    \ = messageWithVowelsReversed.map(letter => vowels.indexOf(letter) match {\n \
    \           case -1 => letter\n            case i => alphabet(i+2)\n        })\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversed = messageWithVowelsReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced\
    \ = messageWithVowelsReversedWithVowelsReplacedReversed.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case i => alphabet(i+2)\n\
    \        })\n        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplaced\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversed.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case i => alphabet(i+2)\n        })\n        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplace", "        var result\
    \ = \"\"\n        for(i <- 0 until message.length){\n            val currentChar\
    \ = message.charAt(i)\n            val nextChar = message.charAt(i+1)\n      \
    \      val nextCharIndex = nextChar match {\n                case 'a' => 0\n \
    \               case 'e' => 1\n                case 'i' => 2\n               \
    \ case 'o' => 3\n                case 'u' => 4\n                case 'y' => 5\n\
    \                case _ => -1\n            }\n            val currentCharIndex\
    \ = currentChar match {\n                case 'a' => 0\n                case 'e'\
    \ => 1\n                case 'i' => 2\n                case 'o' => 3\n       \
    \         case 'u' => 4\n                case 'y' => 5\n                case _\
    \ => -1\n            }\n            if(currentCharIndex == -1){\n            \
    \    result += currentChar\n            }else if(nextCharIndex == -1){\n     \
    \           result += currentChar\n            }else if(nextCharIndex - currentCharIndex\
    \ == 2){\n                result += currentChar\n            }else{\n        \
    \        result += currentChar.swapCase\n            }\n        }\n        return\
    \ result", "        val vowels = \"aeiouAEIOU\"\n        val vowelsMap = new mutable.HashMap[Char,\
    \ Char]()\n        for (i <- 0 until message.length)\n            vowelsMap(message.charAt(i))\
    \ match {\n                case None => \n                    vowelsMap(message.charAt(i))\
    \ match {\n                        case None => \n                           \
    \ vowelsMap(message.charAt(i)) match {\n                                case None\
    \ => \n                                    vowelsMap(message.charAt(i)) match\
    \ {\n                                        case None => \n                 \
    \                           vowelsMap(message.charAt(i)) match {\n           \
    \                                     case None => \n                        \
    \                            vowelsMap(message.charAt(i)) match {\n          \
    \                                              case None => \n               \
    \                                             vowelsMap(message.charAt(i)) match\
    \ {\n                                                                case None\
    \ => \n                                                                    vowelsMap(message.charAt(i))\
    \ match {\n                                                                  \
    \      case None => \n                                                       \
    \                     vowelsMap(message.charAt(i)) match {\n                 \
    \                                                               case None => \n\
    \                                                                            \
    \        vowelsMap(message.charAt(i)) match {\n                              \
    \                                                          case None => \n   \
    \                                                                            \
    \             vowelsMap(message.charAt(i)) match {\n                         \
    \                                                                       case None\
    \ => \n                                                                      \
    \                              vowelsMap(message.charAt(i)) match {\n        \
    \                                                                            \
    \                    case None => \n                                         \
    \                                                                   vowelsMap(message.charAt(i))\
    \ match {\n                                                                  \
    \                                              case None => \n               \
    \                                                                            \
    \                         vowelsMap(message.charAt(i)) match {\n             \
    \                                                                            \
    \                               case None => \n                              \
    \                                                                            \
    \                  vowelsMap(message.charAt(i)) match {\n                    \
    \                                                                            \
    \                                case None => \n                             \
    \                                                                            \
    \                           vowelsMap(message.charAt(i)) match {\n           \
    \                                                                            \
    \                                                 case None => \n            \
    \                                                                            \
    \                                                    vowelsMap(message.charAt(i))\
    \ match {\n                                                                  \
    \                                                                            \
    \  case None => \n                                                           \
    \                                                                            \
    \             vowelsMap(message.charAt(i)) match {\n                         \
    \                                                                            \
    \                                                   case None => \n          \
    \                                                                            \
    \                                                                      vowelsMap(message.charAt(i))\
    \ match {\n                                                                  \
    \                                                                            \
    \                  case None => \n                                           \
    \                                                                            \
    \                                             vowelsMap(message.charAt(i)) match\
    \ {\n                                                                        \
    \                                                                            \
    \                    case None => \n                                         \
    \                                                                            \
    \                                                       vowelsMap(message.charAt(i))\
    \ match {\n                                                                  \
    \                                                                            \
    \                                  case None => \n                           \
    \                                                                            \
    \                                                                            \
    \ vowelsMap(message.charAt(i)) match {\n                                     \
    \                                                                            \
    \                                                                       case None\
    \ => \n                                                                      \
    \                                                                            \
    \                                          vowelsMap(message.charAt(i)) match\
    \ {\n                                                                        \
    \                                                                            \
    \                                            case None => \n                 \
    \                                                                            \
    \                                                                            \
    \                           vowelsMap(message.charAt(i)) match {\n           \
    \                                                                            \
    \                                                                            \
    \                                     case None => \n                        \
    \                                                                            \
    \                                                                            \
    \                            vowelsMap(message.charAt(i)) match {\n          \
    \                                                                            \
    \                                                                            \
    \                                              case None => \n               \
    \                                                                            \
    \                                                                            \
    \                                             vowelsMap(message.charAt(i)) match\
    \ {\n                                                                        \
    \                                                                            \
    \                                                                    case None ",
  "        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels = message.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case i => vowels(i + 2)\n        })\n        val messageWithVowelsAndVowelsTwoAhead\
    \ = (messageWithVowels zip vowels).map { \n            case (vowel, i) => vowels(i\
    \ + 2)\n        }\n        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAhead zip vowels).map { \n            case (vowel,\
    \ i) => vowels(i + 2)\n        }\n        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAhead zip vowels).map { \n\
    \            case (vowel, i) => vowels(i + 2)\n        }\n        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead zip\
    \ vowels).map { \n            case (vowel, i) => vowels(i + 2)\n        }\n  \
    \      val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ zip vowels).map { \n            case (vowel, i) => vowels(i + 2)\n        }\n\
    \        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAnd",
  "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.foldLeft(\"\
    \") { (result, currentChar) =>\n            val index = alphabet.indexOf(currentChar)\n\
    \            if (index != -1) {\n                val nextIndex = index + 2\n \
    \               if (nextIndex < alphabet.length) {\n                    result\
    \ + alphabet(nextIndex) + alphabet(index)\n                } else {\n        \
    \            result + alphabet(index)\n                }\n            } else {\n\
    \                result + currentChar\n            }\n        }\n        encodedMessage",
  "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                val newLetter = vowel.charAt(0)\n                val newIndex\
    \ = vowels.indexOf(newLetter)\n                val newVowel = vowels(newIndex)\n\
    \                newVowel + letter\n            } else {\n                letter\n\
    \            }\n        })\n        newMessageArray.toString.toUpperCase", " \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelMap = new mutable.HashMap[String, String]()\n        val letterMap\
    \ = new mutable.HashMap[String, String]()\n        val messageArray = message.split(\"\
    \")\n        messageArray.foreach(letter => {\n            val letterIndex = letters.indexOf(letter)\n\
    \            val vowelIndex = vowels.indexOf(letter)\n            if (vowelIndex\
    \ != -1) {\n                vowelMap(letter) = letters(vowelIndex + 1)\n     \
    \       }\n            if (letterIndex != -1) {\n                letterMap(letter)\
    \ = letters(letterIndex + 1)\n            }\n        })\n        messageArray.foreach(letter\
    \ => {\n            val letterIndex = letters.indexOf(letter)\n            val\
    \ vowelIndex = vowels.indexOf(letter)\n            if (vowelIndex != -1) {\n \
    \               letterMap(letter) = vowelMap(vowelIndex)\n            }\n    \
    \        if (letterIndex != -1) {\n                vowelMap(letter) = letterMap(letterIndex)\n\
    \            }\n        })\n        messageArray.toList.mkString(\"\")", "   \
    \     val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\"\")\n        val newMessageList = messageList.map(letter =>\
    \ \n            letter match {\n                case 'a' => alphabet(0)\n    \
    \            case 'b' => alphabet(1)\n                case 'c' => alphabet(2)\n\
    \                case 'd' => alphabet(3)\n                case 'e' => alphabet(4)\n\
    \                case 'f' => alphabet(5)\n                case 'g' => alphabet(6)\n\
    \                case 'h' => alphabet(7)\n                case 'i' => alphabet(8)\n\
    \                case 'j' => alphabet(9)\n                case 'k' => alphabet(10)\n\
    \                case 'l' => alphabet(11)\n                case 'm' => alphabet(12)\n\
    \                case 'n' => alphabet(13)\n                case 'o' => alphabet(14)\n\
    \                case 'p' => alphabet(15)\n                case 'q' => alphabet(16)\n\
    \                case 'r' => alphabet(17)\n                case 's' => alphabet(18)\n\
    \                case 't' => alphabet(19)\n                case 'u' => alphabet(20)\n\
    \                case 'v' => alphabet(21)\n                case 'w' => alphabet(22)\n\
    \                case 'x' => alphabet(23)\n                case 'y' => alphabet(24)\n\
    \                case 'z' => alphabet(25)\n                case _ => letter\n\
    \            }\n        )\n        val newMessage = messageList.mkString(\"\"\
    )\n        val newVowels = vowels.map(letter => \n            letter match {\n\
    \                case 'a' => alphabet(0)\n                case 'e' => alphabet(1)\n\
    \                case 'i' => alphabet(2)\n                case 'o' => alphabet(3)\n\
    \                case 'u' => alphabet(4)\n                case _ => letter\n \
    \           }\n        )\n        newMessageList.zip(newVowels).map(\n       \
    \     tuple => tuple._1 match {\n                case 'a' => tuple._2\n      \
    \          case 'e' => tuple._2\n                case 'i' => tuple._2\n      \
    \          case 'o' => tuple._2\n                case 'u' => tuple._2\n      \
    \          case _ => tuple._1\n            }\n        ).mkString(\"\")", "   \
    \     var result = \"\"\n        var vowels = \"aeiouAEIOU\"\n        var vowelCount\
    \ = 0\n        var currentVowel = \"\"\n        var currentLetter = \"\"\n   \
    \     var currentLetterCount = 0\n        for(letter <- message) {\n         \
    \   currentLetter = letter\n            currentLetterCount = 0\n            for(vowel\
    \ <- vowels) {\n                if(currentLetter == vowel) {\n               \
    \     currentLetterCount += 1\n                }\n            }\n            if(currentLetterCount\
    \ > 2) {\n                currentVowel = vowel\n                vowelCount +=\
    \ 1\n            }\n            result += currentVowel\n        }\n        return\
    \ result", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 1))\n        val newMessage2 = newMessage.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage3 = newMessage2.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage4 = newMessage3.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage5 = newMessage4.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage6 = newMessage5.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage7 = newMessage6.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage8 = newMessage7.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage9 = newMessage8.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage10 = newMessage9.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage11 = newMessage10.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage12 = newMessage11.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage13 = newMessage12.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage14 = newMessage13.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage15 = newMessage14.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage16 = newMessage15.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage17 = newMessage16.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage18 = newMessage17.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage19 = newMessage18.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage20 = newMessage19.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage21 = newMessage20.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage22 = newMessage21.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n", "        val vowels = \"aeiouAEIOU\"\
    \n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\n        val vowelMap :\
    \ Map[Char, Char] = \n            Map(a -> \"a\", e -> \"e\", i -> \"i\", o ->\
    \ \"o\", u -> \"u\")\n        val letterMap : Map[Char, Char] = \n           \
    \ Map(a -> \"A\", e -> \"E\", i -> \"I\", o -> \"O\", u -> \"U\")\n        val\
    \ messageList = message.split(\"\")\n        val encodedMessage = messageList.foldLeft(\"\
    \")(\n            { case (acc, c) => \n                acc + (if (vowels.contains(c))\
    \ \n                    vowelMap(c) + letterMap(c) \n                else \n \
    \                   letterMap(c) + vowelMap(c))\n            }\n        )\n  \
    \      encodedMessage", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map { x =>\
    \ \n            val index = alphabet.indexOf(x)\n            if (index != -1)\
    \ alphabet(index) else x\n        }\n        val newMessage = messageArray.mkString(\"\
    \")\n        val newMessageArray2 = newMessage.split(\"\")\n        newMessageArray2.map\
    \ { x =>\n            if (vowels.contains(x)) vowels(vowels.indexOf(x) + 2) else\
    \ x\n        }.mkString(\"\")", "        var result = \"\"\n        for (letter\
    \ <- message) {\n            val index = english.indexOf(letter)\n           \
    \ if (index != -1) {\n                val nextLetter = english(index + 1)\n  \
    \              if (nextLetter != letter) {\n                    result += nextLetter\n\
    \                }\n            }\n        }\n        result", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  \
    \      val newMessage = message.map(letter => alphabet.indexOf(letter) + vowels.indexOf(letter))\n\
    \        val newMessage2 = newMessage.map(letter => alphabet.indexOf(letter) +\
    \ vowels.indexOf(letter) + 2)\n        val newMessage3 = newMessage2.map(letter\
    \ => alphabet.indexOf(letter) + vowels.indexOf(letter) + 3)\n        val newMessage4\
    \ = newMessage3.map(letter => alphabet.indexOf(letter) + vowels.indexOf(letter)\
    \ + 4)\n        val newMessage5 = newMessage4.map(letter => alphabet.indexOf(letter)\
    \ + vowels.indexOf(letter) + 5)\n        val newMessage6 = newMessage5.map(letter\
    \ => alphabet.indexOf(letter) + vowels.indexOf(letter) + 6)\n        val newMessage7\
    \ = newMessage6.map(letter => alphabet.indexOf(letter) + vowels.indexOf(letter)\
    \ + 7)\n        val newMessage8 = newMessage7.map(letter => alphabet.indexOf(letter)\
    \ + vowels.indexOf(letter) + 8)\n        val newMessage9 = newMessage8.map(letter\
    \ => alphabet.indexOf(letter) + vowels.indexOf(letter) + 9)\n        val newMessage10\
    \ = newMessage9.map(letter => alphabet.indexOf(letter) + vowels.indexOf(letter)\
    \ + 10)\n        val newMessage11 = newMessage10.map(letter => alphabet.indexOf(letter)\
    \ + vowels.indexOf(letter) + 11)\n        val newMessage12 = newMessage11.map(letter\
    \ => alphabet.indexOf(letter) + vowels.indexOf(letter) + 12)\n        val newMessage13\
    \ = newMessage12.map(letter => alphabet.indexOf(letter) + vowels.indexOf(letter)\
    \ + 13)\n        val newMessage14 = newMessage13.map(letter => alphabet.indexOf(letter)\
    \ + vowels.indexOf(letter) + 14)\n        val newMessage15 = newMessage14.map(letter\
    \ => alphabet.indexOf(letter) + vowels.indexOf(letter) + 15)\n        val newMessage16\
    \ = newMessage15.map(letter => alphabet.indexOf(letter) + vowels.indexOf(letter)\
    \ + 16)\n        val newMessage17 = newMessage16.map(letter => alphabet.indexOf(letter)\
    \ + vowels.indexOf(letter) + 17)\n        val newMessage18 = newMessage17.map(letter\
    \ => alphabet.indexOf(letter) + vowels.indexOf(letter) + 18)\n        val newMessage19\
    \ = newMessage18.map(letter => alphabet.indexOf(letter) + vowels.indexOf(letter)\
    \ + 19)\n        val newMessage20 = newMessage19.map(letter => alphabet.indexOf(letter)\
    \ + vowels.indexOf(letter) + 20)\n        val newMessage21 = newMessage20.map(letter\
    \ => alphabet.indexOf(letter) + vowels.indexOf(letter) + 21)\n        val new",
  "        val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelsMap : Map[Char, Int] = Map(a -> 1, e -> 1, i -> 1, o -> 1,\
    \ u -> 1, y -> 1, \n            a -> 2, e -> 2, i -> 2, o -> 2, u -> 2, y -> 2,\
    \ a -> 3, e -> 3, i -> 3, o -> 3, u -> 3, y -> 3)\n        val lettersMap : Map[Char,\
    \ Int] = Map(a -> 1, b -> 1, c -> 1, d -> 1, e -> 1, f -> 1, g -> 1, h -> 1, i\
    \ -> 1, j -> 1, k -> 1, l -> 1, m -> 1, n -> 1, o -> 1, p -> 1, q -> 1, r -> 1,\
    \ s -> 1, t -> 1, u -> 1, v -> 1, w -> 1, x -> 1, y -> 1, z -> 1)\n        val\
    \ messageMap : Map[Char, Int] = Map('a'->1, 'b'->1, 'c'->1, 'd'->1, 'e'->1, 'f'->1,\
    \ 'g'->1, 'h'->1, 'i'->1, 'j'->1, 'k'->1, 'l'->1, 'm'->1, 'n'->1, 'o'->1, 'p'->1,\
    \ 'q'->1, 'r'->1, 's'->1, 't'->1, 'u'->1, 'v'->1, 'w'->1, 'x'->1, 'y'->1, 'z'->1)\n\
    \        val messageMap2 = Map('a'->1, 'b'->1, 'c'->1, 'd'->1, 'e'->1, 'f'->1,\
    \ 'g'->1, 'h'->1, 'i'->1, 'j'->1, 'k'->1, 'l'->1, 'm'->1, 'n'->1, 'o'->1, 'p'->1,\
    \ 'q'->1, 'r'->1, 's'->1, 't'->1, 'u'->1, 'v'->1, 'w'->1, 'x'->1, 'y'->1, 'z'->1)\n\
    \        val messageMap3 = Map('a'->1, 'b'->1, 'c'->1, 'd'->1, 'e'->1, 'f'->1,\
    \ 'g'->1, 'h'->1, 'i'->1, 'j'->1, 'k'->1, 'l'->1, 'm'->1, 'n'->1, 'o'->1, 'p'->1,\
    \ 'q'->1, 'r'->1, 's'->1, 't'->1, 'u'->1, 'v'->1, 'w'->1, 'x'->1, 'y'->1, 'z'->1)\n\
    \        val messageMap4 = Map('a'->1, 'b'->1, 'c'->1, 'd'->1, 'e'->1, '", " \
    \       val vowels = \"aeiou\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageArray = message.split(\"\")\n        val newMessageArray\
    \ = messageArray.map(letter => {\n            val index = alphabet.indexOf(letter)\n\
    \            val vowelIndex = vowels.indexOf(letter)\n            val vowel =\
    \ vowels.charAt(vowelIndex)\n            val vowel2 = vowels.charAt(vowelIndex\
    \ + 1)\n            val newLetter = if (index > 0 && vowelIndex > 0) letter else\
    \ vowel\n            val newLetter2 = if (index > 0 && vowelIndex > 0) letter\
    \ else vowel2\n            newLetter + newLetter2\n        })\n        newMessageArray.toString.replaceAll(\"\
    \\\\s+\", \" \")", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageArray = message.split(\"\
    \")\n        val messageArrayLength = messageArray.length\n        val encodedMessage\
    \ = messageArray.map(letter => \n            letter match {\n                case\
    \ letter if letter != ' ' => {\n                    val index = alphabet.indexOf(letter)\n\
    \                    val vowelIndex = vowels.indexOf(letter)\n               \
    \     val nextVowelIndex = vowelIndex + 2\n                    val nextVowel =\
    \ alphabet(nextVowelIndex)\n                    alphabet(index) match {\n    \
    \                    case letter if letter != nextVowel => letter\n          \
    \              case letter => nextVowel\n                    }\n             \
    \   }\n                case letter => letter\n            }\n        ).mkString(\"\
    \")\n        encodedMessage", "        val vowels = \"aeiouAEIOU\"\n        val\
    \ messageList = message.split(\"\")\n        val encodedMessage = messageList.foldLeft(\"\
    \") { (result, letter) =>\n            val vowelIndex = vowels.indexOf(letter)\n\
    \            if (vowelIndex != -1) {\n                val vowel = vowels(vowelIndex)\n\
    \                val vowelIndex = vowels.indexOf(vowel)\n                val vowelIndex\
    \ = vowelIndex + 2\n                val vowel = vowels(vowelIndex)\n         \
    \       result + vowel\n            } else {\n                result + letter\n\
    \            }\n        }\n        encodedMessage", "        val vowels = \"aeiouAEIOU\"\
    .toCharArray\n        val messageArray = message.toCharArray\n        val newMessageArray\
    \ = ArrayBuffer.empty[Char]\n        val vowelCounts = mutable.Map[Char, Int]()\n\
    \        for (i <- 0 until messageArray.length) {\n            val currentChar\
    \ = messageArray(i)\n            val currentCharCount = vowelCounts.getOrElse(currentChar,\
    \ 0)\n            vowelCounts += (currentChar -> currentCharCount + 1)\n     \
    \   }\n        vowelCounts.foreach {\n            case (vowel, count) =>\n   \
    \             val vowelIndex = vowels.indexOf(vowel)\n                val newVowel\
    \ = vowels(vowelIndex + 2)\n                val newCount = count + 2\n       \
    \         vowelCounts += (vowel -> newCount)\n                newMessageArray\
    \ += newVowel\n        }\n        newMessageArray.toString.reverse", "       \
    \ val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageWithVowels = message.toLowerCase.split(\"\").map(letter =>\
    \ vowels.indexOf(letter) + letters.indexOf(letter))\n        val messageWithVowelsReversed\
    \ = messageWithVowels.reverse\n        val messageWithVowelsReversedString = messageWithVowelsReversed.mkString(\"\
    \")\n        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        ", "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                val replacement = vowels(vowelIndex - 1) + vowel\n          \
    \      replacement\n            } else {\n                letter\n           \
    \ }\n        })\n        val newMessage = newMessageArray.toList\n        newMessage.toString",
  "        val vowels = \"aeiouAEIOU\"\n        val messageLength = message.length\n\
    \        val encodedMessage = message.map(letter => vowels.indexOf(letter) match\
    \ {\n            case -1 => letter\n            case i => vowels(i + 2)\n    \
    \    }).mkString\n        val encodedMessageLength = encodedMessage.length\n \
    \       val encodedMessageLength = encodedMessageLength + 2\n        val encodedMessageLength\
    \ = encodedMessageLength + 2\n        val encodedMessageLength = encodedMessageLength\
    \ + 2\n        val encodedMessageLength = encodedMessageLength + 2\n        val\
    \ encodedMessageLength = encodedMessageLength + 2\n        val encodedMessageLength\
    \ = encodedMessageLength + 2\n        val encodedMessageLength = encodedMessageLength\
    \ + 2\n        val encodedMessageLength = encodedMessageLength + 2\n        val\
    \ encodedMessageLength = encodedMessageLength + 2\n        val encodedMessageLength\
    \ = encodedMessageLength + 2\n        val encodedMessageLength = encodedMessageLength\
    \ + 2\n        val encodedMessageLength = encodedMessageLength + 2\n        val\
    \ encodedMessageLength = encodedMessageLength + 2\n        val encodedMessageLength\
    \ = encodedMessageLength + 2\n        val encodedMessageLength = encodedMessageLength\
    \ + 2\n        val encodedMessageLength = encodedMessageLength + 2\n        val\
    \ encodedMessageLength = encodedMessageLength + 2\n        val encodedMessageLength\
    \ = encodedMessageLength + 2\n        val encodedMessageLength = encodedMessageLength\
    \ + 2\n        val encodedMessageLength = encodedMessageLength + 2\n        val\
    \ encodedMessageLength = encodedMessageLength + 2\n        val encodedMessageLength\
    \ = encodedMessageLength + 2\n        val encodedMessageLength = encodedMessageLength\
    \ + 2\n        val encodedMessageLength = encodedMessageLength + 2\n        val\
    \ encodedMessageLength = encodedMessageLength + 2\n        val encodedMessageLength\
    \ = encodedMessageLength + 2\n        val encodedMessageLength = encodedMessageLength\
    \ + 2\n        val encodedMessageLength = encodedMessageLength + 2\n        val\
    \ encodedMessageLength = encodedMessageLength + 2\n        val encodedMessageLength\
    \ = encodedMessageLength + 2\n        val encodedMessageLength = encodedMessageLength\
    \ + 2\n        val encodedMessageLength = encodedMessageLength + 2\n        val\
    \ encodedMessageLength = encodedMessageLength + 2\n        val encodedMessageLength\
    \ = encodedMessageLength + 2\n        val encodedMessageLength = encodedMessageLength\
    \ + 2\n        val encodedMessageLength = encodedMessageLength + 2\n        val\
    \ encodedMessageLength = encodedMessageLength + 2\n        val encodedMessageLength\
    \ = encodedMessageLength + 2\n        val encodedMessageLength = encodedMessageLength\
    \ + 2\n        val encodedMessageLength = encodedMessageLength + 2\n        val\
    \ encodedMessageLength = encodedMessageLength + 2", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\"\")\n        val newMessageList = messageList.map(x => \n  \
    \          if (x matches vowels) x else alphabet(alphabet.indexOf(x) + 1))\n \
    \       val newMessage = newMessageList.mkString(\"\")\n        val newMessageList\
    \ = newMessage.split(\"\")\n        val newMessageList = newMessageList.map(x\
    \ => \n            if (x matches vowels) x else alphabet(alphabet.indexOf(x) +\
    \ 1))\n        val newMessage = newMessageList.mkString(\"\")\n        val newMessageList\
    \ = newMessage.split(\"\")\n        val newMessageList = newMessageList.map(x\
    \ => \n            if (x matches vowels) x else alphabet(alphabet.indexOf(x) +\
    \ 1))\n        val newMessage = newMessageList.mkString(\"\")\n        val newMessageList\
    \ = newMessage.split(\"\")\n        val newMessageList = newMessageList.map(x\
    \ => \n            if (x matches vowels) x else alphabet(alphabet.indexOf(x) +\
    \ 1))\n        val newMessage = newMessageList.mkString(\"\")\n        val newMessageList\
    \ = newMessage.split(\"\")\n        val newMessageList = newMessageList.map(x\
    \ => \n            if (x matches vowels) x else alphabet(alphabet.indexOf(x) +\
    \ 1))\n        val newMessage = newMessageList.mkString(\"\")\n        val newMessageList\
    \ = newMessage.split(\"\")\n        val newMessageList = newMessageList.map(x\
    \ => \n            if (x matches vowels) x else alphabet(alphabet.indexOf(x) +\
    \ 1))\n        val newMessage = newMessageList.mkString(\"\")\n        val newMessageList\
    \ = newMessage.split(\"\")\n        val newMessageList = newMessageList.map(x\
    \ => \n            if (x matches vowels) x else alphabet(alphabet.indexOf(x) +\
    \ 1))\n        val newMessage = newMessageList.mkString(\"\")\n        val newMessageList\
    \ = newMessage.split(\"\")\n        val newMessageList = newMessageList.map(x\
    \ => \n            if (x matches vowels) x else alphabet(alphabet.indexOf(x) +\
    \ 1))\n        val newMessage = newMessageList.mkString(\"\")\n        val newMessageList\
    \ = newMessage.split(\"\")\n        val newMessageList = newMessageList.map(x\
    \ => \n            if (x matches vowels) x else alphabet(alphabet.indexOf(x) +\
    \ 1))\n        val newMessage = newMessageList.mkString(\"\")\n", "        val\
    \ vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelMap = new mutable.HashMap[String, String]()\n        val letterMap\
    \ = new mutable.HashMap[String, String]()\n        val messageArray = message.split(\"\
    \")\n        val messageArrayLength = messageArray.length\n        val newMessage\
    \ = \"\"\n        for(i <- 0 until messageArrayLength){\n            val currentChar\
    \ = messageArray(i)\n            val currentCharIndex = letters.indexOf(currentChar)\n\
    \            val currentCharVowelIndex = vowels.indexOf(currentChar)\n       \
    \     val currentCharVowelIndex2 = letters.indexOf(messageArray(i + 1))\n    \
    \        val currentCharVowelIndex3 = letters.indexOf(messageArray(i + 2))\n \
    \           if(currentCharIndex != -1){\n                val currentCharVowel\
    \ = vowels(currentCharIndex)\n                val currentCharVowel2 = vowels(currentCharVowelIndex2)\n\
    \                val currentCharVowel3 = vowels(currentCharVowelIndex3)\n    \
    \            val currentCharVowel4 = vowels(currentCharVowelIndex4)\n        \
    \        val currentCharVowel5 = vowels(currentCharVowelIndex5)\n            \
    \    val currentCharVowel6 = vowels(currentCharVowelIndex6)\n                val\
    \ currentCharVowel7 = vowels(currentCharVowelIndex7)\n                val currentCharVowel8\
    \ = vowels(currentCharVowelIndex8)\n                val currentCharVowel9 = vowels(currentCharVowelIndex9)\n\
    \                val currentCharVowel10 = vowels(currentCharVowelIndex10)\n  \
    \              val currentCharVowel11 = vowels(currentCharVowelIndex11)\n    \
    \            val currentCharVowel12 = vowels(currentCharVowelIndex12)\n      \
    \          val currentCharVowel13 = vowels(currentCharVowelIndex13)\n        \
    \        val currentCharVowel14 = vowels(currentCharVowelIndex14)\n          \
    \      val currentCharVowel15 = vowels(currentCharVowelIndex15)\n            \
    \    val currentCharVowel16 = vowels(currentCharVowelIndex16)\n              \
    \  val currentCharVowel17 = vowels(currentCharVowelIndex17)\n                val\
    \ currentCharVowel18 = vowels(currentCharVowelIndex18)\n                val currentCharVowel19\
    \ = vowels(currentCharVow", "        val vowels = \"aeiouAEIOU\"\n        val\
    \ letters = \"abcdefghijklmnopqrstuvwxyz\"\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.map(letter => {\n            val\
    \ index = letters.indexOf(letter)\n            if (index != -1) {\n          \
    \      val vowelIndex = vowels.indexOf(letter)\n                if (vowelIndex\
    \ != -1) {\n                    val vowel = vowels(vowelIndex)\n             \
    \       val vowel2 = vowels(vowelIndex + 1)\n                    val letterIndex\
    \ = letters.indexOf(vowel2)\n                    if (letterIndex != -1) {\n  \
    \                      val letter = letters(letterIndex)\n                   \
    \     val letter2 = letters(letterIndex + 1)\n                        val letter3\
    \ = letters(letterIndex + 2)\n                        val letter4 = letters(letterIndex\
    \ + 3)\n                        val letter5 = letters(letterIndex + 4)\n     \
    \                   val letter6 = letters(letterIndex + 5)\n                 \
    \       val letter7 = letters(letterIndex + 6)\n                        val letter8\
    \ = letters(letterIndex + 7)\n                        val letter9 = letters(letterIndex\
    \ + 8)\n                        val letter10 = letters(letterIndex + 9)\n    \
    \                    val letter11 = letters(letterIndex + 10)\n              \
    \          val letter12 = letters(letterIndex + 11)\n                        val\
    \ letter13 = letters(letterIndex + 12)\n                        val letter14 =\
    \ letters(letterIndex + 13)\n                        val letter15 = letters(letterIndex\
    \ + 14)\n                        val letter16 = letters(letterIndex + 15)\n  \
    \                      val letter17 = letters(letterIndex + 16)\n            \
    \            val letter18 = letters(letterIndex + 17)\n                      \
    \  val letter19 = letters(letterIndex + 18)\n                        val letter20\
    \ = letters(letterIndex + 19)\n                        val letter21 = letters(letterIndex\
    \ + 20)\n                        val letter22 = letters(letterIndex + 21)\n  \
    \                      val letter23 = letters(letterIndex + 22)\n            \
    \            val letter24 = letters(letterIndex + 23)\n                      \
    \  val letter25 = letters(letterIndex + 24)\n                        val letter26\
    \ = letters(letterIndex + 25)\n                        val letter27 = letters(letterIndex\
    \ + 26)\n                        val letter28 = letters(letterIndex + 27)\n  \
    \                      val letter29 = letters(letterIndex + 28)\n            \
    \            val letter30 = letters(letterIndex + 29)\n                      \
    \  val letter31 = letters(letterIndex + 30)\n                        val letter32\
    \ = letters(letterIndex + 31)\n                        val letter33 = letters(letterIndex\
    \ + 32)\n                        val letter34 = letters(letterIndex + 33", " \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.map(letter => \n            vowels.indexOf(letter)\
    \ match {\n                case -1 => letter\n                case 0 => letter\n\
    \                case 1 => vowels(vowels.indexOf(vowels.tail) + 1)\n         \
    \   }\n        ).mkString(\"\")\n        encodedMessage", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val vowelsMap : Map[Char, Char] = Map(a -> 'a', e\
    \ -> 'e', i -> 'i', o -> 'o', u -> 'u')\n        val messageMap : Map[Char, Char]\
    \ = Map('T' -> 'T', 'G' -> 'G', 'H' -> 'H', 'K' -> 'K', 'M' -> 'M', 'C' -> 'C',\
    \ 'G' -> 'G', 'SS' -> 'SS', 'GG' -> 'GG')\n        val messageWithVowels : String\
    \ = message\n        val messageWithVowelsMap : Map[Char, Char] = messageWithVowels.map(messageMap)\n\
    \        val messageWithVowelsMapWithVowelsMap : Map[Char, Char] = messageWithVowelsMap.map(vowelsMap)\n\
    \        val messageWithVowelsMapWithVowelsMapWithVowelsMap : Map[Char, Char]\
    \ = messageWithVowelsMapWithVowelsMap.map(vowelsMap)\n        val messageWithVowelsMapWithVowelsMapWithVowelsMapWithVowelsMap\
    \ : Map[Char, Char] = messageWithVowelsMapWithVowelsMapWithVowelsMap.map(vowelsMap)\n\
    \        val messageWithVowelsMapWithVowelsMapWithVowelsMapWithVowelsMapWithVowelsMap\
    \ : Map[Char, Char] = messageWithVowelsMapWithVowelsMapWithVowelsMapWithVowelsMap.map(vowelsMap)\n\
    \        val messageWithVowelsMapWithVowelsMapWithVowelsMapWithVowelsMapWithVowelsMapWithVowelsMap\
    \ : Map[Char, Char] = messageWithVowelsMapWithVowelsMapWithVowelsMapWithVowelsMapWithVowelsMap.map(vowelsMap)\n\
    \        val messageWithVowelsMapWithVowelsMapWithVowelsMapWithVowelsMapWithVowelsMapWithVowelsMapWithVowelsMap\
    \ : Map[Char, Char] = messageWithVowelsMapWithVowelsMapWithVowelsMapWithVow",
  "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.foldLeft(\"\"){ (result, currentChar)\
    \ =>\n            val vowelIndex = vowels.indexOf(currentChar)\n            if\
    \ (vowelIndex != -1) {\n                val vowel = vowels(vowelIndex)\n     \
    \           val vowelIndex = vowels.indexOf(vowel, vowelIndex + 1)\n         \
    \       if (vowelIndex != -1) {\n                    val nextVowel = vowels(vowelIndex)\n\
    \                    result + nextVowel\n                } else {\n          \
    \          result + currentChar\n                }\n            } else {\n   \
    \             result + currentChar\n            }\n        }", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val vowelsMap : Map[Char, Char] = \n            Map('a'\
    \ -> 'A', 'e' -> 'E', 'i' -> 'I', 'o' -> 'O', 'u' -> 'U')\n        val vowelsMap2\
    \ = Map('e' -> 'E', 'i' -> 'I', 'o' -> 'O', 'u' -> 'U')\n        val vowelsMap3\
    \ = Map('e' -> 'E', 'i' -> 'I', 'o' -> 'O', 'u' -> 'U')\n        val vowelsMap4\
    \ = Map('e' -> 'E', 'i' -> 'I', 'o' -> 'O', 'u' -> 'U')\n        val vowelsMap5\
    \ = Map('e' -> 'E', 'i' -> 'I', 'o' -> 'O', 'u' -> 'U')\n        val vowelsMap6\
    \ = Map('e' -> 'E', 'i' -> 'I', 'o' -> 'O', 'u' -> 'U')\n        val vowelsMap7\
    \ = Map('e' -> 'E', 'i' -> 'I', 'o' -> 'O', 'u' -> 'U')\n        val vowelsMap8\
    \ = Map('e' -> 'E', 'i' -> 'I', 'o' -> 'O', 'u' -> 'U')\n        val vowelsMap9\
    \ = Map('e' -> 'E', 'i' -> 'I', 'o' -> 'O', 'u' -> 'U')\n        val vowelsMap10\
    \ = Map('e' -> 'E', 'i' -> 'I', 'o' -> 'O', 'u' -> 'U')\n        val vowelsMap11\
    \ = Map('e' -> 'E', 'i' -> 'I', 'o' -> 'O', 'u' -> 'U')\n        val vowelsMap12\
    \ = Map('e' -> 'E', 'i' -> 'I', 'o' -> 'O', 'u' -> 'U')\n        val vowelsMap13\
    \ = Map('e' -> 'E', 'i' -> 'I', 'o' -> 'O', 'u' -> 'U')\n        val vowelsMap14\
    \ = Map('e' -> 'E', 'i' -> 'I', 'o' -> 'O', 'u' -> 'U')\n        val vowelsMap15\
    \ = Map('e' -> 'E', 'i' -> 'I', 'o' -> 'O', 'u' -> 'U')\n        val vowelsMap16\
    \ = Map('e' -> 'E', 'i' -> 'I', 'o' ", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageList = message.split(\"\
    \ \")\n        val encodedMessage = messageList.foldLeft(\"\") { (result, word)\
    \ =>\n            val firstLetter = word.charAt(0)\n            val secondLetter\
    \ = word.charAt(1)\n            val thirdLetter = word.charAt(2)\n           \
    \ val fourthLetter = word.charAt(3)\n            val fifthLetter = word.charAt(4)\n\
    \            val sixthLetter = word.charAt(5)\n            val seventhLetter =\
    \ word.charAt(6)\n            val eighthLetter = word.charAt(7)\n            val\
    \ ninthLetter = word.charAt(8)\n            val tenthLetter = word.charAt(9)\n\
    \            val firstVowel = vowels.indexOf(firstLetter)\n            val secondVowel\
    \ = vowels.indexOf(secondLetter)\n            val thirdVowel = vowels.indexOf(thirdLetter)\n\
    \            val fourthVowel = vowels.indexOf(fourthLetter)\n            val fifthVowel\
    \ = vowels.indexOf(fifthLetter)\n            val sixthVowel = vowels.indexOf(sixthLetter)\n\
    \            val seventhVowel = vowels.indexOf(seventhLetter)\n            val\
    \ eighthVowel = vowels.indexOf(eighthLetter)\n            val ninthVowel = vowels.indexOf(ninthLetter)\n\
    \            val tenthVowel = vowels.indexOf(tenthLetter)\n            val firstLetterIndex\
    \ = alphabet.indexOf(firstLetter)\n            val secondLetterIndex = alphabet.indexOf(secondLetter)\n\
    \            val thirdLetterIndex = alphabet.indexOf(thirdLetter)\n          \
    \  val fourthLetterIndex = alphabet.indexOf(fourthLetter)\n            val fifthLetterIndex\
    \ = alphabet.indexOf(fifthLetter)\n            val sixthLetterIndex = alphabet.indexOf(sixthLetter)\n\
    \            val seventhLetterIndex = alphabet.indexOf(seventhLetter)\n      \
    \      val eighthLetterIndex = alphabet.indexOf(eighthLetter)\n            val\
    \ ninthLetterIndex = alphabet.indexOf(ninthLetter)\n            val tenthLetterIndex\
    \ = alphabet.indexOf(tenthLetter)\n            val firstVowelIndex = ", "    \
    \    val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\"\
    )\n        val newMessage = messageArray.map(letter => \n            letter match\
    \ {\n                case vowel => vowel\n                case _ => vowels.indexOf(letter)\
    \ + 2\n            }\n        ).mkString(\"\")\n        val newMessageArray =\
    \ newMessage.split(\"\")\n        newMessageArray.map(letter => \n           \
    \ vowels.indexOf(letter) + 2 match {\n                case 0 => letter\n     \
    \           case _ => vowels.charAt(letter)\n            }\n        ).mkString(\"\
    \")", "        val vowels = \"aeiouAEIOU\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageArray = message.split(\"\")\n        val encodedMessage =\
    \ messageArray.map { letter =>\n            val index = alphabet.indexOf(letter)\n\
    \            val vowelIndex = vowels.indexOf(letter)\n            if (vowelIndex\
    \ == -1) {\n                letter\n            } else {\n                val\
    \ vowel = vowels(vowelIndex)\n                val vowelIndex = vowels.indexOf(vowel)\n\
    \                val vowelIndex = vowelIndex + 2\n                alphabet(vowelIndex)\
    \ match {\n                    case letter if index == 0 => letter\n         \
    \           case letter if index == vowelIndex => letter\n                   \
    \ case letter => letter\n                }\n            }\n        }\n       \
    \ encodedMessage.toString.replace(\"[\", \"\").replace(\"]\", \"\")", "      \
    \  val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0))\
    \ + letters.indexOf(vowels.charAt(1)) + letters.indexOf(vowels.charAt(2)) + letters.indexOf(vowels.charAt(3))\
    \ + letters.indexOf(vowels.charAt(4)) + letters.indexOf(vowels.charAt(5)) + letters.indexOf(vowels.charAt(6))\
    \ + letters.indexOf(vowels.charAt(7)) + letters.indexOf(vowels.charAt(8)) + letters.indexOf(vowels.charAt(9))\
    \ + letters.indexOf(vowels.charAt(10)) + letters.indexOf(vowels.charAt(11)) +\
    \ letters.indexOf(vowels.charAt(12)) + letters.indexOf(vowels.charAt(13)) + letters.indexOf(vowels.charAt(14))\
    \ + letters.indexOf(vowels.charAt(15))).map(_.toString).mkString(\"\")\n     \
    \   val newMessage2 = newMessage.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0))\
    \ + letters.indexOf(vowels.charAt(1)) + letters.indexOf(vowels.charAt(2)) + letters.indexOf(vowels.charAt(3))\
    \ + letters.indexOf(vowels.charAt(4)) + letters.indexOf(vowels.charAt(5)) + letters.indexOf(vowels.charAt(6))\
    \ + letters.indexOf(vowels.charAt(7)) + letters.indexOf(vowels.charAt(8)) + letters.indexOf(vowels.charAt(9))\
    \ + letters.indexOf(vowels.charAt(10)) + letters.indexOf(vowels.charAt(11)) +\
    \ letters.indexOf(vowels.charAt(12)) + letters.indexOf(vowels.charAt(13)) + letters.indexOf(vowels.charAt(14))\
    \ + letters.indexOf(vowels.charAt(15))).map(_.toString).mkString(\"\")\n     \
    \   val newMessage3 = newMessage.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0))\
    \ + letters.indexOf(vowels.charAt(1)) + letters.indexOf(vowels.charAt(2)) + letters.indexOf(vowels.charAt(3))\
    \ + letters.indexOf(vowels.charAt(4)) + letters.indexOf(vowels.charAt(5)) + letters.indexOf(vowels.charAt(6))\
    \ + letters.indexOf(vowels.charAt(7)) + letters.indexOf(vowels.charAt(8)) + letters.indexOf(vowels.charAt(9))\
    \ + letters.indexOf(vowels.charAt(10)) + letters.indexOf(vowels.charAt(11)) +\
    \ letters.indexOf(vowels.charAt(12)) + letters.indexOf(vowels.charAt(13)) + letters.indexOf(vowels.charAt(14))\
    \ + letters.indexOf(vowels.charAt(15))).map(_.toString).mkString(\"\")\n     \
    \   val newMessage4 = newMessage.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0))\
    \ + letters.indexOf(vowels.charAt(", "        val vowels = \"aeiouAEIOU\".toList\n\
    \        val letters = \"abcdefghijklmnopqrstuvwxyz\".toList\n        val newMessage\
    \ = message.map(letter => letters.find(letter => letter != letter.toUpperCase).map(letter\
    \ => letter.toUpperCase).find(letter => vowels.contains(letter)).getOrElse(letter))\n\
    \        newMessage.toString.replaceAll(\"[aeiouAEIOU]\", letters.find(letter\
    \ => letter != letter.toUpperCase).map(letter => letter.toUpperCase).getOrElse(letter))",
  "        val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = message\n        val newMessageLength = newMessage.length\n\
    \        val newMessageChars = newMessage.chars\n        val newMessageCharsLength\
    \ = newMessageChars.length\n        val newMessageCharsArray = newMessageChars.toArray\n\
    \        val newMessageCharsArrayLength = newMessageCharsArray.length\n      \
    \  val newMessageCharsArrayLength = newMessageCharsArray.length\n        val newMessageCharsArrayLength\
    \ = newMessageCharsArray.length\n        val newMessageCharsArrayLength = newMessageCharsArray.length\n\
    \        val newMessageCharsArrayLength = newMessageCharsArray.length\n      \
    \  val newMessageCharsArrayLength = newMessageCharsArray.length\n        val newMessageCharsArrayLength\
    \ = newMessageCharsArray.length\n        val newMessageCharsArrayLength = newMessageCharsArray.length\n\
    \        val newMessageCharsArrayLength = newMessageCharsArray.length\n      \
    \  val newMessageCharsArrayLength = newMessageCharsArray.length\n        val newMessageCharsArrayLength\
    \ = newMessageCharsArray.length\n        val newMessageCharsArrayLength = newMessageCharsArray.length\n\
    \        val newMessageCharsArrayLength = newMessageCharsArray.length\n      \
    \  val newMessageCharsArrayLength = newMessageCharsArray.length\n        val newMessageCharsArrayLength\
    \ = newMessageCharsArray.length\n        val newMessageCharsArrayLength = newMessageCharsArray.length\n\
    \        val newMessageCharsArrayLength = newMessageCharsArray.length\n      \
    \  val newMessageCharsArrayLength = newMessageCharsArray.length\n        val newMessageCharsArrayLength\
    \ = newMessageCharsArray.length\n        val newMessageCharsArrayLength = newMessageCharsArray.length\n\
    \        val newMessageCharsArrayLength = newMessageCharsArray.length\n      \
    \  val newMessageCharsArrayLength = newMessageCharsArray.length\n        val newMessageCharsArrayLength\
    \ = newMessageCharsArray.length\n        val newMessageCharsArrayLength = newMessageCharsArray.length\n\
    \        val newMessageCharsArrayLength = newMessageCharsArray.length\n      \
    \  val newMessageCharsArrayLength = newMessageCharsArray.length\n        val newMessageCharsArrayLength\
    \ = newMessageCharsArray.length\n        val newMessageCharsArrayLength = newMessageCharsArray.length\n\
    \        val newMessageCharsArrayLength = newMessageChar", "        val vowels\
    \ = \"aeiouAEIOU\".toCharArray\n        val messageArray = message.toCharArray\n\
    \        val newMessage = new mutable.StringBuilder\n        for(i <- 0 until\
    \ messageArray.length){\n            val currentChar = messageArray(i)\n     \
    \       val nextChar = messageArray(i+1)\n            if(vowels.contains(currentChar)\
    \ && vowels.contains(nextChar)){\n                newMessage.append(currentChar)\n\
    \                newMessage.append(nextChar)\n            }\n            else\
    \ if(vowels.contains(currentChar)){\n                newMessage.append(currentChar)\n\
    \            }\n            else if(vowels.contains(nextChar)){\n            \
    \    newMessage.append(nextChar)\n            }\n            else{\n         \
    \       newMessage.append(currentChar)\n                newMessage.append(nextChar)\n\
    \            }\n        }\n        newMessage.toString", "        val vowels =\
    \ \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\n     \
    \   val messageArray = message.split(\"\")\n        val newMessage = messageArray.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(letters.indexOf(letter)))\
    \ + 1).mkString(\"\")\n        newMessage", "        val vowels = \"aeiouAEIOU\"\
    \n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        val messageList\
    \ = message.split(\"\")\n        val newMessage = messageList.foldLeft(\"\") {\
    \ (acc, c) =>\n            val index = alphabet.indexOf(c)\n            if (index\
    \ != -1) {\n                val nextIndex = index + 2\n                if (nextIndex\
    \ < alphabet.length) {\n                    acc += alphabet(nextIndex)\n     \
    \           }\n                acc += c\n            }\n            else acc +=\
    \ c\n        }\n        newMessage.replaceAll(vowels, alphabet(alphabet.indexOf(\"\
    a\") + 1))", "        val vowels = \"aeiouAEIOU\"\n        val vowelsMap = new\
    \ mutable.HashMap[String, String]()\n        vowels.foreach(vowelsMap += _ ->\
    \ vowels.indexOf(_))\n        val messageMap = new mutable.HashMap[String, String]()\n\
    \        message.foreach(messageMap += _ -> message.indexOf(_))\n        val result\
    \ = new mutable.StringBuilder\n        message.foreach(c => {\n            val\
    \ vowelIndex = messageMap.get(c)\n            val vowel = vowels(vowelIndex)\n\
    \            val vowel2 = vowels.indexOf(vowel)\n            val vowel3 = vowels.indexOf(vowel2)\n\
    \            val vowel4 = vowels.indexOf(vowel3)\n            val vowel5 = vowels.indexOf(vowel4)\n\
    \            val vowel6 = vowels.indexOf(vowel5)\n            val vowel7 = vowels.indexOf(vowel6)\n\
    \            val vowel8 = vowels.indexOf(vowel7)\n            val vowel9 = vowels.indexOf(vowel8)\n\
    \            val vowel10 = vowels.indexOf(vowel9)\n            val vowel11 = vowels.indexOf(vowel10)\n\
    \            val vowel12 = vowels.indexOf(vowel11)\n            val vowel13 =\
    \ vowels.indexOf(vowel12)\n            val vowel14 = vowels.indexOf(vowel13)\n\
    \            val vowel15 = vowels.indexOf(vowel14)\n            val vowel16 =\
    \ vowels.indexOf(vowel15)\n            val vowel17 = vowels.indexOf(vowel16)\n\
    \            val vowel18 = vowels.indexOf(vowel17)\n            val vowel19 =\
    \ vowels.indexOf(vowel18)\n            val vowel20 = vowels.indexOf(vowel19)\n\
    \            val vowel21 = vowels.indexOf(vowel20)\n            val vowel22 =\
    \ vowels.indexOf(vowel21)\n            val vowel23 = vowels.indexOf(vowel22)\n\
    \            val vowel24 = vowels.indexOf(vowel23)\n            val vowel25 =\
    \ vowels.indexOf(vowel24)\n            val vowel26 = vowels.indexOf(vowel25)\n\
    \            val vowel27 = vowels.indexOf(vowel26)\n            val vowel28 =\
    \ vowels.indexOf(vowel27)\n            val vowel29 = vowels.indexOf(vowel28)\n\
    \            val vowel30 = vowels.indexOf(vowel29)\n            val vowel31 =\
    \ vowels.indexOf(vowel30)\n            val vowel32 = vowels.indexOf(vowel31)\n\
    \            val vowel33 = vowels.indexOf(vowel32)\n            val vowel34 =\
    \ vowels.indexOf(vowel33)\n            val vowel35 = vowels.indexOf(vowel34)\n\
    \            val vowel36 = vowels.indexOf(vowel35)\n            val vowel37 =\
    \ vowels.indexOf(vowel36)\n            val vowel38 = vowels.indexOf(vowel37)",
  "        val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(letter\
    \ => letters.charAt(letter))\n        val newMessageString = newMessage.toList.toString\n\
    \        newMessageString.reverse.mkString(\"\")", "        val vowels = \"aeiouAEIOU\"\
    \n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\n        val vowelMap =\
    \ new mutable.HashMap[String, String]()\n        val letterMap = new mutable.HashMap[String,\
    \ String]()\n        val result = new mutable.StringBuilder\n        for (letter\
    \ <- letters) {\n            letterMap(letter) = letter\n        }\n        for\
    \ (vowel <- vowels) {\n            vowelMap(vowel) = vowel\n        }\n      \
    \  for (letter <- message) {\n            val index = letterMap(letter)\n    \
    \        val vowelIndex = letterMap(vowel)\n            if (index != vowelIndex)\
    \ {\n                val replacement = letterMap(letter)\n                letterMap(letter)\
    \ = vowelMap(vowel)\n                letterMap(replacement) = vowel\n        \
    \        vowelMap(vowel) = letter\n            }\n        }\n        for (letter\
    \ <- letterMap.values) {\n            result.append(letter)\n        }\n     \
    \   return result.toString", "        val vowels = \"aeiouAEIOU\"\n        val\
    \ messageWithVowels = message.toLowerCase.map(letter => vowels.indexOf(letter)\
    \ + 1).map(letter => vowels.charAt(letter)).mkString(\"\")\n        val messageWithVowelsAndTwoLettersBefore\
    \ = messageWithVowels.map(letter => vowels.indexOf(letter) + 1).map(letter =>\
    \ vowels.charAt(letter)).mkString(\"\")\n        val messageWithVowelsAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBefore.map(letter => vowels.indexOf(letter)\
    \ + 1).map(letter => vowels.charAt(letter)).mkString(\"\")\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBefore.map(letter => vowels.indexOf(letter)\
    \ + 1).map(letter => vowels.charAt(letter)).mkString(\"\") + messageWithVowelsAndTwoLettersAfter\n\
    \        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersBefore.map(letter => vowels.indexOf(letter)\
    \ + 1).map(letter => vowels.charAt(letter)).mkString(\"\") + messageWithVowelsAndTwoLettersAfter\
    \ + messageWithVowelsAndTwoLettersBefore\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBefore.map(letter => vowels.indexOf(letter)\
    \ + 1).map(letter => vowels.charAt(letter)).mkString(\"\") + messageWithVowelsAndTwoLettersAfter\
    \ + messageWithVowelsAndTwoLettersBefore + messageWithVowelsAndTwoLettersAfter\n\
    \        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersBefore.map(letter => vowels.indexOf(letter)\
    \ + 1).map(letter => vowels.charAt(letter)).mkString(\"\") + messageWithVowelsAndTwoLettersAfter\
    \ + messageWithVowelsAndTwoLettersBefore + messageWithVowelsAndTwoLettersAfter\
    \ + messageWithVowelsAndTwoLettersBefore\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfter\
    \ = message", "        val vowels = \"aeiouAEIOU\"\n        val messageArray =\
    \ message.split(\"\")\n        val newMessage = messageArray.map(letter => \n\
    \            vowels.indexOf(letter) match {\n                case -1 => letter\n\
    \                case i => vowels(i + 2)\n            }\n        ).mkString(\"\
    \")\n        newMessage", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val messageArrayWithVowels = messageArray.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case 0 => letter\n            case 1 => alphabet(letter - 2)\n           \
    \ case 2 => alphabet(letter - 1)\n            case 3 => alphabet(letter + 2)\n\
    \            case 4 => alphabet(letter + 3)\n            case 5 => alphabet(letter\
    \ + 4)\n            case 6 => alphabet(letter + 5)\n            case 7 => alphabet(letter\
    \ + 6)\n            case 8 => alphabet(letter + 7)\n            case 9 => alphabet(letter\
    \ + 8)\n            case 10 => alphabet(letter + 9)\n            case 11 => alphabet(letter\
    \ + 10)\n            case 12 => alphabet(letter + 11)\n            case 13 =>\
    \ alphabet(letter + 12)\n            case 14 => alphabet(letter + 13)\n      \
    \      case 15 => alphabet(letter + 14)\n            case 16 => alphabet(letter\
    \ + 15)\n            case 17 => alphabet(letter + 16)\n            case 18 =>\
    \ alphabet(letter + 17)\n            case 19 => alphabet(letter + 18)\n      \
    \      case 20 => alphabet(letter + 19)\n            case 21 => alphabet(letter\
    \ + 20)\n            case 22 => alphabet(letter + 21)\n            case 23 =>\
    \ alphabet(letter + 22)\n            case 24 => alphabet(letter + 23)\n      \
    \      case 25 => alphabet(letter + 24)\n            case 26 => alphabet(letter\
    \ + 25)\n            case 27 => alphabet(letter + 26)\n            case 28 =>\
    \ alphabet(letter + 27)\n            case 29 => alphabet(letter + 28)\n      \
    \      case 30 => alphabet(letter + 29)\n            case 31 => alphabet(letter\
    \ + 30)\n            case 32 => alphabet(letter + 31)\n            case 33 =>\
    \ alphabet(letter + 32)\n            case 34 => alphabet(letter + 33)\n      \
    \      case 35 => alphabet(letter + 34)\n            case 36 => alphabet(letter\
    \ + 35)\n            case 37 => alphabet(letter + 36)\n            case 38 =>\
    \ alphabet(letter + 37)\n            case 39 => alphabet(letter + 38)\n      \
    \      case 40 => alphabet(letter + 39)\n            case 41 => alphabet(letter\
    \ + 40)\n            case 42 => alphabet(letter + 41)\n            case ", " \
    \       val vowels = \"aeiouAEIOU\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = message.map(letter => \n            letter match {\n\
    \                case vowel => vowel\n                case _ => alphabet.indexOf(letter)\
    \ + 2\n            }\n        )\n        newMessage.mkString(\"\")", "       \
    \ val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0))\
    \ + letters.indexOf(vowels.charAt(1)))\n        newMessage.toString", "      \
    \  val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\"\
    )\n        val newMessageArray = messageArray.map { c =>\n            val index\
    \ = vowels.indexOf(c)\n            if (index != -1) {\n                val vowel\
    \ = vowels(index + 1)\n                val replacement = vowels.substring(index,\
    \ index + 1) + vowel\n                replacement\n            } else {\n    \
    \            c\n            }\n        }\n        newMessageArray.toString.toUpperCase",
  "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                vowel\n            } else {\n                letter\n       \
    \     }\n        })\n        val newMessage = newMessageArray.toList\n       \
    \ val newMessageString = newMessage.toString.toUpperCase\n        val newMessageStringArray\
    \ = newMessageString.split(\"\")\n        val newMessageStringArrayLength = newMessageStringArray.length\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength + 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength + 2\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength + 2\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength + 2\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength + 2\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength + 2\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength + 2\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength + 2\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength + 2\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength + 2\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ + 2\n        val newMessageStringArrayLength = newMessageStringArrayLength +\
    \ 2\n        val newMessageStringArrayLength = newMessageStringArrayLength + 2\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength + 2\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength + 2\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength + 2\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength + 2\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength + 2\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength + 2\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength + 2\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength + 2\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength + 2\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength + 2\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength + 2\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ + 2\n        val new", "        val vowels = \"aeiouAEIOU\"\n        val letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n        val newMessage = message.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 1)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 2)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 3)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 4)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 5)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 6)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 7)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 8)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 9)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 10)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 11)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 12)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 13))\n        val newMessage2 = message.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 1)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 2)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 3)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 4)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 5)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 6)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 7)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 8)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 9)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 10)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 11)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 12)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 13))\n    \
    \    val newMessage3 = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 1)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 2)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 3)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 4)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 5)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 6)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 7)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + ", "       \
    \ val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0))\
    \ + 1)\n        newMessage.toString.toUpperCase", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\"\")\n        val encodedMessage = messageList.foldLeft(\"\"\
    ){ (acc, letter) => \n            val index = alphabet.indexOf(letter)\n     \
    \       val vowelIndex = vowels.indexOf(letter)\n            val nextLetter =\
    \ alphabet(index+vowelIndex)\n            acc + nextLetter\n        }\n      \
    \  encodedMessage", "        val vowels = \"aeiouAEIOU\"\n        val letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n        val vowelsMap : Map[Char, Char] =\
    \ Map(a -> \"a\", e -> \"e\", i -> \"i\", o -> \"o\", u -> \"u\")\n        val\
    \ lettersMap : Map[Char, Char] = Map(a -> \"A\", e -> \"E\", i -> \"I\", o ->\
    \ \"O\", u -> \"U\")\n        val newMessage = message.map(letter => lettersMap(letter))\n\
    \        val newMessage2 = message.map(letter => vowelsMap(letter))\n        val\
    \ newMessage3 = message.map(letter => lettersMap(letter))\n        val newMessage4\
    \ = message.map(letter => vowelsMap(letter))\n        val newMessage5 = message.map(letter\
    \ => lettersMap(letter))\n        val newMessage6 = message.map(letter => vowelsMap(letter))\n\
    \        val newMessage7 = message.map(letter => lettersMap(letter))\n       \
    \ val newMessage8 = message.map(letter => vowelsMap(letter))\n        val newMessage9\
    \ = message.map(letter => lettersMap(letter))\n        val newMessage10 = message.map(letter\
    \ => vowelsMap(letter))\n        val newMessage11 = message.map(letter => lettersMap(letter))\n\
    \        val newMessage12 = message.map(letter => vowelsMap(letter))\n       \
    \ val newMessage13 = message.map(letter => lettersMap(letter))\n        val newMessage14\
    \ = message.map(letter => vowelsMap(letter))\n        val newMessage15 = message.map(letter\
    \ => lettersMap(letter))\n        val newMessage16 = message.map(letter => vowelsMap(letter))\n\
    \        val newMessage17 = message.map(letter => lettersMap(letter))\n      \
    \  val newMessage18 = message.map(letter => vowelsMap(letter))\n        val newMessage19\
    \ = message.map(letter => lettersMap(letter))\n        val newMessage20 = message.map(letter\
    \ => vowelsMap(letter))\n        val newMessage21 = message.map(letter => lettersMap(letter))\n\
    \        val newMessage22 = message.map(letter => vowelsMap(letter))\n       \
    \ val newMessage23 = message.map(letter => lettersMap(letter))\n        val newMessage24\
    \ = message.map(letter => vowelsMap(letter))\n        val newMessage25 = message.map(letter\
    \ => lettersMap(letter))\n        val newMessage26 = message.map(letter => vowelsMap(letter))\n\
    \        val newMessage27 = message.map(letter => lettersMap(letter))\n      \
    \  val newMessage", "        val vowels = \"aeiouAEIOU\".toList\n        val letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\".toList\n        val messageList = message.split(\"\
    \")\n        val newMessageList = messageList.map(letter => {\n            val\
    \ index = letters.indexOf(letter)\n            val nextIndex = letters.indexOf(letter,\
    \ index + 1)\n            val nextLetter = if (nextIndex == -1) letter else letters(nextIndex)\n\
    \            val nextVowel = if (nextIndex == -1) letter else vowels(nextIndex)\n\
    \            letters.indexOf(letter, index) + letters.indexOf(nextLetter) + letters.indexOf(nextVowel)\n\
    \        })\n        val newMessage = newMessageList.foldLeft(\"\") {\n      \
    \      case (acc, letter) => acc + letters(letter)\n        }\n        newMessage",
  "        val vowels = \"aeiouAEIOU\".toList\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    .toList\n        val vowelsMap : Map[Char, Int] = letters.map(letter => (letter,\
    \ letters.indexOf(letter))).toMap\n        val vowelsMap2 : (Map[Char, Int], Map[Char,\
    \ Int]) = vowels.map(letter => (letter, letters.indexOf(letter))).toMap\n    \
    \    val vowelsMap3 : (Map[Char, Int], Map[Char, Int], Map[Char, Int]) = vowels.map(letter\
    \ => (letter, letters.indexOf(letter), letters.indexOf(letter))).toMap\n     \
    \   val vowelsMap4 : (Map[Char, Int], Map[Char, Int], Map[Char, Int], Map[Char,\
    \ Int]) = vowels.map(letter => (letter, letters.indexOf(letter), letters.indexOf(letter),\
    \ letters.indexOf(letter))).toMap\n        val vowelsMap5 : (Map[Char, Int], Map[Char,\
    \ Int], Map[Char, Int], Map[Char, Int], Map[Char, Int]) = vowels.map(letter =>\
    \ (letter, letters.indexOf(letter), letters.indexOf(letter), letters.indexOf(letter),\
    \ letters.indexOf(letter))).toMap\n        val vowelsMap6 : (Map[Char, Int], Map[Char,\
    \ Int], Map[Char, Int], Map[Char, Int], Map[Char, Int], Map[Char, Int]) = vowels.map(letter\
    \ => (letter, letters.indexOf(letter), letters.indexOf(letter), letters.indexOf(letter),\
    \ letters.indexOf(letter), letters.indexOf(letter))).toMap\n        val vowelsMap7\
    \ : (Map[Char, Int], Map[Char, Int], Map[Char, Int], Map[Char, Int], Map[Char,\
    \ Int], Map[Char, Int], Map[Char, Int]) = vowels.map(letter => (letter, letters.indexOf(letter),\
    \ letters.indexOf(letter), letters.indexOf(letter), letters.indexOf(letter), letters.indexOf(letter),\
    \ letters.indexOf(letter))).toMap\n        val vowelsMap8 : (Map[Char, Int], Map[Char,\
    \ Int], Map[Char, Int], Map[Char, Int], Map[Char, Int], Map[Char, Int], Map[Char,\
    \ Int], Map[Char, Int]) = vowels.map(letter => (letter, letters.indexOf(letter),\
    \ letters.indexOf(letter), letters.indexOf(letter), letters.indexOf(letter), letters.indexOf(letter),\
    \ letters.indexOf(letter), letters.indexOf(letter))).toMap\n        val vowelsMap9\
    \ : (Map[", "        val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageArray = message.split(\"\")\n        val newMessageArray\
    \ = messageArray.map(letter => {\n            val index = letters.indexOf(letter)\n\
    \            val nextLetter = letters.charAt(index + 1)\n            if (vowels.contains(letter))\
    \ {\n                letter\n            } else if (letters.contains(nextLetter))\
    \ {\n                nextLetter\n            } else {\n                letter\n\
    \            }\n        })\n        val newMessage = newMessageArray.toList\n\
    \        val newMessageString = newMessage.toString\n        val newMessageStringArray\
    \ = newMessageString.split(\" \")\n        val newMessageStringArrayLength = newMessageStringArray.length\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength -\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageString", "        val vowels = \"aeiouAEIOU\".toCharArray\n\
    \        val messageArray = message.toCharArray\n        val result = new StringBuilder\n\
    \        var i = 0\n        while (i < messageArray.length) {\n            val\
    \ letter = messageArray(i)\n            val nextLetter = messageArray(i + 1)\n\
    \            if (vowels.contains(letter)) {\n                val index = vowels.indexOf(letter)\n\
    \                val nextIndex = vowels.indexOf(nextLetter)\n                if\
    \ (index != nextIndex) {\n                    result.append(vowels(index))\n \
    \                   result.append(vowels(nextIndex))\n                } else {\n\
    \                    result.append(vowels(index))\n                }\n       \
    \     } else {\n                result.append(letter)\n            }\n       \
    \     i += 1\n        }\n        return result.toString", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val messageLength = message.length\n        val result\
    \ = new StringBuilder(messageLength)\n        val vowelIndex = new mutable.HashMap[String,\
    \ Int]()\n        for (i <- 0 until messageLength) {\n            val c = message.charAt(i)\n\
    \            val index = vowels.indexOf(c)\n            if (index != -1) {\n \
    \               val vowel = vowels(index)\n                val vowelIndex = vowelIndex.getOrElse(vowel,\
    \ 0)\n                vowelIndex += index\n                vowelIndex += 2\n \
    \               vowelIndex.foreach { vowelIndex =>\n                    val vowel\
    \ = vowels(vowelIndex)\n                    val index = vowels.indexOf(vowel)\n\
    \                    result.append((if (index != -1) vowel else c))\n        \
    \        }\n            } else {\n                result.append((if (c == ' ')\
    \ ' ' else c))\n            }\n        }\n        result.toString()", "      \
    \  val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageList = message.split(\"\
    \")\n        val newMessage = messageList.foldLeft(\"\"){ (acc, elem) => \n  \
    \          val index = alphabet.indexOf(elem)\n            val vowelIndex = vowels.indexOf(elem)\n\
    \            val newElem = if (index > 0 && vowelIndex > 0) \n               \
    \ alphabet(index - 1) + alphabet(vowelIndex - 1) + elem\n            else elem\n\
    \            acc + newElem\n        }\n        newMessage", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\n   \
    \     val messageLength = message.length\n        val encodedMessage = mutable.StringBuilder()\n\
    \        var i = 0\n        while (i < messageLength) {\n            val currentChar\
    \ = message.charAt(i)\n            val currentCharIndex = letters.indexOf(currentChar)\n\
    \            val nextCharIndex = letters.indexOf(message.charAt(i+1), currentCharIndex+1)\n\
    \            val nextChar = letters(nextCharIndex)\n            val nextCharIndex\
    \ = letters.indexOf(message.charAt(i+2), nextCharIndex+1)\n            val nextChar2\
    \ = letters(nextCharIndex)\n            val nextChar3 = letters(nextCharIndex)\n\
    \            val nextChar4 = letters(nextCharIndex)\n            val nextChar5\
    \ = letters(nextCharIndex)\n            val nextChar6 = letters(nextCharIndex)\n\
    \            val nextChar7 = letters(nextCharIndex)\n            val nextChar8\
    \ = letters(nextCharIndex)\n            val nextChar9 = letters(nextCharIndex)\n\
    \            val nextChar10 = letters(nextCharIndex)\n            val nextChar11\
    \ = letters(nextCharIndex)\n            val nextChar12 = letters(nextCharIndex)\n\
    \            val nextChar13 = letters(nextCharIndex)\n            val nextChar14\
    \ = letters(nextCharIndex)\n            val nextChar15 = letters(nextCharIndex)\n\
    \            val nextChar16 = letters(nextCharIndex)\n            val nextChar17\
    \ = letters(nextCharIndex)\n            val nextChar18 = letters(nextCharIndex)\n\
    \            val nextChar19 = letters(nextCharIndex)\n            val nextChar20\
    \ = letters(nextCharIndex)\n            val nextChar21 = letters(nextCharIndex)\n\
    \            val nextChar22 = letters(nextCharIndex)\n            val nextChar23\
    \ = letters(nextCharIndex)\n            val nextChar24 = letters(nextCharIndex)\n\
    \            val nextChar25 = letters(nextCharIndex)\n            val nextChar26\
    \ = letters(nextCharIndex)\n            val nextChar27 = letters(nextCharIndex)\n\
    \            val nextChar28 = letters(nextCharIndex)\n            val nextChar29\
    \ = letters(nextCharIndex)\n            val nextChar30 = letters(nextCharIndex)\n\
    \            val nextChar31 = letters(nextCharIndex)\n            val nextChar32\
    \ = letters(nextCharIndex)\n            val nextChar33 = letters(nextCharIndex)\n\
    \            val nextChar34 = letters(nextCharIndex)\n            val nextChar35\
    \ = ", "        var result = \"\"\n        for (i <- 0 until message.length){\n\
    \            val c = message.charAt(i)\n            val l = c.toLowerCase \n \
    \           val v = l.toUpperCase \n            if (v == 'A' || v == 'E' || v\
    \ == 'I' || v == 'O' || v == 'U'){\n                result += v\n            }\n\
    \            else if (v == 'A' || v == 'O' || v == 'U'){\n                result\
    \ += v + 2\n            }\n            else if (v == 'E' || v == 'I' || v == 'O'){\n\
    \                result += v + 3\n            }\n            else{\n         \
    \       result += v\n            }\n        }\n        return result", "     \
    \   val vowels = \"aeiou\"\n        val messageArray = message.split(\"\")\n \
    \       val newMessageArray = messageArray.map(letter => \n            val vowelIndex\
    \ = vowels.indexOf(letter)\n            if (vowelIndex >= 0) letter else vowels.charAt(vowelIndex\
    \ + 2))\n        val newMessage = newMessageArray.toList\n        val newMessageString\
    \ = newMessage.toString.replaceAll(\"[aeiou]\", \"$0\")\n        val newMessageStringArray\
    \ = newMessageString.split(\"\")\n        val newMessageStringArrayLength = newMessageStringArray.length\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength -\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength -\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n\
    \        val newMessageStringArrayLength = newMessageStringArray", "        val\
    \ vowels = \"aeiouAEIOU\"\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val messageArray = message.split(\"\")\n        val newMessage =\
    \ messageArray.map(letter => \n            if (vowels.contains(letter)) letter\
    \ else \n                if (alphabet.contains(letter)) alphabet(alphabet.indexOf(letter)\
    \ + 1) else letter)\n        val newMessageString = newMessage.toString.mkString(\"\
    \")\n        return newMessageString", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(letter => alphabet(alphabet.indexOf(letter) + 1))\n        val newVowels\
    \ = vowels.map(letter => alphabet(alphabet.indexOf(letter) + 2))\n        newMessage\
    \ ++ newVowels", "        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val newMessage = message.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.indexOf(letter)) + 1)\n        val newMessage2 = newMessage.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.indexOf(letter)) + 1)\n\
    \        val newMessage3 = newMessage2.map(letter => letters.indexOf(letter) +\
    \ letters.indexOf(vowels.indexOf(letter)) + 1)\n        val newMessage4 = newMessage3.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.indexOf(letter)) + 1)\n\
    \        val newMessage5 = newMessage4.map(letter => letters.indexOf(letter) +\
    \ letters.indexOf(vowels.indexOf(letter)) + 1)\n        val newMessage6 = newMessage5.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.indexOf(letter)) + 1)\n\
    \        val newMessage7 = newMessage6.map(letter => letters.indexOf(letter) +\
    \ letters.indexOf(vowels.indexOf(letter)) + 1)\n        val newMessage8 = newMessage7.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.indexOf(letter)) + 1)\n\
    \        val newMessage9 = newMessage8.map(letter => letters.indexOf(letter) +\
    \ letters.indexOf(vowels.indexOf(letter)) + 1)\n        val newMessage10 = newMessage9.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.indexOf(letter)) + 1)\n\
    \        val newMessage11 = newMessage10.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.indexOf(letter)) + 1)\n        val newMessage12 = newMessage11.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.indexOf(letter)) + 1)\n\
    \        val newMessage13 = newMessage12.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.indexOf(letter)) + 1)\n        val newMessage14 = newMessage13.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.indexOf(letter)) + 1)\n\
    \        val newMessage15 = newMessage14.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.indexOf(letter)) + 1)\n        val newMessage16 = newMessage15.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.indexOf(letter)) + 1)\n\
    \        val newMessage17 = newMessage16.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.indexOf(letter)) + 1)\n        val newMessage18 = newMessage17.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.indexOf(letter)) + 1)\n\
    \        ", "        val vowels = \"aeiouAEIOU\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelsMap = Map(vowels -> \"a\")\n        val alphabetMap = Map(alphabet\
    \ -> \"b\")\n        val result = new StringBuilder\n        for (letter <- message)\
    \ {\n            val index = alphabet.indexOf(letter)\n            if (index !=\
    \ -1) {\n                val nextLetter = alphabet.charAt(index + 1)\n       \
    \         val nextVowel = vowels.indexOf(nextLetter)\n                if (nextVowel\
    \ != -1) {\n                    result.append(alphabetMap(alphabet))\n       \
    \             result.append(alphabetMap(alphabet))\n                } else {\n\
    \                    result.append(alphabetMap(alphabet))\n                }\n\
    \            } else {\n                result.append(alphabetMap(alphabet))\n\
    \            }\n        }\n        return result.toString", "        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\"\")\n        val newMessage = messageList.foldLeft(\"\"){ (acc,\
    \ c) =>\n            val index = alphabet.indexOf(c)\n            val nextIndex\
    \ = alphabet.indexOf(c + 1)\n            val nextVowel = vowels(nextIndex)\n \
    \           val nextLetter = alphabet(nextIndex)\n            val nextVowelIndex\
    \ = alphabet.indexOf(nextVowel)\n            val nextLetterIndex = alphabet.indexOf(nextLetter)\n\
    \            val nextLetterIndex = nextLetterIndex + 2\n            val nextLetter\
    \ = alphabet(nextLetterIndex)\n            val nextVowelIndex = alphabet.indexOf(nextVowel)\n\
    \            val nextVowel = alphabet(nextVowelIndex)\n            val nextVowelIndex\
    \ = alphabet.indexOf(nextVowel)\n            val nextVowelIndex = nextVowelIndex\
    \ + 2\n            val nextVowel = alphabet(nextVowelIndex)\n            val nextVowelIndex\
    \ = alphabet.indexOf(nextVowel)\n            val nextVowel = alphabet(nextVowelIndex)\n\
    \            val nextVowelIndex = alphabet.indexOf(nextVowel)\n            val\
    \ nextVowel = alphabet(nextVowelIndex)\n            val nextVowelIndex = alphabet.indexOf(nextVowel)\n\
    \            val nextVowel = alphabet(nextVowelIndex)\n            val nextVowelIndex\
    \ = alphabet.indexOf(nextVowel)\n            val nextVowel = alphabet(nextVowelIndex)\n\
    \            val nextVowelIndex = alphabet.indexOf(nextVowel)\n            val\
    \ nextVowel = alphabet(nextVowelIndex)\n            val nextVowelIndex = alphabet.indexOf(nextVowel)\n\
    \            val nextVowel = alphabet(nextVowelIndex)\n            val nextVowelIndex\
    \ = alphabet.indexOf(nextVowel)\n            val nextVowel = alphabet(nextVowelIndex)\n\
    \            val nextVowelIndex = alphabet.indexOf(nextVowel)\n            val\
    \ nextVowel = alphabet(nextVow", "        val vowels = \"aeiouAEIOU\"\n      \
    \  val messageArray = message.split(\"\")\n        val newMessage = messageArray.map(letter\
    \ => \n            vowels.indexOf(letter) match {\n                case -1 =>\
    \ letter\n                case 0 => letter\n                case 1 => vowels((vowels.indexOf(letter)\
    \ + 2) % vowels.length)\n            }\n        ).mkString(\"\")\n        newMessage",
  "        val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0))\
    \ + letters.indexOf(vowels.charAt(1)) + letters.indexOf(vowels.charAt(2)) + letters.indexOf(vowels.charAt(3))\
    \ + letters.indexOf(vowels.charAt(4)) + letters.indexOf(vowels.charAt(5)) + letters.indexOf(vowels.charAt(6))\
    \ + letters.indexOf(vowels.charAt(7)) + letters.indexOf(vowels.charAt(8)) + letters.indexOf(vowels.charAt(9))\
    \ + letters.indexOf(vowels.charAt(10)) + letters.indexOf(vowels.charAt(11)) +\
    \ letters.indexOf(vowels.charAt(12)) + letters.indexOf(vowels.charAt(13)) + letters.indexOf(vowels.charAt(14))\
    \ + letters.indexOf(vowels.charAt(15))).map(_.toString)\n        val newMessageString\
    \ = newMessage.mkString(\"\")\n        val newMessageArray = newMessageString.toCharArray\n\
    \        val newMessageArrayLength = newMessageArray.length\n        val newMessageArrayLength\
    \ = newMessageArrayLength - 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength - 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength - 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength - 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength - 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength - 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength - 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength - 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength - 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength - 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength - 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength - 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength - 1\n        val ", "        val vowels = \"aeiouAEIOU\"\
    \n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val messageArray = message.split(\"\")\n        val newMessage = messageArray.foldLeft(\"\
    \"){ (acc, elem) =>\n            val index = alphabet.indexOf(elem)\n        \
    \    val newElem = if (index != -1) alphabet(index - 1) else elem\n          \
    \  acc + newElem\n        }\n        val newMessageArray = newMessage.split(\"\
    \")\n        val newMessageArrayLength = newMessageArray.length\n        val newMessageArrayWithVowels\
    \ = newMessageArray.foldLeft(\"\"){ (acc, elem) =>\n            val index = vowels.indexOf(elem)\n\
    \            val newElem = if (index != -1) vowels(index - 1) else elem\n    \
    \        acc + newElem\n        }\n        val newMessageArrayWithVowelsLength\
    \ = newMessageArrayWithVowels.length\n        val newMessageArrayWithVowelsAndLetters\
    \ = newMessageArrayWithVowels.foldLeft(\"\"){ (acc, elem) =>\n            val\
    \ index = alphabet.indexOf(elem)\n            val newElem = if (index != -1) alphabet(index\
    \ - 1) else elem\n            acc + newElem\n        }\n        val newMessageArrayWithVowelsAndLettersLength\
    \ = newMessageArrayWithVowelsAndLetters.length\n        val newMessageArrayWithVowelsAndLettersAndLetters\
    \ = newMessageArrayWithVowelsAndLetters.foldLeft(\"\"){ (acc, elem) =>\n     \
    \       val index = alphabet.indexOf(elem)\n            val newElem = if (index\
    \ != -1) alphabet(index - 1) else elem\n            acc + newElem\n        }\n\
    \        val newMessageArrayWithVowelsAndLettersAndLettersLength = newMessageArrayWithVowelsAndLettersAndLetters.length\n\
    \        val newMessageArrayWithVowelsAndLettersAndLettersAndLetters = newMessageArrayWithVowelsAndLettersAndLetters.foldLeft(\"\
    \"){ (acc, elem) =>\n            val index = alphabet.indexOf(elem)\n        \
    \    val newElem = if (index != -1) alphabet(index - 1) else elem\n          \
    \  acc + newElem\n        }\n        val newMessageArrayWithVowelsAndLettersAndLettersAndLettersLength\
    \ = newMessage", "        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map { letter\
    \ =>\n            val index = vowels.indexOf(letter)\n            if (index !=\
    \ -1) {\n                val vowel = vowels(index + 1)\n                val vowelIndex\
    \ = vowels.indexOf(vowel)\n                val newLetter = if (vowelIndex == 0)\
    \ letter else vowel\n                vowels(index) = newLetter\n             \
    \   vowels(vowelIndex) = letter\n                newLetter\n            } else\
    \ {\n                letter\n            }\n        }\n        val newMessage\
    \ = String.join(\"\", newMessageArray)\n        newMessage", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\n   \
    \     val messageArray = message.split(\"\")\n        val encodedMessage = messageArray.map\
    \ { letter =>\n            val index = letters.indexOf(letter)\n            if\
    \ (index != -1) {\n                val vowelIndex = vowels.indexOf(letter)\n \
    \               if (vowelIndex != -1) {\n                    val vowel = vowels(vowelIndex)\n\
    \                    val vowelIndex = vowels.indexOf(vowel)\n                \
    \    val vowel2 = vowels(vowelIndex + 1)\n                    val letterIndex\
    \ = letters.indexOf(letter)\n                    val letter = letters(letterIndex)\n\
    \                    val letter2 = letters(letterIndex + 1)\n                \
    \    val letter3 = letters(letterIndex + 2)\n                    val letter4 =\
    \ letters(letterIndex + 3)\n                    val letter5 = letters(letterIndex\
    \ + 4)\n                    val letter6 = letters(letterIndex + 5)\n         \
    \           val letter7 = letters(letterIndex + 6)\n                    val letter8\
    \ = letters(letterIndex + 7)\n                    val letter9 = letters(letterIndex\
    \ + 8)\n                    val letter10 = letters(letterIndex + 9)\n        \
    \            val letter11 = letters(letterIndex + 10)\n                    val\
    \ letter12 = letters(letterIndex + 11)\n                    val letter13 = letters(letterIndex\
    \ + 12)\n                    val letter14 = letters(letterIndex + 13)\n      \
    \              val letter15 = letters(letterIndex + 14)\n                    val\
    \ letter16 = letters(letterIndex + 15)\n                    val letter17 = letters(letterIndex\
    \ + 16)\n                    val letter18 = letters(letterIndex + 17)\n      \
    \              val letter19 = letters(letterIndex + 18)\n                    val\
    \ letter20 = letters(letterIndex + 19)\n                    val letter21 = letters(letterIndex\
    \ + 20)\n                    val letter22 = letters(letterIndex + 21)\n      \
    \              val letter23 = letters(letterIndex + 22)\n                    val\
    \ letter24 = letters(letterIndex + 23)\n                    val letter25 = letters(letterIndex\
    \ + 24)\n                    val letter26 = letters(letterIndex + 25)\n      \
    \              val letter27 = letters(letterIndex + 26)\n                    val\
    \ letter28 = letters(letterIndex + 27)\n                    val letter29 = letters(letterIndex\
    \ + 28)\n                    val letter30 = letters(letterIndex + 29)\n      \
    \              val letter31 = letters(letterIndex + 30)\n                    val\
    \ letter32 = letters(letterIndex + 31)\n                    val letter33 = letters(letterIndex\
    \ + 32)\n                    val letter34 = letter", "        val vowels = \"\
    aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\n        val\
    \ vowelsMap = Map(vowels -> letters.indexOf(\"a\"))\n        val lettersMap =\
    \ Map(letters -> letters.indexOf(\"a\"))\n        val messageMap = message.map(letter\
    \ => lettersMap(letter))\n        val messageMap2 = message.map(letter => vowelsMap(letter))\n\
    \        val messageMap3 = message.map(letter => lettersMap(letter))\n       \
    \ val messageMap4 = message.map(letter => vowelsMap(letter))\n        val messageMap5\
    \ = message.map(letter => lettersMap(letter))\n        val messageMap6 = message.map(letter\
    \ => vowelsMap(letter))\n        val messageMap7 = message.map(letter => lettersMap(letter))\n\
    \        val messageMap8 = message.map(letter => vowelsMap(letter))\n        val\
    \ messageMap9 = message.map(letter => lettersMap(letter))\n        val messageMap10\
    \ = message.map(letter => vowelsMap(letter))\n        val messageMap11 = message.map(letter\
    \ => lettersMap(letter))\n        val messageMap12 = message.map(letter => vowelsMap(letter))\n\
    \        val messageMap13 = message.map(letter => lettersMap(letter))\n      \
    \  val messageMap14 = message.map(letter => vowelsMap(letter))\n        val messageMap15\
    \ = message.map(letter => lettersMap(letter))\n        val messageMap16 = message.map(letter\
    \ => vowelsMap(letter))\n        val messageMap17 = message.map(letter => lettersMap(letter))\n\
    \        val messageMap18 = message.map(letter => vowelsMap(letter))\n       \
    \ val messageMap19 = message.map(letter => lettersMap(letter))\n        val messageMap20\
    \ = message.map(letter => vowelsMap(letter))\n        val messageMap21 = message.map(letter\
    \ => lettersMap(letter))\n        val messageMap22 = message.map(letter => vowelsMap(letter))\n\
    \        val messageMap23 = message.map(letter => lettersMap(letter))\n      \
    \  val messageMap24 = message.map(letter => vowelsMap(letter))\n        val messageMap25\
    \ = message.map(letter => lettersMap(letter))\n        val messageMap26 = message.map(letter\
    \ => vowelsMap(letter))\n        val messageMap27 = message.map(letter => lettersMap(letter))\n\
    \        val messageMap28 = message.map(letter => vowelsMap(letter))\n       \
    \ val messageMap29 = message.map(letter => lettersMap(letter))\n        val messageMap30\
    \ = message.map(letter => vowelsMap(letter))\n        ", "        val vowels =\
    \ \"aeiouAEIOU\"\n        val messageArray = message.split(\"\")\n        val\
    \ newMessageArray = messageArray.map(letter => \n            vowels.indexOf(letter)\
    \ match {\n                case -1 => letter\n                case i => vowels(i+2)\n\
    \            }\n        )\n        val newMessage = newMessageArray.toList\n \
    \       val newMessageString = newMessage.toString.toUpperCase\n        val newMessageStringArray\
    \ = newMessageString.split(\" \")\n        val newMessageStringArrayLength = newMessageStringArray.length\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength -\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength -\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val ", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val newMessage = messageArray.map(letter => \n\
    \            letter match {\n                case letter if letter != ' ' =>\n\
    \                    val index = alphabet.indexOf(letter)\n                  \
    \  alphabet(index) match {\n                        case letter if index == 0\
    \ => letter\n                        case letter if index == alphabet.size - 1\
    \ => letter.toUpperCase\n                        case letter => letter\n     \
    \               }\n                case letter => letter\n            }\n    \
    \    ).mkString(\"\")\n        val vowelsArray = vowels.map(letter => \n     \
    \       letter match {\n                case letter if letter != ' ' =>\n    \
    \                val index = alphabet.indexOf(letter)\n                    alphabet(index)\
    \ match {\n                        case letter if index == 0 => letter\n     \
    \                   case letter if index == alphabet.size - 1 => letter.toUpperCase\n\
    \                        case letter => letter\n                    }\n      \
    \          case letter => letter\n            }\n        ).mkString(\"\")\n  \
    \      val vowelsArray2 = vowels.map(letter => \n            letter match {\n\
    \                case letter if letter != ' ' =>\n                    val index\
    \ = alphabet.indexOf(letter)\n                    alphabet(index) match {\n  \
    \                      case letter if index == 0 => letter\n                 \
    \       case letter if index == alphabet.size - 1 => letter.toUpperCase\n    \
    \                    case letter => letter\n                    }\n          \
    \      case letter => letter\n            }\n        ).mkString(\"\")\n      \
    \  val vowelsArray3 = vowels.map(letter => \n            letter match {\n    \
    \            case letter if letter != ' ' =>\n                    val index =\
    \ alphabet.indexOf(letter)\n                    alphabet(index) match {\n    \
    \                    case letter if index == 0 => letter\n                   \
    \     case letter if index == alphabet.size - 1 => letter.toUpperCase\n      \
    \                  case letter => letter\n                    }\n            \
    \    case letter => letter\n            }\n        ).mkString(\"\")\n        val\
    \ vowelsArray4 = vowels.map(letter => \n            letter match {\n         \
    \       case letter if letter != ' ' =>\n                    val index = alphabet.indexOf(letter)\n\
    \                    alphabet(index) match {\n                        case letter\
    \ if index == 0 => letter\n                        case letter if index == alphabet.size\
    \ - 1 => letter.toUpperCase\n                        case letter => letter\n \
    \                   }\n                case letter => letter\n            }\n\
    \        ).", "        val vowels = \"aeiouAEIOU\"\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowelIndexes = vowels.toList.map(alphabet.indexOf(_))\n        val\
    \ vowelIndexes2 = vowels.toList.map(alphabet.indexOf(_) + 1)\n        val vowelIndexes3\
    \ = vowels.toList.map(alphabet.indexOf(_) + 2)\n        val vowelIndexes4 = vowels.toList.map(alphabet.indexOf(_)\
    \ + 3)\n        val vowelIndexes5 = vowels.toList.map(alphabet.indexOf(_) + 4)\n\
    \        val vowelIndexes6 = vowels.toList.map(alphabet.indexOf(_) + 5)\n    \
    \    val vowelIndexes7 = vowels.toList.map(alphabet.indexOf(_) + 6)\n        val\
    \ vowelIndexes8 = vowels.toList.map(alphabet.indexOf(_) + 7)\n        val vowelIndexes9\
    \ = vowels.toList.map(alphabet.indexOf(_) + 8)\n        val vowelIndexes10 = vowels.toList.map(alphabet.indexOf(_)\
    \ + 9)\n        val vowelIndexes11 = vowels.toList.map(alphabet.indexOf(_) + 10)\n\
    \        val vowelIndexes12 = vowels.toList.map(alphabet.indexOf(_) + 11)\n  \
    \      val vowelIndexes13 = vowels.toList.map(alphabet.indexOf(_) + 12)\n    \
    \    val vowelIndexes14 = vowels.toList.map(alphabet.indexOf(_) + 13)\n      \
    \  val vowelIndexes15 = vowels.toList.map(alphabet.indexOf(_) + 14)\n        val\
    \ vowelIndexes16 = vowels.toList.map(alphabet.indexOf(_) + 15)\n        val vowelIndexes17\
    \ = vowels.toList.map(alphabet.indexOf(_) + 16)\n        val vowelIndexes18 =\
    \ vowels.toList.map(alphabet.indexOf(_) + 17)\n        val vowelIndexes19 = vowels.toList.map(alphabet.indexOf(_)\
    \ + 18)\n        val vowelIndexes20 = vowels.toList.map(alphabet.indexOf(_) +\
    \ 19)\n        val vowelIndexes21 = vowels.toList.map(alphabet.indexOf(_) + 20)\n\
    \        val vowelIndexes22 = vowels.toList.map(alphabet.indexOf(_) + 21)\n  \
    \      val vowelIndexes23 = vowels.toList.map(alphabet.indexOf(_) + 22)\n    \
    \    val vowelIndexes24 = vowels.toList.map(alphabet.indexOf(_) + 23)", "    \
    \    val vowels = \"aeiouAEIOU\"\n        val messageWithVowels = message.toLowerCase.foldLeft(message)\
    \ {\n            case (acc, c) =>\n                if (vowels.contains(c))\n \
    \                   acc + c\n                else\n                    acc + c\
    \ + c.swapCase\n        }\n        val vowelIndexes = messageWithVowels.toList.zipWithIndex.filter(_._1\
    \ == true).toList\n        val vowelIndexesWithTwoPlaces = vowelIndexes.zipWithIndex.filter(_._2\
    \ == 2)\n        val vowelIndexesWithTwoPlacesWithVowels = vowelIndexesWithTwoPlaces.map(_._1)\n\
    \        val vowelIndexesWithTwoPlacesWithVowelsWithVowels = vowelIndexesWithTwoPlacesWithVowels.map(i\
    \ => vowelIndexes.find(_._1 == i).map(_._2))\n        val vowelIndexesWithTwoPlacesWithVowelsWithVowelsWithVowels\
    \ = vowelIndexesWithTwoPlacesWithVowelsWithVowels.map(i => vowelIndexes.find(_._1\
    \ == i).map(_._2))\n        val vowelIndexesWithTwoPlacesWithVowelsWithVowelsWithVowelsWithVowels\
    \ = vowelIndexesWithTwoPlacesWithVowelsWithVowelsWithVowels.map(i => vowelIndexes.find(_._1\
    \ == i).map(_._2))\n        val vowelIndexesWithTwoPlacesWithVowelsWithVowelsWithVowelsWithVowelsWithVowels\
    \ = vowelIndexesWithTwoPlacesWithVowelsWithVowelsWithVowelsWithVowels.map(i =>\
    \ vowelIndexes.find(_._1 == i).map(_._2))\n        val vowelIndexesWithTwoPlacesWithVowelsWithVowelsWithVowelsWithVowelsWithVowelsWithVowels\
    \ = vowelIndexesWithTwoPlacesWithVowelsWithVowelsWithVowelsWithVowelsWithVowels.map(i\
    \ => vowelIndexes.find(_._1 == i).map(_._2))\n        val vowelIndexesWithTwoPlacesWithVowelsWithVowelsWithVowelsWithVowelsWithVowelsWithVowelsWithVowels\
    \ = vowelIndexesWithTwoPlacesWithVowelsWithVowelsWithVowelsWithVowelsWithV", " \
    \       val vowels = \"aeiouAEIOU\"\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowelIndexes = vowels.toList.map(alphabet.indexOf(_))\n        val\
    \ messageIndexes = message.map(alphabet.indexOf(_))\n        val messageIndexesWithVowels\
    \ = messageIndexes.zip(vowelIndexes)\n        val messageWithVowels = messageIndexesWithVowels.map(m\
    \ => (m._1, m._2))\n        val messageWithVowelsAndVowelIndexes = messageWithVowels.zip(vowelIndexes)\n\
    \        val messageWithVowelsAndVowelIndexesWithVowels = messageWithVowelsAndVowelIndexes.map(m\
    \ => (m._1, m._2))\n        val messageWithVowelsAndVowelIndexesWithVowelsAndVowelIndexes\
    \ = messageWithVowelsAndVowelIndexesWithVowels.map(m => (m._1, m._2))\n      \
    \  val messageWithVowelsAndVowelIndexesWithVowelsAndVowelIndexesWithVowels = messageWithVowelsAndVowelIndexesWithVowelsAndVowelIndexes.map(m\
    \ => (m._1, m._2))\n        val messageWithVowelsAndVowelIndexesWithVowelsAndVowelIndexesWithVowelsAndVowelIndexes\
    \ = messageWithVowelsAndVowelIndexesWithVowelsAndVowelIndexesWithVowels.map(m\
    \ => (m._1, m._2))\n        val messageWithVowelsAndVowelIndexesWithVowelsAndVowelIndexesWithVowelsAndVowelIndexesWithVowels\
    \ = messageWithVowelsAndVowelIndexesWithVowelsAndVowelIndexesWithVowelsAndVowelIndexes.map(m\
    \ => (m._1, m._2))\n        val messageWithVowelsAndVowelIndexesWithVowelsAndVowelIndexesWithVowelsAndVowelIndexesWithVowelsAndVowelIndexes\
    \ = messageWithVowelsAndVow", "        val vowels = \"aeiouAEIOU\"\n        val\
    \ messageArray = message.split(\"\")\n        val encodedMessage = messageArray.map(letter\
    \ => \n            if (vowels.contains(letter)) letter else \n               \
    \ vowels.indexOf(vowels.find(letter => letter == letter + 2).toString.charAt(0))\
    \ + letter)\n        encodedMessage.toString.reverse.mkString(\"\")", "      \
    \  val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\"\
    )\n        val newMessage = messageArray.map(letter => {\n            val index\
    \ = vowels.indexOf(letter)\n            if (index != -1) {\n                val\
    \ vowelIndex = vowels.indexOf(vowels(index + 1))\n                if (vowelIndex\
    \ != -1) {\n                    vowels(index) = vowels(vowelIndex + 1)\n     \
    \           }\n            }\n            letter\n        }).mkString(\"\")\n\
    \        newMessage", "        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessage = messageArray.map {\n       \
    \     char => \n                val index = vowels.indexOf(char.toLowerCase)\n\
    \                if (index >= 0) {\n                    val vowelIndex = index\
    \ + 1\n                    val vowel = vowels(vowelIndex)\n                  \
    \  val vowelIndex = vowels.indexOf(vowel)\n                    val vowelIndex\
    \ = vowelIndex + 2\n                    val vowel = vowels(vowelIndex)\n     \
    \               char.toUpperCase(vowel)\n                } else {\n          \
    \          char\n                }\n        }\n        newMessage.toString.reverse.mkString(\"\
    \")", "        val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelMap : Map[Char, Int] = Map(a -> 1, e -> 1, i -> 1, o -> 1,\
    \ u -> 1, y -> 1, \n            a -> 2, e -> 2, i -> 2, o -> 2, u -> 2, y -> 2,\
    \ a -> 3, e -> 3, i -> 3, o -> 3, u -> 3, y -> 3)\n        val letterMap : Map[Char,\
    \ Int] = Map(a -> 1, b -> 2, c -> 3, d -> 4, e -> 5, f -> 6, g -> 7, h -> 8, \n\
    \            i -> 9, j -> 10, k -> 11, l -> 12, m -> 13, n -> 14, o -> 15, p ->\
    \ 16, q -> 17, r -> 18, \n            s -> 19, t -> 20, u -> 21, v -> 22, w ->\
    \ 23, x -> 24, y -> 25, z -> 26)\n        val messageArray = message.split(\"\"\
    )\n        val encodedMessage = messageArray.foldLeft(\"\")( (acc, elem) => {\n\
    \            val index = letters.indexOf(elem)\n            val letter = letters(index)\n\
    \            val vowel = vowels(index)\n            val vowelIndex = vowelMap(vowel)\n\
    \            val letterIndex = letterMap(letter)\n            val newLetter =\
    \ letters(letterIndex + vowelIndex)\n            acc += newLetter\n        })\n\
    \        encodedMessage", "        val vowels = \"aeiou\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                vowel\n            } else {\n        \
    \        letter\n            }\n        })\n        val newMessage = String.join(\"\
    \", newMessageArray)\n        newMessage", "        var newMessage = \"\"\n  \
    \      for(i <- 0 until message.length){\n            val currentChar = message.charAt(i)\n\
    \            val nextChar = message.charAt(i+1)\n            val currentCharIndex\
    \ = alphabet.indexOf(currentChar)\n            val nextCharIndex = alphabet.indexOf(nextChar)\n\
    \            val newChar = if (currentCharIndex > nextCharIndex) currentChar else\
    \ nextChar\n            newMessage += newChar\n        }\n        return newMessage",
  "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message\n\
    \        val newMessageList = newMessage.split(\"\")\n        val newMessageList2\
    \ = newMessageList.map(x => alphabet(alphabet.indexOf(x) + 1))\n        val newMessageList3\
    \ = newMessageList2.map(x => vowels.indexOf(x) + 1)\n        newMessageList3.foreach(x\
    \ => newMessage = newMessage.replace(x, alphabet(alphabet.indexOf(x) + 1)))\n\
    \        newMessage", "        val vowels = \"aeiouAEIOU\"\n        val alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n        val newMessage = message.toLowerCase\n\
    \        val newMessageList = newMessage.split(\"\")\n        val newMessageList2\
    \ = newMessageList.map(x => if (vowels.contains(x)) x.toUpperCase else x)\n  \
    \      val newMessageList3 = newMessageList2.map(x => if (alphabet.contains(x))\
    \ x.toUpperCase else x)\n        val newMessageList4 = newMessageList3.map(x =>\
    \ if (alphabet.contains(x)) x.toUpperCase else x)\n        val newMessageList5\
    \ = newMessageList4.map(x => if (alphabet.contains(x)) x.toUpperCase else x)\n\
    \        val newMessageList6 = newMessageList5.map(x => if (alphabet.contains(x))\
    \ x.toUpperCase else x)\n        val newMessageList7 = newMessageList6.map(x =>\
    \ if (alphabet.contains(x)) x.toUpperCase else x)\n        val newMessageList8\
    \ = newMessageList7.map(x => if (alphabet.contains(x)) x.toUpperCase else x)\n\
    \        val newMessageList9 = newMessageList8.map(x => if (alphabet.contains(x))\
    \ x.toUpperCase else x)\n        val newMessageList10 = newMessageList9.map(x\
    \ => if (alphabet.contains(x)) x.toUpperCase else x)\n        val newMessageList11\
    \ = newMessageList10.map(x => if (alphabet.contains(x)) x.toUpperCase else x)\n\
    \        val newMessageList12 = newMessageList11.map(x => if (alphabet.contains(x))\
    \ x.toUpperCase else x)\n        val newMessageList13 = newMessageList12.map(x\
    \ => if (alphabet.contains(x)) x.toUpperCase else x)\n        val newMessageList14\
    \ = newMessageList13.map(x => if (alphabet.contains(x)) x.toUpperCase else x)\n\
    \        val newMessageList15 = newMessageList14.map(x => if (alphabet.contains(x))\
    \ x.toUpperCase else x)\n        val newMessageList16 = newMessageList15.map(x\
    \ => if (alphabet.contains(x)) x.toUpperCase else x)\n        val newMessageList17\
    \ = newMessageList16.map(x => if (alphabet.contains(x)) x.toUpperCase else x)\n\
    \        val newMessageList18 = newMessageList17.map(x => if (alphabet.contains(x))\
    \ x.toUpperCase else x)\n        val newMessageList19 = newMessageList18.map(x\
    \ => if (alphabet.contains(x)) x.toUpperCase else x)", "        val alphabet =\
    \ List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message.map(c\
    \ => alphabet(c))\n        val newMessage2 = newMessage.map(c => vowels.indexOf(c))\n\
    \        val newMessage3 = newMessage2.map(c => alphabet(c))\n        val newMessage4\
    \ = newMessage3.map(c => vowels.indexOf(c))\n        val newMessage5 = newMessage4.map(c\
    \ => alphabet(c))\n        val newMessage6 = newMessage5.map(c => vowels.indexOf(c))\n\
    \        val newMessage7 = newMessage6.map(c => alphabet(c))\n        val newMessage8\
    \ = newMessage7.map(c => vowels.indexOf(c))\n        val newMessage9 = newMessage8.map(c\
    \ => alphabet(c))\n        val newMessage10 = newMessage9.map(c => vowels.indexOf(c))\n\
    \        val newMessage11 = newMessage10.map(c => alphabet(c))\n        val newMessage12\
    \ = newMessage11.map(c => vowels.indexOf(c))\n        val newMessage13 = newMessage12.map(c\
    \ => alphabet(c))\n        val newMessage14 = newMessage13.map(c => vowels.indexOf(c))\n\
    \        val newMessage15 = newMessage14.map(c => alphabet(c))\n        val newMessage16\
    \ = newMessage15.map(c => vowels.indexOf(c))\n        val newMessage17 = newMessage16.map(c\
    \ => alphabet(c))\n        val newMessage18 = newMessage17.map(c => vowels.indexOf(c))\n\
    \        val newMessage19 = newMessage18.map(c => alphabet(c))\n        val newMessage20\
    \ = newMessage19.map(c => vowels.indexOf(c))\n        val newMessage21 = newMessage20.map(c\
    \ => alphabet(c))\n        val newMessage22 = newMessage21.map(c => vowels.indexOf(c))\n\
    \        val newMessage23 = newMessage22.map(c => alphabet(c))\n        val newMessage24\
    \ = newMessage23.map(c => vowels.indexOf(c))\n        val newMessage25 = newMessage24.map(c\
    \ => alphabet(c))\n        val newMessage26 = newMessage25.map(c => vowels.indexOf(c))\n\
    \        val newMessage27 = newMessage26.map(c => alphabet(c))\n        val newMessage28\
    \ = newMessage27.map(", "        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map { letter\
    \ =>\n            val index = vowels.indexOf(letter)\n            if (index >=\
    \ 0) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                vowel\n            } else {\n        \
    \        letter\n            }\n        }\n        val newMessage = newMessageArray.toList\n\
    \        val newMessageString = newMessage.toString.replaceAll(\"[aeiouAEIOU]\"\
    , \"$0\")\n        val newMessageString = newMessageString.replaceAll(\"[aAeEiIoOuU]\"\
    , \"$0\")\n        val newMessageString = newMessageString.replaceAll(\"[AEIOUaeiouAEIOU]\"\
    , \"$0\")\n        val newMessageString = newMessageString.replaceAll(\"[aeiouAEIOU]\"\
    , \"$0\")\n        val newMessageString = newMessageString.replaceAll(\"[aAeEiIoOuU]\"\
    , \"$0\")\n        val newMessageString = newMessageString.replaceAll(\"[AEIOUaeiouAEIOU]\"\
    , \"$0\")\n        val newMessageString = newMessageString.replaceAll(\"[aeiouAEIOU]\"\
    , \"$0\")\n        val newMessageString = newMessageString.replaceAll(\"[aAeEiIoOuU]\"\
    , \"$0\")\n        val newMessageString = newMessageString.replaceAll(\"[AEIOUaeiouAEIOU]\"\
    , \"$0\")\n        val newMessageString = newMessageString.replaceAll(\"[aeiouAEIOU]\"\
    , \"$0\")\n        val newMessageString = newMessageString.replaceAll(\"[aAeEiIoOuU]\"\
    , \"$0\")\n        val newMessageString = newMessageString.replaceAll(\"[AEIOUaeiouAEIOU]\"\
    , \"$0\")\n        val newMessageString = newMessageString.replaceAll(\"[aeiouAEIOU]\"\
    , \"$0\")\n        val newMessageString = newMessageString.replaceAll(\"[aAeEiIoOuU]\"\
    , \"$0\")\n        val newMessageString = newMessageString.replaceAll(\"[AEIOUaeiouAEIOU]\"\
    , \"$0\")\n        val newMessageString = newMessageString.replaceAll(\"[aeiouAEIOU]\"\
    , \"$0\")\n        val newMessageString = newMessageString.replaceAll(\"[aAeEiIoOuU]\"\
    , \"$0\")\n        val newMessageString = newMessageString.replaceAll(\"[AEIOUaeiouAEIO",
  "        val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelsMap = Map(vowels -> letters.indexOf(\"a\"))\n        val lettersMap\
    \ = Map(letters -> letters.indexOf(\"a\"))\n        val messageList = message.split(\"\
    \")\n        val result = messageList.foldLeft(\"\") { (result, letter) =>\n \
    \           val nextLetter = lettersMap(letter)\n            val nextVowel = vowelsMap(letter)\n\
    \            val nextLetterIndex = letters.indexOf(letter)\n            val nextVowelIndex\
    \ = vowels.indexOf(letter)\n            val nextLetterIndex = letters.indexOf(letter)\n\
    \            val nextVowelIndex = vowels.indexOf(letter)\n            val nextLetter\
    \ = letters.charAt(nextLetterIndex + 1)\n            val nextVowel = vowels.charAt(nextVowelIndex\
    \ + 1)\n            val nextLetterIndex = letters.indexOf(letter)\n          \
    \  val nextVowelIndex = vowels.indexOf(letter)\n            val nextLetter = letters.charAt(nextLetterIndex\
    \ - 1)\n            val nextVowel = vowels.charAt(nextVowelIndex - 1)\n      \
    \      val nextLetterIndex = letters.indexOf(letter)\n            val nextVowelIndex\
    \ = vowels.indexOf(letter)\n            val nextLetter = letters.charAt(nextLetterIndex\
    \ - 1)\n            val nextVowel = vowels.charAt(nextVowelIndex - 1)\n      \
    \      val nextLetterIndex = letters.indexOf(letter)\n            val nextVowelIndex\
    \ = vowels.indexOf(letter)\n            val nextLetter = letters.charAt(nextLetterIndex\
    \ - 1)\n            val nextVowel = vowels.charAt(nextVowelIndex - 1)\n      \
    \      val nextLetterIndex = letters.indexOf(letter)\n            val nextVowelIndex\
    \ = vowels.indexOf(letter)\n            val nextLetter = letters.charAt(nextLetterIndex\
    \ - 1)\n            val nextVowel = vowels.charAt(nextVowelIndex - 1)\n      \
    \      val nextLetterIndex = letters.indexOf(letter)\n            val nextVowelIndex\
    \ = vowels.indexOf(letter)\n            val nextLetter = letters.charAt(nextLetterIndex\
    \ - 1)\n            val nextVowel = vowels.charAt(nextVowelIndex - 1)\n      \
    \      val nextLetterIndex = letters.indexOf(letter)\n            val nextVowelIndex\
    \ = vowels.indexOf(letter)\n            val nextLetter = letters.charAt(nextLetterIndex\
    \ - 1)\n            val nextVowel = vowels.charAt(nextVowelIndex - 1)\n      \
    \      val next", "        val vowels = \"aeiouAEIOU\"\n        val vowelsMap\
    \ : Map[Char, Char] = \n            Map(a -> \"a\", e -> \"e\", i -> \"i\", o\
    \ -> \"o\", u -> \"u\")\n        val vowelsMap2 = Map(a -> \"A\", e -> \"E\",\
    \ i -> \"I\", o -> \"O\", u -> \"U\")\n        val vowelsMap3 = Map(a -> \"a\"\
    , e -> \"e\", i -> \"i\", o -> \"o\", u -> \"u\", y -> \"y\")\n        val vowelsMap4\
    \ = Map(a -> \"A\", e -> \"E\", i -> \"I\", o -> \"O\", u -> \"U\", y -> \"Y\"\
    )\n        val vowelsMap5 = Map(a -> \"a\", e -> \"e\", i -> \"i\", o -> \"o\"\
    , u -> \"u\", y -> \"y\", y -> \"y\")\n        val vowelsMap6 = Map(a -> \"A\"\
    , e -> \"E\", i -> \"I\", o -> \"O\", u -> \"U\", y -> \"Y\", y -> \"Y\")\n  \
    \      val vowelsMap7 = Map(a -> \"a\", e -> \"e\", i -> \"i\", o -> \"o\", u\
    \ -> \"u\", y -> \"y\", y -> \"y\", y -> \"y\")\n        val vowelsMap8 = Map(a\
    \ -> \"A\", e -> \"E\", i -> \"I\", o -> \"O\", u -> \"U\", y -> \"Y\", y -> \"\
    Y\", y -> \"Y\")\n        val vowelsMap9 = Map(a -> \"a\", e -> \"e\", i -> \"\
    i\", o -> \"o\", u -> \"u\", y -> \"y\", y -> \"y\", y -> \"y\", y -> \"y\")\n\
    \        val vowelsMap10 = Map(a -> \"A\", e -> \"E\", i -> \"I\", o -> \"O\"\
    , u -> \"U\", y -> \"Y\", y -> \"Y\", y -> \"Y\", y -> \"Y\")\n        val vowelsMap11\
    \ = Map(a -> \"a\", e -> \"e\", i -> \"i\", o -> \"o\", u -> \"u\", y -> \"y\"\
    , y -> \"y\", y -> \"y\", y -> \"y\", y -> \"y\")\n        val vowelsMap12 = Map(a\
    \ -> \"A\", e -> \"E\", i -> \"I\", o -> \"O\", ", "        var result = \"\"\n\
    \        for(i <- 0 until message.length){\n            val letter = message.charAt(i)\n\
    \            val vowels = \"aeiouAEIOU\"\n            val vowelIndex = vowels.indexOf(letter)\n\
    \            if(vowelIndex != -1){\n                val vowel2Index = vowels.indexOf(message.charAt(vowelIndex\
    \ + 1))\n                if(vowel2Index != -1){\n                    result +=\
    \ vowels.charAt(vowelIndex) + vowels.charAt(vowel2Index + 1)\n               \
    \ }\n                else{\n                    result += vowels.charAt(vowelIndex\
    \ + 1)\n                }\n            }\n            else{\n                result\
    \ += letter\n            }\n        }\n        result", "        val vowels =\
    \ \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\n     \
    \   val vowelsMap : Map[Char, Char] = \n            Map('a' => \"A\", 'e' => \"\
    E\", 'i' => \"I\", 'o' => \"O\", 'u' => \"U\")\n        val lettersMap : Map[Char,\
    \ Char] = \n            Map('a' => \"a\", 'b' => \"b\", 'c' => \"c\", 'd' => \"\
    d\", 'e' => \"e\", 'f' => \"f\", 'g' => \"g\", 'h' => \"h\", 'i' => \"i\", 'j'\
    \ => \"j\", 'k' => \"k\", 'l' => \"l\", 'm' => \"m\", 'n' => \"n\", 'o' => \"\
    o\", 'p' => \"p\", 'q' => \"q\", 'r' => \"r\", 's' => \"s\", 't' => \"t\", 'u'\
    \ => \"u\", 'v' => \"v\", 'w' => \"w\", 'x' => \"x\", 'y' => \"y\", 'z' => \"\
    z\")\n        val vowelsCount = vowels.toSet.size \n        val lettersCount =\
    \ letters.toSet.size \n        val messageLength = message.length \n        val\
    \ encodedMessage = message.foldLeft(\"\")( (acc, c) => \n            acc + (if\
    \ (vowelsMap.contains(c)) \n                lettersMap(vowelsMap(c)) else c))\n\
    \        val encodedMessageLength = encodedMessage.length \n        val encodedMessageLength\
    \ = encodedMessageLength \n        val encodedMessageLength = encodedMessageLength\
    \ \n        val encodedMessageLength = encodedMessageLength \n        val encodedMessageLength\
    \ = encodedMessageLength \n        val encodedMessageLength = encodedMessageLength\
    \ \n        val encodedMessageLength = encodedMessageLength \n        val encodedMessageLength\
    \ = encodedMessageLength \n        val encodedMessageLength = encodedMessageLength\
    \ \n        val encodedMessageLength = encodedMessageLength \n        val encodedMessageLength\
    \ = encodedMessageLength \n        val encodedMessageLength = encodedMessageLength\
    \ \n        val encodedMessageLength = encodedMessageLength \n        val encodedMessageLength\
    \ = encodedMessageLength \n        val encodedMessageLength = encodedMessageLength\
    \ \n        val encodedMessageLength = encodedMessageLength \n        val encodedMessageLength\
    \ = encodedMessageLength \n        val encodedMessageLength = encodedMessageLength\
    \ \n        val encodedMessageLength = encodedMessageLength \n        val encodedMessageLength\
    \ = encodedMessageLength \n        val encodedMessageLength = encodedMessageLength\
    \ \n        val encodedMessageLength = encodedMessageLength \n        val encodedMessageLength\
    \ = encodedMessageLength \n        val encoded", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\"\")\n        val newMessage = messageList.foldLeft(\"\"){ (acc,\
    \ c) => \n            acc + (if (vowels.contains(c)) c else alphabet(alphabet.indexOf(c)\
    \ + 1))\n        }\n        newMessage", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\" \").toList\n        val newMessage = messageList.map(x => alphabet(alphabet.indexOf(x)\
    \ + 1))\n        val newMessageList = newMessage.map(x => vowels(vowels.indexOf(x)\
    \ + 1))\n        newMessageList.mkString(\"\")", "        val vowels = \"aeiouAEIOU\"\
    \n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\n        val newMessage\
    \ = mutable.Buffer.empty[Char]\n        val vowelsCount = mutable.Map.empty[Char,\
    \ Int]\n        val lettersCount = mutable.Map.empty[Char, Int]\n        val vowelsMap\
    \ = mutable.Map.empty[Char, Char]\n        val lettersMap = mutable.Map.empty[Char,\
    \ Char]\n        for (letter <- letters) {\n            lettersCount(letter) =\
    \ lettersCount(letter) + letter.length\n        }\n        for (letter <- letters)\
    \ {\n            vowelsCount(letter) = vowelsCount(letter) + vowels.count(letter)\n\
    \        }\n        for (letter <- letters) {\n            val vowel = vowels.find(letter\
    \ => letter != letter)\n            val letterIndex = letters.indexOf(letter)\n\
    \            val letterCount = lettersCount(letter)\n            val vowelsCount\
    \ = vowelsCount(letter)\n            val newLetter = if (letterIndex < letterCount\
    \ - 1) {\n                lettersMap(letter)\n            } else {\n         \
    \       lettersMap(letter) + letter.length\n            }\n            val newVowel\
    \ = if (vowelsCount > 1) {\n                vowelsMap(vowel)\n            } else\
    \ {\n                vowelsMap(vowel) + vowel.length\n            }\n        \
    \    val newLetterIndex = lettersCount(newLetter)\n            val newVowelIndex\
    \ = vowelsCount(newVowel)\n            val newLetterCount = lettersCount(newLetter)\n\
    \            val newVowelCount = vowelsCount(newVowel)\n            if (newLetterIndex\
    \ < newLetterCount - 1) {\n                lettersMap(newLetter) = newLetterIndex\n\
    \            } else {\n                lettersMap(newLetter) + newLetterIndex\n\
    \            }\n            if (newVowelIndex < newVowelCount - 1) {\n       \
    \         vowelsMap(newVowel) = newVowelIndex\n            } else {\n        \
    \        vowelsMap(newVowel) + newVowelIndex\n            }\n        }\n     \
    \   for (letter <- letters) {\n            val letterIndex = lettersCount(letter)\n\
    \            val letterCount = lettersCount(letter)\n            val newLetter\
    \ = if (letterIndex < letterCount - 1) {\n                lettersMap(letter)\n\
    \            } else {\n                lettersMap(letter) + letter.length\n  \
    \          }\n            val newLetterIndex = lettersCount(newLetter)\n     \
    \       val newLetterCount = lettersCount(newLetter)\n            if (newLetterIndex\
    \ < newLetterCount - 1) {\n                lettersMap(newLetter) = newLetterIndex\n\
    \            } else {\n                lettersMap(newLetter) + newLetterIndex\n\
    \            }", "        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val vowelsMap = Map(\"a\" -> \"A\", \"e\"\
    \ -> \"E\", \"i\" -> \"I\", \"o\" -> \"O\", \"u\" -> \"U\")\n        val lettersMap\
    \ = Map(\"a\" -> \"b\", \"e\" -> \"f\", \"i\" -> \"j\", \"o\" -> \"k\", \"u\"\
    \ -> \"l\")\n        val messageList = message.split(\"\")\n        val encodedMessage\
    \ = messageList.foldLeft(\"\") { (result, currentChar) =>\n            val currentCharIndex\
    \ = lettersMap.keys.toList.indexOf(currentChar)\n            val currentCharIndex\
    \ = currentCharIndex + 2\n            val currentCharIndex = currentCharIndex\
    \ % lettersMap.size\n            val currentChar = lettersMap(lettersMap.keys.toList.apply(currentCharIndex))\n\
    \            val currentCharIndex = lettersMap.keys.toList.indexOf(currentChar)\n\
    \            val currentCharIndex = currentCharIndex + 2\n            val currentCharIndex\
    \ = currentCharIndex % lettersMap.size\n            val currentChar = lettersMap(lettersMap.keys.toList.apply(currentCharIndex))\n\
    \            val currentCharIndex = lettersMap.keys.toList.indexOf(currentChar)\n\
    \            val currentCharIndex = currentCharIndex + 2\n            val currentCharIndex\
    \ = currentCharIndex % lettersMap.size\n            val currentChar = lettersMap(lettersMap.keys.toList.apply(currentCharIndex))\n\
    \            val currentCharIndex = lettersMap.keys.toList.indexOf(currentChar)\n\
    \            val currentCharIndex = currentCharIndex + 2\n            val currentCharIndex\
    \ = currentCharIndex % lettersMap.size\n            val currentChar = lettersMap(lettersMap.keys.toList.apply(currentCharIndex))\n\
    \            val currentCharIndex = lettersMap.keys.toList.indexOf(currentChar)\n\
    \            val currentCharIndex = currentCharIndex + 2\n            val currentCharIndex\
    \ = currentCharIndex % lettersMap.size\n            val currentChar = lettersMap(lettersMap.keys.toList.apply(currentCharIndex))\n\
    \            val currentCharIndex = lettersMap.keys.toList.indexOf(currentChar)\n\
    \            val currentCharIndex = currentCharIndex + 2\n            val currentCharIndex\
    \ = currentCharIndex % lettersMap.size\n            val currentChar = lettersMap(lettersMap.keys.toList.apply(currentCharIndex))\n\
    \            val currentCharIndex = lettersMap.keys.toList.indexOf(currentChar)\n\
    \            val currentCharIndex = currentCharIndex + 2\n            val currentCharIndex\
    \ = currentCharIndex % lettersMap.size\n            val ", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  \
    \      val newMessage = message.map(letter => alphabet.indexOf(letter) + alphabet.indexOf(vowels(0))\
    \ + alphabet.indexOf(vowels(1)) + alphabet.indexOf(vowels(2)))\n        val newMessageString\
    \ = newMessage.toList.toString\n        newMessageString.reverse.mkString(\"\"\
    )", "        val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = mutable.Buffer.empty[String]\n        val vowelsCount\
    \ = mutable.Buffer.empty[Int]\n        val lettersCount = mutable.Buffer.empty[Int]\n\
    \        val messageLength = message.length\n        for(i <- 0 until messageLength)\
    \ {\n            val currentChar = message.charAt(i)\n            val currentCharIndex\
    \ = letters.indexOf(currentChar)\n            val currentCharVowelIndex = vowels.indexOf(currentChar)\n\
    \            val currentCharVowelIndex2 = vowels.indexOf(currentChar, currentCharIndex\
    \ + 1)\n            val currentCharVowelIndex3 = vowels.indexOf(currentChar, currentCharIndex\
    \ + 2)\n            val currentCharVowelIndex4 = vowels.indexOf(currentChar, currentCharIndex\
    \ + 3)\n            val currentCharVowelIndex5 = vowels.indexOf(currentChar, currentCharIndex\
    \ + 4)\n            val currentCharVowelIndex6 = vowels.indexOf(currentChar, currentCharIndex\
    \ + 5)\n            val currentCharVowelIndex7 = vowels.indexOf(currentChar, currentCharIndex\
    \ + 6)\n            val currentCharVowelIndex8 = vowels.indexOf(currentChar, currentCharIndex\
    \ + 7)\n            val currentCharVowelIndex9 = vowels.indexOf(currentChar, currentCharIndex\
    \ + 8)\n            val currentCharVowelIndex10 = vowels.indexOf(currentChar,\
    \ currentCharIndex + 9)\n            val currentCharVowelIndex11 = vowels.indexOf(currentChar,\
    \ currentCharIndex + 10)\n            val currentCharVowelIndex12 = vowels.indexOf(currentChar,\
    \ currentCharIndex + 11)\n            val currentCharVowelIndex13 = vowels.indexOf(currentChar,\
    \ currentCharIndex + 12)\n            val currentCharVowelIndex14 = vowels.indexOf(currentChar,\
    \ currentCharIndex + 13)\n            val currentCharVowelIndex15 = vowels.indexOf(currentChar,\
    \ currentCharIndex + 14)\n            val currentCharVowelIndex16 = vowels.indexOf(currentChar,\
    \ currentCharIndex + 15)\n            val currentCharVowelIndex17 = vowels.indexOf(currentChar,\
    \ currentCharIndex + 16)\n            val currentCharVowelIndex18 = vowels.indexOf(currentChar,\
    \ currentCharIndex + 17)\n            val currentCharVowelIndex19 = vowels.indexOf(currentChar,\
    \ currentCharIndex + 18)\n            val currentCharVowelIndex20", "        val\
    \ vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\")\n  \
    \      val encodedMessageArray = messageArray.map(letter => {\n            val\
    \ vowelIndex = vowels.indexOf(letter)\n            if (vowelIndex != -1) vowels(vowelIndex)\
    \ + letter\n            else letter\n        })\n        val encodedMessage =\
    \ encodedMessageArray.toList\n        encodedMessage.reverse.mkString(\"\")",
  "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(letter => alphabet(alphabet.indexOf(letter) + 1))\n        val newMessage2\
    \ = message.map(letter => vowels(vowels.indexOf(letter) + 1))\n        newMessage.zip(newMessage2).map(x\
    \ => x.swap).mkString(\"\")", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 1))\n        val newVowels = vowels.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 1))\n        newMessage.zip(newVowels).map(x\
    \ => x.swap).mkString(\"\")", "        val vowels = \"aeiouAEIOU\"\n        val\
    \ messageArray = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val nextVowel = vowels(index + 1)\n              \
    \  val nextIndex = vowels.indexOf(nextVowel)\n                if (nextIndex !=\
    \ -1) {\n                    nextVowel\n                } else {\n           \
    \         letter\n                }\n            } else {\n                letter\n\
    \            }\n        })\n        newMessageArray.toString()", "        val\
    \ vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageArray = message.split(\"\")\n        val newMessageArray\
    \ = messageArray.map(letter => {\n            val index = letters.indexOf(letter)\n\
    \            if (index != -1) {\n                val nextIndex = index + 2\n \
    \               if (nextIndex < letters.length) {\n                    letters(nextIndex)\n\
    \                } else {\n                    letter\n                }\n   \
    \         } else {\n                letter\n            }\n        })\n      \
    \  newMessageArray.toString.replaceAll(vowels, letters)", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowelsMap = Map(vowels -> \"A\", vowels.tail ->\"B\")\n        val\
    \ newMessage = message.map { c =>\n            c match {\n                case\
    \ 'a' => alphabet(0)\n                case 'b' => alphabet(1)\n              \
    \  case 'c' => alphabet(2)\n                case 'd' => alphabet(3)\n        \
    \        case 'e' => alphabet(4)\n                case 'f' => alphabet(5)\n  \
    \              case 'g' => alphabet(6)\n                case 'h' => alphabet(7)\n\
    \                case 'i' => alphabet(8)\n                case 'j' => alphabet(9)\n\
    \                case 'k' => alphabet(10)\n                case 'l' => alphabet(11)\n\
    \                case 'm' => alphabet(12)\n                case 'n' => alphabet(13)\n\
    \                case 'o' => alphabet(14)\n                case 'p' => alphabet(15)\n\
    \                case 'q' => alphabet(16)\n                case 'r' => alphabet(17)\n\
    \                case 's' => alphabet(18)\n                case 't' => alphabet(19)\n\
    \                case 'u' => alphabet(20)\n                case 'v' => alphabet(21)\n\
    \                case 'w' => alphabet(22)\n                case 'x' => alphabet(23)\n\
    \                case 'y' => alphabet(24)\n                case 'z' => alphabet(25)\n\
    \                case _ => c\n            }\n        }\n        val newMessage2\
    \ = newMessage.map { c =>\n            c match {\n                case vowels(0)\
    \ => vowelsMap.getOrElse(c, c)\n                case vowels(1) => vowelsMap.getOrElse(c,\
    \ c)\n                case vowels(2) => vowelsMap.getOrElse(c, c)\n          \
    \      case vowels(3) => vowelsMap.getOrElse(c, c)\n                case vowels(4)\
    \ => vowelsMap.getOrElse(c, c)\n                case vowels(5) => vowelsMap.getOrElse(c,\
    \ c)\n                case vowels(6) => vowelsMap.getOrElse(c, c)\n          \
    \      case vowels(7) => vowelsMap.getOrElse(c, c)\n                case vowels(8)\
    \ => vowelsMap.getOrElse(c, c)\n                case vowels(9) => vowelsMap.getOrElse(c,\
    \ c)\n                case vowels(10) => vowelsMap.getOrElse(c, c)\n         \
    \       case vowels(11) => vowelsMap.getOrElse(c, c)\n                case vowels(12)\
    \ => vowelsMap.getOrElse(c, c)\n                case vowels(13) => vowelsMap.getOrElse(c,\
    \ c)\n                case vowels(14) => vowel", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\"\")\n        val newMessage = messageList.foldLeft(\"\") { (result,\
    \ letter) => \n            val index = alphabet.indexOf(letter)\n            val\
    \ nextLetter = alphabet(index + 1)\n            val newLetter = if (vowels.contains(letter))\
    \ letter else nextLetter\n            result + newLetter\n        }\n        newMessage",
  "        val vowels = \"aeiou\"\n        val messageArray = message.split(\"\")\n\
    \        val newMessageArray = messageArray.map(letter => {\n            val index\
    \ = vowels.indexOf(letter)\n            if (index != -1) {\n                val\
    \ vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n   \
    \             vowel\n            } else {\n                letter\n          \
    \  }\n        })\n        val newMessageString = newMessageArray.toList\n    \
    \    val newMessageStringBuilder = new StringBuilder\n        newMessageStringBuilder.append(newMessageString.head)\n\
    \        newMessageStringBuilder.append(newMessageString.last)\n        newMessageStringBuilder.reverse\n\
    \        newMessageStringBuilder.mkString", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageArray = message.split(\"\")\n        val newMessageArray\
    \ = messageArray.map { letter =>\n            val index = vowels.indexOf(letter)\n\
    \            if (index != -1) {\n                val nextLetter = vowels(index\
    \ + 1)\n                letter -> nextLetter\n            } else {\n         \
    \       letter -> letter\n            }\n        }\n        val newMessage = newMessageArray.toList\n\
    \        val newMessageString = newMessage.toString.replaceAll(\"[aeiouAEIOU]\"\
    , \"$0\")\n        val newMessageStringArray = newMessageString.split(\"\")\n\
    \        val newMessageStringArrayLength = newMessageStringArray.length\n    \
    \    val newMessageStringArrayWithVowels = newMessageStringArray.map { letter\
    \ =>\n            if (vowels.indexOf(letter) != -1) {\n                val index\
    \ = vowels.indexOf(letter)\n                val nextLetter = vowels(index + 1)\n\
    \                letter -> nextLetter\n            } else {\n                letter\
    \ -> letter\n            }\n        }\n        val newMessageStringWithVowels\
    \ = newMessageStringArrayWithVowels.toList\n        val newMessageStringWithVowelsString\
    \ = newMessageStringWithVowels.toString.replaceAll(\"[aeiouAEIOU]\", \"$0\")\n\
    \        val newMessageStringWithVowelsStringArray = newMessageStringWithVowelsString.split(\"\
    \")\n        val newMessageStringWithVowelsStringArrayLength = newMessageStringWithVowelsStringArray.length\n\
    \        val newMessageStringWithVowelsStringArrayWithVowels = newMessageStringWithVowelsStringArray.map\
    \ { letter =>\n            if (vowels.indexOf(letter) != -1) {\n             \
    \   val index = vowels.indexOf(letter)\n                val nextLetter = vowels(index\
    \ + 1)\n                letter -> nextLetter\n            } else {\n         \
    \       letter -> letter\n            }\n        }\n        val newMessageStringWithVowelsStringArrayWithVowelsString\
    \ = newMessageStringWithVowelsStringArrayWithVowels.toList\n        val newMessageStringWithVowelsStringArrayWithVowelsStringArray\
    \ = newMessageStringWithVowelsStringArrayWithVowelsString.split(\"\")\n      \
    \  val newMessageStringWithVowelsStringArrayWithVowelsStringArrayLength = newMessageStringWithVowelsStringArrayWithVowelsStringArray.length\n\
    \        val newMessageStringWithVowelsStringArrayWithVowelsStringArrayWithV",
  "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val letters\
    \ = Set(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.map(letter => letters.find(letter\
    \ => vowels.contains(letter)).getOrElse(letter)).mkString(\"\")\n        val encodedMessageArray\
    \ = encodedMessage.split(\"\")\n        val encodedMessageArrayLength = encodedMessageArray.length\n\
    \        val vowelsArray = vowels.toArray\n        val vowelsArrayLength = vowelsArray.length\n\
    \        val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       ", "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            if\
    \ (vowels.contains(letter)) {\n                val vowelIndex = vowels.indexOf(letter)\n\
    \                val vowel2Index = vowels.indexOf(vowels(vowelIndex + 1))\n  \
    \              vowels(vowelIndex + 1) \n            } else if (letter != vowels(vowels.indexOf(letter)\
    \ + 1)) {\n                letter\n            } else {\n                letter\n\
    \            }\n        })\n        val newMessage = newMessageArray.toList\n\
    \        val newMessageString = newMessage.toString\n        newMessageString",
  "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                val newLetter = vowel.charAt(0) + letter.charAt(0)\n        \
    \        vowels(vowelIndex) = vowel\n                newLetter\n            }\
    \ else {\n                letter\n            }\n        })\n        val newMessage\
    \ = String.join(\"\", newMessageArray)\n        newMessage", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val messageList = message.split(\"\")\n        val\
    \ result = new StringBuilder\n        val vowelCounts = messageList.map(letter\
    \ => vowels.count(letter => letter == letter))\n        val vowelPositions = messageList.map(letter\
    \ => vowels.indexOf(letter))\n        val vowelPositionsSorted = vowelPositions.sortWith((a,\
    \ b) => a < b)\n        val vowelPositionsSortedMap = vowelPositionsSorted.toMap\n\
    \        val vowelPositionsSortedMapSorted = vowelPositionsSortedMap.sortWith((a,\
    \ b) => a < b)\n        vowelPositionsSortedMapSorted.foreach { case (vowelPosition,\
    \ vowelCount) =>\n            val vowelPosition2 = vowelPosition + 2\n       \
    \     if (vowelPosition2 < vowelPositionsSortedMapSorted.length) {\n         \
    \       val vowelPosition2 = vowelPositionsSortedMapSorted.get(vowelPosition2)\n\
    \                val vowelPosition2 = vowelPosition2.getOrElse(0)\n          \
    \      val vowelPosition2 = vowelPosition2 + 1\n                val vowelPosition2\
    \ = vowelPositionsSortedMapSorted.get(vowelPosition2)\n                val vowelPosition2\
    \ = vowelPosition2.getOrElse(0)\n                val vowelPosition2 = vowelPosition2\
    \ + 1\n                val vowelPosition2 = vowelPositionsSortedMapSorted.get(vowelPosition2)\n\
    \                val vowelPosition2 = vowelPosition2.getOrElse(0)\n          \
    \      val vowelPosition2 = vowelPosition2 + 1\n                val vowelPosition2\
    \ = vowelPositionsSortedMapSorted.get(vowelPosition2)\n                val vowelPosition2\
    \ = vowelPosition2.getOrElse(0)\n                val vowelPosition2 = vowelPosition2\
    \ + 1\n                val vowelPosition2 = vowelPositionsSortedMapSorted.get(vowelPosition2)\n\
    \                val vowelPosition2 = vowelPosition2.getOrElse(0)\n          \
    \      val vowelPosition2 = vowelPosition2 + 1\n                val vowelPosition2\
    \ = vowelPositionsSortedMapSorted.get(vowelPosition2)\n                val vowelPosition2\
    \ = vowelPosition2.getOrElse(0)\n                val vowelPosition2 = vowelPosition2\
    \ + 1\n                val vowelPosition2 = vowelPositionsSortedMapSorted.get(vowelPosition2)\n\
    \                val vowelPosition2 = vowelPosition2.getOrElse(0)\n          \
    \      val vowelPosition2 = vowelPosition2 + 1\n                val vowelPosition2\
    \ = vowelPositionsSortedMapSorted.get(vowelPosition2)\n                val vowelPosition2\
    \ = vowelPosition2.getOrElse(0)\n                val vowelPosition2 = vowelPosition2\
    \ + 1\n                val vowelPosition2 = vowelPositionsSortedMapSorted.get(vowelPosition2)\n\
    \                val vowelPosition2 = vowelPosition2.getOrElse(0)", "        val\
    \ vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\")\n  \
    \      val newMessageArray = messageArray.map(letter => {\n            val index\
    \ = vowels.indexOf(letter)\n            if (index >= 0) {\n                val\
    \ vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n   \
    \             val newLetter = vowel.charAt(0).toUpperCase + vowel.substring(1)\n\
    \                val newIndex = vowels.indexOf(newLetter)\n                if\
    \ (newIndex >= 0) {\n                    newLetter\n                } else {\n\
    \                    letter\n                }\n            } else {\n       \
    \         letter\n            }\n        })\n        newMessageArray.toString.toUpperCase",
  "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message.map(letter\
    \ => alphabet.indexOf(letter) + vowels.indexOf(letter) + 1)\n        val newMessageString\
    \ = newMessage.toList.toString\n        val newMessageStringLength = newMessageString.length\n\
    \        val newMessageStringLength = newMessageString.length\n        val newMessageStringLength\
    \ = newMessageString.length\n        val newMessageStringLength = newMessageString.length\n\
    \        val newMessageStringLength = newMessageString.length\n        val newMessageStringLength\
    \ = newMessageString.length\n        val newMessageStringLength = newMessageString.length\n\
    \        val newMessageStringLength = newMessageString.length\n        val newMessageStringLength\
    \ = newMessageString.length\n        val newMessageStringLength = newMessageString.length\n\
    \        val newMessageStringLength = newMessageString.length\n        val newMessageStringLength\
    \ = newMessageString.length\n        val newMessageStringLength = newMessageString.length\n\
    \        val newMessageStringLength = newMessageString.length\n        val newMessageStringLength\
    \ = newMessageString.length\n        val newMessageStringLength = newMessageString.length\n\
    \        val newMessageStringLength = newMessageString.length\n        val newMessageStringLength\
    \ = newMessageString.length\n        val newMessageStringLength = newMessageString.length\n\
    \        val newMessageStringLength = newMessageString.length\n        val newMessageStringLength\
    \ = newMessageString.length\n        val newMessageStringLength = newMessageString.length\n\
    \        val newMessageStringLength = newMessageString.length\n        val newMessageStringLength\
    \ = newMessageString.length\n        val newMessageStringLength = newMessageString.length\n\
    \        val newMessageStringLength = newMessageString.length\n        val newMessageStringLength\
    \ = newMessageString.length\n        val newMessageStringLength = newMessageString.length\n\
    \        val newMessageStringLength = newMessageString.length\n        val newMessageStringLength\
    \ = newMessageString.length\n        val newMessageStringLength = newMessageString.length\n\
    \        val newMessageStringLength = newMessageString.length\n        val newMessageStringLength\
    \ = newMessageString.length\n        val newMessageStringLength = newMessageString.length\n\
    \        val newMessageStringLength = newMessageString.length\n        val newMessageStringLength\
    \ = newMessageString.length\n        val newMessageStringLength = newMessageString.length",
  "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                val replacement = vowels.substring(vowelIndex, vowelIndex + 2)\n\
    \                vowel + replacement\n            } else {\n                letter\n\
    \            }\n        })\n        newMessageArray.toString.replace(\"[\", \"\
    \").replace(\"]\", \"\")", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.map(letter\
    \ => {\n            val index = alphabet.indexOf(letter)\n            val vowelIndex\
    \ = vowels.indexOf(letter)\n            if (vowelIndex > -1) {\n             \
    \   val vowel = vowels(vowelIndex)\n                val vowelIndex = vowels.indexOf(vowel)\n\
    \                val vowelIndex = vowelIndex + 2\n                alphabet(index)\n\
    \            } else {\n                alphabet(index)\n            }\n      \
    \  }).mkString(\"\")\n        encodedMessage", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageArray = message.split(\"\")\n        val encodedMessage =\
    \ messageArray.map(letter => vowels.indexOf(letter) match {\n            case\
    \ -1 => letter\n            case 0 => letter\n            case 1 => vowels(letter\
    \ - 2)\n            case 2 => vowels(letter - 3)\n            case 3 => vowels(letter\
    \ - 4)\n            case 4 => vowels(letter - 5)\n            case 5 => vowels(letter\
    \ - 6)\n            case 6 => vowels(letter - 7)\n            case 7 => vowels(letter\
    \ - 8)\n            case 8 => vowels(letter - 9)\n            case 9 => vowels(letter\
    \ - 10)\n            case 10 => vowels(letter - 11)\n            case 11 => vowels(letter\
    \ - 12)\n            case 12 => vowels(letter - 13)\n            case 13 => vowels(letter\
    \ - 14)\n            case 14 => vowels(letter - 15)\n            case 15 => vowels(letter\
    \ - 16)\n            case 16 => vowels(letter - 17)\n            case 17 => vowels(letter\
    \ - 18)\n            case 18 => vowels(letter - 19)\n            case 19 => vowels(letter\
    \ - 20)\n            case 20 => vowels(letter - 21)\n            case 21 => vowels(letter\
    \ - 22)\n            case 22 => vowels(letter - 23)\n            case 23 => vowels(letter\
    \ - 24)\n            case 24 => vowels(letter - 25)\n            case 25 => vowels(letter\
    \ - 26)\n            case 26 => vowels(letter - 27)\n            case 27 => vowels(letter\
    \ - 28)\n            case 28 => vowels(letter - 29)\n            case 29 => vowels(letter\
    \ - 30)\n            case 30 => vowels(letter - 31)\n            case 31 => vowels(letter\
    \ - 32)\n            case 32 => vowels(letter - 33)\n            case 33 => vowels(letter\
    \ - 34)\n            case 34 => vowels(letter - 35)\n            case 35 => vowels(letter\
    \ - 36)\n            case 36 => vowels(letter - 37)\n            case 37 => vowels(letter\
    \ - 38)\n            case 38 => vowels(letter - 39)\n            case 39 => vowels(letter\
    \ - 40)\n            case 40 => vowels(letter - 41)\n            case 41 => vowels(letter\
    \ - 42)\n            case 42 => vowels(letter - 43)\n            case 43 => vowels(letter\
    \ - 44)\n            case 44 => vowels(letter - 45)\n            case 45 => vowels(letter\
    \ - 46)\n            case 46 => vowels(letter - 47)\n            case 47 => vowels(letter\
    \ - 48)\n            case 48 => vowels(letter - 49)\n            case ", "   \
    \     var result = \"\"\n        for (letter <- message) {\n            result\
    \ += letter\n        }\n        for (letter <- message) {\n            result\
    \ += letter.toUpperCase\n        }\n        for (letter <- message) {\n      \
    \      result += letter.toLowerCase\n        }\n        for (letter <- message)\
    \ {\n            result += letter\n        }\n        return result", "      \
    \  val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelsMap : Map[Char, Char] = Map('a' -> 'A', 'e' -> 'E', 'i' ->\
    \ 'I', 'o' -> 'O', 'u' -> 'U')\n        val lettersMap : Map[Char, Char] = Map('z'\
    \ -> 'Z', 'y' -> 'Y', 'x' -> 'X', 'a' -> 'A', 'e' -> 'E', 'i' -> 'I', 'o' -> 'O',\
    \ 'u' -> 'U', 'y' -> 'Y', 'x' -> 'X', 'z' -> 'Z')\n        val messageList = message.split(\"\
    \")\n        val result = new StringBuilder\n        for (i <- 0 until messageList.length)\
    \ {\n            val currentChar = messageList(i)\n            val currentCharUpper\
    \ = currentChar.toUpper\n            val currentCharLower = currentChar.toLower\n\
    \            val currentCharVowel = vowels.indexOf(currentCharUpper)\n       \
    \     val currentCharLetter = letters.indexOf(currentCharLower)\n            val\
    \ currentCharVowel2 = vowelsMap(currentCharUpper)\n            val currentCharLetter2\
    \ = lettersMap(currentCharLower)\n            if (currentCharVowel != -1) {\n\
    \                val currentCharVowel3 = vowelsMap(currentCharVowel)\n       \
    \         val currentCharLetter3 = lettersMap(currentCharLetter)\n           \
    \     if (currentCharVowel2 != -1) {\n                    val currentCharVowel4\
    \ = vowelsMap(currentCharVowel2)\n                    val currentCharLetter4 =\
    \ lettersMap(currentCharLetter2)\n                    if (currentCharVowel3 !=\
    \ -1) {\n                        val currentCharVowel5 = vowelsMap(currentCharVowel3)\n\
    \                        val currentCharLetter5 = lettersMap(currentCharLetter3)\n\
    \                        if (currentCharVowel4 != -1) {\n                    \
    \        val currentCharVowel6 = vowelsMap(currentCharVowel4)\n              \
    \              val currentCharLetter6 = lettersMap(currentCharLetter4)\n     \
    \                       if (currentCharVowel5 != -1) {\n                     \
    \           val currentCharVowel7 = vowelsMap(currentCharVowel5)\n           \
    \                     val currentCharLetter7 = lettersMap(currentCharLetter5)\n\
    \                                if (currentCharVowel6 != -1) {\n            \
    \                        val currentCharVowel8 = vowelsMap(currentCharVowel6)\n\
    \                                    val currentCharLetter8 = lettersMap(currentCharLetter6)\n\
    \                                    if (currentCharV", "        val vowels =\
    \ \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\n     \
    \   val newMessage = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0))\
    \ + 1)\n        val newMessage2 = newMessage.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(1)) + 1)\n        newMessage2.foldLeft(\"\"\
    )(_ + _)", "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => \n            vowels.indexOf(letter)\
    \ match {\n                case -1 => letter\n                case i => vowels(i\
    \ + 2)\n            }\n        )\n        val newMessage = newMessageArray.toList\n\
    \        val newMessageString = newMessage.toString.reverse.mkString(\"\")\n \
    \       return newMessageString", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(letter => alphabet(alphabet.indexOf(letter) + 1))\n        val newVowels\
    \ = vowels.map(letter => alphabet(alphabet.indexOf(letter) + 1))\n        newMessage.zip(newVowels).map(x\
    \ => x.swap).foldLeft(\"\")(_ + _)", "        val vowels = \"aeiouAEIOU\"\n  \
    \      val messageArray = message.split(\"\")\n        val newMessage = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val nextVowel = vowels(index + 1)\n              \
    \  val nextIndex = vowels.indexOf(nextVowel)\n                if (nextIndex !=\
    \ -1) {\n                    nextVowel\n                } else {\n           \
    \         letter\n                }\n            } else {\n                letter\n\
    \            }\n        }).mkString(\"\")\n        newMessage", "        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\"\")\n        val newMessage = messageList.foldLeft(\"\"){ (acc,\
    \ elem) =>\n            val index = alphabet.indexOf(elem)\n            val nextIndex\
    \ = index + 2\n            if(nextIndex < alphabet.length) acc += alphabet(nextIndex)\n\
    \            acc += elem\n        }\n        val vowelIndex = vowels.indexOf(messageList(0))\n\
    \        val newVowel = vowels(vowelIndex + 2)\n        newMessage + newVowel",
  "        val vowels = \"aeiouAEIOU\"\n        val messageLength = message.length\n\
    \        val encodedMessage = mutable.StringBuilder(messageLength)\n        var\
    \ i = 0\n        while (i < messageLength) {\n            val currentChar = message.charAt(i)\n\
    \            val nextChar = message.charAt(i + 1)\n            if (vowels.contains(currentChar))\
    \ {\n                val nextVowel = message.charAt(i + 2)\n                val\
    \ nextVowelIndex = vowels.indexOf(nextVowel)\n                val nextCharIndex\
    \ = vowels.indexOf(nextChar)\n                val nextCharIndex = nextCharIndex\
    \ + 2\n                encodedMessage.append(vowels(nextCharIndex))\n        \
    \        i += 2\n            } else {\n                encodedMessage.append(currentChar)\n\
    \                i += 1\n            }\n        }\n        encodedMessage.toString()",
  "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                vowels.indexOf(vowel, vowelIndex) + vowel\n            } else\
    \ {\n                letter\n            }\n        }).mkString(\"\")\n      \
    \  encodedMessage", "        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case i => vowels(i + 2)\n        })\n        val newMessage = newMessageArray.toList\n\
    \        val newMessageString = newMessage.toString.toUpperCase\n        val newMessageStringArray\
    \ = newMessageString.split(\"\")\n        val newMessageStringArrayLength = newMessageStringArray.length\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength + 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength + 2\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength + 2\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength + 2\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength + 2\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength + 2\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength + 2\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength + 2\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength + 2\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength + 2\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ + 2\n        val newMessageStringArrayLength = newMessageStringArrayLength +\
    \ 2\n        val newMessageStringArrayLength = newMessageStringArrayLength + 2\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength + 2\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength + 2\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength + 2\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength + 2\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength + 2\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength + 2\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength + 2\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength + 2\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength + 2\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength + 2\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength + 2\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ + 2\n        val newMessageStringArrayLength = newMessageStringArrayLength +\
    \ 2\n        val newMessageStringArrayLength = new", "        val vowels = \"\
    aeiouAEIOU\".toCharArray\n        val messageArray = message.toCharArray\n   \
    \     val result = new StringBuilder\n        val vowelsCount = new mutable.HashMap[Char,\
    \ Int]()\n        for (i <- 0 until messageArray.length) {\n            val c\
    \ = messageArray(i)\n            if (vowels.contains(c)) {\n                val\
    \ vowelIndex = vowels.indexOf(c)\n                val vowelCount = vowelsCount(c)\n\
    \                if (vowelIndex == -1) {\n                    vowelsCount(c) =\
    \ 1\n                } else {\n                    vowelsCount(c) = vowelsCount(c)\
    \ + 1\n                }\n                val vowel2Index = vowelIndex + 2\n \
    \               if (vowel2Index >= vowels.length) {\n                    vowelsCount(c)\
    \ = vowelsCount(c) + 1\n                } else {\n                    vowelsCount(c)\
    \ = vowelsCount(c) + 1\n                }\n                val vowel3Index = vowel2Index\
    \ + 2\n                if (vowel3Index >= vowels.length) {\n                 \
    \   vowelsCount(c) = vowelsCount(c) + 1\n                } else {\n          \
    \          vowelsCount(c) = vowelsCount(c) + 1\n                }\n          \
    \      val vowel4Index = vowel3Index + 2\n                if (vowel4Index >= vowels.length)\
    \ {\n                    vowelsCount(c) = vowelsCount(c) + 1\n               \
    \ } else {\n                    vowelsCount(c) = vowelsCount(c) + 1\n        \
    \        }\n                val vowel5Index = vowel4Index + 2\n              \
    \  if (vowel5Index >= vowels.length) {\n                    vowelsCount(c) = vowelsCount(c)\
    \ + 1\n                } else {\n                    vowelsCount(c) = vowelsCount(c)\
    \ + 1\n                }\n                val vowel6Index = vowel5Index + 2\n\
    \                if (vowel6Index >= vowels.length) {\n                    vowelsCount(c)\
    \ = vowelsCount(c) + 1\n                } else {\n                    vowelsCount(c)\
    \ = vowelsCount(c) + 1\n                }\n                val vowel7Index = vowel6Index\
    \ + 2\n                if (vowel7Index >= vowels.length) {\n                 \
    \   vowelsCount(c) = vowelsCount(c) + 1\n                } else {\n          \
    \          vowelsCount(c) = vowelsCount(c) + 1\n                }\n          \
    \      val vowel8Index = vowel7Index + 2\n                if (vowel8Index >= vowels.length)\
    \ {\n                    vowelsCount(c) = vowelsCount(c) + 1\n               \
    \ } else {\n                    vowelsCount(c) = vowelsCount(c) + 1\n        \
    \        }\n                val vowel9Index = vowel8Index + 2\n              \
    \  if (vowel9Index >= vowels.length) {\n                    vowelsCount(c) = vowelsCount(c)\
    \ + 1\n                } else {\n                    vowelsCount(c) = vowelsCount(c)\
    \ + 1\n                }\n                val vowel10Index = vowel9Index + 2\n\
    \                if (vowel10Index >= vowels.length) {\n                    ",
  "        val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray = message.toCharArray\n\
    \        val newMessage = new Array[Char](messageArray.length)\n        val vowelsArray\
    \ = vowels.toCharArray\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n", "        var result = \"\"\n        var vowels = \"\
    aeiouAEIOU\"\n        var letters = \"abcdefghijklmnopqrstuvwxyz\"\n        var\
    \ vowelIndex = 0\n        var letterIndex = 0\n        for(i <- 0 until message.length){\n\
    \            result += message.charAt(i).toUpper\n            result += message.charAt(i).toLower\n\
    \            result += message.charAt(i).toUpper\n            result += message.charAt(i).toLower\n\
    \            result += message.charAt(i).toUpper\n            result += message.charAt(i).toLower\n\
    \            result += message.charAt(i).toUpper\n            result += message.charAt(i).toLower\n\
    \            result += message.charAt(i).toUpper\n            result += message.charAt(i).toLower\n\
    \            result += message.charAt(i).toUpper\n            result += message.charAt(i).toLower\n\
    \            result += message.charAt(i).toUpper\n            result += message.charAt(i).toLower\n\
    \            result += message.charAt(i).toUpper\n            result += message.charAt(i).toLower\n\
    \            result += message.charAt(i).toUpper\n            result += message.charAt(i).toLower\n\
    \            result += message.charAt(i).toUpper\n            result += message.charAt(i).toLower\n\
    \            result += message.charAt(i).toUpper\n            result += message.charAt(i).toLower\n\
    \            result += message.charAt(i).toUpper\n            result += message.charAt(i).toLower\n\
    \            result += message.charAt(i).toUpper\n            result += message.charAt(i).toLower\n\
    \            result += message.charAt(i).toUpper\n            result += message.charAt(i).toLower\n\
    \            result += message.charAt(i).toUpper\n            result += message.charAt(i).toLower\n\
    \            result += message.charAt(i).toUpper\n            result += message.charAt(i).toLower\n\
    \            result += message.charAt(i).toUpper\n            result += message.charAt(i).toLower\n\
    \            result += message.charAt(i).toUpper\n            result += message.charAt(i).toLower\n\
    \            result += message.charAt(i).toUpper\n            result += message.charAt(i).toLower\n\
    \            result += message.charAt(i).toUpper\n            result += message.charAt(i).toLower\n\
    \            result += message.charAt(i).toUpper\n            result += message.charAt(i).toLower\n\
    \            result += message.charAt(i).toUpper\n            result += message.charAt(i).toLower\n\
    \            result += message.charAt(i).toUpper\n            result += message.charAt(i).toLower\n\
    \            result += message.charAt(i).toUpper\n            result += message.charAt(i).toLower\n\
    \            result += message.charAt(i).toUpper\n            result += message.charAt(i).toLower\n\
    \            result += message.charAt(i).toUpper\n            result += message.charAt(i).toLower\n\
    \            result += message.charAt(i).toUpper\n            result += message.charAt(i).toLower\n\
    \            result += message.charAt(i).toUpper\n            result += message.charAt(i).toLower\n\
    \            result += message.charAt(i).toUpper\n            result += message.charAt(i).to",
  "        val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray = message.toCharArray\n\
    \        val result = new StringBuilder\n        for(i <- 0 until messageArray.length){\n\
    \            val currentChar = messageArray(i)\n            val nextChar = messageArray(i+1)\n\
    \            val currentCharIndex = vowels.indexOf(currentChar)\n            val\
    \ nextCharIndex = vowels.indexOf(nextChar)\n            if(currentCharIndex !=\
    \ -1 && nextCharIndex != -1){\n                val currentCharVowel = vowels(currentCharIndex)\n\
    \                val nextCharVowel = vowels(nextCharIndex)\n                val\
    \ currentCharIndex = vowels.indexOf(currentCharVowel)\n                val nextCharIndex\
    \ = vowels.indexOf(nextCharVowel)\n                if(currentCharIndex != -1 &&\
    \ nextCharIndex != -1){\n                    val currentCharVowel = vowels(currentCharIndex)\n\
    \                    val nextCharVowel = vowels(nextCharIndex)\n             \
    \       val currentCharIndex = vowels.indexOf(currentCharVowel)\n            \
    \        val nextCharIndex = vowels.indexOf(nextCharVowel)\n                 \
    \   if(currentCharIndex != -1 && nextCharIndex != -1){\n                     \
    \   val currentCharVowel = vowels(currentCharIndex)\n                        val\
    \ nextCharVowel = vowels(nextCharIndex)\n                        val currentCharIndex\
    \ = vowels.indexOf(currentCharVowel)\n                        val nextCharIndex\
    \ = vowels.indexOf(nextCharVowel)\n                        if(currentCharIndex\
    \ != -1 && nextCharIndex != -1){\n                            val currentCharVowel\
    \ = vowels(currentCharIndex)\n                            val nextCharVowel =\
    \ vowels(nextCharIndex)\n                            val currentCharIndex = vowels.indexOf(currentCharVowel)\n\
    \                            val nextCharIndex = vowels.indexOf(nextCharVowel)\n\
    \                            if(currentCharIndex != -1 && nextCharIndex != -1){\n\
    \                                val currentCharVowel = vowels(currentCharIndex)\n\
    \                                val nextCharVowel = vowels(nextCharIndex)\n \
    \                               val currentCharIndex = vowels.indexOf(currentCharVowel)\n\
    \                                val nextCharIndex = vowels.indexOf(nextCharVowel)\n\
    \                                if(currentCharIndex != -1 && nextCharIndex !=\
    \ -1){\n                                    val currentCharVowel = vowels(currentCharIndex)\n\
    \                                    val nextCharVowel = vowels(nextCharIndex)\n\
    \                                    val currentCharIndex = vowels.indexOf(currentCharVowel)\n\
    \                                    val nextCharIndex = vowel", "        val\
    \ vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\")\n  \
    \      val result = new StringBuilder\n        for (i <- 0 until messageArray.length)\
    \ {\n            val currentChar = messageArray(i)\n            val nextChar =\
    \ messageArray(i + 1)\n            if (vowels.contains(currentChar) && vowels.contains(nextChar))\
    \ {\n                val index = vowels.indexOf(currentChar)\n               \
    \ val nextIndex = vowels.indexOf(nextChar)\n                val nextChar2 = vowels(nextIndex\
    \ + 1)\n                val currentChar2 = vowels(index + 1)\n               \
    \ val nextChar3 = vowels(index + 2)\n                val currentChar3 = vowels(index\
    \ + 3)\n                val nextChar4 = vowels(index + 4)\n                val\
    \ currentChar4 = vowels(index + 5)\n                val nextChar5 = vowels(index\
    \ + 6)\n                val currentChar5 = vowels(index + 7)\n               \
    \ val nextChar6 = vowels(index + 8)\n                val currentChar6 = vowels(index\
    \ + 9)\n                val nextChar7 = vowels(index + 10)\n                val\
    \ currentChar7 = vowels(index + 11)\n                val nextChar8 = vowels(index\
    \ + 12)\n                val currentChar8 = vowels(index + 13)\n             \
    \   val nextChar9 = vowels(index + 14)\n                val currentChar9 = vowels(index\
    \ + 15)\n                val nextChar10 = vowels(index + 16)\n               \
    \ val currentChar10 = vowels(index + 17)\n                val nextChar11 = vowels(index\
    \ + 18)\n                val currentChar11 = vowels(index + 19)\n            \
    \    val nextChar12 = vowels(index + 20)\n                val currentChar12 =\
    \ vowels(index + 21)\n                val nextChar13 = vowels(index + 22)\n  \
    \              val currentChar13 = vowels(index + 23)\n                val nextChar14\
    \ = vowels(index + 24)\n                val currentChar14 = vowels(index + 25)\n\
    \                val nextChar15 = vowels(index + 26)\n                val currentChar15\
    \ = vowels(index + 27)\n                val nextChar16 = vowels(index + 28)\n\
    \                val currentChar16 = vowels(index + 29)\n                val nextChar17\
    \ = vowels(index + 30)\n                val currentChar17 = vowels(index + 31)\n\
    \                val nextChar18 = vowels(index + 32)\n                val currentChar18\
    \ = vowels(index + 33)\n                val nextChar19 = vowels(index + 34)\n\
    \                val currentChar19 = vowels(index + 35)\n                val nextChar20\
    \ = vowels(index + 36)\n                val currentChar20 = vowels(index + 37)\n\
    \                val nextChar21 = vowels(index + 38)\n                ", "   \
    \     val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\"\")\n        val encodedMessage = messageList.foldLeft(\"\"\
    ){ (result, currentChar) =>\n            val index = alphabet.indexOf(currentChar)\n\
    \            if (index != -1) {\n                val nextIndex = index + 2\n \
    \               if (nextIndex < alphabet.length) {\n                    val nextChar\
    \ = alphabet(nextIndex)\n                    result + vowels(index) + nextChar\n\
    \                } else {\n                    result + vowels(index)\n      \
    \          }\n            } else {\n                result + currentChar\n   \
    \         }\n        }\n        encodedMessage", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageArray = message.split(\"\")\n        val newMessage = messageArray.map(letter\
    \ => \n            vowels.indexOf(letter) match {\n                case -1 =>\
    \ letter\n                case 0 => letter\n                case 1 => vowels(letter\
    \ - 2)\n            }\n        ).mkString(\"\")\n        val newMessageArray =\
    \ newMessage.split(\"\")\n        val newMessageArrayLength = newMessageArray.length\n\
    \        val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength + 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength + 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength + 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength + 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength + 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength + 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength + 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength + 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength + 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength + 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength + 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength + 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength + 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength + 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength + 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength + 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength + 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArray", "        var result = \"\"\n        var vowels\
    \ = \"aeiouAEIOU\"\n        var vowelsCount = new mutable.HashMap[String, Int]()\n\
    \        var vowelsCount2 = new mutable.HashMap[String, Int]()\n        var vowelsCount3\
    \ = new mutable.HashMap[String, Int]()\n        var vowelsCount4 = new mutable.HashMap[String,\
    \ Int]()\n        var vowelsCount5 = new mutable.HashMap[String, Int]()\n    \
    \    var vowelsCount6 = new mutable.HashMap[String, Int]()\n        var vowelsCount7\
    \ = new mutable.HashMap[String, Int]()\n        var vowelsCount8 = new mutable.HashMap[String,\
    \ Int]()\n        var vowelsCount9 = new mutable.HashMap[String, Int]()\n    \
    \    var vowelsCount10 = new mutable.HashMap[String, Int]()\n        var vowelsCount11\
    \ = new mutable.HashMap[String, Int]()\n        var vowelsCount12 = new mutable.HashMap[String,\
    \ Int]()\n        var vowelsCount13 = new mutable.HashMap[String, Int]()\n   \
    \     var vowelsCount14 = new mutable.HashMap[String, Int]()\n        var vowelsCount15\
    \ = new mutable.HashMap[String, Int]()\n        var vowelsCount16 = new mutable.HashMap[String,\
    \ Int]()\n        var vowelsCount17 = new mutable.HashMap[String, Int]()\n   \
    \     var vowelsCount18 = new mutable.HashMap[String, Int]()\n        var vowelsCount19\
    \ = new mutable.HashMap[String, Int]()\n        var vowelsCount20 = new mutable.HashMap[String,\
    \ Int]()\n        var vowelsCount21 = new mutable.HashMap[String, Int]()\n   \
    \     var vowelsCount22 = new mutable.HashMap[String, Int]()\n        var vowelsCount23\
    \ = new mutable.HashMap[String, Int]()\n        var vowelsCount24 = new mutable.HashMap[String,\
    \ Int]()\n        var vowelsCount25 = new mutable.HashMap[String, Int]()\n   \
    \     var vowelsCount26 = new mutable.HashMap[String, Int]()\n        var vowelsCount27\
    \ = new mutable.HashMap[String, Int]()\n        var vowelsCount28 = new mutable.HashMap[String,\
    \ Int]()\n        var vowelsCount29 = new mutable.HashMap[String, Int]()\n   \
    \     var vowelsCount30 = new mutable.HashMap[String, Int]()\n        var vowelsCount31\
    \ = new mutable.HashMap[String, Int]()\n        var vowelsCount32 = new mutable.HashMap[String,\
    \ Int]()\n        var vowelsCount33 = new mutable.HashMap[String, Int]()\n   \
    \     var vowel", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('e','i','o','u')\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => \n            letter\
    \ match {\n                case 'a' => alphabet(0)\n                case 'b' =>\
    \ alphabet(1)\n                case 'c' => alphabet(2)\n                case 'd'\
    \ => alphabet(3)\n                case 'e' => alphabet(4)\n                case\
    \ 'f' => alphabet(5)\n                case 'g' => alphabet(6)\n              \
    \  case 'h' => alphabet(7)\n                case 'i' => alphabet(8)\n        \
    \        case 'j' => alphabet(9)\n                case 'k' => alphabet(10)\n \
    \               case 'l' => alphabet(11)\n                case 'm' => alphabet(12)\n\
    \                case 'n' => alphabet(13)\n                case 'o' => alphabet(14)\n\
    \                case 'p' => alphabet(15)\n                case 'q' => alphabet(16)\n\
    \                case 'r' => alphabet(17)\n                case 's' => alphabet(18)\n\
    \                case 't' => alphabet(19)\n                case 'u' => alphabet(20)\n\
    \                case 'v' => alphabet(21)\n                case 'w' => alphabet(22)\n\
    \                case 'x' => alphabet(23)\n                case 'y' => alphabet(24)\n\
    \                case 'z' => alphabet(25)\n                case letter => letter\n\
    \            }\n        )\n        val newMessage = messageArray.map(letter =>\
    \ \n            letter match {\n                case 'a' => alphabet(0)\n    \
    \            case 'b' => alphabet(1)\n                case 'c' => alphabet(2)\n\
    \                case 'd' => alphabet(3)\n                case 'e' => alphabet(4)\n\
    \                case 'f' => alphabet(5)\n                case 'g' => alphabet(6)\n\
    \                case 'h' => alphabet(7)\n                case 'i' => alphabet(8)\n\
    \                case 'j' => alphabet(9)\n                case 'k' => alphabet(10)\n\
    \                case 'l' => alphabet(11)\n                case 'm' => alphabet(12)\n\
    \                case 'n' => alphabet(13)\n                case 'o' => alphabet(14)\n\
    \                case 'p' => alphabet(15)\n                case 'q' => alphabet(16)\n\
    \                case 'r' => alphabet(17)\n                case 's' => alphabet(18)\n\
    \                case 't' => alphabet(19)\n                case 'u' => alphabet(20)\n\
    \                case 'v' => alphabet(21)\n                case 'w' => alphabet(22)\n\
    \                case 'x' => alphabet(23)\n                case 'y' => alphabet(24)\n\
    \                case 'z' => alphabet(25)\n                case letter => letter\n\
    \            }\n        ).mkString(\"\")\n        val newMessageArray2 = newMessageArray.map(letter\
    \ => \n            letter match {\n                case 'a", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\")\n        val\
    \ newMessageArray = messageArray.map(letter => {\n            val index = vowels.indexOf(letter)\n\
    \            if (index != -1) {\n                val vowelIndex = index + 1\n\
    \                if (vowelIndex < vowels.length)\n                    vowels(vowelIndex)\n\
    \                else\n                    letter\n            } else\n      \
    \          letter\n        })\n        val newMessage = String.join(\"\", newMessageArray)\n\
    \        newMessage", "        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => \n            vowels.indexOf(letter) match {\n                case -1 =>\
    \ letter\n                case i => vowels(i + 2)\n            }\n        )\n\
    \        val newMessage = messageArray.join(\"\")\n        newMessageArray.join(\"\
    \")", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val vowelsMap = Map(vowels\
    \ -> vowels.size)\n        val vowelsMap2 = Map(vowels.tail ->vowels.size)\n \
    \       val vowelsMap3 = Map(vowels.tail ->vowels.tail.size)\n        val vowelsMap4\
    \ = Map(vowels.tail ->vowels.tail.tail.size)\n        val vowelsMap5 = Map(vowels.tail\
    \ ->vowels.tail.tail.tail.size)\n        val vowelsMap6 = Map(vowels.tail ->vowels.tail.tail.tail.tail.size)\n\
    \        val vowelsMap7 = Map(vowels.tail ->vowels.tail.tail.tail.tail.tail.size)\n\
    \        val vowelsMap8 = Map(vowels.tail ->vowels.tail.tail.tail.tail.tail.tail.size)\n\
    \        val vowelsMap9 = Map(vowels.tail ->vowels.tail.tail.tail.tail.tail.tail.tail.size)\n\
    \        val vowelsMap10 = Map(vowels.tail ->vowels.tail.tail.tail.tail.tail.tail.tail.tail.size)\n\
    \        val vowelsMap11 = Map(vowels.tail ->vowels.tail.tail.tail.tail.tail.tail.tail.tail.tail.size)\n\
    \        val vowelsMap12 = Map(vowels.tail ->vowels.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size)\n\
    \        val vowelsMap13 = Map(vowels.tail ->vowels.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size)\n\
    \        val vowelsMap14 = Map(vowels.tail ->vowels.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size)\n\
    \        val vowelsMap15 = Map(vowels.tail ->vowels.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size)\n\
    \        val vowelsMap16 = Map(vowels.tail ->vowels.tail.tail", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\n   \
    \     val newMessage = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.indexOf(letter))\
    \ + 1)\n        newMessage.toList"]
stop_tokens:
- "\n    }\n"
