name: HumanEval_74_total_match
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that accepts two lists of strings and returns the list\
  \ that has \n    // total number of chars in the all strings of the list less than\
  \ the other list.\n    // if the two lists have the same number of chars, return\
  \ the first list.\n    // Examples\n    // total_match([], []) \u279E []\n    //\
  \ total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    // total_match(['hi',\
  \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    // total_match(['hi',\
  \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'],\
  \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    def totalMatch(lst1 : List[String],\
  \ lst2 : List[String]) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
  \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
  hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\",\
  \ \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
  hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"))));\n\
  \    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\"\
  , \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
  hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\",\
  \ \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
  hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
  hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hii\"))).equals((List[String](\"\
  hi\", \"admin\"))));\n    assert(totalMatch((List[String]()), (List[String](\"this\"\
  ))).equals((List[String]())));\n    assert(totalMatch((List[String](\"this\")),\
  \ (List[String]())).equals((List[String]())));\n    }\n\n}\n"
completions: ["        lst1 match {\n            case Nil => lst2\n            case\
    \ _ => lst1 ++ lst2.filter(x => lst1.count(_ < x) == lst2.count(_ < x))\n    \
    \    }", "        val lst3 = lst1 ++ lst2\n        val lst4 = lst3.groupBy(x =>\
    \ x).mapValues(_.size)\n        val lst5 = lst4.filter(_._2 < lst3.size)\n   \
    \     lst5.map(_._1)", "        val lst3 = lst1.filterNot(lst2.contains)\n   \
    \     if(lst3.isEmpty) lst1\n        else lst3", "        val lst3 = lst1 ++ lst2\n\
    \        val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)", "       \
    \ val lst3 = lst1.filter(_ < lst2)\n        val lst4 = lst2.filter(_ < lst1)\n\
    \        if(lst3.size == lst4.size) lst3\n        else lst4", "        val lst3\
    \ = lst1 ++ lst2\n        val lst4 = lst3.distinct\n        val lst5 = lst4.filter(_\
    \ < lst3.last)\n        lst5.take(lst3.size)", '        lst1.zip(lst2).filter(_._1.length
    < _._2.length).map(_._1)', "        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if(lst3.isEmpty) lst3\n        else lst3.head :: totalMatch(lst3.tail,\
    \ lst2)", '        lst1.zip(lst2).filter(_._1 < _._2).map(_._1).distinct', " \
    \       lst1 match {\n            case Nil => lst2\n            case _ => lst1\
    \ ++ lst2.filter(x => lst1.count(_ < x) < lst2.count(_ < x))\n        }", "  \
    \      val lst3 = lst1.filterNot(lst2.contains)\n        val lst4 = lst2.filterNot(lst1.contains)\n\
    \        if(lst3.size == lst4.size) lst3\n        else lst4", "        lst1.foldLeft(lst2)((lst1,\
    \ lst2) => {\n            lst1.zip(lst2).filter(_._1 < _._2).map(_._1).distinct\n\
    \        })", "        val lst3 = lst1 ++ lst2\n        val lst4 = lst3.toSet\n\
    \        lst4.filter(_ < lst3.size)", "        val lst3 = lst1.filter(_ < lst2)\n\
    \        val lst4 = lst2.filter(_ < lst1)\n        if (lst3.size == lst4.size)\
    \ lst3\n        else lst4", "        lst1 match {\n            case Nil => lst2\n\
    \            case _ => lst1 ++ lst2.filterNot(lst1.contains)\n        }", "  \
    \      val lst3 = lst1.filterNot(lst2.contains)\n        if(lst3.isEmpty) lst1\n\
    \        else lst3", "        val lst3 = lst1.filterNot(lst2.contains)\n     \
    \   val lst4 = lst2.filterNot(lst1.contains)\n        lst3.length <= lst4.length\
    \ ? lst3 : lst4", "        val lst3 = lst1.filterNot(lst2.contains)\n        val\
    \ lst4 = lst2.filterNot(lst1.contains)\n        if(lst3.size == lst4.size) lst3\n\
    \        else lst4", "        val lst3 = lst1.filterNot(lst2.contains)\n     \
    \   if(lst3.length == lst2.length) lst3\n        else lst1", "        val lst3\
    \ = lst1.filterNot(lst2.contains)\n        if(lst3.length == lst2.length){\n \
    \           return lst3\n        }\n        val lst4 = lst2.filterNot(lst1.contains)\n\
    \        if(lst4.length == lst1.length){\n            return lst4\n        }\n\
    \        val lst5 = lst1.filterNot(lst2.contains)\n        val lst6 = lst2.filterNot(lst1.contains)\n\
    \        if(lst5.length == lst1.length && lst6.length == lst2.length){\n     \
    \       return lst5\n        }\n        lst1", "        lst1 match {\n       \
    \     case Nil => lst2\n            case x :: xs => lst2 match {\n           \
    \     case Nil => lst1\n                case y :: ys => if (x == y) x :: totalMatch(xs,\
    \ ys) else totalMatch(xs, lst2)\n            }\n        }", "        lst1 match\
    \ {\n            case Nil => lst2\n            case _ => lst1 ++ lst2.filter(x\
    \ => lst1.count(_ < x) == lst2.count(_ < x))\n        }", "        val lst3 =\
    \ lst1 ++ lst2\n        val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)",
  '        lst1.zip(lst2).map { case (x, y) => if (x.length > y.length) x else y }',
  "        val lst3 = lst1.filter(x => lst2.contains(x))\n        if (lst3.size ==\
    \ lst2.size) {\n            lst3\n        } else {\n            lst1\n       \
    \ }", "        val lst3 = lst1 ++ lst2\n        val lst4 = lst3.toSet\n      \
    \  lst4.filter(_ < lst3.size)", "        val lst3 = lst1.toSet ++ lst2.toSet\n\
    \        lst3.toList.sortWith( (a,b) => a.length < b.length )", "        val lst3\
    \ = lst1.filterNot(lst2.contains)\n        if(lst3.size == lst2.size) {\n    \
    \        lst3\n        } else {\n            lst3\n        }", "        val lst3\
    \ = lst1 ++ lst2\n        val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)",
  "        val lst3 = lst1.filterNot(lst2.contains)\n        if (lst3.size == lst2.size)\
    \ {\n            lst3\n        } else {\n            lst1\n        }", "     \
    \   val lst3 = lst1 ++ lst2\n        val lst4 = lst3.toSet\n        lst4.filter(_\
    \ < lst3.size)", "        val lst3 = lst1.filterNot(lst2.contains)\n        val\
    \ lst4 = lst2.filterNot(lst1.contains)\n        lst3.length <= lst4.length ? lst3\
    \ : lst4", "        val lst3 = lst1.filterNot(lst2.contains)\n        if(lst3.size\
    \ == lst1.size){\n            lst3\n        }else{\n            lst1\n       \
    \ }", "        val lst3 = lst1.filter(_ < lst2)\n        val lst4 = lst2.filter(_\
    \ < lst1)\n        lst3.length match {\n            case 0 => lst4\n         \
    \   case _ => lst3\n        }", "        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if(lst3.isEmpty) lst3\n        else lst3.head :: totalMatch(lst3.tail,\
    \ lst2)", "        val lst3 = lst1.filterNot(lst2.contains)\n        if(lst3.isEmpty)\
    \ lst1\n        else lst3", "        val lst3 = lst1.filter(x => lst2.contains(x))\n\
    \        val lst4 = lst2.filter(x => lst1.contains(x))\n        if(lst3.length\
    \ == lst4.length) lst3\n        else lst4", "        val lst3 = lst1 ++ lst2\n\
    \        val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)", "       \
    \ val lst3 = lst1.filterNot(lst2.contains)\n        val lst4 = lst2.filterNot(lst1.contains)\n\
    \        if(lst3.size == lst4.size) lst3\n        else lst4", "        val lst3\
    \ = lst1.filter(x => lst2.contains(x))\n        if (lst3.size == lst2.size) {\n\
    \            lst3\n        } else {\n            lst1\n        }", "        val\
    \ lst3 = lst1 ++ lst2\n        val lst4 = lst3.toSet\n        lst4.filter(_ <\
    \ lst3.size)", "        val lst3 = lst1.toSet\n        val lst4 = lst2.toSet\n\
    \        val lst5 = lst3.diff(lst4)\n        lst5.toList", "        val lst3 =\
    \ lst1.filterNot(lst2.contains)\n        val lst4 = lst2.filterNot(lst1.contains)\n\
    \        if(lst3.length == lst4.length) lst3\n        else lst4", "        lst1\
    \ match {\n            case Nil => lst2\n            case _ => lst1 diff lst2\n\
    \        }", "        val lst3 = lst1.filterNot(lst2.contains)\n        val lst4\
    \ = lst2.filterNot(lst1.contains)\n        lst3.length match {\n            case\
    \ 0 => lst4\n            case _ => lst3.zip(lst4).filter(_._1 < _._1).map(_._2)\n\
    \        }", '        lst1.zip(lst2).filter(_._1 < _._2).map(_._1).distinct',
  "        val lst3 = lst1 ++ lst2\n        val lst4 = lst3.toSet\n        lst4.filter(_\
    \ < lst3.length).map(_ + lst3.length)", "        val lst3 = lst1.filter(x => lst2.contains(x))\n\
    \        if(lst3.size == lst2.size) {\n            lst3\n        } else {\n  \
    \          lst1\n        }", "        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        val lst4 = lst2.filterNot(lst1.contains)\n        if(lst3.size == lst4.size)\
    \ lst3\n        else lst4", "        val lst3 = lst1.filter(_ < lst2).map(_ =>\
    \ lst2.indexOf(_))\n        val lst4 = lst2.filter(_ < lst1).map(_ => lst1.indexOf(_))\n\
    \        lst3.filter(_ != -1).filter(_ != lst4.indexOf(_)).filter(_ != -1).filter(_\
    \ != lst3.indexOf(_))", '        lst1.zip(lst2).filter{ case (a: String, b: String)
    => a.length < b.length }.map{ case (a: String, b: String) => a }', "        val\
    \ lst3 = lst1.filterNot(lst2.contains)\n        if(lst3.length == lst1.length){\n\
    \            lst3\n        }\n        else{\n            lst1\n        }", " \
    \       val lst3 = lst1.filterNot(lst2.contains)\n        if(lst3.size == lst1.size)\
    \ lst3\n        else lst1.filterNot(lst2.contains)", "        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if(lst3.isEmpty) lst3\n        else lst3.head :: totalMatch(lst3.tail,\
    \ lst2)", "        val lst3 = lst1.filterNot(lst2.contains)\n        if(lst3.size\
    \ == lst1.size) lst3\n        else lst1.filterNot(lst3.contains)", "        lst1\
    \ match {\n            case Nil => lst2\n            case _ => lst1 ++ lst2.filter(x\
    \ => !lst1.contains(x))\n        }", "        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        val lst4 = lst2.filterNot(lst1.contains)\n        if(lst3.size == lst4.size)\
    \ lst3\n        else lst4", '        lst1.zip(lst2).filter(_._1 < _._2).map(_._1).distinct',
  "        val lst3 = lst1 ++ lst2\n        val lst4 = lst3.groupBy(x => x).mapValues(_.size)\n\
    \        val lst5 = lst4.maxBy(_._2)\n        lst5(lst4.keys.toList)", "     \
    \   val lst3 = lst1 ++ lst2\n        val lst4 = lst3.toSet\n        lst4.filter(_\
    \ < lst3.size)", "        val lst3 = lst1 ++ lst2\n        val lst4 = lst3.toSet\n\
    \        lst4.toList.sortWith(_ < _)", "        lst1 match {\n            case\
    \ Nil => lst2\n            case _ => lst1 ++ lst2.filter(x => lst1.count(_ < x)\
    \ < lst2.count(_ < x))\n        }", "        val lst3 = lst1.filter(_ < lst2)\n\
    \        val lst4 = lst2.filter(_ < lst1)\n        lst3.length match {\n     \
    \       case 0 => lst4\n            case _ => lst3\n        }", "        val map1\
    \ = lst1.map(x => (x, 1)).toMap\n        val map2 = lst2.map(x => (x, 1)).toMap\n\
    \        val map3 = map1.filter(_._2 > map2.getOrElse(x, 0))\n        map3.map(_._1).distinct",
  "        lst1 match {\n            case Nil => lst2\n            case _ => lst2\
    \ match {\n                case Nil => lst1\n                case _ => lst1 match\
    \ {\n                    case Nil => lst2\n                    case _ => lst1\
    \ match {\n                        case Nil => lst2\n                        case\
    \ _ => lst1 match {\n                            case Nil => lst2\n          \
    \                  case _ => lst1 match {\n                                case\
    \ Nil => lst2\n                                case _ => lst1 match {\n      \
    \                              case Nil => lst2\n                            \
    \        case _ => lst1 match {\n                                        case\
    \ Nil => lst2\n                                        case _ => lst1 match {\n\
    \                                            case Nil => lst2\n              \
    \                              case _ => lst1 match {\n                      \
    \                          case Nil => lst2\n                                \
    \                case _ => lst1 match {\n                                    \
    \                case Nil => lst2\n                                          \
    \          case _ => lst1 match {\n                                          \
    \              case Nil => lst2\n                                            \
    \            case _ => lst1 match {\n                                        \
    \                    case Nil => lst2\n                                      \
    \                      case _ => lst1 match {\n                              \
    \                                  case Nil => lst2\n                        \
    \                                        case _ => lst1 match {\n            \
    \                                                        case Nil => lst2\n  \
    \                                                                  case _ => lst1\
    \ match {\n                                                                  \
    \      case Nil => lst2\n                                                    \
    \                    case _ => lst1 match {\n                                \
    \                                            case Nil => lst2\n              \
    \                                                              case _ => lst1\
    \ match {\n                                                                  \
    \              case Nil => lst2\n                                            \
    \                                    case _ => lst1 match {\n                \
    \                                                                    case Nil\
    \ => lst2\n                                                                  \
    \                  case _ => lst1 match {\n                                  \
    \                                                      case Nil => lst2\n    \
    \                                                                            \
    \        case _ => lst1 match {\n                                            \
    \                                                case Nil => lst2\n          \
    \                                                                            \
    \      case _ => lst1 match {\n                                              \
    \                                                  case Nil => lst2\n        \
    \                                                                            \
    \            case _ => lst1 match {\n                                        \
    \                                                            case Nil => lst2\n\
    \                                                                            \
    \                        case _ => lst1 match {\n                            \
    \                                                                            case\
    \ Nil => lst2\n                                                              \
    \                                          case _ => lst1 match {\n          \
    \                                                                            \
    \                      case Nil => lst2\n                                    \
    \                                                                        case\
    \ _ => lst1 match {\n                                                        \
    \                                                        case Nil => lst2\n  \
    \                                                                            \
    \                                  case _ => lst1 match {\n                  \
    \                                                                            \
    \                      case Nil => lst2\n                                    \
    \                                                                            \
    \    case _ => lst1 match {\n                                                \
    \                                                                        case\
    \ Nil => lst2\n                                                              \
    \                                                          case _ => lst1 match\
    \ {\n                                                                        \
    \                                                    case Nil => lst2\n      \
    \                                                                            \
    \                                          case ", "        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        val lst4 = lst2.filterNot(lst1.contains)\n        lst3.length <= lst4.length\
    \ ? lst3 : lst4", "        val map1 = lst1.map(x => (x, 1)).toMap\n        val\
    \ map2 = lst2.map(x => (x, 1)).toMap\n        val map3 = map1.filter(_._2 > map2.get(_._1)).map(_._1)\n\
    \        map3.toList", "        val lst3 = lst1.filterNot(lst2.contains)\n   \
    \     if(lst3.size == lst2.size) {\n            lst3\n        } else {\n     \
    \       lst1\n        }", "        lst1 match {\n            case Nil => lst2\n\
    \            case _ => {\n                val lst3 = lst1.toSet\n            \
    \    val lst4 = lst2.toSet\n                lst3.diff(lst4) match {\n        \
    \            case Nil => lst1\n                    case _ => lst1.diff(lst4)\n\
    \                }\n            }\n        }", "        val lst3 = lst1.toSet\
    \ ++ lst2.toSet\n        lst3.toList", "        val lst3 = lst1 ++ lst2\n    \
    \    val lst4 = lst3.toSet\n        lst4.toList.sortWith( (a,b) => a.length <=>\
    \ b.length )", "        val lst3 = lst1.filterNot(lst2.contains)\n        if(lst3.size\
    \ == lst1.size) lst3\n        else lst1.filterNot(lst2.contains)", "        val\
    \ lst3 = lst1.filterNot(lst2.contains)\n        val lst4 = lst2.filterNot(lst1.contains)\n\
    \        if(lst3.size == lst4.size) lst3\n        else lst4", "        val lst3\
    \ = lst1.filterNot(lst2.contains)\n        if (lst3.size == lst1.size) {\n   \
    \         lst3\n        } else {\n            lst1\n        }", "        val map1\
    \ = lst1.map(x => (x, 1)).toMap\n        val map2 = lst2.map(x => (x, 1)).toMap\n\
    \        val map3 = map1.filter(_._2 > map2.get(_._1)).map(_._1)\n        map3.toList",
  '        lst1.zip(lst2).filter(_._1 < _._2).map(_._1).distinct', "        val lst3\
    \ = lst1.filter(_ < lst2)\n        val lst4 = lst2.filter(_ < lst1)\n        lst3.filter(_\
    \ == lst4.sum)", "        lst1 match {\n            case Nil => lst2\n       \
    \     case _ => lst1 ++ lst2.filter(x => !lst1.contains(x))\n        }", "   \
    \     lst1 match {\n            case Nil => lst2\n            case _ => lst1 ++\
    \ lst2.filter(x => !lst1.contains(x))\n        }", "        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if(lst3.length == lst2.length) lst3\n        else lst1.filterNot(lst3.contains)",
  "        val lst3 = lst1.filter(_ < lst2)\n        val lst4 = lst2.filter(_ < lst1)\n\
    \        if (lst3.size == lst4.size) {\n            lst3\n        } else {\n \
    \           lst4\n        }", "        lst1 match {\n            case Nil => lst2\n\
    \            case _ => {\n                val lst3 = lst2.filterNot(lst1.contains)\n\
    \                if (lst3.size == lst2.size) {\n                    lst1\n   \
    \             } else {\n                    lst3\n                }\n        \
    \    }\n        }", "        lst1 match {\n            case Nil => lst2\n    \
    \        case x :: xs => lst2 match {\n                case Nil => lst1\n    \
    \            case y :: ys => if (x.length == y.length) x :: totalMatch(xs, ys)\n\
    \                    else totalMatch(xs, lst2)\n            }\n        }", " \
    \       val lst3 = lst1 ++ lst2\n        val lst4 = lst3.toSet\n        lst4.filter(_\
    \ < lst3.size)", "        val lst3 = lst1.filterNot(lst2.contains)\n        if(lst3.size\
    \ == lst2.size) {\n            lst3\n        } else {\n            lst1\n    \
    \    }", "        lst1 match {\n            case Nil => lst2\n            case\
    \ _ => lst1 ++ lst2.filter(x => lst1.count(_ < x) < lst2.count(_ < x))\n     \
    \   }", '        lst1.zip(lst2).map { case (l, r) => if (l.length < r.length)
    l else r }', "        val lst3 = lst1 ++ lst2\n        val lst4 = lst3.toSet\n\
    \        lst4.filter(_ < lst3.size)", "        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if(lst3.size == lst2.size) {\n            lst3\n        } else {\n  \
    \          lst1\n        }", '        lst1.zip(lst2).filter(_._1 < _._2).map(_._1).distinct',
  "        val lst3 = lst1.filterNot(lst2.contains)\n        if(lst3.isEmpty) lst3\n\
    \        else lst3.head", "        lst1 match {\n            case Nil => lst2\n\
    \            case _ => {\n                val map1 = lst1.map(x => (x, 1)).toMap\n\
    \                val map2 = lst2.map(x => (x, 1)).toMap\n                val keys\
    \ = map1.keySet.intersect(map2.keySet)\n                val result = keys.map(x\
    \ => x -> map1(x) + map2(x)).toList\n                result.sortBy(x => x._2).reverse.head._1\n\
    \            }\n        }", "        val lst3 = lst1 ++ lst2\n        val lst4\
    \ = lst3.toSet\n        lst4.toList.sortWith(_ < _)", "        val lst3 = lst1\
    \ ++ lst2\n        val lst4 = lst3.toSet\n        val lst5 = lst4.filter(_ < lst3.size)\n\
    \        lst5.toList", "        val lst3 = lst1.toList ++ lst2.toList\n      \
    \  val lst4 = lst3.toSet\n        lst3.filter(_ < lst4.max)", "        val lst3\
    \ = lst1.filterNot(lst2.contains)\n        if(lst3.size == lst2.size) {\n    \
    \        lst3\n        } else {\n            lst1\n        }", "        val lst3\
    \ = lst1.filter(_ < lst2)\n        val lst4 = lst2.filter(_ < lst1)\n        lst3.length\
    \ match {\n            case 0 => lst4\n            case _ => lst3.map(x => lst4.filter(y\
    \ => x == y))\n        }", "        val lst3 = lst1.filter(_ < lst2)\n       \
    \ if (lst3.size == lst1.size) {\n            lst3\n        } else {\n        \
    \    lst1.filter(_ < lst2)\n        }", '        lst1.zip(lst2).map { case (x,
    y) => if (x.length > y.length) x else y }', "        val lst3 = lst1.filter(x\
    \ => lst2.contains(x))\n        val lst4 = lst2.filter(x => lst1.contains(x))\n\
    \        if(lst3.size == lst4.size) lst3 else lst4", "        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if(lst3.length == lst2.length) lst3\n        else lst1", "        val\
    \ lst3 = lst1 ++ lst2\n        val lst4 = lst3.toSet\n        lst4.filter(_ <\
    \ lst3.size)", "        val lst3 = lst1.filter(_ < lst2).map(_ + lst2.indexOf(_))\n\
    \        if (lst3.size == lst1.size) {\n            lst3\n        } else {\n \
    \           lst3\n        }", "        val l1 = lst1.toSet\n        val l2 = lst2.toSet\n\
    \        if(l1.size == l2.size) {\n            l1.toList\n        } else {\n \
    \           l2.toList\n        }", "        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if (lst3.size == lst1.size) {\n            lst3\n        } else {\n \
    \           lst1\n        }", "        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if(lst3.length == lst2.length) lst3\n        else lst1.filterNot(lst3.contains)",
  "        val lst3 = lst1.filter(x => lst2.contains(x))\n        if(lst3.size ==\
    \ lst2.size) {\n            lst3\n        } else {\n            lst1.filter(x\
    \ => lst2.contains(x))\n        }", "        val lst3 = lst1.toSet ++ lst2.toSet\n\
    \        lst3.toList.sortWith(_ < _)", "        val map1 = lst1.map(x => (x, 1)).toMap\n\
    \        val map2 = lst2.map(x => (x, 1)).toMap\n        val map3 = map1.filter(_._2\
    \ < map2.getOrElse(x, 0))\n        map3.map(_._1).distinct", "        val lst3\
    \ = lst1 ++ lst2\n        val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)",
  "        lst1 match {\n            case Nil => lst2\n            case _ => lst1\
    \ ++ lst2.filter(x => !lst1.contains(x))\n        }", "        val lst3 = lst1.filter(x\
    \ => lst2.contains(x))\n        if (lst3.size == lst2.size) {\n            lst3\n\
    \        } else {\n            lst1.filter(x => lst2.contains(x))\n        }",
  '        lst1.zip(lst2).filter(_._1 < _._2).map(_._1).distinct', "        val lst3\
    \ = lst1.filterNot(lst2.contains)\n        if(lst3.length == lst2.length) lst3\n\
    \        else lst1", "        lst1 match {\n            case Nil => lst2\n   \
    \         case _ => {\n                val map1 = lst1.map(x => (x, 1)).toMap\n\
    \                val map2 = lst2.map(x => (x, 1)).toMap\n                val keys\
    \ = map1.keySet.intersect(map2.keySet)\n                val result = keys.map(x\
    \ => (x, map1(x) + map2(x)))\n                result.sortBy(_._2).reverse.map(x\
    \ => x._1).reverse\n            }\n        }", "        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if(lst3.size == lst1.size) lst3\n        else lst1", "        lst1 match\
    \ {\n            case Nil => lst2\n            case _ => lst1 ++ lst2.filterNot(lst1.contains)\n\
    \        }", "        val lst3 = lst1.filter(x => lst2.contains(x))\n        val\
    \ lst4 = lst2.filter(x => lst1.contains(x))\n        if(lst3.size == lst4.size)\
    \ lst3 else lst4", "        val lst3 = lst1.filterNot(lst2.contains)\n       \
    \ val lst4 = lst2.filterNot(lst1.contains)\n        if(lst3.length == lst4.length)\
    \ lst3\n        else lst4", "        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        val lst4 = lst2.filterNot(lst1.contains)\n        lst3.length <= lst4.length\
    \ ? lst3 : lst4", "        val lst3 = lst1.filterNot(lst2.contains)\n        if(lst3.size\
    \ == lst1.size) {\n            lst3\n        } else {\n            lst1\n    \
    \    }", "        val lst3 = lst1.filterNot(lst2.contains)\n        if(lst3.size\
    \ == lst2.size) {\n            lst3\n        } else {\n            lst1\n    \
    \    }", "        val lst3 = lst1.filterNot(lst2.contains)\n        val lst4 =\
    \ lst2.filterNot(lst1.contains)\n        if(lst3.size == lst4.size) lst3\n   \
    \     else lst4", "        lst1 match {\n            case Nil => lst2\n      \
    \      case _ => lst1 ++ lst2.filter(x => lst1.count(_ < x) < lst2.count(_ < x))\n\
    \        }", "        val lst3 = lst1.filter(_ < lst2)\n        if (lst3.size\
    \ == lst1.size) lst3\n        else lst3.reverse.filter(_ < lst2).reverse", " \
    \       val lst3 = lst1 ++ lst2\n        val lst4 = lst3.toSet\n        lst4.filter(_\
    \ < lst3.size)", "        val lst3 = lst1.filterNot(lst2.contains)\n        val\
    \ lst4 = lst2.filterNot(lst1.contains)\n        if(lst3.length == lst4.length)\
    \ lst3\n        else lst4", "        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if(lst3.size == lst1.size) lst3\n        else lst1", '        lst1.zip(lst2).filter(_._1
    < _._2).map(_._1)', "        val lst3 = lst1.filter(_ < lst2)\n        val lst4\
    \ = lst2.filter(_ < lst1)\n        lst3.length match {\n            case 0 =>\
    \ lst4\n            case _ => lst3.take(lst4.length)\n        }", "        lst1\
    \ match {\n            case Nil => lst2\n            case _ => lst1 ++ lst2.filter(x\
    \ => lst1.count(_ < x) < lst2.count(_ < x))\n        }", "        val lst3 = lst1\
    \ ++ lst2\n        val lst4 = lst3.groupBy(x => x).mapValues(_.size)\n       \
    \ val lst5 = lst4.filter(_._2 < lst3.size)\n        lst5.map(_._1)", "       \
    \ val lst3 = lst1.filterNot(lst2.contains)\n        if(lst3.length == lst2.length)\
    \ lst3\n        else lst1.filterNot(lst3.contains)", "        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if(lst3.isEmpty) lst3\n        else lst3.take(lst3.length)", "      \
    \  lst1 match {\n            case Nil => lst2\n            case _ => lst1 ++ lst2\
    \ match {\n                case Nil => lst2\n                case _ => lst1 ++\
    \ lst2 match {\n                    case Nil => lst2\n                    case\
    \ _ => lst1 ++ lst2 match {\n                        case Nil => lst2\n      \
    \                  case _ => lst1 ++ lst2 match {\n                          \
    \  case Nil => lst2\n                            case _ => lst1 ++ lst2 match\
    \ {\n                                case Nil => lst2\n                      \
    \          case _ => lst1 ++ lst2 match {\n                                  \
    \  case Nil => lst2\n                                    case _ => lst1 ++ lst2\
    \ match {\n                                        case Nil => lst2\n        \
    \                                case _ => lst1 ++ lst2 match {\n            \
    \                                case Nil => lst2\n                          \
    \                  case _ => lst1 ++ lst2 match {\n                          \
    \                      case Nil => lst2\n                                    \
    \            case _ => lst1 ++ lst2 match {\n                                \
    \                    case Nil => lst2\n                                      \
    \              case _ => lst1 ++ lst2 match {\n                              \
    \                          case Nil => lst2\n                                \
    \                        case _ => lst1 ++ lst2 match {\n                    \
    \                                        case Nil => lst2\n                  \
    \                                          case _ => lst1 ++ lst2 match {\n  \
    \                                                              case Nil => lst2\n\
    \                                                                case _ => lst1\
    \ ++ lst2 match {\n                                                          \
    \          case Nil => lst2\n                                                \
    \                    case _ => lst1 ++ lst2 match {\n                        \
    \                                                case Nil => lst2\n          \
    \                                                              case _ => lst1\
    \ ++ lst2 match {\n                                                          \
    \                  case Nil => lst2\n                                        \
    \                                    case _ => lst1 ++ lst2 match {\n        \
    \                                                                        case\
    \ Nil => lst2\n                                                              \
    \                  case _ => lst1 ++ lst2 match {\n                          \
    \                                                          case Nil => lst2\n\
    \                                                                            \
    \        case _ => lst1 ++ lst2 match {\n                                    \
    \                                                    case Nil => lst2\n      \
    \                                                                            \
    \      case _ => lst1 ++ lst2 match {\n                                      \
    \                                                      case Nil => lst2\n    \
    \                                                                            \
    \            case _ => lst1 ++ lst2 match {\n                                \
    \                                                                case Nil => lst2\n\
    \                                                                            \
    \                    case _ => lst1 ++ lst2 match {\n                        \
    \                                                                            case\
    \ Nil => lst2\n                                                              \
    \                                      case _ => lst1 ++ lst2 match {\n      \
    \                                                                            \
    \                      case Nil => lst2\n                                    \
    \                                                                    case _ =>\
    \ lst1 ++ lst2 match {\n                                                     \
    \                                                       case Nil => lst2\n   \
    \                                                                            \
    \                             case _ => lst1 ", "        val lst3 = lst1.filter(_\
    \ < lst2)\n        val lst4 = lst2.filter(_ < lst1)\n        if (lst3.size ==\
    \ lst4.size) lst3\n        else lst4", "        lst1 match {\n            case\
    \ Nil => lst2\n            case _ => lst1 ++ lst2.filter(x => lst1.count(_ ==\
    \ x) < lst2.count(_ == x))\n        }", "        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if(lst3.isEmpty) lst3\n        else lst3", "        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if(lst3.isEmpty) lst3\n        else lst3.head :: totalMatch(lst3.tail,\
    \ lst2)", '        lst1 ++ lst2.filter(x => lst1.count(_ < x) < lst2.count(_ <
    x))', '        lst1.zip(lst2).filter(_._1 < _._2).map(_._1).distinct', "     \
    \   lst1 match {\n            case Nil => lst2\n            case _ => lst1 ++\
    \ lst2.filter(x => lst1.count(_ < x) < lst2.count(_ < x))\n        }", "     \
    \   val lst3 = lst1.filterNot(lst2.contains)\n        if(lst3.isEmpty) lst3\n\
    \        else lst3", "        lst1 match {\n            case Nil => lst2\n   \
    \         case _ => lst1 diff lst2\n        }", "        lst1 match {\n      \
    \      case Nil => lst2\n            case _ => lst1 ++ lst2.filter(x => !lst1.contains(x))\n\
    \        }", '        lst1 ++ lst2.filterNot(lst1.contains)', "        val map1\
    \ = lst1.map(x => (x, 1)).toMap\n        val map2 = lst2.map(x => (x, 1)).toMap\n\
    \        val map3 = map1.filter(_._2 > map2.get(_._1))\n        map3.map(_._1).distinct",
  "        val map1 = lst1.map(x => (x, 1)).toMap\n        val map2 = lst2.map(x =>\
    \ (x, 1)).toMap\n        val map3 = map1.filter(_._2 > map2.get(_._1))\n     \
    \   map3.map(_._1).distinct", "        val map1 = lst1.map(x => x.toInt)\n   \
    \     val map2 = lst2.map(x => x.toInt)\n        val map3 = map1.zip(map2).map(x\
    \ => (x._1, x._2)).toMap\n        val map4 = map3.filter(_._2 > 0)\n        val\
    \ map5 = map4.map(_._1)\n        val map6 = map5.toList\n        val map7 = map6.map(x\
    \ => lst1.find(y => y.toInt == x))\n        val map8 = map7.map(x => lst2.find(y\
    \ => y.toInt == x))\n        val map9 = map8.map(x => x.toInt)\n        val map10\
    \ = map9.filter(_._2 > 0)\n        val map11 = map10.map(_._1)\n        val map12\
    \ = map11.map(x => lst1.find(y => y.toInt == x))\n        val map13 = map12.map(x\
    \ => lst2.find(y => y.toInt == x))\n        val map14 = map13.map(x => x.toInt)\n\
    \        val map15 = map14.filter(_._2 > 0)\n        val map16 = map15.map(_._1)\n\
    \        val map17 = map16.map(x => lst1.find(y => y.toInt == x))\n        val\
    \ map18 = map17.map(x => lst2.find(y => y.toInt == x))\n        val map19 = map18.map(x\
    \ => x.toInt)\n        val map20 = map19.filter(_._2 > 0)\n        val map21 =\
    \ map20.map(_._1)\n        val map22 = map21.map(x => lst1.find(y => y.toInt ==\
    \ x))\n        val map23 = map22.map(x => lst2.find(y => y.toInt == x))\n    \
    \    val map24 = map23.map(x => x.toInt)\n        val map25 = map24.filter(_._2\
    \ > 0)\n        val map26 = map25.map(_._1)\n        val map27 = map26.map(x =>\
    \ lst1.find(y => y.toInt == x))\n        val map28 = map27.map(x => lst2.find(y\
    \ => y.toInt == x))\n        val map29 = map28.map(x => x.toInt)\n        val\
    \ map30 = map29.filter(_._2 > 0)\n        val map31 = map30.map(_._1)\n      \
    \  val map32 = map31.map(x => lst1.find(y => y.toInt == x))\n", "        val lst3\
    \ = lst1 ++ lst2\n        val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)",
  "        val lst3 = lst1.filterNot(lst2.contains)\n        if(lst3.isEmpty) lst3\n\
    \        else lst3.head :: totalMatch(lst3.tail, lst2)", "        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        val lst4 = lst2.filterNot(lst1.contains)\n        if(lst3.size == lst4.size)\
    \ {\n            lst3\n        } else {\n            lst4\n        }", "     \
    \   val lst3 = lst1.filter(x => lst2.contains(x))\n        if(lst3.size == lst2.size)\
    \ {\n            lst3\n        } else {\n            lst1\n        }", "     \
    \   val lst3 = lst1.filterNot(lst2.contains)\n        if(lst3.isEmpty) lst1\n\
    \        else lst3", "        val lst3 = lst1 ++ lst2\n        val lst4 = lst3.toSet\n\
    \        val lst5 = lst4.toList\n        lst5.sortWith((x, y) => x.toString.length\
    \ < y.toString.length)\n        lst5.head", '        lst1.zip(lst2).filter(_._1.length
    < _._2.length).map(_._1)', "        val lst3 = lst1.filter(x => lst2.contains(x))\n\
    \        val lst4 = lst2.filter(x => lst1.contains(x))\n        if(lst3.size ==\
    \ lst4.size) lst3 else lst4", "        val lst3 = lst1 ++ lst2\n        val lst4\
    \ = lst3.toSet\n        lst4.toList", "        val lst3 = lst1.filter(_ < lst2)\n\
    \        val lst4 = lst2.filter(_ < lst1)\n        lst3.length match {\n     \
    \       case 0 => lst4\n            case _ => lst3.head :: totalMatch(lst3.tail,\
    \ lst4)\n        }", '        lst1.zip(lst2).filter(_._1 < _._2).map(_._1)', " \
    \       val lst3 = lst1.toList ++ lst2.toList\n        val lst4 = lst3.toSet\n\
    \        lst4.filter(_ < lst3.size)", "        val lst3 = lst1.filter(_ < lst2)\n\
    \        val lst4 = lst2.filter(_ < lst1)\n        lst3.length match {\n     \
    \       case 0 => lst4\n            case _ => lst3\n        }", "        val lst3\
    \ = lst1.filter(_ < lst2)\n        val lst4 = lst2.filter(_ < lst1)\n        if\
    \ (lst3.size == lst4.size) {\n            lst3\n        } else {\n           \
    \ lst4\n        }", "        val lst3 = lst1.toSet ++ lst2.toSet\n        lst3.toList",
  "        lst1 match {\n            case Nil => lst2\n            case _ => {\n \
    \               val map1 = lst1.map(x => (x, 1)).toMap\n                val map2\
    \ = lst2.map(x => (x, 1)).toMap\n                val map3 = map1.filterKeys(x\
    \ => map2.contains(x))\n                map3.values.toList.sortBy(x => x._1).reverse.head\n\
    \            }\n        }", "        val lst3 = lst1.filter(_ < lst2)\n      \
    \  val lst4 = lst2.filter(_ < lst1)\n        lst3.length match {\n           \
    \ case 0 => lst4\n            case _ => lst3.head :: totalMatch(lst3.tail, lst4)\n\
    \        }", "        val lst3 = lst1.toSet ++ lst2.toSet\n        lst3.toList.sortWith(_\
    \ < _)", "        val lst3 = lst1 ++ lst2\n        val lst4 = lst3.toSet\n   \
    \     lst4.filter(_ < lst3.size)", "        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        val lst4 = lst2.filterNot(lst1.contains)\n        lst3.length match {\n\
    \            case 0 => lst4\n            case _ => lst3.zip(lst4).filter(_._1\
    \ < _._1).map(_._1)\n        }", "        val lst3 = lst1.filter(_ < lst2).map(_\
    \ + lst2.indexOf(_))\n        if (lst3.size == lst1.size) {\n            lst3\n\
    \        } else {\n            lst1\n        }", "        val map1 = lst1.map(x\
    \ => (x, 1)).toMap\n        val map2 = lst2.map(x => (x, 1)).toMap\n        val\
    \ map3 = map1.filter(_._2 < map2.size)\n        map3.map(_._1).distinct", "  \
    \      val lst3 = lst1 ++ lst2\n        val lst4 = lst3.toSet\n        lst4.toList.sortWith(_\
    \ < _)", "        val map1 = lst1.map(x => (x, 1)).toMap\n        val map2 = lst2.map(x\
    \ => (x, 1)).toMap\n        val map3 = map1.keySet.diff(map2.keySet)\n       \
    \ map3.toList.map(x => (x, map3(x) + map2(x))).toList", "        val lst3 = lst1\
    \ ++ lst2\n        val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)",
  "        val lst3 = lst1.filterNot(lst2.contains)\n        val lst4 = lst2.filterNot(lst1.contains)\n\
    \        if(lst3.length == lst4.length) lst3\n        else lst4", "        lst1\
    \ match {\n            case Nil => lst2\n            case _ => lst1 ++ lst2.filter(x\
    \ => !lst1.contains(x))\n        }", "        lst1 match {\n            case Nil\
    \ => lst2\n            case _ => lst1 ++ lst2.filter(x => lst1.count(_ == x) <\
    \ lst2.count(_ == x))\n        }", '        lst1.zip(lst2).map { case (x, y) =>
    if (x.length > y.length) x else y }', "        lst1 match {\n            case\
    \ Nil => lst2\n            case _ => lst1 ++ lst2.filter(x => !lst1.contains(x))\n\
    \        }", "        val map1 = lst1.map(x => (x, 1)).toMap\n        val map2\
    \ = lst2.map(x => (x, 1)).toMap\n        val map3 = map1.filterKeys(x => map2.contains(x))\n\
    \        map3.keys.toList.sortWith(_ < _)", "        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        val lst4 = lst2.filterNot(lst1.contains)\n        lst3.length <= lst4.length\
    \ ? lst3 : lst4", "        val map1 = lst1.map(x => (x, 1)).toMap\n        val\
    \ map2 = lst2.map(x => (x, 1)).toMap\n        val map3 = map1.keySet.intersect(map2.keySet).map(x\
    \ => (x, map1(x) + map2(x)))\n        map3.toList.sortBy(_._2).reverse.map(x =>\
    \ x._1)", '        lst1.zip(lst2).filter(_._1 < _._2).map(_._1).distinct', " \
    \       val lst3 = lst1.filter(_ < lst2)\n        val lst4 = lst2.filter(_ < lst1)\n\
    \        if (lst3.size == lst4.size) {\n            lst3\n        } else {\n \
    \           lst4\n        }", "        val lst3 = lst1.filter(_ < lst2)\n    \
    \    val lst4 = lst2.filter(_ < lst1)\n        if (lst3.size == lst4.size) lst3\
    \ else lst4", "        val lst3 = lst1 ++ lst2\n        val lst4 = lst3.toSet\n\
    \        lst4.filter(_ < lst3.size)", "        val lst3 = lst1 ++ lst2\n     \
    \   val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)", '        lst1.zip(lst2).filter(_._1.length
    < _._2.length).map(_._1)', "        val lst3 = lst1.filter(_ < lst2)\n       \
    \ val lst4 = lst2.filter(_ < lst1)\n        lst3.filter(_ == lst4.sum).headOption",
  '        lst1.zip(lst2).filter(_._1.length < _._2.length).map(_._1)', "        lst1.zip(lst2).map\
    \ {\n            case (s,t) => if (s.length < t.length) s else t\n        }.distinct",
  "        lst1 match {\n            case Nil => lst2\n            case x :: xs =>\
    \ totalMatch(xs, lst2 filter (x => lst1 exists (xs contains _)))\n        }",
  "        val lst3 = lst1.filterNot(lst2.contains)\n        val lst4 = lst2.filterNot(lst1.contains)\n\
    \        if(lst3.size == lst4.size) lst3\n        else lst4", "        val lst3\
    \ = lst1.filterNot(lst2.contains)\n        if(lst3.size == lst2.size) {\n    \
    \        lst3\n        } else {\n            lst3\n        }", "        val lst3\
    \ = lst1 ++ lst2\n        val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.length).sortWith(_\
    \ < _).reverse", "        val lst3 = lst1.filterNot(lst2.contains)\n        if\
    \ (lst3.size == lst2.size) {\n            lst3\n        } else {\n           \
    \ lst1\n        }", "        val lst3 = lst1.filterNot(lst2.contains)\n      \
    \  val lst4 = lst2.filterNot(lst1.contains)\n        val lst5 = lst3.filterNot(lst4.contains)\n\
    \        val lst6 = lst4.filterNot(lst3.contains)\n        lst5.toList ++ lst6",
  "        val lst3 = lst1.filterNot(lst2.contains)\n        if(lst3.isEmpty) lst3\n\
    \        else lst3.head :: totalMatch(lst3.tail, lst2)", "        val lst3 = lst1.filter(_\
    \ < lst2)\n        val lst4 = lst2.filter(_ < lst1)\n        lst3.length match\
    \ {\n            case 0 => lst4\n            case _ => lst3.head :: totalMatch(lst3.tail,\
    \ lst4)\n        }", "        lst1 match {\n            case Nil => lst2\n   \
    \         case _ => lst1 ++ lst2.filter(x => lst1.count(_ == x) < lst2.count(_\
    \ == x))\n        }"]
stop_tokens:
- "\n    }\n"
