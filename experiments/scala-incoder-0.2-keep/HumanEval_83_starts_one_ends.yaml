name: HumanEval_83_starts_one_ends
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, return the count of the numbers of n-digit\n\
  \    // positive integers that start or end with 1.\n    def startsOneEnds(n : Long)\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
  \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
  \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
  \ == (18000l));\n    }\n\n}\n"
completions: ["        var count = 0\n        var last = 0\n        while(n > 0){\n\
    \            val x = n % 10\n            if(x != 1 && x == last){\n          \
    \      count += 1\n            }\n            last = x\n            n /= 10\n\
    \        }\n        count", "        val ones = mutable.ArrayBuffer.empty[Long]\n\
    \        val zeros = mutable.ArrayBuffer.empty[Long]\n        val counter = mutable.HashMap.empty[Long,\
    \ Long]\n        val counters = mutable.HashMap.empty[Long, Long]\n        val\
    \ n = n.toInt\n        val onesCount = 1\n        val zerosCount = 1\n       \
    \ val countersCount = 1\n        val countersCounts = mutable.HashMap.empty[Long,\
    \ Long]\n        val countersCounts = mutable.HashMap.empty[Long, Long]\n    \
    \    val countersCounts = mutable.HashMap.empty[Long, Long]\n        val countersCounts\
    \ = mutable.HashMap.empty[Long, Long]\n        val countersCounts = mutable.HashMap.empty[Long,\
    \ Long]\n        val countersCounts = mutable.HashMap.empty[Long, Long]\n    \
    \    val countersCounts = mutable.HashMap.empty[Long, Long]\n        val countersCounts\
    \ = mutable.HashMap.empty[Long, Long]\n        val countersCounts = mutable.HashMap.empty[Long,\
    \ Long]\n        val countersCounts = mutable.HashMap.empty[Long, Long]\n    \
    \    val countersCounts = mutable.HashMap.empty[Long, Long]\n        val countersCounts\
    \ = mutable.HashMap.empty[Long, Long]\n        val countersCounts = mutable.HashMap.empty[Long,\
    \ Long]\n        val countersCounts = mutable.HashMap.empty[Long, Long]\n    \
    \    val countersCounts = mutable.HashMap.empty[Long, Long]\n        val countersCounts\
    \ = mutable.HashMap.empty[Long, Long]\n        val countersCounts = mutable.HashMap.empty[Long,\
    \ Long]\n        val countersCounts = mutable.HashMap.empty[Long, Long]\n    \
    \    val countersCounts = mutable.HashMap.empty[Long, Long]\n        val countersCounts\
    \ = mutable.HashMap.empty[Long, Long]\n        val countersCounts = mutable.HashMap.empty[Long,\
    \ Long]\n        val countersCounts = mutable.HashMap.empty[Long, Long]\n    \
    \    val countersCounts = mutable.HashMap.empty[Long, Long]\n        val countersCounts\
    \ = mutable.HashMap.empty[Long, Long]\n        val countersCounts = mutable.HashMap.empty[Long,\
    \ Long]\n        val counters", "        var count = 0\n        val ones = Vector.fill(n\
    \ / 10)(1)\n        val zeros = Vector.fill(n / 10)(0)\n        val onesCount\
    \ = ones.count(_ == 1)\n        val zerosCount = zeros.count(_ == 0)\n       \
    \ if (onesCount == 1 && zerosCount == 0) {\n            count = n\n        } else\
    \ if (onesCount == 1 && zerosCount > 0) {\n            count = onesCount + zerosCount\n\
    \        } else if (onesCount > 0 && zerosCount == 0) {\n            count = onesCount\
    \ + n\n        } else {\n            count = onesCount + zerosCount + n\n    \
    \    }\n        count", "        val ones = mutable.ArrayBuffer(1)\n        val\
    \ zeros = mutable.ArrayBuffer(0)\n        val counts = mutable.ArrayBuffer.empty[Long]\n\
    \        val start = ones.head\n        val end = zeros.head\n        while(n\
    \ > 0){\n            val next = ones.dropWhile(x => x == start).head\n       \
    \     val nextZeros = zeros.dropWhile(x => x == end).head\n            counts\
    \ += next\n            counts += nextZeros\n            ones += next\n       \
    \     zeros += nextZeros\n            n -= 1\n        }\n        counts.sum",
  "        val ones = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        var count = 0\n        for (i <- 1 to n) {\n            if (i % 10 ==\
    \ 1) {\n                ones += i\n                onesCount += i\n          \
    \      count += 1\n            }\n        }\n        onesCount.toList.sortBy(_\
    \ - 1).last", "        val counts = mutable.HashMap.empty[Long, Long]\n      \
    \  val ones = mutable.ArrayBuffer.empty[Long]\n        val zeros = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount = mutable.ArrayBuffer.empty[Long]\n        val zerosCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n        val onesCountZeros\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCountZeros = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCountOnes = mutable.ArrayBuffer.empty[Long]\n        val zerosCountOnes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountZeroOnes = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCountZeroOnes = mutable.ArrayBuffer.empty[Long]\n        val\
    \ onesCountOneOnes = mutable.ArrayBuffer.empty[Long]\n        val zerosCountOneOnes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountZeroZeros = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCountZeroZeros = mutable.ArrayBuffer.empty[Long]\n        val\
    \ onesCountOneZeros = mutable.ArrayBuffer.empty[Long]\n        val zerosCountOneZeros\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountOneOneZeros = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCountOneOneZeros = mutable.ArrayBuffer.empty[Long]\n       \
    \ val onesCountZeroOneZeros = mutable.ArrayBuffer.empty[Long]\n        val zerosCountZeroOneZeros\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountOneZeroZeros = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCountOneZeroZeros = mutable.ArrayBuffer.empty[Long]\n      \
    \  val onesCountOneOneZeros = mutable.ArrayBuffer.empty[Long]\n        val zerosCountOneOneZeros\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountZeroZeroOneZeros = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCountZeroZeroOneZeros = mutable.ArrayBuffer.empty[Long]\n  \
    \      val onesCountOneZeroZeros = mutable.ArrayBuffer.empty[Long]\n        val\
    \ zerosCountOneZeroZeros = mutable.ArrayBuffer.empty[Long]\n        val onesCountOneOneZeros\
    \ = ", "        val ones = mutable.ArrayBuffer.empty[Long]\n        val zeros\
    \ = mutable.ArrayBuffer.empty[Long]\n        val counts = mutable.ArrayBuffer.empty[Long]\n\
    \        val starts = mutable.ArrayBuffer.empty[Long]\n        val ends = mutable.ArrayBuffer.empty[Long]\n\
    \        val nums = mutable.ArrayBuffer.empty[Long]\n        val numsLeft = n\n\
    \        val numsRight = n - 1\n        while(numsLeft > 0 || numsRight > 0) {\n\
    \            val leftNum = numsLeft % 10\n            val rightNum = numsRight\
    \ % 10\n            if(leftNum == 1 && rightNum == 1) {\n                ones\
    \ += numsLeft / 10\n                zeros += numsRight / 10\n                counts\
    \ += numsLeft / 10\n                starts += numsRight / 10\n               \
    \ ends += numsRight / 10\n                numsLeft /= 10\n                numsRight\
    \ /= 10\n            } else if(leftNum == 1 && rightNum != 1) {\n            \
    \    ones += numsLeft / 10\n                zeros += numsRight / 10\n        \
    \        counts += numsLeft / 10\n                starts += numsRight / 10\n \
    \               ends += numsRight / 10\n                numsLeft /= 10\n     \
    \           numsRight /= 10\n            } else if(leftNum != 1 && rightNum ==\
    \ 1) {\n                ones += numsLeft / 10\n                zeros += numsRight\
    \ / 10\n                counts += numsLeft / 10\n                starts += numsRight\
    \ / 10\n                ends += numsRight / 10\n                numsLeft /= 10\n\
    \                numsRight /= 10\n            } else if(leftNum != 1 && rightNum\
    \ != 1) {\n                ones += numsLeft / 10\n                zeros += numsRight\
    \ / 10\n                counts += numsLeft / 10\n                starts += numsRight\
    \ / 10\n                ends += numsRight / 10\n                numsLeft /= 10\n\
    \                numsRight /= 10\n            }\n        }\n        val onesCount\
    \ = ones.toList.length\n        val zerosCount = zeros.toList.length\n       \
    \ val countsCount = counts.toList.length\n        val startsCount = starts.toList.length\n\
    \        val endsCount = ends.toList.length\n        val numsCount = nums.toList.length\n\
    \        val numsLeft = n\n        val numsRight = n - 1\n        while(numsLeft\
    \ > 0 || numsRight > 0) {\n            val leftNum = nums", "        val ones\
    \ = mutable.ListBuffer.empty[Long]\n        val zeros = mutable.ListBuffer.empty[Long]\n\
    \        val counter = mutable.ListBuffer.empty[Long]\n        val counters =\
    \ mutable.ListBuffer.empty[Long]\n        val countersMap = mutable.HashMap.empty[Long,\
    \ Long]\n        val countersMap2 = mutable.HashMap.empty[Long, Long]\n      \
    \  val countersMap3 = mutable.HashMap.empty[Long, Long]\n        val countersMap4\
    \ = mutable.HashMap.empty[Long, Long]\n        val countersMap5 = mutable.HashMap.empty[Long,\
    \ Long]\n        val countersMap6 = mutable.HashMap.empty[Long, Long]\n      \
    \  val countersMap7 = mutable.HashMap.empty[Long, Long]\n        val countersMap8\
    \ = mutable.HashMap.empty[Long, Long]\n        val countersMap9 = mutable.HashMap.empty[Long,\
    \ Long]\n        val countersMap10 = mutable.HashMap.empty[Long, Long]\n     \
    \   val countersMap11 = mutable.HashMap.empty[Long, Long]\n        val countersMap12\
    \ = mutable.HashMap.empty[Long, Long]\n        val countersMap13 = mutable.HashMap.empty[Long,\
    \ Long]\n        val countersMap14 = mutable.HashMap.empty[Long, Long]\n     \
    \   val countersMap15 = mutable.HashMap.empty[Long, Long]\n        val countersMap16\
    \ = mutable.HashMap.empty[Long, Long]\n        val countersMap17 = mutable.HashMap.empty[Long,\
    \ Long]\n        val countersMap18 = mutable.HashMap.empty[Long, Long]\n     \
    \   val countersMap19 = mutable.HashMap.empty[Long, Long]\n        val countersMap20\
    \ = mutable.HashMap.empty[Long, Long]\n        val countersMap21 = mutable.HashMap.empty[Long,\
    \ Long]\n        val countersMap22 = mutable.HashMap.empty[Long, Long]\n     \
    \   val countersMap23 = mutable.HashMap.empty[Long, Long]\n        val countersMap24\
    \ = mutable.HashMap.empty[Long, Long]\n        val countersMap25 = mutable.HashMap.empty[Long,\
    \ Long]\n        val countersMap26 = mutable.HashMap.empty[Long, Long]\n     \
    \   val countersMap", "        val ones = mutable.Set[Long]()\n        val zeros\
    \ = mutable.Set[Long]()\n        val count = mutable.Set[Long]()\n        val\
    \ nums = mutable.Set[Long]()\n        val numsSet = mutable.Set[Long]()\n    \
    \    val numsSet2 = mutable.Set[Long]()\n        val numsSet3 = mutable.Set[Long]()\n\
    \        val numsSet4 = mutable.Set[Long]()\n        val numsSet5 = mutable.Set[Long]()\n\
    \        val numsSet6 = mutable.Set[Long]()\n        val numsSet7 = mutable.Set[Long]()\n\
    \        val numsSet8 = mutable.Set[Long]()\n        val numsSet9 = mutable.Set[Long]()\n\
    \        val numsSet10 = mutable.Set[Long]()\n        val numsSet11 = mutable.Set[Long]()\n\
    \        val numsSet12 = mutable.Set[Long]()\n        val numsSet13 = mutable.Set[Long]()\n\
    \        val numsSet14 = mutable.Set[Long]()\n        val numsSet15 = mutable.Set[Long]()\n\
    \        val numsSet16 = mutable.Set[Long]()\n        val numsSet17 = mutable.Set[Long]()\n\
    \        val numsSet18 = mutable.Set[Long]()\n        val numsSet19 = mutable.Set[Long]()\n\
    \        val numsSet20 = mutable.Set[Long]()\n        val numsSet21 = mutable.Set[Long]()\n\
    \        val numsSet22 = mutable.Set[Long]()\n        val numsSet23 = mutable.Set[Long]()\n\
    \        val numsSet24 = mutable.Set[Long]()\n        val numsSet25 = mutable.Set[Long]()\n\
    \        val numsSet26 = mutable.Set[Long]()\n        val numsSet27 = mutable.Set[Long]()\n\
    \        val numsSet28 = mutable.Set[Long]()\n        val numsSet29 = mutable.Set[Long]()\n\
    \        val numsSet30 = mutable.Set[Long]()\n        val numsSet31 = mutable.Set[Long]()\n\
    \        val numsSet32 = mutable.Set[Long", "        val ones = mutable.ArrayBuffer(1)\n\
    \        val zeros = mutable.ArrayBuffer(0)\n        val count = mutable.ArrayBuffer(0)\n\
    \        val onesCount = mutable.ArrayBuffer(0)\n        val zerosCount = mutable.ArrayBuffer(0)\n\
    \        val onesCount2 = mutable.ArrayBuffer(0)\n        val zerosCount2 = mutable.ArrayBuffer(0)\n\
    \        val onesCount3 = mutable.ArrayBuffer(0)\n        val zerosCount3 = mutable.ArrayBuffer(0)\n\
    \        val onesCount4 = mutable.ArrayBuffer(0)\n        val zerosCount4 = mutable.ArrayBuffer(0)\n\
    \        val onesCount5 = mutable.ArrayBuffer(0)\n        val zerosCount5 = mutable.ArrayBuffer(0)\n\
    \        val onesCount6 = mutable.ArrayBuffer(0)\n        val zerosCount6 = mutable.ArrayBuffer(0)\n\
    \        val onesCount7 = mutable.ArrayBuffer(0)\n        val zerosCount7 = mutable.ArrayBuffer(0)\n\
    \        val onesCount8 = mutable.ArrayBuffer(0)\n        val zerosCount8 = mutable.ArrayBuffer(0)\n\
    \        val onesCount9 = mutable.ArrayBuffer(0)\n        val zerosCount9 = mutable.ArrayBuffer(0)\n\
    \        val onesCount10 = mutable.ArrayBuffer(0)\n        val zerosCount10 =\
    \ mutable.ArrayBuffer(0)\n        val onesCount11 = mutable.ArrayBuffer(0)\n \
    \       val zerosCount11 = mutable.ArrayBuffer(0)\n        val onesCount12 = mutable.ArrayBuffer(0)\n\
    \        val zerosCount12 = mutable.ArrayBuffer(0)\n        val onesCount13 =\
    \ mutable.ArrayBuffer(0)\n        val zerosCount13 = mutable.ArrayBuffer(0)\n\
    \        val onesCount14 = mutable.ArrayBuffer(0)\n        val zerosCount14 =\
    \ mutable.ArrayBuffer(0)\n        val onesCount15 = mutable.ArrayBuffer(0)\n \
    \       val zerosCount15 = mutable.ArrayBuffer(0)\n        val onesCount16 = mutable.ArrayBuffer(0)\n\
    \        val zerosCount16 = mutable.ArrayBuffer(0)\n        val onesCount17 =\
    \ mutable.ArrayBuffer(0)\n        val zerosCount17 = mutable.ArrayBuffer(0)\n\
    \        val onesCount18 = mutable.ArrayBuffer(0)\n        val zerosCount18 =\
    \ mutable.ArrayBuffer(0)\n        val onesCount19 = mutable.ArrayBuffer(0)\n \
    \       val zerosCount19 = mutable.ArrayBuffer(0)\n        val onesCount20 = mutable.ArrayBuffer(0)\n\
    \        val zerosCount20 = mutable.ArrayBuffer(0)\n        val onesCount21 =\
    \ mutable.", "        val ones = mutable.ArrayBuffer.empty[Long]\n        val\
    \ zeros = mutable.ArrayBuffer.empty[Long]\n        val counts = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount = mutable.ArrayBuffer.empty[Long]\n        val zerosCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val countsCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCountCount = mutable.ArrayBuffer.empty[Long]\n        val zerosCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val countsCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCountCountCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ zerosCountCountCount = mutable.ArrayBuffer.empty[Long]\n        val countsCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n   \
    \     val countsCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val onesCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n    \
    \    val zerosCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n  \
    \      val countsCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCountCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val countsCountCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCountCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCountCountCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val countsCountCountCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCountCountCountCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCountCountCountCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val countsCountCountCountCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCountCountCountCountCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCountCountCountCountCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val countsCountCountCountCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]",
  "        val ones = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n\
    \        val counts = mutable.ArrayBuffer.empty[Long]\n        val onesCount =\
    \ mutable.ArrayBuffer.empty[Long]\n        val zerosCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesZeros = mutable.ArrayBuffer.empty[Long]\n        val zerosOnes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesOnes = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosZeros = mutable.ArrayBuffer.empty[Long]\n        val onesZeroOnes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosOneOnes = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesOneOnes = mutable.ArrayBuffer.empty[Long]\n        val zerosZeroOnes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesZeroZeros = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosOneZeros = mutable.ArrayBuffer.empty[Long]\n        val onesOneZeros\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosZeroOnes = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesZeroOneOnes = mutable.ArrayBuffer.empty[Long]\n        val zerosOneOneOnes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesOneOneOnes = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosZeroOneOnes = mutable.ArrayBuffer.empty[Long]\n        val onesZeroZeroOnes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosOneZeroOnes = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesOneZeroOnes = mutable.ArrayBuffer.empty[Long]\n        val zerosZeroOneOnes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesZeroOneZeros = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosOneZeroZeros = mutable.ArrayBuffer.empty[Long]\n        val\
    \ onesOneZeroZeros = mutable.ArrayBuffer.empty[Long]\n        val zerosZeroOneZeros\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesZeroOneOnes = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosOneOneOnes = mutable.ArrayBuffer.empty[Long]\n        val onesOneOneOnes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosZeroOneOnes = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesZeroZero", "        val ones = mutable.ListBuffer[Long]()\n \
    \       val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 = mutable.ListBuffer[Long]()\n\
    \        val onesCount3 = mutable.ListBuffer[Long]()\n        val onesCount4 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount5 = mutable.ListBuffer[Long]()\n\
    \        val onesCount6 = mutable.ListBuffer[Long]()\n        val onesCount7 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount8 = mutable.ListBuffer[Long]()\n\
    \        val onesCount9 = mutable.ListBuffer[Long]()\n        val onesCount10\
    \ = mutable.ListBuffer[Long]()\n        val onesCount11 = mutable.ListBuffer[Long]()\n\
    \        val onesCount12 = mutable.ListBuffer[Long]()\n        val onesCount13\
    \ = mutable.ListBuffer[Long]()\n        val onesCount14 = mutable.ListBuffer[Long]()\n\
    \        val onesCount15 = mutable.ListBuffer[Long]()\n        val onesCount16\
    \ = mutable.ListBuffer[Long]()\n        val onesCount17 = mutable.ListBuffer[Long]()\n\
    \        val onesCount18 = mutable.ListBuffer[Long]()\n        val onesCount19\
    \ = mutable.ListBuffer[Long]()\n        val onesCount20 = mutable.ListBuffer[Long]()\n\
    \        val onesCount21 = mutable.ListBuffer[Long]()\n        val onesCount22\
    \ = mutable.ListBuffer[Long]()\n        val onesCount23 = mutable.ListBuffer[Long]()\n\
    \        val onesCount24 = mutable.ListBuffer[Long]()\n        val onesCount25\
    \ = mutable.ListBuffer[Long]()\n        val onesCount26 = mutable.ListBuffer[Long]()\n\
    \        val onesCount27 = mutable.ListBuffer[Long]()\n        val onesCount28\
    \ = mutable.ListBuffer[Long]()\n        val onesCount29 = mutable.ListBuffer[Long]()\n\
    \        val onesCount30 = mutable.ListBuffer[Long]()\n        val onesCount31\
    \ = mutable.ListBuffer[Long]()\n        val onesCount32 = mutable.ListBuffer[Long]()\n",
  "        val ones = mutable.ArrayBuffer(1)\n        var count = 0\n        var i\
    \ = 0\n        while (i < n) {\n            if (ones.length == 0 || ones(0) ==\
    \ 1) {\n                ones += i\n                count += 1\n            }\n\
    \            i += 1\n        }\n        count", "        val ones = mutable.ListBuffer[Long]()\n\
    \        var count = 0\n        while(n > 0) {\n            ones += n\n      \
    \      n /= 10\n            count += 1\n        }\n        ones.toList.filter(x\
    \ => x == 1).length", "        var count = 0\n        val ones = Vector.fill(n\
    \ / 10)(1)\n        val tens = Vector.fill(n / 10)(10)\n        val tensPlusOnes\
    \ = tens + ones\n        val onesPlusTens = ones + tens\n        val onesPlusTensPlusOnes\
    \ = ones + tens + ones\n        onesPlusTensPlusOnes.foreach { x =>\n        \
    \    if (x == 1)\n                count += 1\n        }\n        tensPlusOnes.foreach\
    \ { x =>\n            if (x == 10)\n                count += 1\n        }\n  \
    \      onesPlusTens.foreach { x =>\n            if (x == 1)\n                count\
    \ += 1\n        }\n        onesPlusTensPlusOnes.foreach { x =>\n            if\
    \ (x == 1)\n                count += 1\n        }\n        tensPlusOnes.foreach\
    \ { x =>\n            if (x == 10)\n                count += 1\n        }\n  \
    \      onesPlusTens.foreach { x =>\n            if (x == 1)\n                count\
    \ += 1\n        }\n        onesPlusTensPlusOnes.foreach { x =>\n            if\
    \ (x == 1)\n                count += 1\n        }\n        tensPlusOnes.foreach\
    \ { x =>\n            if (x == 10)\n                count += 1\n        }\n  \
    \      onesPlusTens.foreach { x =>\n            if (x == 1)\n                count\
    \ += 1\n        }\n        onesPlusTensPlusOnes.foreach { x =>\n            if\
    \ (x == 1)\n                count += 1\n        }\n        tensPlusOnes.foreach\
    \ { x =>\n            if (x == 10)\n                count += 1\n        }\n  \
    \      onesPlusTens.foreach { x =>\n            if (x == 1)\n                count\
    \ += 1\n        }\n        onesPlusTensPlusOnes.foreach { x =>\n            if\
    \ (x == 1)\n                count += 1\n        }\n        tensPlusOnes.foreach\
    \ { x =>\n            if (x == 10)\n                count += 1\n        }\n  \
    \      onesPlusTens.foreach { x =>\n            if (x == 1)\n                count\
    \ += 1\n        }\n        onesPlusTensPlusOnes.foreach { x =>\n            if\
    \ (x == 1)\n                count += 1\n        }\n        tensPlusOnes.foreach\
    \ { x =>\n            if (x == 10)\n                count += 1\n        }\n  \
    \      onesPlusTens.foreach { x =>\n            if (x == 1)\n                count\
    \ += 1\n        }\n        onesPlusTensPlusOnes.foreach { x =>\n            if\
    \ (x == 1)\n                count += 1\n        }\n        tensPlusOnes.foreach\
    \ { x =>\n            if (x == 10)\n                count += 1\n        }\n  \
    \      ", "        var count = 0\n        var last = 0\n        for(i <- 1 to\
    \ n) {\n            if(i % 10 == 1) {\n                count += 1\n          \
    \      last = i\n            }\n        }\n        count += last - n + 1\n   \
    \     return count", "        val ones = mutable.ListBuffer[Long]()\n        val\
    \ onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 = mutable.ListBuffer[Long]()\n\
    \        val onesCount3 = mutable.ListBuffer[Long]()\n        val onesCount4 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount5 = mutable.ListBuffer[Long]()\n\
    \        val onesCount6 = mutable.ListBuffer[Long]()\n        val onesCount7 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount8 = mutable.ListBuffer[Long]()\n\
    \        val onesCount9 = mutable.ListBuffer[Long]()\n        val onesCount10\
    \ = mutable.ListBuffer[Long]()\n        val onesCount11 = mutable.ListBuffer[Long]()\n\
    \        val onesCount12 = mutable.ListBuffer[Long]()\n        val onesCount13\
    \ = mutable.ListBuffer[Long]()\n        val onesCount14 = mutable.ListBuffer[Long]()\n\
    \        val onesCount15 = mutable.ListBuffer[Long]()\n        val onesCount16\
    \ = mutable.ListBuffer[Long]()\n        val onesCount17 = mutable.ListBuffer[Long]()\n\
    \        val onesCount18 = mutable.ListBuffer[Long]()\n        val onesCount19\
    \ = mutable.ListBuffer[Long]()\n        val onesCount20 = mutable.ListBuffer[Long]()\n\
    \        val onesCount21 = mutable.ListBuffer[Long]()\n        val onesCount22\
    \ = mutable.ListBuffer[Long]()\n        val onesCount23 = mutable.ListBuffer[Long]()\n\
    \        val onesCount24 = mutable.ListBuffer[Long]()\n        val onesCount25\
    \ = mutable.ListBuffer[Long]()\n        val onesCount26 = mutable.ListBuffer[Long]()\n\
    \        val onesCount27 = mutable.ListBuffer[Long]()\n        val onesCount28\
    \ = mutable.ListBuffer[Long]()\n        val onesCount29 = mutable.ListBuffer[Long]()\n\
    \        val onesCount30 = mutable.ListBuffer[Long]()\n        val onesCount31\
    \ = mutable.ListBuffer[Long]()\n        val onesCount32 = mutable.ListBuffer[Long]()\n",
  "        val counts = mutable.HashMap.empty[Long, Long]\n        for (i <- 1 to\
    \ n) {\n            if (i % 10 == 1) {\n                counts.put(i, counts.getOrElse(i,\
    \ 0) + 1L)\n            }\n        }\n        counts.values.sum", "        val\
    \ ones = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount2 = mutable.ListBuffer[Long]()\n        val onesCount3 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val onesCount5 = mutable.ListBuffer[Long]()\n        val onesCount6 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val onesCount8 = mutable.ListBuffer[Long]()\n        val onesCount9 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val onesCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val onesCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val onesCount17 = mutable.ListBuffer[Long]()\n        val onesCount18\
    \ = mutable.ListBuffer[Long]()\n        val onesCount19 = mutable.ListBuffer[Long]()\n\
    \        val onesCount20 = mutable.ListBuffer[Long]()\n        val onesCount21\
    \ = mutable.ListBuffer[Long]()\n        val onesCount22 = mutable.ListBuffer[Long]()\n\
    \        val onesCount23 = mutable.ListBuffer[Long]()\n        val onesCount24\
    \ = mutable.ListBuffer[Long]()\n        val onesCount25 = mutable.ListBuffer[Long]()\n\
    \        val onesCount26 = mutable.ListBuffer[Long]()\n        val onesCount27\
    \ = mutable.ListBuffer[Long]()\n        val onesCount28 = mutable.ListBuffer[Long]()\n\
    \        val onesCount29 = mutable.ListBuffer[Long]()\n        val onesCount30\
    \ = mutable.ListBuffer[Long]()\n        val onesCount31 = mutable.ListBuffer[Long]()\n\
    \        val onesCount32 = mutable.ListBuffer[Long]()\n", "        val ones =\
    \ mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n        val counts\
    \ = mutable.Map[Long, Long]()\n        val starts = mutable.Set[Long]()\n    \
    \    val ends = mutable.Set[Long]()\n        val digits = n.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val digit = digits(0)\n        val digit2 = digits(1)\n        val digit3\
    \ = digits(2)\n        val digit4 = digits(3)\n        val digit5 = digits(4)\n\
    \        val digit6 = digits(5)\n        val digit7 = digits(6)\n        val digit8\
    \ = digits(7)\n        val digit9 = digits(8)\n        val digit10 = digits(9)\n\
    \        val digit11 = digits(10)\n        val digit12 = digits(11)\n        val\
    \ digit13 = digits(12)\n        val digit14 = digits(13)\n        val digit15\
    \ = digits(14)\n        val digit16 = digits(15)\n        val digit17 = digits(16)\n\
    \        val digit18 = digits(17)\n        val digit19 = digits(18)\n        val\
    \ digit20 = digits(19)\n        val digit21 = digits(20)\n        val digit22\
    \ = digits(21)\n        val digit23 = digits(22)\n        val digit24 = digits(23)\n\
    \        val digit25 = digits(24)\n        val digit26 = digits(25)\n        val\
    \ digit27 = digits(26)\n        val digit28 = digits(27)\n        val digit29\
    \ = digits(28)\n        val digit30 = digits(29)\n        val digit31 = digits(30)\n\
    \        val digit32 = digits(31)\n        val digit33 = digits(32)\n        val\
    \ digit34 = digits(33)\n        val digit35 = digits(34)\n        val digit36\
    \ = digits(35)\n        val digit37 = digits(36)\n        val digit38 = digits(37)\n\
    \        val digit39 = digits(38)\n        val digit40 = digits(39)\n        val\
    \ digit41 = digits(40)\n        val digit42 = digits(41)\n        val digit43\
    \ = digits(42)\n        val digit44 = digits(43)\n        val digit45 = digits(44)\n\
    \        val digit46 = digits(45)\n        val digit47 = digits(46)\n        val ",
  "        val ones = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val zerosCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val zerosCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val zerosCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val zerosCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val zerosCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val zerosCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val zerosCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val zerosCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val zerosCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val zerosCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val zerosCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val zerosCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val zerosCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val zerosCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val zerosCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val zerosCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val zerosCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val zerosCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val zerosCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount3 = mutable.ListBuffer[Long]()\n\
    \        val onesCount4 = mutable.ListBuffer[Long]()\n        val onesCount5 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount6 = mutable.ListBuffer[Long]()\n\
    \        val onesCount7 = mutable.ListBuffer[Long]()\n        val onesCount8 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount9 = mutable.ListBuffer[Long]()\n\
    \        val onesCount10 = mutable.ListBuffer[Long]()\n        val onesCount11\
    \ = mutable.ListBuffer[Long]()\n        val onesCount12 = mutable.ListBuffer[Long]()\n\
    \        val onesCount13 = mutable.ListBuffer[Long]()\n        val onesCount14\
    \ = mutable.ListBuffer[Long]()\n        val onesCount15 = mutable.ListBuffer[Long]()\n\
    \        val onesCount16 = mutable.ListBuffer[Long]()\n        val onesCount17\
    \ = mutable.ListBuffer[Long]()\n        val onesCount18 = mutable.ListBuffer[Long]()\n\
    \        val onesCount19 = mutable.ListBuffer[Long]()\n        val onesCount20\
    \ = mutable.ListBuffer[Long]()\n        val onesCount21 = mutable.ListBuffer[Long]()\n\
    \        val onesCount22 = mutable.ListBuffer[Long]()\n        val onesCount23\
    \ = mutable.ListBuffer[Long]()\n        val onesCount24 = mutable.ListBuffer[Long]()\n\
    \        val onesCount25 = mutable.ListBuffer[Long]()\n        val onesCount26\
    \ = mutable.ListBuffer[Long]()\n        val onesCount27 = mutable.ListBuffer[Long]()\n\
    \        val onesCount28 = mutable.ListBuffer[Long]()\n        val onesCount29\
    \ = mutable.ListBuffer[Long]()\n        val onesCount30 = mutable.ListBuffer[Long]()\n\
    \        val onesCount31 = mutable.ListBuffer[Long]()\n        val onesCount32\
    \ = mutable.ListBuffer[Long]()\n", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount3 = mutable.ListBuffer[Long]()\n\
    \        val onesCount4 = mutable.ListBuffer[Long]()\n        val onesCount5 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount6 = mutable.ListBuffer[Long]()\n\
    \        val onesCount7 = mutable.ListBuffer[Long]()\n        val onesCount8 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount9 = mutable.ListBuffer[Long]()\n\
    \        val onesCount10 = mutable.ListBuffer[Long]()\n        val onesCount11\
    \ = mutable.ListBuffer[Long]()\n        val onesCount12 = mutable.ListBuffer[Long]()\n\
    \        val onesCount13 = mutable.ListBuffer[Long]()\n        val onesCount14\
    \ = mutable.ListBuffer[Long]()\n        val onesCount15 = mutable.ListBuffer[Long]()\n\
    \        val onesCount16 = mutable.ListBuffer[Long]()\n        val onesCount17\
    \ = mutable.ListBuffer[Long]()\n        val onesCount18 = mutable.ListBuffer[Long]()\n\
    \        val onesCount19 = mutable.ListBuffer[Long]()\n        val onesCount20\
    \ = mutable.ListBuffer[Long]()\n        val onesCount21 = mutable.ListBuffer[Long]()\n\
    \        val onesCount22 = mutable.ListBuffer[Long]()\n        val onesCount23\
    \ = mutable.ListBuffer[Long]()\n        val onesCount24 = mutable.ListBuffer[Long]()\n\
    \        val onesCount25 = mutable.ListBuffer[Long]()\n        val onesCount26\
    \ = mutable.ListBuffer[Long]()\n        val onesCount27 = mutable.ListBuffer[Long]()\n\
    \        val onesCount28 = mutable.ListBuffer[Long]()\n        val onesCount29\
    \ = mutable.ListBuffer[Long]()\n        val onesCount30 = mutable.ListBuffer[Long]()\n\
    \        val onesCount31 = mutable.ListBuffer[Long]()\n        val onesCount32\
    \ = mutable.ListBuffer[Long]()\n", "        val ones = mutable.ArrayBuffer.empty[Long]\n\
    \        var count = 0\n        while(n > 0){\n            ones += n\n       \
    \     count += 1\n            n -= 1\n        }\n        ones.length", "     \
    \   val ones = mutable.ListBuffer(1)\n        val zeros = mutable.ListBuffer(0)\n\
    \        val count = mutable.ListBuffer[Long]()\n        val digits = n.toString.reverse.grouped(2).toList\n\
    \        val digit = digits.head\n        val digitCount = digits.count(_ == digit)\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCoun", "        val ones = mutable.ListBuffer(1)\n\
    \        val zeros = mutable.ListBuffer(0)\n        val count = mutable.ListBuffer[Long]()\n\
    \        var i = n\n        while(i >= 1) {\n            i -= 1\n            ones\
    \ += i\n            zeros += 0\n        }\n        while(ones.size > 0) {\n  \
    \          count += ones.size\n            ones = ones.tail\n        }\n     \
    \   while(zeros.size > 0) {\n            count += zeros.size\n            zeros\
    \ = zeros.tail\n        }\n        count.sum", "        val ones = mutable.ArrayBuffer(1)\n\
    \        val zeros = mutable.ArrayBuffer(0)\n        val count = mutable.ArrayBuffer(0)\n\
    \        var i = n\n        while(i > 0) {\n            val remainder = i % 10\n\
    \            i /= 10\n            if(remainder == 1) {\n                ones +=\
    \ remainder\n                count += 1\n            } else {\n              \
    \  zeros += remainder\n            }\n        }\n        ones.toList.sum", " \
    \       val counts = mutable.HashMap.empty[Long, Long]\n        val ones = mutable.ArrayBuffer.empty[Long]\n\
    \        val zeroes = mutable.ArrayBuffer.empty[Long]\n        for (i <- 1 to\
    \ n) {\n            if (i.toString.toLong == 1) {\n                ones += i\n\
    \            } else {\n                zeroes += i\n            }\n        }\n\
    \        ones.foreach(counts += _)\n        zeroes.foreach(counts += _)\n    \
    \    counts.values.sum", "        val ones = mutable.ListBuffer[Long]()\n    \
    \    val zeros = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val zerosCount = mutable.ListBuffer[Long]()\n        val onesCount2 =\
    \ mutable.ListBuffer[Long]()\n        val zerosCount2 = mutable.ListBuffer[Long]()\n\
    \        val onesCount3 = mutable.ListBuffer[Long]()\n        val zerosCount3\
    \ = mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount4 = mutable.ListBuffer[Long]()\n        val onesCount5\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount5 = mutable.ListBuffer[Long]()\n\
    \        val onesCount6 = mutable.ListBuffer[Long]()\n        val zerosCount6\
    \ = mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount7 = mutable.ListBuffer[Long]()\n        val onesCount8\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount8 = mutable.ListBuffer[Long]()\n\
    \        val onesCount9 = mutable.ListBuffer[Long]()\n        val zerosCount9\
    \ = mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount10 = mutable.ListBuffer[Long]()\n        val onesCount11\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount11 = mutable.ListBuffer[Long]()\n\
    \        val onesCount12 = mutable.ListBuffer[Long]()\n        val zerosCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount13 = mutable.ListBuffer[Long]()\n        val onesCount14\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount14 = mutable.ListBuffer[Long]()\n\
    \        val onesCount15 = mutable.ListBuffer[Long]()\n        val zerosCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount16 = mutable.ListBuffer[Long]()\n        val onesCount17\
    \ = mutable.ListBuffer[Long]()\n", "        val ones = mutable.ListBuffer[Long]()\n\
    \        var count = 0\n        for(i <- 1 to n){\n            if(i % 10 == 1){\n\
    \                ones += i\n                count += 1\n            }\n      \
    \  }\n        ones.length", "        var count = 0\n        var last = 1\n   \
    \     var current = 1\n        while(current <= n) {\n            current = current\
    \ * 10\n            if(current == last) count += 1\n            last = current\n\
    \        }\n        count", "        val ones = mutable.Set[Long]()\n        val\
    \ zeros = mutable.Set[Long]()\n        val counts = mutable.Map[Long, Long]()\n\
    \        for (i <- 1 to n) {\n            val digit = i / Math.pow(10, n.toInt)\n\
    \            if (digit == 1) {\n                ones += i\n            } else\
    \ {\n                zeros += i\n            }\n            counts(digit) += 1\n\
    \        }\n        ones.size + zeros.size + 1", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount3 = mutable.ListBuffer[Long]()\n\
    \        val onesCount4 = mutable.ListBuffer[Long]()\n        val onesCount5 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount6 = mutable.ListBuffer[Long]()\n\
    \        val onesCount7 = mutable.ListBuffer[Long]()\n        val onesCount8 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount9 = mutable.ListBuffer[Long]()\n\
    \        val onesCount10 = mutable.ListBuffer[Long]()\n        val onesCount11\
    \ = mutable.ListBuffer[Long]()\n        val onesCount12 = mutable.ListBuffer[Long]()\n\
    \        val onesCount13 = mutable.ListBuffer[Long]()\n        val onesCount14\
    \ = mutable.ListBuffer[Long]()\n        val onesCount15 = mutable.ListBuffer[Long]()\n\
    \        val onesCount16 = mutable.ListBuffer[Long]()\n        val onesCount17\
    \ = mutable.ListBuffer[Long]()\n        val onesCount18 = mutable.ListBuffer[Long]()\n\
    \        val onesCount19 = mutable.ListBuffer[Long]()\n        val onesCount20\
    \ = mutable.ListBuffer[Long]()\n        val onesCount21 = mutable.ListBuffer[Long]()\n\
    \        val onesCount22 = mutable.ListBuffer[Long]()\n        val onesCount23\
    \ = mutable.ListBuffer[Long]()\n        val onesCount24 = mutable.ListBuffer[Long]()\n\
    \        val onesCount25 = mutable.ListBuffer[Long]()\n        val onesCount26\
    \ = mutable.ListBuffer[Long]()\n        val onesCount27 = mutable.ListBuffer[Long]()\n\
    \        val onesCount28 = mutable.ListBuffer[Long]()\n        val onesCount29\
    \ = mutable.ListBuffer[Long]()\n        val onesCount30 = mutable.ListBuffer[Long]()\n\
    \        val onesCount31 = mutable.ListBuffer[Long]()\n        val onesCount32\
    \ = mutable.ListBuffer[Long]()\n", "        val ones = mutable.Set[Long]()\n \
    \       val zeros = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val zerosCount = mutable.Set[Long]()\n        val onesCount2 = mutable.Set[Long]()\n\
    \        val zerosCount2 = mutable.Set[Long]()\n        val onesCount3 = mutable.Set[Long]()\n\
    \        val zerosCount3 = mutable.Set[Long]()\n        val onesCount4 = mutable.Set[Long]()\n\
    \        val zerosCount4 = mutable.Set[Long]()\n        val onesCount5 = mutable.Set[Long]()\n\
    \        val zerosCount5 = mutable.Set[Long]()\n        val onesCount6 = mutable.Set[Long]()\n\
    \        val zerosCount6 = mutable.Set[Long]()\n        val onesCount7 = mutable.Set[Long]()\n\
    \        val zerosCount7 = mutable.Set[Long]()\n        val onesCount8 = mutable.Set[Long]()\n\
    \        val zerosCount8 = mutable.Set[Long]()\n        val onesCount9 = mutable.Set[Long]()\n\
    \        val zerosCount9 = mutable.Set[Long]()\n        val onesCount10 = mutable.Set[Long]()\n\
    \        val zerosCount10 = mutable.Set[Long]()\n        val onesCount11 = mutable.Set[Long]()\n\
    \        val zerosCount11 = mutable.Set[Long]()\n        val onesCount12 = mutable.Set[Long]()\n\
    \        val zerosCount12 = mutable.Set[Long]()\n        val onesCount13 = mutable.Set[Long]()\n\
    \        val zerosCount13 = mutable.Set[Long]()\n        val onesCount14 = mutable.Set[Long]()\n\
    \        val zerosCount14 = mutable.Set[Long]()\n        val onesCount15 = mutable.Set[Long]()\n\
    \        val zerosCount15 = mutable.Set[Long]()\n        val onesCount16 = mutable.Set[Long]()\n\
    \        val zerosCount16 = mutable.Set[Long]()\n        val onesCount17 = mutable.Set[Long]()\n\
    \        val zerosCount17 = mutable.Set[Long]()\n        val onesCount18 = mutable.Set[Long]()\n\
    \        val zerosCount18 = ", "        val ones = mutable.ListBuffer[Long]()\n\
    \        var count = 0\n        while(n > 0) {\n            ones += n\n      \
    \      count += 1\n            n -= 1\n        }\n        ones.length", "    \
    \    val ones = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n\
    \        val counts = mutable.HashMap[Long, Long]()\n        val starts = mutable.HashMap[Long,\
    \ Long]()\n        val ends = mutable.HashMap[Long, Long]()\n        val currentCount\
    \ = 1\n        val currentStart = 0\n        val currentEnd = 0\n        val currentZeros\
    \ = 0\n        val currentOnes = 0\n        val currentCounts = mutable.HashMap[Long,\
    \ Long]()\n        val currentStarts = mutable.HashMap[Long, Long]()\n       \
    \ val currentEnds = mutable.HashMap[Long, Long]()\n        val currentZeros =\
    \ mutable.HashMap[Long, Long]()\n        val currentOnes = mutable.HashMap[Long,\
    \ Long]()\n        val currentCounts = mutable.HashMap[Long, Long]()\n       \
    \ val currentStarts = mutable.HashMap[Long, Long]()\n        val currentEnds =\
    \ mutable.HashMap[Long, Long]()\n        val currentZeros = mutable.HashMap[Long,\
    \ Long]()\n        val currentOnes = mutable.HashMap[Long, Long]()\n        val\
    \ currentCounts = mutable.HashMap[Long, Long]()\n        val currentStarts = mutable.HashMap[Long,\
    \ Long]()\n        val currentEnds = mutable.HashMap[Long, Long]()\n        val\
    \ currentZeros = mutable.HashMap[Long, Long]()\n        val currentOnes = mutable.HashMap[Long,\
    \ Long]()\n        val currentCounts = mutable.HashMap[Long, Long]()\n       \
    \ val currentStarts = mutable.HashMap[Long, Long]()\n        val currentEnds =\
    \ mutable.HashMap[Long, Long]()\n        val currentZeros = mutable.HashMap[Long,\
    \ Long]()\n        val currentOnes = mutable.HashMap[Long, Long]()\n        val\
    \ currentCounts = mutable.HashMap[Long, Long]()\n        val currentStarts = mutable.HashMap[Long,\
    \ Long]()\n        val currentEnds = mutable.HashMap[Long, Long]()\n        val\
    \ currentZeros = mutable.HashMap[Long, Long]()\n        val currentOnes = mutable.HashMap[Long,\
    \ Long]()\n        val currentCounts = mutable.HashMap[Long, Long]()\n       \
    \ val currentStarts = mutable.HashMap[Long, Long]()\n        val currentEnds =\
    \ mutable.HashMap[Long, Long]()\n", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount3 = mutable.ListBuffer[Long]()\n\
    \        val onesCount4 = mutable.ListBuffer[Long]()\n        val onesCount5 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount6 = mutable.ListBuffer[Long]()\n\
    \        val onesCount7 = mutable.ListBuffer[Long]()\n        val onesCount8 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount9 = mutable.ListBuffer[Long]()\n\
    \        val onesCount10 = mutable.ListBuffer[Long]()\n        val onesCount11\
    \ = mutable.ListBuffer[Long]()\n        val onesCount12 = mutable.ListBuffer[Long]()\n\
    \        val onesCount13 = mutable.ListBuffer[Long]()\n        val onesCount14\
    \ = mutable.ListBuffer[Long]()\n        val onesCount15 = mutable.ListBuffer[Long]()\n\
    \        val onesCount16 = mutable.ListBuffer[Long]()\n        val onesCount17\
    \ = mutable.ListBuffer[Long]()\n        val onesCount18 = mutable.ListBuffer[Long]()\n\
    \        val onesCount19 = mutable.ListBuffer[Long]()\n        val onesCount20\
    \ = mutable.ListBuffer[Long]()\n        val onesCount21 = mutable.ListBuffer[Long]()\n\
    \        val onesCount22 = mutable.ListBuffer[Long]()\n        val onesCount23\
    \ = mutable.ListBuffer[Long]()\n        val onesCount24 = mutable.ListBuffer[Long]()\n\
    \        val onesCount25 = mutable.ListBuffer[Long]()\n        val onesCount26\
    \ = mutable.ListBuffer[Long]()\n        val onesCount27 = mutable.ListBuffer[Long]()\n\
    \        val onesCount28 = mutable.ListBuffer[Long]()\n        val onesCount29\
    \ = mutable.ListBuffer[Long]()\n        val onesCount30 = mutable.ListBuffer[Long]()\n\
    \        val onesCount31 = mutable.ListBuffer[Long]()\n        val onesCount32\
    \ = mutable.ListBuffer[Long]()\n", "        val ones = mutable.Set[Long]()\n \
    \       val zeros = mutable.Set[Long]()\n        val counts = mutable.Map[Long,\
    \ Long]()\n        for(i <- 1 to n) {\n            val digit = i / Math.pow(10,\
    \ n.toInt)\n            if(digit == 1) {\n                ones += i\n        \
    \    } else {\n                zeros += i\n            }\n            counts +=\
    \ digit -> 1\n        }\n        ones.size + zeros.size + counts.values.sum",
  "        val ones = mutable.ListBuffer[Long]()\n        var count = 0\n        while(n\
    \ > 0) {\n            ones += n\n            n /= 10\n            count += 1\n\
    \        }\n        ones.length", "        var count = 0\n        var last = 0\n\
    \        for(i <- 1 to n){\n            if(i % 10 == 1){\n                count\
    \ += 1\n                last = i\n            }\n        }\n        count += last\
    \ - n + 1\n        return count", "        var count = 0\n        var last = 1\n\
    \        while(n > 0) {\n            val next = (n % 10) + 1\n            n /=\
    \ 10\n            if(next == 1) {\n                count += 1\n            } else\
    \ {\n                if(last == 1) {\n                    count += 1\n       \
    \         }\n                last = next\n            }\n        }\n        count",
  "        val ones = mutable.ListBuffer(1)\n        val zeros = mutable.ListBuffer(0)\n\
    \        val counts = mutable.ListBuffer[Long]()\n        while(n > 0){\n    \
    \        val digit = n % 10\n            val digitCount = if (digit == 1) ones.size\
    \ else zeros.size\n            counts += digitCount\n            n /= 10\n   \
    \     }\n        counts.sum", "        var count = 0\n        for(i <- 1 to n){\n\
    \            if((i mod 10) == 1){\n                count += 1\n            }\n\
    \        }\n        count", "        val ones = mutable.Set[Long]()\n        var\
    \ count = 0\n        for(i <- 1 to n){\n            if(i%10 == 1){\n         \
    \       ones += i\n                count += 1\n            }\n        }\n    \
    \    count", "        val ones = mutable.ListBuffer.empty[Long]\n        val zeros\
    \ = mutable.ListBuffer.empty[Long]\n        val counts = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount = mutable.ListBuffer.empty[Long]\n        val zerosCount\
    \ = mutable.ListBuffer.empty[Long]\n        val countsCount = mutable.ListBuffer.empty[Long]\n\
    \        val onesCountCount = mutable.ListBuffer.empty[Long]\n        val zerosCountCount\
    \ = mutable.ListBuffer.empty[Long]\n        val countsCountCount = mutable.ListBuffer.empty[Long]\n\
    \        val onesCountCountCount = mutable.ListBuffer.empty[Long]\n        val\
    \ zerosCountCountCount = mutable.ListBuffer.empty[Long]\n        val countsCountCountCount\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCountCountCountCount = mutable.ListBuffer.empty[Long]\n\
    \        val zerosCountCountCountCount = mutable.ListBuffer.empty[Long]\n    \
    \    val countsCountCountCountCount = mutable.ListBuffer.empty[Long]\n       \
    \ val onesCountCountCountCountCount = mutable.ListBuffer.empty[Long]\n       \
    \ val zerosCountCountCountCountCount = mutable.ListBuffer.empty[Long]\n      \
    \  val countsCountCountCountCountCount = mutable.ListBuffer.empty[Long]\n    \
    \    val onesCountCountCountCountCountCount = mutable.ListBuffer.empty[Long]\n\
    \        val zerosCountCountCountCountCountCount = mutable.ListBuffer.empty[Long]\n\
    \        val countsCountCountCountCountCountCount = mutable.ListBuffer.empty[Long]\n\
    \        val onesCountCountCountCountCountCountCount = mutable.ListBuffer.empty[Long]\n\
    \        val zerosCountCountCountCountCountCountCount = mutable.ListBuffer.empty[Long]\n\
    \        val countsCountCountCountCountCountCountCount = mutable.ListBuffer.empty[Long]\n\
    \        val onesCountCountCountCountCountCountCountCount = mutable.ListBuffer.empty[Long]\n\
    \        val zerosCountCountCountCountCountCountCountCount = mutable.ListBuffer.empty[Long]\n\
    \        val countsCountCountCountCountCountCountCountCount = mutable.ListBuffer.empty[Long]\n\
    \        val onesCountCountCountCountCountCountCountCountCount = mutable.ListBuffer.empty[Long]\n\
    \        val zerosCountCountCountCountCountCountCountCountCount = mutable.ListBuffer.empty[Long]\n\
    \        val countsCountCountCountCountCountCountCountCount = mutable.ListBuffer.empty[",
  "        val counts = mutable.HashMap[Long, Long]()\n        val ones = mutable.Array[Long]()\n\
    \        val zeros = mutable.Array[Long]()\n        val onesCount = mutable.Array[Long]()\n\
    \        val zerosCount = mutable.Array[Long]()\n        val onesCounts = mutable.Array[Long]()\n\
    \        val zerosCounts = mutable.Array[Long]()\n        val onesCounts = mutable.Array[Long]()\n\
    \        val zerosCounts = mutable.Array[Long]()\n        val onesCounts = mutable.Array[Long]()\n\
    \        val zerosCounts = mutable.Array[Long]()\n        val onesCounts = mutable.Array[Long]()\n\
    \        val zerosCounts = mutable.Array[Long]()\n        val onesCounts = mutable.Array[Long]()\n\
    \        val zerosCounts = mutable.Array[Long]()\n        val onesCounts = mutable.Array[Long]()\n\
    \        val zerosCounts = mutable.Array[Long]()\n        val onesCounts = mutable.Array[Long]()\n\
    \        val zerosCounts = mutable.Array[Long]()\n        val onesCounts = mutable.Array[Long]()\n\
    \        val zerosCounts = mutable.Array[Long]()\n        val onesCounts = mutable.Array[Long]()\n\
    \        val zerosCounts = mutable.Array[Long]()\n        val onesCounts = mutable.Array[Long]()\n\
    \        val zerosCounts = mutable.Array[Long]()\n        val onesCounts = mutable.Array[Long]()\n\
    \        val zerosCounts = mutable.Array[Long]()\n        val onesCounts = mutable.Array[Long]()\n\
    \        val zerosCounts = mutable.Array[Long]()\n        val onesCounts = mutable.Array[Long]()\n\
    \        val zerosCounts = mutable.Array[Long]()\n        val onesCounts = mutable.Array[Long]()\n\
    \        val zerosCounts = mutable.Array[Long]()\n        val onesCounts = mutable.Array[Long]()\n\
    \        val zerosCounts = mutable.Array[Long]()\n        val onesCounts = mutable.Array[Long]()\n\
    \        val zerosCounts = mutable.Array[Long]()\n        val onesCounts = mutable.Array[Long]()\n\
    \        val zeros", "        val ones = mutable.Set[Long]()\n        val zeros\
    \ = mutable.Set[Long]()\n        val counts = mutable.Map[Long, Long]()\n    \
    \    val digits = n.toString.reverse.grouped(10).toList\n        val digit = digits(0)\n\
    \        val digitCount = digit.count\n        val digits = digit.drop(digitCount)\n\
    \        val digitCount = digit.count\n        val digits = digit.drop(digitCount)\n\
    \        val digitCount = digit.count\n        val digits = digit.drop(digitCount)\n\
    \        val digitCount = digit.count\n        val digits = digit.drop(digitCount)\n\
    \        val digitCount = digit.count\n        val digits = digit.drop(digitCount)\n\
    \        val digitCount = digit.count\n        val digits = digit.drop(digitCount)\n\
    \        val digitCount = digit.count\n        val digits = digit.drop(digitCount)\n\
    \        val digitCount = digit.count\n        val digits = digit.drop(digitCount)\n\
    \        val digitCount = digit.count\n        val digits = digit.drop(digitCount)\n\
    \        val digitCount = digit.count\n        val digits = digit.drop(digitCount)\n\
    \        val digitCount = digit.count\n        val digits = digit.drop(digitCount)\n\
    \        val digitCount = digit.count\n        val digits = digit.drop(digitCount)\n\
    \        val digitCount = digit.count\n        val digits = digit.drop(digitCount)\n\
    \        val digitCount = digit.count\n        val digits = digit.drop(digitCount)\n\
    \        val digitCount = digit.count\n        val digits = digit.drop(digitCount)\n\
    \        val digitCount = digit.count\n        val digits = digit.drop(digitCount)\n\
    \        val digitCount = digit.count\n        val digits = digit.drop(digitCount)\n\
    \        val digitCount = digit.count\n        val digits = digit.drop(digitCount)\n\
    \        val digitCount = digit.count\n        val digits = digit.drop(digitCount)\n\
    \        val digitCount = digit.count\n        val digits = digit.drop(digitCount)\n\
    \        val digitCount = digit.count\n        val digits = digit.drop(digitCount)\n\
    \        val digitCount = digit.count\n        val digits = digit.drop(digitCount)\n\
    \        val digitCount = digit.count\n        val digit", "        val ones =\
    \ mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n        val counts\
    \ = mutable.Map[Long, Long]()\n        val onesCount = mutable.Map[Long, Long]()\n\
    \        val zerosCount = mutable.Map[Long, Long]()\n        val onesCounts =\
    \ mutable.Map[Long, Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n\
    \        val onesCountZeros = mutable.Map[Long, Long]()\n        val zerosCountZeros\
    \ = mutable.Map[Long, Long]()\n        val onesCountOnes = mutable.Map[Long, Long]()\n\
    \        val zerosCountOnes = mutable.Map[Long, Long]()\n        val onesCountZeroOnes\
    \ = mutable.Map[Long, Long]()\n        val zerosCountZeroOnes = mutable.Map[Long,\
    \ Long]()\n        val onesCountOneOnes = mutable.Map[Long, Long]()\n        val\
    \ zerosCountOneOnes = mutable.Map[Long, Long]()\n        val onesCountZeroOneOnes\
    \ = mutable.Map[Long, Long]()\n        val zerosCountZeroOneOnes = mutable.Map[Long,\
    \ Long]()\n        val onesCountOneOneOnes = mutable.Map[Long, Long]()\n     \
    \   val zerosCountOneOneOnes = mutable.Map[Long, Long]()\n        val onesCountZeroOneOneOnes\
    \ = mutable.Map[Long, Long]()\n        val zerosCountZeroOneOneOnes = mutable.Map[Long,\
    \ Long]()\n        val onesCountOneOneOneOnes = mutable.Map[Long, Long]()\n  \
    \      val zerosCountOneOneOneOnes = mutable.Map[Long, Long]()\n        val onesCountZeroOneOneOneOnes\
    \ = mutable.Map[Long, Long]()\n        val zerosCountZeroOneOneOneOnes = mutable.Map[Long,\
    \ Long]()\n        val onesCountOneOneOneOneOnes = mutable.Map[Long, Long]()\n\
    \        val zerosCountOneOneOneOneOneOnes = mutable.Map[Long, Long]()\n     \
    \   val onesCountZeroOneOneOneOneOnes = mutable.Map[Long, Long]()\n        val\
    \ zerosCountZeroOneOneOneOneOnes = mutable.Map[Long, Long]()\n        val onesCountOneOneOneOneOneOnes\
    \ = mutable.Map[Long, Long]()\n        val zerosCountOneOne", "        val ones\
    \ = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n        val\
    \ counts = mutable.Map[Long, Long]()\n        val starts = mutable.Set[Long]()\n\
    \        val ends = mutable.Set[Long]()\n        val countsMap = mutable.Map[Long,\
    \ Long]()\n        val startsMap = mutable.Map[Long, Long]()\n        val endsMap\
    \ = mutable.Map[Long, Long]()\n        val countsMap2 = mutable.Map[Long, Long]()\n\
    \        val startsMap2 = mutable.Map[Long, Long]()\n        val endsMap2 = mutable.Map[Long,\
    \ Long]()\n        val countsMap3 = mutable.Map[Long, Long]()\n        val startsMap3\
    \ = mutable.Map[Long, Long]()\n        val endsMap3 = mutable.Map[Long, Long]()\n\
    \        val countsMap4 = mutable.Map[Long, Long]()\n        val startsMap4 =\
    \ mutable.Map[Long, Long]()\n        val endsMap4 = mutable.Map[Long, Long]()\n\
    \        val countsMap5 = mutable.Map[Long, Long]()\n        val startsMap5 =\
    \ mutable.Map[Long, Long]()\n        val endsMap5 = mutable.Map[Long, Long]()\n\
    \        val countsMap6 = mutable.Map[Long, Long]()\n        val startsMap6 =\
    \ mutable.Map[Long, Long]()\n        val endsMap6 = mutable.Map[Long, Long]()\n\
    \        val countsMap7 = mutable.Map[Long, Long]()\n        val startsMap7 =\
    \ mutable.Map[Long, Long]()\n        val endsMap7 = mutable.Map[Long, Long]()\n\
    \        val countsMap8 = mutable.Map[Long, Long]()\n        val startsMap8 =\
    \ mutable.Map[Long, Long]()\n        val endsMap8 = mutable.Map[Long, Long]()\n\
    \        val countsMap9 = mutable.Map[Long, Long]()\n        val startsMap9 =\
    \ mutable.Map[Long, Long]()\n        val endsMap9 = mutable.Map[Long, Long]()\n\
    \        val countsMap10 = mutable.Map[Long, Long]()\n        val startsMap10\
    \ = mutable.Map[Long, Long]()\n        val endsMap10 = mutable.Map[Long, Long]()\n\
    \        val counts", "        val ones = mutable.ArrayBuffer(1)\n        val\
    \ zeros = mutable.ArrayBuffer(0)\n        val counts = mutable.ArrayBuffer(0)\n\
    \        val onesCount = mutable.ArrayBuffer(0)\n        val zerosCount = mutable.ArrayBuffer(0)\n\
    \        val onesCounts = mutable.ArrayBuffer(0)\n        val zerosCounts = mutable.ArrayBuffer(0)\n\
    \        val onesCountZeros = mutable.ArrayBuffer(0)\n        val zerosCountZeros\
    \ = mutable.ArrayBuffer(0)\n        val onesCountOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosCountOnes = mutable.ArrayBuffer(0)\n        val onesCountZeroOnes\
    \ = mutable.ArrayBuffer(0)\n        val zerosCountZeroOnes = mutable.ArrayBuffer(0)\n\
    \        val onesCountOneOnes = mutable.ArrayBuffer(0)\n        val zerosCountOneOnes\
    \ = mutable.ArrayBuffer(0)\n        val onesCountZeroZeros = mutable.ArrayBuffer(0)\n\
    \        val zerosCountZeroZeros = mutable.ArrayBuffer(0)\n        val onesCountOneZeros\
    \ = mutable.ArrayBuffer(0)\n        val zerosCountOneZeros = mutable.ArrayBuffer(0)\n\
    \        val onesCountOneOneZeros = mutable.ArrayBuffer(0)\n        val zerosCountOneOneZeros\
    \ = mutable.ArrayBuffer(0)\n        val onesCountZeroOneOneZeros = mutable.ArrayBuffer(0)\n\
    \        val zerosCountZeroOneOneZeros = mutable.ArrayBuffer(0)\n        val onesCountOneZeroZeros\
    \ = mutable.ArrayBuffer(0)\n        val zerosCountOneZeroZeros = mutable.ArrayBuffer(0)\n\
    \        val onesCountOneOneZeroZeros = mutable.ArrayBuffer(0)\n        val zerosCountOneOneZeroZeros\
    \ = mutable.ArrayBuffer(0)\n        val onesCountZeroZeroOneOneZeros = mutable.ArrayBuffer(0)\n\
    \        val zerosCountZeroZeroOneOneZeros = mutable.ArrayBuffer(0)\n        val\
    \ onesCountOneZeroOneZeros = mutable.ArrayBuffer(0)\n        val zerosCountOneZeroOneZeros\
    \ = mutable.ArrayBuffer(0)\n        val onesCountOneOneZeroOneZeros = mutable.ArrayBuffer(0)\n\
    \        val zerosCountOneOneZeroOneZeros = mutable.ArrayBuffer(0)\n        val\
    \ onesCountZeroZeroOneOneOneZeros = mutable.ArrayBuffer(0)\n        val zerosCountZeroZeroOneOneOneZeros\
    \ = mutable.ArrayBuffer(0)\n        val onesCountOneZeroOneOneZeros = mutable.ArrayBuffer(0)\n\
    \        val zerosCountOneZeroOneOneZeros = mut", "        val counts = mutable.HashMap.empty[Long,\
    \ Int]\n        val ones = mutable.ArrayBuffer.empty[Long]\n        for (i <-\
    \ 1 to n) {\n            val x = i.toLong\n            if (x == 1) {\n       \
    \         ones += x\n            } else {\n                val count = counts.getOrElse(x,\
    \ 0)\n                counts += x -> count + 1\n            }\n        }\n   \
    \     ones.toList.size", "        val ones = mutable.ListBuffer[Long]()\n    \
    \    val zeros = mutable.ListBuffer[Long]()\n        val counts = mutable.ListBuffer[Long]()\n\
    \        val starts = mutable.ListBuffer[Long]()\n        val ends = mutable.ListBuffer[Long]()\n\
    \        val digits = n.toString.reverse.grouped(2).map(_.toInt).toList\n    \
    \    val digit = digits(0)\n        val digits = digits(1)\n        val digit\
    \ = digits(0)\n        val digits = digits(1)\n        val digit = digits(0)\n\
    \        val digits = digits(1)\n        val digit = digits(0)\n        val digits\
    \ = digits(1)\n        val digit = digits(0)\n        val digits = digits(1)\n\
    \        val digit = digits(0)\n        val digits = digits(1)\n        val digit\
    \ = digits(0)\n        val digits = digits(1)\n        val digit = digits(0)\n\
    \        val digits = digits(1)\n        val digit = digits(0)\n        val digits\
    \ = digits(1)\n        val digit = digits(0)\n        val digits = digits(1)\n\
    \        val digit = digits(0)\n        val digits = digits(1)\n        val digit\
    \ = digits(0)\n        val digits = digits(1)\n        val digit = digits(0)\n\
    \        val digits = digits(1)\n        val digit = digits(0)\n        val digits\
    \ = digits(1)\n        val digit = digits(0)\n        val digits = digits(1)\n\
    \        val digit = digits(0)\n        val digits = digits(1)\n        val digit\
    \ = digits(0)\n        val digits = digits(1)\n        val digit = digits(0)\n\
    \        val digits = digits(1)\n        val digit = digits(0)\n        val digits\
    \ = digits(1)\n        val digit = digits(0)\n        val digits = digits(1)\n\
    \        val digit = digits(0)\n        val digits = digits(1)\n        val digit\
    \ = digits(0)\n        val digits = digits(1)\n        val digit = digits(0)\n\
    \        val digits = digits(1)\n        val digit = digits(0)\n        val digits\
    \ = digits(1)\n        val digit = digits(0)\n        val digits = digits(1)\n\
    \        val digit = digits(0)\n        val digits = digits(1)\n        val digit\
    \ = digits(0)\n        val digit", "        val counts = mutable.HashMap.empty[Long,\
    \ Long]\n        val ones = mutable.ArrayBuffer.empty[Long]\n        val zeroes\
    \ = mutable.ArrayBuffer.empty[Long]\n        for (i <- 0 until n) {\n        \
    \    if (i % 10 == 1) {\n                ones += i\n            } else {\n   \
    \             zeroes += i\n            }\n        }\n        for (i <- ones.reverse)\
    \ {\n            val c = counts.getOrElse(i, 0) + 1\n            counts.put(i,\
    \ c)\n        }\n        for (i <- zeroes.reverse) {\n            val c = counts.getOrElse(i,\
    \ 0) + 1\n            counts.put(i, c)\n        }\n        counts.values.sum",
  "        val ones = mutable.ListBuffer[Long]()\n        val zeros = mutable.ListBuffer[Long]()\n\
    \        val counts = mutable.ListBuffer[Long]()\n        val digits = n.toString.reverse.grouped(10).toList\n\
    \        val digit = digits(0)\n        val digitCount = digit.count(_ == '1')\n\
    \        val digitZeroCount = digit.count(_ == '0')\n        val digitOneCount\
    \ = digit.count(_ == '1')\n        val digitZeroOneCount = digit.count(_ == '0'\
    \ && _ == '1')\n        val digitOneZeroCount = digit.count(_ == '1' && _ == '0')\n\
    \        val digitZeroZeroCount = digit.count(_ == '0' && _ == '0')\n        val\
    \ digitOneOneCount = digit.count(_ == '1' && _ == '1')\n        val digitZeroOneOneCount\
    \ = digit.count(_ == '0' && _ == '1' && _ == '1')\n        val digitOneZeroOneCount\
    \ = digit.count(_ == '1' && _ == '0' && _ == '1')\n        val digitZeroZeroOneCount\
    \ = digit.count(_ == '0' && _ == '0' && _ == '1')\n        val digitOneOneOneCount\
    \ = digit.count(_ == '1' && _ == '1' && _ == '0')\n        val digitZeroOneZeroCount\
    \ = digit.count(_ == '0' && _ == '1' && _ == '0')\n        val digitOneZeroZeroCount\
    \ = digit.count(_ == '1' && _ == '0' && _ == '0')\n        val digitZeroZeroZeroCount\
    \ = digit.count(_ == '0' && _ == '0' && _ == '0')\n        val digitOneOneOneCount\
    \ = digit.count(_ == '1' && _ == '1' && _ == '1')\n        val digitZeroOneOneCount\
    \ = digit.count(_ == '0' && _ == '1' && _ == '1')\n        val digitOneZeroOneCount\
    \ = digit.count(_ == '1' && _ == '0' && _ == '1')\n        val digitZeroZeroOneCount\
    \ = digit.count(_ == '0' && _ == '0' && _ == '1')\n        val digitOneOneZeroCount\
    \ = digit.count(_ == '1' && _ == '1' && _ == '0')\n        val digitZeroOneZeroCount\
    \ = digit.count(_ == '0' && _ == '1' && _ == '0')\n        val digitOneZeroZeroCount\
    \ = digit.count(_ == '1' && _ == '0' && _ == '0')\n        val digitZeroZeroZeroCount\
    \ = digit.count(_ == '0' && _ == '0' && _ == '0')\n        val digitOneOneOneCount\
    \ = digit.count(_ == '1' && _ == '", "        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val counts = mutable.Map[Long,\
    \ Long]()\n        val onesCount = mutable.Set[Long]()\n        val zerosCount\
    \ = mutable.Set[Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n\
    \        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCounts =\
    \ mutable.Map[Long, Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n\
    \        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts =\
    \ mutable.Map[Long, Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n\
    \        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCounts =\
    \ mutable.Map[Long, Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n\
    \        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts =\
    \ mutable.Map[Long, Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n\
    \        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCounts =\
    \ mutable.Map[Long, Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n\
    \        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts =\
    \ mutable.Map[Long, Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n\
    \        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCounts =\
    \ mutable.Map[Long, Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n\
    \        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts =\
    \ mutable.Map[Long, Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n\
    \        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCounts =\
    \ mutable.Map[Long, Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n\
    \        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts =\
    \ mutable.Map[Long, Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n",
  "        val ones = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n\
    \        val counts = mutable.Map[Long, Long]()\n        val onesCount = mutable.Map[Long,\
    \ Long]()\n        val zerosCount = mutable.Map[Long, Long]()\n        val onesZeros\
    \ = mutable.Map[Long, Long]()\n        val zerosOnes = mutable.Map[Long, Long]()\n\
    \        val onesOnes = mutable.Map[Long, Long]()\n        val zerosZeros = mutable.Map[Long,\
    \ Long]()\n        val onesZeroOnes = mutable.Map[Long, Long]()\n        val zerosOneOnes\
    \ = mutable.Map[Long, Long]()\n        val onesOneOnes = mutable.Map[Long, Long]()\n\
    \        val zerosZeroOnes = mutable.Map[Long, Long]()\n        val onesZeroZeros\
    \ = mutable.Map[Long, Long]()\n        val onesOneZeros = mutable.Map[Long, Long]()\n\
    \        val zerosOneZeros = mutable.Map[Long, Long]()\n        val onesOneZeroOnes\
    \ = mutable.Map[Long, Long]()\n        val zerosOneOneZeros = mutable.Map[Long,\
    \ Long]()\n        val onesOneOneZeros = mutable.Map[Long, Long]()\n        val\
    \ zerosOneZeroOnes = mutable.Map[Long, Long]()\n        val onesOneOneZeros =\
    \ mutable.Map[Long, Long]()\n        val zerosOneOneOneZeros = mutable.Map[Long,\
    \ Long]()\n        val onesOneOneOneZeros = mutable.Map[Long, Long]()\n      \
    \  val zerosOneZeroZeroOnes = mutable.Map[Long, Long]()\n        val onesOneZeroZeroOnes\
    \ = mutable.Map[Long, Long]()\n        val zerosOneOneZeroOnes = mutable.Map[Long,\
    \ Long]()\n        val onesOneOneZeroOnes = mutable.Map[Long, Long]()\n      \
    \  val zerosOneZeroOneOneZeros = mutable.Map[Long, Long]()\n        val onesOneOneOneZeroOnes\
    \ = mutable.Map[Long, Long]()\n        val zerosOneOneZeroOneOneZeros = mutable.Map[Long,\
    \ Long]()\n        val onesOneOneOneZeroOneOnes = mutable.Map[Long, Long]()\n\
    \        val zerosOneZeroZeroOneOneZeros = mutable.Map[Long, Long]", "       \
    \ val ones = mutable.ListBuffer.empty[Long]\n        val zeros = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount = mutable.ListBuffer.empty[Long]\n        val zerosCount\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCount2 = mutable.ListBuffer.empty[Long]\n\
    \        val zerosCount2 = mutable.ListBuffer.empty[Long]\n        val onesCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val zerosCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount4 = mutable.ListBuffer.empty[Long]\n        val zerosCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val zerosCount5 = mutable.ListBuffer.empty[Long]\n        val onesCount6\
    \ = mutable.ListBuffer.empty[Long]\n        val zerosCount6 = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount7 = mutable.ListBuffer.empty[Long]\n        val zerosCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCount8 = mutable.ListBuffer.empty[Long]\n\
    \        val zerosCount8 = mutable.ListBuffer.empty[Long]\n        val onesCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val zerosCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount10 = mutable.ListBuffer.empty[Long]\n        val zerosCount10\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val zerosCount11 = mutable.ListBuffer.empty[Long]\n        val onesCount12\
    \ = mutable.ListBuffer.empty[Long]\n        val zerosCount12 = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount13 = mutable.ListBuffer.empty[Long]\n        val zerosCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCount14 = mutable.ListBuffer.empty[Long]\n\
    \        val zerosCount14 = mutable.ListBuffer.empty[Long]\n        val onesCount15\
    \ = mutable.ListBuffer.empty[Long]\n        val zerosCount15 = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount16 = mutable.ListBuffer.empty[Long]\n        val zerosCount16\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCount17 = mutable.ListBuffer.empty[Long]\n",
  "        val ones = mutable.ListBuffer[Long]()\n        val zeros = mutable.ListBuffer[Long]()\n\
    \        val onesAndZeros = mutable.ListBuffer[Long]()\n        val onesAndOnes\
    \ = mutable.ListBuffer[Long]()\n        val onesAndZerosAndOnes = mutable.ListBuffer[Long]()\n\
    \        val onesAndOnesAndZeros = mutable.ListBuffer[Long]()\n        val onesAndOnesAndOnes\
    \ = mutable.ListBuffer[Long]()\n        val onesAndZeroAndOnes = mutable.ListBuffer[Long]()\n\
    \        val onesAndOneAndZeros = mutable.ListBuffer[Long]()\n        val onesAndOneAndOnes\
    \ = mutable.ListBuffer[Long]()\n        val onesAndZeroAndOnesAndOnes = mutable.ListBuffer[Long]()\n\
    \        val onesAndOneAndZeroAndOnes = mutable.ListBuffer[Long]()\n        val\
    \ onesAndOneAndOneAndZeros = mutable.ListBuffer[Long]()\n        val onesAndOneAndOneAndOnes\
    \ = mutable.ListBuffer[Long]()\n        val onesAndZeroAndOnesAndOnesAndOnes =\
    \ mutable.ListBuffer[Long]()\n        val onesAndOneAndZeroAndOnesAndOnes = mutable.ListBuffer[Long]()\n\
    \        val onesAndOneAndOneAndZeroAndOnes = mutable.ListBuffer[Long]()\n   \
    \     val onesAndOneAndOneAndOneAndZeros = mutable.ListBuffer[Long]()\n      \
    \  val onesAndOneAndOneAndOneAndOnes = mutable.ListBuffer[Long]()\n        val\
    \ onesAndZeroAndOnesAndOnesAndOnesAndOnes = mutable.ListBuffer[Long]()\n     \
    \   val onesAndOneAndZeroAndOnesAndOnesAndOnes = mutable.ListBuffer[Long]()\n\
    \        val onesAndOneAndOneAndZeroAndOnesAndOnes = mutable.ListBuffer[Long]()\n\
    \        val onesAndOneAndOneAndOneAndZeroAndOnes = mutable.ListBuffer[Long]()\n\
    \        val onesAndOneAndOneAndOneAndOneAndZeros = mutable.ListBuffer[Long]()\n\
    \        val onesAndOneAndOneAndOneAndOneAndOnes = mutable.ListBuffer[Long]()\n\
    \        val onesAndZeroAndOnesAndOnesAndOnesAndOnesAndOnes = mutable.ListBuffer[Long]()\n\
    \        val onesAndOneAndZeroAndOnesAnd", "        var count = 0\n        var\
    \ last = 0\n        var lastStart = 0\n        var lastEnd = 0\n        for(i\
    \ <- 0 until n) {\n            val current = math.abs(i).toInt\n            if(current\
    \ == 1) {\n                count += 1\n                lastStart = i\n       \
    \         lastEnd = i\n            } else {\n                if(current == lastStart\
    \ + 1) {\n                    count += 1\n                    lastEnd = i\n  \
    \              } else {\n                    count = 0\n                    lastStart\
    \ = 0\n                    lastEnd = 0\n                }\n            }\n   \
    \     }\n        count", "        var count = 0\n        var last = 1\n      \
    \  var current = 1\n        var next = 1\n        while(current <= n) {\n    \
    \        next = current * 10\n            while(next <= n) {\n               \
    \ last *= 10\n                last += next\n                count += 1\n     \
    \           next += 1\n            }\n            current = next + 1\n       \
    \ }\n        count", "        val ones = mutable.ListBuffer[Long]()\n        val\
    \ onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 = mutable.ListBuffer[Long]()\n\
    \        val onesCount3 = mutable.ListBuffer[Long]()\n        val onesCount4 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount5 = mutable.ListBuffer[Long]()\n\
    \        val onesCount6 = mutable.ListBuffer[Long]()\n        val onesCount7 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount8 = mutable.ListBuffer[Long]()\n\
    \        val onesCount9 = mutable.ListBuffer[Long]()\n        val onesCount10\
    \ = mutable.ListBuffer[Long]()\n        val onesCount11 = mutable.ListBuffer[Long]()\n\
    \        val onesCount12 = mutable.ListBuffer[Long]()\n        val onesCount13\
    \ = mutable.ListBuffer[Long]()\n        val onesCount14 = mutable.ListBuffer[Long]()\n\
    \        val onesCount15 = mutable.ListBuffer[Long]()\n        val onesCount16\
    \ = mutable.ListBuffer[Long]()\n        val onesCount17 = mutable.ListBuffer[Long]()\n\
    \        val onesCount18 = mutable.ListBuffer[Long]()\n        val onesCount19\
    \ = mutable.ListBuffer[Long]()\n        val onesCount20 = mutable.ListBuffer[Long]()\n\
    \        val onesCount21 = mutable.ListBuffer[Long]()\n        val onesCount22\
    \ = mutable.ListBuffer[Long]()\n        val onesCount23 = mutable.ListBuffer[Long]()\n\
    \        val onesCount24 = mutable.ListBuffer[Long]()\n        val onesCount25\
    \ = mutable.ListBuffer[Long]()\n        val onesCount26 = mutable.ListBuffer[Long]()\n\
    \        val onesCount27 = mutable.ListBuffer[Long]()\n        val onesCount28\
    \ = mutable.ListBuffer[Long]()\n        val onesCount29 = mutable.ListBuffer[Long]()\n\
    \        val onesCount30 = mutable.ListBuffer[Long]()\n        val onesCount31\
    \ = mutable.ListBuffer[Long]()\n        val onesCount32 = mutable.ListBuffer[Long]()\n",
  "        var count = 0\n        for(i <- 1 to n){\n            if((i%10)==1){\n\
    \                count += 1\n            }\n        }\n        return count",
  "        val ones = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n\
    \        var count = 0\n        while(n > 0) {\n            val digit = n % 10\n\
    \            if(digit == 1) {\n                ones += digit\n            }\n\
    \            else {\n                zeros += digit\n            }\n         \
    \   n /= 10\n        }\n        count += ones.size - zeros.size\n        count",
  "        var count = 0\n        var last = 1\n        var current = 1\n        while(n\
    \ > 0) {\n            current = last + current\n            count = count + 1\n\
    \            last = current\n            n = n - 1\n        }\n        return\
    \ count", "        val ones = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n\
    \        val counts = mutable.ArrayBuffer.empty[Long]\n        var count = 0\n\
    \        var i = 0\n        while (i < n) {\n            val x = ones(i)\n   \
    \         val y = zeros(i)\n            if (x == 1 && y == 0) {\n            \
    \    count += 1\n            }\n            i += 1\n        }\n        counts(0)\
    \ = count\n        count", "        val ones = mutable.Set[Long]()\n        val\
    \ zeros = mutable.Set[Long]()\n        val counts = mutable.Map[Long, Long]()\n\
    \        val onesCount = mutable.Map[Long, Long]()\n        val zerosCount = mutable.Map[Long,\
    \ Long]()\n        val onesCount2 = mutable.Map[Long, Long]()\n        val zerosCount2\
    \ = mutable.Map[Long, Long]()\n        val onesCount3 = mutable.Map[Long, Long]()\n\
    \        val zerosCount3 = mutable.Map[Long, Long]()\n        val onesCount4 =\
    \ mutable.Map[Long, Long]()\n        val zerosCount4 = mutable.Map[Long, Long]()\n\
    \        val onesCount5 = mutable.Map[Long, Long]()\n        val zerosCount5 =\
    \ mutable.Map[Long, Long]()\n        val onesCount6 = mutable.Map[Long, Long]()\n\
    \        val zerosCount6 = mutable.Map[Long, Long]()\n        val onesCount7 =\
    \ mutable.Map[Long, Long]()\n        val zerosCount7 = mutable.Map[Long, Long]()\n\
    \        val onesCount8 = mutable.Map[Long, Long]()\n        val zerosCount8 =\
    \ mutable.Map[Long, Long]()\n        val onesCount9 = mutable.Map[Long, Long]()\n\
    \        val zerosCount9 = mutable.Map[Long, Long]()\n        val onesCount10\
    \ = mutable.Map[Long, Long]()\n        val zerosCount10 = mutable.Map[Long, Long]()\n\
    \        val onesCount11 = mutable.Map[Long, Long]()\n        val zerosCount11\
    \ = mutable.Map[Long, Long]()\n        val onesCount12 = mutable.Map[Long, Long]()\n\
    \        val zerosCount12 = mutable.Map[Long, Long]()\n        val onesCount13\
    \ = mutable.Map[Long, Long]()\n        val zerosCount13 = mutable.Map[Long, Long]()\n\
    \        val onesCount14 = mutable.Map[Long, Long]()\n        val zerosCount14\
    \ = mutable.Map[Long, Long]()\n        val onesCount15 = mutable.Map[Long, Long]()\n\
    \        val zerosCount15 = mutable.Map[Long, Long]()\n        val onesCount16\
    \ = mutable.Map[Long, Long]()\n        val zerosCount16 = mutable.Map[Long, Long]()\n\
    \        val onesCount", "        val ones = mutable.Set[Long]()\n        val\
    \ onesCount = mutable.Set[Long]()\n        val onesCount2 = mutable.Set[Long]()\n\
    \        val onesCount3 = mutable.Set[Long]()\n        val onesCount4 = mutable.Set[Long]()\n\
    \        val onesCount5 = mutable.Set[Long]()\n        val onesCount6 = mutable.Set[Long]()\n\
    \        val onesCount7 = mutable.Set[Long]()\n        val onesCount8 = mutable.Set[Long]()\n\
    \        val onesCount9 = mutable.Set[Long]()\n        val onesCount10 = mutable.Set[Long]()\n\
    \        val onesCount11 = mutable.Set[Long]()\n        val onesCount12 = mutable.Set[Long]()\n\
    \        val onesCount13 = mutable.Set[Long]()\n        val onesCount14 = mutable.Set[Long]()\n\
    \        val onesCount15 = mutable.Set[Long]()\n        val onesCount16 = mutable.Set[Long]()\n\
    \        val onesCount17 = mutable.Set[Long]()\n        val onesCount18 = mutable.Set[Long]()\n\
    \        val onesCount19 = mutable.Set[Long]()\n        val onesCount20 = mutable.Set[Long]()\n\
    \        val onesCount21 = mutable.Set[Long]()\n        val onesCount22 = mutable.Set[Long]()\n\
    \        val onesCount23 = mutable.Set[Long]()\n        val onesCount24 = mutable.Set[Long]()\n\
    \        val onesCount25 = mutable.Set[Long]()\n        val onesCount26 = mutable.Set[Long]()\n\
    \        val onesCount27 = mutable.Set[Long]()\n        val onesCount28 = mutable.Set[Long]()\n\
    \        val onesCount29 = mutable.Set[Long]()\n        val onesCount30 = mutable.Set[Long]()\n\
    \        val onesCount31 = mutable.Set[Long]()\n        val onesCount32 = mutable.Set[Long]()\n\
    \        val onesCount33 = mutable.Set[Long]()\n        val onesCount34 = mutable.Set[Long]()\n\
    \        val one", "        val ones = mutable.Set[Long]()\n        val zeros\
    \ = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n       \
    \ val zerosCount = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val zerosCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val zerosCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val zerosCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val zerosCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val zerosCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val zerosCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val zerosCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val zerosCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val zerosCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val zerosCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val zerosCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val zerosCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val zerosCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val zerosCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val zerosCounts_ = mutable.Set[Long]()\n        ", "        val ones\
    \ = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount2 = mutable.ListBuffer[Long]()\n        val onesCount3 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val onesCount5 = mutable.ListBuffer[Long]()\n        val onesCount6 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val onesCount8 = mutable.ListBuffer[Long]()\n        val onesCount9 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val onesCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val onesCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val onesCount17 = mutable.ListBuffer[Long]()\n        val onesCount18\
    \ = mutable.ListBuffer[Long]()\n        val onesCount19 = mutable.ListBuffer[Long]()\n\
    \        val onesCount20 = mutable.ListBuffer[Long]()\n        val onesCount21\
    \ = mutable.ListBuffer[Long]()\n        val onesCount22 = mutable.ListBuffer[Long]()\n\
    \        val onesCount23 = mutable.ListBuffer[Long]()\n        val onesCount24\
    \ = mutable.ListBuffer[Long]()\n        val onesCount25 = mutable.ListBuffer[Long]()\n\
    \        val onesCount26 = mutable.ListBuffer[Long]()\n        val onesCount27\
    \ = mutable.ListBuffer[Long]()\n        val onesCount28 = mutable.ListBuffer[Long]()\n\
    \        val onesCount29 = mutable.ListBuffer[Long]()\n        val onesCount30\
    \ = mutable.ListBuffer[Long]()\n        val onesCount31 = mutable.ListBuffer[Long]()\n\
    \        val onesCount32 = mutable.ListBuffer[Long]()\n", "        val counts\
    \ = mutable.HashMap[Long, Long]()\n        val ones = mutable.ArrayBuffer(1)\n\
    \        val zeros = mutable.ArrayBuffer(0)\n        val onesCount = ones.takeWhile(_\
    \ < n).length\n        val zerosCount = zeros.takeWhile(_ < n).length\n      \
    \  val onesZeros = ones.takeWhile(_ < n).zip(zeros.takeWhile(_ < n)).filter(_._1\
    \ == 1).length\n        val zerosOnes = zeros.takeWhile(_ < n).zip(ones.takeWhile(_\
    \ < n)).filter(_._1 == 0).length\n        val onesOnes = ones.takeWhile(_ < n).zip(ones.takeWhile(_\
    \ < n)).filter(_._1 == 1).length\n        val onesZeroOnes = ones.takeWhile(_\
    \ < n).zip(zeros.takeWhile(_ < n)).filter(_._1 == 0).zip(ones.takeWhile(_ < n)).filter(_._1\
    \ == 1).length\n        val onesOneZeroOnes = ones.takeWhile(_ < n).zip(ones.takeWhile(_\
    \ < n)).filter(_._1 == 1).zip(zeros.takeWhile(_ < n)).filter(_._1 == 0).length\n\
    \        val onesZeroZeroOnes = ones.takeWhile(_ < n).zip(zeros.takeWhile(_ <\
    \ n)).filter(_._1 == 0).zip(zeros.takeWhile(_ < n)).filter(_._1 == 1).length\n\
    \        val onesOneOneZeroOnes = ones.takeWhile(_ < n).zip(ones.takeWhile(_ <\
    \ n)).filter(_._1 == 1).zip(ones.takeWhile(_ < n)).filter(_._1 == 0).zip(zeros.takeWhile(_\
    \ < n)).filter(_._1 == 1).length\n        val onesZeroOneZeroOnes = ones.takeWhile(_\
    \ < n).zip(zeros.takeWhile(_ < n)).filter(_._1 == 0).zip(ones.takeWhile(_ < n)).filter(_._1\
    \ == 1).zip(zeros.takeWhile(_ < n)).filter(_._1 == 0).length\n        val onesOneZeroZeroOnes\
    \ = ones.takeWhile(_ < n).zip(ones.takeWhile(_ < n)).filter(_._1 == 1).zip(ones.takeWhile(_\
    \ < n)).filter(_._1 == 0).zip(zeros.takeWhile(_ < n)).filter(_._1 == 0).zip(zeros.takeWhile(_\
    \ < n)).filter(_._1 == 1).length\n        val onesZeroZeroZeroOnes = ones.takeWhile(_\
    \ < n).zip(zeros.takeWhile(_ < n)).filter(_._1 == 0).zip(zeros.takeWhile(_ < n)).filter(_._1\
    \ == 0).", "        val ones = mutable.ListBuffer[Long]()\n        val zeros =\
    \ mutable.ListBuffer[Long]()\n        val counts = mutable.ListBuffer[Long]()\n\
    \        val digits = n.toString.reverse.grouped(2).map(_.length).toList\n   \
    \     val digit = digits(0)\n        val digit2 = digits(1)\n        val digit3\
    \ = digits(2)\n        val digit4 = digits(3)\n        val digit5 = digits(4)\n\
    \        val digit6 = digits(5)\n        val digit7 = digits(6)\n        val digit8\
    \ = digits(7)\n        val digit9 = digits(8)\n        val digit10 = digits(9)\n\
    \        val digit11 = digits(10)\n        val digit12 = digits(11)\n        val\
    \ digit13 = digits(12)\n        val digit14 = digits(13)\n        val digit15\
    \ = digits(14)\n        val digit16 = digits(15)\n        val digit17 = digits(16)\n\
    \        val digit18 = digits(17)\n        val digit19 = digits(18)\n        val\
    \ digit20 = digits(19)\n        val digit21 = digits(20)\n        val digit22\
    \ = digits(21)\n        val digit23 = digits(22)\n        val digit24 = digits(23)\n\
    \        val digit25 = digits(24)\n        val digit26 = digits(25)\n        val\
    \ digit27 = digits(26)\n        val digit28 = digits(27)\n        val digit29\
    \ = digits(28)\n        val digit30 = digits(29)\n        val digit31 = digits(30)\n\
    \        val digit32 = digits(31)\n        val digit33 = digits(32)\n        val\
    \ digit34 = digits(33)\n        val digit35 = digits(34)\n        val digit36\
    \ = digits(35)\n        val digit37 = digits(36)\n        val digit38 = digits(37)\n\
    \        val digit39 = digits(38)\n        val digit40 = digits(39)\n        val\
    \ digit41 = digits(40)\n        val digit42 = digits(41)\n        val digit43\
    \ = digits(42)\n        val digit44 = digits(43)\n        val digit45 = digits(44)\n\
    \        val digit46 = digits(45)\n        val digit47 = digits(46)\n        val\
    \ digit48 = digits(47)\n        val digit49 = digits(48)\n        val digit50",
  "        var count = 0\n        var last = 0\n        var lastOne = 0\n        var\
    \ lastTwo = 0\n        var lastThree = 0\n        var lastFour = 0\n        var\
    \ lastFive = 0\n        var lastSix = 0\n        var lastSeven = 0\n        var\
    \ lastEight = 0\n        var lastNine = 0\n        var lastTen = 0\n        var\
    \ lastEleven = 0\n        var lastTwelve = 0\n        var lastThirteen = 0\n \
    \       var lastFourteen = 0\n        var lastFifteen = 0\n        var lastSixteen\
    \ = 0\n        var lastSeventeen = 0\n        var lastEighteen = 0\n        var\
    \ lastNineteen = 0\n        var lastTwenty = 0\n        var lastTwentyOne = 0\n\
    \        var lastTwentyTwo = 0\n        var lastTwentyThree = 0\n        var lastTwentyFour\
    \ = 0\n        var lastTwentyFive = 0\n        var lastTwentySix = 0\n       \
    \ var lastTwentySeven = 0\n        var lastTwentyEight = 0\n        var lastTwentyNine\
    \ = 0\n        var lastThirty = 0\n        var lastThirtyOne = 0\n        var\
    \ lastThirtyTwo = 0\n        var lastThirtyThree = 0\n        var lastThirtyFour\
    \ = 0\n        var lastThirtyFive = 0\n        var lastThirtySix = 0\n       \
    \ var lastThirtySeven = 0\n        var lastThirtyEight = 0\n        var lastThirtyNine\
    \ = 0\n        var lastFourty = 0\n        var lastFourtyOne = 0\n        var\
    \ lastFourtyTwo = 0\n        var lastFourtyThree = 0\n        var lastFourtyFour\
    \ = 0\n        var lastFourtyFive = 0\n        var lastFourtySix = 0\n       \
    \ var lastFourtySeven = 0\n        var lastFourtyEight = 0\n        var lastFourtyNine\
    \ = 0\n        var lastFifty = 0\n        var lastFiftyOne = 0\n        var lastFiftyTwo\
    \ = 0\n        var lastFiftyThree = 0\n        var lastFiftyFour = 0\n       \
    \ var lastFiftyFive = 0\n        var lastFiftySix = 0\n        var lastFiftySeven\
    \ = 0\n        var lastFiftyEight = 0\n        var lastFiftyNine = 0\n       \
    \ var lastSixty = 0\n        var lastSixtyOne = 0\n        var lastSixtyTwo =\
    \ 0\n        var lastSixtyThree = 0\n        var lastSixtyFour = 0\n        var\
    \ lastSixtyFive = 0\n        var lastSixtySix = 0\n        var lastSixtySeven\
    \ = 0\n        var lastSixtyEight = 0", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount3 = mutable.ListBuffer[Long]()\n\
    \        val onesCount4 = mutable.ListBuffer[Long]()\n        val onesCount5 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount6 = mutable.ListBuffer[Long]()\n\
    \        val onesCount7 = mutable.ListBuffer[Long]()\n        val onesCount8 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount9 = mutable.ListBuffer[Long]()\n\
    \        val onesCount10 = mutable.ListBuffer[Long]()\n        val onesCount11\
    \ = mutable.ListBuffer[Long]()\n        val onesCount12 = mutable.ListBuffer[Long]()\n\
    \        val onesCount13 = mutable.ListBuffer[Long]()\n        val onesCount14\
    \ = mutable.ListBuffer[Long]()\n        val onesCount15 = mutable.ListBuffer[Long]()\n\
    \        val onesCount16 = mutable.ListBuffer[Long]()\n        val onesCount17\
    \ = mutable.ListBuffer[Long]()\n        val onesCount18 = mutable.ListBuffer[Long]()\n\
    \        val onesCount19 = mutable.ListBuffer[Long]()\n        val onesCount20\
    \ = mutable.ListBuffer[Long]()\n        val onesCount21 = mutable.ListBuffer[Long]()\n\
    \        val onesCount22 = mutable.ListBuffer[Long]()\n        val onesCount23\
    \ = mutable.ListBuffer[Long]()\n        val onesCount24 = mutable.ListBuffer[Long]()\n\
    \        val onesCount25 = mutable.ListBuffer[Long]()\n        val onesCount26\
    \ = mutable.ListBuffer[Long]()\n        val onesCount27 = mutable.ListBuffer[Long]()\n\
    \        val onesCount28 = mutable.ListBuffer[Long]()\n        val onesCount29\
    \ = mutable.ListBuffer[Long]()\n        val onesCount30 = mutable.ListBuffer[Long]()\n\
    \        val onesCount31 = mutable.ListBuffer[Long]()\n        val onesCount32\
    \ = mutable.ListBuffer[Long]()\n", "        val ones = mutable.ListBuffer(1)\n\
    \        val zeros = mutable.ListBuffer(0)\n        var count = 0\n        while(n\
    \ > 0){\n            val nextOne = n % 10\n            if(nextOne == 1){\n   \
    \             ones += nextOne\n                count += 1\n            }\n   \
    \         else{\n                zeros += nextOne\n            }\n           \
    \ n /= 10\n        }\n        count + ones.size + zeros.size", "        var count\
    \ = 0\n        val ones = scala.collection.mutable.ListBuffer[Long]()\n      \
    \  val zeros = scala.collection.mutable.ListBuffer[Long]()\n        val onesAndZeros\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 1 to n) {\n\
    \            if (i % 10 == 1) {\n                ones += i\n            } else\
    \ {\n                zeros += i\n            }\n        }\n        for (i <- 1\
    \ to n) {\n            if (i % 10 == 1 && i % 100 != 11) {\n                onesAndZeros\
    \ += i\n            }\n        }\n        onesAndZeros.foreach(i => count += i)\n\
    \        ones.foreach(i => count += i)\n        zeros.foreach(i => count += i)\n\
    \        count", "        val ones = mutable.Set[Long]()\n        val zeros =\
    \ mutable.Set[Long]()\n        val counts = mutable.Map[Long, Long]()\n      \
    \  val digits = n.toString.reverse.grouped(10).toList\n        digits.foreach\
    \ { x => \n            val digit = x(0).toLong\n            if (digit == 1) ones\
    \ += digit\n            else if (digit == 0) zeros += digit\n            else\
    \ counts(digit) += 1\n        }\n        ones.size + zeros.size + counts.values.sum",
  "        val ones = mutable.ListBuffer[Long]()\n        for (i <- 1 to n) ones +=\
    \ i\n        ones.count(_ == 1)", "        val ones = mutable.ArrayBuffer(1)\n\
    \        val zeros = mutable.ArrayBuffer(0)\n        var count = 0\n        while(n\
    \ > 0){\n            val remainder = n % 10\n            if((remainder == 1) ||\
    \ (remainder == 0)){\n                ones += remainder\n                count\
    \ += 1\n            }\n            n /= 10\n        }\n        count += ones.size\
    \ - zeros.size\n        count", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount3 = mutable.ListBuffer[Long]()\n\
    \        val onesCount4 = mutable.ListBuffer[Long]()\n        val onesCount5 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount6 = mutable.ListBuffer[Long]()\n\
    \        val onesCount7 = mutable.ListBuffer[Long]()\n        val onesCount8 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount9 = mutable.ListBuffer[Long]()\n\
    \        val onesCount10 = mutable.ListBuffer[Long]()\n        val onesCount11\
    \ = mutable.ListBuffer[Long]()\n        val onesCount12 = mutable.ListBuffer[Long]()\n\
    \        val onesCount13 = mutable.ListBuffer[Long]()\n        val onesCount14\
    \ = mutable.ListBuffer[Long]()\n        val onesCount15 = mutable.ListBuffer[Long]()\n\
    \        val onesCount16 = mutable.ListBuffer[Long]()\n        val onesCount17\
    \ = mutable.ListBuffer[Long]()\n        val onesCount18 = mutable.ListBuffer[Long]()\n\
    \        val onesCount19 = mutable.ListBuffer[Long]()\n        val onesCount20\
    \ = mutable.ListBuffer[Long]()\n        val onesCount21 = mutable.ListBuffer[Long]()\n\
    \        val onesCount22 = mutable.ListBuffer[Long]()\n        val onesCount23\
    \ = mutable.ListBuffer[Long]()\n        val onesCount24 = mutable.ListBuffer[Long]()\n\
    \        val onesCount25 = mutable.ListBuffer[Long]()\n        val onesCount26\
    \ = mutable.ListBuffer[Long]()\n        val onesCount27 = mutable.ListBuffer[Long]()\n\
    \        val onesCount28 = mutable.ListBuffer[Long]()\n        val onesCount29\
    \ = mutable.ListBuffer[Long]()\n        val onesCount30 = mutable.ListBuffer[Long]()\n\
    \        val onesCount31 = mutable.ListBuffer[Long]()\n        val onesCount32\
    \ = mutable.ListBuffer[Long]()\n", "        val ones = mutable.Set[Long]()\n \
    \       val zeros = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val zerosCount = mutable.Set[Long]()\n        val onesCount2 = mutable.Set[Long]()\n\
    \        val zerosCount2 = mutable.Set[Long]()\n        val onesCount3 = mutable.Set[Long]()\n\
    \        val zerosCount3 = mutable.Set[Long]()\n        val onesCount4 = mutable.Set[Long]()\n\
    \        val zerosCount4 = mutable.Set[Long]()\n        val onesCount5 = mutable.Set[Long]()\n\
    \        val zerosCount5 = mutable.Set[Long]()\n        val onesCount6 = mutable.Set[Long]()\n\
    \        val zerosCount6 = mutable.Set[Long]()\n        val onesCount7 = mutable.Set[Long]()\n\
    \        val zerosCount7 = mutable.Set[Long]()\n        val onesCount8 = mutable.Set[Long]()\n\
    \        val zerosCount8 = mutable.Set[Long]()\n        val onesCount9 = mutable.Set[Long]()\n\
    \        val zerosCount9 = mutable.Set[Long]()\n        val onesCount10 = mutable.Set[Long]()\n\
    \        val zerosCount10 = mutable.Set[Long]()\n        val onesCount11 = mutable.Set[Long]()\n\
    \        val zerosCount11 = mutable.Set[Long]()\n        val onesCount12 = mutable.Set[Long]()\n\
    \        val zerosCount12 = mutable.Set[Long]()\n        val onesCount13 = mutable.Set[Long]()\n\
    \        val zerosCount13 = mutable.Set[Long]()\n        val onesCount14 = mutable.Set[Long]()\n\
    \        val zerosCount14 = mutable.Set[Long]()\n        val onesCount15 = mutable.Set[Long]()\n\
    \        val zerosCount15 = mutable.Set[Long]()\n        val onesCount16 = mutable.Set[Long]()\n\
    \        val zerosCount16 = mutable.Set[Long]()\n        val onesCount17 = mutable.Set[Long]()\n\
    \        val zerosCount17 = mutable.Set[Long]()\n        val onesCount18 = mutable.Set[Long]()\n\
    \        val zerosCount18 = ", "        val ones = mutable.ArrayBuffer(1)\n  \
    \      var count = 0\n        var i = 2\n        while(i <= n){\n            val\
    \ x = ones(0)\n            ones = ones + x\n            count = count + 1\n  \
    \          i = i + 1\n        }\n        count", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val zeros = mutable.ListBuffer[Long]()\n        val counts = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val zerosCount =\
    \ mutable.ListBuffer[Long]()\n        val countsCount = mutable.ListBuffer[Long]()\n\
    \        val onesCountCount = mutable.ListBuffer[Long]()\n        val zerosCountCount\
    \ = mutable.ListBuffer[Long]()\n        val countsCountCount = mutable.ListBuffer[Long]()\n\
    \        val onesCountCountCount = mutable.ListBuffer[Long]()\n        val zerosCountCountCount\
    \ = mutable.ListBuffer[Long]()\n        val countsCountCountCount = mutable.ListBuffer[Long]()\n\
    \        val onesCountCountCountCount = mutable.ListBuffer[Long]()\n        val\
    \ zerosCountCountCountCount = mutable.ListBuffer[Long]()\n        val countsCountCountCountCount\
    \ = mutable.ListBuffer[Long]()\n        val onesCountCountCountCountCount = mutable.ListBuffer[Long]()\n\
    \        val zerosCountCountCountCountCount = mutable.ListBuffer[Long]()\n   \
    \     val countsCountCountCountCountCount = mutable.ListBuffer[Long]()\n     \
    \   val onesCountCountCountCountCount = mutable.ListBuffer[Long]()\n        val\
    \ zerosCountCountCountCountCount = mutable.ListBuffer[Long]()\n        val countsCountCountCountCountCount\
    \ = mutable.ListBuffer[Long]()\n        val onesCountCountCountCountCount = mutable.ListBuffer[Long]()\n\
    \        val zerosCountCountCountCountCount = mutable.ListBuffer[Long]()\n   \
    \     val countsCountCountCountCountCount = mutable.ListBuffer[Long]()\n     \
    \   val onesCountCountCountCountCount = mutable.ListBuffer[Long]()\n        val\
    \ zerosCountCountCountCountCount = mutable.ListBuffer[Long]()\n        val countsCountCountCountCountCount\
    \ = mutable.ListBuffer[Long]()\n        val onesCountCountCountCountCount = mutable.ListBuffer[Long]()\n\
    \        val zerosCountCountCountCountCount = mutable.ListBuffer[Long]()\n   \
    \     val countsCountCountCountCountCount = mutable.ListBuffer[Long]()\n     \
    \   val onesCountCountCountCountCount = mutable.ListBuffer[Long]()\n        val\
    \ zerosCountCountCountCountCount = ", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount3 = mutable.ListBuffer[Long]()\n\
    \        val onesCount4 = mutable.ListBuffer[Long]()\n        val onesCount5 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount6 = mutable.ListBuffer[Long]()\n\
    \        val onesCount7 = mutable.ListBuffer[Long]()\n        val onesCount8 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount9 = mutable.ListBuffer[Long]()\n\
    \        val onesCount10 = mutable.ListBuffer[Long]()\n        val onesCount11\
    \ = mutable.ListBuffer[Long]()\n        val onesCount12 = mutable.ListBuffer[Long]()\n\
    \        val onesCount13 = mutable.ListBuffer[Long]()\n        val onesCount14\
    \ = mutable.ListBuffer[Long]()\n        val onesCount15 = mutable.ListBuffer[Long]()\n\
    \        val onesCount16 = mutable.ListBuffer[Long]()\n        val onesCount17\
    \ = mutable.ListBuffer[Long]()\n        val onesCount18 = mutable.ListBuffer[Long]()\n\
    \        val onesCount19 = mutable.ListBuffer[Long]()\n        val onesCount20\
    \ = mutable.ListBuffer[Long]()\n        val onesCount21 = mutable.ListBuffer[Long]()\n\
    \        val onesCount22 = mutable.ListBuffer[Long]()\n        val onesCount23\
    \ = mutable.ListBuffer[Long]()\n        val onesCount24 = mutable.ListBuffer[Long]()\n\
    \        val onesCount25 = mutable.ListBuffer[Long]()\n        val onesCount26\
    \ = mutable.ListBuffer[Long]()\n        val onesCount27 = mutable.ListBuffer[Long]()\n\
    \        val onesCount28 = mutable.ListBuffer[Long]()\n        val onesCount29\
    \ = mutable.ListBuffer[Long]()\n        val onesCount30 = mutable.ListBuffer[Long]()\n\
    \        val onesCount31 = mutable.ListBuffer[Long]()\n        val onesCount32\
    \ = mutable.ListBuffer[Long]()\n", "        val ones = mutable.ListBuffer[Long]()\n\
    \        var count = 0\n        for(i <- 1 to n){\n            val x = i.toString.toLong\n\
    \            if(x == 1){\n                ones += x\n                count +=\
    \ 1\n            }\n        }\n        count", "        val counts = mutable.HashMap.empty[Long,\
    \ Long]\n        val ones = mutable.ArrayBuffer.empty[Long]\n        val zeroes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val zeroesCount = mutable.ArrayBuffer.empty[Long]\n        val onesCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zeroesCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCountZeroes = mutable.ArrayBuffer.empty[Long]\n        val zeroesCountZeroes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountOnes = mutable.ArrayBuffer.empty[Long]\n\
    \        val zeroesCountOnes = mutable.ArrayBuffer.empty[Long]\n        val onesCountZeroesOnes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zeroesCountZeroesOnes = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCountOnesZeroes = mutable.ArrayBuffer.empty[Long]\n        val\
    \ zeroesCountOnesZeroes = mutable.ArrayBuffer.empty[Long]\n        val onesCountOnesOnes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zeroesCountOnesOnes = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCountZeroesZeroes = mutable.ArrayBuffer.empty[Long]\n       \
    \ val zeroesCountZeroesZeroes = mutable.ArrayBuffer.empty[Long]\n        val onesCountOnesZeroesOnes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zeroesCountOnesZeroesOnes = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCountOnesOnesZeroes = mutable.ArrayBuffer.empty[Long]\n     \
    \   val zeroesCountOnesOnesZeroes = mutable.ArrayBuffer.empty[Long]\n        val\
    \ onesCountOnesOnesOnes = mutable.ArrayBuffer.empty[Long]\n        val zeroesCountOnesOnesOnes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountZeroesZeroesZeroes =\
    \ mutable.ArrayBuffer.empty[Long]\n        val zeroesCountZeroesZeroesZeroes =\
    \ mutable.ArrayBuffer.empty[Long]\n        val onesCountOnesZeroesOnesZeroes =\
    \ mutable.ArrayBuffer.empty[Long]\n        val zeroesCountOnesZeroesOnesZeroes\
    \ = mutable.ArrayBuffer.empty[Long]\n        ", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val zeros = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val zerosCount = mutable.ListBuffer[Long]()\n        val onesCount2 =\
    \ mutable.ListBuffer[Long]()\n        val zerosCount2 = mutable.ListBuffer[Long]()\n\
    \        val onesCount3 = mutable.ListBuffer[Long]()\n        val zerosCount3\
    \ = mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount4 = mutable.ListBuffer[Long]()\n        val onesCount5\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount5 = mutable.ListBuffer[Long]()\n\
    \        val onesCount6 = mutable.ListBuffer[Long]()\n        val zerosCount6\
    \ = mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount7 = mutable.ListBuffer[Long]()\n        val onesCount8\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount8 = mutable.ListBuffer[Long]()\n\
    \        val onesCount9 = mutable.ListBuffer[Long]()\n        val zerosCount9\
    \ = mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount10 = mutable.ListBuffer[Long]()\n        val onesCount11\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount11 = mutable.ListBuffer[Long]()\n\
    \        val onesCount12 = mutable.ListBuffer[Long]()\n        val zerosCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount13 = mutable.ListBuffer[Long]()\n        val onesCount14\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount14 = mutable.ListBuffer[Long]()\n\
    \        val onesCount15 = mutable.ListBuffer[Long]()\n        val zerosCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount16 = mutable.ListBuffer[Long]()\n        val onesCount17\
    \ = mutable.ListBuffer[Long]()\n", "        val ones = mutable.Set[Long]()\n \
    \       val zeros = mutable.Set[Long]()\n        val counts = mutable.Map[Long,\
    \ Long]()\n        for (i <- 1 to n) {\n            val digit = i / 10\n     \
    \       if (digit == 1) {\n                ones += i\n            } else {\n \
    \               zeros += i\n            }\n            counts(digit) += 1\n  \
    \      }\n        ones.size + zeros.size + 1", "        val ones = mutable.ListBuffer.empty[Long]\n\
    \        val zeros = mutable.ListBuffer.empty[Long]\n        val counts = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount = mutable.ListBuffer.empty[Long]\n        val zerosCount\
    \ = mutable.ListBuffer.empty[Long]\n        val countsCount = mutable.ListBuffer.empty[Long]\n\
    \        val onesCountCount = mutable.ListBuffer.empty[Long]\n        val zerosCountCount\
    \ = mutable.ListBuffer.empty[Long]\n        val countsCountCount = mutable.ListBuffer.empty[Long]\n\
    \        val onesCountCountCount = mutable.ListBuffer.empty[Long]\n        val\
    \ zerosCountCountCount = mutable.ListBuffer.empty[Long]\n        val countsCountCountCount\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCountCountCountCount = mutable.ListBuffer.empty[Long]\n\
    \        val zerosCountCountCountCount = mutable.ListBuffer.empty[Long]\n    \
    \    val countsCountCountCountCount = mutable.ListBuffer.empty[Long]\n       \
    \ val onesCountCountCountCountCount = mutable.ListBuffer.empty[Long]\n       \
    \ val zerosCountCountCountCountCount = mutable.ListBuffer.empty[Long]\n      \
    \  val countsCountCountCountCountCount = mutable.ListBuffer.empty[Long]\n    \
    \    val onesCountCountCountCountCount = mutable.ListBuffer.empty[Long]\n    \
    \    val zerosCountCountCountCountCountCount = mutable.ListBuffer.empty[Long]\n\
    \        val countsCountCountCountCountCountCount = mutable.ListBuffer.empty[Long]\n\
    \        val onesCountCountCountCountCountCount = mutable.ListBuffer.empty[Long]\n\
    \        val zerosCountCountCountCountCountCountCount = mutable.ListBuffer.empty[Long]\n\
    \        val countsCountCountCountCountCountCountCount = mutable.ListBuffer.empty[Long]\n\
    \        val onesCountCountCountCountCountCountCount = mutable.ListBuffer.empty[Long]\n\
    \        val zerosCountCountCountCountCountCountCountCount = mutable.ListBuffer.empty[Long]\n\
    \        val countsCountCountCountCountCountCountCountCount = mutable.ListBuffer.empty[Long]\n\
    \        val onesCountCountCountCountCountCountCountCount = mutable.ListBuffer.empty[Long]\n\
    \        val zerosCountCountCountCountCountCountCountCountCount = mutable.ListBuffer.empty[Long]\n\
    \        val countsCountCountCountCountCountCountCountCount = mutable.ListBuffer.empty[Long]\n\
    \        ", "        val ones = mutable.ListBuffer[Long]()\n        val onesCount\
    \ = mutable.ListBuffer[Long]()\n        val onesCount2 = mutable.ListBuffer[Long]()\n\
    \        val onesCount3 = mutable.ListBuffer[Long]()\n        val onesCount4 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount5 = mutable.ListBuffer[Long]()\n\
    \        val onesCount6 = mutable.ListBuffer[Long]()\n        val onesCount7 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount8 = mutable.ListBuffer[Long]()\n\
    \        val onesCount9 = mutable.ListBuffer[Long]()\n        val onesCount10\
    \ = mutable.ListBuffer[Long]()\n        val onesCount11 = mutable.ListBuffer[Long]()\n\
    \        val onesCount12 = mutable.ListBuffer[Long]()\n        val onesCount13\
    \ = mutable.ListBuffer[Long]()\n        val onesCount14 = mutable.ListBuffer[Long]()\n\
    \        val onesCount15 = mutable.ListBuffer[Long]()\n        val onesCount16\
    \ = mutable.ListBuffer[Long]()\n        val onesCount17 = mutable.ListBuffer[Long]()\n\
    \        val onesCount18 = mutable.ListBuffer[Long]()\n        val onesCount19\
    \ = mutable.ListBuffer[Long]()\n        val onesCount20 = mutable.ListBuffer[Long]()\n\
    \        val onesCount21 = mutable.ListBuffer[Long]()\n        val onesCount22\
    \ = mutable.ListBuffer[Long]()\n        val onesCount23 = mutable.ListBuffer[Long]()\n\
    \        val onesCount24 = mutable.ListBuffer[Long]()\n        val onesCount25\
    \ = mutable.ListBuffer[Long]()\n        val onesCount26 = mutable.ListBuffer[Long]()\n\
    \        val onesCount27 = mutable.ListBuffer[Long]()\n        val onesCount28\
    \ = mutable.ListBuffer[Long]()\n        val onesCount29 = mutable.ListBuffer[Long]()\n\
    \        val onesCount30 = mutable.ListBuffer[Long]()\n        val onesCount31\
    \ = mutable.ListBuffer[Long]()\n        val onesCount32 = mutable.ListBuffer[Long]()\n",
  "        val ones = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n\
    \        val counts = mutable.ArrayBuffer.empty[Long]\n        while(n > 0){\n\
    \            val digit = n % 10\n            n /= 10\n            if(digit ==\
    \ 1){\n                ones += digit\n            }\n            else{\n     \
    \           zeros += digit\n            }\n        }\n        while(ones.nonEmpty){\n\
    \            counts += ones.last\n            ones -= 1\n        }\n        while(zeros.nonEmpty){\n\
    \            counts += zeros.last\n            zeros -= 1\n        }\n       \
    \ counts.sum", "        val ones = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n\
    \        val counts = mutable.Map[Long, Long]()\n        val digits = n.toString.reverse.grouped(10).toList\n\
    \        digits.foreach(x => {\n            val digit = x\n            val digitCount\
    \ = digits.count(y => y == digit)\n            if (digit == 1) ones += digitCount\n\
    \            if (digit == 0) zeros += digitCount\n            counts += digit\
    \ -> digitCount\n        })\n        val oneCount = ones.count(_ == 1)\n     \
    \   val zeroCount = zeros.count(_ == 0)\n        val onesCount = ones.count(_\
    \ > 0)\n        val zerosCount = zeros.count(_ > 0)\n        val onesZeroCount\
    \ = ones.count(_ == 0 && _ > 0)\n        val zerosOneCount = zeros.count(_ ==\
    \ 1 && _ > 0)\n        val onesOneCount = ones.count(_ == 1 && _ > 0)\n      \
    \  val zerosZeroCount = zeros.count(_ == 0 && _ == 0)\n        val onesZeroZeroCount\
    \ = ones.count(_ == 0 && _ == 0 && _ > 0)\n        val zerosOneZeroCount = zeros.count(_\
    \ == 1 && _ == 0 && _ > 0)\n        val onesOneZeroCount = ones.count(_ == 1 &&\
    \ _ == 0 && _ > 0)\n        val zerosZeroOneCount = zeros.count(_ == 0 && _ ==\
    \ 1 && _ > 0)\n        val onesZeroOneCount = ones.count(_ == 0 && _ == 1 && _\
    \ > 0)\n        val zerosOneOneCount = zeros.count(_ == 1 && _ == 1 && _ > 0)\n\
    \        val onesOneOneCount = ones.count(_ == 1 && _ == 1 && _ > 0)\n       \
    \ val zerosZeroZeroCount = zeros.count(_ == 0 && _ == 0 && _ == 0)\n        val\
    \ onesZeroZeroCount = ones.count(_ == 0 && _ == 0 && _ == 0)\n        val zerosOneZeroCount\
    \ = zeros.count(_ == 1 && _ == 0 && _ == 0)\n        val onesOneZeroCount = ones.count(_\
    \ == 1 && _ == 0 && _ == 0)\n        val zerosZeroOneCount = zeros.count(_ ==\
    \ 0 && _ == 1 && _ == 0)\n        val onesZeroOneCount = ones.count(_ == 0 &&\
    \ _ == 1 && _ == 0)\n        val zerosOneOneCount = zeros.count(_ == 1 && _ ==\
    \ 1 && _ == 0)\n        val onesOneOneCount = ones.count(_ == 1 && _ == 1 && _\
    \ == 0)\n        val zerosZeroZeroCount = zeros.count(_ == 0 && _ == 0 && _ ==\
    \ 1)\n", "        val ones = mutable.ListBuffer(1)\n        val zeros = mutable.ListBuffer(0)\n\
    \        val counts = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val zerosCount = mutable.ListBuffer[Long]()\n        val onesCounts =\
    \ mutable.ListBuffer[Long]()\n        val zerosCounts = mutable.ListBuffer[Long]()\n\
    \        val onesCountZeros = mutable.ListBuffer[Long]()\n        val zerosCountZeros\
    \ = mutable.ListBuffer[Long]()\n        val onesCountOnes = mutable.ListBuffer[Long]()\n\
    \        val zerosCountOnes = mutable.ListBuffer[Long]()\n        val onesCountOnesZeros\
    \ = mutable.ListBuffer[Long]()\n        val zerosCountOnesZeros = mutable.ListBuffer[Long]()\n\
    \        val onesCountOnesOnes = mutable.ListBuffer[Long]()\n        val zerosCountOnesOnes\
    \ = mutable.ListBuffer[Long]()\n        val onesCountOnesOnesZeros = mutable.ListBuffer[Long]()\n\
    \        val zerosCountOnesOnesZeros = mutable.ListBuffer[Long]()\n        val\
    \ onesCountOnesOnesOnes = mutable.ListBuffer[Long]()\n        val zerosCountOnesOnesOnes\
    \ = mutable.ListBuffer[Long]()\n        val onesCountOnesOnesOnesZeros = mutable.ListBuffer[Long]()\n\
    \        val zerosCountOnesOnesOnesZeros = mutable.ListBuffer[Long]()\n      \
    \  val onesCountOnesOnesOnesOnes = mutable.ListBuffer[Long]()\n        val zerosCountOnesOnesOnesOnes\
    \ = mutable.ListBuffer[Long]()\n        val onesCountOnesOnesOnesOnesZeros = mutable.ListBuffer[Long]()\n\
    \        val zerosCountOnesOnesOnesOnesZeros = mutable.ListBuffer[Long]()\n  \
    \      val onesCountOnesOnesOnesOnesOnes = mutable.ListBuffer[Long]()\n      \
    \  val zerosCountOnesOnesOnesOnesOnes = mutable.ListBuffer[Long]()\n        val\
    \ onesCountOnesOnesOnesOnesOnesZeros = mutable.ListBuffer[Long]()\n        val\
    \ zerosCountOnesOne", "        val ones = mutable.ListBuffer[Long]()\n       \
    \ val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 = mutable.ListBuffer[Long]()\n\
    \        val onesCount3 = mutable.ListBuffer[Long]()\n        val onesCount4 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount5 = mutable.ListBuffer[Long]()\n\
    \        val onesCount6 = mutable.ListBuffer[Long]()\n        val onesCount7 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount8 = mutable.ListBuffer[Long]()\n\
    \        val onesCount9 = mutable.ListBuffer[Long]()\n        val onesCount10\
    \ = mutable.ListBuffer[Long]()\n        val onesCount11 = mutable.ListBuffer[Long]()\n\
    \        val onesCount12 = mutable.ListBuffer[Long]()\n        val onesCount13\
    \ = mutable.ListBuffer[Long]()\n        val onesCount14 = mutable.ListBuffer[Long]()\n\
    \        val onesCount15 = mutable.ListBuffer[Long]()\n        val onesCount16\
    \ = mutable.ListBuffer[Long]()\n        val onesCount17 = mutable.ListBuffer[Long]()\n\
    \        val onesCount18 = mutable.ListBuffer[Long]()\n        val onesCount19\
    \ = mutable.ListBuffer[Long]()\n        val onesCount20 = mutable.ListBuffer[Long]()\n\
    \        val onesCount21 = mutable.ListBuffer[Long]()\n        val onesCount22\
    \ = mutable.ListBuffer[Long]()\n        val onesCount23 = mutable.ListBuffer[Long]()\n\
    \        val onesCount24 = mutable.ListBuffer[Long]()\n        val onesCount25\
    \ = mutable.ListBuffer[Long]()\n        val onesCount26 = mutable.ListBuffer[Long]()\n\
    \        val onesCount27 = mutable.ListBuffer[Long]()\n        val onesCount28\
    \ = mutable.ListBuffer[Long]()\n        val onesCount29 = mutable.ListBuffer[Long]()\n\
    \        val onesCount30 = mutable.ListBuffer[Long]()\n        val onesCount31\
    \ = mutable.ListBuffer[Long]()\n        val onesCount32 = mutable.ListBuffer[Long]()\n",
  "        var count = 0\n        var last = 0\n        var lastOne = 0\n        var\
    \ lastTwo = 0\n        var lastThree = 0\n        var lastFour = 0\n        var\
    \ lastFive = 0\n        var lastSix = 0\n        var lastSeven = 0\n        var\
    \ lastEight = 0\n        var lastNine = 0\n        var lastTen = 0\n        var\
    \ lastEleven = 0\n        var lastTwelve = 0\n        var lastThirteen = 0\n \
    \       var lastFourteen = 0\n        var lastFifteen = 0\n        var lastSixteen\
    \ = 0\n        var lastSeventeen = 0\n        var lastEighteen = 0\n        var\
    \ lastNineteen = 0\n        var lastTwenty = 0\n        var lastTwentyOne = 0\n\
    \        var lastTwentyTwo = 0\n        var lastTwentyThree = 0\n        var lastTwentyFour\
    \ = 0\n        var lastTwentyFive = 0\n        var lastTwentySix = 0\n       \
    \ var lastTwentySeven = 0\n        var lastTwentyEight = 0\n        var lastTwentyNine\
    \ = 0\n        var lastThirty = 0\n        var lastThirtyOne = 0\n        var\
    \ lastThirtyTwo = 0\n        var lastThirtyThree = 0\n        var lastThirtyFour\
    \ = 0\n        var lastThirtyFive = 0\n        var lastThirtySix = 0\n       \
    \ var lastThirtySeven = 0\n        var lastThirtyEight = 0\n        var lastThirtyNine\
    \ = 0\n        var lastFourty = 0\n        var lastFourtyOne = 0\n        var\
    \ lastFourtyTwo = 0\n        var lastFourtyThree = 0\n        var lastFourtyFour\
    \ = 0\n        var lastFourtyFive = 0\n        var lastFourtySix = 0\n       \
    \ var lastFourtySeven = 0\n        var lastFourtyEight = 0\n        var lastFourtyNine\
    \ = 0\n        var lastFifty = 0\n        var lastFiftyOne = 0\n        var lastFiftyTwo\
    \ = 0\n        var lastFiftyThree = 0\n        var lastFiftyFour = 0\n       \
    \ var lastFiftyFive = 0\n        var lastFiftySix = 0\n        var lastFiftySeven\
    \ = 0\n        var lastFiftyEight = 0\n        var lastFiftyNine = 0\n       \
    \ var lastSixty = 0\n        var lastSixtyOne = 0\n        var lastSixtyTwo =\
    \ 0\n        var lastSixtyThree = 0\n        var lastSixtyFour = 0\n        var\
    \ lastSixtyFive = 0\n        var lastSixtySix = 0\n        var lastSixtySeven\
    \ = 0\n        var lastSixtyEight = 0", "        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val counts = mutable.Map[Long,\
    \ Long]()\n        val starts = mutable.Set[Long]()\n        val ends = mutable.Set[Long]()\n\
    \        val digits = n.toString.reverse.grouped(2).map(_.reverse).map(_.toLong)\n\
    \        val digitCount = digits.count(_ > 0)\n        val digitSum = digits.sum\n\
    \        val digitSum2 = digitSum * digitSum\n        val digitSum3 = digitSum2\
    \ * digitSum\n        val digitSum4 = digitSum3 * digitSum\n        val digitSum5\
    \ = digitSum4 * digitSum\n        val digitSum6 = digitSum5 * digitSum\n     \
    \   val digitSum7 = digitSum6 * digitSum\n        val digitSum8 = digitSum7 *\
    \ digitSum\n        val digitSum9 = digitSum8 * digitSum\n        val digitSum10\
    \ = digitSum9 * digitSum\n        val digitSum11 = digitSum10 * digitSum\n   \
    \     val digitSum12 = digitSum11 * digitSum\n        val digitSum13 = digitSum12\
    \ * digitSum\n        val digitSum14 = digitSum13 * digitSum\n        val digitSum15\
    \ = digitSum14 * digitSum\n        val digitSum16 = digitSum15 * digitSum\n  \
    \      val digitSum17 = digitSum16 * digitSum\n        val digitSum18 = digitSum17\
    \ * digitSum\n        val digitSum19 = digitSum18 * digitSum\n        val digitSum20\
    \ = digitSum19 * digitSum\n        val digitSum21 = digitSum20 * digitSum\n  \
    \      val digitSum22 = digitSum21 * digitSum\n        val digitSum23 = digitSum22\
    \ * digitSum\n        val digitSum24 = digitSum23 * digitSum\n        val digitSum25\
    \ = digitSum24 * digitSum\n        val digitSum26 = digitSum25 * digitSum\n  \
    \      val digitSum27 = digitSum26 * digitSum\n        val digitSum28 = digitSum27\
    \ * digitSum\n        val digitSum29 = digitSum28 * digitSum\n        val digitSum30\
    \ = digitSum29 * digitSum\n        val digitSum31 = digitSum30 * digitSum\n  \
    \      val digitSum32 = digitSum31 * digitSum\n        val digitSum33 = digitSum32\
    \ * digitSum\n        val digitSum34 = digitSum33 * digitSum", "        val ones\
    \ = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount2 = mutable.ListBuffer[Long]()\n        val onesCount3 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val onesCount5 = mutable.ListBuffer[Long]()\n        val onesCount6 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val onesCount8 = mutable.ListBuffer[Long]()\n        val onesCount9 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val onesCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val onesCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val onesCount17 = mutable.ListBuffer[Long]()\n        val onesCount18\
    \ = mutable.ListBuffer[Long]()\n        val onesCount19 = mutable.ListBuffer[Long]()\n\
    \        val onesCount20 = mutable.ListBuffer[Long]()\n        val onesCount21\
    \ = mutable.ListBuffer[Long]()\n        val onesCount22 = mutable.ListBuffer[Long]()\n\
    \        val onesCount23 = mutable.ListBuffer[Long]()\n        val onesCount24\
    \ = mutable.ListBuffer[Long]()\n        val onesCount25 = mutable.ListBuffer[Long]()\n\
    \        val onesCount26 = mutable.ListBuffer[Long]()\n        val onesCount27\
    \ = mutable.ListBuffer[Long]()\n        val onesCount28 = mutable.ListBuffer[Long]()\n\
    \        val onesCount29 = mutable.ListBuffer[Long]()\n        val onesCount30\
    \ = mutable.ListBuffer[Long]()\n        val onesCount31 = mutable.ListBuffer[Long]()\n\
    \        val onesCount32 = mutable.ListBuffer[Long]()\n", "        val counts\
    \ = mutable.HashMap[Long, Long]()\n        val ones = mutable.ArrayBuffer(1)\n\
    \        val zeros = mutable.ArrayBuffer(0)\n        val onesAndZeros = mutable.ArrayBuffer(1,\
    \ 0)\n        val onesAndOnes = mutable.ArrayBuffer(1, 1)\n        val onesAndZerosAndOnes\
    \ = mutable.ArrayBuffer(1, 0, 1)\n        val onesAndOnesAndZeros = mutable.ArrayBuffer(1,\
    \ 1, 0)\n        val onesAndOnesAndOnes = mutable.ArrayBuffer(1, 1, 1)\n     \
    \   val onesAndZerosAndOnesAndZeros = mutable.ArrayBuffer(1, 0, 1, 0)\n      \
    \  val onesAndOnesAndOnesAndZeros = mutable.ArrayBuffer(1, 1, 1, 1)\n        val\
    \ onesAndZerosAndOnesAndOnesAndZeros = mutable.ArrayBuffer(1, 0, 1, 0, 1)\n  \
    \      val onesAndOnesAndOnesAndOnesAndZeros = mutable.ArrayBuffer(1, 1, 1, 0,\
    \ 1)\n        val onesAndZerosAndOnesAndOnesAndOnesAndZeros = mutable.ArrayBuffer(1,\
    \ 0, 1, 0, 1, 0)\n        val onesAndOnesAndOnesAndOnesAndOnesAndZeros = mutable.ArrayBuffer(1,\
    \ 1, 1, 1, 0, 1)\n        val onesAndZerosAndOnesAndOnesAndOnesAndOnesAndZeros\
    \ = mutable.ArrayBuffer(1, 0, 1, 0, 1, 0, 1)\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndZeros\
    \ = mutable.ArrayBuffer(1, 1, 1, 1, 1, 0, 1)\n        val onesAndZerosAndOnesAndOnesAndOnesAndOnesAndOnesAndZeros\
    \ = mutable.ArrayBuffer(1, 0, 1, 0, 1, 0, 1, 0)\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndZeros\
    \ = mutable.ArrayBuffer(1, 1, 1, 1, 1, 0, 1, 1, 0)\n        val onesAndZerosAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndZeros\
    \ = mutable.ArrayBuffer(1, 0, 1, 0, 1, 0, 1, 0, 1, 0)\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndZeros\
    \ = mutable.ArrayBuffer(1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1)\n        val onesAndZerosAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndZeros\
    \ = mutable.ArrayBuffer(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1)\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndZeros\
    \ = mutable.ArrayBuffer(1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0)\n        val onesAndZerosAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndZeros\
    \ = mutable.ArrayBuffer(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1)\n       \
    \ val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndOne", "        val ones = mutable.ListBuffer(1)\n\
    \        val zeros = mutable.ListBuffer(0)\n        val counts = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val zerosCount =\
    \ mutable.ListBuffer[Long]()\n        val onesZeros = mutable.ListBuffer[Long]()\n\
    \        val zerosOnes = mutable.ListBuffer[Long]()\n        val onesOnes = mutable.ListBuffer[Long]()\n\
    \        val zerosZeros = mutable.ListBuffer[Long]()\n        val zerosZeros =\
    \ mutable.ListBuffer[Long]()\n        val onesZeros = mutable.ListBuffer[Long]()\n\
    \        val zerosOnes = mutable.ListBuffer[Long]()\n        val onesOnes = mutable.ListBuffer[Long]()\n\
    \        val zerosOnes = mutable.ListBuffer[Long]()\n        val onesZeros = mutable.ListBuffer[Long]()\n\
    \        val zerosZeros = mutable.ListBuffer[Long]()\n        val onesZeros =\
    \ mutable.ListBuffer[Long]()\n        val zerosOnes = mutable.ListBuffer[Long]()\n\
    \        val onesOnes = mutable.ListBuffer[Long]()\n        val zerosZeros = mutable.ListBuffer[Long]()\n\
    \        val onesZeros = mutable.ListBuffer[Long]()\n        val zerosOnes = mutable.ListBuffer[Long]()\n\
    \        val onesOnes = mutable.ListBuffer[Long]()\n        val zerosOnes = mutable.ListBuffer[Long]()\n\
    \        val onesZeros = mutable.ListBuffer[Long]()\n        val zerosZeros =\
    \ mutable.ListBuffer[Long]()\n        val onesZeros = mutable.ListBuffer[Long]()\n\
    \        val zerosOnes = mutable.ListBuffer[Long]()\n        val onesOnes = mutable.ListBuffer[Long]()\n\
    \        val zerosZeros = mutable.ListBuffer[Long]()\n        val onesZeros =\
    \ mutable.ListBuffer[Long]()\n        val zerosOnes = mutable.ListBuffer[Long]()\n\
    \        val onesOnes = mutable.ListBuffer[Long]()\n        val zerosOnes = mutable.ListBuffer[Long]()\n\
    \        val onesZeros = mutable.ListBuffer[Long]()\n        val zerosZeros =\
    \ mutable.ListBuffer[Long]()\n        val one", "        val ones = mutable.ArrayBuffer(1)\n\
    \        val zeros = mutable.ArrayBuffer(0)\n        val counts = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxCount = math.pow(10, n).toInt\n        val onesCount = ones.count(_\
    \ == 1)\n        val zerosCount = zeros.count(_ == 0)\n        val countsCount\
    \ = counts.count(_ == 0)\n        val maxCountCounts = counts.count(_ == maxCount)\n\
    \        val maxCountOnesCount = ones.count(_ == maxCount)\n        val maxCountZerosCount\
    \ = zeros.count(_ == maxCount)\n        val maxCountCountOnesCount = ones.count(_\
    \ == maxCountCount)\n        val maxCountCountZerosCount = zeros.count(_ == maxCountCount)\n\
    \        val maxCountCountOnesCountZerosCount = ones.count(_ == maxCountCountZerosCount)\n\
    \        val maxCountCountZerosCountOnesCount = zeros.count(_ == maxCountCountOnesCount)\n\
    \        val maxCountCountOnesCountZerosCountOnesCount = ones.count(_ == maxCountCountOnesCountZerosCount)\n\
    \        val maxCountCountOnesCountZerosCountOnesCountZerosCount = ones.count(_\
    \ == maxCountCountOnesCountZerosCountOnesCount)\n        val maxCountCountOnesCountZerosCountOnesCountZerosCountOnesCount\
    \ = zeros.count(_ == maxCountCountOnesCountZerosCountOnesCountZerosCount)\n  \
    \      val maxCountCountOnesCountZerosCountOnesCountZerosCountOnesCountZerosCount\
    \ = ones.count(_ == maxCountCountOnesCountZerosCountOnesCountZerosCountOnesCount)\n\
    \        val maxCountCountOnesCountZerosCountOnesCountZerosCountOnesCountZerosCountOnesCount\
    \ = zeros.count(_ == maxCountCountOnesCountZerosCountOnesCountZerosCountOnesCountZerosCount)\n\
    \        val maxCountCountOnesCountZerosCountOnesCountZerosCountOnesCountZerosCountOnesCountZerosCount\
    \ = ones.count(_ == maxCountCountOnesCountZerosCountOnesCountZerosCountOnesCountZerosCountOnesCount)\n\
    \        val maxCountCountOnesCountZer", "        val ones = mutable.ArrayBuffer(1)\n\
    \        val zeros = mutable.ArrayBuffer(0)\n        val counts = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = n.toInt\n        while(n > 0){\n            val digit = n % 10\n\
    \            val digitCount = digits.count(_ == digit)\n            val digitZeroCount\
    \ = digits.count(_ == 0)\n            if(digitZeroCount > digitCount){\n     \
    \           ones.clear()\n                ones.take(digitZeroCount).foreach(ones\
    \ ++= _)\n                ones.take(digitZeroCount).foreach(ones ++= _)\n    \
    \            ones.take(digitZeroCount).foreach(ones ++= _)\n                ones.take(digitZeroCount).foreach(ones\
    \ ++= _)\n                ones.take(digitZeroCount).foreach(ones ++= _)\n    \
    \            ones.take(digitZeroCount).foreach(ones ++= _)\n                ones.take(digitZeroCount).foreach(ones\
    \ ++= _)\n                ones.take(digitZeroCount).foreach(ones ++= _)\n    \
    \            ones.take(digitZeroCount).foreach(ones ++= _)\n                ones.take(digitZeroCount).foreach(ones\
    \ ++= _)\n                ones.take(digitZeroCount).foreach(ones ++= _)\n    \
    \            ones.take(digitZeroCount).foreach(ones ++= _)\n                ones.take(digitZeroCount).foreach(ones\
    \ ++= _)\n                ones.take(digitZeroCount).foreach(ones ++= _)\n    \
    \            ones.take(digitZeroCount).foreach(ones ++= _)\n                ones.take(digitZeroCount).foreach(ones\
    \ ++= _)\n                ones.take(digitZeroCount).foreach(ones ++= _)\n    \
    \            ones.take(digitZeroCount).foreach(ones ++= _)\n                ones.take(digitZeroCount).foreach(ones\
    \ ++= _)\n                ones.take(digitZeroCount).foreach(ones ++= _)\n    \
    \            ones.take(digitZeroCount).foreach(ones ++= _)\n                ones.take(digitZeroCount).foreach(ones\
    \ ++= _)\n                ones.take(digitZeroCount).foreach(ones ++= _)\n    \
    \            ones.take(digitZeroCount).foreach(ones ++= _)\n                ones.take(digitZeroCount).foreach(ones\
    \ ++= _)\n                ones.take(digitZeroCount).foreach(ones ++= _)\n    \
    \            ones.take(digitZeroCount).", "        var count = 0\n        var\
    \ last = 1\n        for(i <- 1 to n){\n            if((i%10)==1){\n          \
    \      count += 1\n            }\n            if((i%10)==0){\n               \
    \ if((last%10)==1){\n                    count += 1\n                }\n     \
    \           last = 1\n            }\n        }\n        return count", "     \
    \   val ones = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount2 = mutable.ListBuffer[Long]()\n        val onesCount3 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val onesCount5 = mutable.ListBuffer[Long]()\n        val onesCount6 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val onesCount8 = mutable.ListBuffer[Long]()\n        val onesCount9 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val onesCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val onesCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val onesCount17 = mutable.ListBuffer[Long]()\n        val onesCount18\
    \ = mutable.ListBuffer[Long]()\n        val onesCount19 = mutable.ListBuffer[Long]()\n\
    \        val onesCount20 = mutable.ListBuffer[Long]()\n        val onesCount21\
    \ = mutable.ListBuffer[Long]()\n        val onesCount22 = mutable.ListBuffer[Long]()\n\
    \        val onesCount23 = mutable.ListBuffer[Long]()\n        val onesCount24\
    \ = mutable.ListBuffer[Long]()\n        val onesCount25 = mutable.ListBuffer[Long]()\n\
    \        val onesCount26 = mutable.ListBuffer[Long]()\n        val onesCount27\
    \ = mutable.ListBuffer[Long]()\n        val onesCount28 = mutable.ListBuffer[Long]()\n\
    \        val onesCount29 = mutable.ListBuffer[Long]()\n        val onesCount30\
    \ = mutable.ListBuffer[Long]()\n        val onesCount31 = mutable.ListBuffer[Long]()\n\
    \        val onesCount32 = mutable.ListBuffer[Long]()\n", "        val ones =\
    \ mutable.ArrayBuffer(1)\n        var count = 0\n        while(n > 0){\n     \
    \       ones += n\n            n -= 1\n        }\n        while(ones.size > 0)\
    \ {\n            count += ones.takeWhile(x => x == 1).size\n        }\n      \
    \  count", "        var count = 0\n        var last = 1\n        for(i <- 1 to\
    \ n){\n            if((i%10) == 1){\n                count += 1\n            \
    \    last = i\n            }\n        }\n        count", "        val ones = mutable.ArrayBuffer(1)\n\
    \        val zeros = mutable.ArrayBuffer(0)\n        val counts = mutable.ArrayBuffer.empty[Long]\n\
    \        val starts = mutable.ArrayBuffer.empty[Long]\n        val ends = mutable.ArrayBuffer.empty[Long]\n\
    \        val nums = mutable.ArrayBuffer.empty[Long]\n        val numsIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsIndexCount = mutable.ArrayBuffer.empty[Long]\n        val numsIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numsIndexCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsIndex = mutable.ArrayBuffer.empty[Long]\n        val numsIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numsIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsIndexCount = mutable.ArrayBuffer.empty[Long]\n        val numsIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numsIndexCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsIndex = mutable.ArrayBuffer.empty[Long]\n        val numsIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numsIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsIndexCount = mutable.ArrayBuffer.empty[Long]\n        val numsIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numsIndexCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsIndex = mutable.ArrayBuffer.empty[Long]\n        val numsIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numsIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsIndexCount = mutable.ArrayBuffer.empty[Long]\n        val numsIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numsIndexCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsIndex = mutable.ArrayBuffer.empty[Long]\n        val numsIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numsIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsIndexCount = mutable.ArrayBuffer.empty[Long]\n        val numsIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numsIndexCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsIndex = mutable.ArrayBuffer.empty[Long]\n        val numsIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numsIndex = ", "        val ones\
    \ = mutable.ListBuffer[Long]()\n        val zeros = mutable.ListBuffer[Long]()\n\
    \        val counts = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val zerosCount = mutable.ListBuffer[Long]()\n        val countsCount\
    \ = mutable.ListBuffer[Long]()\n        val onesCountCount = mutable.ListBuffer[Long]()\n\
    \        val zerosCountCount = mutable.ListBuffer[Long]()\n        val countsCountCount\
    \ = mutable.ListBuffer[Long]()\n        val onesCountCountCount = mutable.ListBuffer[Long]()\n\
    \        val zerosCountCountCount = mutable.ListBuffer[Long]()\n        val countsCountCountCount\
    \ = mutable.ListBuffer[Long]()\n        val onesCountCountCountCount = mutable.ListBuffer[Long]()\n\
    \        val zerosCountCountCountCount = mutable.ListBuffer[Long]()\n        val\
    \ countsCountCountCountCount = mutable.ListBuffer[Long]()\n        val onesCountCountCountCountCount\
    \ = mutable.ListBuffer[Long]()\n        val zerosCountCountCountCountCount = mutable.ListBuffer[Long]()\n\
    \        val countsCountCountCountCountCount = mutable.ListBuffer[Long]()\n  \
    \      val onesCountCountCountCountCount = mutable.ListBuffer[Long]()\n      \
    \  val zerosCountCountCountCountCountCount = mutable.ListBuffer[Long]()\n    \
    \    val countsCountCountCountCountCountCount = mutable.ListBuffer[Long]()\n \
    \       val onesCountCountCountCountCountCount = mutable.ListBuffer[Long]()\n\
    \        val zerosCountCountCountCountCountCountCount = mutable.ListBuffer[Long]()\n\
    \        val countsCountCountCountCountCountCountCount = mutable.ListBuffer[Long]()\n\
    \        val onesCountCountCountCountCountCountCount = mutable.ListBuffer[Long]()\n\
    \        val zerosCountCountCountCountCountCountCountCount = mutable.ListBuffer[Long]()\n\
    \        val countsCountCountCountCountCountCountCountCount = mutable.ListBuffer[Long]()\n\
    \        val onesCountCountCountCountCountCountCountCount = mutable.ListBuffer[Long]()\n\
    \        val zerosCountCountCountCountCountCountCountCountCount = mutable.ListBuffer[Long]()\n\
    \        val countsCountCountCountCountCountCountCountCount = mutable.ListBuffer[Long]()\n\
    \        ", "        val ones = mutable.ListBuffer[Long]()\n        val onesCount\
    \ = mutable.ListBuffer[Long]()\n        val onesCount2 = mutable.ListBuffer[Long]()\n\
    \        val onesCount3 = mutable.ListBuffer[Long]()\n        val onesCount4 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount5 = mutable.ListBuffer[Long]()\n\
    \        val onesCount6 = mutable.ListBuffer[Long]()\n        val onesCount7 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount8 = mutable.ListBuffer[Long]()\n\
    \        val onesCount9 = mutable.ListBuffer[Long]()\n        val onesCount10\
    \ = mutable.ListBuffer[Long]()\n        val onesCount11 = mutable.ListBuffer[Long]()\n\
    \        val onesCount12 = mutable.ListBuffer[Long]()\n        val onesCount13\
    \ = mutable.ListBuffer[Long]()\n        val onesCount14 = mutable.ListBuffer[Long]()\n\
    \        val onesCount15 = mutable.ListBuffer[Long]()\n        val onesCount16\
    \ = mutable.ListBuffer[Long]()\n        val onesCount17 = mutable.ListBuffer[Long]()\n\
    \        val onesCount18 = mutable.ListBuffer[Long]()\n        val onesCount19\
    \ = mutable.ListBuffer[Long]()\n        val onesCount20 = mutable.ListBuffer[Long]()\n\
    \        val onesCount21 = mutable.ListBuffer[Long]()\n        val onesCount22\
    \ = mutable.ListBuffer[Long]()\n        val onesCount23 = mutable.ListBuffer[Long]()\n\
    \        val onesCount24 = mutable.ListBuffer[Long]()\n        val onesCount25\
    \ = mutable.ListBuffer[Long]()\n        val onesCount26 = mutable.ListBuffer[Long]()\n\
    \        val onesCount27 = mutable.ListBuffer[Long]()\n        val onesCount28\
    \ = mutable.ListBuffer[Long]()\n        val onesCount29 = mutable.ListBuffer[Long]()\n\
    \        val onesCount30 = mutable.ListBuffer[Long]()\n        val onesCount31\
    \ = mutable.ListBuffer[Long]()\n        val onesCount32 = mutable.ListBuffer[Long]()\n",
  "        val ones = mutable.ListBuffer[Long]()\n        val zeros = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val zerosCount =\
    \ mutable.ListBuffer[Long]()\n        val onesCount2 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount2 = mutable.ListBuffer[Long]()\n        val onesCount3\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount3 = mutable.ListBuffer[Long]()\n\
    \        val onesCount4 = mutable.ListBuffer[Long]()\n        val zerosCount4\
    \ = mutable.ListBuffer[Long]()\n        val onesCount5 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount5 = mutable.ListBuffer[Long]()\n        val onesCount6\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount6 = mutable.ListBuffer[Long]()\n\
    \        val onesCount7 = mutable.ListBuffer[Long]()\n        val zerosCount7\
    \ = mutable.ListBuffer[Long]()\n        val onesCount8 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount8 = mutable.ListBuffer[Long]()\n        val onesCount9\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount9 = mutable.ListBuffer[Long]()\n\
    \        val onesCount10 = mutable.ListBuffer[Long]()\n        val zerosCount10\
    \ = mutable.ListBuffer[Long]()\n        val onesCount11 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount12 = mutable.ListBuffer[Long]()\n\
    \        val onesCount13 = mutable.ListBuffer[Long]()\n        val zerosCount13\
    \ = mutable.ListBuffer[Long]()\n        val onesCount14 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount15 = mutable.ListBuffer[Long]()\n\
    \        val onesCount16 = mutable.ListBuffer[Long]()\n        val zerosCount16\
    \ = mutable.ListBuffer[Long]()\n        val onesCount17 = mutable.ListBuffer[Long]()\n",
  "        val ones = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n\
    \        val counts = mutable.Map[Long, Long]()\n        val digits = n.toString.reverse.grouped(10).toList\n\
    \        for (i <- 0 until digits.size) {\n            val digit = digits(i)\n\
    \            if (digit.head == 1) {\n                ones ++= digit.tail\n   \
    \         }\n            if (digit.head == 0) {\n                zeros ++= digit.tail\n\
    \            }\n        }\n        for (i <- ones.toList ++ zeros.toList) {\n\
    \            counts(i) += 1\n        }\n        counts.values.sum", "        val\
    \ ones = mutable.ListBuffer.empty[Long]\n        val onesCount = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount2 = mutable.ListBuffer.empty[Long]\n        val onesCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCount4 = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount5 = mutable.ListBuffer.empty[Long]\n        val onesCount6\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount8 = mutable.ListBuffer.empty[Long]\n        val onesCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCount10 = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount11 = mutable.ListBuffer.empty[Long]\n        val onesCount12\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount14 = mutable.ListBuffer.empty[Long]\n        val onesCount15\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCount16 = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount17 = mutable.ListBuffer.empty[Long]\n        val onesCount18\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCount19 = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount20 = mutable.ListBuffer.empty[Long]\n        val onesCount21\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCount22 = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount23 = mutable.ListBuffer.empty[Long]\n        val onesCount24\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCount25 = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount26 = mutable.ListBuffer.empty[Long]\n        val onesCount27\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCount28 = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount29 = mutable.ListBuffer.empty[Long]\n        val onesCount30\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCount31 = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount32 = mutable.ListBuffer.empty[Long]\n", "        var count\
    \ = 0\n        var last = 0\n        var lastOne = 0\n        var lastTwo = 0\n\
    \        var lastThree = 0\n        var lastFour = 0\n        var lastFive = 0\n\
    \        var lastSix = 0\n        var lastSeven = 0\n        var lastEight = 0\n\
    \        var lastNine = 0\n        var lastTen = 0\n        var lastEleven = 0\n\
    \        var lastTwelve = 0\n        var lastThirteen = 0\n        var lastFourteen\
    \ = 0\n        var lastFifteen = 0\n        var lastSixteen = 0\n        var lastSeventeen\
    \ = 0\n        var lastEighteen = 0\n        var lastNineteen = 0\n        var\
    \ lastTwenty = 0\n        var lastTwentyOne = 0\n        var lastTwentyTwo = 0\n\
    \        var lastTwentyThree = 0\n        var lastTwentyFour = 0\n        var\
    \ lastTwentyFive = 0\n        var lastTwentySix = 0\n        var lastTwentySeven\
    \ = 0\n        var lastTwentyEight = 0\n        var lastTwentyNine = 0\n     \
    \   var lastThirty = 0\n        var lastThirtyOne = 0\n        var lastThirtyTwo\
    \ = 0\n        var lastThirtyThree = 0\n        var lastThirtyFour = 0\n     \
    \   var lastThirtyFive = 0\n        var lastThirtySix = 0\n        var lastThirtySeven\
    \ = 0\n        var lastThirtyEight = 0\n        var lastThirtyNine = 0\n     \
    \   var lastFourty = 0\n        var lastFourtyOne = 0\n        var lastFourtyTwo\
    \ = 0\n        var lastFourtyThree = 0\n        var lastFourtyFour = 0\n     \
    \   var lastFourtyFive = 0\n        var lastFourtySix = 0\n        var lastFourtySeven\
    \ = 0\n        var lastFourtyEight = 0\n        var lastFourtyNine = 0\n     \
    \   var lastFifty = 0\n        var lastFiftyOne = 0\n        var lastFiftyTwo\
    \ = 0\n        var lastFiftyThree = 0\n        var lastFiftyFour = 0\n       \
    \ var lastFiftyFive = 0\n        var lastFiftySix = 0\n        var lastFiftySeven\
    \ = 0\n        var lastFiftyEight = 0\n        var lastFiftyNine = 0\n       \
    \ var lastSixty = 0\n        var lastSixtyOne = 0\n        var lastSixtyTwo =\
    \ 0\n        var lastSixtyThree = 0\n        var lastSixtyFour = 0\n        var\
    \ lastSixtyFive = 0\n        var lastSixtySix = 0\n        var lastSixtySeven\
    \ = 0\n        var lastSixtyEight = 0", "        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val counts = mutable.Map[Long,\
    \ Long]()\n        val starts = mutable.Set[Long]()\n        val ends = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val ones = mutable.Set", " \
    \       val ones = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount2 = mutable.ListBuffer[Long]()\n        val onesCount3 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val onesCount5 = mutable.ListBuffer[Long]()\n        val onesCount6 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val onesCount8 = mutable.ListBuffer[Long]()\n        val onesCount9 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val onesCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val onesCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val onesCount17 = mutable.ListBuffer[Long]()\n        val onesCount18\
    \ = mutable.ListBuffer[Long]()\n        val onesCount19 = mutable.ListBuffer[Long]()\n\
    \        val onesCount20 = mutable.ListBuffer[Long]()\n        val onesCount21\
    \ = mutable.ListBuffer[Long]()\n        val onesCount22 = mutable.ListBuffer[Long]()\n\
    \        val onesCount23 = mutable.ListBuffer[Long]()\n        val onesCount24\
    \ = mutable.ListBuffer[Long]()\n        val onesCount25 = mutable.ListBuffer[Long]()\n\
    \        val onesCount26 = mutable.ListBuffer[Long]()\n        val onesCount27\
    \ = mutable.ListBuffer[Long]()\n        val onesCount28 = mutable.ListBuffer[Long]()\n\
    \        val onesCount29 = mutable.ListBuffer[Long]()\n        val onesCount30\
    \ = mutable.ListBuffer[Long]()\n        val onesCount31 = mutable.ListBuffer[Long]()\n\
    \        val onesCount32 = mutable.ListBuffer[Long]()\n", "        val ones =\
    \ mutable.ListBuffer(1)\n        val zeros = mutable.ListBuffer(0)\n        val\
    \ count = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val zerosCount = mutable.ListBuffer[Long]()\n        while(n > 0){\n\
    \            val digit = n % 10\n            n /= 10\n            if(digit ==\
    \ 1){\n                ones += digit\n                onesCount += digit\n   \
    \         }\n            else{\n                zeros += digit\n             \
    \   zerosCount += digit\n            }\n        }\n        while(ones.nonEmpty){\n\
    \            count += ones.length\n            onesCount += ones.last\n      \
    \      ones = ones.dropRight(1)\n        }\n        while(zeros.nonEmpty){\n \
    \           count += zeros.length\n            zerosCount += zeros.last\n    \
    \        zeros = zeros.dropRight(1)\n        }\n        count.toList.sum", " \
    \       val ones = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount2 = mutable.ListBuffer[Long]()\n        val onesCount3 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val onesCount5 = mutable.ListBuffer[Long]()\n        val onesCount6 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val onesCount8 = mutable.ListBuffer[Long]()\n        val onesCount9 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val onesCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val onesCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val onesCount17 = mutable.ListBuffer[Long]()\n        val onesCount18\
    \ = mutable.ListBuffer[Long]()\n        val onesCount19 = mutable.ListBuffer[Long]()\n\
    \        val onesCount20 = mutable.ListBuffer[Long]()\n        val onesCount21\
    \ = mutable.ListBuffer[Long]()\n        val onesCount22 = mutable.ListBuffer[Long]()\n\
    \        val onesCount23 = mutable.ListBuffer[Long]()\n        val onesCount24\
    \ = mutable.ListBuffer[Long]()\n        val onesCount25 = mutable.ListBuffer[Long]()\n\
    \        val onesCount26 = mutable.ListBuffer[Long]()\n        val onesCount27\
    \ = mutable.ListBuffer[Long]()\n        val onesCount28 = mutable.ListBuffer[Long]()\n\
    \        val onesCount29 = mutable.ListBuffer[Long]()\n        val onesCount30\
    \ = mutable.ListBuffer[Long]()\n        val onesCount31 = mutable.ListBuffer[Long]()\n\
    \        val onesCount32 = mutable.ListBuffer[Long]()\n", "        val ones =\
    \ mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n        val onesCount\
    \ = mutable.Set[Long]()\n        val zerosCount = mutable.Set[Long]()\n      \
    \  val onesCount2 = mutable.Set[Long]()\n        val zerosCount2 = mutable.Set[Long]()\n\
    \        val onesCount3 = mutable.Set[Long]()\n        val zerosCount3 = mutable.Set[Long]()\n\
    \        val onesCount4 = mutable.Set[Long]()\n        val zerosCount4 = mutable.Set[Long]()\n\
    \        val onesCount5 = mutable.Set[Long]()\n        val zerosCount5 = mutable.Set[Long]()\n\
    \        val onesCount6 = mutable.Set[Long]()\n        val zerosCount6 = mutable.Set[Long]()\n\
    \        val onesCount7 = mutable.Set[Long]()\n        val zerosCount7 = mutable.Set[Long]()\n\
    \        val onesCount8 = mutable.Set[Long]()\n        val zerosCount8 = mutable.Set[Long]()\n\
    \        val onesCount9 = mutable.Set[Long]()\n        val zerosCount9 = mutable.Set[Long]()\n\
    \        val onesCount10 = mutable.Set[Long]()\n        val zerosCount10 = mutable.Set[Long]()\n\
    \        val onesCount11 = mutable.Set[Long]()\n        val zerosCount11 = mutable.Set[Long]()\n\
    \        val onesCount12 = mutable.Set[Long]()\n        val zerosCount12 = mutable.Set[Long]()\n\
    \        val onesCount13 = mutable.Set[Long]()\n        val zerosCount13 = mutable.Set[Long]()\n\
    \        val onesCount14 = mutable.Set[Long]()\n        val zerosCount14 = mutable.Set[Long]()\n\
    \        val onesCount15 = mutable.Set[Long]()\n        val zerosCount15 = mutable.Set[Long]()\n\
    \        val onesCount16 = mutable.Set[Long]()\n        val zerosCount16 = mutable.Set[Long]()\n\
    \        val onesCount17 = mutable.Set[Long]()\n        val zerosCount17 = mutable.Set[Long]()\n\
    \        val onesCount18 = mutable.Set[Long]()\n        val zerosCount18 = ",
  "        val ones = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n\
    \        val count = mutable.Map[Long, Long]()\n        val digits = n.toString.reverse.grouped(2).map(_.reverse).map(_.toLong)\n\
    \        digits.foreach(x => if (x == 1) ones += x else zeros += x)\n        ones.foreach(x\
    \ => count += (x -> ones.size))\n        zeros.foreach(x => count += (x -> zeros.size))\n\
    \        count.values.sum", "        val ones = mutable.ArrayBuffer(1)\n     \
    \   val zeros = mutable.ArrayBuffer(0)\n        val counts = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount = mutable.ArrayBuffer.empty[Long]\n        val zerosCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n        val onesCountZeros\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCountZeros = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCountOnes = mutable.ArrayBuffer.empty[Long]\n        val zerosCountOnes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountZeroOnes = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCountZeroOnes = mutable.ArrayBuffer.empty[Long]\n        val\
    \ onesCountOneOnes = mutable.ArrayBuffer.empty[Long]\n        val zerosCountOneOnes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountZeroZeros = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCountZeroZeros = mutable.ArrayBuffer.empty[Long]\n        val\
    \ onesCountOneZeros = mutable.ArrayBuffer.empty[Long]\n        val zerosCountOneZeros\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountOneOneZeros = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCountOneOneZeros = mutable.ArrayBuffer.empty[Long]\n       \
    \ val onesCountZeroOneOnes = mutable.ArrayBuffer.empty[Long]\n        val zerosCountZeroOneOnes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountOneZeroOnes = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCountOneZeroOnes = mutable.ArrayBuffer.empty[Long]\n       \
    \ val onesCountOneOneZeroOnes = mutable.ArrayBuffer.empty[Long]\n        val zerosCountOneOneZeroOnes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountZeroZeroZeros = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCountZeroZeroZeros = mutable.ArrayBuffer.empty[Long]\n     \
    \   val onesCountOneZeroZeros = mutable.ArrayBuffer.empty[Long]\n        val zerosCountOneZeroZeros\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountOneOneZeroZeros = mutable.ArrayBuffer.empty[Long",
  "        val ones = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val zerosCount = mutable.Set[Long]()\n\
    \        val counts = mutable.Map[Long, Long]()\n        val countsCount = mutable.Map[Long,\
    \ Long]()\n        val onesCount = mutable.Set[Long]()\n        val zerosCount\
    \ = mutable.Set[Long]()\n        val counts = mutable.Map[Long, Long]()\n    \
    \    val countsCount = mutable.Map[Long, Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val zerosCount = mutable.Set[Long]()\n        val counts = mutable.Map[Long,\
    \ Long]()\n        val countsCount = mutable.Map[Long, Long]()\n        val onesCount\
    \ = mutable.Set[Long]()\n        val zerosCount = mutable.Set[Long]()\n      \
    \  val counts = mutable.Map[Long, Long]()\n        val countsCount = mutable.Map[Long,\
    \ Long]()\n        val onesCount = mutable.Set[Long]()\n        val zerosCount\
    \ = mutable.Set[Long]()\n        val counts = mutable.Map[Long, Long]()\n    \
    \    val countsCount = mutable.Map[Long, Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val zerosCount = mutable.Set[Long]()\n        val counts = mutable.Map[Long,\
    \ Long]()\n        val countsCount = mutable.Map[Long, Long]()\n        val onesCount\
    \ = mutable.Set[Long]()\n        val zerosCount = mutable.Set[Long]()\n      \
    \  val counts = mutable.Map[Long, Long]()\n        val countsCount = mutable.Map[Long,\
    \ Long]()\n        val onesCount = mutable.Set[Long]()\n        val zerosCount\
    \ = mutable.Set[Long]()\n        val counts = mutable.Map[Long, Long]()\n    \
    \    val countsCount = mutable.Map[Long, Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val zerosCount = mutable.Set[Long]()\n        val counts = mutable.Map[Long,\
    \ Long]()\n        val countsCount = mutable.Map[Long, Long]()\n        val onesCount\
    \ = mutable.Set[Long]()\n        val zerosCount = mutable.Set", "        val ones\
    \ = mutable.ListBuffer(1)\n        val zeros = mutable.ListBuffer(0)\n       \
    \ val count = mutable.ListBuffer[Long]()\n        var i = 0\n        while(i <\
    \ n) {\n            val x = ones + zeros\n            val y = ones + zeros\n \
    \           val z = ones + zeros\n            val w = ones + zeros\n         \
    \   val z = ones + zeros\n            val y = ones + zeros\n            val x\
    \ = ones + zeros\n            val z = ones + zeros\n            val w = ones +\
    \ zeros\n            val z = ones + zeros\n            val y = ones + zeros\n\
    \            val x = ones + zeros\n            val z = ones + zeros\n        \
    \    val w = ones + zeros\n            val z = ones + zeros\n            val y\
    \ = ones + zeros\n            val x = ones + zeros\n            val z = ones +\
    \ zeros\n            val w = ones + zeros\n            val z = ones + zeros\n\
    \            val y = ones + zeros\n            val x = ones + zeros\n        \
    \    val z = ones + zeros\n            val w = ones + zeros\n            val z\
    \ = ones + zeros\n            val y = ones + zeros\n            val x = ones +\
    \ zeros\n            val z = ones + zeros\n            val w = ones + zeros\n\
    \            val z = ones + zeros\n            val y = ones + zeros\n        \
    \    val x = ones + zeros\n            val z = ones + zeros\n            val w\
    \ = ones + zeros\n            val z = ones + zeros\n            val y = ones +\
    \ zeros\n            val x = ones + zeros\n            val z = ones + zeros\n\
    \            val w = ones + zeros\n            val z = ones + zeros\n        \
    \    val y = ones + zeros\n            val x = ones + zeros\n            val z\
    \ = ones + zeros\n            val w = ones + zeros\n            val z = ones +\
    \ zeros\n            val y = ones + zeros\n            val x = ones + zeros\n\
    \            val z = ones + zeros\n            val w = ones + zeros\n        \
    \    val z = ones + zeros\n            val y = ones + zeros\n            val x\
    \ = ones + zeros\n            val z = ones + zeros\n            val w = ones +\
    \ zeros\n            val z = ones + zeros\n            val y = ones + zeros\n\
    \            val x = ones + zeros\n            val z = ones + zeros\n        \
    \    val w = ones + zeros\n            val z = ones + zeros\n            val y\
    \ = ones + zeros\n            val x = ones + zeros\n            val z = ones +\
    \ zeros\n            val w = ones + zeros\n            val z = ones + zeros\n\
    \            val y = ones + zeros\n            val x = ones + zeros\n        \
    \    val z = ", "        var count = 0\n        var start = 1\n        var end\
    \ = n\n        while (start <= end) {\n            if (start % 10 == 1 && end\
    \ % 10 != 1) {\n                count += 1\n            }\n            start +=\
    \ 1\n            end -= 1\n        }\n        count", "        val ones = mutable.ListBuffer.empty[Long]\n\
    \        val zeros = mutable.ListBuffer.empty[Long]\n        for (i <- 1 to n)\
    \ if (i % 10 == 1) ones += i\n        for (i <- n until 1 by -1) if (i % 10 ==\
    \ 0) zeros += i\n        ones.size + zeros.size", "        val counts = mutable.HashMap.empty[Long,\
    \ Long]\n        val ones = mutable.ArrayBuffer.empty[Long]\n        val zeros\
    \ = mutable.ArrayBuffer.empty[Long]\n        val max = (n / 10).toInt\n      \
    \  val min = (n / 10).toInt\n        val onesCount = min\n        val zerosCount\
    \ = max\n        val onesIndex = min\n        val zerosIndex = max\n        val\
    \ onesCount = min\n        val zerosCount = max\n        val onesIndex = min\n\
    \        val zerosIndex = max\n        val onesCount = min\n        val zerosCount\
    \ = max\n        val onesIndex = min\n        val zerosIndex = max\n        val\
    \ onesCount = min\n        val zerosCount = max\n        val onesIndex = min\n\
    \        val zerosIndex = max\n        val onesCount = min\n        val zerosCount\
    \ = max\n        val onesIndex = min\n        val zerosIndex = max\n        val\
    \ onesCount = min\n        val zerosCount = max\n        val onesIndex = min\n\
    \        val zerosIndex = max\n        val onesCount = min\n        val zerosCount\
    \ = max\n        val onesIndex = min\n        val zerosIndex = max\n        val\
    \ onesCount = min\n        val zerosCount = max\n        val onesIndex = min\n\
    \        val zerosIndex = max\n        val onesCount = min\n        val zerosCount\
    \ = max\n        val onesIndex = min\n        val zerosIndex = max\n        val\
    \ onesCount = min\n        val zerosCount = max\n        val onesIndex = min\n\
    \        val zerosIndex = max\n        val onesCount = min\n        val zerosCount\
    \ = max\n        val onesIndex = min\n        val zerosIndex = max\n        val\
    \ onesCount = min\n        val zerosCount = max\n        val onesIndex = min\n\
    \        val zerosIndex = max\n        val onesCount = min\n        val zerosCount\
    \ = max\n        val onesIndex = min\n        val zerosIndex = max\n        val\
    \ onesCount = min\n        val zerosCount = max\n        val onesIndex = min\n\
    \        val zerosIndex = max\n        val onesCount = min\n        val zerosCount\
    \ = max\n        val onesIndex = min\n        val zerosIndex = max\n        val\
    \ onesCount = min\n        val zerosCount = max\n        val onesIndex = min\n\
    \        val zerosIndex = max\n        val onesCount = min\n        val zerosCount\
    \ = max\n        val onesIndex = min\n        val zerosIndex = max\n        val\
    \ onesCount = min\n        val ", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val zeros = mutable.ListBuffer[Long]()\n        val counts = mutable.ListBuffer[Long]()\n\
    \        val digits = n.toString.reverse.grouped(2).map(_.toInt)\n        val\
    \ digit = digits(0)\n        val digit2 = digits(1)\n        val digit3 = digits(2)\n\
    \        val digit4 = digits(3)\n        val digit5 = digits(4)\n        val digit6\
    \ = digits(5)\n        val digit7 = digits(6)\n        val digit8 = digits(7)\n\
    \        val digit9 = digits(8)\n        val digit10 = digits(9)\n        val\
    \ digit11 = digits(10)\n        val digit12 = digits(11)\n        val digit13\
    \ = digits(12)\n        val digit14 = digits(13)\n        val digit15 = digits(14)\n\
    \        val digit16 = digits(15)\n        val digit17 = digits(16)\n        val\
    \ digit18 = digits(17)\n        val digit19 = digits(18)\n        val digit20\
    \ = digits(19)\n        val digit21 = digits(20)\n        val digit22 = digits(21)\n\
    \        val digit23 = digits(22)\n        val digit24 = digits(23)\n        val\
    \ digit25 = digits(24)\n        val digit26 = digits(25)\n        val digit27\
    \ = digits(26)\n        val digit28 = digits(27)\n        val digit29 = digits(28)\n\
    \        val digit30 = digits(29)\n        val digit31 = digits(30)\n        val\
    \ digit32 = digits(31)\n        val digit33 = digits(32)\n        val digit34\
    \ = digits(33)\n        val digit35 = digits(34)\n        val digit36 = digits(35)\n\
    \        val digit37 = digits(36)\n        val digit38 = digits(37)\n        val\
    \ digit39 = digits(38)\n        val digit40 = digits(39)\n        val digit41\
    \ = digits(40)\n        val digit42 = digits(41)\n        val digit43 = digits(42)\n\
    \        val digit44 = digits(43)\n        val digit45 = digits(44)\n        val\
    \ digit46 = digits(45)\n        val digit47 = digits(46)\n        val digit48\
    \ = digits(47)\n        val digit49 = digits(48)\n        val digit50", "    \
    \    val ones = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount2 = mutable.ListBuffer[Long]()\n        val onesCount3 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val onesCount5 = mutable.ListBuffer[Long]()\n        val onesCount6 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val onesCount8 = mutable.ListBuffer[Long]()\n        val onesCount9 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val onesCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val onesCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val onesCount17 = mutable.ListBuffer[Long]()\n        val onesCount18\
    \ = mutable.ListBuffer[Long]()\n        val onesCount19 = mutable.ListBuffer[Long]()\n\
    \        val onesCount20 = mutable.ListBuffer[Long]()\n        val onesCount21\
    \ = mutable.ListBuffer[Long]()\n        val onesCount22 = mutable.ListBuffer[Long]()\n\
    \        val onesCount23 = mutable.ListBuffer[Long]()\n        val onesCount24\
    \ = mutable.ListBuffer[Long]()\n        val onesCount25 = mutable.ListBuffer[Long]()\n\
    \        val onesCount26 = mutable.ListBuffer[Long]()\n        val onesCount27\
    \ = mutable.ListBuffer[Long]()\n        val onesCount28 = mutable.ListBuffer[Long]()\n\
    \        val onesCount29 = mutable.ListBuffer[Long]()\n        val onesCount30\
    \ = mutable.ListBuffer[Long]()\n        val onesCount31 = mutable.ListBuffer[Long]()\n\
    \        val onesCount32 = mutable.ListBuffer[Long]()\n", "        val ones =\
    \ mutable.ArrayBuffer.empty[Long]\n        val zeros = mutable.ArrayBuffer.empty[Long]\n\
    \        val counts = mutable.ArrayBuffer.empty[Long]\n        val onesCount =\
    \ mutable.ArrayBuffer.empty[Long]\n        val zerosCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val countsCount = mutable.ArrayBuffer.empty[Long]\n        val onesCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val countsCountCount = mutable.ArrayBuffer.empty[Long]\n        val onesCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val countsCountCountCount = mutable.ArrayBuffer.empty[Long]\n       \
    \ val onesCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ zerosCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n        val countsCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val countsCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val countsCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val countsCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val countsCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCountCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val countsCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[", "        val ones = mutable.Set[Long]()\n   \
    \     val zeros = mutable.Set[Long]()\n        val counts = mutable.Map[Long,\
    \ Long]()\n        val digits = n.toString.reverse.grouped(10).toList\n      \
    \  val digit = digits(0)\n        val digitCount = digit.count(_ == '1')\n   \
    \     val digitZeroCount = digit.count(_ == '0')\n        val digitOneCount =\
    \ digit.count(_ == '1')\n        val digitZeroOneCount = digit.count(_ == '0'\
    \ && _ == '1')\n        val digitOneZeroCount = digit.count(_ == '1' && _ == '0')\n\
    \        val digitZeroZeroCount = digit.count(_ == '0' && _ == '0')\n        val\
    \ digitOneOneCount = digit.count(_ == '1' && _ == '1')\n        val digitZeroOneOneCount\
    \ = digit.count(_ == '0' && _ == '1' && _ == '1')\n        val digitOneZeroOneCount\
    \ = digit.count(_ == '1' && _ == '0' && _ == '1')\n        val digitZeroZeroOneCount\
    \ = digit.count(_ == '0' && _ == '0' && _ == '1')\n        val digitOneOneOneCount\
    \ = digit.count(_ == '1' && _ == '1' && _ == '0')\n        val digitZeroOneZeroCount\
    \ = digit.count(_ == '0' && _ == '1' && _ == '0')\n        val digitOneZeroZeroCount\
    \ = digit.count(_ == '1' && _ == '0' && _ == '0')\n        val digitZeroZeroZeroCount\
    \ = digit.count(_ == '0' && _ == '0' && _ == '0')\n        val digitOneOneOneOneCount\
    \ = digit.count(_ == '1' && _ == '1' && _ == '1' && _ == '0')\n        val digitZeroOneOneZeroCount\
    \ = digit.count(_ == '0' && _ == '1' && _ == '1' && _ == '0')\n        val digitOneZeroOneZeroCount\
    \ = digit.count(_ == '1' && _ == '0' && _ == '1' && _ == '0')\n        val digitZeroZeroOneZeroCount\
    \ = digit.count(_ == '0' && _ == '0' && _ == '1' && _ == '0')\n        val digitOneOneZeroZeroCount\
    \ = digit.count(_ == '1' && _ == '1' && _ == '0' && _ == '0')\n        val digitZeroOneOneZeroCount\
    \ = digit.count(_ == '0' && _ == '1' && _ == '1' && _ == '0')\n        val digitOneZeroOneOneCount\
    \ = digit.count(_ == '1' && _ == '0' && _ == '1' && _ == '1')\n        val digitZeroZero",
  "        var count = 0\n        for(i <- 1 to n){\n            if(i%10 == 1){\n\
    \                count += 1\n            }\n        }\n        return count",
  "        val ones = mutable.ListBuffer(1)\n        val zeros = mutable.ListBuffer(0)\n\
    \        val counts = mutable.ListBuffer[Long]()\n        while(n > 0){\n    \
    \        val digit = n % 10\n            n /= 10\n            if(digit == 1){\n\
    \                ones += digit\n            }else{\n                zeros += digit\n\
    \            }\n        }\n        while(ones.size > 0){\n            val digit\
    \ = ones.head % 10\n            ones.head /= 10\n            if(digit == 1){\n\
    \                counts += digits.tail\n            }\n        }\n        while(zeros.size\
    \ > 0){\n            val digit = zeros.head % 10\n            zeros.head /= 10\n\
    \            if(digit == 1){\n                counts += digits.tail\n        \
    \    }\n        }\n        counts.sum", "        val ones = mutable.ListBuffer[Long]()\n\
    \        var count = 0\n        while (n > 0) {\n            ones += n\n     \
    \       n /= 10\n            count += 1\n        }\n        ones.toList.count(_\
    \ == 1)", "        val ones = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n\
    \        val counts = mutable.Map[Long, Long]()\n        val nums = mutable.Range(0,\
    \ n).map(i => i.toLong)\n        val onesAndZeros = nums.filter(x => x == 1)\n\
    \        onesAndZeros.foreach(x => if (ones.contains(x)) counts(x) else zeros.add(x))\n\
    \        ones.size + zeros.size", "        val ones = mutable.ListBuffer(1)\n\
    \        val zeros = mutable.ListBuffer(0)\n        val counts = mutable.ListBuffer[Long]()\n\
    \        var count = 0\n        while(n > 0) {\n            val remainder = n\
    \ % 10\n            n /= 10\n            ones += remainder\n            zeros\
    \ += n - remainder\n            count += 1\n        }\n        while(ones.nonEmpty)\
    \ {\n            val first = ones.head\n            val last = ones.last\n   \
    \         if(first == 1) {\n                counts += last\n                ones.remove(last)\n\
    \            }\n        }\n        while(zeros.nonEmpty) {\n            val first\
    \ = zeros.head\n            val last = zeros.last\n            if(first == 1)\
    \ {\n                counts += last\n                zeros.remove(last)\n    \
    \        }\n        }\n        counts.toList.size", "        var count = 0\n \
    \       val ones = List(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L,\
    \ 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L,\
    \ 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L, 41L, 42L, 43L, 44L, 45L,\
    \ 46L, 47L, 48L, 49L, 50L, 51L, 52L, 53L, 54L, 55L, 56L, 57L, 58L, 59L, 60L, 61L,\
    \ 62L, 63L, 64L, 65L, 66L, 67L, 68L, 69L, 70L, 71L, 72L, 73L, 74L, 75L, 76L, 77L,\
    \ 78L, 79L, 80L, 81L, 82L, 83L, 84L, 85L, 86L, 87L, 88L, 89L, 90L, 91L, 92L, 93L,\
    \ 94L, 95L, 96L, 97L, 98L, 99L, 100L, 101L, 102L, 103L, 104L, 105L, 106L, 107L,\
    \ 108L, 109L, 110L, 111L, 112L, 113L, 114L, 115L, 116L, 117L, 118L, 119L, 120L,\
    \ 121L, 122L, 123L, 124L, 125L, 126L, 127L, 128L, 129L, 130L, 131L, 132L, 133L,\
    \ 134L, 135L, 136L, 137L, 138L, 139L, 140L, 141L, 142L, 143L, 144L, 145L, 146L,\
    \ 147L, 148L, 149L, 150L, 151L, 152L, 153L, 154L, 155L, 156L, 157L, 158L, 159L,\
    \ 160L, 161L, 162L, 163L, 164L, 165L, 166L, 167L, 168L, 169L, 170L, 171L, 172L,\
    \ 173L, 174L, 175L, 176L, 177L, 178L, 179L, 180L, 181L, 182L, 183L, 184L, 185L,\
    \ 186L, 187L, 188L, 189L, 190L, 191L, 192L, 193L, 194L, 195L, 196L, 197L, 198L,\
    \ 199L, 200L, 201L, 202L, 203L, 204L, 205L, 206L, 207L, 208L, 209L, 210L, 211L,\
    \ 212L, 213L, 214L, 215L, 216L, 217L, 218L, 219L, 220L, 221L, 222L, 223L, 224L,\
    \ 225L, 226L, 227L, 228L, 229L, 230L, 231L, 232L, 233L, 234L, 235L, 236L, 237L,\
    \ 238L, 239L, 240L, 24", "        val counts = mutable.HashMap[Long, Long]()\n\
    \        val ones = mutable.Array[Long](1)\n        val zeros = mutable.Array[Long](0)\n\
    \        val onesCount = mutable.Array[Long](1)\n        val zerosCount = mutable.Array[Long](0)\n\
    \        val onesCounts = mutable.Array[Long](1)\n        val zerosCounts = mutable.Array[Long](0)\n\
    \        val onesCounts = mutable.Array[Long](1)\n        val zerosCounts = mutable.Array[Long](0)\n\
    \        val onesCounts = mutable.Array[Long](1)\n        val zerosCounts = mutable.Array[Long](0)\n\
    \        val onesCounts = mutable.Array[Long](1)\n        val zerosCounts = mutable.Array[Long](0)\n\
    \        val onesCounts = mutable.Array[Long](1)\n        val zerosCounts = mutable.Array[Long](0)\n\
    \        val onesCounts = mutable.Array[Long](1)\n        val zerosCounts = mutable.Array[Long](0)\n\
    \        val onesCounts = mutable.Array[Long](1)\n        val zerosCounts = mutable.Array[Long](0)\n\
    \        val onesCounts = mutable.Array[Long](1)\n        val zerosCounts = mutable.Array[Long](0)\n\
    \        val onesCounts = mutable.Array[Long](1)\n        val zerosCounts = mutable.Array[Long](0)\n\
    \        val onesCounts = mutable.Array[Long](1)\n        val zerosCounts = mutable.Array[Long](0)\n\
    \        val onesCounts = mutable.Array[Long](1)\n        val zerosCounts = mutable.Array[Long](0)\n\
    \        val onesCounts = mutable.Array[Long](1)\n        val zerosCounts = mutable.Array[Long](0)\n\
    \        val onesCounts = mutable.Array[Long](1)\n        val zerosCounts = mutable.Array[Long](0)\n\
    \        val onesCounts = mutable.Array[Long](1)\n        val zerosCounts = mutable.Array[Long](0)\n\
    \        val onesCounts = mutable.Array[Long](1)\n        val zerosCounts = mutable.Array[Long](0)\n\
    \        val onesCounts = mutable.Array[Long](1)\n        val zerosCounts = mutable.Array[Long](0)\n\
    \        val onesCounts = mutable.Array[Long](1)\n        val zeros", "      \
    \  val ones = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount2 = mutable.ListBuffer[Long]()\n        val onesCount3 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val onesCount5 = mutable.ListBuffer[Long]()\n        val onesCount6 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val onesCount8 = mutable.ListBuffer[Long]()\n        val onesCount9 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val onesCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val onesCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val onesCount17 = mutable.ListBuffer[Long]()\n        val onesCount18\
    \ = mutable.ListBuffer[Long]()\n        val onesCount19 = mutable.ListBuffer[Long]()\n\
    \        val onesCount20 = mutable.ListBuffer[Long]()\n        val onesCount21\
    \ = mutable.ListBuffer[Long]()\n        val onesCount22 = mutable.ListBuffer[Long]()\n\
    \        val onesCount23 = mutable.ListBuffer[Long]()\n        val onesCount24\
    \ = mutable.ListBuffer[Long]()\n        val onesCount25 = mutable.ListBuffer[Long]()\n\
    \        val onesCount26 = mutable.ListBuffer[Long]()\n        val onesCount27\
    \ = mutable.ListBuffer[Long]()\n        val onesCount28 = mutable.ListBuffer[Long]()\n\
    \        val onesCount29 = mutable.ListBuffer[Long]()\n        val onesCount30\
    \ = mutable.ListBuffer[Long]()\n        val onesCount31 = mutable.ListBuffer[Long]()\n\
    \        val onesCount32 = mutable.ListBuffer[Long]()\n", "        var count =\
    \ 0\n        val ones = Vector.fill(n / 10)(1)\n        val tens = Vector.fill(n\
    \ / 10)(10)\n        val tensPlusOnes = tens.zip(ones)\n        val onesPlusTens\
    \ = ones.zip(tens)\n        val onesPlusTensPlusOnes = onesPlusTens.zip(onesPlusOnes)\n\
    \        onesPlusTensPlusOnes.foreach { case (ones, tens, onesPlusTensPlusOnes)\
    \ =>\n            if (ones == 1 && tens == 10) {\n                count += 1\n\
    \            } else if (ones == 1 && tens == 1) {\n                count += 1\n\
    \            } else if (ones == 1 && tens == 10) {\n                count += 1\n\
    \            } else if (ones == 10 && tens == 1) {\n                count += 1\n\
    \            } else if (ones == 10 && tens == 10) {\n                count +=\
    \ 1\n            } else if (ones == 10 && tens == 1) {\n                count\
    \ += 1\n            } else if (ones == 1 && tens == 1) {\n                count\
    \ += 1\n            } else if (ones == 1 && tens == 10) {\n                count\
    \ += 1\n            } else if (ones == 10 && tens == 1) {\n                count\
    \ += 1\n            } else if (ones == 10 && tens == 10) {\n                count\
    \ += 1\n            } else if (ones == 10 && tens == 1) {\n                count\
    \ += 1\n            } else if (ones == 1 && tens == 1) {\n                count\
    \ += 1\n            } else if (ones == 1 && tens == 10) {\n                count\
    \ += 1\n            } else if (ones == 10 && tens == 1) {\n                count\
    \ += 1\n            } else if (ones == 10 && tens == 10) {\n                count\
    \ += 1\n            } else if (ones == 10 && tens == 1) {\n                count\
    \ += 1\n            } else if (ones == 1 && tens == 1) {\n                count\
    \ += 1\n            } else if (ones == 1 && tens == 10) {\n                count\
    \ += 1\n            } else if (ones == 10 && tens == 1) {\n                count\
    \ += 1\n            } else if (ones == 10 && tens == 10) {\n                count\
    \ += 1\n            } else if (ones == 10 && tens == 1) {\n                count\
    \ += 1\n            } else if (ones == 1 && tens == 1) {\n                count\
    \ += 1\n            } else if (ones == 1 && tens == 10) {\n                count\
    \ += 1\n            } else if (ones == 10 && tens == 1) {\n                count\
    \ += 1\n            } else if (ones == 10 && tens == 10) {\n                count\
    \ += 1\n            } else if (ones == 10 && tens == 1) {\n                count\
    \ += 1\n            } else if (ones == 1 && tens == 1) {\n                count\
    \ += 1\n            } else if (ones == 1 && tens == 10) {\n                count\
    \ += 1\n            } else if (ones == 10 && tens == 1) {\n                count\
    \ += 1\n            } else if (ones == 10 && tens == 10) {\n                count\
    \ += 1\n            } else if (ones == 10 && tens == 1) {\n                count\
    \ += 1\n            } else if (ones == 1 && tens == 1) {\n                count\
    \ += 1\n            } else if (ones == 1 && tens == 10) {\n                count\
    \ += 1\n            } else if (ones == 10 && tens == 1) {\n                count\
    \ += 1\n            } else if (", "        val ones = mutable.ArrayBuffer(1)\n\
    \        val zeros = mutable.ArrayBuffer(0)\n        var count = 0\n        while(n\
    \ > 0){\n            val nextOne = ones.last\n            val nextZero = zeros.last\n\
    \            if(n == nextOne || n == nextZero){\n                count += 1\n\
    \            }\n            ones += nextOne\n            zeros += nextZero\n \
    \           n -= 1\n        }\n        count", "        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val counts = mutable.Map[Long,\
    \ Long]()\n        val n = n.toInt\n        for(i <- 1 to n){\n            val\
    \ digit = i / 10\n            if(i % 10 == 1){\n                ones += digit\n\
    \            }\n            else if(i % 10 == 0){\n                zeros += digit\n\
    \            }\n            else{\n                counts += digit -> counts.getOrElse(digit,\
    \ 0) + 1\n            }\n        }\n        val oneCount = ones.size\n       \
    \ val zeroCount = zeros.size\n        val totalCount = oneCount + zeroCount\n\
    \        val oneCounts = ones.map(i => counts.getOrElse(i, 0)).sum\n        val\
    \ zeroCounts = zeros.map(i => counts.getOrElse(i, 0)).sum\n        val totalCounts\
    \ = oneCounts + zeroCounts\n        val oneCountPercentage = oneCounts.toDouble\
    \ / totalCounts.toDouble\n        val zeroCountPercentage = zeroCounts.toDouble\
    \ / totalCounts.toDouble\n        val totalCountPercentage = totalCounts.toDouble\
    \ / totalCounts.toDouble\n        val oneCountPercentageString = oneCountPercentage.toString.replaceAll(\"\
    \\\\.\", \"%\")\n        val zeroCountPercentageString = zeroCountPercentage.toString.replaceAll(\"\
    \\\\.\", \"%\")\n        val totalCountPercentageString = totalCountPercentage.toString.replaceAll(\"\
    \\\\.\", \"%\")\n        val oneCountPercentageString = oneCountPercentageString.replaceAll(\"\
    \\\\.0$\", \"\")\n        val zeroCountPercentageString = zeroCountPercentageString.replaceAll(\"\
    \\\\.0$\", \"\")\n        val totalCountPercentageString = totalCountPercentageString.replaceAll(\"\
    \\\\.0$\", \"\")\n        val oneCountPercentageString = oneCountPercentageString.replaceAll(\"\
    \\\\.0\", \"\")\n        val zeroCountPercentageString = zeroCountPercentageString.replaceAll(\"\
    \\\\.0\", \"\")\n        val totalCountPercentageString = totalCountPercentageString.replaceAll(\"\
    \\\\.0\", \"\")\n        val oneCountPercentageString = oneCountPercentageString.replaceAll(\"\
    \\\\.0%\", \"\")\n        val zeroCountPercentageString = zeroCountPercentageString.replaceAll(\"\
    \\\\.0%\", \"\")\n        val totalCountPercentageString = totalCountPercentageString.replaceAll(\"\
    \\\\.0%\", \"\")\n        val oneCountPercentageString = oneCountPercentageString.replaceAll(\"\
    \\\\.0%$\", \"\")\n        val zeroCountPercentageString = zeroCountPercentageString.replaceAll(\"\
    \\\\.0%$\", \"\")\n        val totalCountPercentageString = totalCountPercentageString.replaceAll(\"\
    \\\\.0%", "        val ones = mutable.ListBuffer[Long]()\n        val zeros =\
    \ mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val zerosCount = mutable.ListBuffer[Long]()\n        val onesCount2 =\
    \ mutable.ListBuffer[Long]()\n        val zerosCount2 = mutable.ListBuffer[Long]()\n\
    \        val onesCount3 = mutable.ListBuffer[Long]()\n        val zerosCount3\
    \ = mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount4 = mutable.ListBuffer[Long]()\n        val onesCount5\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount5 = mutable.ListBuffer[Long]()\n\
    \        val onesCount6 = mutable.ListBuffer[Long]()\n        val zerosCount6\
    \ = mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount7 = mutable.ListBuffer[Long]()\n        val onesCount8\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount8 = mutable.ListBuffer[Long]()\n\
    \        val onesCount9 = mutable.ListBuffer[Long]()\n        val zerosCount9\
    \ = mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount10 = mutable.ListBuffer[Long]()\n        val onesCount11\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount11 = mutable.ListBuffer[Long]()\n\
    \        val onesCount12 = mutable.ListBuffer[Long]()\n        val zerosCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount13 = mutable.ListBuffer[Long]()\n        val onesCount14\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount14 = mutable.ListBuffer[Long]()\n\
    \        val onesCount15 = mutable.ListBuffer[Long]()\n        val zerosCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount16 = mutable.ListBuffer[Long]()\n        val onesCount17\
    \ = mutable.ListBuffer[Long]()\n", "        var count = 0\n        for(i <- 1\
    \ to n){\n            if(i%10 == 1){\n                count += 1\n           \
    \ }\n        }\n        return count", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount3 = mutable.ListBuffer[Long]()\n\
    \        val onesCount4 = mutable.ListBuffer[Long]()\n        val onesCount5 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount6 = mutable.ListBuffer[Long]()\n\
    \        val onesCount7 = mutable.ListBuffer[Long]()\n        val onesCount8 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount9 = mutable.ListBuffer[Long]()\n\
    \        val onesCount10 = mutable.ListBuffer[Long]()\n        val onesCount11\
    \ = mutable.ListBuffer[Long]()\n        val onesCount12 = mutable.ListBuffer[Long]()\n\
    \        val onesCount13 = mutable.ListBuffer[Long]()\n        val onesCount14\
    \ = mutable.ListBuffer[Long]()\n        val onesCount15 = mutable.ListBuffer[Long]()\n\
    \        val onesCount16 = mutable.ListBuffer[Long]()\n        val onesCount17\
    \ = mutable.ListBuffer[Long]()\n        val onesCount18 = mutable.ListBuffer[Long]()\n\
    \        val onesCount19 = mutable.ListBuffer[Long]()\n        val onesCount20\
    \ = mutable.ListBuffer[Long]()\n        val onesCount21 = mutable.ListBuffer[Long]()\n\
    \        val onesCount22 = mutable.ListBuffer[Long]()\n        val onesCount23\
    \ = mutable.ListBuffer[Long]()\n        val onesCount24 = mutable.ListBuffer[Long]()\n\
    \        val onesCount25 = mutable.ListBuffer[Long]()\n        val onesCount26\
    \ = mutable.ListBuffer[Long]()\n        val onesCount27 = mutable.ListBuffer[Long]()\n\
    \        val onesCount28 = mutable.ListBuffer[Long]()\n        val onesCount29\
    \ = mutable.ListBuffer[Long]()\n        val onesCount30 = mutable.ListBuffer[Long]()\n\
    \        val onesCount31 = mutable.ListBuffer[Long]()\n        val onesCount32\
    \ = mutable.ListBuffer[Long]()\n", "        val ones = mutable.Set[Long]()\n \
    \       val zeros = mutable.Set[Long]()\n        val counts = mutable.Map[Long,\
    \ Long]()\n        val countsMap = mutable.Map[Long, Long]()\n        val onesMap\
    \ = mutable.Map[Long, Long]()\n        val zerosMap = mutable.Map[Long, Long]()\n\
    \        val onesMap2 = mutable.Map[Long, Long]()\n        val zerosMap2 = mutable.Map[Long,\
    \ Long]()\n        val onesMap3 = mutable.Map[Long, Long]()\n        val zerosMap3\
    \ = mutable.Map[Long, Long]()\n        val onesMap4 = mutable.Map[Long, Long]()\n\
    \        val zerosMap4 = mutable.Map[Long, Long]()\n        val onesMap5 = mutable.Map[Long,\
    \ Long]()\n        val zerosMap5 = mutable.Map[Long, Long]()\n        val onesMap6\
    \ = mutable.Map[Long, Long]()\n        val zerosMap6 = mutable.Map[Long, Long]()\n\
    \        val onesMap7 = mutable.Map[Long, Long]()\n        val zerosMap7 = mutable.Map[Long,\
    \ Long]()\n        val onesMap8 = mutable.Map[Long, Long]()\n        val zerosMap8\
    \ = mutable.Map[Long, Long]()\n        val onesMap9 = mutable.Map[Long, Long]()\n\
    \        val zerosMap9 = mutable.Map[Long, Long]()\n        val onesMap10 = mutable.Map[Long,\
    \ Long]()\n        val zerosMap10 = mutable.Map[Long, Long]()\n        val onesMap11\
    \ = mutable.Map[Long, Long]()\n        val zerosMap11 = mutable.Map[Long, Long]()\n\
    \        val onesMap12 = mutable.Map[Long, Long]()\n        val zerosMap12 = mutable.Map[Long,\
    \ Long]()\n        val onesMap13 = mutable.Map[Long, Long]()\n        val zerosMap13\
    \ = mutable.Map[Long, Long]()\n        val onesMap14 = mutable.Map[Long, Long]()\n\
    \        val zerosMap14 = mutable.Map[Long, Long]()\n        val onesMap15 = mutable.Map[Long,\
    \ Long]()\n        val zerosMap15 = mutable.Map[Long, Long]()\n        val onesMap16\
    \ = mutable.Map[Long, Long]()\n        val zerosMap16 = ", "        val ones =\
    \ mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n       \
    \ val counts = mutable.ArrayBuffer(0)\n        val remainder = n % 10\n      \
    \  val digits = n / 10\n        while(digits > 0) {\n            val digit = digits\
    \ % 10\n            if(digit == 1) {\n                ones += digit\n        \
    \    }\n            else {\n                zeros += digit\n            }\n  \
    \          digits /= 10\n        }\n        while(ones.size > 0) {\n         \
    \   counts += ones.last\n            ones -= ones.last\n        }\n        while(remainder\
    \ > 0) {\n            counts += remainder\n            remainder /= 10\n     \
    \   }\n        while(zeros.size > 0) {\n            counts += zeros.last\n   \
    \         zeros -= zeros.last\n        }\n        counts.sum", "        val ones\
    \ = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n        val\
    \ counts = mutable.Map[Long, Long]()\n        val starts = mutable.Set[Long]()\n\
    \        val ends = mutable.Set[Long]()\n        val iter = Iterator.from(1).takeWhile(_\
    \ <= n)\n        val first = iter.next()\n        val last = iter.next()\n   \
    \     val firstDigit = math.pow(10, math.ceil(math.log(first) / math.log(10)))\n\
    \        val lastDigit = math.pow(10, math.ceil(math.log(last) / math.log(10)))\n\
    \        val digits = math.pow(10, math.ceil(math.log(n - 1) / math.log(10)))\n\
    \        val onesCount = math.ceil(digits / firstDigit)\n        val zerosCount\
    \ = math.ceil(digits / lastDigit)\n        val onesSet = ones.toSet\n        val\
    \ zerosSet = zeros.toSet\n        val countSet = counts.toSet\n        val startSet\
    \ = starts.toSet\n        val endSet = ends.toSet\n        val iter = Iterator.from(1).takeWhile(_\
    \ <= n)\n        val first = iter.next()\n        val last = iter.next()\n   \
    \     val firstDigit = math.pow(10, math.ceil(math.log(first) / math.log(10)))\n\
    \        val lastDigit = math.pow(10, math.ceil(math.log(last) / math.log(10)))\n\
    \        val digits = math.pow(10, math.ceil(math.log(n - 1) / math.log(10)))\n\
    \        val onesCount = math.ceil(digits / firstDigit)\n        val zerosCount\
    \ = math.ceil(digits / lastDigit)\n        val onesSet = ones.toSet\n        val\
    \ zerosSet = zeros.toSet\n        val countSet = counts.toSet\n        val startSet\
    \ = starts.toSet\n        val endSet = ends.toSet\n        val iter = Iterator.from(1).takeWhile(_\
    \ <= n)\n        val first = iter.next()\n        val last = iter.next()\n   \
    \     val firstDigit = math.pow(10, math.ceil(math.log(first) / math.log(10)))\n\
    \        val lastDigit = math.pow(10, math.ceil(math.log(last) / math.log(10)))\n\
    \        val digits = math.pow(10, math.ceil(math.log(n - 1) / math.log(10)))\n\
    \        val onesCount = math.ceil(digits / firstDigit)\n        val zerosCount\
    \ = math.ceil(digits / lastDigit)\n        val onesSet = ones.toSet\n        val\
    \ zerosSet = zeros.toSet\n        val countSet = counts.toSet\n        val startSet\
    \ = starts.toSet\n        val endSet = ends.toSet\n        ", "        var count\
    \ = 0\n        var last = 0\n        var current = 1\n        while (current <=\
    \ n) {\n            if (current == 1) {\n                count += 1\n        \
    \    } else {\n                count += last\n            }\n            last\
    \ = current\n            current += 1\n        }\n        count", "        val\
    \ ones = mutable.ArrayBuffer.empty[Long]\n        var count = 0\n        while(n\
    \ > 0) {\n            ones += n\n            n /= 10\n            count += 1\n\
    \        }\n        ones.length", "        val ones = mutable.ListBuffer[Long]()\n\
    \        var count = 0\n        var last = 0\n        while(n > 0) {\n       \
    \     val next = (n % 10) + 1\n            n /= 10\n            if(next == 1)\
    \ {\n                ones += last\n                count += 1\n            }\n\
    \            last = next\n        }\n        ones.length", "        val ones =\
    \ mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n       \
    \ val count = mutable.ArrayBuffer(0)\n        var i = 0\n        while (i < n)\
    \ {\n            if (ones.length == 0 || ones.last.isOne) {\n                ones\
    \ += 0\n                zeros += 0\n                count += 1\n            }\n\
    \            if (ones.last.isOne && ones.last.asInt == 1) {\n                ones\
    \ += 0\n                zeros += 0\n                count += 1\n            }\n\
    \            if (ones.last.isOne && ones.last.asInt == 0) {\n                zeros\
    \ += 1\n            }\n            i += 1\n        }\n        count.toLong", " \
    \       val ones = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n\
    \        val counts = mutable.Map[Long, Long]()\n        for (i <- 1 to n) {\n\
    \            val digit = i / 10\n            if (i % 10 == 1) {\n            \
    \    ones += digit\n            } else {\n                zeros += digit\n   \
    \         }\n        }\n        for (i <- 1 to n) {\n            val digit = i\
    \ / 10\n            if (i % 10 == 1) {\n                counts(digit) += 1\n \
    \           }\n        }\n        ones.toSet.count(_ == 1)", "        val ones\
    \ = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n        val\
    \ counts = mutable.Map[Long, Long]()\n        for (i <- 1 to n) {\n          \
    \  if (i % 10 == 1) {\n                ones += i\n            } else {\n     \
    \           zeros += i\n            }\n        }\n        for (i <- ones) {\n\
    \            counts(i) = counts.getOrElse(i, 0) + 1\n        }\n        for (i\
    \ <- zeros) {\n            counts(i) = counts.getOrElse(i, 0) - 1\n        }\n\
    \        counts.values.sum", "        val counts = mutable.HashMap.empty[Long,\
    \ Long]\n        val ones = mutable.ArrayBuffer.empty[Long]\n        for (i <-\
    \ 1 to n) {\n            val s = i.toString.length\n            if (s == 1) ones\
    \ += i\n            val c = counts.getOrElse(i, 0)\n            counts += i ->\
    \ c + s\n        }\n        ones.toList.size", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount3 = mutable.ListBuffer[Long]()\n\
    \        val onesCount4 = mutable.ListBuffer[Long]()\n        val onesCount5 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount6 = mutable.ListBuffer[Long]()\n\
    \        val onesCount7 = mutable.ListBuffer[Long]()\n        val onesCount8 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount9 = mutable.ListBuffer[Long]()\n\
    \        val onesCount10 = mutable.ListBuffer[Long]()\n        val onesCount11\
    \ = mutable.ListBuffer[Long]()\n        val onesCount12 = mutable.ListBuffer[Long]()\n\
    \        val onesCount13 = mutable.ListBuffer[Long]()\n        val onesCount14\
    \ = mutable.ListBuffer[Long]()\n        val onesCount15 = mutable.ListBuffer[Long]()\n\
    \        val onesCount16 = mutable.ListBuffer[Long]()\n        val onesCount17\
    \ = mutable.ListBuffer[Long]()\n        val onesCount18 = mutable.ListBuffer[Long]()\n\
    \        val onesCount19 = mutable.ListBuffer[Long]()\n        val onesCount20\
    \ = mutable.ListBuffer[Long]()\n        val onesCount21 = mutable.ListBuffer[Long]()\n\
    \        val onesCount22 = mutable.ListBuffer[Long]()\n        val onesCount23\
    \ = mutable.ListBuffer[Long]()\n        val onesCount24 = mutable.ListBuffer[Long]()\n\
    \        val onesCount25 = mutable.ListBuffer[Long]()\n        val onesCount26\
    \ = mutable.ListBuffer[Long]()\n        val onesCount27 = mutable.ListBuffer[Long]()\n\
    \        val onesCount28 = mutable.ListBuffer[Long]()\n        val onesCount29\
    \ = mutable.ListBuffer[Long]()\n        val onesCount30 = mutable.ListBuffer[Long]()\n\
    \        val onesCount31 = mutable.ListBuffer[Long]()\n        val onesCount32\
    \ = mutable.ListBuffer[Long]()\n", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount3 = mutable.ListBuffer[Long]()\n\
    \        val onesCount4 = mutable.ListBuffer[Long]()\n        val onesCount5 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount6 = mutable.ListBuffer[Long]()\n\
    \        val onesCount7 = mutable.ListBuffer[Long]()\n        val onesCount8 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount9 = mutable.ListBuffer[Long]()\n\
    \        val onesCount10 = mutable.ListBuffer[Long]()\n        val onesCount11\
    \ = mutable.ListBuffer[Long]()\n        val onesCount12 = mutable.ListBuffer[Long]()\n\
    \        val onesCount13 = mutable.ListBuffer[Long]()\n        val onesCount14\
    \ = mutable.ListBuffer[Long]()\n        val onesCount15 = mutable.ListBuffer[Long]()\n\
    \        val onesCount16 = mutable.ListBuffer[Long]()\n        val onesCount17\
    \ = mutable.ListBuffer[Long]()\n        val onesCount18 = mutable.ListBuffer[Long]()\n\
    \        val onesCount19 = mutable.ListBuffer[Long]()\n        val onesCount20\
    \ = mutable.ListBuffer[Long]()\n        val onesCount21 = mutable.ListBuffer[Long]()\n\
    \        val onesCount22 = mutable.ListBuffer[Long]()\n        val onesCount23\
    \ = mutable.ListBuffer[Long]()\n        val onesCount24 = mutable.ListBuffer[Long]()\n\
    \        val onesCount25 = mutable.ListBuffer[Long]()\n        val onesCount26\
    \ = mutable.ListBuffer[Long]()\n        val onesCount27 = mutable.ListBuffer[Long]()\n\
    \        val onesCount28 = mutable.ListBuffer[Long]()\n        val onesCount29\
    \ = mutable.ListBuffer[Long]()\n        val onesCount30 = mutable.ListBuffer[Long]()\n\
    \        val onesCount31 = mutable.ListBuffer[Long]()\n        val onesCount32\
    \ = mutable.ListBuffer[Long]()\n", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount3 = mutable.ListBuffer[Long]()\n\
    \        val onesCount4 = mutable.ListBuffer[Long]()\n        val onesCount5 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount6 = mutable.ListBuffer[Long]()\n\
    \        val onesCount7 = mutable.ListBuffer[Long]()\n        val onesCount8 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount9 = mutable.ListBuffer[Long]()\n\
    \        val onesCount10 = mutable.ListBuffer[Long]()\n        val onesCount11\
    \ = mutable.ListBuffer[Long]()\n        val onesCount12 = mutable.ListBuffer[Long]()\n\
    \        val onesCount13 = mutable.ListBuffer[Long]()\n        val onesCount14\
    \ = mutable.ListBuffer[Long]()\n        val onesCount15 = mutable.ListBuffer[Long]()\n\
    \        val onesCount16 = mutable.ListBuffer[Long]()\n        val onesCount17\
    \ = mutable.ListBuffer[Long]()\n        val onesCount18 = mutable.ListBuffer[Long]()\n\
    \        val onesCount19 = mutable.ListBuffer[Long]()\n        val onesCount20\
    \ = mutable.ListBuffer[Long]()\n        val onesCount21 = mutable.ListBuffer[Long]()\n\
    \        val onesCount22 = mutable.ListBuffer[Long]()\n        val onesCount23\
    \ = mutable.ListBuffer[Long]()\n        val onesCount24 = mutable.ListBuffer[Long]()\n\
    \        val onesCount25 = mutable.ListBuffer[Long]()\n        val onesCount26\
    \ = mutable.ListBuffer[Long]()\n        val onesCount27 = mutable.ListBuffer[Long]()\n\
    \        val onesCount28 = mutable.ListBuffer[Long]()\n        val onesCount29\
    \ = mutable.ListBuffer[Long]()\n        val onesCount30 = mutable.ListBuffer[Long]()\n\
    \        val onesCount31 = mutable.ListBuffer[Long]()\n        val onesCount32\
    \ = mutable.ListBuffer[Long]()\n", "        var count = 0\n        var last =\
    \ 1\n        for(i <- 1 to n){\n            if(last == 1){\n                count\
    \ += 1\n            }\n            last /= 10\n        }\n        count", "  \
    \      val ones = mutable.ListBuffer[Long]()\n        val zeros = mutable.ListBuffer[Long]()\n\
    \        val onesAndZeros = mutable.ListBuffer[Long]()\n        val onesAndZerosCount\
    \ = mutable.ListBuffer[Long]()\n        val onesAndZerosCount2 = mutable.ListBuffer[Long]()\n\
    \        val onesAndZerosCount3 = mutable.ListBuffer[Long]()\n        val onesAndZerosCount4\
    \ = mutable.ListBuffer[Long]()\n        val onesAndZerosCount5 = mutable.ListBuffer[Long]()\n\
    \        val onesAndZerosCount6 = mutable.ListBuffer[Long]()\n        val onesAndZerosCount7\
    \ = mutable.ListBuffer[Long]()\n        val onesAndZerosCount8 = mutable.ListBuffer[Long]()\n\
    \        val onesAndZerosCount9 = mutable.ListBuffer[Long]()\n        val onesAndZerosCount10\
    \ = mutable.ListBuffer[Long]()\n        val onesAndZerosCount11 = mutable.ListBuffer[Long]()\n\
    \        val onesAndZerosCount12 = mutable.ListBuffer[Long]()\n        val onesAndZerosCount13\
    \ = mutable.ListBuffer[Long]()\n        val onesAndZerosCount14 = mutable.ListBuffer[Long]()\n\
    \        val onesAndZerosCount15 = mutable.ListBuffer[Long]()\n        val onesAndZerosCount16\
    \ = mutable.ListBuffer[Long]()\n        val onesAndZerosCount17 = mutable.ListBuffer[Long]()\n\
    \        val onesAndZerosCount18 = mutable.ListBuffer[Long]()\n        val onesAndZerosCount19\
    \ = mutable.ListBuffer[Long]()\n        val onesAndZerosCount20 = mutable.ListBuffer[Long]()\n\
    \        val onesAndZerosCount21 = mutable.ListBuffer[Long]()\n        val onesAndZerosCount22\
    \ = mutable.ListBuffer[Long]()\n        val onesAndZerosCount23 = mutable.ListBuffer[Long]()\n\
    \        val onesAndZerosCount24 = mutable.ListBuffer[Long]()\n        val onesAndZerosCount25\
    \ = mutable.ListBuffer[Long]()\n        val onesAndZerosCount26", "        val\
    \ ones = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount2 = mutable.ListBuffer[Long]()\n        val onesCount3 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val onesCount5 = mutable.ListBuffer[Long]()\n        val onesCount6 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val onesCount8 = mutable.ListBuffer[Long]()\n        val onesCount9 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val onesCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val onesCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val onesCount17 = mutable.ListBuffer[Long]()\n        val onesCount18\
    \ = mutable.ListBuffer[Long]()\n        val onesCount19 = mutable.ListBuffer[Long]()\n\
    \        val onesCount20 = mutable.ListBuffer[Long]()\n        val onesCount21\
    \ = mutable.ListBuffer[Long]()\n        val onesCount22 = mutable.ListBuffer[Long]()\n\
    \        val onesCount23 = mutable.ListBuffer[Long]()\n        val onesCount24\
    \ = mutable.ListBuffer[Long]()\n        val onesCount25 = mutable.ListBuffer[Long]()\n\
    \        val onesCount26 = mutable.ListBuffer[Long]()\n        val onesCount27\
    \ = mutable.ListBuffer[Long]()\n        val onesCount28 = mutable.ListBuffer[Long]()\n\
    \        val onesCount29 = mutable.ListBuffer[Long]()\n        val onesCount30\
    \ = mutable.ListBuffer[Long]()\n        val onesCount31 = mutable.ListBuffer[Long]()\n\
    \        val onesCount32 = mutable.ListBuffer[Long]()\n", "        val ones =\
    \ mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount2 = mutable.ListBuffer[Long]()\n        val onesCount3 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val onesCount5 = mutable.ListBuffer[Long]()\n        val onesCount6 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val onesCount8 = mutable.ListBuffer[Long]()\n        val onesCount9 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val onesCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val onesCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val onesCount17 = mutable.ListBuffer[Long]()\n        val onesCount18\
    \ = mutable.ListBuffer[Long]()\n        val onesCount19 = mutable.ListBuffer[Long]()\n\
    \        val onesCount20 = mutable.ListBuffer[Long]()\n        val onesCount21\
    \ = mutable.ListBuffer[Long]()\n        val onesCount22 = mutable.ListBuffer[Long]()\n\
    \        val onesCount23 = mutable.ListBuffer[Long]()\n        val onesCount24\
    \ = mutable.ListBuffer[Long]()\n        val onesCount25 = mutable.ListBuffer[Long]()\n\
    \        val onesCount26 = mutable.ListBuffer[Long]()\n        val onesCount27\
    \ = mutable.ListBuffer[Long]()\n        val onesCount28 = mutable.ListBuffer[Long]()\n\
    \        val onesCount29 = mutable.ListBuffer[Long]()\n        val onesCount30\
    \ = mutable.ListBuffer[Long]()\n        val onesCount31 = mutable.ListBuffer[Long]()\n\
    \        val onesCount32 = mutable.ListBuffer[Long]()\n", "        var count =\
    \ 0\n        var start = 1\n        while (start <= n) {\n            if (start\
    \ % 10 == 1) {\n                count += 1\n            }\n            start +=\
    \ 1\n        }\n        return count", "        var count = 0\n        var last\
    \ = 1\n        var current = 1\n        var next = 1\n        var lastOne = last\n\
    \        while (current <= n) {\n            if (current == 1) {\n           \
    \     count += 1\n                lastOne = last\n            } else {\n     \
    \           next = current * 10\n                if (next == 1) {\n          \
    \          count += 1\n                    lastOne = last\n                } else\
    \ {\n                    lastOne = last\n                    count += 1\n    \
    \            }\n            }\n            current = next\n        }\n       \
    \ count", "        val ones = mutable.ListBuffer[Long]()\n        val twos = mutable.ListBuffer[Long]()\n\
    \        val threes = mutable.ListBuffer[Long]()\n        val fours = mutable.ListBuffer[Long]()\n\
    \        val fives = mutable.ListBuffer[Long]()\n        val sixes = mutable.ListBuffer[Long]()\n\
    \        val sevens = mutable.ListBuffer[Long]()\n        val eights = mutable.ListBuffer[Long]()\n\
    \        val nines = mutable.ListBuffer[Long]()\n        val tens = mutable.ListBuffer[Long]()\n\
    \        val hundreds = mutable.ListBuffer[Long]()\n        val thousands = mutable.ListBuffer[Long]()\n\
    \        val millions = mutable.ListBuffer[Long]()\n        val billions = mutable.ListBuffer[Long]()\n\
    \        val trillions = mutable.ListBuffer[Long]()\n        val quadrillions\
    \ = mutable.ListBuffer[Long]()\n        val quintillions = mutable.ListBuffer[Long]()\n\
    \        val sextillions = mutable.ListBuffer[Long]()\n        val septillions\
    \ = mutable.ListBuffer[Long]()\n        val octillions = mutable.ListBuffer[Long]()\n\
    \        val nonillions = mutable.ListBuffer[Long]()\n        val decillions =\
    \ mutable.ListBuffer[Long]()\n        val undecillions = mutable.ListBuffer[Long]()\n\
    \        val duodecillions = mutable.ListBuffer[Long]()\n        val tredecillions\
    \ = mutable.ListBuffer[Long]()\n        val quattuordecillions = mutable.ListBuffer[Long]()\n\
    \        val quindecillions = mutable.ListBuffer[Long]()\n        val sexdecillions\
    \ = mutable.ListBuffer[Long]()\n        val septendecillions = mutable.ListBuffer[Long]()\n\
    \        val octodecillions = mutable.ListBuffer[Long]()\n        val novemdecillions\
    \ = mutable.ListBuffer[Long]()\n        val vigintillions = mutable.ListBuffer[Long]()\n\
    \        val millionsCount = mutable.ListBuffer[Long]()\n        val billionsCount\
    \ = mutable.ListBuffer", "        val ones = mutable.ListBuffer[Long]()\n    \
    \    val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 = mutable.ListBuffer[Long]()\n\
    \        val onesCount3 = mutable.ListBuffer[Long]()\n        val onesCount4 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount5 = mutable.ListBuffer[Long]()\n\
    \        val onesCount6 = mutable.ListBuffer[Long]()\n        val onesCount7 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount8 = mutable.ListBuffer[Long]()\n\
    \        val onesCount9 = mutable.ListBuffer[Long]()\n        val onesCount10\
    \ = mutable.ListBuffer[Long]()\n        val onesCount11 = mutable.ListBuffer[Long]()\n\
    \        val onesCount12 = mutable.ListBuffer[Long]()\n        val onesCount13\
    \ = mutable.ListBuffer[Long]()\n        val onesCount14 = mutable.ListBuffer[Long]()\n\
    \        val onesCount15 = mutable.ListBuffer[Long]()\n        val onesCount16\
    \ = mutable.ListBuffer[Long]()\n        val onesCount17 = mutable.ListBuffer[Long]()\n\
    \        val onesCount18 = mutable.ListBuffer[Long]()\n        val onesCount19\
    \ = mutable.ListBuffer[Long]()\n        val onesCount20 = mutable.ListBuffer[Long]()\n\
    \        val onesCount21 = mutable.ListBuffer[Long]()\n        val onesCount22\
    \ = mutable.ListBuffer[Long]()\n        val onesCount23 = mutable.ListBuffer[Long]()\n\
    \        val onesCount24 = mutable.ListBuffer[Long]()\n        val onesCount25\
    \ = mutable.ListBuffer[Long]()\n        val onesCount26 = mutable.ListBuffer[Long]()\n\
    \        val onesCount27 = mutable.ListBuffer[Long]()\n        val onesCount28\
    \ = mutable.ListBuffer[Long]()\n        val onesCount29 = mutable.ListBuffer[Long]()\n\
    \        val onesCount30 = mutable.ListBuffer[Long]()\n        val onesCount31\
    \ = mutable.ListBuffer[Long]()\n        val onesCount32 = mutable.ListBuffer[Long]()\n",
  "        var count = 0\n        var start = 1\n        var end = n\n        while\
    \ (start < end) {\n            val mid = (start + end) / 2\n            if (mid\
    \ % 10 == 1) {\n                count += 1\n                start = mid + 1\n\
    \            } else {\n                end = mid\n            }\n        }\n \
    \       count", "        val ones = mutable.ListBuffer(1)\n        var count =\
    \ 0\n        for(i <- 1 to n){\n            val temp = ones\n            ones\
    \ = ones + 1\n            if(ones.last.head == 1){\n                count = count\
    \ + 1\n            }\n        }\n        count", "        val ones = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mut", "        val ones = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount = mutable.ListBuffer.empty[Long]\n        val onesCount\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCount = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount = mutable.ListBuffer.empty[Long]\n        val onesCount\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCount = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount = mutable.ListBuffer.empty[Long]\n        val onesCount\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCount = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount = mutable.ListBuffer.empty[Long]\n        val onesCount\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCount = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount = mutable.ListBuffer.empty[Long]\n        val onesCount\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCount = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount = mutable.ListBuffer.empty[Long]\n        val onesCount\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCount = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount = mutable.ListBuffer.empty[Long]\n        val onesCount\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCount = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount = mutable.ListBuffer.empty[Long]\n        val onesCount\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCount = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount = mutable.ListBuffer.empty[Long]\n        val onesCount\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCount = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount = mutable.ListBuffer.empty[Long]\n        val onesCount\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCount = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount = mutable.ListBuffer.empty[Long]\n        val onesCount\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCount = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount = mutable.ListBuffer.empty[Long]\n        val onesCount\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCount = mutable.ListBuffer.",
  "        val ones = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n\
    \        val counts = mutable.Map[Long, Long]()\n        val start = scala.math.pow(10,\
    \ n).toInt\n        val end = scala.math.pow(10, n).toInt + 1\n        for (i\
    \ <- 1 to end) {\n            val digit = scala.math.mod(i, 10)\n            if\
    \ (digit == 1) {\n                ones += i\n            } else {\n          \
    \      zeros += i\n            }\n        }\n        ones.foreach(i => counts(i.toLong)\
    \ = counts(i.toLong) + 1)\n        zeros.foreach(i => counts(i.toLong) = counts(i.toLong)\
    \ + 1)\n        counts.toSeq.sortBy(_._1).reverse.head._2", "        val ones\
    \ = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n       \
    \ val zeros = mutable.Set[Long]()\n        val zerosCount = mutable.Set[Long]()\n\
    \        val counts = mutable.Map[Long, Long]()\n        val countsCount = mutable.Map[Long,\
    \ Long]()\n        val digits = n.toString.reverse.grouped(10).reverse\n     \
    \   digits.foreach { x =>\n            val digit = x.toLong\n            if (digit\
    \ == 1) ones += digit\n            if (digit == 0) zeros += digit\n          \
    \  if (digit > 1) counts += digit -> counts(digit) + 1\n            if (digit\
    \ < 1) countsCount += digit -> countsCount(digit) + 1\n        }\n        val\
    \ onesCount = ones.toSet.size + (ones.toSet - ones.toSet)\n        val zerosCount\
    \ = zeros.toSet.size + (zeros.toSet - zeros.toSet)\n        val countsCount =\
    \ counts.toMap.size + (counts.toMap - counts.toMap)\n        val countsCount =\
    \ counts.toMap.size + (counts.toMap - counts.toMap)\n        val onesCount = ones.toSet.size\
    \ + (ones.toSet - ones.toSet)\n        val zerosCount = zeros.toSet.size + (zeros.toSet\
    \ - zeros.toSet)\n        val countsCount = counts.toMap.size + (counts.toMap\
    \ - counts.toMap)\n        val countsCount = counts.toMap.size + (counts.toMap\
    \ - counts.toMap)\n        val onesCount = ones.toSet.size + (ones.toSet - ones.toSet)\n\
    \        val zerosCount = zeros.toSet.size + (zeros.toSet - zeros.toSet)\n   \
    \     val countsCount = counts.toMap.size + (counts.toMap - counts.toMap)\n  \
    \      val countsCount = counts.toMap.size + (counts.toMap - counts.toMap)\n \
    \       val onesCount = ones.toSet.size + (ones.toSet - ones.toSet)\n        val\
    \ zerosCount = zeros.toSet.size + (zeros.toSet - zeros.toSet)\n        val countsCount\
    \ = counts.toMap.size + (counts.toMap - counts.toMap)\n        val countsCount\
    \ = counts.toMap.size + (counts.toMap - counts.toMap)\n        val onesCount =\
    \ ones.toSet.size + (ones.toSet - ones.toSet)\n        val zerosCount = zeros.toSet.size\
    \ + (zeros.toSet - zeros.toSet)\n        val countsCount = ", "        val ones\
    \ = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n     \
    \   val counts = mutable.ArrayBuffer(0)\n        while(n > 1) {\n            val\
    \ x = n % 10\n            n /= 10\n            if(x == 1) ones += x\n        \
    \    else zeros += x\n            counts += x\n        }\n        ones.toList.count(_\
    \ == 1)", "        val ones = mutable.ArrayBuffer(1)\n        var count = 0\n\
    \        val starts = mutable.ArrayBuffer(n)\n        val ends = mutable.ArrayBuffer(n)\n\
    \        while(ones.nonEmpty) {\n            val one = ones.head\n           \
    \ ones = ones.tail\n            if(one == 1) {\n                count += 1\n \
    \               starts += n\n                ends += n\n            }\n      \
    \  }\n        count", "        val counts = mutable.HashMap[Long, Long]()\n  \
    \      val ones = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n\
    \        val onesCount = ones.takeWhile(x => x <= n).length\n        val zerosCount\
    \ = zeros.takeWhile(x => x <= n).length\n        val onesZeros = ones.takeWhile(x\
    \ => x <= n).zip(zeros.takeWhile(x => x <= n)).takeWhile(x => x._1 <= x._2).length\n\
    \        val onesOnes = ones.takeWhile(x => x <= n).zip(ones.takeWhile(x => x\
    \ <= n)).takeWhile(x => x._1 <= x._2).length\n        val onesTwos = ones.takeWhile(x\
    \ => x <= n).zip(ones.takeWhile(x => x <= n)).takeWhile(x => x._1 <= x._2).length\n\
    \        val onesThrees = ones.takeWhile(x => x <= n).zip(ones.takeWhile(x =>\
    \ x <= n)).takeWhile(x => x._1 <= x._2).length\n        val onesFours = ones.takeWhile(x\
    \ => x <= n).zip(ones.takeWhile(x => x <= n)).takeWhile(x => x._1 <= x._2).length\n\
    \        val onesFives = ones.takeWhile(x => x <= n).zip(ones.takeWhile(x => x\
    \ <= n)).takeWhile(x => x._1 <= x._2).length\n        val onesSixes = ones.takeWhile(x\
    \ => x <= n).zip(ones.takeWhile(x => x <= n)).takeWhile(x => x._1 <= x._2).length\n\
    \        val onesSevens = ones.takeWhile(x => x <= n).zip(ones.takeWhile(x =>\
    \ x <= n)).takeWhile(x => x._1 <= x._2).length\n        val onesEights = ones.takeWhile(x\
    \ => x <= n).zip(ones.takeWhile(x => x <= n)).takeWhile(x => x._1 <= x._2).length\n\
    \        val onesNines = ones.takeWhile(x => x <= n).zip(ones.takeWhile(x => x\
    \ <= n)).takeWhile(x => x._1 <= x._2).length\n        val onesTens = ones.takeWhile(x\
    \ => x <= n).zip(ones.takeWhile(x => x <= n)).takeWhile(x => x._1 <= x._2).length\n\
    \        val onesElevens = ones.takeWhile(x => x <= n).zip(ones.takeWhile(x ",
  "        val ones = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount2 = mutable.ListBuffer[Long]()\n        val onesCount3 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val onesCount5 = mutable.ListBuffer[Long]()\n        val onesCount6 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val onesCount8 = mutable.ListBuffer[Long]()\n        val onesCount9 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val onesCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val onesCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val onesCount17 = mutable.ListBuffer[Long]()\n        val onesCount18\
    \ = mutable.ListBuffer[Long]()\n        val onesCount19 = mutable.ListBuffer[Long]()\n\
    \        val onesCount20 = mutable.ListBuffer[Long]()\n        val onesCount21\
    \ = mutable.ListBuffer[Long]()\n        val onesCount22 = mutable.ListBuffer[Long]()\n\
    \        val onesCount23 = mutable.ListBuffer[Long]()\n        val onesCount24\
    \ = mutable.ListBuffer[Long]()\n        val onesCount25 = mutable.ListBuffer[Long]()\n\
    \        val onesCount26 = mutable.ListBuffer[Long]()\n        val onesCount27\
    \ = mutable.ListBuffer[Long]()\n        val onesCount28 = mutable.ListBuffer[Long]()\n\
    \        val onesCount29 = mutable.ListBuffer[Long]()\n        val onesCount30\
    \ = mutable.ListBuffer[Long]()\n        val onesCount31 = mutable.ListBuffer[Long]()\n\
    \        val onesCount32 = mutable.ListBuffer[Long]()\n", "        val ones =\
    \ mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n       \
    \ val count = mutable.ArrayBuffer(0)\n        val digits = n.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val digit = digits.head\n        val digits = digits.tail\n        val\
    \ digit = digits.head\n        val digits = digits.tail\n        val digit = digits.head\n\
    \        val digits = digits.tail\n        val digit = digits.head\n        val\
    \ digits = digits.tail\n        val digit = digits.head\n        val digits =\
    \ digits.tail\n        val digit = digits.head\n        val digits = digits.tail\n\
    \        val digit = digits.head\n        val digits = digits.tail\n        val\
    \ digit = digits.head\n        val digits = digits.tail\n        val digit = digits.head\n\
    \        val digits = digits.tail\n        val digit = digits.head\n        val\
    \ digits = digits.tail\n        val digit = digits.head\n        val digits =\
    \ digits.tail\n        val digit = digits.head\n        val digits = digits.tail\n\
    \        val digit = digits.head\n        val digits = digits.tail\n        val\
    \ digit = digits.head\n        val digits = digits.tail\n        val digit = digits.head\n\
    \        val digits = digits.tail\n        val digit = digits.head\n        val\
    \ digits = digits.tail\n        val digit = digits.head\n        val digits =\
    \ digits.tail\n        val digit = digits.head\n        val digits = digits.tail\n\
    \        val digit = digits.head\n        val digits = digits.tail\n        val\
    \ digit = digits.head\n        val digits = digits.tail\n        val digit = digits.head\n\
    \        val digits = digits.tail\n        val digit = digits.head\n        val\
    \ digits = digits.tail\n        val digit = digits.head\n        val digits =\
    \ digits.tail\n        val digit = digits.head\n        val digits = digits.tail\n\
    \        val digit = digits.head\n        val digits = digits.tail\n        val\
    \ digit = digits.head\n        val digits = digits.tail\n        val digit = digits.head\n\
    \        val digits = digits.tail\n        val digit = digits.head\n        val\
    \ digits = digits.tail\n        val digit = digits.head\n        val digits =\
    \ digits.tail\n        val digit = digits.head\n        val digits = digits.tail\n\
    \        val digit = digits.head\n        val digits = digits.tail\n        val\
    \ digit = digits.head\n        val digits = digits.tail\n        val digit = digits.head\n\
    \        val digits = digits.tail\n        val ", "        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val counts = mutable.Map[Long,\
    \ Long]()\n        val n = n.toInt\n        val onesCount = n - 1\n        val\
    \ zerosCount = n\n        val onesSet = ones.toSet\n        val zerosSet = zeros.toSet\n\
    \        val countsSet = counts.toSet\n        val onesSetIterator = onesSet.iterator\n\
    \        val zerosSetIterator = zerosSet.iterator\n        val countsSetIterator\
    \ = countsSet.iterator\n        val onesSetIteratorNext = onesSetIterator.next\n\
    \        val zerosSetIteratorNext = zerosSetIterator.next\n        val countsSetIteratorNext\
    \ = countsSetIterator.next\n        while(onesSetIteratorNext != onesSetIterator.end)\
    \ {\n            val onesSetIteratorValue = onesSetIteratorNext\n            val\
    \ zerosSetIteratorValue = zerosSetIteratorNext\n            val countsSetIteratorValue\
    \ = countsSetIteratorNext\n            val onesSetIteratorNextValue = onesSetIterator.next\n\
    \            val zerosSetIteratorNextValue = zerosSetIterator.next\n         \
    \   val countsSetIteratorNextValue = countsSetIterator.next\n            val onesSetIteratorValueNext\
    \ = onesSetIteratorValue.next\n            val zerosSetIteratorValueNext = zerosSetIteratorValue.next\n\
    \            val countsSetIteratorValueNext = countsSetIteratorValue.next\n  \
    \          val onesSetIteratorValueNextValue = onesSetIteratorValueNext\n    \
    \        val zerosSetIteratorValueNextValue = zerosSetIteratorValueNext\n    \
    \        val countsSetIteratorValueNextValue = countsSetIteratorValueNext\n  \
    \          val onesSetIteratorValueNextNext = onesSetIteratorValueNext.next\n\
    \            val zerosSetIteratorValueNextNext = zerosSetIteratorValueNext.next\n\
    \            val countsSetIteratorValueNextNext = countsSetIteratorValueNext.next\n\
    \            val onesSetIteratorValueNextNextValue = onesSetIteratorValueNextNext\n\
    \            val zerosSetIteratorValueNextNextValue = zerosSetIteratorValueNextNext\n\
    \            val countsSetIteratorValueNextNextValue = countsSetIteratorValueNextNext\n\
    \            val onesSetIteratorValueNextNextNext = onesSetIteratorValueNextNext.next\n\
    \            val zerosSetIteratorValueNextNextNext = zerosSetIteratorValueNextNext.next\n\
    \            val countsSetIteratorValueNextNextNext = count", "        val counts\
    \ = mutable.HashMap[Long, Long]()\n        for (i <- 1 to n) {\n            val\
    \ digit = i % 10\n            if (digit == 1) {\n                val count = counts.getOrElse(digit,\
    \ 0) + 1\n                counts.put(digit, count)\n            }\n        }\n\
    \        counts.values.sum", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount3 = mutable.ListBuffer[Long]()\n\
    \        val onesCount4 = mutable.ListBuffer[Long]()\n        val onesCount5 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount6 = mutable.ListBuffer[Long]()\n\
    \        val onesCount7 = mutable.ListBuffer[Long]()\n        val onesCount8 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount9 = mutable.ListBuffer[Long]()\n\
    \        val onesCount10 = mutable.ListBuffer[Long]()\n        val onesCount11\
    \ = mutable.ListBuffer[Long]()\n        val onesCount12 = mutable.ListBuffer[Long]()\n\
    \        val onesCount13 = mutable.ListBuffer[Long]()\n        val onesCount14\
    \ = mutable.ListBuffer[Long]()\n        val onesCount15 = mutable.ListBuffer[Long]()\n\
    \        val onesCount16 = mutable.ListBuffer[Long]()\n        val onesCount17\
    \ = mutable.ListBuffer[Long]()\n        val onesCount18 = mutable.ListBuffer[Long]()\n\
    \        val onesCount19 = mutable.ListBuffer[Long]()\n        val onesCount20\
    \ = mutable.ListBuffer[Long]()\n        val onesCount21 = mutable.ListBuffer[Long]()\n\
    \        val onesCount22 = mutable.ListBuffer[Long]()\n        val onesCount23\
    \ = mutable.ListBuffer[Long]()\n        val onesCount24 = mutable.ListBuffer[Long]()\n\
    \        val onesCount25 = mutable.ListBuffer[Long]()\n        val onesCount26\
    \ = mutable.ListBuffer[Long]()\n        val onesCount27 = mutable.ListBuffer[Long]()\n\
    \        val onesCount28 = mutable.ListBuffer[Long]()\n        val onesCount29\
    \ = mutable.ListBuffer[Long]()\n        val onesCount30 = mutable.ListBuffer[Long]()\n\
    \        val onesCount31 = mutable.ListBuffer[Long]()\n        val onesCount32\
    \ = mutable.ListBuffer[Long]()\n", "        var count = 0\n        var last =\
    \ 0\n        var lastOne = 0\n        var lastTwo = 0\n        var lastThree =\
    \ 0\n        var lastFour = 0\n        var lastFive = 0\n        var lastSix =\
    \ 0\n        var lastSeven = 0\n        var lastEight = 0\n        var lastNine\
    \ = 0\n        var lastTen = 0\n        var lastEleven = 0\n        var lastTwelve\
    \ = 0\n        var lastThirteen = 0\n        var lastFourteen = 0\n        var\
    \ lastFifteen = 0\n        var lastSixteen = 0\n        var lastSeventeen = 0\n\
    \        var lastEighteen = 0\n        var lastNineteen = 0\n        var lastTwenty\
    \ = 0\n        var lastTwentyOne = 0\n        var lastTwentyTwo = 0\n        var\
    \ lastTwentyThree = 0\n        var lastTwentyFour = 0\n        var lastTwentyFive\
    \ = 0\n        var lastTwentySix = 0\n        var lastTwentySeven = 0\n      \
    \  var lastTwentyEight = 0\n        var lastTwentyNine = 0\n        var lastThirty\
    \ = 0\n        var lastThirtyOne = 0\n        var lastThirtyTwo = 0\n        var\
    \ lastThirtyThree = 0\n        var lastThirtyFour = 0\n        var lastThirtyFive\
    \ = 0\n        var lastThirtySix = 0\n        var lastThirtySeven = 0\n      \
    \  var lastThirtyEight = 0\n        var lastThirtyNine = 0\n        var lastFourty\
    \ = 0\n        var lastFourtyOne = 0\n        var lastFourtyTwo = 0\n        var\
    \ lastFourtyThree = 0\n        var lastFourtyFour = 0\n        var lastFourtyFive\
    \ = 0\n        var lastFourtySix = 0\n        var lastFourtySeven = 0\n      \
    \  var lastFourtyEight = 0\n        var lastFourtyNine = 0\n        var lastFifty\
    \ = 0\n        var lastFiftyOne = 0\n        var lastFiftyTwo = 0\n        var\
    \ lastFiftyThree = 0\n        var lastFiftyFour = 0\n        var lastFiftyFive\
    \ = 0\n        var lastFiftySix = 0\n        var lastFiftySeven = 0\n        var\
    \ lastFiftyEight = 0\n        var lastFiftyNine = 0\n        var lastSixty = 0\n\
    \        var lastSixtyOne = 0\n        var lastSixtyTwo = 0\n        var lastSixtyThree\
    \ = 0\n        var lastSixtyFour = 0\n        var lastSixtyFive = 0\n        var\
    \ lastSixtySix = 0\n        var lastSixtySeven = 0\n        var lastSixtyEight\
    \ = 0", "        val ones = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n\
    \        val counts = mutable.ArrayBuffer.empty[Long]\n        val max = (n /\
    \ 10).floor\n        val min = (n / 10).ceil\n        val digits = n.toString.reverse.grouped(10).reverse\n\
    \        val digit = digits.head\n        val digitCount = digits.count(_ == digit)\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digit", "        val ones = mutable.Set[Long]()\n  \
    \      val onesCount = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val onesCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val onesCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val onesCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val onesCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val onesCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val onesCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val onesCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val onesCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val onesCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val onesCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val onesCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val onesCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val onesCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val onesCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val onesCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val onesCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mut",
  "        val ones = mutable.ListBuffer[Long]()\n        val twos = mutable.ListBuffer[Long]()\n\
    \        val threes = mutable.ListBuffer[Long]()\n        val fours = mutable.ListBuffer[Long]()\n\
    \        val fives = mutable.ListBuffer[Long]()\n        val sixes = mutable.ListBuffer[Long]()\n\
    \        val sevens = mutable.ListBuffer[Long]()\n        val eights = mutable.ListBuffer[Long]()\n\
    \        val nines = mutable.ListBuffer[Long]()\n        val tens = mutable.ListBuffer[Long]()\n\
    \        val hundreds = mutable.ListBuffer[Long]()\n        val thousands = mutable.ListBuffer[Long]()\n\
    \        val millions = mutable.ListBuffer[Long]()\n        val billions = mutable.ListBuffer[Long]()\n\
    \        val trillions = mutable.ListBuffer[Long]()\n        val quadrillions\
    \ = mutable.ListBuffer[Long]()\n        val quintillions = mutable.ListBuffer[Long]()\n\
    \        val sextillions = mutable.ListBuffer[Long]()\n        val septillions\
    \ = mutable.ListBuffer[Long]()\n        val octillions = mutable.ListBuffer[Long]()\n\
    \        val nonillions = mutable.ListBuffer[Long]()\n        val decillions =\
    \ mutable.ListBuffer[Long]()\n        val undecillions = mutable.ListBuffer[Long]()\n\
    \        val duodecillions = mutable.ListBuffer[Long]()\n        val tredecillions\
    \ = mutable.ListBuffer[Long]()\n        val quattuordecillions = mutable.ListBuffer[Long]()\n\
    \        val quindecillions = mutable.ListBuffer[Long]()\n        val sexdecillions\
    \ = mutable.ListBuffer[Long]()\n        val septendecillions = mutable.ListBuffer[Long]()\n\
    \        val octodecillions = mutable.ListBuffer[Long]()\n        val novemdecillions\
    \ = mutable.ListBuffer[Long]()\n        val vigintillions = mutable.ListBuffer[Long]()\n\
    \        val thousandsOfNines = mutable.ListBuffer[Long]()\n        val millionsOfNine",
  "        var count = 0\n        for(i <- 1 to n){\n            if((i.toString.toLong\
    \ % 10) == 1){\n                count += 1\n            }\n        }\n       \
    \ count", "        val ones = mutable.ListBuffer[Long]()\n        var count =\
    \ 0\n        for(i <- 1 to n){\n            if(i % 10 == 1){\n               \
    \ ones += i\n                count += 1\n            }\n        }\n        ones.length",
  "        val ones = mutable.ListBuffer(1)\n        val zeros = mutable.ListBuffer(0)\n\
    \        val counts = mutable.ListBuffer[Long]()\n        val starts = mutable.ListBuffer[Long]()\n\
    \        val ends = mutable.ListBuffer[Long]()\n        val digits = n.toString.reverse.grouped(2).map(_.toInt)\n\
    \        while(digits.nonEmpty) {\n            val d = digits.head\n         \
    \   val digit = digits.tail.head\n            val count = if (d == 1) ones.size\
    \ else zeros.size\n            counts += count\n            if (digit == 1) starts\
    \ += count\n            if (digit == 0) ends += count\n            digits :- tail\n\
    \        }\n        counts.sum", "        val counts = mutable.HashMap.empty[Long,\
    \ Long]\n        val ones = mutable.HashSet.empty[Long]\n        val zeros = mutable.HashSet.empty[Long]\n\
    \        val onesCount = mutable.HashSet.empty[Long]\n        val zerosCount =\
    \ mutable.HashSet.empty[Long]\n        val onesCounts = mutable.HashSet.empty[Long]\n\
    \        val zerosCounts = mutable.HashSet.empty[Long]\n        val onesCountZeros\
    \ = mutable.HashSet.empty[Long]\n        val zerosCountZeros = mutable.HashSet.empty[Long]\n\
    \        val onesCountOnes = mutable.HashSet.empty[Long]\n        val zerosCountOnes\
    \ = mutable.HashSet.empty[Long]\n        val onesCountOnesZeros = mutable.HashSet.empty[Long]\n\
    \        val zerosCountOnesZeros = mutable.HashSet.empty[Long]\n        val onesCountOnesOnes\
    \ = mutable.HashSet.empty[Long]\n        val zerosCountOnesOnes = mutable.HashSet.empty[Long]\n\
    \        val onesCountOnesOnesZeros = mutable.HashSet.empty[Long]\n        val\
    \ zerosCountOnesOnesZeros = mutable.HashSet.empty[Long]\n        val onesCountOnesOnesOnes\
    \ = mutable.HashSet.empty[Long]\n        val zerosCountOnesOnesOnes = mutable.HashSet.empty[Long]\n\
    \        val onesCountOnesOnesOnesZeros = mutable.HashSet.empty[Long]\n      \
    \  val zerosCountOnesOnesOnesZeros = mutable.HashSet.empty[Long]\n        val\
    \ onesCountOnesOnesOnesOnes = mutable.HashSet.empty[Long]\n        val zerosCountOnesOnesOnesOnes\
    \ = mutable.HashSet.empty[Long]\n        val onesCountOnesOnesOnesOnesZeros =\
    \ mutable.HashSet.empty[Long]\n        val zerosCountOnesOnesOnesOnesZeros = mutable.HashSet.empty[Long]\n\
    \        val onesCountOnesOnesOnesOnesOnes = mutable.HashSet.empty[Long]\n   \
    \     val zerosCountOnesOnesOnesOnesOnes = mutable.HashSet.empty[Long]\n     \
    \   val onesCountOnesOnesOnesOnesOnesZeros = mutable.HashSet.empty[Long]", " \
    \       val ones = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount2 = mutable.ListBuffer[Long]()\n        val onesCount3 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val onesCount5 = mutable.ListBuffer[Long]()\n        val onesCount6 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val onesCount8 = mutable.ListBuffer[Long]()\n        val onesCount9 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val onesCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val onesCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val onesCount17 = mutable.ListBuffer[Long]()\n        val onesCount18\
    \ = mutable.ListBuffer[Long]()\n        val onesCount19 = mutable.ListBuffer[Long]()\n\
    \        val onesCount20 = mutable.ListBuffer[Long]()\n        val onesCount21\
    \ = mutable.ListBuffer[Long]()\n        val onesCount22 = mutable.ListBuffer[Long]()\n\
    \        val onesCount23 = mutable.ListBuffer[Long]()\n        val onesCount24\
    \ = mutable.ListBuffer[Long]()\n        val onesCount25 = mutable.ListBuffer[Long]()\n\
    \        val onesCount26 = mutable.ListBuffer[Long]()\n        val onesCount27\
    \ = mutable.ListBuffer[Long]()\n        val onesCount28 = mutable.ListBuffer[Long]()\n\
    \        val onesCount29 = mutable.ListBuffer[Long]()\n        val onesCount30\
    \ = mutable.ListBuffer[Long]()\n        val onesCount31 = mutable.ListBuffer[Long]()\n\
    \        val onesCount32 = mutable.ListBuffer[Long]()\n", "        var count =\
    \ 0\n        var last = 1\n        for(i <- 0 until n) {\n            if(last\
    \ == 1) {\n                count += 1\n                last = 0\n            }\
    \ else {\n                last = 1\n            }\n        }\n        count",
  "        val ones = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n\
    \        val count = mutable.ArrayBuffer(0)\n        while(n > 1) {\n        \
    \    val digit = n % 10\n            val newCount = ones.length + zeros.length\n\
    \            val newOnes = ones.take(newCount)\n            val newZeros = zeros.take(newCount)\n\
    \            val newOne = if (digit == 1) newOnes.head else newZeros.head\n  \
    \          val newZero = if (digit == 0) newZeros.head else newOnes.head\n   \
    \         val newCount = newCount + 1\n            ones = newOnes\n          \
    \  zeros = newZeros\n            count = count + newCount\n            n = n /\
    \ 10\n        }\n        count.last", "        val ones = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount2 = mutable.Set[Long]()\n\
    \        val onesCount3 = mutable.Set[Long]()\n        val onesCount4 = mutable.Set[Long]()\n\
    \        val onesCount5 = mutable.Set[Long]()\n        val onesCount6 = mutable.Set[Long]()\n\
    \        val onesCount7 = mutable.Set[Long]()\n        val onesCount8 = mutable.Set[Long]()\n\
    \        val onesCount9 = mutable.Set[Long]()\n        val onesCount10 = mutable.Set[Long]()\n\
    \        val onesCount11 = mutable.Set[Long]()\n        val onesCount12 = mutable.Set[Long]()\n\
    \        val onesCount13 = mutable.Set[Long]()\n        val onesCount14 = mutable.Set[Long]()\n\
    \        val onesCount15 = mutable.Set[Long]()\n        val onesCount16 = mutable.Set[Long]()\n\
    \        val onesCount17 = mutable.Set[Long]()\n        val onesCount18 = mutable.Set[Long]()\n\
    \        val onesCount19 = mutable.Set[Long]()\n        val onesCount20 = mutable.Set[Long]()\n\
    \        val onesCount21 = mutable.Set[Long]()\n        val onesCount22 = mutable.Set[Long]()\n\
    \        val onesCount23 = mutable.Set[Long]()\n        val onesCount24 = mutable.Set[Long]()\n\
    \        val onesCount25 = mutable.Set[Long]()\n        val onesCount26 = mutable.Set[Long]()\n\
    \        val onesCount27 = mutable.Set[Long]()\n        val onesCount28 = mutable.Set[Long]()\n\
    \        val onesCount29 = mutable.Set[Long]()\n        val onesCount30 = mutable.Set[Long]()\n\
    \        val onesCount31 = mutable.Set[Long]()\n        val onesCount32 = mutable.Set[Long]()\n\
    \        val onesCount33 = mutable.Set[Long]()\n        val onesCount34 = mutable.Set[Long]()\n\
    \        val one", "        val ones = mutable.ArrayBuffer(1)\n        val zeros\
    \ = mutable.ArrayBuffer(0)\n        val counts = mutable.ArrayBuffer(0)\n    \
    \    val starts = mutable.ArrayBuffer(0)\n        val ends = mutable.ArrayBuffer(0)\n\
    \        val onesCount = mutable.ArrayBuffer(0)\n        val zerosCount = mutable.ArrayBuffer(0)\n\
    \        val countsCount = mutable.ArrayBuffer(0)\n        val startsCount = mutable.ArrayBuffer(0)\n\
    \        val endsCount = mutable.ArrayBuffer(0)\n        val onesCountCount =\
    \ mutable.ArrayBuffer(0)\n        val zerosCountCount = mutable.ArrayBuffer(0)\n\
    \        val countsCountCount = mutable.ArrayBuffer(0)\n        val startsCountCount\
    \ = mutable.ArrayBuffer(0)\n        val endsCountCount = mutable.ArrayBuffer(0)\n\
    \        val onesCountCountCount = mutable.ArrayBuffer(0)\n        val zerosCountCountCount\
    \ = mutable.ArrayBuffer(0)\n        val countsCountCountCount = mutable.ArrayBuffer(0)\n\
    \        val startsCountCountCount = mutable.ArrayBuffer(0)\n        val endsCountCountCount\
    \ = mutable.ArrayBuffer(0)\n        val onesCountCountCountCount = mutable.ArrayBuffer(0)\n\
    \        val zerosCountCountCountCount = mutable.ArrayBuffer(0)\n        val countsCountCountCountCount\
    \ = mutable.ArrayBuffer(0)\n        val startsCountCountCountCount = mutable.ArrayBuffer(0)\n\
    \        val endsCountCountCountCount = mutable.ArrayBuffer(0)\n        val onesCountCountCountCountCount\
    \ = mutable.ArrayBuffer(0)\n        val zerosCountCountCountCountCount = mutable.ArrayBuffer(0)\n\
    \        val countsCountCountCountCountCount = mutable.ArrayBuffer(0)\n      \
    \  val startsCountCountCountCountCount = mutable.ArrayBuffer(0)\n        val endsCountCountCountCountCount\
    \ = mutable.ArrayBuffer(0)\n        val onesCountCountCountCountCount = mutable.ArrayBuffer(0)\n\
    \        val zerosCountCountCountCountCountCount = mutable.ArrayBuffer(0)\n  \
    \      val countsCountCountCountCountCount = mutable.ArrayBuffer(0)\n        val\
    \ startsCountCountCountCountCountCount = mutable.ArrayBuffer(0)\n        val endsCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer(0)\n        val onesCountCountCountCountCountCount = mutable.ArrayBuffer(0)\n\
    \        val zerosCountCountCountCountCountCount = mutable.ArrayBuffer(0)\n  \
    \      val countsCountCountCountCountCountCount = mutable.ArrayBuffer(0)\n   \
    \     val startsCountCountCountCountCountCount = mutable.ArrayBuffer(0)\n    \
    \    val ", "        val counts = mutable.HashMap[Long, Long]()\n        val ones\
    \ = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n     \
    \   val onesCount = ones.takeWhile(_ < n).length\n        val zerosCount = zeros.takeWhile(_\
    \ < n).length\n        val onesZeros = ones.takeWhile(_ < n).takeWhile(_ != 0).length\n\
    \        val zerosOnes = zeros.takeWhile(_ < n).takeWhile(_ != 0).length\n   \
    \     val onesOnes = ones.takeWhile(_ < n).takeWhile(_ != 0).takeWhile(_ != 1).length\n\
    \        val zerosZeros = zeros.takeWhile(_ < n).takeWhile(_ != 0).takeWhile(_\
    \ == 0).length\n        val onesZeros = ones.takeWhile(_ < n).takeWhile(_ != 0).takeWhile(_\
    \ == 1).length\n        val zerosOnes = zeros.takeWhile(_ < n).takeWhile(_ !=\
    \ 0).takeWhile(_ == 0).length\n        val onesOnes = ones.takeWhile(_ < n).takeWhile(_\
    \ != 0).takeWhile(_ == 1).length\n        val zerosZeros = zeros.takeWhile(_ <\
    \ n).takeWhile(_ != 0).takeWhile(_ == 0).length\n        val onesZeros = ones.takeWhile(_\
    \ < n).takeWhile(_ != 0).takeWhile(_ == 1).length\n        val zerosOnes = zeros.takeWhile(_\
    \ < n).takeWhile(_ != 0).takeWhile(_ == 0).length\n        val onesOnes = ones.takeWhile(_\
    \ < n).takeWhile(_ != 0).takeWhile(_ == 1).length\n        val zerosZeros = zeros.takeWhile(_\
    \ < n).takeWhile(_ != 0).takeWhile(_ == 0).length\n        val onesZeros = ones.takeWhile(_\
    \ < n).takeWhile(_ != 0).takeWhile(_ == 1).length\n        val zerosOnes = zeros.takeWhile(_\
    \ < n).takeWhile(_ != 0).takeWhile(_ == 0).length\n        val onesOnes = ones.takeWhile(_\
    \ < n).takeWhile(_ != 0).takeWhile(_ == 1).length\n        val zerosZeros = zeros.takeWhile(_\
    \ < n).takeWhile(_ != 0).takeWhile(_ == 0).length\n        val onesZeros = ones.takeWhile(_\
    \ < n).takeWhile(_ != 0).takeWhile(_ == 1).length\n        val zerosOnes = zeros.takeWhile(_\
    \ < n).takeWhile(_ != 0).takeWhile(_ == 0).length\n        val onesOnes = ones.takeWhile(_",
  "        val ones = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n\
    \        val count = mutable.ArrayBuffer(0)\n        val digits = n.toString.reverse.grouped(10).reverse\n\
    \        while(digits.hasNext) {\n            val digit = digits.next()\n    \
    \        val digitCount = digit.count(_ == 1)\n            val digitZeroCount\
    \ = digit.count(_ == 0)\n            val digitOneCount = digit.count(_ == 1)\n\
    \            val digitZeroOneCount = digit.count(_ == 0 && _ == 1)\n         \
    \   val digitOneZeroCount = digit.count(_ == 1 && _ == 0)\n            val digitZeroZeroCount\
    \ = digit.count(_ == 0 && _ == 0)\n            val digitOneOneCount = digit.count(_\
    \ == 1 && _ == 1)\n            val digitZeroOneOneCount = digit.count(_ == 0 &&\
    \ _ == 1 && _ == 0)\n            val digitOneZeroOneCount = digit.count(_ == 1\
    \ && _ == 0 && _ == 1)\n            val digitZeroZeroOneCount = digit.count(_\
    \ == 0 && _ == 0 && _ == 1)\n            val digitOneOneOneCount = digit.count(_\
    \ == 1 && _ == 1 && _ == 0)\n            val digitZeroOneZeroCount = digit.count(_\
    \ == 0 && _ == 1 && _ == 0)\n            val digitOneZeroZeroCount = digit.count(_\
    \ == 1 && _ == 0 && _ == 0)\n            val digitZeroOneOneCount = digit.count(_\
    \ == 0 && _ == 1 && _ == 1)\n            val digitOneZeroOneOneCount = digit.count(_\
    \ == 1 && _ == 0 && _ == 1 && _ == 0)\n            val digitZeroZeroOneCount =\
    \ digit.count(_ == 0 && _ == 0 && _ == 1 && _ == 1)\n            val digitOneOneZeroCount\
    \ = digit.count(_ == 1 && _ == 1 && _ == 0)\n            val digitZeroOneOneCount\
    \ = digit.count(_ == 0 && _ == 1 && _ == 1)\n            val digitOneZeroZeroCount\
    \ = digit.count(_ == 1 && _ == 0 && _ == 0)\n            val digitZeroOneZeroCount\
    \ = digit.count(_ == 0 && _ == 1 && _ == 0)\n            val digitOneOneOneCount\
    \ = digit.count(_ == 1 && _ == 1 && _ == 1)\n            val digitZeroOneOneCount\
    \ = digit.count(_ == 0 && _ == 1 && _ == 1)\n            val digitOneZeroZeroCount\
    \ = digit.count(_ == 1 && _ == 0 && _ == 0)\n            val digitZeroOneOneCount\
    \ = digit.count(_ == 0 && _ == 1 && _ == 1)\n            val digitOneZeroOneOne",
  "        val ones = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n\
    \        val counts = mutable.Map[Long, Long]()\n        val starts = mutable.Set[Long]()\n\
    \        val ends = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val zerosCount = mutable.Set[Long]()\n        val onesCounts = mutable.Map[Long,\
    \ Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCountZeros\
    \ = mutable.Map[Long, Long]()\n        val zerosCountZeros = mutable.Map[Long,\
    \ Long]()\n        val onesCountOnes = mutable.Map[Long, Long]()\n        val\
    \ zerosCountOnes = mutable.Map[Long, Long]()\n        val onesCountZeroOnes =\
    \ mutable.Map[Long, Long]()\n        val zerosCountZeroOnes = mutable.Map[Long,\
    \ Long]()\n        val onesCountOneOnes = mutable.Map[Long, Long]()\n        val\
    \ zerosCountOneOnes = mutable.Map[Long, Long]()\n        val onesCountZeroZeroOnes\
    \ = mutable.Map[Long, Long]()\n        val zerosCountZeroZeroOnes = mutable.Map[Long,\
    \ Long]()\n        val onesCountOneZeroOnes = mutable.Map[Long, Long]()\n    \
    \    val zerosCountOneZeroOnes = mutable.Map[Long, Long]()\n        val onesCountZeroZeroZeroOnes\
    \ = mutable.Map[Long, Long]()\n        val zerosCountZeroZeroZeroOnes = mutable.Map[Long,\
    \ Long]()\n        val onesCountOneOneOnes = mutable.Map[Long, Long]()\n     \
    \   val zerosCountOneOneOnes = mutable.Map[Long, Long]()\n        val onesCountZeroZeroZeroOnes\
    \ = mutable.Map[Long, Long]()\n        val zerosCountZeroZeroZeroOnes = mutable.Map[Long,\
    \ Long]()\n        val onesCountOneZeroZeroOnes = mutable.Map[Long, Long]()\n\
    \        val zerosCountOneZeroZeroOnes = mutable.Map[Long, Long]()\n        val\
    \ onesCountZeroZeroZeroOnes = mutable.Map[Long, Long]()\n        val zerosCountZeroZeroZeroOnes\
    \ = mutable.Map[Long, Long]()\n        val onesCountOneOneZeroOnes = mutable.Map[Long,\
    \ Long", "        val ones = mutable.ListBuffer[Long]()\n        val zeros = mutable.ListBuffer[Long]()\n\
    \        val counts = mutable.ListBuffer[Long]()\n        val digits = n.toString.reverse.grouped(2).map(_.reverse).map(_.toInt)\n\
    \        digits.foreach(digit => {\n            if (digit._1 == 1) {\n       \
    \         ones += digit._2\n            } else {\n                zeros += digit._2\n\
    \            }\n        })\n        ones.foreach(count => counts += count)\n \
    \       zeros.foreach(count => counts += count)\n        counts.sum", "      \
    \  var count = 0\n        var last = 1\n        var current = 1\n        var next\
    \ = 1\n        while(current <= n) {\n            next = current * 10\n      \
    \      if(next == last)\n                count += 1\n            last = next\n\
    \            current += 1\n        }\n        count", "        val ones = mutable.ArrayBuffer(1)\n\
    \        val zeros = mutable.ArrayBuffer(0)\n        val count = mutable.ArrayBuffer(0)\n\
    \        val onesCount = mutable.ArrayBuffer(0)\n        val zerosCount = mutable.ArrayBuffer(0)\n\
    \        val onesCounts = mutable.ArrayBuffer(0)\n        val zerosCounts = mutable.ArrayBuffer(0)\n\
    \        val onesCountZeros = mutable.ArrayBuffer(0)\n        val zerosCountZeros\
    \ = mutable.ArrayBuffer(0)\n        val onesCountOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosCountOnes = mutable.ArrayBuffer(0)\n        val onesCountZeroOnes\
    \ = mutable.ArrayBuffer(0)\n        val zerosCountZeroOnes = mutable.ArrayBuffer(0)\n\
    \        val onesCountOneOnes = mutable.ArrayBuffer(0)\n        val zerosCountOneOnes\
    \ = mutable.ArrayBuffer(0)\n        val onesCountZeroZeros = mutable.ArrayBuffer(0)\n\
    \        val zerosCountZeroZeros = mutable.ArrayBuffer(0)\n        val onesCountOneZeros\
    \ = mutable.ArrayBuffer(0)\n        val zerosCountOneZeros = mutable.ArrayBuffer(0)\n\
    \        val onesCountOneOne = mutable.ArrayBuffer(0)\n        val zerosCountOneOne\
    \ = mutable.ArrayBuffer(0)\n        val onesCountZeroZeroOne = mutable.ArrayBuffer(0)\n\
    \        val zerosCountZeroZeroOne = mutable.ArrayBuffer(0)\n        val onesCountOneZeroOne\
    \ = mutable.ArrayBuffer(0)\n        val zerosCountOneZeroOne = mutable.ArrayBuffer(0)\n\
    \        val onesCountOneOneOne = mutable.ArrayBuffer(0)\n        val zerosCountOneOneOne\
    \ = mutable.ArrayBuffer(0)\n        val onesCountZeroZeroZero = mutable.ArrayBuffer(0)\n\
    \        val zerosCountZeroZeroZero = mutable.ArrayBuffer(0)\n        val onesCountOneZeroZero\
    \ = mutable.ArrayBuffer(0)\n        val zerosCountOneZeroZero = mutable.ArrayBuffer(0)\n\
    \        val onesCountOneOneZero = mutable.ArrayBuffer(0)\n        val zerosCountOneOneZero\
    \ = mutable.ArrayBuffer(0)\n        val onesCountOneOneOne = mutable.ArrayBuffer(0)\n\
    \        val zerosCountOneOneOne = mutable.ArrayBuffer(0)\n        val onesCountZeroZeroZero\
    \ = mutable.ArrayBuffer(0)\n        val zerosCountZeroZeroZero = mutable.ArrayBuffer(0)\n\
    \        val onesCountOneZeroZero = mutable.ArrayBuffer(0)\n        val zerosCountOneZeroZero",
  "        val ones = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n\
    \        val counts = mutable.Map[Long, Long]()\n        val starts = mutable.Set[Long]()\n\
    \        val ends = mutable.Set[Long]()\n        val digits = n.toString.reverse.grouped(10).toList\n\
    \        digits.foreach(x => {\n            val digit = x.toLong\n           \
    \ if (digit == 1) {\n                ones += digit\n            } else if (digit\
    \ == 0) {\n                zeros += digit\n            } else {\n            \
    \    counts += digit -> counts.getOrElse(digit, 0) + 1\n            }\n      \
    \  })\n        ones.foreach(x => starts += x)\n        zeros.foreach(x => ends\
    \ += x)\n        ones.toSeq.zip(zeros).toSeq.foreach(x => counts += x._1 -> x._2)\n\
    \        ones.toSeq.zip(starts).toSeq.foreach(x => counts += x._1 -> x._2)\n \
    \       ends.toSeq.zip(zeros).toSeq.foreach(x => counts += x._1 -> x._2)\n   \
    \     ones.toSeq.zip(ends).toSeq.foreach(x => counts += x._1 -> x._2)\n      \
    \  counts.toSeq.filter(x => x._2 > 0).size", "        val ones = mutable.ArrayBuffer(1)\n\
    \        val zeros = mutable.ArrayBuffer(0)\n        val count = mutable.ArrayBuffer(0)\n\
    \        val digits = n.toString.reverse.grouped(2).map(_.toInt)\n        while(digits.hasNext)\
    \ {\n            val digit = digits.next\n            val digit1 = digit(0)\n\
    \            val digit2 = digit(1)\n            if(digit1 == 1) {\n          \
    \      if(digit2 == 1) {\n                    count += 1\n                } else\
    \ {\n                    count -= 1\n                }\n            } else {\n\
    \                if(digit2 == 1) {\n                    count -= 1\n         \
    \       } else {\n                    count += 1\n                }\n        \
    \    }\n        }\n        digits.toList.map(_.toInt).sum", "        val ones\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zeros = mutable.ArrayBuffer.empty[Long]\n\
    \        val counts = mutable.ArrayBuffer.empty[Long]\n        val onesCount =\
    \ mutable.ArrayBuffer.empty[Long]\n        val zerosCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val countsCount = mutable.ArrayBuffer.empty[Long]\n        val onesCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val countsCountCount = mutable.ArrayBuffer.empty[Long]\n        val onesCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val countsCountCountCount = mutable.ArrayBuffer.empty[Long]\n       \
    \ val onesCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ zerosCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n        val countsCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val countsCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val countsCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val countsCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val countsCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCountCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val countsCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount3 = mutable.ListBuffer[Long]()\n\
    \        val onesCount4 = mutable.ListBuffer[Long]()\n        val onesCount5 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount6 = mutable.ListBuffer[Long]()\n\
    \        val onesCount7 = mutable.ListBuffer[Long]()\n        val onesCount8 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount9 = mutable.ListBuffer[Long]()\n\
    \        val onesCount10 = mutable.ListBuffer[Long]()\n        val onesCount11\
    \ = mutable.ListBuffer[Long]()\n        val onesCount12 = mutable.ListBuffer[Long]()\n\
    \        val onesCount13 = mutable.ListBuffer[Long]()\n        val onesCount14\
    \ = mutable.ListBuffer[Long]()\n        val onesCount15 = mutable.ListBuffer[Long]()\n\
    \        val onesCount16 = mutable.ListBuffer[Long]()\n        val onesCount17\
    \ = mutable.ListBuffer[Long]()\n        val onesCount18 = mutable.ListBuffer[Long]()\n\
    \        val onesCount19 = mutable.ListBuffer[Long]()\n        val onesCount20\
    \ = mutable.ListBuffer[Long]()\n        val onesCount21 = mutable.ListBuffer[Long]()\n\
    \        val onesCount22 = mutable.ListBuffer[Long]()\n        val onesCount23\
    \ = mutable.ListBuffer[Long]()\n        val onesCount24 = mutable.ListBuffer[Long]()\n\
    \        val onesCount25 = mutable.ListBuffer[Long]()\n        val onesCount26\
    \ = mutable.ListBuffer[Long]()\n        val onesCount27 = mutable.ListBuffer[Long]()\n\
    \        val onesCount28 = mutable.ListBuffer[Long]()\n        val onesCount29\
    \ = mutable.ListBuffer[Long]()\n        val onesCount30 = mutable.ListBuffer[Long]()\n\
    \        val onesCount31 = mutable.ListBuffer[Long]()\n        val onesCount32\
    \ = mutable.ListBuffer[Long]()\n"]
stop_tokens:
- "\n    }\n"
