name: HumanEval_83_starts_one_ends
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, return the count of the numbers of n-digit\n\
  \    // positive integers that start or end with 1.\n    def startsOneEnds(n : Long)\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
  \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
  \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
  \ == (18000l));\n    }\n\n}\n"
completions: ["        var count = 0\n        var last = 0\n        while(n > 0){\n\
    \            val x = n % 10\n            if(x != 1 && x == last){\n          \
    \      count += 1\n            }\n            last = x\n            n /= 10\n\
    \        }\n        count", "        val ones = mutable.ArrayBuffer.empty[Long]\n\
    \        val zeros = mutable.ArrayBuffer.empty[Long]\n        val counter = mutable.HashMap.empty[Long,\
    \ Long]\n        val counters = mutable.HashMap.empty[Long, Long]\n        val\
    \ n = n.toInt\n        val onesCount = 1\n        val zerosCount = 1\n       \
    \ val countersCount = 1\n        val countersCounts = mutable.HashMap.empty[Long,\
    \ Long]\n        val countersCounts = mutable.HashMap.empty[Long, Long]\n    \
    \    val countersCounts = mutable.HashMap.empty[Long, Long]\n        val countersCounts\
    \ = mutable.HashMap.empty[Long, Long]\n        val countersCounts = mutable.HashMap.empty[Long,\
    \ Long]\n        val countersCounts = mutable.HashMap.empty[Long, Long]\n    \
    \    val countersCounts = mutable.HashMap.empty[Long, Long]\n        val countersCounts\
    \ = mutable.HashMap.empty[Long, Long]\n        val countersCounts = mutable.HashMap.empty[Long,\
    \ Long]\n        val countersCounts = mutable.HashMap.empty[Long, Long]\n    \
    \    val countersCounts = mutable.HashMap.empty[Long, Long]\n        val countersCounts\
    \ = mutable.HashMap.empty[Long, Long]\n        val countersCounts = mutable.HashMap.empty[Long,\
    \ Long]\n        val countersCounts = mutable.HashMap.empty[Long, Long]\n    \
    \    val countersCounts = mutable.HashMap.empty[Long, Long]\n        val countersCounts\
    \ = mutable.HashMap.empty[Long, Long]\n        val countersCounts = mutable.HashMap.empty[Long,\
    \ Long]\n        val countersCounts = mutable.HashMap.empty[Long, Long]\n    \
    \    val countersCounts = mutable.HashMap.empty[Long, Long]\n        val countersCounts\
    \ = mutable.HashMap.empty[Long, Long]\n        val countersCounts = mutable.HashMap.empty[Long,\
    \ Long]\n        val countersCounts = mutable.HashMap.empty[Long, Long]\n    \
    \    val countersCounts = mutable.HashMap.empty[Long, Long]\n        val countersCounts\
    \ = mutable.HashMap.empty[Long, Long]\n        val countersCounts = mutable.HashMap.empty[Long,\
    \ Long]\n        val counters", "        var count = 0\n        val ones = Vector.fill(n\
    \ / 10)(1)\n        val zeros = Vector.fill(n / 10)(0)\n        val onesCount\
    \ = ones.count(_ == 1)\n        val zerosCount = zeros.count(_ == 0)\n       \
    \ if (onesCount == 1 && zerosCount == 0) {\n            count = n\n        } else\
    \ if (onesCount == 1 && zerosCount > 0) {\n            count = onesCount + zerosCount\n\
    \        } else if (onesCount > 0 && zerosCount == 0) {\n            count = onesCount\
    \ + n\n        } else {\n            count = onesCount + zerosCount + n\n    \
    \    }\n        count", "        val ones = mutable.ArrayBuffer(1)\n        val\
    \ zeros = mutable.ArrayBuffer(0)\n        val counts = mutable.ArrayBuffer.empty[Long]\n\
    \        val start = ones.head\n        val end = zeros.head\n        while(n\
    \ > 0){\n            val next = ones.dropWhile(x => x == start).head\n       \
    \     val nextZeros = zeros.dropWhile(x => x == end).head\n            counts\
    \ += next\n            counts += nextZeros\n            ones += next\n       \
    \     zeros += nextZeros\n            n -= 1\n        }\n        counts.sum",
  "        val ones = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        var count = 0\n        for (i <- 1 to n) {\n            if (i % 10 ==\
    \ 1) {\n                ones += i\n                onesCount += i\n          \
    \      count += 1\n            }\n        }\n        onesCount.toList.sortBy(_\
    \ - 1).last", "        val counts = mutable.HashMap.empty[Long, Long]\n      \
    \  val ones = mutable.ArrayBuffer.empty[Long]\n        val zeros = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount = mutable.ArrayBuffer.empty[Long]\n        val zerosCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n        val onesCountZeros\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCountZeros = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCountOnes = mutable.ArrayBuffer.empty[Long]\n        val zerosCountOnes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountZeroOnes = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCountZeroOnes = mutable.ArrayBuffer.empty[Long]\n        val\
    \ onesCountOneOnes = mutable.ArrayBuffer.empty[Long]\n        val zerosCountOneOnes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountZeroZeros = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCountZeroZeros = mutable.ArrayBuffer.empty[Long]\n        val\
    \ onesCountOneZeros = mutable.ArrayBuffer.empty[Long]\n        val zerosCountOneZeros\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountOneOneZeros = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCountOneOneZeros = mutable.ArrayBuffer.empty[Long]\n       \
    \ val onesCountZeroOneZeros = mutable.ArrayBuffer.empty[Long]\n        val zerosCountZeroOneZeros\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountOneZeroZeros = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCountOneZeroZeros = mutable.ArrayBuffer.empty[Long]\n      \
    \  val onesCountOneOneZeros = mutable.ArrayBuffer.empty[Long]\n        val zerosCountOneOneZeros\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountZeroZeroOneZeros = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCountZeroZeroOneZeros = mutable.ArrayBuffer.empty[Long]\n  \
    \      val onesCountOneZeroZeros = mutable.ArrayBuffer.empty[Long]\n        val\
    \ zerosCountOneZeroZeros = mutable.ArrayBuffer.empty[Long]\n        val onesCountOneOneZeros\
    \ = ", "        val ones = mutable.ArrayBuffer.empty[Long]\n        val zeros\
    \ = mutable.ArrayBuffer.empty[Long]\n        val counts = mutable.ArrayBuffer.empty[Long]\n\
    \        val starts = mutable.ArrayBuffer.empty[Long]\n        val ends = mutable.ArrayBuffer.empty[Long]\n\
    \        val nums = mutable.ArrayBuffer.empty[Long]\n        val numsLeft = n\n\
    \        val numsRight = n - 1\n        while(numsLeft > 0 || numsRight > 0) {\n\
    \            val leftNum = numsLeft % 10\n            val rightNum = numsRight\
    \ % 10\n            if(leftNum == 1 && rightNum == 1) {\n                ones\
    \ += numsLeft / 10\n                zeros += numsRight / 10\n                counts\
    \ += numsLeft / 10\n                starts += numsRight / 10\n               \
    \ ends += numsRight / 10\n                numsLeft /= 10\n                numsRight\
    \ /= 10\n            } else if(leftNum == 1 && rightNum != 1) {\n            \
    \    ones += numsLeft / 10\n                zeros += numsRight / 10\n        \
    \        counts += numsLeft / 10\n                starts += numsRight / 10\n \
    \               ends += numsRight / 10\n                numsLeft /= 10\n     \
    \           numsRight /= 10\n            } else if(leftNum != 1 && rightNum ==\
    \ 1) {\n                ones += numsLeft / 10\n                zeros += numsRight\
    \ / 10\n                counts += numsLeft / 10\n                starts += numsRight\
    \ / 10\n                ends += numsRight / 10\n                numsLeft /= 10\n\
    \                numsRight /= 10\n            } else if(leftNum != 1 && rightNum\
    \ != 1) {\n                ones += numsLeft / 10\n                zeros += numsRight\
    \ / 10\n                counts += numsLeft / 10\n                starts += numsRight\
    \ / 10\n                ends += numsRight / 10\n                numsLeft /= 10\n\
    \                numsRight /= 10\n            }\n        }\n        val onesCount\
    \ = ones.toList.length\n        val zerosCount = zeros.toList.length\n       \
    \ val countsCount = counts.toList.length\n        val startsCount = starts.toList.length\n\
    \        val endsCount = ends.toList.length\n        val numsCount = nums.toList.length\n\
    \        val numsLeft = n\n        val numsRight = n - 1\n        while(numsLeft\
    \ > 0 || numsRight > 0) {\n            val leftNum = nums", "        val ones\
    \ = mutable.ListBuffer.empty[Long]\n        val zeros = mutable.ListBuffer.empty[Long]\n\
    \        val counter = mutable.ListBuffer.empty[Long]\n        val counters =\
    \ mutable.ListBuffer.empty[Long]\n        val countersMap = mutable.HashMap.empty[Long,\
    \ Long]\n        val countersMap2 = mutable.HashMap.empty[Long, Long]\n      \
    \  val countersMap3 = mutable.HashMap.empty[Long, Long]\n        val countersMap4\
    \ = mutable.HashMap.empty[Long, Long]\n        val countersMap5 = mutable.HashMap.empty[Long,\
    \ Long]\n        val countersMap6 = mutable.HashMap.empty[Long, Long]\n      \
    \  val countersMap7 = mutable.HashMap.empty[Long, Long]\n        val countersMap8\
    \ = mutable.HashMap.empty[Long, Long]\n        val countersMap9 = mutable.HashMap.empty[Long,\
    \ Long]\n        val countersMap10 = mutable.HashMap.empty[Long, Long]\n     \
    \   val countersMap11 = mutable.HashMap.empty[Long, Long]\n        val countersMap12\
    \ = mutable.HashMap.empty[Long, Long]\n        val countersMap13 = mutable.HashMap.empty[Long,\
    \ Long]\n        val countersMap14 = mutable.HashMap.empty[Long, Long]\n     \
    \   val countersMap15 = mutable.HashMap.empty[Long, Long]\n        val countersMap16\
    \ = mutable.HashMap.empty[Long, Long]\n        val countersMap17 = mutable.HashMap.empty[Long,\
    \ Long]\n        val countersMap18 = mutable.HashMap.empty[Long, Long]\n     \
    \   val countersMap19 = mutable.HashMap.empty[Long, Long]\n        val countersMap20\
    \ = mutable.HashMap.empty[Long, Long]\n        val countersMap21 = mutable.HashMap.empty[Long,\
    \ Long]\n        val countersMap22 = mutable.HashMap.empty[Long, Long]\n     \
    \   val countersMap23 = mutable.HashMap.empty[Long, Long]\n        val countersMap24\
    \ = mutable.HashMap.empty[Long, Long]\n        val countersMap25 = mutable.HashMap.empty[Long,\
    \ Long]\n        val countersMap26 = mutable.HashMap.empty[Long, Long]\n     \
    \   val countersMap", "        val ones = mutable.Set[Long]()\n        val zeros\
    \ = mutable.Set[Long]()\n        val count = mutable.Set[Long]()\n        val\
    \ nums = mutable.Set[Long]()\n        val numsSet = mutable.Set[Long]()\n    \
    \    val numsSet2 = mutable.Set[Long]()\n        val numsSet3 = mutable.Set[Long]()\n\
    \        val numsSet4 = mutable.Set[Long]()\n        val numsSet5 = mutable.Set[Long]()\n\
    \        val numsSet6 = mutable.Set[Long]()\n        val numsSet7 = mutable.Set[Long]()\n\
    \        val numsSet8 = mutable.Set[Long]()\n        val numsSet9 = mutable.Set[Long]()\n\
    \        val numsSet10 = mutable.Set[Long]()\n        val numsSet11 = mutable.Set[Long]()\n\
    \        val numsSet12 = mutable.Set[Long]()\n        val numsSet13 = mutable.Set[Long]()\n\
    \        val numsSet14 = mutable.Set[Long]()\n        val numsSet15 = mutable.Set[Long]()\n\
    \        val numsSet16 = mutable.Set[Long]()\n        val numsSet17 = mutable.Set[Long]()\n\
    \        val numsSet18 = mutable.Set[Long]()\n        val numsSet19 = mutable.Set[Long]()\n\
    \        val numsSet20 = mutable.Set[Long]()\n        val numsSet21 = mutable.Set[Long]()\n\
    \        val numsSet22 = mutable.Set[Long]()\n        val numsSet23 = mutable.Set[Long]()\n\
    \        val numsSet24 = mutable.Set[Long]()\n        val numsSet25 = mutable.Set[Long]()\n\
    \        val numsSet26 = mutable.Set[Long]()\n        val numsSet27 = mutable.Set[Long]()\n\
    \        val numsSet28 = mutable.Set[Long]()\n        val numsSet29 = mutable.Set[Long]()\n\
    \        val numsSet30 = mutable.Set[Long]()\n        val numsSet31 = mutable.Set[Long]()\n\
    \        val numsSet32 = mutable.Set[Long", "        val ones = mutable.ArrayBuffer(1)\n\
    \        val zeros = mutable.ArrayBuffer(0)\n        val count = mutable.ArrayBuffer(0)\n\
    \        val onesCount = mutable.ArrayBuffer(0)\n        val zerosCount = mutable.ArrayBuffer(0)\n\
    \        val onesCount2 = mutable.ArrayBuffer(0)\n        val zerosCount2 = mutable.ArrayBuffer(0)\n\
    \        val onesCount3 = mutable.ArrayBuffer(0)\n        val zerosCount3 = mutable.ArrayBuffer(0)\n\
    \        val onesCount4 = mutable.ArrayBuffer(0)\n        val zerosCount4 = mutable.ArrayBuffer(0)\n\
    \        val onesCount5 = mutable.ArrayBuffer(0)\n        val zerosCount5 = mutable.ArrayBuffer(0)\n\
    \        val onesCount6 = mutable.ArrayBuffer(0)\n        val zerosCount6 = mutable.ArrayBuffer(0)\n\
    \        val onesCount7 = mutable.ArrayBuffer(0)\n        val zerosCount7 = mutable.ArrayBuffer(0)\n\
    \        val onesCount8 = mutable.ArrayBuffer(0)\n        val zerosCount8 = mutable.ArrayBuffer(0)\n\
    \        val onesCount9 = mutable.ArrayBuffer(0)\n        val zerosCount9 = mutable.ArrayBuffer(0)\n\
    \        val onesCount10 = mutable.ArrayBuffer(0)\n        val zerosCount10 =\
    \ mutable.ArrayBuffer(0)\n        val onesCount11 = mutable.ArrayBuffer(0)\n \
    \       val zerosCount11 = mutable.ArrayBuffer(0)\n        val onesCount12 = mutable.ArrayBuffer(0)\n\
    \        val zerosCount12 = mutable.ArrayBuffer(0)\n        val onesCount13 =\
    \ mutable.ArrayBuffer(0)\n        val zerosCount13 = mutable.ArrayBuffer(0)\n\
    \        val onesCount14 = mutable.ArrayBuffer(0)\n        val zerosCount14 =\
    \ mutable.ArrayBuffer(0)\n        val onesCount15 = mutable.ArrayBuffer(0)\n \
    \       val zerosCount15 = mutable.ArrayBuffer(0)\n        val onesCount16 = mutable.ArrayBuffer(0)\n\
    \        val zerosCount16 = mutable.ArrayBuffer(0)\n        val onesCount17 =\
    \ mutable.ArrayBuffer(0)\n        val zerosCount17 = mutable.ArrayBuffer(0)\n\
    \        val onesCount18 = mutable.ArrayBuffer(0)\n        val zerosCount18 =\
    \ mutable.ArrayBuffer(0)\n        val onesCount19 = mutable.ArrayBuffer(0)\n \
    \       val zerosCount19 = mutable.ArrayBuffer(0)\n        val onesCount20 = mutable.ArrayBuffer(0)\n\
    \        val zerosCount20 = mutable.ArrayBuffer(0)\n        val onesCount21 =\
    \ mutable.", "        val ones = mutable.ArrayBuffer.empty[Long]\n        val\
    \ zeros = mutable.ArrayBuffer.empty[Long]\n        val counts = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount = mutable.ArrayBuffer.empty[Long]\n        val zerosCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val countsCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCountCount = mutable.ArrayBuffer.empty[Long]\n        val zerosCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val countsCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCountCountCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ zerosCountCountCount = mutable.ArrayBuffer.empty[Long]\n        val countsCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n   \
    \     val countsCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val onesCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n    \
    \    val zerosCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n  \
    \      val countsCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCountCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val countsCountCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCountCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCountCountCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val countsCountCountCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCountCountCountCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCountCountCountCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val countsCountCountCountCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCountCountCountCountCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCountCountCountCountCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val countsCountCountCountCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]",
  "        val ones = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n\
    \        val counts = mutable.ArrayBuffer.empty[Long]\n        val onesCount =\
    \ mutable.ArrayBuffer.empty[Long]\n        val zerosCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesZeros = mutable.ArrayBuffer.empty[Long]\n        val zerosOnes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesOnes = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosZeros = mutable.ArrayBuffer.empty[Long]\n        val onesZeroOnes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosOneOnes = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesOneOnes = mutable.ArrayBuffer.empty[Long]\n        val zerosZeroOnes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesZeroZeros = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosOneZeros = mutable.ArrayBuffer.empty[Long]\n        val onesOneZeros\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosZeroOnes = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesZeroOneOnes = mutable.ArrayBuffer.empty[Long]\n        val zerosOneOneOnes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesOneOneOnes = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosZeroOneOnes = mutable.ArrayBuffer.empty[Long]\n        val onesZeroZeroOnes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosOneZeroOnes = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesOneZeroOnes = mutable.ArrayBuffer.empty[Long]\n        val zerosZeroOneOnes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesZeroOneZeros = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosOneZeroZeros = mutable.ArrayBuffer.empty[Long]\n        val\
    \ onesOneZeroZeros = mutable.ArrayBuffer.empty[Long]\n        val zerosZeroOneZeros\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesZeroOneOnes = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosOneOneOnes = mutable.ArrayBuffer.empty[Long]\n        val onesOneOneOnes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosZeroOneOnes = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesZeroZero", "        val ones = mutable.ListBuffer[Long]()\n \
    \       val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 = mutable.ListBuffer[Long]()\n\
    \        val onesCount3 = mutable.ListBuffer[Long]()\n        val onesCount4 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount5 = mutable.ListBuffer[Long]()\n\
    \        val onesCount6 = mutable.ListBuffer[Long]()\n        val onesCount7 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount8 = mutable.ListBuffer[Long]()\n\
    \        val onesCount9 = mutable.ListBuffer[Long]()\n        val onesCount10\
    \ = mutable.ListBuffer[Long]()\n        val onesCount11 = mutable.ListBuffer[Long]()\n\
    \        val onesCount12 = mutable.ListBuffer[Long]()\n        val onesCount13\
    \ = mutable.ListBuffer[Long]()\n        val onesCount14 = mutable.ListBuffer[Long]()\n\
    \        val onesCount15 = mutable.ListBuffer[Long]()\n        val onesCount16\
    \ = mutable.ListBuffer[Long]()\n        val onesCount17 = mutable.ListBuffer[Long]()\n\
    \        val onesCount18 = mutable.ListBuffer[Long]()\n        val onesCount19\
    \ = mutable.ListBuffer[Long]()\n        val onesCount20 = mutable.ListBuffer[Long]()\n\
    \        val onesCount21 = mutable.ListBuffer[Long]()\n        val onesCount22\
    \ = mutable.ListBuffer[Long]()\n        val onesCount23 = mutable.ListBuffer[Long]()\n\
    \        val onesCount24 = mutable.ListBuffer[Long]()\n        val onesCount25\
    \ = mutable.ListBuffer[Long]()\n        val onesCount26 = mutable.ListBuffer[Long]()\n\
    \        val onesCount27 = mutable.ListBuffer[Long]()\n        val onesCount28\
    \ = mutable.ListBuffer[Long]()\n        val onesCount29 = mutable.ListBuffer[Long]()\n\
    \        val onesCount30 = mutable.ListBuffer[Long]()\n        val onesCount31\
    \ = mutable.ListBuffer[Long]()\n        val onesCount32 = mutable.ListBuffer[Long]()\n",
  "        val ones = mutable.ArrayBuffer(1)\n        var count = 0\n        var i\
    \ = 0\n        while (i < n) {\n            if (ones.length == 0 || ones(0) ==\
    \ 1) {\n                ones += i\n                count += 1\n            }\n\
    \            i += 1\n        }\n        count", "        val ones = mutable.ListBuffer[Long]()\n\
    \        var count = 0\n        while(n > 0) {\n            ones += n\n      \
    \      n /= 10\n            count += 1\n        }\n        ones.toList.filter(x\
    \ => x == 1).length", "        var count = 0\n        val ones = Vector.fill(n\
    \ / 10)(1)\n        val tens = Vector.fill(n / 10)(10)\n        val tensPlusOnes\
    \ = tens + ones\n        val onesPlusTens = ones + tens\n        val onesPlusTensPlusOnes\
    \ = ones + tens + ones\n        onesPlusTensPlusOnes.foreach { x =>\n        \
    \    if (x == 1)\n                count += 1\n        }\n        tensPlusOnes.foreach\
    \ { x =>\n            if (x == 10)\n                count += 1\n        }\n  \
    \      onesPlusTens.foreach { x =>\n            if (x == 1)\n                count\
    \ += 1\n        }\n        onesPlusTensPlusOnes.foreach { x =>\n            if\
    \ (x == 1)\n                count += 1\n        }\n        tensPlusOnes.foreach\
    \ { x =>\n            if (x == 10)\n                count += 1\n        }\n  \
    \      onesPlusTens.foreach { x =>\n            if (x == 1)\n                count\
    \ += 1\n        }\n        onesPlusTensPlusOnes.foreach { x =>\n            if\
    \ (x == 1)\n                count += 1\n        }\n        tensPlusOnes.foreach\
    \ { x =>\n            if (x == 10)\n                count += 1\n        }\n  \
    \      onesPlusTens.foreach { x =>\n            if (x == 1)\n                count\
    \ += 1\n        }\n        onesPlusTensPlusOnes.foreach { x =>\n            if\
    \ (x == 1)\n                count += 1\n        }\n        tensPlusOnes.foreach\
    \ { x =>\n            if (x == 10)\n                count += 1\n        }\n  \
    \      onesPlusTens.foreach { x =>\n            if (x == 1)\n                count\
    \ += 1\n        }\n        onesPlusTensPlusOnes.foreach { x =>\n            if\
    \ (x == 1)\n                count += 1\n        }\n        tensPlusOnes.foreach\
    \ { x =>\n            if (x == 10)\n                count += 1\n        }\n  \
    \      onesPlusTens.foreach { x =>\n            if (x == 1)\n                count\
    \ += 1\n        }\n        onesPlusTensPlusOnes.foreach { x =>\n            if\
    \ (x == 1)\n                count += 1\n        }\n        tensPlusOnes.foreach\
    \ { x =>\n            if (x == 10)\n                count += 1\n        }\n  \
    \      onesPlusTens.foreach { x =>\n            if (x == 1)\n                count\
    \ += 1\n        }\n        onesPlusTensPlusOnes.foreach { x =>\n            if\
    \ (x == 1)\n                count += 1\n        }\n        tensPlusOnes.foreach\
    \ { x =>\n            if (x == 10)\n                count += 1\n        }\n  \
    \      ", "        var count = 0\n        var last = 0\n        for(i <- 1 to\
    \ n) {\n            if(i % 10 == 1) {\n                count += 1\n          \
    \      last = i\n            }\n        }\n        count += last - n + 1\n   \
    \     return count", "        val ones = mutable.ListBuffer[Long]()\n        val\
    \ onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 = mutable.ListBuffer[Long]()\n\
    \        val onesCount3 = mutable.ListBuffer[Long]()\n        val onesCount4 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount5 = mutable.ListBuffer[Long]()\n\
    \        val onesCount6 = mutable.ListBuffer[Long]()\n        val onesCount7 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount8 = mutable.ListBuffer[Long]()\n\
    \        val onesCount9 = mutable.ListBuffer[Long]()\n        val onesCount10\
    \ = mutable.ListBuffer[Long]()\n        val onesCount11 = mutable.ListBuffer[Long]()\n\
    \        val onesCount12 = mutable.ListBuffer[Long]()\n        val onesCount13\
    \ = mutable.ListBuffer[Long]()\n        val onesCount14 = mutable.ListBuffer[Long]()\n\
    \        val onesCount15 = mutable.ListBuffer[Long]()\n        val onesCount16\
    \ = mutable.ListBuffer[Long]()\n        val onesCount17 = mutable.ListBuffer[Long]()\n\
    \        val onesCount18 = mutable.ListBuffer[Long]()\n        val onesCount19\
    \ = mutable.ListBuffer[Long]()\n        val onesCount20 = mutable.ListBuffer[Long]()\n\
    \        val onesCount21 = mutable.ListBuffer[Long]()\n        val onesCount22\
    \ = mutable.ListBuffer[Long]()\n        val onesCount23 = mutable.ListBuffer[Long]()\n\
    \        val onesCount24 = mutable.ListBuffer[Long]()\n        val onesCount25\
    \ = mutable.ListBuffer[Long]()\n        val onesCount26 = mutable.ListBuffer[Long]()\n\
    \        val onesCount27 = mutable.ListBuffer[Long]()\n        val onesCount28\
    \ = mutable.ListBuffer[Long]()\n        val onesCount29 = mutable.ListBuffer[Long]()\n\
    \        val onesCount30 = mutable.ListBuffer[Long]()\n        val onesCount31\
    \ = mutable.ListBuffer[Long]()\n        val onesCount32 = mutable.ListBuffer[Long]()\n",
  "        val counts = mutable.HashMap.empty[Long, Long]\n        for (i <- 1 to\
    \ n) {\n            if (i % 10 == 1) {\n                counts.put(i, counts.getOrElse(i,\
    \ 0) + 1L)\n            }\n        }\n        counts.values.sum", "        val\
    \ ones = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount2 = mutable.ListBuffer[Long]()\n        val onesCount3 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val onesCount5 = mutable.ListBuffer[Long]()\n        val onesCount6 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val onesCount8 = mutable.ListBuffer[Long]()\n        val onesCount9 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val onesCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val onesCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val onesCount17 = mutable.ListBuffer[Long]()\n        val onesCount18\
    \ = mutable.ListBuffer[Long]()\n        val onesCount19 = mutable.ListBuffer[Long]()\n\
    \        val onesCount20 = mutable.ListBuffer[Long]()\n        val onesCount21\
    \ = mutable.ListBuffer[Long]()\n        val onesCount22 = mutable.ListBuffer[Long]()\n\
    \        val onesCount23 = mutable.ListBuffer[Long]()\n        val onesCount24\
    \ = mutable.ListBuffer[Long]()\n        val onesCount25 = mutable.ListBuffer[Long]()\n\
    \        val onesCount26 = mutable.ListBuffer[Long]()\n        val onesCount27\
    \ = mutable.ListBuffer[Long]()\n        val onesCount28 = mutable.ListBuffer[Long]()\n\
    \        val onesCount29 = mutable.ListBuffer[Long]()\n        val onesCount30\
    \ = mutable.ListBuffer[Long]()\n        val onesCount31 = mutable.ListBuffer[Long]()\n\
    \        val onesCount32 = mutable.ListBuffer[Long]()\n"]
stop_tokens:
- "\n    }\n"
