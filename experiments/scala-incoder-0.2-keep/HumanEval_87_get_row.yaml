name: HumanEval_87_get_row
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a 2 dimensional data, as a nested lists,\n    // which is\
  \ similar to matrix, however, unlike matrices,\n    // each row may contain a different\
  \ number of columns.\n    // Given lst, and integer x, find integers x in the list,\n\
  \    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    // each\
  \ tuple is a coordinate - (row, columns), starting with 0.\n    // Sort coordinates\
  \ initially by rows in ascending order.\n    // Also, sort coordinates of the row\
  \ by columns in descending order.\n    // Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n\
  \    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1,\
  \ 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n    // get_row([[], [1], [1,\
  \ 2, 3]], 3) == [(2, 2)]\n    def getRow(lst : List[List[Long]], x : Long) : List[Tuple2[Long,\
  \ Long]] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(getRow((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l)).equals((List[Tuple2[Long,\
  \ Long]]((0l, 0l), (1l, 4l), (1l, 0l), (2l, 5l), (2l, 0l)))));\n    assert(getRow((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))), (2l)).equals((List[Tuple2[Long,\
  \ Long]]((0l, 1l), (1l, 1l), (2l, 1l), (3l, 1l), (4l, 1l), (5l, 1l)))));\n    assert(getRow((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 1l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l)).equals((List[Tuple2[Long,\
  \ Long]]((0l, 0l), (1l, 0l), (2l, 1l), (2l, 0l), (3l, 2l), (3l, 0l), (4l, 3l), (4l,\
  \ 0l), (5l, 4l), (5l, 0l), (6l, 5l), (6l, 0l)))));\n    assert(getRow((List[List[Long]]()),\
  \ (1l)).equals((List[Tuple2[Long, Long]]())));\n    assert(getRow((List[List[Long]](List[Long](1l.toLong))),\
  \ (2l)).equals((List[Tuple2[Long, Long]]())));\n    assert(getRow((List[List[Long]](List[Long](),\
  \ List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong))), (3l)).equals((List[Tuple2[Long,\
  \ Long]]((2l, 2l)))));\n    }\n\n}\n"
completions: ["        val rows = lst.map(_.length)\n        val cols = lst(0).length\n\
    \        val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        val\
    \ row = 0\n        val col = 0\n        while(row < rows && col < cols) {\n  \
    \          val r = lst(row).indexOf(x)\n            val c = lst(row).lastIndexOf(x)\n\
    \            val rowStart = r - row\n            val colStart = c - col\n    \
    \        val rowEnd = rowStart + lst(row).length\n            val colEnd = colStart\
    \ + lst(row).last.length\n            val tuple = (rowStart, colStart)\n     \
    \       result.add(tuple)\n            row += 1\n            col += 1\n      \
    \  }\n        result.sortBy(_._1)\n        result.sortBy(_._2, descending = true)\n\
    \        result.toList", "        val lst2 = lst.sortWith(_.compare(x, _) < 0)\n\
    \        val lst3 = lst2.sortWith(_.compare(x, _) > 0)\n        val lst4 = lst3.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst5 = lst4.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst6 = lst5.sortWith(_.compare(x, _) < 0)\n        val lst7 = lst6.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst8 = lst7.sortWith(_.compare(x, _) < 0)\n        val\
    \ lst9 = lst8.sortWith(_.compare(x, _) > 0)\n        val lst10 = lst9.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst11 = lst10.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst12 = lst11.sortWith(_.compare(x, _) < 0)\n        val lst13 = lst12.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst14 = lst13.sortWith(_.compare(x, _) < 0)\n        val\
    \ lst15 = lst14.sortWith(_.compare(x, _) > 0)\n        val lst16 = lst15.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst17 = lst16.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst18 = lst17.sortWith(_.compare(x, _) < 0)\n        val lst19 = lst18.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst20 = lst19.sortWith(_.compare(x, _) < 0)\n        val\
    \ lst21 = lst20.sortWith(_.compare(x, _) > 0)\n        val lst22 = lst21.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst23 = lst22.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst24 = lst23.sortWith(_.compare(x, _) < 0)\n        val lst25 = lst24.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst26 = lst25.sortWith(_.compare(x, _) < 0)\n        val\
    \ lst27 = lst26.sortWith(_.compare(x, _) > 0)\n        val lst28 = lst27.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst29 = lst28.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst30 = lst29.sortWith(_.compare(x, _) < 0)\n        val lst31 = lst30.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst32 = lst31.sortWith(_.compare(x, ", "        val rows\
    \ = lst.map(_.length)\n        val cols = lst(0).length\n        val result =\
    \ new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        var row = 0\n       \
    \ var col = 0\n        while(row < rows && col < cols) {\n            val rowStart\
    \ = lst(row).indexOf(x)\n            val colStart = lst(row).indexOf(lst(row).indexOf(x))\n\
    \            val rowEnd = rowStart + lst(row).length\n            val colEnd =\
    \ colStart + lst(row).length\n            val tuple = (rowStart, colStart)\n \
    \           if(rowStart < colStart) {\n                result.add(tuple)\n   \
    \             row += 1\n            } else {\n                col += 1\n     \
    \       }\n        }\n        result.sortBy(_._1)\n        result.sortBy(_._2)\n\
    \        result.toList", "        val lst2 = lst.map(_.toList).flatten\n     \
    \   val lst3 = lst2.zipWithIndex.filter(_._1 == x).sortBy(_._2).reverse\n    \
    \    val lst4 = lst3.map(x => (x._2, x._1))\n        lst4.toList", "        val\
    \ lst2 = lst.sortBy(row => row.map(_.toInt))\n        val lst3 = lst2.sortBy(row\
    \ => row.map(_.toInt).reverse)\n        val lst4 = lst3.map(row => Tuple2(row(0),\
    \ row(lst2.indexOf(lst.indexOf(row)))))\n        lst4.filter(row => row._1 ==\
    \ x).map(row => Tuple2(row._1, row._2))", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = new mutable.ArrayBuffer[Long]()\n        val col\
    \ = new mutable.ArrayBuffer[Long]()\n        var i = 0\n        while (i < rows)\
    \ {\n            val row = lst(i).zipWithIndex.sortBy(_._1).map(x => x._2)\n \
    \           val col = lst(i).zipWithIndex.sortBy(_._2).map(x => x._1)\n      \
    \      if (row(i) == x) {\n                result.append((row(i), col(i)))\n \
    \           }\n            i += 1\n        }\n        result.toList", "      \
    \  val lst1 = lst.sortWith((x, y) => x.compareTo(y))\n        val lst2 = lst1.sortWith((x,\
    \ y) => y.compareTo(x))\n        val lst3 = lst2.sortWith((x, y) => x.compareTo(y))\n\
    \        val lst4 = lst3.sortWith((x, y) => y.compareTo(x))\n        val lst5\
    \ = lst4.sortWith((x, y) => x.compareTo(y))\n        val lst6 = lst5.sortWith((x,\
    \ y) => y.compareTo(x))\n        val lst7 = lst6.sortWith((x, y) => x.compareTo(y))\n\
    \        val lst8 = lst7.sortWith((x, y) => y.compareTo(x))\n        val lst9\
    \ = lst8.sortWith((x, y) => x.compareTo(y))\n        val lst10 = lst9.sortWith((x,\
    \ y) => y.compareTo(x))\n        val lst11 = lst10.sortWith((x, y) => x.compareTo(y))\n\
    \        val lst12 = lst11.sortWith((x, y) => y.compareTo(x))\n        val lst13\
    \ = lst12.sortWith((x, y) => x.compareTo(y))\n        val lst14 = lst13.sortWith((x,\
    \ y) => y.compareTo(x))\n        val lst15 = lst14.sortWith((x, y) => x.compareTo(y))\n\
    \        val lst16 = lst15.sortWith((x, y) => y.compareTo(x))\n        val lst17\
    \ = lst16.sortWith((x, y) => x.compareTo(y))\n        val lst18 = lst17.sortWith((x,\
    \ y) => y.compareTo(x))\n        val lst19 = lst18.sortWith((x, y) => x.compareTo(y))\n\
    \        val lst20 = lst19.sortWith((x, y) => y.compareTo(x))\n        val lst21\
    \ = lst20.sortWith((x, y) => x.compareTo(y))\n        val lst22 = lst21.sortWith((x,\
    \ y) => y.compareTo(x))\n        val lst23 = lst22.sortWith((x, y) => x.compareTo(y))\n\
    \        val lst24 = lst23.sortWith((x, y) => y.compareTo(x))\n        val lst25\
    \ = lst24.sortWith((x, y) => x.compareTo(y))\n        val lst26 = lst25.sortWith((x,\
    \ y) => y.compareTo(x))\n        val lst27 = lst26.sortWith((x, y) => x.compareTo(y))\n\
    \        val lst28 = lst27.sortWith((x, y) => y.compareTo(x))\n        val lst29\
    \ = lst28.sortWith((x, y) => x.compareTo(y))\n        val lst30 = lst29.sortWith((x,\
    \ y) => y.compareTo(x))", "        val rows = lst.map(_.length)\n        val cols\
    \ = lst(0).length\n        val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n\
    \        val row = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until rows){\n            row += i\n            for(j <- 0\
    \ until cols){\n                col += j\n                if(lst(i)(j) == x){\n\
    \                    result += (Tuple2(row.toInt, col.toInt))\n              \
    \  }\n            }\n        }\n        result.sortBy(_._1)\n        result.sortBy(_._2,\
    \ descending = true)\n        return result.toList", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        var row = 0\n        var col = 0\n        while(row < rows\
    \ && col < cols) {\n            val value = lst(row)(col)\n            if(value\
    \ == x) {\n                result.add(Tuple2(row, col))\n            }\n     \
    \       col += 1\n            if(col == cols) {\n                row += 1\n  \
    \              col = 0\n            }\n        }\n        result.sortBy(_._1)\n\
    \        result.sortBy(_._2, descending = true)\n        result.toList", "   \
    \     val rows = lst.map(_.length)\n        val cols = lst(0).length\n       \
    \ val result = new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        val rows\
    \ = lst.map(_.length)\n        val cols = lst(0).length\n        var i = 0\n \
    \       var j = 0\n        while (i < rows && j < cols) {\n            if (lst(i)(j)\
    \ == x) {\n                result.add(Tuple2(i, j))\n                i += 1\n\
    \                j += 1\n            } else if (lst(i)(j) > x) {\n           \
    \     i += 1\n            } else {\n                j += 1\n            }\n  \
    \      }\n        result.sortBy(_._1)\n        result.sortBy(_._2, descending\
    \ = true)\n        return result.toList", "        val m = lst.size\n        val\
    \ n = lst(0).size\n        val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n\
    \        val row = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < m) {\n            val row = lst(i).zipWithIndex.filter(_._1\
    \ == x).map(_._2).sorted\n            row.foreach(x => rows += x)\n          \
    \  row.foreach(x => col += x)\n            row.foreach(x => cols += x)\n     \
    \       val row1 = row.sortBy(x => -x)\n            val col1 = col.sortBy(x =>\
    \ -x)\n            val row2 = row1.sortBy(x => -x)\n            val col2 = col1.sortBy(x\
    \ => -x)\n            val row3 = row2.sortBy(x => -x)\n            val col3 =\
    \ col2.sortBy(x => -x)\n            val row4 = row3.sortBy(x => -x)\n        \
    \    val col4 = col3.sortBy(x => -x)\n            val row5 = row4.sortBy(x =>\
    \ -x)\n            val col5 = col4.sortBy(x => -x)\n            val row6 = row5.sortBy(x\
    \ => -x)\n            val col6 = col5.sortBy(x => -x)\n            val row7 =\
    \ row6.sortBy(x => -x)\n            val col7 = col6.sortBy(x => -x)\n        \
    \    val row8 = row7.sortBy(x => -x)\n            val col8 = col7.sortBy(x =>\
    \ -x)\n            val row9 = row8.sortBy(x => -x)\n            val col9 = col8.sortBy(x\
    \ => -x)\n            val row10 = row9.sortBy(x => -x)\n            val col10\
    \ = col9.sortBy(x => -x)\n            val row11 = row10.sortBy(x => -x)\n    \
    \        val col11 = col10.sortBy(x => -x)\n            val row12 = row11.sortBy(x\
    \ => -x)\n            val col12 = col11.sortBy(x => -x)\n            val row13\
    \ = row12.sortBy(x => -x)\n            val col13 = col12.sortBy(x => -x)\n   \
    \         val row14 = row13.sortBy(x => -x)\n            val col14 = col13.sortBy(x\
    \ => -x)\n            val row15 = ", "        val rows = lst.map(_.length)\n \
    \       val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        for (i <- 0 until rows) {\n            val row = lst(i)\n\
    \            val rowResult = row.zipWithIndex.filter(_._1 == x).map(_._2)\n  \
    \          val rowResultSorted = rowResult.sortBy(_._1).reverse\n            val\
    \ rowResultSortedByCol = rowResultSorted.sortBy(_._2).reverse\n            for\
    \ (j <- 0 until cols) {\n                val col = rowResultSortedByCol(j)\n \
    \               val colResult = col.zipWithIndex.filter(_._1 == x).map(_._2)\n\
    \                val colResultSorted = colResult.sortBy(_._1).reverse\n      \
    \          val colResultSortedByRow = colResultSorted.sortBy(_._2).reverse\n \
    \               val tuple = Tuple2(i, j) -> (colResultSortedByRow(0), colResultSortedByRow(colResultSorted.length\
    \ - 1))\n                result.add(tuple)\n            }\n        }\n       \
    \ result.sortBy(_._1).reverse", "        val rows = lst.map(_.length)\n      \
    \  val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = new mutable.ArrayBuffer[Long]()\n        val col\
    \ = new mutable.ArrayBuffer[Long]()\n        var i = 0\n        while (i < rows.length)\
    \ {\n            val row = lst(i).zipWithIndex.sortBy(_._1).map(_._2)\n      \
    \      val col = lst(i).zipWithIndex.sortBy(_._2).map(_._1)\n            val row\
    \ = row.drop(x)\n            val col = col.drop(x)\n            val rowLength\
    \ = row.length\n            val colLength = col.length\n            val rowIndex\
    \ = row.indexOf(x)\n            val colIndex = col.indexOf(x)\n            val\
    \ rowStart = rowIndex - rowLength\n            val colStart = colIndex - colLength\n\
    \            val rowEnd = rowStart + rowLength\n            val colEnd = colStart\
    \ + colLength\n            val rowTuple = row.zip(col.drop(rowLength))\n     \
    \       val colTuple = col.zip(row.drop(colLength))\n            val rowTuple2\
    \ = rowTuple.sortBy(_._1).map(_._2)\n            val colTuple2 = colTuple.sortBy(_._2).map(_._1)\n\
    \            val rowTuple3 = rowTuple2.drop(x)\n            val colTuple3 = colTuple2.drop(x)\n\
    \            val rowTuple4 = rowTuple3.zipWithIndex.sortBy(_._1).map(_._2)\n \
    \           val colTuple4 = colTuple3.zipWithIndex.sortBy(_._2).map(_._1)\n  \
    \          val rowTuple5 = rowTuple4.drop(x)\n            val colTuple5 = colTuple4.drop(x)\n\
    \            val rowTuple6 = rowTuple5.zipWithIndex.sortBy(_._1).map(_._2)\n \
    \           val colTuple6 = colTuple5.zipWithIndex.sortBy(_._2).map(_._1)\n  \
    \          val rowTuple7 = rowTuple6.drop(x)\n            val colTuple7 = colTuple6.drop(x)\n\
    \            val rowTuple8 = rowTuple7.zipWithIndex.sortBy(_._1).map(_._2)\n \
    \           val colTuple8 = colTuple7.zipWithIndex.sortBy(_._2).map(_._1)\n  \
    \          val rowTuple9 = rowTuple8.drop(x)\n            val colTuple9 = colTuple8.drop(x)\n\
    \            val rowTuple10 = rowTuple9.zipWithIndex.sortBy(_._1).map(_._2)\n\
    \            val colTuple10 = colTuple9.zipWithIndex.sortBy(_._2).map", "    \
    \    val rows = lst.map(_.length)\n        val cols = lst(0).length\n        val\
    \ result = new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        val row = new\
    \ mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n",
  "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        val rowMap\
    \ = new mutable.HashMap[Long, Long]()\n        val colMap = new mutable.HashMap[Long,\
    \ Long]()\n        var row = 0\n        var col = 0\n        while(row < rows)\
    \ {\n            val rowSize = lst(row).length\n            while(col < cols)\
    \ {\n                val colSize = lst(row)(col).length\n                if(lst(row)(col)\
    \ == x) {\n                    result.append((row, col))\n                   \
    \ rowMap.put(row, rowMap.get(row) + 1)\n                    colMap.put(col, colMap.get(col)\
    \ + 1)\n                }\n                col += 1\n                if(col ==\
    \ colSize) {\n                    col += 1\n                }\n            }\n\
    \            row += 1\n            if(row == rowSize) {\n                row +=\
    \ 1\n            }\n        }\n        result.sortBy(_._1)\n        result.sortBy(_._2,\
    \ false)\n        return result.toList", "        val lst2 = lst.map(_.toList)\n\
    \        val lst3 = lst2.map(x => x.filter(_ == x))\n        val lst4 = lst3.map(x\
    \ => x.sortWith(_ < _))\n        val lst5 = lst4.map(x => x.sortWith(_ < _))\n\
    \        val lst6 = lst5.map(x => x.sortWith(_ < _))\n        val lst7 = lst6.map(x\
    \ => x.sortWith(_ < _))\n        val lst8 = lst7.map(x => x.sortWith(_ < _))\n\
    \        val lst9 = lst8.map(x => x.sortWith(_ < _))\n        val lst10 = lst9.map(x\
    \ => x.sortWith(_ < _))\n        val lst11 = lst10.map(x => x.sortWith(_ < _))\n\
    \        val lst12 = lst11.map(x => x.sortWith(_ < _))\n        val lst13 = lst12.map(x\
    \ => x.sortWith(_ < _))\n        val lst14 = lst13.map(x => x.sortWith(_ < _))\n\
    \        val lst15 = lst14.map(x => x.sortWith(_ < _))\n        val lst16 = lst15.map(x\
    \ => x.sortWith(_ < _))\n        val lst17 = lst16.map(x => x.sortWith(_ < _))\n\
    \        val lst18 = lst17.map(x => x.sortWith(_ < _))\n        val lst19 = lst18.map(x\
    \ => x.sortWith(_ < _))\n        val lst20 = lst19.map(x => x.sortWith(_ < _))\n\
    \        val lst21 = lst20.map(x => x.sortWith(_ < _))\n        val lst22 = lst21.map(x\
    \ => x.sortWith(_ < _))\n        val lst23 = lst22.map(x => x.sortWith(_ < _))\n\
    \        val lst24 = lst23.map(x => x.sortWith(_ < _))\n        val lst25 = lst24.map(x\
    \ => x.sortWith(_ < _))\n        val lst26 = lst25.map(x => x.sortWith(_ < _))\n\
    \        val lst27 = lst26.map(x => x.sortWith(_ < _))\n        val lst28 = lst27.map(x\
    \ => x.sortWith(_ < _))\n        val lst29 = lst28.map(x => x.sortWith(_ < _))\n\
    \        val lst30 = lst29.map(x => x.sortWith(_ < _))\n        val lst31 = lst30.map(x ",
  "        val rows = lst.map(_.size)\n        val cols = lst(0).size\n        val\
    \ result = new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        var i = 0\n\
    \        while (i < rows) {\n            var j = 0\n            while (j < cols)\
    \ {\n                if (lst(i)(j) == x) {\n                    result.append((i,\
    \ j))\n                }\n                j += 1\n            }\n            i\
    \ += 1\n        }\n        result.sortBy(_._1)\n        result.sortBy(_._2, descending\
    \ = true)\n        result", "        val lst1 = lst.sortWith(_.compareTo(x) <\
    \ 0)\n        val lst2 = lst1.sortWith(_.compareTo(x) > 0)\n        val lst3 =\
    \ lst2.sortWith(_.compareTo(x) < 0)\n        val lst4 = lst3.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst5 = lst4.sortWith(_.compareTo(x) < 0)\n        val lst6\
    \ = lst5.sortWith(_.compareTo(x) > 0)\n        val lst7 = lst6.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst8 = lst7.sortWith(_.compareTo(x) > 0)\n        val lst9\
    \ = lst8.sortWith(_.compareTo(x) < 0)\n        val lst10 = lst9.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst11 = lst10.sortWith(_.compareTo(x) < 0)\n        val lst12\
    \ = lst11.sortWith(_.compareTo(x) > 0)\n        val lst13 = lst12.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst14 = lst13.sortWith(_.compareTo(x) > 0)\n        val lst15\
    \ = lst14.sortWith(_.compareTo(x) < 0)\n        val lst16 = lst15.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst17 = lst16.sortWith(_.compareTo(x) < 0)\n        val lst18\
    \ = lst17.sortWith(_.compareTo(x) > 0)\n        val lst19 = lst18.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst20 = lst19.sortWith(_.compareTo(x) > 0)\n        val lst21\
    \ = lst20.sortWith(_.compareTo(x) < 0)\n        val lst22 = lst21.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst23 = lst22.sortWith(_.compareTo(x) < 0)\n        val lst24\
    \ = lst23.sortWith(_.compareTo(x) > 0)\n        val lst25 = lst24.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst26 = lst25.sortWith(_.compareTo(x) > 0)\n        val lst27\
    \ = lst26.sortWith(_.compareTo(x) < 0)\n        val lst28 = lst27.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst29 = lst28.sortWith(_.compareTo(x) < 0)\n        val lst30\
    \ = lst29.sortWith(_.compareTo(x) > 0)\n        val lst31 = lst30.sortWith(_.compareTo(x",
  "        val rowList = lst.map(row => row.filter(_ != x))\n        val rowTuples\
    \ = rowList.map(row => (row.indexOf(x), row.lastIndexOf(x)))\n        rowTuples.sortBy(_._1).reverse.sortBy(_._2).reverse",
  "        val lst1 = lst.sortBy(_(0))\n        val lst2 = lst1.sortBy(_(1)) // in\
    \ descending order\n        val lst3 = lst2.filter(_(0) != x)\n        val lst4\
    \ = lst3.sortBy(_(0))\n        val lst5 = lst4.sortBy(_(1)) // in descending order\n\
    \        lst5.map(_ -> Tuple2(_(0), _(1))).toList", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = new mutable.ArrayBuffer[Long]()\n        val col\
    \ = new mutable.ArrayBuffer[Long]()\n        val rowIndex = new mutable.ArrayBuffer[Long]()\n\
    \        val colIndex = new mutable.ArrayBuffer[Long]()\n        val rowIndexMap\
    \ = new mutable.HashMap[Long, Long]()\n        val colIndexMap = new mutable.HashMap[Long,\
    \ Long]()\n        val rowIndexMap2 = new mutable.HashMap[Long, Long]()\n    \
    \    val colIndexMap2 = new mutable.HashMap[Long, Long]()\n        val rowIndexMap3\
    \ = new mutable.HashMap[Long, Long]()\n        val colIndexMap3 = new mutable.HashMap[Long,\
    \ Long]()\n        val rowIndexMap4 = new mutable.HashMap[Long, Long]()\n    \
    \    val colIndexMap4 = new mutable.HashMap[Long, Long]()\n        val rowIndexMap5\
    \ = new mutable.HashMap[Long, Long]()\n        val colIndexMap5 = new mutable.HashMap[Long,\
    \ Long]()\n        val rowIndexMap6 = new mutable.HashMap[Long, Long]()\n    \
    \    val colIndexMap6 = new mutable.HashMap[Long, Long]()\n        val rowIndexMap7\
    \ = new mutable.HashMap[Long, Long]()\n        val colIndexMap7 = new mutable.HashMap[Long,\
    \ Long]()\n        val rowIndexMap8 = new mutable.HashMap[Long, Long]()\n    \
    \    val colIndexMap8 = new mutable.HashMap[Long, Long]()\n        val rowIndexMap9\
    \ = new mutable.HashMap[Long, Long]()\n        val colIndexMap9 = new mutable.HashMap[Long,\
    \ Long]()\n        val rowIndexMap10 = new mutable.HashMap[Long, Long]()\n   \
    \     val colIndexMap10 = new mutable.HashMap[Long, Long]()\n        val rowIndexMap11\
    \ = new mutable.HashMap[Long, Long]()\n        val colIndexMap11 = new mutable.HashMap[Long,\
    \ Long]()\n        val rowIndexMap12 = new mutable.HashMap[Long, Long]()\n   \
    \     val colIndexMap12 = new mutable.HashMap[Long, Long]()\n        val rowIndexMap13\
    \ = new mutable.HashMap[Long, Long]()\n        val colIndexMap13 = new ", "  \
    \      val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        var row\
    \ = 0\n        var col = 0\n        while (row < rows && col < cols) {\n     \
    \       if (lst(row)(col) == x) {\n                result.add(Tuple2(row, col))\n\
    \                row += 1\n                col += 1\n            } else if (lst(row)(col)\
    \ < x) {\n                row += 1\n            } else {\n                col\
    \ += 1\n            }\n        }\n        result.sortBy(_._1).reverse", "    \
    \    val lst1 = lst.sortWith(_.compare(x, _) < 0)\n        val lst2 = lst1.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst3 = lst2.sortWith(_.compare(x, _) < 0)\n        val\
    \ lst4 = lst3.sortWith(_.compare(x, _) > 0)\n        val lst5 = lst4.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst6 = lst5.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst7 = lst6.sortWith(_.compare(x, _) < 0)\n        val lst8 = lst7.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst9 = lst8.sortWith(_.compare(x, _) < 0)\n        val\
    \ lst10 = lst9.sortWith(_.compare(x, _) > 0)\n        val lst11 = lst10.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst12 = lst11.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst13 = lst12.sortWith(_.compare(x, _) < 0)\n        val lst14 = lst13.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst15 = lst14.sortWith(_.compare(x, _) < 0)\n        val\
    \ lst16 = lst15.sortWith(_.compare(x, _) > 0)\n        val lst17 = lst16.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst18 = lst17.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst19 = lst18.sortWith(_.compare(x, _) < 0)\n        val lst20 = lst19.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst21 = lst20.sortWith(_.compare(x, _) < 0)\n        val\
    \ lst22 = lst21.sortWith(_.compare(x, _) > 0)\n        val lst23 = lst22.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst24 = lst23.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst25 = lst24.sortWith(_.compare(x, _) < 0)\n        val lst26 = lst25.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst27 = lst26.sortWith(_.compare(x, _) < 0)\n        val\
    \ lst28 = lst27.sortWith(_.compare(x, _) > 0)\n        val lst29 = lst28.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst30 = lst29.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst31 = lst30.sortWith(_.compare(x, _", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = new mutable.ArrayBuffer[Long]()\n        val col\
    \ = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        var i = 0\n     \
    \   while (i < rows.length) {\n            val r = row(i)\n            val c =\
    \ col(i)\n            if (r == x) {\n                rows += r\n             \
    \   cols += c\n                result += (Tuple2(rows(i), cols(i)))\n        \
    \    }\n            i += 1\n        }\n        result.sortBy(_._1)\n        result.sortBy(_._2,\
    \ descending = true)\n        result.toList", "        val rowList = mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        val columnList = mutable.ListBuffer[Long]()\n        val rowCount\
    \ = lst.size\n        val columnCount = lst(0).size\n        val rowIndex = 0\n\
    \        val columnIndex = 0\n        while(rowIndex < rowCount) {\n         \
    \   val rowList = lst(rowIndex)\n            val columnList = lst(rowIndex).drop(columnIndex)\n\
    \            val rowCount = rowList.size\n            val columnCount = columnList.size\n\
    \            val rowIndex1 = rowIndex\n            val columnIndex1 = columnIndex\n\
    \            while(columnIndex < columnCount) {\n                val rowValue\
    \ = rowList(rowIndex1)\n                val columnValue = columnList(columnIndex)\n\
    \                if(rowValue == x) {\n                    rowIndex1 += 1\n   \
    \                 columnIndex1 -= 1\n                    rowIndex += 1\n     \
    \               columnIndex += 1\n                    rowList.clear()\n      \
    \              columnList.clear()\n                    rowCount -= 1\n       \
    \             columnCount -= 1\n                }\n                else {\n  \
    \                  rowIndex1 += 1\n                    columnIndex1 += 1\n   \
    \                 rowIndex += 1\n                    columnIndex += 1\n      \
    \              rowList.clear()\n                    columnList.clear()\n     \
    \               rowCount -= 1\n                    columnCount -= 1\n        \
    \        }\n            }\n            rowIndex += 1\n            columnIndex\
    \ += 1\n            rowList.clear()\n            columnList.clear()\n        \
    \    rowCount -= 1\n            columnCount -= 1\n        }\n        rowList.sortBy(_._1)\n\
    \        columnList.sortBy(_._2)\n        rowList.map(x => (x._1, x._2))", " \
    \       val lst2 = lst.map(_.toList)\n        val lst3 = lst2.map(x => x.filter(_\
    \ == x))\n        val lst4 = lst3.map(x => x.sortWith(_ < _))\n        val lst5\
    \ = lst4.map(x => x.sortBy(_._2))\n        val lst6 = lst5.map(x => x.sortBy(_._1))\n\
    \        val lst7 = lst6.map(x => x.filter(_._1 == x))\n        val lst8 = lst7.map(x\
    \ => x.filter(_._1 == x))\n        val lst9 = lst8.map(x => x.filter(_._1 == x))\n\
    \        val lst10 = lst9.map(x => x.filter(_._1 == x))\n        val lst11 = lst10.map(x\
    \ => x.filter(_._1 == x))\n        val lst12 = lst11.map(x => x.filter(_._1 ==\
    \ x))\n        val lst13 = lst12.map(x => x.filter(_._1 == x))\n        val lst14\
    \ = lst13.map(x => x.filter(_._1 == x))\n        val lst15 = lst14.map(x => x.filter(_._1\
    \ == x))\n        val lst16 = lst15.map(x => x.filter(_._1 == x))\n        val\
    \ lst17 = lst16.map(x => x.filter(_._1 == x))\n        val lst18 = lst17.map(x\
    \ => x.filter(_._1 == x))\n        val lst19 = lst18.map(x => x.filter(_._1 ==\
    \ x))\n        val lst20 = lst19.map(x => x.filter(_._1 == x))\n        val lst21\
    \ = lst20.map(x => x.filter(_._1 == x))\n        val lst22 = lst21.map(x => x.filter(_._1\
    \ == x))\n        val lst23 = lst22.map(x => x.filter(_._1 == x))\n        val\
    \ lst24 = lst23.map(x => x.filter(_._1 == x))\n        val lst25 = lst24.map(x\
    \ => x.filter(_._1 == x))\n        val lst26 = lst25.map(x => x.filter(_._1 ==\
    \ x))\n        val lst27 = lst26.map(x => x.filter(_._1 == x))\n        val lst28\
    \ = lst27.map(x => x.filter(_._1 == x))\n        val lst29 = lst28.map(x => x.filter(_._1\
    \ == x))\n        val lst30 = lst29.map(x => x.filter(_._1 == x))\n        val\
    \ lst31 = lst30.map(x => x.filter(_._1 == x))\n        val lst32 = lst31.map(x\
    \ => x.filter(_._1 == x))\n        ", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = 0\n        val col = 0\n        while(row < rows\
    \ && col < cols) {\n            val rowValue = lst(row)(col)\n            val\
    \ colValue = lst(row).last\n            val tuple = Tuple2(rowValue, colValue)\n\
    \            if(rowValue == x) {\n                result.add(tuple)\n        \
    \    }\n            row += 1\n            col += 1\n        }\n        result.sortBy(_._1).reverse",
  "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        var row\
    \ = 0\n        var col = 0\n        while (row < rows && col < cols) {\n     \
    \       if (lst(row)(col) == x) {\n                result.append((row, col))\n\
    \            }\n            col += 1\n        }\n        result.sortBy(_._1).reverse",
  "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        var i =\
    \ 0\n        while (i < rows) {\n            val row = lst(i).zipWithIndex.sortBy(_._1).reverse\n\
    \            val colIndex = row.indexWhere(_._1 == x)\n            if (colIndex\
    \ == -1) {\n                result.add(Tuple2(0, 0))\n            } else {\n \
    \               val col = row.indexWhere(_._2 == colIndex)\n                result.add(Tuple2(row,\
    \ col))\n            }\n            i += 1\n        }\n        result.sortBy(_._1).reverse",
  "        val lst1 = lst.sortWith(_.compare(x, _) < 0)\n        val lst2 = lst1.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst3 = lst2.sortWith(_.compare(x, _) < 0)\n        val\
    \ lst4 = lst3.sortWith(_.compare(x, _) > 0)\n        val lst5 = lst4.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst6 = lst5.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst7 = lst6.sortWith(_.compare(x, _) < 0)\n        val lst8 = lst7.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst9 = lst8.sortWith(_.compare(x, _) < 0)\n        val\
    \ lst10 = lst9.sortWith(_.compare(x, _) > 0)\n        val lst11 = lst10.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst12 = lst11.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst13 = lst12.sortWith(_.compare(x, _) < 0)\n        val lst14 = lst13.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst15 = lst14.sortWith(_.compare(x, _) < 0)\n        val\
    \ lst16 = lst15.sortWith(_.compare(x, _) > 0)\n        val lst17 = lst16.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst18 = lst17.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst19 = lst18.sortWith(_.compare(x, _) < 0)\n        val lst20 = lst19.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst21 = lst20.sortWith(_.compare(x, _) < 0)\n        val\
    \ lst22 = lst21.sortWith(_.compare(x, _) > 0)\n        val lst23 = lst22.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst24 = lst23.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst25 = lst24.sortWith(_.compare(x, _) < 0)\n        val lst26 = lst25.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst27 = lst26.sortWith(_.compare(x, _) < 0)\n        val\
    \ lst28 = lst27.sortWith(_.compare(x, _) > 0)\n        val lst29 = lst28.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst30 = lst29.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst31 = lst30.sortWith(_.compare(x, _", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        var i = 0\n        while (i < rows) {\n            val row\
    \ = lst(i)\n            val row_x = row(x)\n            val row_y = row(i + 1)\n\
    \            val row_x_plus_1 = row(i + 2)\n            val row_y_plus_1 = row(i\
    \ + 3)\n            val row_x_plus_2 = row(i + 4)\n            val row_y_plus_2\
    \ = row(i + 5)\n            val row_x_plus_3 = row(i + 6)\n            val row_y_plus_3\
    \ = row(i + 7)\n            val row_x_plus_4 = row(i + 8)\n            val row_y_plus_4\
    \ = row(i + 9)\n            val row_x_plus_5 = row(i + 10)\n            val row_y_plus_5\
    \ = row(i + 11)\n            val row_x_plus_6 = row(i + 12)\n            val row_y_plus_6\
    \ = row(i + 13)\n            val row_x_plus_7 = row(i + 14)\n            val row_y_plus_7\
    \ = row(i + 15)\n            val row_x_plus_8 = row(i + 16)\n            val row_y_plus_8\
    \ = row(i + 17)\n            val row_x_plus_9 = row(i + 18)\n            val row_y_plus_9\
    \ = row(i + 19)\n            val row_x_plus_10 = row(i + 20)\n            val\
    \ row_y_plus_10 = row(i + 21)\n            val row_x_plus_11 = row(i + 22)\n \
    \           val row_y_plus_11 = row(i + 23)\n            val row_x_plus_12 = row(i\
    \ + 24)\n            val row_y_plus_12 = row(i + 25)\n            val row_x_plus_13\
    \ = row(i + 26)\n            val row_y_plus_13 = row(i + 27)\n            val\
    \ row_x_plus_14 = row(i + 28)\n            val row_y_plus_14 = row(i + 29)\n \
    \           val row_x_plus_15 = row(i + 30)\n            val row_y_plus_15 = row(i\
    \ + 31)\n            val row_x_plus_16 = row(i + 32)\n            val row_y_plus_16\
    \ = row(i + 33)\n            val row_x_plus_17 = row(i + 34)\n            val\
    \ row_y_plus_17 = row(i + 35)\n            val row_x_plus_18 = row(i + 36)\n \
    \           val row_y_plus_18 = row(i + 37)\n            val row_x_plus_19 = row(i\
    \ + 38)\n            val row_y_plus_19 = row(i + 39)\n            val row_x_plus_",
  "        val m = lst.size\n        val n = lst(0).size\n        val result = new\
    \ mutable.ListBuffer[Tuple2[Long, Long]]\n        val row = new mutable.ListBuffer[Long]\n\
    \        val col = new mutable.ListBuffer[Long]\n        for (i <- 0 until m)\
    \ {\n            row += lst(i)(0)\n            col += lst(i)(1)\n        }\n \
    \       val index = row.indexOf(x)\n        if (index >= 0) {\n            val\
    \ y = col(index)\n            result.add(Tuple2(x, y))\n        }\n        result.sortBy(_._1).reverse",
  "        val lst1 = lst.sortBy(x => x.indexOf(x)).sortBy(x => -x.indexOf(x))\n \
    \       val lst2 = lst1.sortBy(x => x.indexOf(x)).sortBy(x => -x.indexOf(x))\n\
    \        val lst3 = lst2.sortBy(x => x.indexOf(x)).sortBy(x => -x.indexOf(x))\n\
    \        val lst4 = lst3.sortBy(x => x.indexOf(x)).sortBy(x => -x.indexOf(x))\n\
    \        val lst5 = lst4.sortBy(x => x.indexOf(x)).sortBy(x => -x.indexOf(x))\n\
    \        val lst6 = lst5.sortBy(x => x.indexOf(x)).sortBy(x => -x.indexOf(x))\n\
    \        val lst7 = lst6.sortBy(x => x.indexOf(x)).sortBy(x => -x.indexOf(x))\n\
    \        val lst8 = lst7.sortBy(x => x.indexOf(x)).sortBy(x => -x.indexOf(x))\n\
    \        val lst9 = lst8.sortBy(x => x.indexOf(x)).sortBy(x => -x.indexOf(x))\n\
    \        val lst10 = lst9.sortBy(x => x.indexOf(x)).sortBy(x => -x.indexOf(x))\n\
    \        val lst11 = lst10.sortBy(x => x.indexOf(x)).sortBy(x => -x.indexOf(x))\n\
    \        val lst12 = lst11.sortBy(x => x.indexOf(x)).sortBy(x => -x.indexOf(x))\n\
    \        val lst13 = lst12.sortBy(x => x.indexOf(x)).sortBy(x => -x.indexOf(x))\n\
    \        val lst14 = lst13.sortBy(x => x.indexOf(x)).sortBy(x => -x.indexOf(x))\n\
    \        val lst15 = lst14.sortBy(x => x.indexOf(x)).sortBy(x => -x.indexOf(x))\n\
    \        val lst16 = lst15.sortBy(x => x.indexOf(x)).sortBy(x => -x.indexOf(x))\n\
    \        val lst17 = lst16.sortBy(x => x.indexOf(x)).sortBy(x => -x.indexOf(x))\n\
    \        val lst18 = lst17.sortBy(x => x.indexOf(x)).sortBy(x => -x.indexOf(x))\n\
    \        val lst19 = lst18.sortBy(x => x.indexOf(x)).sortBy(x => -x.indexOf(x))\n\
    \        val lst20 = lst19.sortBy(x => x.indexOf(x)).sortBy(x => -x.indexOf(x))\n\
    \        val lst21 = lst20.sortBy(x => x.indexOf(x)).sortBy(x => -x.indexOf(x))\n\
    \        val lst22 = lst21.sortBy(x => x.indexOf(x)).sortBy(x => -", "       \
    \ val rows = lst.map(_.length)\n        val cols = lst(0).length\n        val\
    \ result = new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        for (i <- 0\
    \ until rows) {\n            val row = lst(i)\n            val rowResult = row.zipWithIndex.filter(_._1\
    \ == x).map(_._2)\n            val rowResultSorted = rowResult.sortBy(-_._1)\n\
    \            val rowResultSortedByCol = rowResultSorted.sortBy(-_._2)\n      \
    \      val colResult = rowResultSortedByCol.map(_._1)\n            val colResultSorted\
    \ = colResult.sortBy(-_._1)\n            val colResultSortedByRow = colResultSorted.sortBy(-_._2)\n\
    \            for (j <- 0 until cols) {\n                val col = colResult(j)\n\
    \                val colSorted = colResultSorted(j)\n                val colSortedByRow\
    \ = colSortedByRow(j)\n                val tuple = new Tuple2[Long, Long](i, j)\n\
    \                result.add(tuple)\n            }\n        }\n        result.toList",
  "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        for (i\
    \ <- 0 until rows) {\n            val row = lst(i)\n            val rowTuple =\
    \ row.zipWithIndex.sortBy(_._1).reverse\n            val rowTuple2 = rowTuple.sortBy(_._2).reverse\n\
    \            for (j <- 0 until cols) {\n                val col = lst(0).apply(j)\n\
    \                val colTuple = rowTuple2.zipWithIndex.sortBy(_._1).reverse\n\
    \                val colTuple2 = colTuple.sortBy(_._2).reverse\n             \
    \   val tuple = if (colTuple2.contains(x)) (j, i) else (j, -1)\n             \
    \   result.add(tuple)\n            }\n        }\n        result.sortBy(_._1).reverse",
  "        val rowList = lst.map(row => row.map(x => Tuple2(x, x)))\n        val rowMap\
    \ = rowList.map(row => row.map(x => x._1 -> x._2)).toMap\n        val rowSorted\
    \ = rowList.sortBy(row => rowMap(row._1))\n        val rowSortedMap = rowSorted.map(row\
    \ => row.map(x => x._1 -> x._2)).toMap\n        val rowSortedMapReversed = rowSortedMap.map(x\
    \ => x._2 -> x._1)\n        val rowSortedMapReversedSorted = rowSortedMapReversed.sortBy(x\
    \ => x._1)\n        val rowSortedMapReversedSortedMap = rowSortedMapReversedSorted.map(x\
    \ => x._2 -> x._1)\n        val rowSortedMapReversedSortedMapSorted = rowSortedMapReversedSortedMap.sortBy(x\
    \ => x._1)\n        val rowSortedMapReversedSortedMapSortedMap = rowSortedMapReversedSortedMapSorted.map(x\
    \ => x._2 -> x._1)\n        val rowSortedMapReversedSortedMapSortedMapSorted =\
    \ rowSortedMapReversedSortedMapSortedMap.sortBy(x => x._1)\n        val rowSortedMapReversedSortedMapSortedMapSortedMap\
    \ = rowSortedMapReversedSortedMapSortedMapSorted.map(x => x._2 -> x._1)\n    \
    \    val rowSortedMapReversedSortedMapSortedMapSortedMapSorted = rowSortedMapReversedSortedMapSortedMapSortedMapSorted.sortBy(x\
    \ => x._1)\n        val rowSortedMapReversedSortedMapSortedMapSortedMapSortedMap\
    \ = rowSortedMapReversedSortedMapSortedMapSortedMapSorted.map(x => x._2 -> x._1)\n\
    \        val rowSortedMapReversedSortedMapSortedMapSortedMapSortedMapSorted =\
    \ rowSortedMapReversedSortedMapSortedMapSortedMapSortedMapSorted.sortBy(x => x._1)\n\
    \        val rowSortedMapReversedSortedMapSortedMapSortedMapSortedMapSortedMap\
    \ = rowSortedMapReversedSortedMapSortedMapSortedMapSortedMapSortedMapSorted.map(x\
    \ => x._2 -> x._1)\n        val rowSortedMapReversedSortedMapSortedMapSortedMapSortedMapSortedMapSorted\
    \ = rowSortedMapReversedSortedMapSortedMapSortedMapSortedMapSortedMapSortedMapSorted.sortBy(x\
    \ => x._1)\n        val rowSortedMapReversedSortedMapSortedMapSortedMapSortedMapSortedMapSortedMapSorted\
    \ = rowSortedMapReversedSortedMapSortedMap", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        var row = 0\n        var col = 0\n        while(row < rows\
    \ && col < cols) {\n            val value = lst(row)(col)\n            if(value\
    \ == x) {\n                result.add(Tuple2(row, col))\n            }\n     \
    \       col += 1\n        }\n        result.sortBy(_._1)\n        result.sortBy(_._2,\
    \ descending = true)\n        result.toList", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        for (i <- 0 until rows) {\n            for (j <- 0 until cols)\
    \ {\n                if (lst(i)(j) == x) {\n                    result.append((i,\
    \ j))\n                }\n            }\n        }\n        result.sortBy(_._1).reverse.sortBy(_._2).reverse",
  "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        val row\
    \ = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n",
  "        val m = lst.size\n        val n = lst(0).size\n        val result = new\
    \ mutable.ListBuffer[Tuple2[Long, Long]]\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        var i = 0\n       \
    \ while (i < m) {\n            val row = lst(i).zipWithIndex.sortBy(_._1).map(_._2)\n\
    \            val col = lst(i).zipWithIndex.sortBy(_._2).map(_._1)\n          \
    \  if (row(i) == x) {\n                result.append((row(i), col(i)))\n     \
    \       }\n            i += 1\n        }\n        result.sortBy(_._1).reverse",
  "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        var row\
    \ = 0\n        var col = 0\n        var rowMax = rows - 1\n        var colMax\
    \ = cols - 1\n        while (row < rowMax && col < colMax) {\n            if (lst(row)(col)\
    \ == x) {\n                result.append((row, col))\n                row += 1\n\
    \                col += 1\n            } else if (lst(row)(col) > x) {\n     \
    \           row += 1\n            } else {\n                col += 1\n       \
    \     }\n        }\n        result.sortBy(_._1).reverse", "        val rows =\
    \ lst.map(_.length)\n        val cols = lst(0).length\n        val result = new\
    \ mutable.ListBuffer[Tuple2[Long, Long]]()\n        var i = 0\n        while (i\
    \ < rows) {\n            val row = lst(i)\n            val rowLength = row.length\n\
    \            val rowIndex = i\n            val rowIndexInc = rowIndex + 1\n  \
    \          val rowIndexDec = rowIndex - 1\n            val col = 0\n         \
    \   while (col < cols) {\n                val cell = row(col)\n              \
    \  if (cell == x) {\n                    result.append((rowIndex, col))\n    \
    \            }\n                col += 1\n            }\n            i += 1\n\
    \        }\n        result.sortBy(_._1)\n        result.sortBy(_._2, descending\
    \ = true)\n        result.toList", "        val lst1 = lst.sortBy(_(0))\n    \
    \    val lst2 = lst1.sortBy(_(1)) //descending\n        val lst3 = lst2.filter(_(0)\
    \ != x)\n        val lst4 = lst3.sortBy(_(0))\n        val lst5 = lst4.sortBy(_(1))\
    \ //descending\n        lst5.map(x => (x._1, x._2))", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = new mutable.ArrayBuffer[Long]()\n        val col\
    \ = new mutable.ArrayBuffer[Long]()\n        var i = 0\n        while (i < rows.length)\
    \ {\n            val row = lst(i).zipWithIndex.sortBy(_._1).map(_._2)\n      \
    \      val col = lst(i).zipWithIndex.sortBy(_._2).map(_._1)\n            if (row(i)\
    \ == x) {\n                result.append((row(i), col(i)))\n            }\n  \
    \          i += 1\n        }\n        result.toList", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        var row = 0\n        var col = 0\n        while(row < rows\
    \ && col < cols) {\n            val rowValue = lst(row)(col)\n            val\
    \ colValue = lst(row).last\n            val rowIndex = row + 1\n            val\
    \ colIndex = col + 1\n            if(rowValue == x) {\n                result.append((rowIndex,\
    \ colIndex))\n                row += 1\n                col = 0\n            }\
    \ else if(colValue == x) {\n                result.append((rowIndex, colIndex))\n\
    \                col += 1\n            } else {\n                row += 1\n  \
    \          }\n        }\n        result.sortBy(_._1)\n        result.sortBy(_._2,\
    \ descending = true)\n        result.toList", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = new mutable.ArrayBuffer[Long]()\n        val col\
    \ = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n", "        val lst1 = lst.sortBy(x\
    \ => x.toLong)\n        val lst2 = lst1.sortBy(x => x.toLong.reverse)\n      \
    \  val lst3 = lst2.map(x => (x.toLong, x.toLong.reverse))\n        val lst4 =\
    \ lst3.sortBy(x => x._1)\n        val lst5 = lst4.sortBy(x => x._2)\n        lst5.map(x\
    \ => (x._1, x._2))", "        val rowMap = new mutable.HashMap[Long, List[Long]]()\n\
    \        val rowList = new mutable.ArrayList[Tuple2[Long, Long]]()\n        val\
    \ columnMap = new mutable.HashMap[Long, List[Long]]()\n        val columnList\
    \ = new mutable.ArrayList[Tuple2[Long, Long]]()\n        val rowIndex = 0\n  \
    \      val columnIndex = 0\n        for (row <- lst) {\n            val rowLength\
    \ = row.length\n            if (rowMap.contains(rowIndex)) {\n               \
    \ rowMap(rowIndex) = rowMap(rowIndex) + row\n            } else {\n          \
    \      rowMap(rowIndex) = row\n                rowList.add(Tuple2(rowIndex, row))\n\
    \            }\n            rowIndex += 1\n        }\n        for (row <- rowMap.values)\
    \ {\n            val columnLength = row.length\n            if (columnMap.contains(columnIndex))\
    \ {\n                columnMap(columnIndex) = columnMap(columnIndex) + row\n \
    \           } else {\n                columnMap(columnIndex) = row\n         \
    \       columnList.add(Tuple2(columnIndex, row))\n            }\n            columnIndex\
    \ += 1\n        }\n        val sortedRowList = rowList.sortBy(_._1).reverse\n\
    \        val sortedColumnList = columnList.sortBy(_._2).reverse\n        val sortedRowMap\
    \ = new mutable.HashMap[Long, List[Long]]()\n        val sortedColumnMap = new\
    \ mutable.HashMap[Long, List[Long]]()\n        for (row <- sortedRowList) {\n\
    \            val rowLength = row._2.length\n            if (sortedRowMap.contains(row._1))\
    \ {\n                sortedRowMap(row._1) = sortedRowMap(row._1) + row._2\n  \
    \          } else {\n                sortedRowMap(row._1) = row._2\n         \
    \       sortedRowList.add(Tuple2(row._1, row._2))\n            }\n        }\n\
    \        for (column <- sortedColumnList) {\n            val columnLength = column._2.length\n\
    \            if (sortedColumnMap.contains(column._1)) {\n                sortedColumnMap(column._1)\
    \ = sortedColumnMap(column._1) + column._2\n            } else {\n           \
    \     sortedColumnMap(column._1) = column._2\n                sortedColumnList.add(Tuple2(column._1,\
    \ column._2))\n            }\n        }\n        val sortedRowList2 = sortedRowList.sortBy(_._1).reverse\n\
    \        val sortedColumnList2 = sortedColumnList.sortBy(_._2).reverse\n     \
    \   val sortedRowMap2 = new mutable.HashMap[Long, List[Long]]()\n        val sortedColumnMap2\
    \ = new mutable.HashMap[Long, List[Long]]()\n        for (row <- sortedRowList2)\
    \ {\n            val rowLength = row._2.length\n            if (sortedRowMap2.contains(row._",
  "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = lst.map(row => row.zipWithIndex.filter(x => x == x).map(x => (x._2,\
    \ x._1)).toList)\n        val sorted = result.sortWith((x, y) => x._1 < y._1)\n\
    \        val sortedRows = sorted.map(row => row.map(x => x._2))\n        val sortedCols\
    \ = sorted.map(row => row.map(x => x._1))\n        val sortedRowsCols = sortedRows.zip(sortedCols)\n\
    \        val sortedRowsColsSorted = sortedRowsCols.sortWith((x, y) => x._1 < y._1)\n\
    \        val sortedRowsColsSortedWithIndex = sortedRowsColsSorted.map(x => (x._2,\
    \ x._1))\n        val sortedRowsColsSortedWithIndexSorted = sortedRowsColsSortedWithIndex.sortWith((x,\
    \ y) => x._1 < y._1)\n        val sortedRowsColsSortedWithIndexSortedWithIndex\
    \ = sortedRowsColsSortedWithIndexSorted.map(x => (x._2, x._1))\n        val sortedRowsColsSortedWithIndexSortedWithIndexSorted\
    \ = sortedRowsColsSortedWithIndexSortedWithIndex.sortWith((x, y) => x._1 < y._1)\n\
    \        val sortedRowsColsSortedWithIndexSortedWithIndexSortedWithIndex = sortedRowsColsSortedWithIndexSortedWithIndexSortedWithIndex.map(x\
    \ => (x._2, x._1))\n        val sortedRowsColsSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = sortedRowsColsSortedWithIndexSortedWithIndexSortedWithIndexSorted.sortWith((x,\
    \ y) => x._1 < y._1)\n        val sortedRowsColsSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = sortedRowsColsSortedWithIndexSortedWithIndexSortedWithIndexSorted.map(x =>\
    \ (x._2, x._1))\n        val sortedRowsColsSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = sortedRowsColsSortedWithIndexSortedWithIndexSortedWithIndexSorted.sortWith((x,\
    \ y) => x._1 < y._1)\n        val sortedRowsColsSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = sortedRowsColsSortedWithIndexSortedWithIndexSortedWithIndexSorted.map(x =>\
    \ (x._2, x._1))\n        val sortedRowsColsSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = sorted", "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n\
    \        val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        for\
    \ (i <- 0 until rows) {\n            val row = lst(i)\n            val rowResult\
    \ = new mutable.ListBuffer[Tuple2[Long, Long]]()\n            for (j <- 0 until\
    \ cols) {\n                val col = lst(0).apply(j)\n                val rowValue\
    \ = if (row == null || col == null) 0 else row.apply(j) + col.apply(i)\n     \
    \           rowResult += Tuple2(rowValue, j)\n            }\n            result\
    \ += rowResult.sortBy(_._1).reverse\n        }\n        result.sortBy(_._1).reverse",
  "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        val row\
    \ = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n",
  "        val lst1 = lst.sortWith(_._1 < _._1)\n        val lst2 = lst1.sortWith(_._2\
    \ < _._2)\n        val lst3 = lst2.sortWith(_._1 < _._1)\n        val lst4 = lst3.sortWith(_._2\
    \ < _._2)\n        val lst5 = lst4.sortWith(_._1 < _._1)\n        val lst6 = lst5.sortWith(_._2\
    \ < _._2)\n        val lst7 = lst6.sortWith(_._1 < _._1)\n        val lst8 = lst7.sortWith(_._2\
    \ < _._2)\n        val lst9 = lst8.sortWith(_._1 < _._1)\n        val lst10 =\
    \ lst9.sortWith(_._2 < _._2)\n        val lst11 = lst10.sortWith(_._1 < _._1)\n\
    \        val lst12 = lst11.sortWith(_._2 < _._2)\n        val lst13 = lst12.sortWith(_._1\
    \ < _._1)\n        val lst14 = lst13.sortWith(_._2 < _._2)\n        val lst15\
    \ = lst14.sortWith(_._1 < _._1)\n        val lst16 = lst15.sortWith(_._2 < _._2)\n\
    \        val lst17 = lst16.sortWith(_._1 < _._1)\n        val lst18 = lst17.sortWith(_._2\
    \ < _._2)\n        val lst19 = lst18.sortWith(_._1 < _._1)\n        val lst20\
    \ = lst19.sortWith(_._2 < _._2)\n        val lst21 = lst20.sortWith(_._1 < _._1)\n\
    \        val lst22 = lst21.sortWith(_._2 < _._2)\n        val lst23 = lst22.sortWith(_._1\
    \ < _._1)\n        val lst24 = lst23.sortWith(_._2 < _._2)\n        val lst25\
    \ = lst24.sortWith(_._1 < _._1)\n        val lst26 = lst25.sortWith(_._2 < _._2)\n\
    \        val lst27 = lst26.sortWith(_._1 < _._1)\n        val lst28 = lst27.sortWith(_._2\
    \ < _._2)\n        val lst29 = lst28.sortWith(_._1 < _._1)\n        val lst30\
    \ = lst29.sortWith(_._2 < _._2)\n        val lst31 = lst30.sortWith(_._1 < _._1)\n\
    \        val lst32 = lst31.sortWith(_._2 < _._2)\n        val lst33 = lst32.sortWith(_._1\
    \ < ", "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n\
    \        val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        val\
    \ rowMap = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n        val\
    \ colMap = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n        for\
    \ (i <- 0 until rows) {\n            val row = new mutable.ListBuffer[Long]()\n\
    \            rowMap += i -> row\n        }\n        for (j <- 0 until cols) {\n\
    \            val col = new mutable.ListBuffer[Long]()\n            colMap += j\
    \ -> col\n        }\n        for (i <- 0 until rows) {\n            for (j <-\
    \ 0 until cols) {\n                val value = lst(i)(j)\n                val\
    \ rowIndex = i\n                val colIndex = j\n                val rowValue\
    \ = rowMap(rowIndex)\n                val colValue = colMap(colIndex)\n      \
    \          val tuple = if (value == x) Tuple2(rowValue, colValue) else Tuple2(rowValue,\
    \ colValue)\n                result += tuple\n            }\n        }\n     \
    \   result.sortBy(_._1).reverse", "        val rows = lst.map(_.length)\n    \
    \    val cols = lst(0).length\n        val rows = lst.map(_.length)\n        val\
    \ cols = lst(0).length\n        val rows = lst.map(_.length)\n        val cols\
    \ = lst(0).length\n        val rows = lst.map(_.length)\n        val cols = lst(0).length\n\
    \        val rows = lst.map(_.length)\n        val cols = lst(0).length\n    \
    \    val rows = lst.map(_.length)\n        val cols = lst(0).length\n        val\
    \ rows = lst.map(_.length)\n        val cols = lst(0).length\n        val rows\
    \ = lst.map(_.length)\n        val cols = lst(0).length\n        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val rows = lst.map(_.length)\n    \
    \    val cols = lst(0).length\n        val rows = lst.map(_.length)\n        val\
    \ cols = lst(0).length\n        val rows = lst.map(_.length)\n        val cols\
    \ = lst(0).length\n        val rows = lst.map(_.length)\n        val cols = lst(0).length\n\
    \        val rows = lst.map(_.length)\n        val cols = lst(0).length\n    \
    \    val rows = lst.map(_.length)\n        val cols = lst(0).length\n        val\
    \ rows = lst.map(_.length)\n        val cols = lst(0).length\n        val rows\
    \ = lst.map(_.length)\n        val cols = lst(0).length\n        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val rows = lst.map(_.length)\n    \
    \    val cols = lst(0).length\n        val rows = lst.map(_.length)\n        val\
    \ cols = lst(0).length\n        val rows = lst.map(_.length)\n        val cols\
    \ = lst(0).length\n        val rows = lst.map(_.length)\n        val cols = lst(0).length\n\
    \        val rows = lst.map(_.length)\n        val cols = lst(0).length\n    \
    \    val rows = lst.map(_.length)\n        val cols = lst(0).length\n        val\
    \ rows = lst.map(_.length)\n        val cols = lst(0).length\n        val rows\
    \ = lst.map(_.length)\n        val cols = lst(0).length\n        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val rows = lst.map(_.length)\n    \
    \    val cols = lst(0).length\n        val rows = lst.map(_.length)\n        val\
    \ cols = lst(0).length\n        val rows = lst.map(_.length)\n        val cols\
    \ = lst(0).length\n        val rows = lst.map(_.length)\n        val cols = lst(0).length\n\
    \        val rows = lst.map(_.length)\n        val cols = lst(0).length\n", " \
    \       val rows = lst.map(_.length)\n        val cols = lst(0).length\n     \
    \   val result = new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        var row\
    \ = 0\n        var col = 0\n        while(row < rows && col < cols) {\n      \
    \      val value = lst(row)(col)\n            if(value == x) {\n             \
    \   result.add(Tuple2(row, col))\n                row += 1\n                col\
    \ += 1\n            } else if(value < x) {\n                row += 1\n       \
    \     } else {\n                col += 1\n            }\n        }\n        result.sortBy(_._1).reverse.sortBy(_._2).reverse",
  "        val rowList = lst.map(row => row.zipWithIndex.filter(_._1 == x).map(_._2)).toList\n\
    \        val rowListSorted = rowList.sortWith((x, y) => x._1 < y._1)\n       \
    \ val rowListSortedReversed = rowListSorted.reverse\n        val rowListSortedReversedSorted\
    \ = rowListSortedReversed.sortWith((x, y) => x._2 < y._2)\n        rowListSortedReversedSorted.map(row\
    \ => (row._2, row._1))", "        val lst1 = lst.sortWith((x, y) => x.compareTo(y))\n\
    \        val lst2 = lst1.sortWith((x, y) => y.compareTo(x))\n        val lst3\
    \ = lst2.sortWith((x, y) => x.compareTo(y))\n        val lst4 = lst3.sortWith((x,\
    \ y) => y.compareTo(x))\n        val lst5 = lst4.sortWith((x, y) => x.compareTo(y))\n\
    \        val lst6 = lst5.sortWith((x, y) => y.compareTo(x))\n        val lst7\
    \ = lst6.sortWith((x, y) => x.compareTo(y))\n        val lst8 = lst7.sortWith((x,\
    \ y) => y.compareTo(x))\n        val lst9 = lst8.sortWith((x, y) => x.compareTo(y))\n\
    \        val lst10 = lst9.sortWith((x, y) => y.compareTo(x))\n        val lst11\
    \ = lst10.sortWith((x, y) => x.compareTo(y))\n        val lst12 = lst11.sortWith((x,\
    \ y) => y.compareTo(x))\n        val lst13 = lst12.sortWith((x, y) => x.compareTo(y))\n\
    \        val lst14 = lst13.sortWith((x, y) => y.compareTo(x))\n        val lst15\
    \ = lst14.sortWith((x, y) => x.compareTo(y))\n        val lst16 = lst15.sortWith((x,\
    \ y) => y.compareTo(x))\n        val lst17 = lst16.sortWith((x, y) => x.compareTo(y))\n\
    \        val lst18 = lst17.sortWith((x, y) => y.compareTo(x))\n        val lst19\
    \ = lst18.sortWith((x, y) => x.compareTo(y))\n        val lst20 = lst19.sortWith((x,\
    \ y) => y.compareTo(x))\n        val lst21 = lst20.sortWith((x, y) => x.compareTo(y))\n\
    \        val lst22 = lst21.sortWith((x, y) => y.compareTo(x))\n        val lst23\
    \ = lst22.sortWith((x, y) => x.compareTo(y))\n        val lst24 = lst23.sortWith((x,\
    \ y) => y.compareTo(x))\n        val lst25 = lst24.sortWith((x, y) => x.compareTo(y))\n\
    \        val lst26 = lst25.sortWith((x, y) => y.compareTo(x))\n        val lst27\
    \ = lst26.sortWith((x, y) => x.compareTo(y))\n        val lst28 = lst27.sortWith((x,\
    \ y) => y.compareTo(x))\n        val lst29 = lst28.sortWith((x, y) => x.compareTo(y))\n\
    \        val lst30 = lst29.sortWith((x, y) => y.compareTo(x))", "        val rows\
    \ = lst.map(_.length)\n        val cols = lst(0).length\n        val result =\
    \ new mutable.ListBuffer[Tuple2[Long, Long]]()\n        var i = 0\n        while\
    \ (i < rows) {\n            val row = lst(i).zipWithIndex.sortBy(_._1).reverse\n\
    \            val col = lst(i).zipWithIndex.sortBy(_._2).reverse\n            val\
    \ rowIndex = row.indexWhere(_._1 == x)\n            val colIndex = col.indexWhere(_._2\
    \ == rowIndex)\n            val tuple = row.take(rowIndex).map(_._2) -> (col.take(colIndex).map(_._2))\n\
    \            result.add(tuple)\n            i += 1\n        }\n        result.sortBy(_._1).reverse",
  "        val lst2 = lst.map(x => x.map(_ + x))\n        val lst3 = lst2.map(x =>\
    \ x.sortWith(_ < _))\n        val lst4 = lst3.map(x => x.sortWith(_ > _))\n  \
    \      val lst5 = lst4.map(x => x.sortWith(_ < _))\n        val lst6 = lst5.map(x\
    \ => x.sortWith(_ > _))\n        val lst7 = lst6.map(x => x.sortWith(_ < _))\n\
    \        val lst8 = lst7.map(x => x.sortWith(_ > _))\n        val lst9 = lst8.map(x\
    \ => x.sortWith(_ < _))\n        val lst10 = lst9.map(x => x.sortWith(_ > _))\n\
    \        val lst11 = lst10.map(x => x.sortWith(_ < _))\n        val lst12 = lst11.map(x\
    \ => x.sortWith(_ > _))\n        val lst13 = lst12.map(x => x.sortWith(_ < _))\n\
    \        val lst14 = lst13.map(x => x.sortWith(_ > _))\n        val lst15 = lst14.map(x\
    \ => x.sortWith(_ < _))\n        val lst16 = lst15.map(x => x.sortWith(_ > _))\n\
    \        val lst17 = lst16.map(x => x.sortWith(_ < _))\n        val lst18 = lst17.map(x\
    \ => x.sortWith(_ > _))\n        val lst19 = lst18.map(x => x.sortWith(_ < _))\n\
    \        val lst20 = lst19.map(x => x.sortWith(_ > _))\n        val lst21 = lst20.map(x\
    \ => x.sortWith(_ < _))\n        val lst22 = lst21.map(x => x.sortWith(_ > _))\n\
    \        val lst23 = lst22.map(x => x.sortWith(_ < _))\n        val lst24 = lst23.map(x\
    \ => x.sortWith(_ > _))\n        val lst25 = lst24.map(x => x.sortWith(_ < _))\n\
    \        val lst26 = lst25.map(x => x.sortWith(_ > _))\n        val lst27 = lst26.map(x\
    \ => x.sortWith(_ < _))\n        val lst28 = lst27.map(x => x.sortWith(_ > _))\n\
    \        val lst29 = lst28.map(x => x.sortWith(_ < _))\n        val lst30 = lst29.map(x\
    \ => x.sortWith(_ > _))\n        val lst", "        val lst1 = lst.sortBy(_.toInt)\n\
    \        val lst2 = lst1.sortBy(-_.toInt)\n        val lst3 = lst2.sortBy(-_.toInt)\n\
    \        val lst4 = lst3.sortBy(-_.toInt)\n        val lst5 = lst4.sortBy(-_.toInt)\n\
    \        val lst6 = lst5.sortBy(-_.toInt)\n        val lst7 = lst6.sortBy(-_.toInt)\n\
    \        val lst8 = lst7.sortBy(-_.toInt)\n        val lst9 = lst8.sortBy(-_.toInt)\n\
    \        val lst10 = lst9.sortBy(-_.toInt)\n        val lst11 = lst10.sortBy(-_.toInt)\n\
    \        val lst12 = lst11.sortBy(-_.toInt)\n        val lst13 = lst12.sortBy(-_.toInt)\n\
    \        val lst14 = lst13.sortBy(-_.toInt)\n        val lst15 = lst14.sortBy(-_.toInt)\n\
    \        val lst16 = lst15.sortBy(-_.toInt)\n        val lst17 = lst16.sortBy(-_.toInt)\n\
    \        val lst18 = lst17.sortBy(-_.toInt)\n        val lst19 = lst18.sortBy(-_.toInt)\n\
    \        val lst20 = lst19.sortBy(-_.toInt)\n        val lst21 = lst20.sortBy(-_.toInt)\n\
    \        val lst22 = lst21.sortBy(-_.toInt)\n        val lst23 = lst22.sortBy(-_.toInt)\n\
    \        val lst24 = lst23.sortBy(-_.toInt)\n        val lst25 = lst24.sortBy(-_.toInt)\n\
    \        val lst26 = lst25.sortBy(-_.toInt)\n        val lst27 = lst26.sortBy(-_.toInt)\n\
    \        val lst28 = lst27.sortBy(-_.toInt)\n        val lst29 = lst28.sortBy(-_.toInt)\n\
    \        val lst30 = lst29.sortBy(-_.toInt)\n        val lst31 = lst30.sortBy(-_.toInt)\n\
    \        val lst32 = lst31.sortBy(-_.toInt)\n        val lst33 = lst32.sortBy(-_.toInt)\n\
    \        val lst34 = lst33.sortBy(-_.toInt)\n        val lst35 = lst34.sortBy(-_.toInt)\n",
  "        val lst1 = lst.sortBy(x => x._1)\n        val lst2 = lst1.sortBy(x => x._2)\n\
    \        val lst3 = lst2.sortBy(x => -x._2)\n        val lst4 = lst3.filter(_._1\
    \ == x)\n        lst4.map(x => (x._1, x._2))", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = new mutable.ArrayBuffer[Long]()\n        val col\
    \ = new mutable.ArrayBuffer[Long]()\n        var i = 0\n        while (i < rows.length)\
    \ {\n            val row = lst(i).map(x => x + i)\n            val col = lst(0).map(x\
    \ => x + i)\n            val row1 = row.sortWith(_ < _)\n            val col1\
    \ = col.sortWith(_ < _)\n            val row2 = row1.sortWith(_ > _)\n       \
    \     val col2 = col1.sortWith(_ > _)\n            val row3 = row2.sortWith(_\
    \ < _)\n            val col3 = col2.sortWith(_ < _)\n            val row4 = row3.sortWith(_\
    \ > _)\n            val col4 = col3.sortWith(_ > _)\n            val row5 = row4.sortWith(_\
    \ < _)\n            val col5 = col4.sortWith(_ < _)\n            val row6 = row5.sortWith(_\
    \ > _)\n            val col6 = col5.sortWith(_ > _)\n            val row7 = row6.sortWith(_\
    \ < _)\n            val col7 = col6.sortWith(_ < _)\n            val row8 = row7.sortWith(_\
    \ > _)\n            val col8 = col7.sortWith(_ > _)\n            val row9 = row8.sortWith(_\
    \ < _)\n            val col9 = col8.sortWith(_ < _)\n            val row10 = row9.sortWith(_\
    \ > _)\n            val col10 = col9.sortWith(_ > _)\n            val row11 =\
    \ row10.sortWith(_ < _)\n            val col11 = col10.sortWith(_ < _)\n     \
    \       val row12 = row11.sortWith(_ > _)\n            val col12 = col11.sortWith(_\
    \ > _)\n            val row13 = row12.sortWith(_ < _)\n            val col13 =\
    \ col12.sortWith(_ < _)\n            val row14 = row13.sortWith(_ > _)\n     \
    \       val col14 = col13.sortWith(_ > _)\n            val row15 = row14.sortWith(_\
    \ < _)\n            val col15 = col14.sortWith(_ < _)\n            val row16 =\
    \ row15.sortWith(_ > _)\n            val col16 = col15.sortWith(_ > _)\n     \
    \       val row", "        val lst1 = lst.sortWith(_(_) > _(_))\n        val lst2\
    \ = lst1.sortWith(_(_) > _(_))\n        val lst3 = lst2.sortWith(_(_) > _(_))\n\
    \        val lst4 = lst3.sortWith(_(_) > _(_))\n        val lst5 = lst4.sortWith(_(_)\
    \ > _(_))\n        val lst6 = lst5.sortWith(_(_) > _(_))\n        val lst7 = lst6.sortWith(_(_)\
    \ > _(_))\n        val lst8 = lst7.sortWith(_(_) > _(_))\n        val lst9 = lst8.sortWith(_(_)\
    \ > _(_))\n        val lst10 = lst9.sortWith(_(_) > _(_))\n        val lst11 =\
    \ lst10.sortWith(_(_) > _(_))\n        val lst12 = lst11.sortWith(_(_) > _(_))\n\
    \        val lst13 = lst12.sortWith(_(_) > _(_))\n        val lst14 = lst13.sortWith(_(_)\
    \ > _(_))\n        val lst15 = lst14.sortWith(_(_) > _(_))\n        val lst16\
    \ = lst15.sortWith(_(_) > _(_))\n        val lst17 = lst16.sortWith(_(_) > _(_))\n\
    \        val lst18 = lst17.sortWith(_(_) > _(_))\n        val lst19 = lst18.sortWith(_(_)\
    \ > _(_))\n        val lst20 = lst19.sortWith(_(_) > _(_))\n        val lst21\
    \ = lst20.sortWith(_(_) > _(_))\n        val lst22 = lst21.sortWith(_(_) > _(_))\n\
    \        val lst23 = lst22.sortWith(_(_) > _(_))\n        val lst24 = lst23.sortWith(_(_)\
    \ > _(_))\n        val lst25 = lst24.sortWith(_(_) > _(_))\n        val lst26\
    \ = lst25.sortWith(_(_) > _(_))\n        val lst27 = lst26.sortWith(_(_) > _(_))\n\
    \        val lst28 = lst27.sortWith(_(_) > _(_))\n        val lst29 = lst28.sortWith(_(_)\
    \ > _(_))\n        val lst30 = lst29.sortWith(_(_) > _(_))\n        val lst31\
    \ = lst30.sortWith(_(_) > _(_))\n        val lst32 = lst31.sortWith(_(_) > _(_))\n\
    \        val lst33 = lst32.sortWith(_(_) > ", "        val lst2 = lst.map(x =>\
    \ x.filter(_ != x)).sortWith((x, y) => x.compare(y))\n        val lst3 = lst2.map(x\
    \ => x.filter(_ != x)).sortWith((x, y) => y.compare(x))\n        val lst4 = lst3.map(x\
    \ => x.filter(_ != x)).sortWith((x, y) => x.compare(y))\n        val lst5 = lst4.map(x\
    \ => x.filter(_ != x)).sortWith((x, y) => y.compare(x))\n        val lst6 = lst5.map(x\
    \ => x.filter(_ != x)).sortWith((x, y) => x.compare(y))\n        val lst7 = lst6.map(x\
    \ => x.filter(_ != x)).sortWith((x, y) => y.compare(x))\n        val lst8 = lst7.map(x\
    \ => x.filter(_ != x)).sortWith((x, y) => x.compare(y))\n        val lst9 = lst8.map(x\
    \ => x.filter(_ != x)).sortWith((x, y) => y.compare(x))\n        val lst10 = lst9.map(x\
    \ => x.filter(_ != x)).sortWith((x, y) => x.compare(y))\n        val lst11 = lst10.map(x\
    \ => x.filter(_ != x)).sortWith((x, y) => y.compare(x))\n        val lst12 = lst11.map(x\
    \ => x.filter(_ != x)).sortWith((x, y) => x.compare(y))\n        val lst13 = lst12.map(x\
    \ => x.filter(_ != x)).sortWith((x, y) => y.compare(x))\n        val lst14 = lst13.map(x\
    \ => x.filter(_ != x)).sortWith((x, y) => x.compare(y))\n        val lst15 = lst14.map(x\
    \ => x.filter(_ != x)).sortWith((x, y) => y.compare(x))\n        val lst16 = lst15.map(x\
    \ => x.filter(_ != x)).sortWith((x, y) => x.compare(y))\n        val lst17 = lst16.map(x\
    \ => x.filter(_ != x)).sortWith((x, y) => y.compare(x))\n        val lst18 = lst17.map(x\
    \ => x.filter(_ != x)).sortWith((x, y) => x.compare(y))\n        val lst19 = lst18.map(x\
    \ => x.filter(_ != x)).sortWith((x, y) => y.compare(x))\n        val lst20 = lst19.map(x\
    \ => x.filter(_ != x)).sortWith((x, y) => x.compare(y))\n        val lst21 = lst20.map(x\
    \ => x.filter(_ != x)).sortWith((x, y) => y.compare(x))\n        val lst22 = lst21.map(x\
    \ => x.filter(_", "        val lst1 = lst.sortBy(_.toInt)\n        val lst2 =\
    \ lst1.sortBy(-_.toInt)\n        val lst3 = lst2.sortBy(-_.toInt)\n        val\
    \ lst4 = lst3.sortBy(-_.toInt)\n        val lst5 = lst4.sortBy(-_.toInt)\n   \
    \     val lst6 = lst5.sortBy(-_.toInt)\n        val lst7 = lst6.sortBy(-_.toInt)\n\
    \        val lst8 = lst7.sortBy(-_.toInt)\n        val lst9 = lst8.sortBy(-_.toInt)\n\
    \        val lst10 = lst9.sortBy(-_.toInt)\n        val lst11 = lst10.sortBy(-_.toInt)\n\
    \        val lst12 = lst11.sortBy(-_.toInt)\n        val lst13 = lst12.sortBy(-_.toInt)\n\
    \        val lst14 = lst13.sortBy(-_.toInt)\n        val lst15 = lst14.sortBy(-_.toInt)\n\
    \        val lst16 = lst15.sortBy(-_.toInt)\n        val lst17 = lst16.sortBy(-_.toInt)\n\
    \        val lst18 = lst17.sortBy(-_.toInt)\n        val lst19 = lst18.sortBy(-_.toInt)\n\
    \        val lst20 = lst19.sortBy(-_.toInt)\n        val lst21 = lst20.sortBy(-_.toInt)\n\
    \        val lst22 = lst21.sortBy(-_.toInt)\n        val lst23 = lst22.sortBy(-_.toInt)\n\
    \        val lst24 = lst23.sortBy(-_.toInt)\n        val lst25 = lst24.sortBy(-_.toInt)\n\
    \        val lst26 = lst25.sortBy(-_.toInt)\n        val lst27 = lst26.sortBy(-_.toInt)\n\
    \        val lst28 = lst27.sortBy(-_.toInt)\n        val lst29 = lst28.sortBy(-_.toInt)\n\
    \        val lst30 = lst29.sortBy(-_.toInt)\n        val lst31 = lst30.sortBy(-_.toInt)\n\
    \        val lst32 = lst31.sortBy(-_.toInt)\n        val lst33 = lst32.sortBy(-_.toInt)\n\
    \        val lst34 = lst33.sortBy(-_.toInt)\n        val lst35 = lst34.sortBy(-_.toInt)\n",
  "        val lst1 = lst.sortWith(_.compareTo(x) < 0)\n        val lst2 = lst1.sortWith(_.compareTo(_)\
    \ < 0)\n        val lst3 = lst2.sortWith(_.compareTo(_) < 0)\n        val lst4\
    \ = lst3.sortWith(_.compareTo(_) < 0)\n        val lst5 = lst4.sortWith(_.compareTo(_)\
    \ < 0)\n        val lst6 = lst5.sortWith(_.compareTo(_) < 0)\n        val lst7\
    \ = lst6.sortWith(_.compareTo(_) < 0)\n        val lst8 = lst7.sortWith(_.compareTo(_)\
    \ < 0)\n        val lst9 = lst8.sortWith(_.compareTo(_) < 0)\n        val lst10\
    \ = lst9.sortWith(_.compareTo(_) < 0)\n        val lst11 = lst10.sortWith(_.compareTo(_)\
    \ < 0)\n        val lst12 = lst11.sortWith(_.compareTo(_) < 0)\n        val lst13\
    \ = lst12.sortWith(_.compareTo(_) < 0)\n        val lst14 = lst13.sortWith(_.compareTo(_)\
    \ < 0)\n        val lst15 = lst14.sortWith(_.compareTo(_) < 0)\n        val lst16\
    \ = lst15.sortWith(_.compareTo(_) < 0)\n        val lst17 = lst16.sortWith(_.compareTo(_)\
    \ < 0)\n        val lst18 = lst17.sortWith(_.compareTo(_) < 0)\n        val lst19\
    \ = lst18.sortWith(_.compareTo(_) < 0)\n        val lst20 = lst19.sortWith(_.compareTo(_)\
    \ < 0)\n        val lst21 = lst20.sortWith(_.compareTo(_) < 0)\n        val lst22\
    \ = lst21.sortWith(_.compareTo(_) < 0)\n        val lst23 = lst22.sortWith(_.compareTo(_)\
    \ < 0)\n        val lst24 = lst23.sortWith(_.compareTo(_) < 0)\n        val lst25\
    \ = lst24.sortWith(_.compareTo(_) < 0)\n        val lst26 = lst25.sortWith(_.compareTo(_)\
    \ < 0)\n        val lst27 = lst26.sortWith(_.compareTo(_) < 0)\n        val lst28\
    \ = lst27.sortWith(_.compareTo(_) < 0)\n        val lst29 = lst28.sortWith(_.compareTo(_)\
    \ < 0)\n        val lst30 = lst29.sortWith(_.compareTo(_) < 0)\n        val lst31\
    \ = lst30.sortWith(_.compareTo(_", "        val rows = lst.map(_.length)\n   \
    \     val cols = lst(0).length\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = new mutable.ListBuffer[Long]()\n        val col\
    \ = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        var i = 0\n      \
    \  while (i < rows) {\n            val row1 = lst(i).take(x)\n            val\
    \ row2 = lst(i).drop(x)\n            val row3 = lst(i).take(x)\n            val\
    \ row4 = lst(i).drop(x)\n            val row5 = lst(i).take(x)\n            val\
    \ row6 = lst(i).drop(x)\n            val row7 = lst(i).take(x)\n            val\
    \ row8 = lst(i).drop(x)\n            val row9 = lst(i).take(x)\n            val\
    \ row10 = lst(i).drop(x)\n            val row11 = lst(i).take(x)\n           \
    \ val row12 = lst(i).drop(x)\n            val row13 = lst(i).take(x)\n       \
    \     val row14 = lst(i).drop(x)\n            val row15 = lst(i).take(x)\n   \
    \         val row16 = lst(i).drop(x)\n            val row17 = lst(i).take(x)\n\
    \            val row18 = lst(i).drop(x)\n            val row19 = lst(i).take(x)\n\
    \            val row20 = lst(i).drop(x)\n            val row21 = lst(i).take(x)\n\
    \            val row22 = lst(i).drop(x)\n            val row23 = lst(i).take(x)\n\
    \            val row24 = lst(i).drop(x)\n            val row25 = lst(i).take(x)\n\
    \            val row26 = lst(i).drop(x)\n            val row27 = lst(i).take(x)\n\
    \            val row28 = lst(i).drop(x)\n            val row29 = lst(i).take(x)\n\
    \            val row30 = lst(i).drop(x)\n            val row31 = lst(i).take(x)\n\
    \            val row32 = lst(i).drop(x)\n            val row33 = lst(i).take(x)\n\
    \            val row34 = lst(i).drop(x)\n            val row35 = ", "        val\
    \ lst1 = lst.sortWith(_.compare(x, _) < 0)\n        val lst2 = lst1.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst3 = lst2.sortWith(_.compare(x, _) < 0)\n        val\
    \ lst4 = lst3.sortWith(_.compare(x, _) > 0)\n        val lst5 = lst4.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst6 = lst5.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst7 = lst6.sortWith(_.compare(x, _) < 0)\n        val lst8 = lst7.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst9 = lst8.sortWith(_.compare(x, _) < 0)\n        val\
    \ lst10 = lst9.sortWith(_.compare(x, _) > 0)\n        val lst11 = lst10.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst12 = lst11.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst13 = lst12.sortWith(_.compare(x, _) < 0)\n        val lst14 = lst13.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst15 = lst14.sortWith(_.compare(x, _) < 0)\n        val\
    \ lst16 = lst15.sortWith(_.compare(x, _) > 0)\n        val lst17 = lst16.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst18 = lst17.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst19 = lst18.sortWith(_.compare(x, _) < 0)\n        val lst20 = lst19.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst21 = lst20.sortWith(_.compare(x, _) < 0)\n        val\
    \ lst22 = lst21.sortWith(_.compare(x, _) > 0)\n        val lst23 = lst22.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst24 = lst23.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst25 = lst24.sortWith(_.compare(x, _) < 0)\n        val lst26 = lst25.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst27 = lst26.sortWith(_.compare(x, _) < 0)\n        val\
    \ lst28 = lst27.sortWith(_.compare(x, _) > 0)\n        val lst29 = lst28.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst30 = lst29.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst31 = lst30.sortWith(_.compare(x, _", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = lst.map(x => (x.indexOf(x),\
    \ x.lastIndexOf(x)))\n        val sorted = result.sortWith((x, y) => x._1 < y._1)\n\
    \        val sortedRows = sorted.map(x => x._1)\n        val sortedCols = sorted.map(x\
    \ => x._2)\n        val sortedRowsReversed = sortedRows.reverse\n        val sortedColsReversed\
    \ = sortedCols.reverse\n        val sortedRowsReversedMap = sortedRowsReversed.map(x\
    \ => (x, sortedColsReversed.indexOf(x)))\n        val sortedColsReversedMap =\
    \ sortedColsReversed.map(x => (x, sortedRowsReversed.indexOf(x)))\n        val\
    \ sortedRowsReversedMapSorted = sortedRowsReversedMap.sortWith((x, y) => x._1\
    \ < y._1)\n        val sortedColsReversedMapSorted = sortedColsReversedMap.sortWith((x,\
    \ y) => x._1 < y._1)\n        val sortedRowsReversedMapSortedMap = sortedRowsReversedMapSorted.map(x\
    \ => (x._1, x._2))\n        val sortedColsReversedMapSortedMap = sortedColsReversedMapSorted.map(x\
    \ => (x._1, x._2))\n        val sortedRowsReversedMapSortedMapSorted = sortedRowsReversedMapSortedMap.sortWith((x,\
    \ y) => x._1 < y._1)\n        val sortedColsReversedMapSortedMapSorted = sortedColsReversedMapSortedMap.sortWith((x,\
    \ y) => x._1 < y._1)\n        val sortedRowsReversedMapSortedMapSortedMap = sortedRowsReversedMapSortedMapSorted.map(x\
    \ => (x._1, x._2))\n        val sortedColsReversedMapSortedMapSortedMap = sortedColsReversedMapSortedMapSorted.map(x\
    \ => (x._1, x._2))\n        val sortedRowsReversedMapSortedMapSortedMapSorted\
    \ = sortedRowsReversedMapSortedMapSortedMap.sortWith((x, y) => x._1 < y._1)\n\
    \        val sortedColsReversedMapSortedMapSortedMapSorted = sortedColsReversedMapSortedMapSortedMap.sortWith((x,\
    \ y) => x._1 < y._1)\n        val sortedRowsReversedMapSortedMapSortedMapSortedMapSorted\
    \ = sortedRowsReversedMapSortedMapSortedMapSortedMap.sortWith((x, y) => x._1 <\
    \ y._1)\n        val sortedColsReversedMapSorted", "        val m = lst.size\n\
    \        val n = lst(0).size\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        var i = 0\n        var j = 0\n        while (i < m && j <\
    \ n) {\n            if (lst(i).contains(x)) {\n                result.add(Tuple2(i,\
    \ j))\n                i += 1\n            } else {\n                j += 1\n\
    \            }\n        }\n        result.sortBy(_._1)\n        result.sortBy(_._2,\
    \ descending = true)\n        return result", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = new mutable.ArrayBuffer[Long]()\n        val col\
    \ = new mutable.ArrayBuffer[Long]()\n        var i = 0\n        while (i < rows.length)\
    \ {\n            val row = lst(i).zipWithIndex.sortBy(_._1).map(_._2)\n      \
    \      val col = lst(i).zipWithIndex.sortBy(_._2).map(_._1)\n            val row1\
    \ = row.takeWhile(_ < x).sortBy(_).reverse\n            val col1 = col.takeWhile(_\
    \ < x).sortBy(_).reverse\n            val row2 = row.dropWhile(_ < x).sortBy(_).reverse\n\
    \            val col2 = col.dropWhile(_ < x).sortBy(_).reverse\n            val\
    \ row3 = row1.takeWhile(_ < x).sortBy(_).reverse\n            val col3 = col1.takeWhile(_\
    \ < x).sortBy(_).reverse\n            val row4 = row2.takeWhile(_ < x).sortBy(_).reverse\n\
    \            val col4 = col2.takeWhile(_ < x).sortBy(_).reverse\n            val\
    \ row5 = row3.takeWhile(_ < x).sortBy(_).reverse\n            val col5 = col3.takeWhile(_\
    \ < x).sortBy(_).reverse\n            val row6 = row4.takeWhile(_ < x).sortBy(_).reverse\n\
    \            val col6 = col4.takeWhile(_ < x).sortBy(_).reverse\n            val\
    \ row7 = row5.takeWhile(_ < x).sortBy(_).reverse\n            val col7 = col5.takeWhile(_\
    \ < x).sortBy(_).reverse\n            val row8 = row6.takeWhile(_ < x).sortBy(_).reverse\n\
    \            val col8 = col6.takeWhile(_ < x).sortBy(_).reverse\n            val\
    \ row9 = row7.takeWhile(_ < x).sortBy(_).reverse\n            val col9 = col7.takeWhile(_\
    \ < x).sortBy(_).reverse\n            val row10 = row8.takeWhile(_ < x).sortBy(_).reverse\n\
    \            val col10 = col8.takeWhile(_ < x).sortBy(_).reverse\n           \
    \ val row11 = row9.takeWhile(_ < x).sortBy(_).reverse\n            val col11 =\
    \ col9.takeWhile(_ < x).sortBy(_).reverse\n            val row12 = row10.takeWhile(_\
    \ < x).sortBy(_).reverse\n            val col12 = col10.takeWhile(_ < x).sortBy(_).reverse\n\
    \            val row13", "        val rows = lst.map(_.length)\n        val cols\
    \ = lst(0).length\n        val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n\
    \        val row = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < rows) {\n            row.append(lst(i).indexOf(x))\n\
    \            i += 1\n        }\n        val j = 0\n        while (j < cols) {\n\
    \            col.append(lst(0).indexOf(lst(1).indexOf(lst(2).indexOf(x))))\n \
    \           j += 1\n        }\n        val k = 0\n        while (j < cols) {\n\
    \            while (k < rows) {\n                if (row(k) == col(j)) {\n   \
    \                 result.append(Tuple2(row(k), col(j)))\n                }\n \
    \               k += 1\n            }\n            j += 1\n        }\n       \
    \ result.sortBy(_._1).reverse\n        result.sortBy(_._2).reverse\n        result.toList",
  "        val lst2 = lst.map(_.toList)\n        val lst3 = lst2.map(x => x.filter(_\
    \ == x))\n        val lst4 = lst3.map(x => x.map(y => (y, x)))\n        val lst5\
    \ = lst4.map(x => x.sortBy(_._1))\n        val lst6 = lst5.map(x => x.sortBy(_._2))\n\
    \        lst6.map(x => (x._1, x._2))", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = new mutable.ListBuffer[Long]()\n        val col\
    \ = new mutable.ListBuffer[Long]()\n        for (i <- 0 until rows) {\n      \
    \      row.append(0)\n            col.append(0)\n        }\n        for (i <-\
    \ 0 until cols) {\n            col.append(0)\n        }\n        for (i <- 0 until\
    \ rows) {\n            for (j <- 0 until cols) {\n                if (lst(i)(j)\
    \ == x) {\n                    row.append(i)\n                    col.append(j)\n\
    \                    result.append((row.toDouble, col.toDouble))\n           \
    \     }\n            }\n        }\n        result.sortBy(_._1).reverse", "   \
    \     val rows = lst.map(_.length)\n        val cols = lst(0).length\n       \
    \ val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        var row =\
    \ 0\n        var col = 0\n        var rowIndex = 0\n        var colIndex = 0\n\
    \        while(row < rows && col < cols) {\n            if(lst(row)(col) == x)\
    \ {\n                result.+=(Tuple2(rowIndex, colIndex))\n            }\n  \
    \          row += 1\n            col += 1\n        }\n        result.sortBy(_._1)\n\
    \        result.sortBy(_._2, descending = true)\n        return result.toList",
  "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        val rowIndex\
    \ = new mutable.ArrayBuffer[Int]()\n        val colIndex = new mutable.ArrayBuffer[Int]()\n\
    \        val rows = new mutable.ArrayBuffer[Int]()\n        val cols = new mutable.ArrayBuffer[Int]()\n\
    \        val row = new mutable.ArrayBuffer[Int]()\n        val col = new mutable.ArrayBuffer[Int]()\n\
    \        val rows = new mutable.ArrayBuffer[Int]()\n        val cols = new mutable.ArrayBuffer[Int]()\n\
    \        val row = new mutable.ArrayBuffer[Int]()\n        val col = new mutable.ArrayBuffer[Int]()\n\
    \        val rows = new mutable.ArrayBuffer[Int]()\n        val cols = new mutable.ArrayBuffer[Int]()\n\
    \        val row = new mutable.ArrayBuffer[Int]()\n        val col = new mutable.ArrayBuffer[Int]()\n\
    \        val rows = new mutable.ArrayBuffer[Int]()\n        val cols = new mutable.ArrayBuffer[Int]()\n\
    \        val row = new mutable.ArrayBuffer[Int]()\n        val col = new mutable.ArrayBuffer[Int]()\n\
    \        val rows = new mutable.ArrayBuffer[Int]()\n        val cols = new mutable.ArrayBuffer[Int]()\n\
    \        val row = new mutable.ArrayBuffer[Int]()\n        val col = new mutable.ArrayBuffer[Int]()\n\
    \        val rows = new mutable.ArrayBuffer[Int]()\n        val cols = new mutable.ArrayBuffer[Int]()\n\
    \        val row = new mutable.ArrayBuffer[Int]()\n        val col = new mutable.ArrayBuffer[Int]()\n\
    \        val rows = new mutable.ArrayBuffer[Int]()\n        val cols = new mutable.ArrayBuffer[Int]()\n\
    \        val row = new mutable.ArrayBuffer[Int]()\n        val col = new mutable.ArrayBuffer[Int]()\n\
    \        val rows = new mutable.ArrayBuffer[Int]()\n        val cols = new mutable.ArrayBuffer[Int]()\n\
    \        val row = new mutable.ArrayBuffer[Int]()\n        val col = new mutable.ArrayBuffer[Int]()\n\
    \        val rows = new mutable.ArrayBuffer[Int]()\n        val cols = new mutable.ArrayBuffer[Int]()\n\
    \        val row = new mutable.ArrayBuffer[Int]()\n        val col = new mutable.ArrayBuffer[Int]()\n\
    \        val rows = new mutable.ArrayBuffer[Int]()\n        val cols = new mutable.ArrayBuffer[Int]",
  "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = lst.map(row => row.zipWithIndex.filter(x => x == x).map(x => (x._2,\
    \ x._1)).toList)\n        val sorted = result.sortWith((x, y) => x._1 < y._1)\n\
    \        val sortedRows = sorted.map(x => x._2)\n        val sortedCols = sorted.map(x\
    \ => x._1)\n        val sortedRowsReverse = sortedRows.reverse\n        val sortedColsReverse\
    \ = sortedCols.reverse\n        val sortedRowsReverseSorted = sortedRowsReverse.sortWith((x,\
    \ y) => x._1 < y._1)\n        val sortedColsReverseSorted = sortedColsReverse.sortWith((x,\
    \ y) => x._1 < y._1)\n        val sortedRowsReverseSortedWithIndex = sortedRowsReverseSorted.map(x\
    \ => (x, sortedColsReverseSorted.indexOf(x._1)))\n        val sortedColsReverseSortedWithIndex\
    \ = sortedColsReverseSorted.map(x => (x, sortedRowsReverseSortedWithIndex.indexOf(x._1)))\n\
    \        val sortedRowsReverseSortedWithIndexAndCols = sortedRowsReverseSortedWithIndex.map(x\
    \ => (x._1, x._2, sortedColsReverseSortedWithIndex.indexOf(x._2)))\n        val\
    \ sortedColsReverseSortedWithIndexAndCols = sortedColsReverseSortedWithIndex.map(x\
    \ => (x._1, x._2, sortedRowsReverseSortedWithIndexAndCols.indexOf(x._2)))\n  \
    \      val sortedRowsReverseSortedWithIndexAndColsAndX = sortedRowsReverseSortedWithIndexAndCols.map(x\
    \ => (x._1, x._2, x._3, x))\n        val sortedColsReverseSortedWithIndexAndColsAndX\
    \ = sortedColsReverseSortedWithIndexAndCols.map(x => (x._1, x._2, x._3, x))\n\
    \        val sortedRowsReverseSortedWithIndexAndColsAndXAndY = sortedRowsReverseSortedWithIndexAndColsAndX.map(x\
    \ => (x._1, x._2, x._3, x._4))\n        val sortedColsReverseSortedWithIndexAndColsAndXAndY\
    \ = sortedColsReverseSortedWithIndexAndColsAndX.map(x => (x._1, x._2, x._3, x._4))\n\
    \        val sortedRowsReverseSortedWithIndexAndColsAndXAndYAndZ = sortedRowsReverseSortedWithIndexAndColsAndXAndY.map(x\
    \ => (x._1, x._2, x.", "        val m = lst.size\n        val n = lst(0).size\n\
    \        val result = new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        var\
    \ i = 0\n        while (i < m) {\n            var j = 0\n            var k = 0\n\
    \            while (j < n) {\n                if (lst(i)(j) == x) {\n        \
    \            result.add(Tuple2(i, j))\n                    j += 1\n          \
    \      } else {\n                    j += 1\n                }\n            }\n\
    \            i += 1\n        }\n        result.sortBy(_._1)\n        result.sortBy(_._2,\
    \ descending = true)\n        return result.toList", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = new mutable.ArrayBuffer[Long]()\n        val col\
    \ = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        var i = 0\n     \
    \   while(i < rows.length){\n            rows += lst(i).head\n            cols\
    \ += lst(i).last\n            i += 1\n        }\n        while(i < rows.length){\n\
    \            val r = rows(i)\n            val c = cols(i)\n            val row1\
    \ = r - x\n            val col1 = c - x\n            val row2 = r + x\n      \
    \      val col2 = c + x\n            if(row1 < 0 || row1 >= rows.length || col1\
    \ < 0 || col1 >= cols.length){\n                result.add(Tuple2(row1, col1))\n\
    \                result.add(Tuple2(row2, col2))\n            }\n            else{\n\
    \                result.add(Tuple2(row1, col1))\n                result.add(Tuple2(row2,\
    \ col2))\n            }\n            i += 1\n        }\n        result.sortBy(_._1)\n\
    \        result.sortBy(_._2)\n        result.toList", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = new mutable.ArrayBuffer[Long]()\n        val col\
    \ = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n", "        val lst2 = lst.map(_.toList)\n\
    \        val lst3 = lst2.map(x => x.filter(_ != x))\n        val lst4 = lst3.map(x\
    \ => x.sortWith(_ < _))\n        val lst5 = lst4.map(x => x.sortWith(_ > _))\n\
    \        val lst6 = lst5.map(x => x.filter(_ != x))\n        val lst7 = lst6.map(x\
    \ => x.sortWith(_ < _))\n        val lst8 = lst7.map(x => x.sortWith(_ > _))\n\
    \        val lst9 = lst8.map(x => x.filter(_ != x))\n        val lst10 = lst9.map(x\
    \ => x.sortWith(_ < _))\n        val lst11 = lst10.map(x => x.sortWith(_ > _))\n\
    \        val lst12 = lst11.map(x => x.filter(_ != x))\n        val lst13 = lst12.map(x\
    \ => x.sortWith(_ < _))\n        val lst14 = lst13.map(x => x.sortWith(_ > _))\n\
    \        val lst15 = lst14.map(x => x.filter(_ != x))\n        val lst16 = lst15.map(x\
    \ => x.sortWith(_ < _))\n        val lst17 = lst16.map(x => x.sortWith(_ > _))\n\
    \        val lst18 = lst17.map(x => x.filter(_ != x))\n        val lst19 = lst18.map(x\
    \ => x.sortWith(_ < _))\n        val lst20 = lst19.map(x => x.sortWith(_ > _))\n\
    \        val lst21 = lst20.map(x => x.filter(_ != x))\n        val lst22 = lst21.map(x\
    \ => x.sortWith(_ < _))\n        val lst23 = lst22.map(x => x.sortWith(_ > _))\n\
    \        val lst24 = lst23.map(x => x.filter(_ != x))\n        val lst25 = lst24.map(x\
    \ => x.sortWith(_ < _))\n        val lst26 = lst25.map(x => x.sortWith(_ > _))\n\
    \        val lst27 = lst26.map(x => x.filter(_ != x))\n        val lst28 = lst27.map(x\
    \ => x.sortWith(_ < _))\n        val lst29 = lst28.map(x => x.sortWith(_ > _))\n\
    \        val lst30 = lst29.map(x => x.filter(_ != x))\n        val lst31 = lst30.map(x\
    \ => x.sortWith(_ < _))\n        val lst32 = lst31.map(x ", "        val rows\
    \ = lst.map(_.length)\n        val cols = lst(0).length\n        val result =\
    \ new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        for (i <- 0 until rows)\
    \ {\n            val row = lst(i)\n            val col = 0\n            while\
    \ (col < cols && row != lst(i)(col)) {\n                col += 1\n           \
    \ }\n            result.add(Tuple2(i, col))\n        }\n        result.sortBy(_._1).reverse.sortBy(_._2).reverse",
  "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        for (i\
    \ <- 0 until rows) {\n            val row = lst(i)\n            val rowIndex =\
    \ i\n            val rowLength = row.length\n            val colIndex = rowIndex\
    \ % cols\n            val colLength = cols - colIndex\n            val rowStart\
    \ = rowIndex - colIndex\n            val rowEnd = rowStart + rowLength\n     \
    \       val colStart = colIndex - rowIndex\n            val colEnd = colStart\
    \ + colLength\n            val rowTuple = row.slice(rowStart, rowEnd)\n      \
    \      val colTuple = row.slice(colStart, colEnd)\n            val rowTuple2 =\
    \ rowTuple.zipWithIndex.map { case (elem, index) => (index + 1, elem) }\n    \
    \        val colTuple2 = colTuple.zipWithIndex.map { case (elem, index) => (index\
    \ + 1, elem) }\n            val tuples = rowTuple2.zip(colTuple2).map { case (rowIndex,\
    \ colIndex) => (rowIndex, colIndex) }\n            result.addAll(tuples)\n   \
    \     }\n        result.sortBy(_._1).reverse.sortBy(_._2).reverse", "        val\
    \ rows = lst.map(_.length)\n        val cols = lst(0).length\n        val result\
    \ = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        var row = 0\n      \
    \  var col = 0\n        while (row < rows && col < cols) {\n            if (lst(row).contains(x))\
    \ {\n                result.+=(Tuple2(row, col))\n                row += 1\n \
    \               col += 1\n            } else {\n                row += 1\n   \
    \         }\n        }\n        result.sortBy(_._1)\n        result.sortBy(_._2,\
    \ descending = true)\n        return result.toList", "        val lst1 = lst.sortBy(x\
    \ => x.toLong)\n        val lst2 = lst1.sortBy(x => x.toLong.reverse)\n      \
    \  val lst3 = lst2.map(x => (x.toLong, x.toLong.reverse))\n        lst3.filter(x\
    \ => x._1 == x).map(x => (x._1, x._2))", "        val rowMap = new mutable.HashMap[Long,\
    \ List[Long]]()\n        val columnMap = new mutable.HashMap[Long, List[Long]]()\n\
    \        val rowList = new mutable.ArrayList[Tuple2[Long, Long]]()\n        val\
    \ columnList = new mutable.ArrayList[Tuple2[Long, Long]]()\n        lst.foreach(row\
    \ => {\n            val rowList = rowMap.getOrElseUpdate(row(0), new mutable.ArrayList[Long])\n\
    \            rowList += row\n            val columnList = columnMap.getOrElseUpdate(row(0),\
    \ new mutable.ArrayList[Long])\n            columnList += row(0)\n        })\n\
    \        rowList.sortWith(_.first < _.first)\n        columnList.sortWith(_.second\
    \ < _.second)\n        rowList.foreach(row => {\n            val columnList =\
    \ columnMap.getOrElseUpdate(row(0), new mutable.ArrayList[Long])\n           \
    \ columnList += row(0)\n        })\n        rowList.foreach(row => {\n       \
    \     val columnList = columnMap.getOrElseUpdate(row(0), new mutable.ArrayList[Long])\n\
    \            columnList += row(0)\n        })\n        rowList.foreach(row =>\
    \ {\n            val columnList = columnMap.getOrElseUpdate(row(0), new mutable.ArrayList[Long])\n\
    \            columnList += row(0)\n        })\n        rowList.foreach(row =>\
    \ {\n            val columnList = columnMap.getOrElseUpdate(row(0), new mutable.ArrayList[Long])\n\
    \            columnList += row(0)\n        })\n        rowList.foreach(row =>\
    \ {\n            val columnList = columnMap.getOrElseUpdate(row(0), new mutable.ArrayList[Long])\n\
    \            columnList += row(0)\n        })\n        rowList.foreach(row =>\
    \ {\n            val columnList = columnMap.getOrElseUpdate(row(0), new mutable.ArrayList[Long])\n\
    \            columnList += row(0)\n        })\n        rowList.foreach(row =>\
    \ {\n            val columnList = columnMap.getOrElseUpdate(row(0), new mutable.ArrayList[Long])\n\
    \            columnList += row(0)\n        })\n        rowList.foreach(row =>\
    \ {\n            val columnList = columnMap.getOrElseUpdate(row(0), new mutable.ArrayList[Long])\n\
    \            columnList += row(0)\n        })\n        rowList.foreach(row =>\
    \ {\n            val columnList = columnMap.getOrElseUpdate(row(0), new mutable.ArrayList[Long])\n\
    \            columnList += row(0)\n        })\n        rowList.foreach(row =>\
    \ {\n            val columnList = columnMap.getOrElseUpdate(row(0), new mutable.ArrayList[Long])\n\
    \            columnList += row(0)\n        })\n        row", "        val rows\
    \ = lst.map(_.length)\n        val cols = lst(0).length\n        val result =\
    \ new mutable.ListBuffer[Tuple2[Long, Long]]()\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        var i = 0\n      \
    \  var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n      \
    \  var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n      \
    \  var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n      \
    \  var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n      \
    \  var z = 0\n        var i = 0\n        var j = 0\n        var k = 0\n      \
    \  var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n      \
    \  var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n      \
    \  var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n      \
    \  var x = 0\n        var y = 0\n        var z = 0\n        var i = 0\n      \
    \  var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n      \
    \  var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n      \
    \  var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n      \
    \  var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n      \
    \  var z = 0\n        var i = 0\n        var j = 0\n        var k = 0\n      \
    \  var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n      \
    \  var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n      \
    \  var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n      \
    \  var x = 0\n        var y = 0\n        var z = 0\n        var i = 0\n      \
    \  var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n      \
    \  var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n      \
    \  var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n      \
    \  var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n      \
    \  var z = 0\n        var i = 0\n        var j = 0\n        var k = 0\n      \
    \  var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n      \
    \  var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n      \
    \  var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n      \
    \  var x = 0\n        var y = 0\n        var z = 0\n        var i = 0\n      \
    \  var j = 0\n", "        val m = lst.size\n        val n = lst(0).size\n    \
    \    val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        val row\
    \ = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until m){\n            val row = i to m\n            val col\
    \ = i to n\n            val row1 = row.sortBy(_._1)\n            val col1 = col.sortBy(_._2)\n\
    \            val row2 = row1.reverse\n            val col2 = col1.reverse\n  \
    \          val row3 = row2.sortBy(_._2)\n            val col3 = col2.sortBy(_._1)\n\
    \            val row4 = row3.reverse\n            val col4 = col3.reverse\n  \
    \          val row5 = row4.sortBy(_._1)\n            val col5 = col4.reverse\n\
    \            val row6 = row5.sortBy(_._2)\n            val col6 = col5.reverse\n\
    \            val row7 = row6.sortBy(_._1)\n            val col7 = col6.reverse\n\
    \            val row8 = row7.sortBy(_._2)\n            val col8 = col7.reverse\n\
    \            val row9 = row8.sortBy(_._1)\n            val col9 = col8.reverse\n\
    \            val row10 = row9.sortBy(_._2)\n            val col10 = col9.reverse\n\
    \            val row11 = row10.sortBy(_._1)\n            val col11 = col10.reverse\n\
    \            val row12 = row11.sortBy(_._2)\n            val col12 = col11.reverse\n\
    \            val row13 = row12.sortBy(_._1)\n            val col13 = col12.reverse\n\
    \            val row14 = row13.sortBy(_._2)\n            val col14 = col13.reverse\n\
    \            val row15 = row14.sortBy(_._1)\n            val col15 = col14.reverse\n\
    \            val row16 = row15.sortBy(_._2)\n            val col16 = col15.reverse\n\
    \            val row17 = row16.sortBy(_._1)\n            val col17 = col16.reverse\n\
    \            val row18 = row17.sortBy(_._2)\n            val col18 = col17.reverse\n\
    \            val row19 = row18.sortBy(_._1)\n            val col19 = col18.reverse\n\
    \            val row20 = row19.sortBy(_._2)\n            val col20 = col19.reverse\n\
    \            val row21 = row20.sortBy(_._1)\n            val col21 = ", "    \
    \    val lst1 = lst.sortBy(x => x._1)\n        val lst2 = lst1.sortBy(x => x._2)\n\
    \        val lst3 = lst2.sortBy(x => -x._2)\n        val lst4 = lst3.filter(x\
    \ => x._1 == x).sortBy(x => x._2)\n        val lst5 = lst4.filter(x => x._1 ==\
    \ x).sortBy(x => x._2)\n        lst5.map(x => (x._1, x._2))", "        val rows\
    \ = lst.map(_.length)\n        val cols = lst(0).length\n        val result =\
    \ new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        var i = 0\n     \
    \   while (i < rows.length) {\n            val row = lst(i).take(cols).sortWith(_\
    \ < _)\n            val col = lst(i).drop(cols).sortWith(_ < _)\n            val\
    \ row1 = row.take(x)\n            val col1 = col.take(x)\n            val row2\
    \ = row.drop(x)\n            val col2 = col.drop(x)\n            val row3 = row1.take(col1)\n\
    \            val col3 = col1.take(col1)\n            val row4 = row1.drop(col1)\n\
    \            val col4 = col1.drop(col1)\n            val row5 = row2.take(col2)\n\
    \            val col5 = col2.take(col2)\n            val row6 = row2.drop(col2)\n\
    \            val col6 = col2.drop(col2)\n            val row7 = row3.take(col3)\n\
    \            val col7 = col3.take(col3)\n            val row8 = row3.drop(col3)\n\
    \            val col8 = col3.drop(col3)\n            val row9 = row4.take(col4)\n\
    \            val col9 = col4.take(col4)\n            val row10 = row4.drop(col4)\n\
    \            val col10 = col4.drop(col4)\n            val row11 = row5.take(col5)\n\
    \            val col11 = col5.take(col5)\n            val row12 = row5.drop(col5)\n\
    \            val col12 = col5.drop(col5)\n            val row13 = row6.take(col6)\n\
    \            val col13 = col6.take(col6)\n            val row14 = row6.drop(col6)\n\
    \            val col14 = col6.drop(col6)\n            val row15 = row7.take(col7)\n\
    \            val col15 = col7.take(col7)\n            val row16 = row7.drop(col7)\n\
    \            val col16 = col7.drop(col7)\n            val row17 = row8.take(col8)\n\
    \            val col17 = col8.take(col8)\n            val row18 = row8.drop(col8)\n\
    \            val col18 = col", "        val rows = lst.map(_.length)\n       \
    \ val cols = lst(0).length\n        val result = lst.map(row => row.zipWithIndex.map(x\
    \ => (x._2, x._1)).toList)\n        val sorted = result.sortWith((x, y) => x._1\
    \ < y._1)\n        val sortedRows = sorted.map(row => row._2.toList)\n       \
    \ val sortedCols = sorted.map(row => row._1.toList)\n        val sortedRowsSorted\
    \ = sortedRows.sortWith((x, y) => y._1 < x._1)\n        val sortedColsSorted =\
    \ sortedCols.sortWith((x, y) => y._1 < x._1)\n        val result = sortedRowsSorted.map(row\
    \ => sortedColsSorted.map(col => (row._2, col._2)).toList)\n        result.filter(row\
    \ => row._1 == x).map(row => Tuple2(row._2, row._1))", "        val m = lst.size\n\
    \        val n = lst(0).size\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]\n        val row = new mutable.ListBuffer[Long]()\n        val col =\
    \ new mutable.ListBuffer[Long]()\n        var i = 0\n        while (i < m) {\n\
    \            val row = lst(i).filter(_ != x).sortWith(_ < _)\n            row.foreach(x\
    \ => row.toList.toBuffer.sortWith(_ < _))\n            row.foreach(x => row.toList.toBuffer.sortWith(_\
    \ < _))\n            row.foreach(x => row.toList.toBuffer.sortWith(_ < _))\n \
    \           row.foreach(x => row.toList.toBuffer.sortWith(_ < _))\n          \
    \  row.foreach(x => row.toList.toBuffer.sortWith(_ < _))\n            row.foreach(x\
    \ => row.toList.toBuffer.sortWith(_ < _))\n            row.foreach(x => row.toList.toBuffer.sortWith(_\
    \ < _))\n            row.foreach(x => row.toList.toBuffer.sortWith(_ < _))\n \
    \           row.foreach(x => row.toList.toBuffer.sortWith(_ < _))\n          \
    \  row.foreach(x => row.toList.toBuffer.sortWith(_ < _))\n            row.foreach(x\
    \ => row.toList.toBuffer.sortWith(_ < _))\n            row.foreach(x => row.toList.toBuffer.sortWith(_\
    \ < _))\n            row.foreach(x => row.toList.toBuffer.sortWith(_ < _))\n \
    \           row.foreach(x => row.toList.toBuffer.sortWith(_ < _))\n          \
    \  row.foreach(x => row.toList.toBuffer.sortWith(_ < _))\n            row.foreach(x\
    \ => row.toList.toBuffer.sortWith(_ < _))\n            row.foreach(x => row.toList.toBuffer.sortWith(_\
    \ < _))\n            row.foreach(x => row.toList.toBuffer.sortWith(_ < _))\n \
    \           row.foreach(x => row.toList.toBuffer.sortWith(_ < _))\n          \
    \  row.foreach(x => row.toList.toBuffer.sortWith(_ < _))\n            row.foreach(x\
    \ => row.toList.toBuffer.sortWith(_ < _))\n            row.foreach(x => row.toList.toBuffer.sortWith(_\
    \ < _))\n            row.foreach(x => row.toList.toBuffer.sortWith(_ < _))\n \
    \           row.foreach(x => row.toList.toBuffer.sortWith(_ < _))\n", "      \
    \  val rows = lst.map(_.length)\n        val cols = lst(0).length\n        val\
    \ result = new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        for (i <- 0\
    \ until rows) {\n            val row = lst(i)\n            val cols = lst(0).length\n\
    \            val rowIndex = i\n            val colIndex = cols - 1\n         \
    \   val rowTuple = Tuple2(rowIndex, colIndex)\n            val colTuple = Tuple2(colIndex,\
    \ rowIndex)\n            if (rowIndex == x) {\n                result.add(rowTuple)\n\
    \            } else if (colIndex == x) {\n                result.add(colTuple)\n\
    \            }\n        }\n        result.sortBy(_._1).reverse.sortBy(_._2).reverse",
  "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        val row\
    \ = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < rows) {\n            val row = lst(i).zipWithIndex.sortBy(_._1).map(_._2)\n\
    \            row.foreach(x => row.append(x))\n            row.foreach(x => result.append(Tuple2(i,\
    \ x)))\n            i += 1\n        }\n        val j = 0\n        while (j < cols)\
    \ {\n            val col = lst(0).zipWithIndex.sortBy(_._2).map(_._1)\n      \
    \      col.foreach(x => col.append(x))\n            col.foreach(x => result.append(Tuple2(0,\
    \ x)))\n            j += 1\n        }\n        result.sortBy(_._1).map(_._2)",
  "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        var row\
    \ = 0\n        var col = 0\n        while(row < rows && col < cols) {\n      \
    \      val value = lst(row)(col)\n            if(value == x) {\n             \
    \   result.append((row, col))\n                row += 1\n                col +=\
    \ 1\n            } else {\n                row += 1\n            }\n        }\n\
    \        result.sortBy(_._1).reverse", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = lst.map(_.zipWithIndex.map(x\
    \ => (x._2, x._1)).toList)\n        val rows = result.map(_.length)\n        val\
    \ cols = result(0).length\n        val rows = result.map(_.length)\n        val\
    \ cols = result.map(_.length)\n        val rows = result.map(_.length)\n     \
    \   val cols = result.map(_.length)\n        val rows = result.map(_.length)\n\
    \        val cols = result.map(_.length)\n        val rows = result.map(_.length)\n\
    \        val cols = result.map(_.length)\n        val rows = result.map(_.length)\n\
    \        val cols = result.map(_.length)\n        val rows = result.map(_.length)\n\
    \        val cols = result.map(_.length)\n        val rows = result.map(_.length)\n\
    \        val cols = result.map(_.length)\n        val rows = result.map(_.length)\n\
    \        val cols = result.map(_.length)\n        val rows = result.map(_.length)\n\
    \        val cols = result.map(_.length)\n        val rows = result.map(_.length)\n\
    \        val cols = result.map(_.length)\n        val rows = result.map(_.length)\n\
    \        val cols = result.map(_.length)\n        val rows = result.map(_.length)\n\
    \        val cols = result.map(_.length)\n        val rows = result.map(_.length)\n\
    \        val cols = result.map(_.length)\n        val rows = result.map(_.length)\n\
    \        val cols = result.map(_.length)\n        val rows = result.map(_.length)\n\
    \        val cols = result.map(_.length)\n        val rows = result.map(_.length)\n\
    \        val cols = result.map(_.length)\n        val rows = result.map(_.length)\n\
    \        val cols = result.map(_.length)\n        val rows = result.map(_.length)\n\
    \        val cols = result.map(_.length)\n        val rows = result.map(_.length)\n\
    \        val cols = result.map(_.length)\n        val rows = result.map(_.length)\n\
    \        val cols = result.map(_.length)\n        val rows = result.map(_.length)\n\
    \        val cols = result.map(_.length)\n        val rows = result.map(_.length)\n\
    \        val cols = result.map(_.length)\n        val rows = result.map(_.length)\n\
    \        val cols = result.map(_.length)\n        val rows = result.map(_.length)\n\
    \        val cols = result.map(_.length)\n        val rows = result.map(_.length)\n\
    \        val cols = result.map(_.length)\n        val rows = result.map(_.length)\n\
    \        val cols = result.map(_.length)\n        val rows = result.map(_.length)\n\
    \        val cols = result.map(_.length)\n        val rows = result.map(_.length)\n\
    \        val cols = result.map(_.length)\n        val rows = result.map(_.length)\n\
    \        val ", "        val lst1 = lst.sortBy(x => x.toLong)\n        val lst2\
    \ = lst1.sortBy(x => -x.toLong)\n        val lst3 = lst2.sortBy(x => x.toLong)\n\
    \        val lst4 = lst3.sortBy(x => -x.toLong)\n        val lst5 = lst4.sortBy(x\
    \ => x.toLong)\n        val lst6 = lst5.sortBy(x => -x.toLong)\n        val lst7\
    \ = lst6.sortBy(x => x.toLong)\n        val lst8 = lst7.sortBy(x => -x.toLong)\n\
    \        val lst9 = lst8.sortBy(x => x.toLong)\n        val lst10 = lst9.sortBy(x\
    \ => -x.toLong)\n        val lst11 = lst10.sortBy(x => x.toLong)\n        val\
    \ lst12 = lst11.sortBy(x => -x.toLong)\n        val lst13 = lst12.sortBy(x =>\
    \ x.toLong)\n        val lst14 = lst13.sortBy(x => -x.toLong)\n        val lst15\
    \ = lst14.sortBy(x => x.toLong)\n        val lst16 = lst15.sortBy(x => -x.toLong)\n\
    \        val lst17 = lst16.sortBy(x => x.toLong)\n        val lst18 = lst17.sortBy(x\
    \ => -x.toLong)\n        val lst19 = lst18.sortBy(x => x.toLong)\n        val\
    \ lst20 = lst19.sortBy(x => -x.toLong)\n        val lst21 = lst20.sortBy(x =>\
    \ x.toLong)\n        val lst22 = lst21.sortBy(x => -x.toLong)\n        val lst23\
    \ = lst22.sortBy(x => x.toLong)\n        val lst24 = lst23.sortBy(x => -x.toLong)\n\
    \        val lst25 = lst24.sortBy(x => x.toLong)\n        val lst26 = lst25.sortBy(x\
    \ => -x.toLong)\n        val lst27 = lst26.sortBy(x => x.toLong)\n        val\
    \ lst28 = lst27.sortBy(x => -x.toLong)\n        val lst29 = lst28.sortBy(x =>\
    \ x.toLong)\n        val lst30 = lst29.sortBy(x => -x.toLong)\n        val lst31\
    \ = lst30.sortBy(x => x.toLong)\n        val lst32 = lst31.sortBy(x => -x.", " \
    \       val rows = lst.map(_.length)\n        val cols = lst(0).length\n     \
    \   val result = lst.map(row => row.zipWithIndex.map(x => (x._2, x._1)).toList)\n\
    \        val sortedRows = result.sortWith(_.first < _.first)\n        val sortedCols\
    \ = sortedRows.map(row => row.map(_.last).reverse)\n        val sortedResult =\
    \ sortedRows.map(row => row.zip(sortedCols.map(_.last))).map(row => row.map(x\
    \ => (x._1, x._2)))\n        val sortedResult2 = sortedResult.sortWith(_.first\
    \ < _.first)\n        val sortedResult3 = sortedResult2.map(row => row.map(x =>\
    \ (x._1, x._2)))\n        val sortedResult4 = sortedResult3.sortWith(_.first <\
    \ _.first)\n        val sortedResult5 = sortedResult4.map(row => row.map(x =>\
    \ (x._1, x._2)))\n        val sortedResult6 = sortedResult5.map(row => row.map(x\
    \ => (x._1, x._2)))\n        val sortedResult7 = sortedResult6.map(row => row.map(x\
    \ => (x._1, x._2)))\n        val sortedResult8 = sortedResult7.map(row => row.map(x\
    \ => (x._1, x._2)))\n        val sortedResult9 = sortedResult8.map(row => row.map(x\
    \ => (x._1, x._2)))\n        val sortedResult10 = sortedResult9.map(row => row.map(x\
    \ => (x._1, x._2)))\n        val sortedResult11 = sortedResult10.map(row => row.map(x\
    \ => (x._1, x._2)))\n        val sortedResult12 = sortedResult11.map(row => row.map(x\
    \ => (x._1, x._2)))\n        val sortedResult13 = sortedResult12.map(row => row.map(x\
    \ => (x._1, x._2)))\n        val sortedResult14 = sortedResult13.map(row => row.map(x\
    \ => (x._1, x._2)))\n        val sortedResult15 = sortedResult14.map(row => row.map(x\
    \ => (x._1, x._2)))\n        val sortedResult16 = sortedResult15.map(row => row.map(x\
    \ => (x._1, x._2)))\n        val sortedResult17 = sortedResult16.map(row => row.map(x\
    \ => (x._1, x._2)))\n        val sortedResult18 = sortedResult17.map(row => row.map(x\
    \ => (x._1, x._2)))\n        val sortedResult19 = sortedResult18.map(row => row.map(x\
    \ => (x._1, x._2)))\n        val sortedResult20 = sorted", "        val rows =\
    \ lst.map(_.length)\n        val cols = lst(0).length\n        val result = new\
    \ mutable.ListBuffer[Tuple2[Long, Long]]()\n        var row = 0\n        var col\
    \ = 0\n        while(row < rows && col < cols) {\n            val xx = lst(row)(col)\n\
    \            val yy = lst(row+1)(col)\n            val xy = lst(row+2)(col)\n\
    \            val xx = if (xx < x) xx else x\n            val yy = if (yy < y)\
    \ yy else y\n            val xy = if (xy < x) xy else x\n            val tuple\
    \ = Tuple2(xx, yy)\n            if (tuple == Tuple2(xx, yy)) {\n             \
    \   result.add(tuple)\n            }\n            row += 3\n            col +=\
    \ 3\n        }\n        result.sortBy(_._1).reverse", "        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = ", "        val lst1 = lst.sortBy(_(0))\n        val lst2\
    \ = lst1.sortBy(_(1)) //descending\n        val lst3 = lst2.filter(_(0) != x)\n\
    \        val lst4 = lst3.sortBy(_(0))\n        val lst5 = lst4.sortBy(_(1)) //descending\n\
    \        lst5.map(x => (x._1, x._2))", "        val lst2 = lst.sortWith((x, y)\
    \ => x.toLong > y.toLong)\n        val lst3 = lst2.sortWith((x, y) => y.toLong\
    \ > x.toLong)\n        val lst4 = lst3.sortWith((x, y) => x.toLong == y.toLong)\n\
    \        val lst5 = lst4.sortWith((x, y) => x.toLong < y.toLong)\n        val\
    \ lst6 = lst5.sortWith((x, y) => y.toLong < x.toLong)\n        val lst7 = lst6.sortWith((x,\
    \ y) => x.toLong == y.toLong)\n        val lst8 = lst7.sortWith((x, y) => x.toLong\
    \ < y.toLong)\n        val lst9 = lst8.sortWith((x, y) => y.toLong < x.toLong)\n\
    \        val lst10 = lst9.sortWith((x, y) => x.toLong == y.toLong)\n        val\
    \ lst11 = lst10.sortWith((x, y) => x.toLong < y.toLong)\n        val lst12 = lst11.sortWith((x,\
    \ y) => y.toLong < x.toLong)\n        val lst13 = lst12.sortWith((x, y) => x.toLong\
    \ == y.toLong)\n        val lst14 = lst13.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val lst15 = lst14.sortWith((x, y) => y.toLong < x.toLong)\n        val\
    \ lst16 = lst15.sortWith((x, y) => x.toLong == y.toLong)\n        val lst17 =\
    \ lst16.sortWith((x, y) => x.toLong < y.toLong)\n        val lst18 = lst17.sortWith((x,\
    \ y) => y.toLong < x.toLong)\n        val lst19 = lst18.sortWith((x, y) => x.toLong\
    \ == y.toLong)\n        val lst20 = lst19.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val lst21 = lst20.sortWith((x, y) => y.toLong < x.toLong)\n        val\
    \ lst22 = lst21.sortWith((x, y) => y.toLong < x.toLong)\n        val lst23 = lst22.sortWith((x,\
    \ y) => x.toLong == y.toLong)\n        val lst24 = lst23.sortWith((x, y) => x.toLong\
    \ < y.toLong)\n        val lst25 = lst24.sortWith((x, y) => y.toLong < x.toLong)\n\
    \        val lst26 = lst25.sortWith((x, y) => y.toLong < x.toLong", "        val\
    \ lst2 = lst.map(_.toList)\n        val lst3 = lst2.map(x => x.filter(_ == x))\n\
    \        val lst4 = lst3.map(x => x.sortWith(_ < _))\n        val lst5 = lst4.map(x\
    \ => x.sortWith(_ < _))\n        val lst6 = lst5.map(x => x.sortWith(_ < _))\n\
    \        val lst7 = lst6.map(x => x.sortWith(_ < _))\n        val lst8 = lst7.map(x\
    \ => x.sortWith(_ < _))\n        val lst9 = lst8.map(x => x.sortWith(_ < _))\n\
    \        val lst10 = lst9.map(x => x.sortWith(_ < _))\n        val lst11 = lst10.map(x\
    \ => x.sortWith(_ < _))\n        val lst12 = lst11.map(x => x.sortWith(_ < _))\n\
    \        val lst13 = lst12.map(x => x.sortWith(_ < _))\n        val lst14 = lst13.map(x\
    \ => x.sortWith(_ < _))\n        val lst15 = lst14.map(x => x.sortWith(_ < _))\n\
    \        val lst16 = lst15.map(x => x.sortWith(_ < _))\n        val lst17 = lst16.map(x\
    \ => x.sortWith(_ < _))\n        val lst18 = lst17.map(x => x.sortWith(_ < _))\n\
    \        val lst19 = lst18.map(x => x.sortWith(_ < _))\n        val lst20 = lst19.map(x\
    \ => x.sortWith(_ < _))\n        val lst21 = lst20.map(x => x.sortWith(_ < _))\n\
    \        val lst22 = lst21.map(x => x.sortWith(_ < _))\n        val lst23 = lst22.map(x\
    \ => x.sortWith(_ < _))\n        val lst24 = lst23.map(x => x.sortWith(_ < _))\n\
    \        val lst25 = lst24.map(x => x.sortWith(_ < _))\n        val lst26 = lst25.map(x\
    \ => x.sortWith(_ < _))\n        val lst27 = lst26.map(x => x.sortWith(_ < _))\n\
    \        val lst28 = lst27.map(x => x.sortWith(_ < _))\n        val lst29 = lst28.map(x\
    \ => x.sortWith(_ < _))\n        val lst30 = lst29.map(x => x.sortWith(_ < _))\n\
    \        val lst31 = lst30.map(x ", "        val lst2 = lst.sortWith((x, y) =>\
    \ x.toLong > y.toLong)\n        val lst3 = lst2.sortWith((x, y) => x.toLong >\
    \ y.toLong)\n        val lst4 = lst3.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n        val lst7 = lst6.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst8 = lst7.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst9 = lst8.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n        val lst12 = lst11.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst13 = lst12.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst14 = lst13.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n        val lst17 = lst16.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst18 = lst17.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst19 = lst18.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n        val lst22 = lst21.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst23 = lst22.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst24 = lst23.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst26 = lst25.sortWith((x, y) => x.toLong > y.toLong", "        val lst1 = lst.sortBy(x\
    \ => x.toInt)\n        val lst2 = lst1.sortBy(x => -x.toInt)\n        val lst3\
    \ = lst2.map(x => (x._1, x._2))\n        val lst4 = lst3.filter(x => x._1 == x)\n\
    \        val lst5 = lst4.map(x => (x._2, x._1))\n        lst5.toList", "     \
    \   val rows = lst.map(_.length)\n        val cols = lst(0).length\n        val\
    \ result = lst.map(_.zipWithIndex).sortBy(_._1).map(t => (t._2, t._1)).filter(t\
    \ => t._1 == x).map(t => (t._2, t._1)).sortBy(_._1).map(t => (t._2, t._1)).filter(t\
    \ => t._1 == x).map(t => (t._2, t._1)).sortBy(_._1).map(t => (t._2, t._1)).filter(t\
    \ => t._1 == x).map(t => (t._2, t._1)).sortBy(_._1).map(t => (t._2, t._1)).filter(t\
    \ => t._1 == x).map(t => (t._2, t._1)).sortBy(_._1).map(t => (t._2, t._1)).filter(t\
    \ => t._1 == x).map(t => (t._2, t._1)).sortBy(_._1).map(t => (t._2, t._1)).filter(t\
    \ => t._1 == x).map(t => (t._2, t._1)).sortBy(_._1).map(t => (t._2, t._1)).filter(t\
    \ => t._1 == x).map(t => (t._2, t._1)).sortBy(_._1).map(t => (t._2, t._1)).filter(t\
    \ => t._1 == x).map(t => (t._2, t._1)).sortBy(_._1).map(t => (t._2, t._1)).filter(t\
    \ => t._1 == x).map(t => (t._2, t._1)).sortBy(_._1).map(t => (t._2, t._1)).filter(t\
    \ => t._1 == x).map(t => (t._2, t._1)).sortBy(_._1).map(t => (t._2, t._1)).filter(t\
    \ => t._1 == x).map(t => (t._2, t._1)).sortBy(_._1).map(t => (t._2, t._1)).filter(t\
    \ => t._1 == x).map(t => (t._2, t._1)).sortBy(_._1).map(t => (t._2, t._1)).filter(t\
    \ => t._1 == x).map(t => (t._2, t._1)).sortBy(_._1).map(t => (t._2, t._1)).filter(t\
    \ => t._1 == x).map(t => (t._2, t._1)).sortBy(_._1).map(t => (t._2, t._1)).filter(t\
    \ => t._1 == x).map(t => (t._2, t._1)).sortBy(_._1).map(t => (t._2, t._1)).filter(t\
    \ => t._1 == x).map(t => (t._2, t._1)).sortBy(_._1).map(t => (t._2, t._1)).filter(t\
    \ => t._1 == x).map(t => (t._2, t._1)).sortBy(_._1).map(t => (t._2, t._1)).filter(t\
    \ => t._1 == x).map(t => (t._2, t._1))", "        val lst2 = lst.map(x => x.map(y\
    \ => (y, x)))\n        val lst3 = lst2.map(x => x.sortBy(_._1))\n        val lst4\
    \ = lst3.map(x => x.sortBy(_._2))\n        val lst5 = lst4.map(x => x.filter(y\
    \ => y == x)).map(x => (x._1, x._2))\n        lst5.filter(y => y._1 == x).map(x\
    \ => (x._1, x._2))", "        val rows = lst.map(_.length)\n        val cols =\
    \ lst(0).length\n        val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n\
    \        val row = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < rows) {\n            val r = lst(i).indexOf(x)\n\
    \            if (r >= 0) {\n                row.add(x)\n                col.add(r\
    \ + 1)\n                rows.add(i)\n                cols.add(r + 1)\n       \
    \         i += 1\n            } else {\n                val r = lst(i).lastIndexOf(x)\n\
    \                if (r >= 0) {\n                    row.add(x)\n             \
    \       col.add(r + 1)\n                    rows.add(i)\n                    cols.add(r\
    \ + 1)\n                    i += 1\n                } else {\n               \
    \     val r = lst(i).length\n                    if (r >= 0) {\n             \
    \           row.add(x)\n                        col.add(r + 1)\n             \
    \           rows.add(i)\n                        cols.add(r + 1)\n           \
    \             i += 1\n                    } else {\n                        val\
    \ r = lst(i).lastIndexOf(x)\n                        if (r >= 0) {\n         \
    \                   row.add(x)\n                            col.add(r + 1)\n \
    \                           rows.add(i)\n                            cols.add(r\
    \ + 1)\n                            i += 1\n                        } else {\n\
    \                            val r = lst(i).indexOf(x)\n                     \
    \       if (r >= 0) {\n                                row.add(x)\n          \
    \                      col.add(r + 1)\n                                rows.add(i)\n\
    \                                cols.add(r + 1)\n                           \
    \     i += 1\n                            } else {\n                         \
    \       val r = lst(i).lastIndexOf(x)\n                                if (r >=\
    \ 0) {\n                                    row.add(x)\n                     \
    \               col.add(r + 1)\n                                    rows.add(i)\n\
    \                                    cols.add(r + 1)\n                       \
    \             i += 1\n                                } else {\n             \
    \                       val r = lst(i).length\n                              \
    \      if (r >= 0) {\n                                        row.add(x)\n   \
    \                                     col.add(r + 1)\n                       \
    \                 rows.add(i)\n                                        cols.add(r\
    \ + 1)\n                                        i += 1\n                     \
    \               } else {\n                                        val r = lst(i).lastIndexOf(x)\n\
    \                                        if (r >= 0) {\n                     \
    \                       row.add(x)\n                                         \
    \   col.add(r + 1)\n                                            rows.add(i)\n\
    \                                            cols.add(r + 1)\n               \
    \                             i += 1\n                                       \
    \ } else {\n                                            val r = lst(i).indexOf(x)\n\
    \                                            if (r >= 0) {\n                 \
    \                               row.add(x)\n                                 \
    \               col.add(r + 1)\n                                             \
    \   rows.add(i)\n                                                cols.add(r +\
    \ 1)\n                                                i += 1\n               \
    \                             } else {\n                                     \
    \           val r = lst(i).lastIndexOf(x)\n                                  \
    \              if (r >= 0) {\n                                               \
    \     row.add(x)\n                                                    col.add(r\
    \ + 1)\n                                                    rows.add(i)\n    \
    \                                                cols.add(r", "        val rows\
    \ = lst.map(_.length)\n        val cols = lst(0).length\n        val result =\
    \ new mutable.ListBuffer[Tuple2[Long, Long]]()\n        var i = 0\n        while\
    \ (i < rows) {\n            val row = lst(i).zipWithIndex.sortBy(_._1).reverse\n\
    \            val colIndex = row.indexOf(x)\n            if (colIndex >= 0) {\n\
    \                val colIndex = colIndex - 1\n                val colValue = row._2(colIndex)\n\
    \                result.add(Tuple2(i, colValue))\n            }\n            i\
    \ += 1\n        }\n        result.sortBy(_._1).reverse", "        val m = lst.size\n\
    \        val n = lst(0).size\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = new mutable.ArrayBuffer[Long]()\n        val col\
    \ = new mutable.ArrayBuffer[Long]()\n        var i = 0\n        while (i < m)\
    \ {\n            val row = lst(i).toList\n            val col = lst(i).drop(1).map(x\
    \ => x - x).toList\n            val rowIndex = row.indexOf(x)\n            val\
    \ colIndex = col.indexOf(x)\n            if (rowIndex != -1 && colIndex != -1)\
    \ {\n                val tuple = (rowIndex, colIndex)\n                result.add(tuple)\n\
    \                row.drop(rowIndex + 1).foreach(x => row.append(x))\n        \
    \        col.drop(colIndex + 1).foreach(x => col.append(x))\n            }\n \
    \           i += 1\n        }\n        result.sortBy(x => x._1)\n        result.sortBy(x\
    \ => x._2, false)\n        result.toList", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = new mutable.ArrayBuffer[Long]()\n        val col\
    \ = new mutable.ArrayBuffer[Long]()\n        var i = 0\n        while(i < rows.length)\
    \ {\n            val rowIndex = rows(i)\n            val colIndex = cols(i)\n\
    \            while(i < rows.length && rows(i) == rowIndex) {\n               \
    \ val rowIndex = rows(i)\n                val colIndex = cols(i)\n           \
    \     i += 1\n            }\n            row += rowIndex\n            col += colIndex\n\
    \            i += 1\n        }\n        row.foreach(x => result.add(Tuple2(x,\
    \ col(x))))\n        result.sortBy(x => x._1)\n        result.sortBy(x => x._2,\
    \ false)\n        result.toList", "        val rows = lst.map(_.length)\n    \
    \    val cols = lst(0).length\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = new mutable.ListBuffer[Long]()\n        val col\
    \ = new mutable.ListBuffer[Long]()\n        var i = 0\n        while (i < rows.length)\
    \ {\n            val rowSize = rows(i)\n            val colSize = cols(i)\n  \
    \          val rowIndex = i / rowSize\n            val colIndex = i % rowSize\n\
    \            val rowValue = rows(i)\n            val colValue = cols(i)\n    \
    \        if (rowValue == x) {\n                row.clear()\n                row.add(rowValue)\n\
    \                col.clear()\n                col.add(colValue)\n            \
    \    result.add(Tuple2(rowIndex, colIndex))\n                i += rowSize\n  \
    \          } else if (colValue == x) {\n                row.clear()\n        \
    \        row.add(rowValue)\n                col.clear()\n                col.add(colValue)\n\
    \                result.add(Tuple2(rowIndex, colIndex))\n                i +=\
    \ rowSize\n            } else {\n                row.clear()\n               \
    \ row.add(rowValue)\n                col.clear()\n                col.add(colValue)\n\
    \                result.add(Tuple2(rowIndex, colIndex))\n                i +=\
    \ rowSize\n            }\n        }\n        result.sortBy(_._1)\n        result.sortBy(_._2,\
    \ false)\n        return result.toList", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        for (i <- 0 until rows) {\n            for (j <- 0 until cols)\
    \ {\n                val index = i * cols + j\n                if (lst(index).contains(x))\
    \ {\n                    result += ((i, j))\n                }\n            }\n\
    \        }\n        result.sortBy(_._1).reverse.sortBy(_._2).reverse", "     \
    \   val rows = lst.map(_.length)\n        val cols = lst(0).length\n        val\
    \ result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        val row = new\
    \ mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until rows) {\n            row.append(i)\n            for(j\
    \ <- 0 until cols) {\n                col.append(j)\n                val index\
    \ = row.toList.zip(col.toList).filter(_._1 == i).map(_._2).max\n             \
    \   val rowIndex = row.indexOf(index)\n                val colIndex = col.indexOf(index)\n\
    \                val tuple = rowIndex -> colIndex\n                result.add(tuple)\n\
    \                row.remove(rowIndex)\n                col.remove(colIndex)\n\
    \            }\n        }\n        result.sortBy(_._1).reverse", "        val\
    \ rows = lst.map(_.length)\n        val cols = lst(0).length\n        val result\
    \ = new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        for (i <- 0 until rows)\
    \ {\n            val row = lst(i)\n            val rowResult = row.zipWithIndex.filter(_._1\
    \ == x).map(_._2)\n            val rowResultSorted = rowResult.sortBy(-_._1)\n\
    \            val rowResultSortedReversed = rowResultSorted.reverse\n         \
    \   val colResult = rowResultSortedReversed.zipWithIndex.filter(_._1 == 0).map(_._2)\n\
    \            val colResultSorted = colResult.sortBy(-_._1)\n            val colResultSortedReversed\
    \ = colResultSorted.reverse\n            val tuple = rowResultSortedReversed.zip(colResultSortedReversed)\n\
    \            result.add(tuple)\n        }\n        result.sortBy(-_._1)", "  \
    \      val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        val rowIndex\
    \ = new mutable.ArrayBuffer[Long]()\n        val colIndex = new mutable.ArrayBuffer[Long]()\n\
    \        var row = 0\n        var col = 0\n        while(row < rows) {\n     \
    \       rowIndex += row\n            while(col < cols) {\n                colIndex\
    \ += col\n                if(lst(row)(col) == x) {\n                    result.append((rowIndex.toInt,\
    \ colIndex.toInt))\n                }\n                col += 1\n            }\n\
    \            row += 1\n            col = 0\n        }\n        result.sortBy(_._1)\n\
    \        result.sortBy(_._2)\n        result.reverse", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        var i = 0\n        while (i < rows) {\n            var j =\
    \ 0\n            while (j < cols) {\n                if (lst(i)(j) == x) {\n \
    \                   result.add(Tuple2(i, j))\n                }\n            \
    \    j += 1\n            }\n            i += 1\n        }\n        result.sortBy(_._1)\n\
    \        result.sortBy(_._2, descending = true)\n        return result.toList",
  "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        for (i <-\
    \ 0 until rows) {\n            for (j <- 0 until cols) {\n                if (lst(i)(j)\
    \ == x) {\n                    result.append((i, j))\n                }\n    \
    \        }\n        }\n        result.sortBy(_._1).reverse", "        val rowList\
    \ = lst.map(row => row.zipWithIndex.filter(_._1 == x).map(_._2)).toList\n    \
    \    val rowListSorted = rowList.sortBy(row => row._2)\n        val columnList\
    \ = rowListSorted.map(row => row.zipWithIndex.filter(_._2 == x).map(_._1)).toList\n\
    \        val columnListSorted = columnList.sortBy(column => column._2)\n     \
    \   val coordinates = columnListSorted.map(column => column._1._1 -> column._1._2)\n\
    \        val coordinatesSorted = coordinates.sortBy(coordinate => coordinate._1)\n\
    \        coordinatesSorted.map(coordinate => (coordinate._1, coordinate._2))",
  "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        for (i <-\
    \ 0 until rows) {\n            val row = lst(i)\n            val colIndex = row.indexOf(x)\n\
    \            if (colIndex >= 0) {\n                val colTuple = Tuple2(i, colIndex)\n\
    \                result.+=( colTuple )\n            }\n        }\n        result.sortBy(_._1)\n\
    \        result.sortBy(_._2, descending = true)\n        result.toList", "   \
    \     val rows = lst.map(_.length)\n        val cols = lst(0).length\n       \
    \ val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        var row =\
    \ 0\n        var col = 0\n        while(row < rows && col < cols) {\n        \
    \    val value = lst(row)(col)\n            if(value == x) {\n               \
    \ result.append((row, col))\n                row += 1\n                col +=\
    \ 1\n            } else if(value < x) {\n                row += 1\n          \
    \  } else {\n                col += 1\n            }\n        }\n        result.sortBy(_._1).reverse.sortBy(_._2).reverse\n\
    \        return result.toList", "        val m = lst.size\n        val n = lst(0).size\n\
    \        val lst1 = lst.map(x => x.map(y => (y, x)))\n        val lst2 = lst1.map(x\
    \ => x.sortBy(_._1))\n        val lst3 = lst2.map(x => x.sortBy(_._2).reverse)\n\
    \        val lst4 = lst3.map(x => x.filter(y => y._1 == x))\n        val lst5\
    \ = lst4.map(x => x.map(y => (y._2, y._1)))\n        val lst6 = lst5.map(x =>\
    \ x.sortBy(_._1).reverse)\n        val lst7 = lst6.map(x => x.filter(y => y._1\
    \ == x))\n        val lst8 = lst7.map(x => x.map(y => (y._2, y._1)))\n       \
    \ val lst9 = lst8.map(x => x.sortBy(_._1).reverse)\n        val lst10 = lst9.map(x\
    \ => x.filter(y => y._1 == x))\n        val lst11 = lst10.map(x => x.map(y =>\
    \ (y._2, y._1)))\n        val lst12 = lst11.map(x => x.sortBy(_._1).reverse)\n\
    \        val lst13 = lst12.map(x => x.filter(y => y._1 == x))\n        val lst14\
    \ = lst13.map(x => x.map(y => (y._2, y._1)))\n        val lst15 = lst14.map(x\
    \ => x.sortBy(_._1).reverse)\n        val lst16 = lst15.map(x => x.filter(y =>\
    \ y._1 == x))\n        val lst17 = lst16.map(x => x.map(y => (y._2, y._1)))\n\
    \        val lst18 = lst17.map(x => x.sortBy(_._1).reverse)\n        val lst19\
    \ = lst18.map(x => x.filter(y => y._1 == x))\n        val lst20 = lst19.map(x\
    \ => x.map(y => (y._2, y._1)))\n        val lst21 = lst20.map(x => x.sortBy(_._1).reverse)\n\
    \        val lst22 = lst21.map(x => x.filter(y => y._1 == x))\n        val lst23\
    \ = lst22.map(x => x.map(y => (y._2, y._1)))\n        val lst24 = lst23.map(x\
    \ => x.sortBy(_._1).reverse)\n        val lst25 = lst24.map(x => x.filter(y =>\
    \ y._1 == x))\n        val lst26 = lst25.map(x => x.map(y => (y._2, y._1)))\n\
    \        val lst", "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n\
    \        val result = new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        val\
    \ row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        var i = 0\n        while (i < rows.length) {\n            val row = lst(i).zipWithIndex.filter(_._1\
    \ == x).map(_._2)\n            val col = lst(i).zipWithIndex.filter(_._1 == x).map(_._2)\n\
    \            val row1 = row.sortBy(_._1).reverse\n            val col1 = col.sortBy(_._2).reverse\n\
    \            val row2 = row1.sortBy(_._2).reverse\n            val col2 = col1.sortBy(_._1).reverse\n\
    \            val row3 = row2.sortBy(_._1).reverse\n            val col3 = col2.sortBy(_._2).reverse\n\
    \            val row4 = row3.sortBy(_._1).reverse\n            val col4 = col3.sortBy(_._2).reverse\n\
    \            val row5 = row4.sortBy(_._1).reverse\n            val col5 = col4.sortBy(_._2).reverse\n\
    \            val row6 = row5.sortBy(_._1).reverse\n            val col6 = col5.sortBy(_._2).reverse\n\
    \            val row7 = row6.sortBy(_._1).reverse\n            val col7 = col6.sortBy(_._2).reverse\n\
    \            val row8 = row7.sortBy(_._1).reverse\n            val col8 = col7.sortBy(_._2).reverse\n\
    \            val row9 = row8.sortBy(_._1).reverse\n            val col9 = col8.sortBy(_._2).reverse\n\
    \            val row10 = row9.sortBy(_._1).reverse\n            val col10 = col9.sortBy(_._2).reverse\n\
    \            val row11 = row10.sortBy(_._1).reverse\n            val col11 = col10.sortBy(_._2).reverse\n\
    \            val row12 = row11.sortBy(_._1).reverse\n            val col12 = col11.sortBy(_._2).reverse\n\
    \            val row13 = row12.sortBy(_._1).reverse\n            val col13 = col12.sortBy(_._2).reverse\n\
    \            val row14 = row13.sortBy(_._1).reverse\n            val col14 = col13.sortBy(_._2).reverse\n\
    \            val row15 = row14.sortBy(_._1).reverse\n            val col15 = col14.sortBy(_._2).reverse\n\
    \            val row16 = row15.sortBy(_._1).reverse\n", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        for (i <- 0 until rows) {\n            val row = lst(i)\n\
    \            val cols = lst(0).length\n            for (j <- 0 until cols) {\n\
    \                val coord = i -> j\n                val value = row(i)(j)\n \
    \               if (value == x) {\n                    result.add(coord)\n   \
    \             }\n            }\n        }\n        result.sortBy(_._1).reverse",
  "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        val row\
    \ = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        var i = 0\n        while (i < rows.length) {\n            val row = lst(i).zipWithIndex.filter(_._1\
    \ == x).map(x => x._2).sortBy(x => x).reverse\n            row.foreach(x => row.updated(x,\
    \ row(i)))\n            val col = lst(i).zipWithIndex.filter(_._1 == x).map(x\
    \ => x._2).sortBy(x => x).reverse\n            col.foreach(x => col.updated(x,\
    \ col(i)))\n            val row1 = row.map(x => x._2)\n            val col1 =\
    \ col.map(x => x._2)\n            val row2 = row.map(x => x._1)\n            val\
    \ col2 = col.map(x => x._1)\n            val row3 = row.map(x => x._1)\n     \
    \       val col3 = col.map(x => x._1)\n            val row4 = row.map(x => x._1)\n\
    \            val col4 = col.map(x => x._1)\n            val row5 = row.map(x =>\
    \ x._1)\n            val col5 = col.map(x => x._1)\n            val row6 = row.map(x\
    \ => x._1)\n            val col6 = col.map(x => x._1)\n            val row7 =\
    \ row.map(x => x._1)\n            val col7 = col.map(x => x._1)\n            val\
    \ row8 = row.map(x => x._1)\n            val col8 = col.map(x => x._1)\n     \
    \       val row9 = row.map(x => x._1)\n            val col9 = col.map(x => x._1)\n\
    \            val row10 = row.map(x => x._1)\n            val col10 = col.map(x\
    \ => x._1)\n            val row11 = row.map(x => x._1)\n            val col11\
    \ = col.map(x => x._1)\n            val row12 = row.map(x => x._1)\n         \
    \   val col12 = col.map(x => x._1)\n            val row13 = row.map(x => x._1)\n\
    \            val col13 = col.map(x => x._1)\n            val row14 = row.map(x\
    \ => x._1)\n            val col14 = col.map(x => x._1)\n            val row15\
    \ = row.map(x => x._1)\n            val col15 = col.map(x => x._", "        val\
    \ rows = lst.map(_.length)\n        val cols = lst(0).length\n        val result\
    \ = new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        for (i <- 0 until rows)\
    \ {\n            for (j <- 0 until cols) {\n                if (lst(i)(j) == x)\
    \ {\n                    result.add(Tuple2(i, j))\n                }\n       \
    \     }\n        }\n        result.sortBy(_._1)\n        result.sortBy(_._2, descending\
    \ = true)\n        result.toList", "        val rows = lst.map(_.length)\n   \
    \     val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        for (i <- 0 until rows) {\n            for (j <- 0 until cols)\
    \ {\n                if (lst(i)(j) == x) {\n                    result.append((i,\
    \ j))\n                }\n            }\n        }\n        result.sortBy(_._1).reverse.sortBy(_._2).reverse",
  "        val m = lst.size\n        val n = lst(0).size\n        val result = new\
    \ mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        var i = 0\n     \
    \   while (i < m) {\n            val row = lst(i).filter(_ != x).sortWith(_ <\
    \ _)\n            val col = lst(i).filter(_ == x).sortWith(_ > _)\n          \
    \  val rows = row.filter(_ != x).sortWith(_ < _)\n            val cols = col.filter(_\
    \ == x).sortWith(_ > _)\n            val row1 = row.filter(_ != x).sortWith(_\
    \ < _)\n            val col1 = col.filter(_ == x).sortWith(_ > _)\n          \
    \  val row2 = row.filter(_ == x).sortWith(_ < _)\n            val col2 = col.filter(_\
    \ != x).sortWith(_ > _)\n            val row3 = row.filter(_ == x).sortWith(_\
    \ < _)\n            val col3 = col.filter(_ == x).sortWith(_ > _)\n          \
    \  val row4 = row.filter(_ != x).sortWith(_ < _)\n            val col4 = col.filter(_\
    \ == x).sortWith(_ > _)\n            val row5 = row.filter(_ == x).sortWith(_\
    \ < _)\n            val col5 = col.filter(_ != x).sortWith(_ > _)\n          \
    \  val row6 = row.filter(_ != x).sortWith(_ < _)\n            val col6 = col.filter(_\
    \ == x).sortWith(_ > _)\n            val row7 = row.filter(_ == x).sortWith(_\
    \ < _)\n            val col7 = col.filter(_ != x).sortWith(_ > _)\n          \
    \  val row8 = row.filter(_ != x).sortWith(_ < _)\n            val col8 = col.filter(_\
    \ == x).sortWith(_ > _)\n            val row9 = row.filter(_ == x).sortWith(_\
    \ < _)\n            val col9 = col.filter(_ != x).sortWith(_ > _)\n          \
    \  val row10 = row.filter(_ != x).sortWith(_ < _)\n            val col10 = col.filter(_\
    \ == x).sortWith(_ > _)\n            val row11 = row.filter(_ == x).sortWith(_\
    \ < _)\n            val col11 = col.filter(_ != x).sortWith(_ > _)\n         \
    \   val row12 = row.filter(_ != x).sortWith", "        val lst1 = lst.sortBy(x\
    \ => x.toLong)\n        val lst2 = lst1.sortBy(x => -x.toLong)\n        val lst3\
    \ = lst2.sortBy(x => x.toLong)\n        val lst4 = lst3.sortBy(x => -x.toLong)\n\
    \        val lst5 = lst4.sortBy(x => x.toLong)\n        val lst6 = lst5.sortBy(x\
    \ => -x.toLong)\n        val lst7 = lst6.sortBy(x => x.toLong)\n        val lst8\
    \ = lst7.sortBy(x => -x.toLong)\n        val lst9 = lst8.sortBy(x => x.toLong)\n\
    \        val lst10 = lst9.sortBy(x => -x.toLong)\n        val lst11 = lst10.sortBy(x\
    \ => x.toLong)\n        val lst12 = lst11.sortBy(x => -x.toLong)\n        val\
    \ lst13 = lst12.sortBy(x => x.toLong)\n        val lst14 = lst13.sortBy(x => -x.toLong)\n\
    \        val lst15 = lst14.sortBy(x => x.toLong)\n        val lst16 = lst15.sortBy(x\
    \ => -x.toLong)\n        val lst17 = lst16.sortBy(x => x.toLong)\n        val\
    \ lst18 = lst17.sortBy(x => -x.toLong)\n        val lst19 = lst18.sortBy(x =>\
    \ x.toLong)\n        val lst20 = lst19.sortBy(x => -x.toLong)\n        val lst21\
    \ = lst20.sortBy(x => x.toLong)\n        val lst22 = lst21.sortBy(x => -x.toLong)\n\
    \        val lst23 = lst22.sortBy(x => x.toLong)\n        val lst24 = lst23.sortBy(x\
    \ => -x.toLong)\n        val lst25 = lst24.sortBy(x => x.toLong)\n        val\
    \ lst26 = lst25.sortBy(x => -x.toLong)\n        val lst27 = lst26.sortBy(x =>\
    \ x.toLong)\n        val lst28 = lst27.sortBy(x => -x.toLong)\n        val lst29\
    \ = lst28.sortBy(x => x.toLong)\n        val lst30 = lst29.sortBy(x => -x.toLong)\n\
    \        val lst31 = lst30.sortBy(x => x.toLong)\n        val lst32 = lst31.sortBy(x\
    \ => -x.", "        val rows = lst.map(_.size)\n        val cols = lst(0).size\n\
    \        val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        val\
    \ row = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < rows.size) {\n            rows += lst(i).head\n\
    \            col ++= lst(i).tail\n            i += 1\n        }\n        val rows\
    \ = rows.toSeq\n        val cols = cols.toSeq\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        var j = 0\n      \
    \  while (j < cols.size) {\n            cols += lst(0).head\n            row ++=\
    \ lst(0).tail\n            j += 1\n        }\n        val row = row.toSeq\n  \
    \      val col = col.toSeq\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        var k = 0\n      \
    \  while (k < row.size) {\n            rows += lst(0).head\n            col ++=\
    \ lst(0).tail\n            k += 1\n        }\n        val rows = rows.toSeq\n\
    \        val cols = cols.toSeq\n        var i = 0\n        while (i < rows.size)\
    \ {\n            val row = lst(i).head\n            val col = lst(i).tail\n  \
    \          val rows = new mutable.ListBuffer[Long]()\n            val cols = new\
    \ mutable.ListBuffer[Long]()\n            var j = 0\n            while (j < cols.size)\
    \ {\n                val col = lst(0).head\n                val row = lst(0).tail\n\
    \                val rows = new mutable.ListBuffer[Long]()\n                val\
    \ cols = new mutable.ListBuffer[Long]()\n                var k = 0\n         \
    \       while (k < row.size) {\n                    rows += lst(0).head\n    \
    \                col ++= lst(0).tail\n                    k += 1\n           \
    \     }\n                val rows = rows.toSeq\n                val cols = cols.toSeq\n\
    \                var k = 0\n                while (k < row.size) {\n         \
    \           rows += lst(0).head\n                    col ++= lst(0).tail\n   \
    \                 k += 1\n                }\n                val rows = rows.toSeq\n\
    \                val cols = cols.toSeq\n                val row = new mutable.ListBuffer[Long]()\n\
    \                val col = new mutable.ListBuffer", "        val lst2 = lst.map(_.toList)\n\
    \        val lst3 = lst2.map(x => x.filter(_ == x))\n        val lst4 = lst3.map(x\
    \ => x.sortWith(_ < _))\n        val lst5 = lst4.map(x => x.sortWith(_ < _))\n\
    \        val lst6 = lst5.map(x => x.sortWith(_ < _))\n        val lst7 = lst6.map(x\
    \ => x.sortWith(_ < _))\n        val lst8 = lst7.map(x => x.sortWith(_ < _))\n\
    \        val lst9 = lst8.map(x => x.sortWith(_ < _))\n        val lst10 = lst9.map(x\
    \ => x.sortWith(_ < _))\n        val lst11 = lst10.map(x => x.sortWith(_ < _))\n\
    \        val lst12 = lst11.map(x => x.sortWith(_ < _))\n        val lst13 = lst12.map(x\
    \ => x.sortWith(_ < _))\n        val lst14 = lst13.map(x => x.sortWith(_ < _))\n\
    \        val lst15 = lst14.map(x => x.sortWith(_ < _))\n        val lst16 = lst15.map(x\
    \ => x.sortWith(_ < _))\n        val lst17 = lst16.map(x => x.sortWith(_ < _))\n\
    \        val lst18 = lst17.map(x => x.sortWith(_ < _))\n        val lst19 = lst18.map(x\
    \ => x.sortWith(_ < _))\n        val lst20 = lst19.map(x => x.sortWith(_ < _))\n\
    \        val lst21 = lst20.map(x => x.sortWith(_ < _))\n        val lst22 = lst21.map(x\
    \ => x.sortWith(_ < _))\n        val lst23 = lst22.map(x => x.sortWith(_ < _))\n\
    \        val lst24 = lst23.map(x => x.sortWith(_ < _))\n        val lst25 = lst24.map(x\
    \ => x.sortWith(_ < _))\n        val lst26 = lst25.map(x => x.sortWith(_ < _))\n\
    \        val lst27 = lst26.map(x => x.sortWith(_ < _))\n        val lst28 = lst27.map(x\
    \ => x.sortWith(_ < _))\n        val lst29 = lst28.map(x => x.sortWith(_ < _))\n\
    \        val lst30 = lst29.map(x => x.sortWith(_ < _))\n        val lst31 = lst30.map(x ",
  "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        var row\
    \ = 0\n        var col = 0\n        while(row < rows && col < cols) {\n      \
    \      val left = lst(row)\n            val right = lst(row + 1)\n           \
    \ val mid = lst(row + 1 + rows - 1)\n            val midLeft = lst(row + 1 + rows\
    \ - 2)\n            val midRight = lst(row + 1 + rows - 3)\n            val midMidLeft\
    \ = lst(row + 1 + rows - 4)\n            val midMidRight = lst(row + 1 + rows\
    \ - 5)\n            val midMidMidLeft = lst(row + 1 + rows - 6)\n            val\
    \ midMidMidRight = lst(row + 1 + rows - 7)\n            val midMidMidMidLeft =\
    \ lst(row + 1 + rows - 8)\n            val midMidMidRight = lst(row + 1 + rows\
    \ - 9)\n            val midMidMidMidLeft = lst(row + 1 + rows - 10)\n        \
    \    val midMidMidRight = lst(row + 1 + rows - 11)\n            val midMidMidMidLeft\
    \ = lst(row + 1 + rows - 12)\n            val midMidMidRight = lst(row + 1 + rows\
    \ - 13)\n            val midMidMidMidLeft = lst(row + 1 + rows - 14)\n       \
    \     val midMidMidRight = lst(row + 1 + rows - 15)\n            val midMidMidMidLeft\
    \ = lst(row + 1 + rows - 16)\n            val midMidMidRight = lst(row + 1 + rows\
    \ - 17)\n            val midMidMidMidLeft = lst(row + 1 + rows - 18)\n       \
    \     val midMidMidRight = lst(row + 1 + rows - 19)\n            val midMidMidMidLeft\
    \ = lst(row + 1 + rows - 20)\n            val midMidMidRight = lst(row + 1 + rows\
    \ - 21)\n            val midMidMidMidLeft = lst(row + 1 + rows - 22)\n       \
    \     val midMidMidRight = lst(row + 1 + rows - 23)\n            val midMidMidMidLeft\
    \ = lst(row + 1 + rows - 24)\n            val midMidMidRight = lst(row + 1 + rows\
    \ - 25)\n            val midMidMidMidLeft = lst(row + 1 + rows - 26)\n       \
    \     val midMidMidRight = lst(row + 1 + rows - 27)\n            val midMidMidMidLeft\
    \ = lst(row + 1 + rows - 28)\n            val midMidMid", "        val rows =\
    \ lst.map(_.length)\n        val cols = lst(0).length\n        val result = new\
    \ mutable.ListBuffer[Tuple2[Long, Long]]()\n        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val rows = lst.map(_.length)\n    \
    \    val cols = lst(0).length\n        val rows = lst.map(_.length)\n        val\
    \ cols = lst(0).length\n        val rows = lst.map(_.length)\n        val cols\
    \ = lst(0).length\n        val rows = lst.map(_.length)\n        val cols = lst(0).length\n\
    \        val rows = lst.map(_.length)\n        val cols = lst(0).length\n    \
    \    val rows = lst.map(_.length)\n        val cols = lst(0).length\n        val\
    \ rows = lst.map(_.length)\n        val cols = lst(0).length\n        val rows\
    \ = lst.map(_.length)\n        val cols = lst(0).length\n        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val rows = lst.map(_.length)\n    \
    \    val cols = lst(0).length\n        val rows = lst.map(_.length)\n        val\
    \ cols = lst(0).length\n        val rows = lst.map(_.length)\n        val cols\
    \ = lst(0).length\n        val rows = lst.map(_.length)\n        val cols = lst(0).length\n\
    \        val rows = lst.map(_.length)\n        val cols = lst(0).length\n    \
    \    val rows = lst.map(_.length)\n        val cols = lst(0).length\n        val\
    \ rows = lst.map(_.length)\n        val cols = lst(0).length\n        val rows\
    \ = lst.map(_.length)\n        val cols = lst(0).length\n        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val rows = lst.map(_.length)\n    \
    \    val cols = lst(0).length\n        val rows = lst.map(_.length)\n        val\
    \ cols = lst(0).length\n        val rows = lst.map(_.length)\n        val cols\
    \ = lst(0).length\n        val rows = lst.map(_.length)\n        val cols = lst(0).length\n\
    \        val rows = lst.map(_.length)\n        val cols = lst(0).length\n    \
    \    val rows = lst.map(_.length)\n        val cols = lst(0).length\n        val\
    \ rows = lst.map(_.length)\n        val cols = lst(0).length\n        val rows\
    \ = lst.map(_.length)\n        val cols = lst(0).length\n        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val rows = lst.map(_.length)\n    \
    \    val cols = lst(0).length\n        val rows = lst.map(_.length)\n        val\
    \ cols = lst(0).length", "        val rowMap = new mutable.HashMap[Long, List[Long]]()\n\
    \        val rowList = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        val\
    \ columnMap = new mutable.HashMap[Long, List[Long]]()\n        val columnList\
    \ = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        lst.foreach(row => {\n\
    \            val rowList = rowMap.getOrElseUpdate(row(0), mutable.ListBuffer.empty)\n\
    \            rowList += row\n            val columnList = columnMap.getOrElseUpdate(row(1),\
    \ mutable.ListBuffer.empty)\n            columnList += row\n        })\n     \
    \   columnList.sortBy(_._2).reverse.foreach(column => {\n            rowList.sortBy(_._1).reverse.foreach(row\
    \ => {\n                val x = row._1 + column._1 * row._2\n                rowList\
    \ += Tuple2(x, x)\n            })\n        })\n        rowList.sortBy(_._1).reverse.foreach(row\
    \ => {\n            val x = row._1 + column._1 * row._2\n            rowList +=\
    \ Tuple2(x, x)\n        })\n        rowList.takeWhile(row => row._1 < x).map(row\
    \ => Tuple2(row._1, row._2))", "        val rows = lst.map(_.length)\n       \
    \ val cols = lst(0).length\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = new mutable.ListBuffer[Long]()\n        val col\
    \ = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val row = new mutable.ListBuffer[Long]",
  "        val lst1 = lst.sortWith((x, y) => x.toLong > y.toLong)\n        val lst2\
    \ = lst1.sortWith((x, y) => y.toLong > x.toLong)\n        val lst3 = lst2.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst4 = lst3.sortWith((x, y) => y.toLong\
    \ > x.toLong)\n        val lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst6 = lst5.sortWith((x, y) => y.toLong > x.toLong)\n        val\
    \ lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n        val lst8 = lst7.sortWith((x,\
    \ y) => y.toLong > x.toLong)\n        val lst9 = lst8.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst10 = lst9.sortWith((x, y) => y.toLong > x.toLong)\n\
    \        val lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst12 = lst11.sortWith((x, y) => y.toLong > x.toLong)\n        val lst13 = lst12.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst14 = lst13.sortWith((x, y) => y.toLong\
    \ > x.toLong)\n        val lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst16 = lst15.sortWith((x, y) => y.toLong > x.toLong)\n        val\
    \ lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n        val lst18 = lst17.sortWith((x,\
    \ y) => y.toLong > x.toLong)\n        val lst19 = lst18.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst20 = lst19.sortWith((x, y) => y.toLong > x.toLong)\n\
    \        val lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst22 = lst21.sortWith((x, y) => y.toLong > x.toLong)\n        val lst23 = lst22.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst24 = lst23.sortWith((x, y) => y.toLong\
    \ > x.toLong)\n        val lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)",
  "        val rowList = mutable.ArrayBuffer.empty[Tuple2[Long, Long]]\n        val\
    \ columnList = mutable.ArrayBuffer.empty[Long]\n        lst.foreach(row => {\n\
    \            val rowList = rowList :+ row\n            row.foreach(col => {\n\
    \                columnList += col\n            })\n        })\n        columnList.sortWith((x,\
    \ y) => y.compareTo(x))\n        columnList.reverse.sortWith((x, y) => y.compareTo(x))\n\
    \        columnList.reverse.foreach(col => {\n            rowList.sortWith((x,\
    \ y) => y.compareTo(x))\n            rowList.reverse.foreach(row => {\n      \
    \          rowList.sortWith((x, y) => y.compareTo(x))\n                rowList.reverse.foreach(row2\
    \ => {\n                    rowList.sortWith((x, y) => y.compareTo(x))\n     \
    \               rowList.reverse.foreach(row3 => {\n                        rowList.sortWith((x,\
    \ y) => y.compareTo(x))\n                        rowList.reverse.foreach(row4\
    \ => {\n                            rowList.sortWith((x, y) => y.compareTo(x))\n\
    \                            rowList.reverse.foreach(row5 => {\n             \
    \                   rowList.sortWith((x, y) => y.compareTo(x))\n             \
    \                   rowList.reverse.foreach(row6 => {\n                      \
    \              rowList.sortWith((x, y) => y.compareTo(x))\n                  \
    \                  rowList.reverse.foreach(row7 => {\n                       \
    \                 rowList.sortWith((x, y) => y.compareTo(x))\n               \
    \                         rowList.reverse.foreach(row8 => {\n                \
    \                            rowList.sortWith((x, y) => y.compareTo(x))\n    \
    \                                        rowList.reverse.foreach(row9 => {\n \
    \                                               rowList.sortWith((x, y) => y.compareTo(x))\n\
    \                                                rowList.reverse.foreach(row10\
    \ => {\n                                                    rowList.sortWith((x,\
    \ y) => y.compareTo(x))\n                                                    rowList.reverse.foreach(row11\
    \ => {\n                                                        rowList.sortWith((x,\
    \ y) => y.compareTo(x))\n                                                    \
    \    rowList.reverse.foreach(row12 => {\n                                    \
    \                        rowList.sortWith((x, y) => y.compareTo(x))\n        \
    \                                                    rowList.reverse.foreach(row13\
    \ => {\n                                                                rowList.sortWith((x,\
    \ y) => y.compareTo(x))\n                                                    \
    \            rowList.reverse.foreach(row14 => {\n                            \
    \                                        rowList.sortWith((x, y) => y.compareTo(x))\n\
    \                                                                    rowList.reverse.foreach(row15\
    \ => {\n                                                                     \
    \   rowList.sortWith((x, y) => y.compareTo(x))\n                             \
    \                                           rowList.reverse.foreach(row16 => {\n\
    \                                                                            rowList.sortWith((x,\
    \ y) => y.compareTo(x))\n                                                    \
    \                        rowList.reverse.foreach(row17 => {\n                \
    \                                                                rowList.", " \
    \       val lst1 = lst.sortBy(x => x.indexOf(x))\n        val lst2 = lst1.sortBy(x\
    \ => x.indexOf(x.last))\n        val lst3 = lst2.sortBy(x => x.indexOf(x.last))\n\
    \        val lst4 = lst3.sortBy(x => x.indexOf(x.last))\n        val lst5 = lst4.sortBy(x\
    \ => x.indexOf(x.last))\n        val lst6 = lst5.sortBy(x => x.indexOf(x.last))\n\
    \        val lst7 = lst6.sortBy(x => x.indexOf(x.last))\n        val lst8 = lst7.sortBy(x\
    \ => x.indexOf(x.last))\n        val lst9 = lst8.sortBy(x => x.indexOf(x.last))\n\
    \        val lst10 = lst9.sortBy(x => x.indexOf(x.last))\n        val lst11 =\
    \ lst10.sortBy(x => x.indexOf(x.last))\n        val lst12 = lst11.sortBy(x =>\
    \ x.indexOf(x.last))\n        val lst13 = lst12.sortBy(x => x.indexOf(x.last))\n\
    \        val lst14 = lst13.sortBy(x => x.indexOf(x.last))\n        val lst15 =\
    \ lst14.sortBy(x => x.indexOf(x.last))\n        val lst16 = lst15.sortBy(x =>\
    \ x.indexOf(x.last))\n        val lst17 = lst16.sortBy(x => x.indexOf(x.last))\n\
    \        val lst18 = lst17.sortBy(x => x.indexOf(x.last))\n        val lst19 =\
    \ lst18.sortBy(x => x.indexOf(x.last))\n        val lst20 = lst19.sortBy(x =>\
    \ x.indexOf(x.last))\n        val lst21 = lst20.sortBy(x => x.indexOf(x.last))\n\
    \        val lst22 = lst21.sortBy(x => x.indexOf(x.last))\n        val lst23 =\
    \ lst22.sortBy(x => x.indexOf(x.last))\n        val lst24 = lst23.sortBy(x =>\
    \ x.indexOf(x.last))\n        val lst25 = lst24.sortBy(x => x.indexOf(x.last))\n\
    \        val lst26 = lst25.sortBy(x => x.indexOf(x.last))\n        val lst27 =\
    \ lst26.sortBy(x => x.indexOf(x.last))\n        val lst28 = lst27.sortBy(x =>\
    \ x.indexOf(x.last))\n        val lst29 = lst28.sortBy(x => x.indexOf(x.last))\n\
    \        val lst30 = lst29.sortBy(x => x.indexOf(x.last))\n        val lst31 =\
    \ lst30.sortBy(x => x.indexOf(x.last))", "        val m = lst.size\n        val\
    \ n = lst(0).size\n        val result = new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        while (i < m)\
    \ {\n            while (j < n) {\n                if (lst(i)(j) == x) {\n    \
    \                result.add(Tuple2(i, j))\n                    j = 0\n       \
    \             k = 0\n                }\n                j += 1\n            }\n\
    \            i += 1\n            j += 1\n        }\n        result.sortBy(_._1)\n\
    \        result.sortBy(_._2, descending = true)\n        return result.toList",
  "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        var i =\
    \ 0\n        while (i < rows) {\n            var j = 0\n            while (j <\
    \ cols) {\n                if (lst(i)(j) == x) {\n                    result.append((i,\
    \ j))\n                }\n                j += 1\n            }\n            i\
    \ += 1\n        }\n        result.sortBy(_._1).reverse", "        val rowList\
    \ = mutable.ListBuffer[Tuple2[Long, Long]]()\n        val colList = mutable.ListBuffer[Long]()\n\
    \        val rowMap = mutable.Map[Long, List[Long]]()\n        val colMap = mutable.Map[Long,\
    \ Long]()\n        val rowCount = mutable.Map[Long, Long]()\n        val colCount\
    \ = mutable.Map[Long, Long]()\n        val rowMap = mutable.Map[Long, List[Long]]()\n\
    \        val colMap = mutable.Map[Long, Long]()\n        val rowCount = mutable.Map[Long,\
    \ Long]()\n        val colCount = mutable.Map[Long, Long]()\n        val rowMap\
    \ = mutable.Map[Long, List[Long]]()\n        val colMap = mutable.Map[Long, Long]()\n\
    \        val rowCount = mutable.Map[Long, Long]()\n        val colCount = mutable.Map[Long,\
    \ Long]()\n        val rowMap = mutable.Map[Long, List[Long]]()\n        val colMap\
    \ = mutable.Map[Long, Long]()\n        val rowCount = mutable.Map[Long, Long]()\n\
    \        val colCount = mutable.Map[Long, Long]()\n        val rowMap = mutable.Map[Long,\
    \ List[Long]]()\n        val colMap = mutable.Map[Long, Long]()\n        val rowCount\
    \ = mutable.Map[Long, Long]()\n        val colCount = mutable.Map[Long, Long]()\n\
    \        val rowMap = mutable.Map[Long, List[Long]]()\n        val colMap = mutable.Map[Long,\
    \ Long]()\n        val rowCount = mutable.Map[Long, Long]()\n        val colCount\
    \ = mutable.Map[Long, Long]()\n        val rowMap = mutable.Map[Long, List[Long]]()\n\
    \        val colMap = mutable.Map[Long, Long]()\n        val rowCount = mutable.Map[Long,\
    \ Long]()\n        val colCount = mutable.Map[Long, Long]()\n        val rowMap\
    \ = mutable.Map[Long, List[Long]]()\n        val colMap = mutable.Map[Long, Long]()\n\
    \        val rowCount = mutable.Map[Long, Long]()\n        val colCount = mutable.Map[Long,\
    \ Long]()\n        val rowMap = mutable.Map[Long, List[Long]]()\n        val colMap\
    \ = mutable.Map[Long, Long]()\n        val rowCount = mutable.Map[Long, Long]()\n\
    \        val colCount = mutable.Map[Long, Long]()\n        val rowMap = mut",
  "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        var row\
    \ = 0\n        var col = 0\n        while (row < rows && col < cols) {\n     \
    \       if (lst(row)(col) == x) {\n                result.+=(Tuple2(row, col))\n\
    \            }\n            row += 1\n            col += 1\n        }\n      \
    \  result.sortBy(_._1)\n        result.sortBy(_._2, descending = true)\n     \
    \   return result.toList", "        val row: List[Long] = lst.map(row => row(x)).sortWith(_\
    \ < _)\n        val col: List[Long] = lst.map(row => row.map(x => x(x)).sortWith(_\
    \ < _)).flatten\n        val coords: List[Tuple2[Long, Long]] = row.zip(col).sortWith(_._1\
    \ < _._1)\n        coords.map(coord => (coord._1, coord._2))", "        val lst2\
    \ = lst.sortWith(_.compare(x, _) < 0)\n        val lst3 = lst2.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst4 = lst3.sortWith(_.compare(x, _) < 0)\n        val\
    \ lst5 = lst4.sortWith(_.compare(x, _) > 0)\n        val lst6 = lst5.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst7 = lst6.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst8 = lst7.sortWith(_.compare(x, _) < 0)\n        val lst9 = lst8.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst10 = lst9.sortWith(_.compare(x, _) < 0)\n        val\
    \ lst11 = lst10.sortWith(_.compare(x, _) > 0)\n        val lst12 = lst11.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst13 = lst12.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst14 = lst13.sortWith(_.compare(x, _) < 0)\n        val lst15 = lst14.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst16 = lst15.sortWith(_.compare(x, _) < 0)\n        val\
    \ lst17 = lst16.sortWith(_.compare(x, _) > 0)\n        val lst18 = lst17.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst19 = lst18.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst20 = lst19.sortWith(_.compare(x, _) < 0)\n        val lst21 = lst20.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst22 = lst21.sortWith(_.compare(x, _) < 0)\n        val\
    \ lst23 = lst22.sortWith(_.compare(x, _) > 0)\n        val lst24 = lst23.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst25 = lst24.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst26 = lst25.sortWith(_.compare(x, _) < 0)\n        val lst27 = lst26.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst28 = lst27.sortWith(_.compare(x, _) < 0)\n        val\
    \ lst29 = lst28.sortWith(_.compare(x, _) > 0)\n        val lst30 = lst29.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst31 = lst30.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst32 = lst31.sortWith(_.compare(x, ", "        val lst2 = lst.map(_.toList)\n\
    \        val lst3 = lst2.map(x => x.filter(_ == x))\n        val lst4 = lst3.map(x\
    \ => x.sortWith(_ < _))\n        val lst5 = lst4.map(x => x.sortWith(_ < _))\n\
    \        val lst6 = lst5.map(x => x.sortWith(_ < _))\n        val lst7 = lst6.map(x\
    \ => x.sortWith(_ < _))\n        val lst8 = lst7.map(x => x.sortWith(_ < _))\n\
    \        val lst9 = lst8.map(x => x.sortWith(_ < _))\n        val lst10 = lst9.map(x\
    \ => x.sortWith(_ < _))\n        val lst11 = lst10.map(x => x.sortWith(_ < _))\n\
    \        val lst12 = lst11.map(x => x.sortWith(_ < _))\n        val lst13 = lst12.map(x\
    \ => x.sortWith(_ < _))\n        val lst14 = lst13.map(x => x.sortWith(_ < _))\n\
    \        val lst15 = lst14.map(x => x.sortWith(_ < _))\n        val lst16 = lst15.map(x\
    \ => x.sortWith(_ < _))\n        val lst17 = lst16.map(x => x.sortWith(_ < _))\n\
    \        val lst18 = lst17.map(x => x.sortWith(_ < _))\n        val lst19 = lst18.map(x\
    \ => x.sortWith(_ < _))\n        val lst20 = lst19.map(x => x.sortWith(_ < _))\n\
    \        val lst21 = lst20.map(x => x.sortWith(_ < _))\n        val lst22 = lst21.map(x\
    \ => x.sortWith(_ < _))\n        val lst23 = lst22.map(x => x.sortWith(_ < _))\n\
    \        val lst24 = lst23.map(x => x.sortWith(_ < _))\n        val lst25 = lst24.map(x\
    \ => x.sortWith(_ < _))\n        val lst26 = lst25.map(x => x.sortWith(_ < _))\n\
    \        val lst27 = lst26.map(x => x.sortWith(_ < _))\n        val lst28 = lst27.map(x\
    \ => x.sortWith(_ < _))\n        val lst29 = lst28.map(x => x.sortWith(_ < _))\n\
    \        val lst30 = lst29.map(x => x.sortWith(_ < _))\n        val lst31 = lst30.map(x ",
  "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        var i =\
    \ 0\n        while (i < rows) {\n            val row = lst(i)\n            val\
    \ rowIndex = i\n            val colIndex = i\n            while (colIndex < cols)\
    \ {\n                if (rowIndex(colIndex) == x) {\n                    result.append((rowIndex,\
    \ colIndex))\n                }\n                colIndex += 1\n            }\n\
    \            i += 1\n        }\n        result.sortBy(_._1).reverse", "      \
    \  val m = lst.size\n        val n = lst(0).size\n        val r = new Array[Tuple2[Long,\
    \ Long]](m)\n        var i = 0\n        while (i < m) {\n            var j = 0\n\
    \            while (j < n) {\n                if (lst(i)(j) == x) {\n        \
    \            r(i) = Tuple2(i, j);\n                }\n                j++;\n \
    \           }\n            i++;\n        }\n        r.sortWith((x, y) => x._1\
    \ < y._1)\n        r.sortWith((x, y) => y._1 < x._1)\n        r.sortWith((x, y)\
    \ => x._2 < y._2)\n        r.sortWith((x, y) => y._2 < x._2)\n        r", "  \
    \      val lst2 = lst.map(_.toList)\n        val lst3 = lst2.map(x => x.filter(_\
    \ == x))\n        val lst4 = lst3.map(x => x.sortWith(_ < _))\n        val lst5\
    \ = lst4.map(x => x.sortWith(_ < _))\n        val lst6 = lst5.map(x => x.sortWith(_\
    \ < _))\n        val lst7 = lst6.map(x => x.sortWith(_ < _))\n        val lst8\
    \ = lst7.map(x => x.sortWith(_ < _))\n        val lst9 = lst8.map(x => x.sortWith(_\
    \ < _))\n        val lst10 = lst9.map(x => x.sortWith(_ < _))\n        val lst11\
    \ = lst10.map(x => x.sortWith(_ < _))\n        val lst12 = lst11.map(x => x.sortWith(_\
    \ < _))\n        val lst13 = lst12.map(x => x.sortWith(_ < _))\n        val lst14\
    \ = lst13.map(x => x.sortWith(_ < _))\n        val lst15 = lst14.map(x => x.sortWith(_\
    \ < _))\n        val lst16 = lst15.map(x => x.sortWith(_ < _))\n        val lst17\
    \ = lst16.map(x => x.sortWith(_ < _))\n        val lst18 = lst17.map(x => x.sortWith(_\
    \ < _))\n        val lst19 = lst18.map(x => x.sortWith(_ < _))\n        val lst20\
    \ = lst19.map(x => x.sortWith(_ < _))\n        val lst21 = lst20.map(x => x.sortWith(_\
    \ < _))\n        val lst22 = lst21.map(x => x.sortWith(_ < _))\n        val lst23\
    \ = lst22.map(x => x.sortWith(_ < _))\n        val lst24 = lst23.map(x => x.sortWith(_\
    \ < _))\n        val lst25 = lst24.map(x => x.sortWith(_ < _))\n        val lst26\
    \ = lst25.map(x => x.sortWith(_ < _))\n        val lst27 = lst26.map(x => x.sortWith(_\
    \ < _))\n        val lst28 = lst27.map(x => x.sortWith(_ < _))\n        val lst29\
    \ = lst28.map(x => x.sortWith(_ < _))\n        val lst30 = lst29.map(x => x.sortWith(_\
    \ < _))\n        val lst31 = lst30.map(x ", "        val m = lst.size\n      \
    \  val n = lst(0).size\n        val lst2 = lst.map(x => x.map(y => y))\n     \
    \   val lst3 = lst2.map(x => x.map(y => y))\n        val lst4 = lst3.map(x =>\
    \ x.map(y => y))\n        val lst5 = lst4.map(x => x.map(y => y))\n        val\
    \ lst6 = lst5.map(x => x.map(y => y))\n        val lst7 = lst6.map(x => x.map(y\
    \ => y))\n        val lst8 = lst7.map(x => x.map(y => y))\n        val lst9 =\
    \ lst8.map(x => x.map(y => y))\n        val lst10 = lst9.map(x => x.map(y => y))\n\
    \        val lst11 = lst10.map(x => x.map(y => y))\n        val lst12 = lst11.map(x\
    \ => x.map(y => y))\n        val lst13 = lst12.map(x => x.map(y => y))\n     \
    \   val lst14 = lst13.map(x => x.map(y => y))\n        val lst15 = lst14.map(x\
    \ => x.map(y => y))\n        val lst16 = lst15.map(x => x.map(y => y))\n     \
    \   val lst17 = lst16.map(x => x.map(y => y))\n        val lst18 = lst17.map(x\
    \ => x.map(y => y))\n        val lst19 = lst18.map(x => x.map(y => y))\n     \
    \   val lst20 = lst19.map(x => x.map(y => y))\n        val lst21 = lst20.map(x\
    \ => x.map(y => y))\n        val lst22 = lst21.map(x => x.map(y => y))\n     \
    \   val lst23 = lst22.map(x => x.map(y => y))\n        val lst24 = lst23.map(x\
    \ => x.map(y => y))\n        val lst25 = lst24.map(x => x.map(y => y))\n     \
    \   val lst26 = lst25.map(x => x.map(y => y))\n        val lst27 = lst26.map(x\
    \ => x.map(y => y))\n        val lst28 = lst27.map(x => x.map(y => y))\n     \
    \   val lst29 = lst28.map(x => x.map(y => y))\n        val lst30 = lst29.map(x\
    \ => x.map(y => y))\n        val lst31 = lst30.map(x => x.map(y => y))\n     \
    \   val lst32 = lst31.map(x => x.map(y => y))\n        val lst33 = lst32.map(x\
    \ => x.map(y ", "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n\
    \        val result = new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        val\
    \ row = 0\n        val col = 0\n        while(row < rows && col < cols) {\n  \
    \          val row1 = row + 1\n            val col1 = col + 1\n            val\
    \ row2 = row + rows\n            val col2 = col + cols\n            val row3 =\
    \ row1 + rows\n            val col3 = col1 + cols\n            val row4 = row2\
    \ + rows\n            val col4 = col2 + cols\n            val row5 = row3 + rows\n\
    \            val col5 = col3 + cols\n            val row6 = row4 + rows\n    \
    \        val col6 = col4 + cols\n            val row7 = row5 + rows\n        \
    \    val col7 = col5 + cols\n            val row8 = row6 + rows\n            val\
    \ col8 = col6 + cols\n            val row9 = row7 + rows\n            val col9\
    \ = col7 + cols\n            val row10 = row8 + rows\n            val col10 =\
    \ col8 + cols\n            val row11 = row9 + rows\n            val col11 = col9\
    \ + cols\n            val row12 = row10 + rows\n            val col12 = col10\
    \ + cols\n            val row13 = row11 + rows\n            val col13 = col11\
    \ + cols\n            val row14 = row12 + rows\n            val col14 = col12\
    \ + cols\n            val row15 = row13 + rows\n            val col15 = col13\
    \ + cols\n            val row16 = row14 + rows\n            val col16 = col14\
    \ + cols\n            val row17 = row15 + rows\n            val col17 = col15\
    \ + cols\n            val row18 = row16 + rows\n            val col18 = col16\
    \ + cols\n            val row19 = row17 + rows\n            val col19 = col17\
    \ + cols\n            val row20 = row18 + rows\n            val col20 = col18\
    \ + cols\n            val row21 = row19 + rows\n            val col21 = col19\
    \ + cols\n            val row22 = row20 + rows\n            val col22 = col20\
    \ + cols\n            val row23 = row21 + rows\n            val col23 = col21\
    \ + cols\n            val row24 = row22 + rows\n            val col24 = col22\
    \ + cols\n            val row25 = row23 + rows\n            val col25 = col23",
  "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = lst.map(row => row.zipWithIndex.map(x => (x._2, x._1)).toList)\n\
    \        val rowIndex = result.zipWithIndex.filter(x => x._1 == x).map(x => x._2)\n\
    \        val colIndex = result.zipWithIndex.filter(x => x._2 == x).map(x => x._1)\n\
    \        val rowOrder = rowIndex.map(x => rows(x))\n        val colOrder = colIndex.map(x\
    \ => cols(x))\n        val rowOrder2 = rowOrder.sortWith(_.compare(rowOrder(rowOrder.length\
    \ - 1)))\n        val colOrder2 = colOrder.sortWith(_.compare(colOrder[colOrder.length\
    \ - 1]))\n        val result2 = rowOrder2.map(x => colOrder2.map(y => (x, y))).toList\n\
    \        result2.sortWith(_.compare(_.swap))", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = lst.map(row => row.zipWithIndex.filter(x\
    \ => x == x).map(x => (x._2, x._1)).toList)\n        val sortedResult = result.sortWith((x,\
    \ y) => x._1 > y._1)\n        val sortedRows = sortedResult.map(row => row._2.toLong)\n\
    \        val sortedCols = sortedResult.map(row => row._1.toLong)\n        val\
    \ sortedRowsAndCols = sortedResult.map(row => (row._2.toLong, row._1.toLong))\n\
    \        val sortedRowsAndColsAndResult = sortedResult.map(row => (row._2.toLong,\
    \ row._1.toLong, row))\n        val sortedRowsAndColsAndResultAndCols = sortedResult.map(row\
    \ => (row._2.toLong, row._1.toLong, row._1))\n        val sortedRowsAndColsAndResultAndColsAndRows\
    \ = sortedResult.map(row => (row._2.toLong, row._1.toLong, row._2))\n        val\
    \ sortedRowsAndColsAndResultAndColsAndRowsAndCols = sortedResult.map(row => (row._2.toLong,\
    \ row._1.toLong, row._1, row._2))\n        val sortedRowsAndColsAndResultAndColsAndRowsAndColsAndRows\
    \ = sortedResult.map(row => (row._2.toLong, row._1.toLong, row._1, row._2, row._1))\n\
    \        val sortedRowsAndColsAndResultAndColsAndRowsAndColsAndRowsAndCols = sortedResult.map(row\
    \ => (row._2.toLong, row._1.toLong, row._1, row._2, row._1, row._2))\n       \
    \ val sortedRowsAndColsAndResultAndColsAndRowsAndColsAndRowsAndColsAndRows = sortedResult.map(row\
    \ => (row._2.toLong, row._1.toLong, row._1, row._2, row._1, row._2, row._1))\n\
    \        val sortedRowsAndColsAndResultAndColsAndRowsAndColsAndRowsAndColsAndRowsAndCols\
    \ = sortedResult.map(row => (row._2.toLong, row._1.toLong, row._1, row._2, row._1,\
    \ row._2, row._1, row._2))\n        val sortedRowsAndColsAndResultAndColsAndRowsAndColsAndRowsAndColsAndRowsAndColsAndRows\
    \ = sortedResult.map(row => (row._2.toLong, row._1.toLong, row._1, row._2, row",
  "        val lst1 = lst.sortBy(_(0))\n        val lst2 = lst1.sortBy(_(1)) //descending\
    \ order\n        val lst3 = lst2.filter(_(0) != x) // remove x\n        val lst4\
    \ = lst3.sortBy(_(0)) // ascending order\n        lst4.map(_ -> x).map(x => (x,\
    \ 0)).sortBy(_._1).map(x => (x._1, x._2))", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        var row = 0\n        var col = 0\n        while(row < rows\
    \ && col < cols) {\n            val left = lst(row)\n            val right = lst(row\
    \ + 1)\n            val mid = lst(row + 1 + rows - 1)\n            val midLeft\
    \ = lst(row + 1 + rows - 2)\n            val midRight = lst(row + 1 + rows - 1)\n\
    \            val midMidLeft = lst(row + 1 + rows - 3)\n            val midMidRight\
    \ = lst(row + 1 + rows - 2)\n            val midMidMidLeft = lst(row + 1 + rows\
    \ - 4)\n            val midMidMidRight = lst(row + 1 + rows - 3)\n           \
    \ val midMidMidMidLeft = lst(row + 1 + rows - 4)\n            val midMidMidMidRight\
    \ = lst(row + 1 + rows - 4)\n            val midMidMidMidLeftRight = lst(row +\
    \ 1 + rows - 5)\n            val midMidMidLeftLeftRight = lst(row + 1 + rows -\
    \ 6)\n            val midMidMidLeftLeftLeftRight = lst(row + 1 + rows - 7)\n \
    \           val midMidMidLeftLeftLeftLeftRight = lst(row + 1 + rows - 8)\n   \
    \         val midMidMidLeftLeftLeftLeftLeftRight = lst(row + 1 + rows - 9)\n \
    \           val midMidMidLeftLeftLeftLeftLeftLeftRight = lst(row + 1 + rows -\
    \ 10)\n            val midMidMidLeftLeftLeftLeftLeftLeftRight = lst(row + 1 +\
    \ rows - 11)\n            val midMidMidLeftLeftLeftLeftLeftLeftRight = lst(row\
    \ + 1 + rows - 12)\n            val midMidMidLeftLeftLeftLeftLeftLeftRight = lst(row\
    \ + 1 + rows - 13)\n            val midMidMidLeftLeftLeftLeftLeftLeftRight = lst(row\
    \ + 1 + rows - 14)\n            val midMidMidLeftLeftLeftLeftLeftLeftRight = lst(row\
    \ + 1 + rows - 15)\n            val midMidMidLeftLeftLeftLeftLeftLeftRight = lst(row\
    \ + 1 + rows - 16)\n            val midMidMidLeftLeftLeftLeftLeftLeftRight = lst(row\
    \ + 1 + rows - 17)\n            val midMidMidLeftLeftLeftLeftLeftLeftRight = lst(row\
    \ + 1 + rows - 18)\n            val midMidMidLeftLeftLeftLeftLeftLeftRight = lst(row\
    \ + 1 + row", "        val lst2 = lst.map(_.toList)\n        val lst3 = lst2.map(x\
    \ => x.filter(_ != x))\n        val lst4 = lst3.map(x => x.sortBy(_.toLong))\n\
    \        val lst5 = lst4.map(x => x.sortBy(-_.toLong))\n        val lst6 = lst5.map(x\
    \ => x.filter(_ != x))\n        val lst7 = lst6.map(x => x.sortBy(-_.toLong))\n\
    \        val lst8 = lst7.map(x => x.filter(_ != x))\n        val lst9 = lst8.map(x\
    \ => x.sortBy(-_.toLong))\n        val lst10 = lst9.map(x => x.filter(_ != x))\n\
    \        val lst11 = lst10.map(x => x.sortBy(-_.toLong))\n        val lst12 =\
    \ lst11.map(x => x.filter(_ != x))\n        val lst13 = lst12.map(x => x.sortBy(-_.toLong))\n\
    \        val lst14 = lst13.map(x => x.filter(_ != x))\n        val lst15 = lst14.map(x\
    \ => x.sortBy(-_.toLong))\n        val lst16 = lst15.map(x => x.filter(_ != x))\n\
    \        val lst17 = lst16.map(x => x.sortBy(-_.toLong))\n        val lst18 =\
    \ lst17.map(x => x.filter(_ != x))\n        val lst19 = lst18.map(x => x.sortBy(-_.toLong))\n\
    \        val lst20 = lst19.map(x => x.filter(_ != x))\n        val lst21 = lst20.map(x\
    \ => x.sortBy(-_.toLong))\n        val lst22 = lst21.map(x => x.filter(_ != x))\n\
    \        val lst23 = lst22.map(x => x.sortBy(-_.toLong))\n        val lst24 =\
    \ lst23.map(x => x.filter(_ != x))\n        val lst25 = lst24.map(x => x.sortBy(-_.toLong))\n\
    \        val lst26 = lst25.map(x => x.filter(_ != x))\n        val lst27 = lst26.map(x\
    \ => x.sortBy(-_.toLong))\n        val lst28 = lst27.map(x => x.filter(_ != x))\n\
    \        val lst29 = lst28.map(x => x.sortBy(-_.toLong))\n        val lst30 =\
    \ lst29.map(x => x.filter(_ != x))\n        val lst31 = lst30.map(x => x.sortBy(-_.toLong))\n\
    \        val lst", "        val rowList = mutable.ListBuffer[Tuple2[Long, Long]]()\n\
    \        val columnList = mutable.ListBuffer[Long]()\n        val rowCount = lst.size\n\
    \        val columnCount = lst(0).size\n        val rowIndex = 0\n        val\
    \ columnIndex = 0\n        while(rowIndex < rowCount) {\n            val rowElement\
    \ = lst(rowIndex)\n            val columnElement = rowElement(columnIndex)\n \
    \           if(rowElement == List(x)) {\n                rowList += Tuple2(rowIndex,\
    \ columnIndex)\n                columnList += columnElement\n            }\n \
    \           rowIndex += 1\n        }\n        rowList.sortBy(_._1)\n        rowList.sortBy(_._2).reverse\n\
    \        columnList.sortBy(_).reverse\n        columnList.sortBy(_)\n        rowList.map(x\
    \ => Tuple2(x._1, x._2))", "        val row = new mutable.HashMap[Long, Long]()\n\
    \        val col = new mutable.HashMap[Long, Long]()\n        val coord = new\
    \ mutable.HashMap[Long, Long]()\n        val lst2 = lst.map(row => row.map(col\
    \ => (col, row)))\n        lst2.foreach(row => {\n            row.foreach(col\
    \ => {\n                val key = row._1 + col._1\n                val value =\
    \ row._2 + col._2\n                row.foreach(c => {\n                    val\
    \ key = c._1 + col._1\n                    val value = c._2 + col._2\n       \
    \             row.foreach(c => {\n                        val key = c._1 + col._1\n\
    \                        val value = c._2 + col._2\n                        row.foreach(c\
    \ => {\n                            val key = c._1 + col._1\n                \
    \            val value = c._2 + col._2\n                            row.foreach(c\
    \ => {\n                                val key = c._1 + col._1\n            \
    \                    val value = c._2 + col._2\n                             \
    \   row.foreach(c => {\n                                    val key = c._1 + col._1\n\
    \                                    val value = c._2 + col._2\n             \
    \                       row.foreach(c => {\n                                 \
    \       val key = c._1 + col._1\n                                        val value\
    \ = c._2 + col._2\n                                        row.foreach(c => {\n\
    \                                            val key = c._1 + col._1\n       \
    \                                     val value = c._2 + col._2\n            \
    \                                row.foreach(c => {\n                        \
    \                        val key = c._1 + col._1\n                           \
    \                     val value = c._2 + col._2\n                            \
    \                    row.foreach(c => {\n                                    \
    \                val key = c._1 + col._1\n                                   \
    \                 val value = c._2 + col._2\n                                \
    \                    row.foreach(c => {\n                                    \
    \                    val key = c._1 + col._1\n                               \
    \                         val value = c._2 + col._2\n                        \
    \                                row.foreach(c => {\n                        \
    \                                    val key = c._1 + col._1\n               \
    \                                             val value = c._2 + col._2\n    \
    \                                                        row.foreach(c => {\n\
    \                                                                val key = c._1\
    \ + col._1\n                                                                val\
    \ value = c._2 + col._2\n                                                    \
    \            row.foreach(c => {\n                                            \
    \                        val key = c._1 + col._1\n                           \
    \                                         val value = c._2 + col._2\n        \
    \                                                            row.foreach(c =>\
    \ {\n                                                                        val\
    \ key = c._1 + col._1\n                                                      \
    \                  val value = c._2 + col._2\n                               \
    \                                         row.foreach(c => {\n               \
    \                                                             val key = c._1 +\
    \ col._1\n                                                                   \
    \         val value = c._2 + col._2\n                                        \
    \                                    row.foreach(", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = new mutable.ArrayBuffer[Long]()\n        val col\
    \ = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        for (i <- 0 until rows) {\n            val row = lst(i)\n\
    \            val colIndex = row.indexOf(x)\n            val colIndex = colIndex.max(0)\n\
    \            val colIndex = colIndex.min(colIndex.size - 1)\n            val colIndex\
    \ = colIndex.max(0)\n            val colIndex = colIndex.min(colIndex.size - 1)\n\
    \            val colIndex = colIndex.max(0)\n            val colIndex = colIndex.min(colIndex.size\
    \ - 1)\n            val colIndex = colIndex.max(0)\n            val colIndex =\
    \ colIndex.min(colIndex.size - 1)\n            val colIndex = colIndex.max(0)\n\
    \            val colIndex = colIndex.min(colIndex.size - 1)\n            val colIndex\
    \ = colIndex.max(0)\n            val colIndex = colIndex.min(colIndex.size - 1)\n\
    \            val colIndex = colIndex.max(0)\n            val colIndex = colIndex.min(colIndex.size\
    \ - 1)\n            val colIndex = colIndex.max(0)\n            val colIndex =\
    \ colIndex.min(colIndex.size - 1)\n            val colIndex = colIndex.max(0)\n\
    \            val colIndex = colIndex.min(colIndex.size - 1)\n            val colIndex\
    \ = colIndex.max(0)\n            val colIndex = colIndex.min(colIndex.size - 1)\n\
    \            val colIndex = colIndex.max(0)\n            val colIndex = colIndex.min(colIndex.size\
    \ - 1)\n            val colIndex = colIndex.max(0)\n            val colIndex =\
    \ colIndex.min(colIndex.size - 1)\n            val colIndex = colIndex.max(0)\n\
    \            val colIndex = colIndex.min(colIndex.size - 1)\n            val colIndex\
    \ = colIndex.max(0)\n            val colIndex = colIndex.min(colIndex.size - 1)\n\
    \            val colIndex = colIndex.max(0)\n            val colIndex = colIndex.min(colIndex.size\
    \ - 1)\n            val colIndex = colIndex.max(0)\n            val colIndex =\
    \ colIndex.min(colIndex.size - 1)\n            val colIndex = colIndex.max(0)\n\
    \            val colIndex = colIndex.min(colIndex.size - 1)\n            val colIndex\
    \ = colIndex.max(0)\n            val colIndex = colIndex.min(colIndex.size - 1)\n\
    \            val colIndex = colIndex.max(0)\n            val colIndex = colIndex.min(colIndex.size\
    \ - 1)\n            val ", "        val rows = lst.map(_.length)\n        val\
    \ cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        var row = 0\n        var col = 0\n        while (row < rows\
    \ && col < cols) {\n            val value = lst(row)(col)\n            if (value\
    \ == x) {\n                result.append((row, col))\n                row += 1\n\
    \                col += 1\n            } else if (value < x) {\n             \
    \   row += 1\n            } else {\n                col += 1\n            }\n\
    \        }\n        result.sortBy(_._1)\n        result.sortBy(_._2, descending\
    \ = true)\n        return result.toList", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = new mutable.ArrayBuffer[Long]()\n        val col\
    \ = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        var i = 0\n     \
    \   var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n     \
    \   var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n     \
    \   var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n     \
    \   var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n     \
    \   var z = 0\n        var i = 0\n        var j = 0\n        var k = 0\n     \
    \   var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n     \
    \   var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n     \
    \   var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n     \
    \   var x = 0\n        var y = 0\n        var z = 0\n        var i = 0\n     \
    \   var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n     \
    \   var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n     \
    \   var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n     \
    \   var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n     \
    \   var z = 0\n        var i = 0\n        var j = 0\n        var k = 0\n     \
    \   var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n     \
    \   var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n     \
    \   var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n     \
    \   var x = 0\n        var y = 0\n        var z = 0\n        var i = 0\n     \
    \   var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n     \
    \   var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n     \
    \   var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n     \
    \   var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n     \
    \   var z = 0\n        var i = 0\n        var j = 0\n        var k = 0\n     \
    \   var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n     \
    \   var p = 0\n        var q = 0", "        val rows = lst.map(_.length)\n   \
    \     val cols = lst(0).length\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        val rows = lst.map(_.length)\n        val cols = lst(0).length\n\
    \        val rows = lst.map(_.length)\n        val cols = lst(0).length\n    \
    \    val rows = lst.map(_.length)\n        val cols = lst(0).length\n        val\
    \ rows = lst.map(_.length)\n        val cols = lst(0).length\n        val rows\
    \ = lst.map(_.length)\n        val cols = lst(0).length\n        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val rows = lst.map(_.length)\n    \
    \    val cols = lst(0).length\n        val rows = lst.map(_.length)\n        val\
    \ cols = lst(0).length\n        val rows = lst.map(_.length)\n        val cols\
    \ = lst(0).length\n        val rows = lst.map(_.length)\n        val cols = lst(0).length\n\
    \        val rows = lst.map(_.length)\n        val cols = lst(0).length\n    \
    \    val rows = lst.map(_.length)\n        val cols = lst(0).length\n        val\
    \ rows = lst.map(_.length)\n        val cols = lst(0).length\n        val rows\
    \ = lst.map(_.length)\n        val cols = lst(0).length\n        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val rows = lst.map(_.length)\n    \
    \    val cols = lst(0).length\n        val rows = lst.map(_.length)\n        val\
    \ cols = lst(0).length\n        val rows = lst.map(_.length)\n        val cols\
    \ = lst(0).length\n        val rows = lst.map(_.length)\n        val cols = lst(0).length\n\
    \        val rows = lst.map(_.length)\n        val cols = lst(0).length\n    \
    \    val rows = lst.map(_.length)\n        val cols = lst(0).length\n        val\
    \ rows = lst.map(_.length)\n        val cols = lst(0).length\n        val rows\
    \ = lst.map(_.length)\n        val cols = lst(0).length\n        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val rows = lst.map(_.length)\n    \
    \    val cols = lst(0).length\n        val rows = lst.map(_.length)\n        val\
    \ cols = lst(0).length\n        val rows = lst.map(_.length)\n        val cols\
    \ = lst(0).length\n        val rows = lst.map(_.length)\n        val cols = lst(0).length\n\
    \        val rows = lst.map(_.length)\n        val cols = lst(0).length\n    \
    \    val rows = lst.map(_.length)\n        val cols = lst(0).length", "      \
    \  val rows = lst.map(_.length)\n        val cols = lst(0).length\n        val\
    \ result = lst.map(row => row.zipWithIndex.filter(_._1 == x).map(_._2))\n    \
    \    val sortedRows = result.map(_.sortBy(_._1).reverse).map(_.sortBy(_._2).reverse)\n\
    \        val sortedCols = result.map(_.sortBy(_._2).reverse).map(_.sortBy(_._1).reverse)\n\
    \        val sortedResult = sortedRows.zip(sortedCols).map(row => (row._1, row._2))\n\
    \        sortedResult.toList", "        val rows = lst.map(_.length)\n       \
    \ val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        val rows = lst.map(_.length)\n        val cols = lst(0).length\n\
    \        val row = 0\n        val col = 0\n        while(row < rows && col < cols)\
    \ {\n            val row1 = row + 1\n            val col1 = col + 1\n        \
    \    val row2 = row + rows\n            val col2 = col + cols\n            val\
    \ row3 = row1 + 1\n            val col3 = col1 + cols\n            val row4 =\
    \ row2 + 1\n            val col4 = col2 + cols\n            val row5 = row3 +\
    \ 1\n            val col5 = col3 + cols\n            val row6 = row4 + 1\n   \
    \         val col6 = col4 + cols\n            val row7 = row5 + 1\n          \
    \  val col7 = col5 + cols\n            val row8 = row6 + 1\n            val col8\
    \ = col6 + cols\n            val row9 = row7 + 1\n            val col9 = col7\
    \ + cols\n            val row10 = row8 + 1\n            val col10 = col8 + cols\n\
    \            val row11 = row9 + 1\n            val col11 = col9 + cols\n     \
    \       val row12 = row10 + 1\n            val col12 = col10 + cols\n        \
    \    val row13 = row11 + 1\n            val col13 = col11 + cols\n           \
    \ val row14 = row12 + 1\n            val col14 = col12 + cols\n            val\
    \ row15 = row13 + 1\n            val col15 = col13 + cols\n            val row16\
    \ = row14 + 1\n            val col16 = col14 + cols\n            val row17 = row15\
    \ + 1\n            val col17 = col15 + cols\n            val row18 = row16 + 1\n\
    \            val col18 = col16 + cols\n            val row19 = row17 + 1\n   \
    \         val col19 = col17 + cols\n            val row20 = row18 + 1\n      \
    \      val col20 = col18 + cols\n            val row21 = row19 + 1\n         \
    \   val col21 = col19 + cols\n            val row22 = row20 + 1\n            val\
    \ col22 = col20 + cols\n            val row23 = row21 + 1\n            val col23\
    \ = col21 + cols\n            val row24 = row22 + 1\n            val col24 = col22\
    \ + cols\n            val row25 = row23 + 1\n            val col25 = col23 + cols",
  "        val lst2 = lst.map(_.toList).toList\n        val lst3 = lst2.map(x => x.zipWithIndex).toList\n\
    \        val lst4 = lst3.map(x => (x._2, x._1)).toList\n        val lst5 = lst4.filter(x\
    \ => x._1 == x).sortBy(x => x._1).reverse\n        val lst6 = lst5.filter(x =>\
    \ x._2 == x).sortBy(x => x._2).reverse\n        lst6.map(x => (x._1, x._2))",
  "        val m = lst.size\n        val n = lst(0).size\n        val result = new\
    \ mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        var i = 0\n        while\
    \ (i < m) {\n            val row = lst(i)\n            var j = 0\n           \
    \ while (j < n) {\n                if (row(x) == j) result.add(Tuple2(i, j))\n\
    \                j += 1\n            }\n            i += 1\n        }\n      \
    \  result.sortBy(_._1)\n        result.sortBy(_._2, descending = true)\n     \
    \   result", "        val rows = lst.map(_.size)\n        val cols = lst(0).size\n\
    \        val coords = lst.map(x => (x.indexOf(x), x.indexOf(x) + 1))\n       \
    \ val rows = coords.map(x => (x._1, x._2)).sortBy(_._1).reverse\n        val cols\
    \ = coords.map(x => (x._2, x._1)).sortBy(_._2).reverse\n        val result = coords.map(x\
    \ => (x._1, x._2)).filter(x => x._1 == x).map(x => (x._2, x._1))\n        result.sortBy(_._1).reverse.map(x\
    \ => (x._1, x._2))", "        val rowList = lst.map(row => row.map(i => Tuple2(i.toLong,\
    \ i)))\n        val rowIndex = rowList.zipWithIndex.filter(row => row._1 == x).map(row\
    \ => row._2)\n        val rowSorted = rowIndex.sortBy(row => row._1)\n       \
    \ val rowSortedIndex = rowSorted.zipWithIndex.filter(row => row._2 == 0).map(row\
    \ => row._1)\n        val rowSortedIndexReversed = rowSortedIndex.sortBy(row =>\
    \ row._2).reverse\n        val rowSortedIndexReversedMap = rowSortedIndexReversed.map(row\
    \ => (row._1, row._2)).toMap\n        val rowSortedIndexReversedMapReversed =\
    \ rowSortedIndexReversedMap.map(row => (row._2, row._1)).toMap\n        val rowSortedIndexReversedMapReversedMap\
    \ = rowSortedIndexReversedMapReversed.map(row => (row._1, row._2)).toMap\n   \
    \     rowSorted.map(row => (rowSortedIndexReversedMapReversedMap.get(row._1),\
    \ rowSortedIndexReversedMapReversedMap.get(row._2))).toList", "        val rows\
    \ = lst.map(_.length)\n        val cols = lst(0).length\n        val result =\
    \ new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        for (i <- 0 until rows)\
    \ {\n            val row = lst(i)\n            val rowResult = row.zipWithIndex.filter(_._1\
    \ == x).map(_._2)\n            val colResult = row.zipWithIndex.filter(_._2 ==\
    \ x).map(_._1)\n            val rowResultSorted = rowResult.sortBy(-_)\n     \
    \       val colResultSorted = colResult.sortBy(-_)\n            val rowResultSortedWithIndex\
    \ = rowResultSorted.zipWithIndex.map(_._2)\n            val colResultSortedWithIndex\
    \ = colResultSorted.zipWithIndex.map(_._1)\n            val rowResultSortedWithIndexSorted\
    \ = rowResultSortedWithIndex.sortBy(-_._1)\n            val colResultSortedWithIndexSorted\
    \ = colResultSortedWithIndex.sortBy(-_._1)\n            val rowResultSortedWithIndexSortedWithIndex\
    \ = rowResultSortedWithIndexSorted.zipWithIndex.map(_._2)\n            val colResultSortedWithIndexSortedWithIndex\
    \ = colResultSortedWithIndexSorted.zipWithIndex.map(_._1)\n            val rowResultSortedWithIndexSortedWithIndexSorted\
    \ = rowResultSortedWithIndexSortedWithIndex.sortBy(-_._1)\n            val colResultSortedWithIndexSortedWithIndexSorted\
    \ = colResultSortedWithIndexSortedWithIndex.sortBy(-_._1)\n            val rowResultSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = rowResultSortedWithIndexSortedWithIndexSortedWithIndex.zipWithIndex.map(_._2)\n\
    \            val colResultSortedWithIndexSortedWithIndexSortedWithIndex = colResultSortedWithIndexSortedWithIndexSortedWithIndex.zipWithIndex.map(_._1)\n\
    \            val rowResultSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = rowResultSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.sortBy(-_._1)\n\
    \            val colResultSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = colResultSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.sortBy(-_._1)\n\
    \            val rowResultSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = rowResultSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.zipWithIndex.map(_._2)\n\
    \            val colResultSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = colResultSortedWithIndex", "        val m = lst.size\n        val n = lst(0).size\n\
    \        val result = new mutable.ArrayBuffer[Tuple2[Long, Long]]\n        var\
    \ i = 0\n        while (i < m) {\n            var j = 0\n            var k = 0\n\
    \            var row = 0\n            var col = 0\n            while (j < n) {\n\
    \                if (lst(i)(j) == x) {\n                    row += 1\n       \
    \             col += 1\n                }\n                j += 1\n          \
    \  }\n            while (k < n) {\n                if (lst(i)(k) == x) {\n   \
    \                 row -= 1\n                    col -= 1\n                }\n\
    \                k += 1\n            }\n            result.add(Tuple2(row, col))\n\
    \            i += 1\n        }\n        result.sortBy(_._1)\n        result.sortBy(_._2,\
    \ descending = true)\n        return result.toList", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        for (i <- 0 until rows) {\n            val row = lst(i)\n\
    \            val col = 0\n            while (col < cols) {\n                if\
    \ (row(col) == x) {\n                    result.append((i, col))\n           \
    \         break\n                }\n                col += 1\n            }\n\
    \        }\n        result.sortBy(_._1).reverse.sortBy(_._2).reverse", "     \
    \   val rows = lst.map(_.length)\n        val cols = lst(0).length\n        val\
    \ result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        val row = 0\n\
    \        val col = 0\n        while(row < rows && col < cols) {\n            if(lst(row)(col)\
    \ == x) {\n                result.add(Tuple2(row, col))\n                row +=\
    \ 1\n                col += 1\n            } else if(lst(row)(col) < x) {\n  \
    \              row += 1\n            } else {\n                col += 1\n    \
    \        }\n        }\n        result.sortBy(_._1).reverse", "        val rows\
    \ = lst.map(_.length)\n        val cols = lst(0).length\n        val result =\
    \ new mutable.ListBuffer[Tuple2[Long, Long]]()\n        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val rows = lst.map(_.length)\n    \
    \    val cols = lst(0).length\n        val rows = lst.map(_.length)\n        val\
    \ cols = lst(0).length\n        val rows = lst.map(_.length)\n        val cols\
    \ = lst(0).length\n        val rows = lst.map(_.length)\n        val cols = lst(0).length\n\
    \        val rows = lst.map(_.length)\n        val cols = lst(0).length\n    \
    \    val rows = lst.map(_.length)\n        val cols = lst(0).length\n        val\
    \ rows = lst.map(_.length)\n        val cols = lst(0).length\n        val rows\
    \ = lst.map(_.length)\n        val cols = lst(0).length\n        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val rows = lst.map(_.length)\n    \
    \    val cols = lst(0).length\n        val rows = lst.map(_.length)\n        val\
    \ cols = lst(0).length\n        val rows = lst.map(_.length)\n        val cols\
    \ = lst(0).length\n        val rows = lst.map(_.length)\n        val cols = lst(0).length\n\
    \        val rows = lst.map(_.length)\n        val cols = lst(0).length\n    \
    \    val rows = lst.map(_.length)\n        val cols = lst(0).length\n        val\
    \ rows = lst.map(_.length)\n        val cols = lst(0).length\n        val rows\
    \ = lst.map(_.length)\n        val cols = lst(0).length\n        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val rows = lst.map(_.length)\n    \
    \    val cols = lst(0).length\n        val rows = lst.map(_.length)\n        val\
    \ cols = lst(0).length\n        val rows = lst.map(_.length)\n        val cols\
    \ = lst(0).length\n        val rows = lst.map(_.length)\n        val cols = lst(0).length\n\
    \        val rows = lst.map(_.length)\n        val cols = lst(0).length\n    \
    \    val rows = lst.map(_.length)\n        val cols = lst(0).length\n        val\
    \ rows = lst.map(_.length)\n        val cols = lst(0).length\n        val rows\
    \ = lst.map(_.length)\n        val cols = lst(0).length\n        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val rows = lst.map(_.length)\n    \
    \    val cols = lst(0).length\n        val rows = lst.map(_.length)\n        val\
    \ cols = lst(0).length", "        val rows = lst.map(_.size)\n        val cols\
    \ = lst(0).size\n        val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n\
    \        val row = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until rows) {\n            row.append(i)\n            for(j\
    \ <- 0 until cols) {\n                col.append(j)\n                if(lst(i)(j)\
    \ == x) {\n                    result.append((row.toList, col.toList))\n     \
    \           }\n            }\n        }\n        result.sortBy(_._1).reverse.sortBy(_._2).reverse",
  "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        val rowMap\
    \ = new mutable.HashMap[Long, Long]()\n        val colMap = new mutable.HashMap[Long,\
    \ Long]()\n        val rowIndex = new mutable.HashMap[Long, Long]()\n        val\
    \ colIndex = new mutable.HashMap[Long, Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n",
  "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        val row\
    \ = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        var i = 0\n        while(i < rows.length){\n            val row = lst(i).filter(_\
    \ != x)\n            val col = lst(i).indexOf(x)\n            val row1 = row.map(x\
    \ => x + i)\n            val col1 = col.map(x => x + i)\n            val row2\
    \ = row.map(x => x + i)\n            val col2 = col.map(x => x + i)\n        \
    \    val row3 = row.map(x => x + i)\n            val col3 = col.map(x => x + i)\n\
    \            val row4 = row.map(x => x + i)\n            val col4 = col.map(x\
    \ => x + i)\n            val row5 = row.map(x => x + i)\n            val col5\
    \ = col.map(x => x + i)\n            val row6 = row.map(x => x + i)\n        \
    \    val col6 = col.map(x => x + i)\n            val row7 = row.map(x => x + i)\n\
    \            val col7 = col.map(x => x + i)\n            val row8 = row.map(x\
    \ => x + i)\n            val col8 = col.map(x => x + i)\n            val row9\
    \ = row.map(x => x + i)\n            val col9 = col.map(x => x + i)\n        \
    \    val row10 = row.map(x => x + i)\n            val col10 = col.map(x => x +\
    \ i)\n            val row11 = row.map(x => x + i)\n            val col11 = col.map(x\
    \ => x + i)\n            val row12 = row.map(x => x + i)\n            val col12\
    \ = col.map(x => x + i)\n            val row13 = row.map(x => x + i)\n       \
    \     val col13 = col.map(x => x + i)\n            val row14 = row.map(x => x\
    \ + i)\n            val col14 = col.map(x => x + i)\n            val row15 = row.map(x\
    \ => x + i)\n            val col15 = col.map(x => x + i)\n            val row16\
    \ = row.map(x => x + i)\n            val col16 = col.map(x => x + i)\n       \
    \     val row17 = row.map(x => x + i)\n            val col17 = col.map(x => x\
    \ + i)\n            val row18 = row.map(x => x + i)\n            val col18 = col.",
  "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        var row\
    \ = 0\n        var col = 0\n        while(row < rows && col < cols) {\n      \
    \      val value = lst(row)(col)\n            if(value == x) {\n             \
    \   result.append((row, col))\n            }\n            col += 1\n         \
    \   if(col == cols) {\n                row += 1\n                col = 0\n   \
    \         }\n        }\n        result.sortBy(_._1).reverse", "        val rows\
    \ = new mutable.HashMap[Long, mutable.HashMap[Long, Long]]()\n        val columns\
    \ = new mutable.HashMap[Long, Long]()\n        lst.foreach(row => {\n        \
    \    row.foreach(col => {\n                if (row.getOrElse(col, 0) == x) {\n\
    \                    columns.put(col, row.getOrElse(col, 0))\n               \
    \ }\n            })\n        })\n        val sortedColumns = columns.toSeq.sortBy(_._1).reverse\n\
    \        val sortedRows = columns.toSeq.sortBy(_._2).reverse\n        sortedRows.foreach(row\
    \ => {\n            val sortedColumns = columns.toSeq.sortBy(_._1).reverse\n \
    \           val sortedRows = columns.toSeq.sortBy(_._2).reverse\n            val\
    \ tuple = sortedColumns.zip(sortedRows).map(x => (row._1, row._2, x._1, x._2))\n\
    \            rows.put(row._1, tuple)\n        })\n        rows.toSeq.sortBy(_._1).reverse.map(x\
    \ => (x._1, x._2))", "        val rows = lst.map(_.length)\n        val cols =\
    \ lst(0).length\n        val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n\
    \        for (i <- 0 until rows) {\n            val row = lst(i)\n           \
    \ val cols = lst(0).length\n            val rowIndex = i\n            val colIndex\
    \ = cols - 1\n            val rowStart = rowIndex * cols\n            val rowEnd\
    \ = rowStart + cols\n            val colStart = colIndex\n            val colEnd\
    \ = colStart + cols\n            val rowTuple = row.toSeq.map(x => (rowIndex,\
    \ x))\n            val colTuple = row.toSeq.map(x => (colIndex, x))\n        \
    \    val rowTuple2 = row.toSeq.map(x => (rowIndex, x))\n            val colTuple2\
    \ = row.toSeq.map(x => (colIndex, x))\n            val rowTuple3 = row.toSeq.map(x\
    \ => (rowIndex, x))\n            val colTuple3 = row.toSeq.map(x => (colIndex,\
    \ x))\n            val rowTuple4 = row.toSeq.map(x => (rowIndex, x))\n       \
    \     val colTuple4 = row.toSeq.map(x => (colIndex, x))\n            val rowTuple5\
    \ = row.toSeq.map(x => (rowIndex, x))\n            val colTuple5 = row.toSeq.map(x\
    \ => (colIndex, x))\n            val rowTuple6 = row.toSeq.map(x => (rowIndex,\
    \ x))\n            val colTuple6 = row.toSeq.map(x => (colIndex, x))\n       \
    \     val rowTuple7 = row.toSeq.map(x => (rowIndex, x))\n            val colTuple7\
    \ = row.toSeq.map(x => (colIndex, x))\n            val rowTuple8 = row.toSeq.map(x\
    \ => (rowIndex, x))\n            val colTuple8 = row.toSeq.map(x => (colIndex,\
    \ x))\n            val rowTuple9 = row.toSeq.map(x => (rowIndex, x))\n       \
    \     val colTuple9 = row.toSeq.map(x => (colIndex, x))\n            val rowTuple10\
    \ = row.toSeq.map(x => (rowIndex, x))\n            val colTuple10 = row.toSeq.map(x\
    \ => (colIndex, x))\n            val rowTuple11 = row.toSeq.map(x => (rowIndex,\
    \ x))\n            val colTuple11 = row.toSeq.map(x => (colIndex, x))\n      \
    \      val rowTuple12 = row.toSeq.map(x => (rowIndex, x))\n            val colTuple12\
    \ = row.toSeq.map(x => (colIndex, x))\n            val rowTuple13 = row.toSeq.map(x\
    \ => (rowIndex, x))\n            val colTuple13 = row.toSeq", "        val lst1\
    \ = lst.sortWith(_.compare(x, _) < 0)\n        val lst2 = lst1.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst3 = lst2.sortWith(_.compare(x, _) < 0)\n        val\
    \ lst4 = lst3.sortWith(_.compare(x, _) > 0)\n        val lst5 = lst4.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst6 = lst5.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst7 = lst6.sortWith(_.compare(x, _) < 0)\n        val lst8 = lst7.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst9 = lst8.sortWith(_.compare(x, _) < 0)\n        val\
    \ lst10 = lst9.sortWith(_.compare(x, _) > 0)\n        val lst11 = lst10.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst12 = lst11.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst13 = lst12.sortWith(_.compare(x, _) < 0)\n        val lst14 = lst13.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst15 = lst14.sortWith(_.compare(x, _) < 0)\n        val\
    \ lst16 = lst15.sortWith(_.compare(x, _) > 0)\n        val lst17 = lst16.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst18 = lst17.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst19 = lst18.sortWith(_.compare(x, _) < 0)\n        val lst20 = lst19.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst21 = lst20.sortWith(_.compare(x, _) < 0)\n        val\
    \ lst22 = lst21.sortWith(_.compare(x, _) > 0)\n        val lst23 = lst22.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst24 = lst23.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst25 = lst24.sortWith(_.compare(x, _) < 0)\n        val lst26 = lst25.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst27 = lst26.sortWith(_.compare(x, _) < 0)\n        val\
    \ lst28 = lst27.sortWith(_.compare(x, _) > 0)\n        val lst29 = lst28.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst30 = lst29.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst31 = lst30.sortWith(_.compare(x, _", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        for (i <- 0 until rows) {\n            for (j <- 0 until cols)\
    \ {\n                if (lst(i)(j) == x) {\n                    result.append((i,\
    \ j))\n                }\n            }\n        }\n        result.sortBy(_._1).reverse",
  "        val rowList = lst.map(row => row.zipWithIndex.toList)\n        val rowMap\
    \ = rowList.map(row => (row._2, row._1)).toMap\n        val rowList = rowList.sortBy(row\
    \ => row._1).reverse\n        val rowMap = rowMap.sortBy(row => row._2).reverse\n\
    \        val rowList = rowList.map(row => (row._2, row._1))\n        val rowMap\
    \ = rowMap.map(row => (row._2, row._1))\n        val rowList = rowList.sortBy(row\
    \ => row._1).reverse\n        val rowMap = rowMap.sortBy(row => row._2).reverse\n\
    \        val rowList = rowList.map(row => (row._2, row._1))\n        val rowMap\
    \ = rowMap.map(row => (row._2, row._1))\n        val rowList = rowList.sortBy(row\
    \ => row._1).reverse\n        val rowMap = rowMap.sortBy(row => row._2).reverse\n\
    \        val rowList = rowList.map(row => (row._2, row._1))\n        val rowMap\
    \ = rowMap.map(row => (row._2, row._1))\n        val rowList = rowList.sortBy(row\
    \ => row._1).reverse\n        val rowMap = rowMap.sortBy(row => row._2).reverse\n\
    \        val rowList = rowList.map(row => (row._2, row._1))\n        val rowMap\
    \ = rowMap.map(row => (row._2, row._1))\n        val rowList = rowList.sortBy(row\
    \ => row._1).reverse\n        val rowMap = rowMap.sortBy(row => row._2).reverse\n\
    \        val rowList = rowList.map(row => (row._2, row._1))\n        val rowMap\
    \ = rowMap.map(row => (row._2, row._1))\n        val rowList = rowList.sortBy(row\
    \ => row._1).reverse\n        val rowMap = rowMap.sortBy(row => row._2).reverse\n\
    \        val rowList = rowList.map(row => (row._2, row._1))\n        val rowMap\
    \ = rowMap.map(row => (row._2, row._1))\n        val rowList = rowList.sortBy(row\
    \ => row._1).reverse\n        val rowMap = rowMap.sortBy(row => row._2).reverse\n\
    \        val rowList = rowList.map(row => (row._2, row._1))\n        val rowMap\
    \ = rowMap.map(row => (row._2, row._1))\n        val rowList = rowList.sortBy(row\
    \ => row._1).reverse\n        val rowMap = rowMap.sortBy(row => row._2).reverse\n\
    \        val rowList = rowList.map(row => (row._2, row._", "        val rows =\
    \ lst.map(_.length)\n        val cols = lst(0).length\n        val result = new\
    \ mutable.ListBuffer[Tuple2[Long, Long]]()\n        val row = 0\n        val col\
    \ = 0\n        while(row < rows && col < cols) {\n            if(lst(row)(col)\
    \ == x) {\n                result.+=(Tuple2(row, col))\n            }\n      \
    \      col += 1\n        }\n        result.sortBy(_._1).reverse", "        val\
    \ lst2 = lst.map(_.toList).toList\n        val lst3 = lst2.map(x => x.filter(_\
    \ == x))\n        val lst4 = lst3.map(x => x.sortBy(_._2)).reverse\n        val\
    \ lst5 = lst4.map(x => x.sortBy(_._1)).reverse\n        val lst6 = lst5.map(x\
    \ => x.filter(_._1 == x))\n        lst6.map(x => (x._1.toInt, x._2.toInt))", " \
    \       val lst1 = lst.sortBy(_(0))\n        val lst2 = lst1.sortBy(_(1)) //descending\
    \ order\n        val lst3 = lst2.filter(_(0) != x)\n        val lst4 = lst3.sortBy(_(1))\
    \ //ascending order\n        lst4.map(_ -> Tuple2(_(0), _(1))).toList", "    \
    \    val rows = lst.map(_.length)\n        val cols = lst(0).length\n        val\
    \ result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        var i = 0\n \
    \       while (i < rows) {\n            val row = lst(i).zipWithIndex.sortBy(_._1).reverse\n\
    \            val col = lst(i).zipWithIndex.sortBy(_._2).reverse\n            val\
    \ rowIndex = row.zipWithIndex.find(_._1 == x).map(_._2)\n            val colIndex\
    \ = col.zipWithIndex.find(_._1 == x).map(_._2)\n            if (rowIndex.isDefined\
    \ && colIndex.isDefined) {\n                val rowIndex = rowIndex.get\n    \
    \            val colIndex = colIndex.get\n                val row = (rowIndex\
    \ - i, rowIndex - i)\n                val col = (colIndex - i, colIndex - i)\n\
    \                result.add(row)\n                result.add(col)\n          \
    \  }\n            i += 1\n        }\n        result.sortBy(_._1).reverse", " \
    \       val lst1 = lst.sortBy(x => x.toInt)\n        val lst2 = lst1.sortBy(x\
    \ => x.toInt).reverse\n        val lst3 = lst2.map(x => (x.toInt, x.toInt))\n\
    \        val lst4 = lst3.sortBy(x => x._1).reverse\n        val lst5 = lst4.map(x\
    \ => (x._1, x._2))\n        val lst6 = lst5.sortBy(x => x._2)\n        val lst7\
    \ = lst6.map(x => (x._1, x._2))\n        lst7", "        val lst1 = lst.sortBy(x\
    \ => x)\n        val lst2 = lst1.sortBy(x => -x.indexOf(x))\n        val lst3\
    \ = lst2.map(x => (x.indexOf(x), x))\n        val lst4 = lst3.sortBy(x => x._1)\n\
    \        val lst5 = lst4.map(x => (x._2, x._1))\n        lst5.toList", "     \
    \   val rows = lst.map(_.size)\n        val cols = lst(0).size\n        val result\
    \ = new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n        val row = new mutable.ArrayBuffer[Long]()\n\
    \        val col = new mutable.ArrayBuffer[Long]()\n        val rows = new mutable.ArrayBuffer[Long]()\n\
    \        val cols = new mutable.ArrayBuffer[Long]()\n", "        val lst2 = lst.map(_.toList).toList\n\
    \        val lst3 = lst2.map(_.toList).map(x => x.filter(_ != x)).flatten\n  \
    \      val lst4 = lst3.map(x => (x.indexOf(x), x.lastIndexOf(x)))\n        val\
    \ lst5 = lst4.map(x => (x._1, x._2))\n        val lst6 = lst5.sortBy(x => x._1)\n\
    \        val lst7 = lst6.sortBy(x => x._2)\n        lst7.map(x => (x._1, x._2))",
  "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        var row\
    \ = 0\n        var col = 0\n        while (row < rows && col < cols) {\n     \
    \       if (lst(row)(col) == x) {\n                result.append((row, col))\n\
    \            }\n            row += 1\n            col += 1\n        }\n      \
    \  result.sortBy(_._1)\n        result.sortBy(_._2, descending = true)\n     \
    \   return result.toList", "        val rows = lst.map(_.length)\n        val\
    \ cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        var row = 0\n        var col = 0\n        while(row < rows\
    \ && col < cols) {\n            val row = lst(row).indexOf(x)\n            val\
    \ col = lst(row).lastIndexOf(x)\n            if(row != -1 && col != -1) {\n  \
    \              result.add(Tuple2(row, col))\n            }\n            row +=\
    \ 1\n            col += 1\n        }\n        result.sortBy(_._1)\n        result.sortBy(_._2,\
    \ descending = true)\n        return result.toList", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        var row = 0\n        var col = 0\n        while (row < rows)\
    \ {\n            while (col < cols) {\n                if (lst(row)(col) == x)\
    \ {\n                    result.add(Tuple2(row, col))\n                }\n   \
    \             col += 1\n            }\n            row += 1\n            col =\
    \ 0\n        }\n        result.sortBy(_._1)\n        result.sortBy(_._2, descending\
    \ = true)\n        return result.toList", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = new mutable.ArrayBuffer[Long]()\n        val col\
    \ = new mutable.ArrayBuffer[Long]()\n        var i = 0\n        while(i < rows)\
    \ {\n            val row = lst(i).zipWithIndex.sortBy(_._1).map(_._2)\n      \
    \      val col = lst(i).zipWithIndex.sortBy(_._2).map(_._1)\n            val x\
    \ = lst(i).indexOf(x)\n            val y = lst(i).indexOf(x+1)\n            val\
    \ x1 = row.indexOf(x)\n            val y1 = row.indexOf(x+1)\n            val\
    \ x2 = col.indexOf(x)\n            val y2 = col.indexOf(x+1)\n            val\
    \ tuple = (x1, y1), (x2, y2)\n            result.add(tuple)\n            i +=\
    \ 1\n        }\n        result.sortBy(_._1).reverse.map(_._2)", "        val rows\
    \ = lst.map(_.length)\n        val cols = lst(0).length\n        val result =\
    \ new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        val row = 0\n       \
    \ val col = 0\n        while(row < rows && col < cols) {\n            val value\
    \ = lst(row)(col)\n            if(value == x) {\n                result.append((row,\
    \ col))\n            }\n            row += 1\n            col += 1\n        }\n\
    \        result.sortBy(_._1).reverse", "        val m = lst.size\n        val\
    \ n = lst(0).size\n        val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n\
    \        var i = 0\n        var j = 0\n        while (i < m && j < n) {\n    \
    \        if (lst(i)(j) == x) {\n                result.append((i, j))\n      \
    \          i += 1\n                j += 1\n            } else {\n            \
    \    i += 1\n            }\n        }\n        result.sortBy(_._1)\n        result.sortBy(_._2,\
    \ descending = true)\n        return result.toList", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        for (i <- 0 until rows) {\n            val row = lst(i)\n\
    \            val rowIndex = i\n            val colIndex = cols - rowIndex\n  \
    \          val rowCoord = Tuple2(rowIndex, rowIndex + rows - 1)\n            val\
    \ colCoord = Tuple2(colIndex, colIndex + cols - 1)\n            if (row(i) ==\
    \ x) {\n                result.add(rowCoord)\n            }\n            if (col(rowIndex)\
    \ == x) {\n                result.add(colCoord)\n            }\n        }\n  \
    \      result.sortBy(_._1).reverse", "        val rows = lst.map(_.length)\n \
    \       val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        var row = 0\n        var col = 0\n        while(row < rows\
    \ && col < cols) {\n            val rowValue = lst(row)(col)\n            val\
    \ colValue = lst(row)(col + 1)\n            if(rowValue == x) {\n            \
    \    result.add(Tuple2(row, col))\n                row += 1\n                col\
    \ += 1\n            } else if(colValue == x) {\n                result.add(Tuple2(row,\
    \ col))\n                row += 1\n            } else {\n                row +=\
    \ 1\n                col += 1\n            }\n        }\n        result.sortBy(_._1)\n\
    \        result.sortBy(_._2, descending = true)\n        result.toList", "   \
    \     val rows = lst.map(_.length)\n        val cols = lst(0).length\n       \
    \ val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        var row =\
    \ 0\n        var col = 0\n        while(row < rows && col < cols) {\n        \
    \    val value = lst(row)(col)\n            if(value == x) {\n               \
    \ result.append((row, col))\n            }\n            row += 1\n           \
    \ col += 1\n        }\n        result.sortBy(_._1).reverse", "        val rows\
    \ = lst.map(_.length)\n        val cols = lst(0).length\n        val result =\
    \ new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        for (i <- 0 until rows)\
    \ {\n            val row = lst(i)\n            val cols = lst(0).length\n    \
    \        val rowIndex = i\n            val colIndex = cols - 1\n            val\
    \ rowStart = rowIndex * cols\n            val colStart = colIndex * cols\n   \
    \         val rowEnd = rowStart + cols\n            val colEnd = colStart + cols\n\
    \            val rowStart = rowIndex * cols\n            val colStart = colIndex\
    \ * cols\n            val rowEnd = rowStart + cols\n            val colEnd = colStart\
    \ + cols\n            val rowStart = rowIndex * cols\n            val colStart\
    \ = colIndex * cols\n            val rowEnd = rowStart + cols\n            val\
    \ colEnd = colStart + cols\n            val rowStart = rowIndex * cols\n     \
    \       val colStart = colIndex * cols\n            val rowEnd = rowStart + cols\n\
    \            val colEnd = colStart + cols\n            val rowStart = rowIndex\
    \ * cols\n            val colStart = colIndex * cols\n            val rowEnd =\
    \ rowStart + cols\n            val colEnd = colStart + cols\n            val rowStart\
    \ = rowIndex * cols\n            val colStart = colIndex * cols\n            val\
    \ rowEnd = rowStart + cols\n            val colEnd = colStart + cols\n       \
    \     val rowStart = rowIndex * cols\n            val colStart = colIndex * cols\n\
    \            val rowEnd = rowStart + cols\n            val colEnd = colStart +\
    \ cols\n            val rowStart = rowIndex * cols\n            val colStart =\
    \ colIndex * cols\n            val rowEnd = rowStart + cols\n            val colEnd\
    \ = colStart + cols\n            val rowStart = rowIndex * cols\n            val\
    \ colStart = colIndex * cols\n            val rowEnd = rowStart + cols\n     \
    \       val colEnd = colStart + cols\n            val rowStart = rowIndex * cols\n\
    \            val colStart = colIndex * cols\n            val rowEnd = rowStart\
    \ + cols\n            val colEnd = colStart + cols\n            val rowStart =\
    \ rowIndex * cols\n            val colStart = colIndex * cols\n            val\
    \ rowEnd = rowStart + cols\n            val colEnd = colStart + cols\n       \
    \     val rowStart = rowIndex * cols\n            val colStart = colIndex * cols\n\
    \            val rowEnd = rowStart + cols\n            val colEnd = colStart +\
    \ cols\n            val rowStart = rowIndex * cols\n            val colStart = "]
stop_tokens:
- "\n    }\n"
