name: HumanEval_87_get_row
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a 2 dimensional data, as a nested lists,\n    // which is\
  \ similar to matrix, however, unlike matrices,\n    // each row may contain a different\
  \ number of columns.\n    // Given lst, and integer x, find integers x in the list,\n\
  \    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    // each\
  \ tuple is a coordinate - (row, columns), starting with 0.\n    // Sort coordinates\
  \ initially by rows in ascending order.\n    // Also, sort coordinates of the row\
  \ by columns in descending order.\n    // Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n\
  \    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1,\
  \ 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n    // get_row([[], [1], [1,\
  \ 2, 3]], 3) == [(2, 2)]\n    def getRow(lst : List[List[Long]], x : Long) : List[Tuple2[Long,\
  \ Long]] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(getRow((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l)).equals((List[Tuple2[Long,\
  \ Long]]((0l, 0l), (1l, 4l), (1l, 0l), (2l, 5l), (2l, 0l)))));\n    assert(getRow((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))), (2l)).equals((List[Tuple2[Long,\
  \ Long]]((0l, 1l), (1l, 1l), (2l, 1l), (3l, 1l), (4l, 1l), (5l, 1l)))));\n    assert(getRow((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 1l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l)).equals((List[Tuple2[Long,\
  \ Long]]((0l, 0l), (1l, 0l), (2l, 1l), (2l, 0l), (3l, 2l), (3l, 0l), (4l, 3l), (4l,\
  \ 0l), (5l, 4l), (5l, 0l), (6l, 5l), (6l, 0l)))));\n    assert(getRow((List[List[Long]]()),\
  \ (1l)).equals((List[Tuple2[Long, Long]]())));\n    assert(getRow((List[List[Long]](List[Long](1l.toLong))),\
  \ (2l)).equals((List[Tuple2[Long, Long]]())));\n    assert(getRow((List[List[Long]](List[Long](),\
  \ List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong))), (3l)).equals((List[Tuple2[Long,\
  \ Long]]((2l, 2l)))));\n    }\n\n}\n"
completions: ["        val rows = lst.map(_.length)\n        val cols = lst(0).length\n\
    \        val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        val\
    \ row = 0\n        val col = 0\n        while(row < rows && col < cols) {\n  \
    \          val r = lst(row).indexOf(x)\n            val c = lst(row).lastIndexOf(x)\n\
    \            val rowStart = r - row\n            val colStart = c - col\n    \
    \        val rowEnd = rowStart + lst(row).length\n            val colEnd = colStart\
    \ + lst(row).last.length\n            val tuple = (rowStart, colStart)\n     \
    \       result.add(tuple)\n            row += 1\n            col += 1\n      \
    \  }\n        result.sortBy(_._1)\n        result.sortBy(_._2, descending = true)\n\
    \        result.toList", "        val lst2 = lst.sortWith(_.compare(x, _) < 0)\n\
    \        val lst3 = lst2.sortWith(_.compare(x, _) > 0)\n        val lst4 = lst3.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst5 = lst4.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst6 = lst5.sortWith(_.compare(x, _) < 0)\n        val lst7 = lst6.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst8 = lst7.sortWith(_.compare(x, _) < 0)\n        val\
    \ lst9 = lst8.sortWith(_.compare(x, _) > 0)\n        val lst10 = lst9.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst11 = lst10.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst12 = lst11.sortWith(_.compare(x, _) < 0)\n        val lst13 = lst12.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst14 = lst13.sortWith(_.compare(x, _) < 0)\n        val\
    \ lst15 = lst14.sortWith(_.compare(x, _) > 0)\n        val lst16 = lst15.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst17 = lst16.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst18 = lst17.sortWith(_.compare(x, _) < 0)\n        val lst19 = lst18.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst20 = lst19.sortWith(_.compare(x, _) < 0)\n        val\
    \ lst21 = lst20.sortWith(_.compare(x, _) > 0)\n        val lst22 = lst21.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst23 = lst22.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst24 = lst23.sortWith(_.compare(x, _) < 0)\n        val lst25 = lst24.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst26 = lst25.sortWith(_.compare(x, _) < 0)\n        val\
    \ lst27 = lst26.sortWith(_.compare(x, _) > 0)\n        val lst28 = lst27.sortWith(_.compare(x,\
    \ _) < 0)\n        val lst29 = lst28.sortWith(_.compare(x, _) > 0)\n        val\
    \ lst30 = lst29.sortWith(_.compare(x, _) < 0)\n        val lst31 = lst30.sortWith(_.compare(x,\
    \ _) > 0)\n        val lst32 = lst31.sortWith(_.compare(x, ", "        val rows\
    \ = lst.map(_.length)\n        val cols = lst(0).length\n        val result =\
    \ new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        var row = 0\n       \
    \ var col = 0\n        while(row < rows && col < cols) {\n            val rowStart\
    \ = lst(row).indexOf(x)\n            val colStart = lst(row).indexOf(lst(row).indexOf(x))\n\
    \            val rowEnd = rowStart + lst(row).length\n            val colEnd =\
    \ colStart + lst(row).length\n            val tuple = (rowStart, colStart)\n \
    \           if(rowStart < colStart) {\n                result.add(tuple)\n   \
    \             row += 1\n            } else {\n                col += 1\n     \
    \       }\n        }\n        result.sortBy(_._1)\n        result.sortBy(_._2)\n\
    \        result.toList", "        val lst2 = lst.map(_.toList).flatten\n     \
    \   val lst3 = lst2.zipWithIndex.filter(_._1 == x).sortBy(_._2).reverse\n    \
    \    val lst4 = lst3.map(x => (x._2, x._1))\n        lst4.toList", "        val\
    \ lst2 = lst.sortBy(row => row.map(_.toInt))\n        val lst3 = lst2.sortBy(row\
    \ => row.map(_.toInt).reverse)\n        val lst4 = lst3.map(row => Tuple2(row(0),\
    \ row(lst2.indexOf(lst.indexOf(row)))))\n        lst4.filter(row => row._1 ==\
    \ x).map(row => Tuple2(row._1, row._2))", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = new mutable.ArrayBuffer[Long]()\n        val col\
    \ = new mutable.ArrayBuffer[Long]()\n        var i = 0\n        while (i < rows)\
    \ {\n            val row = lst(i).zipWithIndex.sortBy(_._1).map(x => x._2)\n \
    \           val col = lst(i).zipWithIndex.sortBy(_._2).map(x => x._1)\n      \
    \      if (row(i) == x) {\n                result.append((row(i), col(i)))\n \
    \           }\n            i += 1\n        }\n        result.toList", "      \
    \  val lst1 = lst.sortWith((x, y) => x.compareTo(y))\n        val lst2 = lst1.sortWith((x,\
    \ y) => y.compareTo(x))\n        val lst3 = lst2.sortWith((x, y) => x.compareTo(y))\n\
    \        val lst4 = lst3.sortWith((x, y) => y.compareTo(x))\n        val lst5\
    \ = lst4.sortWith((x, y) => x.compareTo(y))\n        val lst6 = lst5.sortWith((x,\
    \ y) => y.compareTo(x))\n        val lst7 = lst6.sortWith((x, y) => x.compareTo(y))\n\
    \        val lst8 = lst7.sortWith((x, y) => y.compareTo(x))\n        val lst9\
    \ = lst8.sortWith((x, y) => x.compareTo(y))\n        val lst10 = lst9.sortWith((x,\
    \ y) => y.compareTo(x))\n        val lst11 = lst10.sortWith((x, y) => x.compareTo(y))\n\
    \        val lst12 = lst11.sortWith((x, y) => y.compareTo(x))\n        val lst13\
    \ = lst12.sortWith((x, y) => x.compareTo(y))\n        val lst14 = lst13.sortWith((x,\
    \ y) => y.compareTo(x))\n        val lst15 = lst14.sortWith((x, y) => x.compareTo(y))\n\
    \        val lst16 = lst15.sortWith((x, y) => y.compareTo(x))\n        val lst17\
    \ = lst16.sortWith((x, y) => x.compareTo(y))\n        val lst18 = lst17.sortWith((x,\
    \ y) => y.compareTo(x))\n        val lst19 = lst18.sortWith((x, y) => x.compareTo(y))\n\
    \        val lst20 = lst19.sortWith((x, y) => y.compareTo(x))\n        val lst21\
    \ = lst20.sortWith((x, y) => x.compareTo(y))\n        val lst22 = lst21.sortWith((x,\
    \ y) => y.compareTo(x))\n        val lst23 = lst22.sortWith((x, y) => x.compareTo(y))\n\
    \        val lst24 = lst23.sortWith((x, y) => y.compareTo(x))\n        val lst25\
    \ = lst24.sortWith((x, y) => x.compareTo(y))\n        val lst26 = lst25.sortWith((x,\
    \ y) => y.compareTo(x))\n        val lst27 = lst26.sortWith((x, y) => x.compareTo(y))\n\
    \        val lst28 = lst27.sortWith((x, y) => y.compareTo(x))\n        val lst29\
    \ = lst28.sortWith((x, y) => x.compareTo(y))\n        val lst30 = lst29.sortWith((x,\
    \ y) => y.compareTo(x))", "        val rows = lst.map(_.length)\n        val cols\
    \ = lst(0).length\n        val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n\
    \        val row = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until rows){\n            row += i\n            for(j <- 0\
    \ until cols){\n                col += j\n                if(lst(i)(j) == x){\n\
    \                    result += (Tuple2(row.toInt, col.toInt))\n              \
    \  }\n            }\n        }\n        result.sortBy(_._1)\n        result.sortBy(_._2,\
    \ descending = true)\n        return result.toList", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        var row = 0\n        var col = 0\n        while(row < rows\
    \ && col < cols) {\n            val value = lst(row)(col)\n            if(value\
    \ == x) {\n                result.add(Tuple2(row, col))\n            }\n     \
    \       col += 1\n            if(col == cols) {\n                row += 1\n  \
    \              col = 0\n            }\n        }\n        result.sortBy(_._1)\n\
    \        result.sortBy(_._2, descending = true)\n        result.toList", "   \
    \     val rows = lst.map(_.length)\n        val cols = lst(0).length\n       \
    \ val result = new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        val rows\
    \ = lst.map(_.length)\n        val cols = lst(0).length\n        var i = 0\n \
    \       var j = 0\n        while (i < rows && j < cols) {\n            if (lst(i)(j)\
    \ == x) {\n                result.add(Tuple2(i, j))\n                i += 1\n\
    \                j += 1\n            } else if (lst(i)(j) > x) {\n           \
    \     i += 1\n            } else {\n                j += 1\n            }\n  \
    \      }\n        result.sortBy(_._1)\n        result.sortBy(_._2, descending\
    \ = true)\n        return result.toList", "        val m = lst.size\n        val\
    \ n = lst(0).size\n        val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n\
    \        val row = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < m) {\n            val row = lst(i).zipWithIndex.filter(_._1\
    \ == x).map(_._2).sorted\n            row.foreach(x => rows += x)\n          \
    \  row.foreach(x => col += x)\n            row.foreach(x => cols += x)\n     \
    \       val row1 = row.sortBy(x => -x)\n            val col1 = col.sortBy(x =>\
    \ -x)\n            val row2 = row1.sortBy(x => -x)\n            val col2 = col1.sortBy(x\
    \ => -x)\n            val row3 = row2.sortBy(x => -x)\n            val col3 =\
    \ col2.sortBy(x => -x)\n            val row4 = row3.sortBy(x => -x)\n        \
    \    val col4 = col3.sortBy(x => -x)\n            val row5 = row4.sortBy(x =>\
    \ -x)\n            val col5 = col4.sortBy(x => -x)\n            val row6 = row5.sortBy(x\
    \ => -x)\n            val col6 = col5.sortBy(x => -x)\n            val row7 =\
    \ row6.sortBy(x => -x)\n            val col7 = col6.sortBy(x => -x)\n        \
    \    val row8 = row7.sortBy(x => -x)\n            val col8 = col7.sortBy(x =>\
    \ -x)\n            val row9 = row8.sortBy(x => -x)\n            val col9 = col8.sortBy(x\
    \ => -x)\n            val row10 = row9.sortBy(x => -x)\n            val col10\
    \ = col9.sortBy(x => -x)\n            val row11 = row10.sortBy(x => -x)\n    \
    \        val col11 = col10.sortBy(x => -x)\n            val row12 = row11.sortBy(x\
    \ => -x)\n            val col12 = col11.sortBy(x => -x)\n            val row13\
    \ = row12.sortBy(x => -x)\n            val col13 = col12.sortBy(x => -x)\n   \
    \         val row14 = row13.sortBy(x => -x)\n            val col14 = col13.sortBy(x\
    \ => -x)\n            val row15 = ", "        val rows = lst.map(_.length)\n \
    \       val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        for (i <- 0 until rows) {\n            val row = lst(i)\n\
    \            val rowResult = row.zipWithIndex.filter(_._1 == x).map(_._2)\n  \
    \          val rowResultSorted = rowResult.sortBy(_._1).reverse\n            val\
    \ rowResultSortedByCol = rowResultSorted.sortBy(_._2).reverse\n            for\
    \ (j <- 0 until cols) {\n                val col = rowResultSortedByCol(j)\n \
    \               val colResult = col.zipWithIndex.filter(_._1 == x).map(_._2)\n\
    \                val colResultSorted = colResult.sortBy(_._1).reverse\n      \
    \          val colResultSortedByRow = colResultSorted.sortBy(_._2).reverse\n \
    \               val tuple = Tuple2(i, j) -> (colResultSortedByRow(0), colResultSortedByRow(colResultSorted.length\
    \ - 1))\n                result.add(tuple)\n            }\n        }\n       \
    \ result.sortBy(_._1).reverse", "        val rows = lst.map(_.length)\n      \
    \  val cols = lst(0).length\n        val result = new mutable.ArrayBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = new mutable.ArrayBuffer[Long]()\n        val col\
    \ = new mutable.ArrayBuffer[Long]()\n        var i = 0\n        while (i < rows.length)\
    \ {\n            val row = lst(i).zipWithIndex.sortBy(_._1).map(_._2)\n      \
    \      val col = lst(i).zipWithIndex.sortBy(_._2).map(_._1)\n            val row\
    \ = row.drop(x)\n            val col = col.drop(x)\n            val rowLength\
    \ = row.length\n            val colLength = col.length\n            val rowIndex\
    \ = row.indexOf(x)\n            val colIndex = col.indexOf(x)\n            val\
    \ rowStart = rowIndex - rowLength\n            val colStart = colIndex - colLength\n\
    \            val rowEnd = rowStart + rowLength\n            val colEnd = colStart\
    \ + colLength\n            val rowTuple = row.zip(col.drop(rowLength))\n     \
    \       val colTuple = col.zip(row.drop(colLength))\n            val rowTuple2\
    \ = rowTuple.sortBy(_._1).map(_._2)\n            val colTuple2 = colTuple.sortBy(_._2).map(_._1)\n\
    \            val rowTuple3 = rowTuple2.drop(x)\n            val colTuple3 = colTuple2.drop(x)\n\
    \            val rowTuple4 = rowTuple3.zipWithIndex.sortBy(_._1).map(_._2)\n \
    \           val colTuple4 = colTuple3.zipWithIndex.sortBy(_._2).map(_._1)\n  \
    \          val rowTuple5 = rowTuple4.drop(x)\n            val colTuple5 = colTuple4.drop(x)\n\
    \            val rowTuple6 = rowTuple5.zipWithIndex.sortBy(_._1).map(_._2)\n \
    \           val colTuple6 = colTuple5.zipWithIndex.sortBy(_._2).map(_._1)\n  \
    \          val rowTuple7 = rowTuple6.drop(x)\n            val colTuple7 = colTuple6.drop(x)\n\
    \            val rowTuple8 = rowTuple7.zipWithIndex.sortBy(_._1).map(_._2)\n \
    \           val colTuple8 = colTuple7.zipWithIndex.sortBy(_._2).map(_._1)\n  \
    \          val rowTuple9 = rowTuple8.drop(x)\n            val colTuple9 = colTuple8.drop(x)\n\
    \            val rowTuple10 = rowTuple9.zipWithIndex.sortBy(_._1).map(_._2)\n\
    \            val colTuple10 = colTuple9.zipWithIndex.sortBy(_._2).map", "    \
    \    val rows = lst.map(_.length)\n        val cols = lst(0).length\n        val\
    \ result = new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        val row = new\
    \ mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n\
    \        val row = new mutable.ArrayBuffer[Long]()\n        val col = new mutable.ArrayBuffer[Long]()\n\
    \        val rows = new mutable.ArrayBuffer[Long]()\n        val cols = new mutable.ArrayBuffer[Long]()\n",
  "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        val rowMap\
    \ = new mutable.HashMap[Long, Long]()\n        val colMap = new mutable.HashMap[Long,\
    \ Long]()\n        var row = 0\n        var col = 0\n        while(row < rows)\
    \ {\n            val rowSize = lst(row).length\n            while(col < cols)\
    \ {\n                val colSize = lst(row)(col).length\n                if(lst(row)(col)\
    \ == x) {\n                    result.append((row, col))\n                   \
    \ rowMap.put(row, rowMap.get(row) + 1)\n                    colMap.put(col, colMap.get(col)\
    \ + 1)\n                }\n                col += 1\n                if(col ==\
    \ colSize) {\n                    col += 1\n                }\n            }\n\
    \            row += 1\n            if(row == rowSize) {\n                row +=\
    \ 1\n            }\n        }\n        result.sortBy(_._1)\n        result.sortBy(_._2,\
    \ false)\n        return result.toList", "        val lst2 = lst.map(_.toList)\n\
    \        val lst3 = lst2.map(x => x.filter(_ == x))\n        val lst4 = lst3.map(x\
    \ => x.sortWith(_ < _))\n        val lst5 = lst4.map(x => x.sortWith(_ < _))\n\
    \        val lst6 = lst5.map(x => x.sortWith(_ < _))\n        val lst7 = lst6.map(x\
    \ => x.sortWith(_ < _))\n        val lst8 = lst7.map(x => x.sortWith(_ < _))\n\
    \        val lst9 = lst8.map(x => x.sortWith(_ < _))\n        val lst10 = lst9.map(x\
    \ => x.sortWith(_ < _))\n        val lst11 = lst10.map(x => x.sortWith(_ < _))\n\
    \        val lst12 = lst11.map(x => x.sortWith(_ < _))\n        val lst13 = lst12.map(x\
    \ => x.sortWith(_ < _))\n        val lst14 = lst13.map(x => x.sortWith(_ < _))\n\
    \        val lst15 = lst14.map(x => x.sortWith(_ < _))\n        val lst16 = lst15.map(x\
    \ => x.sortWith(_ < _))\n        val lst17 = lst16.map(x => x.sortWith(_ < _))\n\
    \        val lst18 = lst17.map(x => x.sortWith(_ < _))\n        val lst19 = lst18.map(x\
    \ => x.sortWith(_ < _))\n        val lst20 = lst19.map(x => x.sortWith(_ < _))\n\
    \        val lst21 = lst20.map(x => x.sortWith(_ < _))\n        val lst22 = lst21.map(x\
    \ => x.sortWith(_ < _))\n        val lst23 = lst22.map(x => x.sortWith(_ < _))\n\
    \        val lst24 = lst23.map(x => x.sortWith(_ < _))\n        val lst25 = lst24.map(x\
    \ => x.sortWith(_ < _))\n        val lst26 = lst25.map(x => x.sortWith(_ < _))\n\
    \        val lst27 = lst26.map(x => x.sortWith(_ < _))\n        val lst28 = lst27.map(x\
    \ => x.sortWith(_ < _))\n        val lst29 = lst28.map(x => x.sortWith(_ < _))\n\
    \        val lst30 = lst29.map(x => x.sortWith(_ < _))\n        val lst31 = lst30.map(x ",
  "        val rows = lst.map(_.size)\n        val cols = lst(0).size\n        val\
    \ result = new mutable.ArrayBuffer[Tuple2[Long, Long]]()\n        var i = 0\n\
    \        while (i < rows) {\n            var j = 0\n            while (j < cols)\
    \ {\n                if (lst(i)(j) == x) {\n                    result.append((i,\
    \ j))\n                }\n                j += 1\n            }\n            i\
    \ += 1\n        }\n        result.sortBy(_._1)\n        result.sortBy(_._2, descending\
    \ = true)\n        result", "        val lst1 = lst.sortWith(_.compareTo(x) <\
    \ 0)\n        val lst2 = lst1.sortWith(_.compareTo(x) > 0)\n        val lst3 =\
    \ lst2.sortWith(_.compareTo(x) < 0)\n        val lst4 = lst3.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst5 = lst4.sortWith(_.compareTo(x) < 0)\n        val lst6\
    \ = lst5.sortWith(_.compareTo(x) > 0)\n        val lst7 = lst6.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst8 = lst7.sortWith(_.compareTo(x) > 0)\n        val lst9\
    \ = lst8.sortWith(_.compareTo(x) < 0)\n        val lst10 = lst9.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst11 = lst10.sortWith(_.compareTo(x) < 0)\n        val lst12\
    \ = lst11.sortWith(_.compareTo(x) > 0)\n        val lst13 = lst12.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst14 = lst13.sortWith(_.compareTo(x) > 0)\n        val lst15\
    \ = lst14.sortWith(_.compareTo(x) < 0)\n        val lst16 = lst15.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst17 = lst16.sortWith(_.compareTo(x) < 0)\n        val lst18\
    \ = lst17.sortWith(_.compareTo(x) > 0)\n        val lst19 = lst18.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst20 = lst19.sortWith(_.compareTo(x) > 0)\n        val lst21\
    \ = lst20.sortWith(_.compareTo(x) < 0)\n        val lst22 = lst21.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst23 = lst22.sortWith(_.compareTo(x) < 0)\n        val lst24\
    \ = lst23.sortWith(_.compareTo(x) > 0)\n        val lst25 = lst24.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst26 = lst25.sortWith(_.compareTo(x) > 0)\n        val lst27\
    \ = lst26.sortWith(_.compareTo(x) < 0)\n        val lst28 = lst27.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst29 = lst28.sortWith(_.compareTo(x) < 0)\n        val lst30\
    \ = lst29.sortWith(_.compareTo(x) > 0)\n        val lst31 = lst30.sortWith(_.compareTo(x",
  "        val rowList = lst.map(row => row.filter(_ != x))\n        val rowTuples\
    \ = rowList.map(row => (row.indexOf(x), row.lastIndexOf(x)))\n        rowTuples.sortBy(_._1).reverse.sortBy(_._2).reverse",
  "        val lst1 = lst.sortBy(_(0))\n        val lst2 = lst1.sortBy(_(1)) // in\
    \ descending order\n        val lst3 = lst2.filter(_(0) != x)\n        val lst4\
    \ = lst3.sortBy(_(0))\n        val lst5 = lst4.sortBy(_(1)) // in descending order\n\
    \        lst5.map(_ -> Tuple2(_(0), _(1))).toList"]
stop_tokens:
- "\n    }\n"
