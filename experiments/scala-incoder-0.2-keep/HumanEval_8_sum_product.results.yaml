language: scala
name: HumanEval_8_sum_product
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product\
    \ = 1L\n        numbers.foreach(n => {\n            sum += n\n            product\
    \ *= n\n        })\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n); product\n        (sum, product)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8ro_lnzh.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n); product\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                 value += is not a member of Long - did you mean sum.!=?\n\e\
    [33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmp8ro_lnzh.scala:13:40 ----------------\e\
    [0m\e[0m\n\e[33m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n); product\n\
    \e[33m\e[33m   |\e[0m                                        ^^^^^^^\e[0m\n\e\
    [33m   |\e[0mA pure expression does nothing in statement position; you may be\
    \ omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 warning found\n1 error found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach { number =>\n            sum += number\n     \
    \       product *= number\n        }\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqnkfb9f9.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += number\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqnkfb9f9.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= number\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach { x => sum += x; product *= x }\n        (sum,\
    \ product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkfiv39tv.scala:13:35 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach { \e[36mx\e[0m => sum += x; product\
    \ *= x }\n\e[31m\e[31m   |\e[0m                               ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                 value += is not a member of Long - did you mean\
    \ sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkfiv39tv.scala:13:49\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach {\
    \ \e[36mx\e[0m => sum += x; product *= x }\n\e[31m\e[31m   |\e[0m            \
    \                             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(number => sum += number)\n        numbers.foreach(number\
    \ => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7anz5_07.scala:13:38 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => sum += number)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                 value += is not a member of Long - did you mean sum.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp7anz5_07.scala:14:42 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => product\
    \ *= number)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(number => sum += number)\n        numbers.foreach(number\
    \ => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7anz5_07.scala:13:38 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => sum += number)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                 value += is not a member of Long - did you mean sum.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp7anz5_07.scala:14:42 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => product\
    \ *= number)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)((sum,\
    \ number) => sum + number)\n        val product = numbers.foldLeft(1L)((product,\
    \ number) => product * number)\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)(_\
    \ + _)\n        val product = numbers.foldLeft(1L)(_ * _)\n        (sum, product)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach { number =>\n            sum += number\n     \
    \       product *= number\n        }\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqnkfb9f9.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += number\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqnkfb9f9.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= number\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(number => sum += number)\n        numbers.foreach(number\
    \ => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7anz5_07.scala:13:38 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => sum += number)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                 value += is not a member of Long - did you mean sum.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp7anz5_07.scala:14:42 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => product\
    \ *= number)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n); product\n        (sum, product)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8ro_lnzh.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n); product\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                 value += is not a member of Long - did you mean sum.!=?\n\e\
    [33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmp8ro_lnzh.scala:13:40 ----------------\e\
    [0m\e[0m\n\e[33m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n); product\n\
    \e[33m\e[33m   |\e[0m                                        ^^^^^^^\e[0m\n\e\
    [33m   |\e[0mA pure expression does nothing in statement position; you may be\
    \ omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 warning found\n1 error found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach { n =>\n            sum += n\n            product\
    \ *= n\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgjqh6kua.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgjqh6kua.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= n\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)((sum,\
    \ number) => sum + number)\n        val product = numbers.foldLeft(1L)((product,\
    \ number) => product * number)\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)((sum,\
    \ n) => sum + n)\n        val product = numbers.foldLeft(1L)((product, n) => product\
    \ * n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804101
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)((sum,\
    \ number) => sum + number)\n        val product = numbers.foldLeft(1L)((product,\
    \ number) => product * number)\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach { number =>\n            sum += number\n     \
    \       product *= number\n        }\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqnkfb9f9.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += number\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqnkfb9f9.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= number\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum = sum + n)\n        numbers.foreach(n\
    \ => product = product * n)\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpli_673bf.scala:13:33 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum = sum + n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                             Reassignment to val sum\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpli_673bf.scala:14:37 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product = product\
    \ * n)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Reassignment to val product\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804097
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(number => sum += number)\n        numbers.foreach(number\
    \ => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7anz5_07.scala:13:38 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => sum += number)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                 value += is not a member of Long - did you mean sum.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp7anz5_07.scala:14:42 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => product\
    \ *= number)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(number => sum += number)\n        numbers.foreach(number\
    \ => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7anz5_07.scala:13:38 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => sum += number)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                 value += is not a member of Long - did you mean sum.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp7anz5_07.scala:14:42 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => product\
    \ *= number)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach { number =>\n            sum += number\n     \
    \       product *= number\n        }\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqnkfb9f9.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += number\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqnkfb9f9.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= number\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)((sum,\
    \ number) => sum + number)\n        val product = numbers.foldLeft(1L)((product,\
    \ number) => product * number)\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)(_\
    \ + _)\n        val product = numbers.foldLeft(1L)(_ * _)\n        (sum, product)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804101
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product\
    \ = 1L\n        numbers.foreach(n => {\n            sum += n\n            product\
    \ *= n\n        })\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => {\n            sum += n\n            product\
    \ *= n\n        })\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2f1bbmn0.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2f1bbmn0.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= n\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach { number =>\n            sum += number\n     \
    \       product *= number\n        }\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqnkfb9f9.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += number\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqnkfb9f9.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= number\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum = sum + n)\n        numbers.foreach(n\
    \ => product = product * n)\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpli_673bf.scala:13:33 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum = sum + n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                             Reassignment to val sum\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpli_673bf.scala:14:37 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product = product\
    \ * n)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Reassignment to val product\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804097
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach { number =>\n            sum += number\n     \
    \       product *= number\n        }\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqnkfb9f9.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += number\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqnkfb9f9.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= number\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => {\n            sum += n\n            product\
    \ *= n\n        })\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2f1bbmn0.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2f1bbmn0.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= n\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804101
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)((sum,\
    \ number) => sum + number)\n        val product = numbers.foldLeft(1L)((product,\
    \ number) => product * number)\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(number => sum += number)\n        numbers.foreach(number\
    \ => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7anz5_07.scala:13:38 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => sum += number)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                 value += is not a member of Long - did you mean sum.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp7anz5_07.scala:14:42 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => product\
    \ *= number)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => {\n            sum += n\n            product\
    \ *= n\n        })\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2f1bbmn0.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2f1bbmn0.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= n\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => {\n            sum += n\n            product\
    \ *= n\n        })\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2f1bbmn0.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2f1bbmn0.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= n\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach { number =>\n            sum += number\n     \
    \       product *= number\n        }\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqnkfb9f9.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += number\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqnkfb9f9.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= number\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n); product\n        (sum, product)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8ro_lnzh.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n); product\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                 value += is not a member of Long - did you mean sum.!=?\n\e\
    [33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmp8ro_lnzh.scala:13:40 ----------------\e\
    [0m\e[0m\n\e[33m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n); product\n\
    \e[33m\e[33m   |\e[0m                                        ^^^^^^^\e[0m\n\e\
    [33m   |\e[0mA pure expression does nothing in statement position; you may be\
    \ omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 warning found\n1 error found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach { number =>\n            sum += number\n     \
    \       product *= number\n        }\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqnkfb9f9.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += number\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqnkfb9f9.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= number\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => {\n            sum += n\n            product\
    \ *= n\n        })\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2f1bbmn0.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2f1bbmn0.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= n\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n); product\n        (sum, product)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8ro_lnzh.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n); product\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                 value += is not a member of Long - did you mean sum.!=?\n\e\
    [33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmp8ro_lnzh.scala:13:40 ----------------\e\
    [0m\e[0m\n\e[33m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n); product\n\
    \e[33m\e[33m   |\e[0m                                        ^^^^^^^\e[0m\n\e\
    [33m   |\e[0mA pure expression does nothing in statement position; you may be\
    \ omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 warning found\n1 error found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach { n =>\n            sum += n\n            product\
    \ *= n\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgjqh6kua.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgjqh6kua.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= n\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => {\n            sum += n\n            product\
    \ *= n\n        })\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2f1bbmn0.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2f1bbmn0.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= n\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach { number =>\n            sum += number\n     \
    \       product *= number\n        }\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqnkfb9f9.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += number\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqnkfb9f9.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= number\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(number => sum += number)\n        numbers.foreach(number\
    \ => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7anz5_07.scala:13:38 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => sum += number)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                 value += is not a member of Long - did you mean sum.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp7anz5_07.scala:14:42 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => product\
    \ *= number)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n); numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkkd16dy9.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n); numbers.foreach(\e\
    [36mn\e[0m => product *= n)\n\e[31m\e[31m   |\e[0m                           \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m                 value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkkd16dy9.scala:13:69\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e\
    [36mn\e[0m => sum += n); numbers.foreach(\e[36mn\e[0m => product *= n)\n\e[31m\e\
    [31m   |\e[0m                                                             ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)((sum,\
    \ number) => sum + number)\n        val product = numbers.foldLeft(1L)((product,\
    \ number) => product * number)\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n); numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkkd16dy9.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n); numbers.foreach(\e\
    [36mn\e[0m => product *= n)\n\e[31m\e[31m   |\e[0m                           \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m                 value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkkd16dy9.scala:13:69\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e\
    [36mn\e[0m => sum += n); numbers.foreach(\e[36mn\e[0m => product *= n)\n\e[31m\e\
    [31m   |\e[0m                                                             ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => {\n            sum += n\n            product\
    \ *= n\n        })\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2f1bbmn0.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2f1bbmn0.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= n\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804101
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)((sum,\
    \ number) => sum + number)\n        val product = numbers.foldLeft(1L)((product,\
    \ number) => product * number)\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)(_\
    \ + _)\n        val product = numbers.foldLeft(1L)(_ * _)\n        (sum, product)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n); product\n        (sum, product)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8ro_lnzh.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n); product\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                 value += is not a member of Long - did you mean sum.!=?\n\e\
    [33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmp8ro_lnzh.scala:13:40 ----------------\e\
    [0m\e[0m\n\e[33m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n); product\n\
    \e[33m\e[33m   |\e[0m                                        ^^^^^^^\e[0m\n\e\
    [33m   |\e[0mA pure expression does nothing in statement position; you may be\
    \ omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 warning found\n1 error found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => {\n            sum += n\n            product\
    \ *= n\n        })\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2f1bbmn0.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2f1bbmn0.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= n\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach { n =>\n            sum += n\n            product\
    \ *= n\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgjqh6kua.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgjqh6kua.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= n\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)((sum,\
    \ number) => sum + number)\n        val product = numbers.foldLeft(1L)((product,\
    \ number) => product * number)\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)((sum,\
    \ number) => sum + number)\n        val product = numbers.foldLeft(1L)((product,\
    \ number) => product * number)\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(number => sum += number)\n        numbers.foreach(number\
    \ => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7anz5_07.scala:13:38 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => sum += number)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                 value += is not a member of Long - did you mean sum.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp7anz5_07.scala:14:42 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => product\
    \ *= number)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product\
    \ = 1L\n        numbers.foreach(n => {\n            sum += n\n            product\
    \ *= n\n        })\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804101
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)((sum,\
    \ number) => sum + number)\n        val product = numbers.foldLeft(1L)((product,\
    \ number) => product * number)\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(number => sum += number)\n        numbers.foreach(number\
    \ => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7anz5_07.scala:13:38 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => sum += number)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                 value += is not a member of Long - did you mean sum.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp7anz5_07.scala:14:42 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => product\
    \ *= number)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach { number =>\n            sum += number\n     \
    \       product *= number\n        }\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqnkfb9f9.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += number\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqnkfb9f9.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= number\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)(_\
    \ + _)\n        val product = numbers.foldLeft(1L)(_ * _)\n        (sum, product)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(number => sum += number)\n        numbers.foreach(number\
    \ => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7anz5_07.scala:13:38 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => sum += number)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                 value += is not a member of Long - did you mean sum.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp7anz5_07.scala:14:42 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => product\
    \ *= number)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach { number =>\n            sum += number\n     \
    \       product *= number\n        }\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqnkfb9f9.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += number\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqnkfb9f9.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= number\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(number => sum += number)\n        numbers.foreach(number\
    \ => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7anz5_07.scala:13:38 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => sum += number)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                 value += is not a member of Long - did you mean sum.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp7anz5_07.scala:14:42 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => product\
    \ *= number)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)(_\
    \ + _)\n        val product = numbers.foldLeft(1L)(_ * _)\n        (sum, product)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(number => sum += number)\n        numbers.foreach(number\
    \ => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7anz5_07.scala:13:38 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => sum += number)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                 value += is not a member of Long - did you mean sum.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp7anz5_07.scala:14:42 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => product\
    \ *= number)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach { number =>\n            sum += number\n     \
    \       product *= number\n        }\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqnkfb9f9.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += number\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqnkfb9f9.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= number\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)((sum,\
    \ n) => sum + n)\n        val product = numbers.foldLeft(1L)((product, n) => product\
    \ * n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product\
    \ = 1L\n        numbers.foreach(n => {\n            sum += n\n            product\
    \ *= n\n        })\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => {\n            sum += n\n            product\
    \ *= n\n        })\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2f1bbmn0.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2f1bbmn0.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= n\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product\
    \ = 1L\n        numbers.foreach(n => {\n            sum += n\n            product\
    \ *= n\n        })\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach { number =>\n            sum += number\n     \
    \       product *= number\n        }\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqnkfb9f9.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += number\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqnkfb9f9.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= number\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)((sum,\
    \ number) => sum + number)\n        val product = numbers.foldLeft(1L)((product,\
    \ number) => product * number)\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(number => sum += number)\n        numbers.foreach(number\
    \ => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7anz5_07.scala:13:38 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => sum += number)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                 value += is not a member of Long - did you mean sum.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp7anz5_07.scala:14:42 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => product\
    \ *= number)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(number => sum += number)\n        numbers.foreach(number\
    \ => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7anz5_07.scala:13:38 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => sum += number)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                 value += is not a member of Long - did you mean sum.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp7anz5_07.scala:14:42 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => product\
    \ *= number)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product\
    \ *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeb7kcl1s.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach { number =>\n            sum += number\n     \
    \       product *= number\n        }\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqnkfb9f9.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += number\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqnkfb9f9.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            product *= number\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(n => sum = sum + n)\n        numbers.foreach(n\
    \ => product = product * n)\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpli_673bf.scala:13:33 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum = sum + n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                             Reassignment to val sum\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpli_673bf.scala:14:37 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mn\e[0m => product = product\
    \ * n)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Reassignment to val product\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804097
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(number => sum += number)\n        numbers.foreach(number\
    \ => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7anz5_07.scala:13:38 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => sum += number)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                 value += is not a member of Long - did you mean sum.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp7anz5_07.scala:14:42 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => product\
    \ *= number)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659804100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    //\
    \ (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
    \ : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product\
    \ = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product\
    \ *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkbu29pkg.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804100
