language: scala
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_map = mutable.Map[String, mutable.Stack[String]]()\n\
    \        val paren_stack_map_keys = mutable.Map[String, Long]()\n        val paren_stack_map_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated =\
    \ mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_keys_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_values_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_keys_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_values_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_keys_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_values_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_keys_updated_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_values_updated_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_keys_updated_updated_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_values_updated_updated_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_keys_updated_updated_updated_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_values_updated_updated_updated_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_keys_updated_updated_updated_updated_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_values_updated_updated_updated_updated_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_keys_updated_updated_updated_updated_updated_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_values_updated_updated_updated_updated_updated_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_keys_updated_updated_updated_updated_updated_updated_updated_updated_updated_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated_values_updated_updated_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpds39aogw.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpds39aogw.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpds39aogw.scala:11:50 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.Map[\e[35mString\e\
    [0m, mutable.Stack[\e[35mString\e[0m]]()\n\e[31m\e[31m   |\e[0m              \
    \                                    ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpds39aogw.scala:11:30 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.Map[\e\
    [35mString\e[0m, mutable.Stack[\e[35mString\e[0m]]()\n\e[31m\e[31m   |\e[0m  \
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpds39aogw.scala:12:35 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_map_keys\e[0m = mutable.Map[\e[35mString\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                               \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpds39aogw.scala:13:37\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e"
  stdout: ''
  timestamp: 1659798260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_queue = mutable.Queue[Long]()\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.en\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu95kb1kn.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpu95kb1kn.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_queue\e[0m = mutable.Queue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_map = mutable.HashMap[String, Long]()\n        paren_stack.push(paren_string)\n\
    \        paren_stack_map.put(paren_string, 0)\n        val max_level = 0\n   \
    \     while(paren_stack.nonEmpty) {\n            val paren_string = paren_stack.pop()\n\
    \            val level = paren_stack_map.get(paren_string)\n            if (level\
    \ == null) {\n                paren_stack_map.put(paren_string, paren_stack_map.get(paren_string)\
    \ + 1)\n            } else {\n                paren_stack_map.put(paren_string,\
    \ level + 1)\n                if (level > max_level) {\n                    max_level\
    \ = level\n                }\n            }\n            val groups = paren_string.split(\"\
    \ \")\n            for(i <- 0 until groups.length - 1) {\n                val\
    \ group = groups(i)\n                val next_group = groups(i + 1)\n        \
    \        val next_level = paren_stack_map.get(next_group)\n                if\
    \ (next_level == null) {\n                    paren_stack.push(next_group)\n \
    \                   paren_stack_map.put(next_group, paren_stack_map.get(next_group)\
    \ + 1)\n                } else {\n                    paren_stack.push(next_group)\n\
    \                    paren_stack_map.put(next_group, next_level + 1)\n       \
    \         }\n            }\n        }\n        max_level\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc8rzdo93.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpc8rzdo93.scala:11:30 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                              Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpc8rzdo93.scala:23:30\
    \ -----------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                   \
    \ max_level = level\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val max_level\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc8rzdo93.scala:40:8 ---------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        max_level\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (max_level : Int)\n\e[31m   |\e[0m     \
    \   Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count = mutable.Stack[Long]()\n        val paren_stack_top_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_count_size = mutable.Stack[Long]()\n      \
    \  val paren_stack_top_count_count_count = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_count_count_size = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_count_count_count = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_count_count_count_size = mutable.Stack[Long]()\n     \
    \   val paren_stack_top_count_count_count_count_count = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_count_count_count_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_count_count_count_count_count = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_count_count_count_count_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_count_count_count_count_count_count = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_count_count_count_count_count_count_size =\
    \ mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg8a9330t.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_count_count_count_count_count_count_count_count_count_count_size\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_count_count_count_count_count_count_count_count_count_count_size\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_top_count_count_count_count_count_count_count_count_count_count_size\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpg8a9330t.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpg8a9330t.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m =\
    \ mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg8a9330t.scala:12:30\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_top\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpg8a9330t.scala:13:35 ----------------------"
  stdout: ''
  timestamp: 1659798260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val max_level\
    \ = 0\n        val max_level_size = 0\n        val max_level_array = new Array[Long](paren_array_size)\n\
    \        val paren_array_index = 0\n        val paren_array_index_size = paren_array_size\n\
    \        val paren_array_index_index = 0\n        val paren_array_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_index = 0\n        val\
    \ paren_array_index_index_index_size = paren_array_size\n        val paren_array_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_size = paren_array_size\n\
    \        val paren_array_index_index_index_index_index = 0\n        val paren_array_index_index_index_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_size = paren_array_size\n\
    \        val paren_array_index_index_index_index_index_index_index = 0\n     \
    \   val paren_array_index_index_index_index_index_index_index_size = paren_array_size\n\
    \        val paren_array_index_index_index_index_index_index_index_index = 0\n\
    \        val paren_array_index_index_index_index_index_index_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfi_06xh0.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfi_06xh0.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_array_index_index_index_index_index_index_index_index_index_index_index\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_index_index_index_index_index_index_index_index_index_index_index\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_array_index_index_index_index_index_index_index_index_index_index_index\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpfi_06xh0.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mparen_array_index_index_index_index_index_index_index_index_index_index_index_size\e\
    [0m = paren_array_size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_index_index_index_index_index_index_index_index_index_index_index_size\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_array_index_index_index_index_index_index_index_index_index_index_index_size\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpfi_06xh0.scala:44:5 ---------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_levels = mutable.ListBuffer[Long]()\n        val paren_level\
    \ = 0\n        val paren_open = paren_string match {\n            case \"\" =>\
    \ 0\n            case x => x.indexOf('(')\n        }\n        val paren_close\
    \ = paren_string match {\n            case \"\" => 0\n            case x => x.indexOf(')')\n\
    \        }\n        val paren_len = paren_close - paren_open\n        val paren_len\
    \ = paren_len / 2\n        val paren_len = math.min(paren_len, paren_stack.size)\n\
    \        paren_stack.push(paren_len)\n        paren_levels += paren_level\n  \
    \      paren_string match {\n            case \"\" => paren_levels\n         \
    \   case x => {\n                val paren_len = x.indexOf('(') - x.indexOf(')')\n\
    \                val paren_len = math.min(paren_len, paren_stack.size)\n     \
    \           paren_stack.push(paren_len)\n                paren_levels += paren_level\n\
    \                parseNestedParens(x)\n            }\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5zxeuoa6.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_len\e[0m = paren_len\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_len is already defined as \e[33mvalue\e[0m \e[35mparen_len\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5zxeuoa6.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_len\e[0m = math.min(paren_len,\
    \ paren_stack.size)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_len is already defined as \e[33mvalue\e[0m \e[35mparen_len\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp5zxeuoa6.scala:10:26 ------------------------\e[0m\e[0m\n\
    \e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp5zxeuoa6.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp5zxeuoa6.scala:30:20 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                \e[33mval\e[0m \e[36mparen_len\e[0m =\
    \ math.min(paren_len, paren_stack.size)\n\e[31m\e[31m   |\e[0m               \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mparen_len\
    \ is already defined as \e[33mvalue\e[0m \e[3"
  stdout: ''
  timestamp: 1659798256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_groups = paren_string.split(\"\
    \ \").map(_.toLong)\n        val max_levels = paren_groups.foldLeft(0)((max, group)\
    \ => max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpugidg0uj.scala:12:4 ----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\nException in thread \"main\" java.lang.StackOverflowError\n\
    \tat dotty.tools.dotc.typer.Typer.typedInfixOp(Typer.scala:2706)\n\tat dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2871)\n\
    \tat dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2895)\n\tat dotty.tools.dotc.typer.Typer.typed(Typer.scala:2960)\n\
    \tat dotty.tools.dotc.typer.Typer.typed(Typer.scala:2964)\n\tat dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:3080)\n\
    \tat dotty.tools.dotc.typer.Typer.typeSelectOnTerm$1(Typer.scala:645)\n\tat dotty.tools.dotc.typer.Typer.typedSelect(Typer.scala:695)\n\
    \tat dotty.tools.dotc.typer.Typer.typedNamed$1(Typer.scala:2801)\n\tat dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2894)\n\
    \tat dotty.tools.dotc.typer.Typer.typed(Typer.scala:2960)\n\tat dotty.tools.dotc.typer.Typer.typed(Typer.scala:2964)\n\
    \tat dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:3080)\n\tat dotty.tools.dotc.typer.Applications.realApply$1(Applications.scala:898)\n\
    \tat dotty.tools.dotc.typer.Applications.typedApply(Applications.scala:1040)\n\
    \tat dotty.tools.dotc.typer.Applications.typedApply$(Applications.scala:327)\n\
    \tat dotty.tools.dotc.typer.Typer.typedApply(Typer.scala:117)\n\tat dotty.tools.dotc.typer.Typer.typedInfixOp(Typer.scala:2717)\n\
    \tat dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2871)\n\tat dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2895)\n\
    \tat dotty.tools.dotc.typer.Typer.typed(Typer.scala:2960)\n\tat dotty.tools.dotc.typer.Typer.typed(Typer.scala:2964)\n\
    \tat dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:3080)\n\tat dotty.tools.dotc.typer.Typer.typeSelectOnTerm$1(Typer.scala:645)\n\
    \tat dotty.tools.dotc.typer.Typer.typedSelect(Typer.scala:695)\n\tat dotty.tools.dotc.typer.Typer.typedNamed$1(Typer.scala:2801)\n\
    \tat dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2894)\n\tat dotty.tools.dotc.typer.Typer.typed(Typer.scala:2960)\n\
    \tat dotty.tools."
  stdout: 'java.lang.StackOverflowError while compiling /tmp/tmpugidg0uj.scala

    '
  timestamp: 1659798257
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_counter = mutable.Stack[Long]()\n        val paren_stack_counter_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes = mutable.Stack[Long]()\n\
    \        val paren_stack_counter_size_sizes_sizes = mutable.Stack[Long]()\n  \
    \      val paren_stack_counter_size_sizes_sizes_sizes = mutable.Stack[Long]()\n\
    \        val paren_stack_counter_size_sizes_sizes_sizes_sizes = mutable.Stack[Long]()\n\
    \        val paren_stack_counter_size_sizes_sizes_sizes_sizes_sizes = mutable.Stack[Long]()\n\
    \        val paren_stack_counter_size_sizes_sizes_sizes_sizes_sizes_sizes = mutable.Stack[Long]()\n\
    \        val paren_stack_counter_size_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_size_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1knp60wx.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1knp60wx.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp1knp60wx.scala:11:34 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_counter\e[0m = mutable.Stack[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                  Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1knp60wx.scala:12:39 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_counter_size\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp1knp60wx.scala:13:45 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_counter_size_sizes\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                                        \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp1knp60wx.scala:14:51 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_counter_size_sizes_sizes\e[0m "
  stdout: ''
  timestamp: 1659798261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_map = mutable.Map[Long, Long]()\n        val paren_stack_map_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_keys = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values = mutable.Map[Long, Long]()\n     \
    \   val paren_stack_map_values_values_keys = mutable.Map[Long, Long]()\n     \
    \   val paren_stack_map_values_values_values = mutable.Map[Long, Long]()\n   \
    \     val paren_stack_map_values_values_values_keys = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_values_values = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_values_values_keys = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_keys_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys_values_values_values_keys_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1nr85t_u.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1nr85t_u.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp1nr85t_u.scala:11:30 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1nr85t_u.scala:12:35 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_keys\e[0m\
    \ = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                                ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp1nr85t_u.scala:13:37 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_values\e[0m =\
    \ mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m     \
    \                                ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp1nr85t_u.scala:14:42 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_values_keys\e\
    [0m = mutable.Map[\e[35mL"
  stdout: ''
  timestamp: 1659798260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_map = mutable.Map[Long, Long]()\n        val paren_stack_map_keys\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values = mutable.Set[Long]()\n\
    \        val paren_stack_map_values_count = mutable.Set[Long]()\n        val paren_stack_map_values_count_max\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_count_max_index =\
    \ mutable.Set[Long]()\n        val paren_stack_map_values_count_max_value = mutable.Set[Long]()\n\
    \        val paren_stack_map_values_count_max_key = None\n        val paren_stack_map_values_count_max_key_index\
    \ = None\n        val paren_stack_map_values_count_max_value_index = None\n  \
    \      val paren_stack_map_values_count_max_value = None\n        val paren_stack_map_values_count_max_key\
    \ = None\n        val paren_stack_map_values_count_max_key_index = None\n    \
    \    val paren_stack_map_values_count_max_value_index = None\n        val paren_stack_map_values_count_max_value\
    \ = None\n        val paren_stack_map_values_count_max_key = None\n        val\
    \ paren_stack_map_values_count_max_key_index = None\n        val paren_stack_map_values_count_max_value_index\
    \ = None\n        val paren_stack_map_values_count_max_value = None\n        val\
    \ paren_stack_map_values_count_max_key = None\n        val paren_stack_map_values_count_max_key_index\
    \ = None\n        val paren_stack_map_values_count_max_value_index = None\n  \
    \      val paren_stack_map_values_count_max_value = None\n        val paren_stack_map_values_count_max_key\
    \ = None\n        val paren_stack_map_values_count_max_key_index = None\n    \
    \    val paren_stack_map_values_count_max_value_index = None\n        val paren_stack_map_values_count_max_value\
    \ = None\n        val paren_stack_map_values_count_max_key = None\n        val\
    \ paren_stack_map_values_count_max_key_index = None\n        val paren_stack_map_values_count_max_value_index\
    \ = None\n        val paren_stack_map_values_count_max_value = None\n        val\
    \ paren_stack_map_values_count_max_key = None\n        val paren_stack_map_values_count_max_key_index\
    \ = None\n        val paren_stack_map_values_count_max_value_index = None\n  \
    \      val paren_stack_map_values_count_max_value = None\n        val paren_stack_map_values_count_max_key\
    \ = None\n        val paren_stack_map_values_count_max_key_index = None\n    \
    \    val paren_stack_map_values_count_max_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps4p3_w9y.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps4p3_w9y.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_map_values_count_max_value\e[0m = None\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mparen_stack_map_values_count_max_value is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_map_values_count_max_value\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps4p3_w9y.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_map_values_count_max_key\e[0m = None\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mparen_stack_map_values_count_max_key\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_map_values_count_max_key\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps4p3_w9y.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_values_count_max_key_index\e\
    [0m = None\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_values_count_max_key_index is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_stack_map_values_count_max_key_index\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmps4p3_w9y.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_values_count_max_value_index\e\
    [0m = None\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n"
  stdout: ''
  timestamp: 1659798261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpawffysbx.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_levels is already defined as \e[33mvalue\e[0m \e[35mparen_levels\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpawffysbx.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_level\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mparen_level\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_level\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpawffysbx.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_levels\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mparen_levels\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_levels\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpawffysbx.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_level\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_level is already defined as \e[33mvalue\e[0m \e[35mparen_level\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpawffysbx.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_levels is "
  stdout: ''
  timestamp: 1659798261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_groups = paren_string.split(\"\
    \ \")\n        val paren_groups_with_paren = paren_groups.map(x => if (x.equals(\"\
    (\")) 1 else 0)\n        val paren_groups_with_paren_sum = paren_groups_with_paren.sum\n\
    \        val paren_groups_with_paren_max = paren_groups_with_paren_sum / paren_groups_with_paren_sum\n\
    \        val paren_groups_with_paren_max_index = paren_groups_with_paren.indexOf(paren_groups_with_paren_max)\n\
    \        val paren_groups_with_paren_max_index_plus_1 = paren_groups_with_paren_max_index\
    \ + 1\n        val paren_groups_with_paren_max_index_minus_1 = paren_groups_with_paren_max_index\
    \ - 1\n        val paren_groups_with_paren_max_index_minus_2 = paren_groups_with_paren_max_index\
    \ - 2\n        val paren_groups_with_paren_max_index_minus_3 = paren_groups_with_paren_max_index\
    \ - 3\n        val paren_groups_with_paren_max_index_minus_4 = paren_groups_with_paren_max_index\
    \ - 4\n        val paren_groups_with_paren_max_index_minus_5 = paren_groups_with_paren_max_index\
    \ - 5\n        val paren_groups_with_paren_max_index_minus_6 = paren_groups_with_paren_max_index\
    \ - 6\n        val paren_groups_with_paren_max_index_minus_7 = paren_groups_with_paren_max_index\
    \ - 7\n        val paren_groups_with_paren_max_index_minus_8 = paren_groups_with_paren_max_index\
    \ - 8\n        val paren_groups_with_paren_max_index_minus_9 = paren_groups_with_paren_max_index\
    \ - 9\n        val paren_groups_with_paren_max_index_minus_10 = paren_groups_with_paren_max_index\
    \ - 10\n        val paren_groups_with_paren_max_index_minus_11 = paren_groups_with_paren_max_index\
    \ - 11\n        val paren_groups_with_paren_max_index_minus_12 = paren_groups_with_paren_max_index\
    \ - 12\n        val paren_groups_with_paren_max_index_minus_13 = paren_groups_with_paren_max_index\
    \ - 13\n        val paren_groups_with_paren_max_index_minus_14 = paren_groups_with_paren_max_index\
    \ - 14\n        val paren_groups_with_paren_max_index_minus_15 = paren_groups_with_paren_max_index\
    \ - 15\n        val paren_groups_with_paren_max_index_minus_16 = paren_groups_with_paren_max_index\
    \ - 16\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpv9isekvg.scala:32:11 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv9isekvg.scala:33:5 ---------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_string = mutable.Stack[String]()\n        val paren_stack_level\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_string = mutable.Stack[Int]()\n\
    \        val paren_stack_level_string2 = mutable.Stack[Int]()\n        val paren_stack_level_string3\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_string4 = mutable.Stack[Int]()\n\
    \        val paren_stack_level_string5 = mutable.Stack[Int]()\n        val paren_stack_level_string6\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_string7 = mutable.Stack[Int]()\n\
    \        val paren_stack_level_string8 = mutable.Stack[Int]()\n        val paren_stack_level_string9\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_string10 = mutable.Stack[Int]()\n\
    \        val paren_stack_level_string11 = mutable.Stack[Int]()\n        val paren_stack_level_string12\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_string13 = mutable.Stack[Int]()\n\
    \        val paren_stack_level_string14 = mutable.Stack[Int]()\n        val paren_stack_level_string15\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_string16 = mutable.Stack[Int]()\n\
    \        val paren_stack_level_string17 = mutable.Stack[Int]()\n        val paren_stack_level_string18\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_string19 = mutable.Stack[Int]()\n\
    \        val paren_stack_level_string20 = mutable.Stack[Int]()\n        val paren_stack_level_string21\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_string22 = mutable.Stack[Int]()\n\
    \        val paren_stack_level_string23 = mutable.Stack[Int]()\n        val paren_stack_level_string24\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_string25 = mutable.Stack[Int]()\n\
    \        val paren_stack_level_string26 = mutable.Stack[Int]()\n        val paren_stack_level_string27\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_string28 = mutable.Stack[Int]()\n\
    \        val paren_stack_\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl9iy7rsu.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl9iy7rsu.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpl9iy7rsu.scala:11:33 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_string\e[0m = mutable.Stack[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl9iy7rsu.scala:12:32 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level\e[0m =\
    \ mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                                Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl9iy7rsu.scala:13:39\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_level_string\e[0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                       ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                       Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpl9iy7rsu.scala:14:40 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level_string2\e\
    [0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m   "
  stdout: ''
  timestamp: 1659798260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_queue = mutable.Queue[Long]()\n        val paren_levels = mutable.Map[Long,\
    \ Long]()\n        val paren_levels_map = mutable.Map[Long, Long]()\n        val\
    \ paren_levels_map_reverse = mutable.Map[Long, Long]()\n        val paren_levels_map_reverse2\
    \ = mutable.Map[Long, Long]()\n        val paren_levels_map_reverse3 = mutable.Map[Long,\
    \ Long]()\n        val paren_levels_map_reverse4 = mutable.Map[Long, Long]()\n\
    \        val paren_levels_map_reverse5 = mutable.Map[Long, Long]()\n        val\
    \ paren_levels_map_reverse6 = mutable.Map[Long, Long]()\n        val paren_levels_map_reverse7\
    \ = mutable.Map[Long, Long]()\n        val paren_levels_map_reverse8 = mutable.Map[Long,\
    \ Long]()\n        val paren_levels_map_reverse9 = mutable.Map[Long, Long]()\n\
    \        val paren_levels_map_reverse10 = mutable.Map[Long, Long]()\n        val\
    \ paren_levels_map_reverse11 = mutable.Map[Long, Long]()\n        val paren_levels_map_reverse12\
    \ = mutable.Map[Long, Long]()\n        val paren_levels_map_reverse13 = mutable.Map[Long,\
    \ Long]()\n        val paren_levels_map_reverse14 = mutable.Map[Long, Long]()\n\
    \        val paren_levels_map_reverse15 = mutable.Map[Long, Long]()\n        val\
    \ paren_levels_map_reverse16 = mutable.Map[Long, Long]()\n        val paren_levels_map_reverse17\
    \ = mutable.Map[Long, Long]()\n        val paren_levels_map_reverse18 = mutable.Map[Long,\
    \ Long]()\n        val paren_levels_map_reverse19 = mutable.Map[Long, Long]()\n\
    \        val paren_levels_map_reverse20 = mutable.Map[Long, Long]()\n        val\
    \ paren_levels_map_reverse21 = mutable.Map[Long, Long]()\n        val paren_levels_map_reverse22\
    \ = mutable.Map[Long, Long]()\n        val paren_levels_map_reverse23 = mutable.Map[Long,\
    \ Long]()\n        val paren_levels_map_reverse24 = mutable.Map[Long, Long]()\n\
    \        val paren_levels_map_reverse25 = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp29lrg6b4.scala:38:40 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mparen_levels_map_reverse25\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp29lrg6b4.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp29lrg6b4.scala:11:26 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_queue\e[0m = mutable.Queue[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp29lrg6b4.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.Map[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp29lrg6b4.scala:13:31\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_levels_map\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                               Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found"
  stdout: ''
  timestamp: 1659798260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth = mutable.Stack[Long]()\n        val paren_stack_max_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_size = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_pos_depth = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth =\
    \ mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7xggr6of.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7xggr6of.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_max_depth_pos_depth_depth_depth_depth\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_pos_depth_depth_depth_depth is already\
    \ defined as \e[33mvalue\e[0m \e[35mparen_stack_max_depth_pos_depth_depth_depth_depth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7xggr6of.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth_pos_depth_depth_depth_depth_depth_size\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_pos_depth_depth_depth_depth_depth_size\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_max_depth_pos_depth_depth_depth_depth_depth_size\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp7xggr6of.scala:10:26 ------------------------\e[0m\e[0m\n\
    \e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7xggr6of.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m =\
    \ mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m"
  stdout: ''
  timestamp: 1659798260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_map = mutable.Map[String, List[Long]]()\n        paren_string.split(\"\
    \\\\s+\").foreach(s => {\n            val paren_str = if (s.startsWith(\"(\"))\
    \ \"(\" + s else s\n            val paren_str = if (paren_stack.last.startsWith(\"\
    )\")) paren_str + \")\" else paren_str\n            paren_stack.push(paren_str)\n\
    \            paren_stack_map.update(paren_str, mutable.List())\n        })\n \
    \       paren_stack_map.values.flatten.foldLeft(0L) { (max, list) => if (list.size\
    \ >= max) max else list.size }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp96_pmzcn.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp96_pmzcn.scala:11:30 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mList\e[0m[\e[35mLong\e[0m]]()\n\e[31m\e[31m   |\e[0m  \
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp96_pmzcn.scala:14:16 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m            \e[33mval\e[0m \e[36mparen_str\e[0m = \e[33mif\e[0m (paren_stack.last.startsWith(\e\
    [31m\")\"\e[0m)) paren_str + \e[31m\")\"\e[0m \e[33melse\e[0m paren_str\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_str is already defined as \e[33mvalue\e[0m \e[35mparen_str\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n3 errors found\n"
  stdout: ''
  timestamp: 1659798257
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_levels = mutable.Stack[Long]()\n        paren_stack.push(paren_string)\n\
    \        paren_levels.push(0)\n        val paren_levels_size = paren_levels.size\n\
    \        val paren_levels_limit = paren_levels_size + 1\n        while(paren_stack.nonEmpty)\
    \ {\n            val paren_string = paren_stack.pop()\n            val paren_level\
    \ = paren_levels.pop()\n            val paren_levels_size = paren_levels.size\n\
    \            val paren_levels_limit = paren_levels_size + 1\n            val paren_levels_limit\
    \ = if (paren_levels_size > paren_levels_limit) paren_levels_limit else paren_levels_size\n\
    \            val paren_levels_limit = if (paren_levels_size > paren_levels_limit)\
    \ paren_levels_limit else paren_levels_size\n            val paren_levels_limit\
    \ = if (paren_levels_size > paren_levels_limit) paren_levels_limit else paren_levels_size\n\
    \            val paren_levels_limit = if (paren_levels_size > paren_levels_limit)\
    \ paren_levels_limit else paren_levels_size\n            val paren_levels_limit\
    \ = if (paren_levels_size > paren_levels_limit) paren_levels_limit else paren_levels_size\n\
    \            val paren_levels_limit = if (paren_levels_size > paren_levels_limit)\
    \ paren_levels_limit else paren_levels_size\n            val paren_levels_limit\
    \ = if (paren_levels_size > paren_levels_limit) paren_levels_limit else paren_levels_size\n\
    \            val paren_levels_limit = if (paren_levels_size > paren_levels_limit)\
    \ paren_levels_limit else paren_levels_size\n            val paren_levels_limit\
    \ = if (paren_levels_size > paren_levels_limit) paren_levels_limit else paren_levels_size\n\
    \            val paren_levels_limit = if (paren_levels_size > paren_levels_limit)\
    \ paren_levels_limit else paren_levels_size\n            val paren_levels_limit\
    \ = if (paren_levels_size > paren_levels_limit) paren_levels_limit else paren_levels_size\n\
    \            val paren_levels_limit = if (paren_levels_size > paren_levels_limit)\
    \ paren_levels_limit else paren_levels_size\n            val paren_levels_limit\
    \ = if (paren_levels_size > paren\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp00fsc3ur.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp00fsc3ur.scala:42:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m42 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp00fsc3ur.scala:10:26 ------------------------\e[0m\e[0m\n\
    \e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp00fsc3ur.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp00fsc3ur.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mparen_levels_limit\e\
    [0m = \e[33mif\e[0m (paren_levels_size > paren_levels_limit) paren_levels_limit\
    \ \e[33melse\e[0m paren_levels_size\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_levels_limit is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_levels_limit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp00fsc3ur.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mparen_levels_limit\e\
    [0m = \e[33mif\e[0m (paren_levels_size > paren_levels_limit) paren_levels_limit\
    \ \e[33melse\e[0m paren_levels"
  stdout: ''
  timestamp: 1659798261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_string = mutable.Stack[String]()\n        val paren_stack_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_string = mutable.Stack[String]()\n\
    \        val paren_stack_level_count = mutable.Stack[Long]()\n        val paren_stack_level_count_string\
    \ = mutable.Stack[String]()\n        val paren_stack_level_count_long = mutable.Stack[Long]()\n\
    \        val paren_stack_level_count_long_string = mutable.Stack[String]()\n \
    \       val paren_stack_level_count_long_string = mutable.Stack[String]()\n  \
    \      val paren_stack_level_count_long_string = mutable.Stack[String]()\n   \
    \     val paren_stack_level_count_long_string = mutable.Stack[String]()\n    \
    \    val paren_stack_level_count_long_string = mutable.Stack[String]()\n     \
    \   val paren_stack_level_count_long_string = mutable.Stack[String]()\n      \
    \  val paren_stack_level_count_long_string = mutable.Stack[String]()\n       \
    \ val paren_stack_level_count_long_string = mutable.Stack[String]()\n        val\
    \ paren_stack_level_count_long_string = mutable.Stack[String]()\n        val paren_stack_level_count_long_string\
    \ = mutable.Stack[String]()\n        val paren_stack_level_count_long_string =\
    \ mutable.Stack[String]()\n        val paren_stack_level_count_long_string = mutable.Stack[String]()\n\
    \        val paren_stack_level_count_long_string = mutable.Stack[String]()\n \
    \       val paren_stack_level_count_long_string = mutable.Stack[String]()\n  \
    \      val paren_stack_level_count_long_string = mutable.Stack[String]()\n   \
    \     val paren_stack_level_count_long_string = mutable.Stack[String]()\n    \
    \    val paren_stack_level_count_long_string = mutable.Stack[String]()\n     \
    \   val paren_stack_level_count_long_string = mutable.Stack[String]()\n      \
    \  val paren_stack_level_count_long_string = mutable.Stack[String]()\n       \
    \ val paren_stack_level_count_long_string = mutable.Stack[String]()\n        val\
    \ paren_stack_level_count_long_string = mutable.Stack[String]()\n        val paren_stack_level_count_long_string\
    \ = mutable.Stack[String]()\n        val paren_stack_level_count_long\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnbn3ngyg.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnbn3ngyg.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_level_count_long_string\e[0m = mutable.Stack[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_level_count_long_string is already defined as\
    \ \e[33mvalue\e[0m \e[35mparen_stack_level_count_long_string\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnbn3ngyg.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_level_count_long_string\e[0m = mutable.Stack[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_level_count_long_string is already defined as\
    \ \e[33mvalue\e[0m \e[35mparen_stack_level_count_long_string\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnbn3ngyg.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_level_count_long_string\e[0m = mutable.Stack[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_level_count_long_string is already defined as\
    \ \e[33mvalue\e[0m \e[35mparen_stack_level_count_long_string\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnbn3ngyg.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_level_count_long_string\e[0m = mut"
  stdout: ''
  timestamp: 1659798260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Int]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_size = mutable.Stack[Int]()\n        val\
    \ paren_stack_top_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_size = mutable.Stack[Int]()\n   \
    \     val paren_stack_top_top_top_top_top_top = mutable.Stack[Long]()\n      \
    \  val paren_stack_top_top_top_top_top_top_size = mutable.Stack[Int]()\n     \
    \   val paren_stack_top_top_top_top_top_top_top = mutable.Stack[Long]()\n    \
    \    val paren_stack_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3yycl1cn.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3yycl1cn.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_top_top_top_top_top_top_top_top_top_top_size\e[0m = mutable.Stack[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_top_top_top_top_top_top_top_top_top_size is\
    \ already defined as \e[33mvalue\e[0m \e[35mparen_stack_top_top_top_top_top_top_top_top_top_top_size\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp3yycl1cn.scala:10:26 ------------------------\e[0m\e[0m\n\
    \e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp3yycl1cn.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m =\
    \ mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3yycl1cn.scala:12:30\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_top\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Fo"
  stdout: ''
  timestamp: 1659798260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_top = paren_stack.size\n        val paren_stack_max_level\
    \ = paren_stack_top\n        val paren_stack_max_level_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_stack_top = paren_stack_max_level_stack.size\n\
    \        val paren_stack_max_level_stack_max_level = paren_stack_max_level_stack_top\n\
    \        val paren_stack_max_level_stack_max_level_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_stack_max_level_stack_top = paren_stack_max_level_stack_max_level_stack.size\n\
    \        val paren_stack_max_level_stack_max_level_stack_max_level = paren_stack_max_level_stack_max_level_stack_top\n\
    \        val paren_stack_max_level_stack_max_level_stack_max_level_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_stack_max_level_stack_max_level_stack_top =\
    \ paren_stack_max_level_stack_max_level_stack_max_level_stack.size\n        val\
    \ paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level = paren_stack_max_level_stack_max_level_stack_max_level_stack_top\n\
    \        val paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_top\
    \ = paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack.size\n\
    \        val paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level\
    \ = paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_top\n\
    \        val paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_top\
    \ = paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack.size\n\
    \        val paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level\
    \ = paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_top\n\
    \        val paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_top\
    \ = paren_stack_max_level_stack_\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7f0adzv8.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7f0adzv8.scala:13:42 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_level_stack\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7f0adzv8.scala:16:58 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_level_stack_max_level_stack\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                                          ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                                 Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7f0adzv8.scala:19:74 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_level_stack_max_level_stack_max_level_stack\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                                                          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7f0adzv8.scala:22:90\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack\e\
    [0m = mutable."
  stdout: ''
  timestamp: 1659798260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val paren_array_max_size\
    \ = paren_array_size - 1\n        val paren_array_max_size_array = paren_array_max_size.map(x\
    \ => paren_array(x))\n        val paren_array_max_size_array_size = paren_array_max_size_array.map(x\
    \ => x.length)\n        val paren_array_max_size_array_max_size = paren_array_max_size_array_size.max\n\
    \        val paren_array_max_size_array_max_size_array_max_size = paren_array_max_size_array_max_size.max\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size.max\n        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size.max\n  \
    \      val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size.max\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size.max\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size.max\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size.max\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size.max\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7lhsinry.scala:13:62 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_size_array\e\
    [0m = paren_array_max_size.map(\e[36mx\e[0m => paren_array(x))\n\e[31m\e[31m \
    \  |\e[0m                                         ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                        value map is not a member\
    \ of Int\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7lhsinry.scala:21:140 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\e\
    [0m = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size.max\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e\
    [0m  paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp7lhsinry.scala:22:155 --------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\e\
    [0m = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size.max\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                       ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\
    \e[31m   |\e[0m  paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_arr"
  stdout: ''
  timestamp: 1659798261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_len = mutable.Stack[Long]()\n        val paren_stack_len_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max = mutable.Stack[Long]()\n        val\
    \ paren_stack_len_max_len_max_max = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt_l8kwho.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt_l8kwho.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt_l8kwho.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max_max\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max_max\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpt_l8kwho.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not "
  stdout: ''
  timestamp: 1659798260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_levels = mutable.Stack[Int]()\n        val paren_level = 0\n\
    \        val paren_level_count = mutable.Stack[Int]()\n        val paren_level_count_max\
    \ = mutable.Stack[Int]()\n        val paren_level_count_max_index = mutable.Stack[Int]()\n\
    \        val paren_level_count_max_index2 = mutable.Stack[Int]()\n        val\
    \ paren_level_count_max_index3 = mutable.Stack[Int]()\n        val paren_level_count_max_index4\
    \ = mutable.Stack[Int]()\n        val paren_level_count_max_index5 = mutable.Stack[Int]()\n\
    \        val paren_level_count_max_index6 = mutable.Stack[Int]()\n        val\
    \ paren_level_count_max_index7 = mutable.Stack[Int]()\n        val paren_level_count_max_index8\
    \ = mutable.Stack[Int]()\n        val paren_level_count_max_index9 = mutable.Stack[Int]()\n\
    \        val paren_level_count_max_index10 = mutable.Stack[Int]()\n        val\
    \ paren_level_count_max_index11 = mutable.Stack[Int]()\n        val paren_level_count_max_index12\
    \ = mutable.Stack[Int]()\n        val paren_level_count_max_index13 = mutable.Stack[Int]()\n\
    \        val paren_level_count_max_index14 = mutable.Stack[Int]()\n        val\
    \ paren_level_count_max_index15 = mutable.Stack[Int]()\n        val paren_level_count_max_index16\
    \ = mutable.Stack[Int]()\n        val paren_level_count_max_index17 = mutable.Stack[Int]()\n\
    \        val paren_level_count_max_index18 = mutable.Stack[Int]()\n        val\
    \ paren_level_count_max_index19 = mutable.Stack[Int]()\n        val paren_level_count_max_index20\
    \ = mutable.Stack[Int]()\n        val paren_level_count_max_index21 = mutable.Stack[Int]()\n\
    \        val paren_level_count_max_index22 = mutable.Stack[Int]()\n        val\
    \ paren_level_count_max_index23 = mutable.Stack[Int]()\n        val paren_level_count_max_index24\
    \ = mutable.Stack[Int]()\n        val paren_level_count_max_index25 = mutable.Stack[Int]()\n\
    \        val paren_level_count_max_index26 = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp4iorkwkx.scala:40:43 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mparen_level_count_max_index26\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                           ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4iorkwkx.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp4iorkwkx.scala:11:27 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.Stack[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp4iorkwkx.scala:13:32 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_level_count\e[0m =\
    \ mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                                Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4iorkwkx.scala:14:36\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_level_count_max\e[0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                    ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E00"
  stdout: ''
  timestamp: 1659798260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n        val paren_stack_max_depth_neg\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_neg_pos = mutable.Stack[Long]()\n     \
    \   val paren_stack_max_depth_pos_neg_neg = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_pos_neg_pos_neg = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg_neg_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg_neg_neg =\
    \ mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg_neg_pos_neg\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg_neg_neg_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg_neg_neg_neg\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg_neg_neg_pos_neg\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg_neg_neg_pos_neg\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg_neg_neg_pos_neg_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg_neg_neg_pos_neg_neg\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg_neg_neg_pos_neg_neg_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg_neg_neg_pos_neg_neg_neg\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg_neg_neg_pos_neg_neg_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg_neg_neg_pos_neg_neg_neg\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg_neg_neg_pos_neg_neg_neg_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg_neg_neg_pos_neg_neg_neg_neg\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_neg_neg_neg_pos_neg_neg_neg_pos_neg\
    \ = mutable.Stack[Long]()\n\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9ydras_e.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth_pos_neg_neg_neg_pos_neg\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_pos_neg_neg_neg_pos_neg is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_stack_max_depth_pos_neg_neg_neg_pos_neg\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9ydras_e.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth_pos_neg_neg_neg_pos_neg_neg_pos\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_pos_neg_neg_neg_pos_neg_neg_pos is already\
    \ defined as \e[33mvalue\e[0m \e[35mparen_stack_max_depth_pos_neg_neg_neg_pos_neg_neg_pos\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9ydras_e.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth_pos_neg_neg_neg_pos_neg_neg_neg\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_pos_neg_neg_neg_pos_neg_neg_neg is already\
    \ defined as \e[33mvalue\e[0m \e[35mparen_stack_max_depth_pos_neg_neg_neg_pos_neg_neg_neg\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp9ydras_e.scala:10:26 ------------------------\e[0m\e[0m\n\
    \e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e"
  stdout: ''
  timestamp: 1659798267
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_size = mutable.Stack[Long]()\n        val paren_stack_level_max_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_level_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_level_level = mutable.Stack[Long]()\n     \
    \   val paren_stack_level_max_level_level_size = mutable.Stack[Long]()\n     \
    \   val paren_stack_level_max_level_level_level = mutable.Stack[Long]()\n    \
    \    val paren_stack_level_max_level_level_level_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_level_level_level_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_level_level_level_level_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_level_level_level_level_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_level_level_level_level_level_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_level_level_level_level_level_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_level_level_level_level_level_level_size =\
    \ mutable.Stack[Long]()\n        val paren_stack_level_max_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy2iuvg3u.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy2iuvg3u.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_level_max_level_level_level_level_level_level_level\e[0m =\
    \ mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_level_max_level_level_level_level_level_level_level\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_level_max_level_level_level_level_level_level_level\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy2iuvg3u.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level_max_level_level_level_level_level_level_level_size\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_level_max_level_level_level_level_level_level_level_size\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_level_max_level_level_level_level_level_level_level_size\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy2iuvg3u.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level_max_level_level_level_level_level_level_level_size\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_level_max_level_level_level_level_level_level_level_size\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stac"
  stdout: ''
  timestamp: 1659798268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_max = mutable.Stack[Long]()\n        val paren_stack_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len_max_depth = mutable.Stack[Long]()\n   \
    \     val paren_stack_max_depth_len_max_depth_len = mutable.Stack[Long]()\n  \
    \      val paren_stack_max_depth_len_max_depth_len_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len_max_depth_len_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len_max_depth_len_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len_max_depth_len_depth_len_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len_max_depth_len_depth_len_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len_max_depth_len_depth_len_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len_max_depth_len_depth_len_depth_len_max =\
    \ mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_depth_len_depth_len_depth_len_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_depth_len_depth_len_depth_len_max_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_depth_len_depth_len_depth_len_max_depth_len_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_depth_len_depth_len_depth_len_max_depth_len_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_depth_len_depth_len_depth_len_max_depth_len_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_depth_len_depth_len_depth_len_max_depth_len_depth_len_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_depth_len_depth_len_depth_len_max_depth_len_depth_len_max_size\
    \ = mutable.Stack[Long]()\n        val paren_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqt778mye.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqt778mye.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpqt778mye.scala:11:30 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_max\e[0m = mutable.Stack[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpqt778mye.scala:12:35 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_size\e[0m\
    \ = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpqt778mye.scala:13:36 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_max_depth\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqt778mye.scala:14:40\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_max_depth_len\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m           "
  stdout: ''
  timestamp: 1659798269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_length = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_length = mutable.Stack[Long]()\n        val paren_stack_max_depth_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_length = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_length = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_length = mutable.Stack[Long]()\n        val paren_stack_max_depth_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_length = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_length = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_length = mutable.Stack[Long]()\n        val paren_stack_max_depth_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_length = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_length = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_length = mutable.Stack[Long]()\n        val paren_stack_max_depth_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_length = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_length = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_length = mutable.Stack[Long]()\n        val paren_stack_max_depth_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_length = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_length = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_length = mutable.Stack[Long]()\n        val paren_stack_max_depth_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_length = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_length = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_length = mutable.Stack[Long]()\n        val paren_stack_max_depth_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_length = mutable.Stack[Long]()\n\
    \        val paren_stack_\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp25mjp93h.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp25mjp93h.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_max_depth_length\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_length is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_max_depth_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp25mjp93h.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth_length\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_length is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_max_depth_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp25mjp93h.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth_length\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_length is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_max_depth_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp25mjp93h.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth_length\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659798269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_chars = paren_string.split(\"\
    \ \").map(_.toChar)\n        val paren_chars_count = paren_chars.map(_.length).sum\n\
    \        val paren_chars_count_with_paren = paren_chars_count + 1\n        val\
    \ paren_chars_count_with_paren_plus_one = paren_chars_count_with_paren + 1\n \
    \       val paren_chars_count_with_paren_plus_two = paren_chars_count_with_paren_plus_one\
    \ + 1\n        val paren_chars_count_with_paren_plus_three = paren_chars_count_with_paren_plus_two\
    \ + 1\n        val paren_chars_count_with_paren_plus_four = paren_chars_count_with_paren_plus_three\
    \ + 1\n        val paren_chars_count_with_paren_plus_five = paren_chars_count_with_paren_plus_four\
    \ + 1\n        val paren_chars_count_with_paren_plus_six = paren_chars_count_with_paren_plus_five\
    \ + 1\n        val paren_chars_count_with_paren_plus_seven = paren_chars_count_with_paren_plus_six\
    \ + 1\n        val paren_chars_count_with_paren_plus_eight = paren_chars_count_with_paren_plus_seven\
    \ + 1\n        val paren_chars_count_with_paren_plus_nine = paren_chars_count_with_paren_plus_eight\
    \ + 1\n        val paren_chars_count_with_paren_plus_ten = paren_chars_count_with_paren_plus_nine\
    \ + 1\n        val paren_chars_count_with_paren_plus_eleven = paren_chars_count_with_paren_plus_ten\
    \ + 1\n        val paren_chars_count_with_paren_plus_twelve = paren_chars_count_with_paren_plus_eleven\
    \ + 1\n        val paren_chars_count_with_paren_plus_thirteen = paren_chars_count_with_paren_plus_twelve\
    \ + 1\n        val paren_chars_count_with_paren_plus_fourteen = paren_chars_count_with_paren_plus_thirteen\
    \ + 1\n        val paren_chars_count_with_paren_plus_fifteen = paren_chars_count_with_paren_plus_fourteen\
    \ + 1\n        val paren_chars_count_with_paren_plus_sixteen = paren_chars_count_with_paren_plus_fifteen\
    \ + 1\n        val paren_chars_count_with_paren_plus_seventeen = paren_chars_count_with_paren_plus_sixteen\
    \ + 1\n        val paren_chars_count_with_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiim31ahl.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiim31ahl.scala:10:56\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_chars\e[0m = paren_string.split(\e[31m\" \"\e[0m).map(_.toChar)\n\e\
    [31m\e[31m   |\e[0m                                                      ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value toChar is not a member\
    \ of String\n\e[31m\e[31m-- Error: /tmp/tmpiim31ahl.scala:10:63 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_chars\e[0m = paren_string.split(\e\
    [31m\" \"\e[0m).map(_.toChar)\n\e[31m\e[31m   |\e[0m                         \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                           No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                          where:    B is a type variable\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiim31ahl.scala:31:5 ---------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_chars = paren_string.toCharArray\n\
    \        val paren_chars_size = paren_chars.length\n        val paren_chars_map\
    \ = mutable.HashMap[Char, Long]()\n        val paren_chars_stack = mutable.Stack[Char]()\n\
    \        var paren_char_index = 0\n        var paren_char_index2 = 0\n       \
    \ var paren_char_index3 = 0\n        var paren_char_index4 = 0\n        var paren_char_index5\
    \ = 0\n        var paren_char_index6 = 0\n        var paren_char_index7 = 0\n\
    \        var paren_char_index8 = 0\n        var paren_char_index9 = 0\n      \
    \  var paren_char_index10 = 0\n        var paren_char_index11 = 0\n        var\
    \ paren_char_index12 = 0\n        var paren_char_index13 = 0\n        var paren_char_index14\
    \ = 0\n        var paren_char_index15 = 0\n        var paren_char_index16 = 0\n\
    \        var paren_char_index17 = 0\n        var paren_char_index18 = 0\n    \
    \    var paren_char_index19 = 0\n        var paren_char_index20 = 0\n        var\
    \ paren_char_index21 = 0\n        var paren_char_index22 = 0\n        var paren_char_index23\
    \ = 0\n        var paren_char_index24 = 0\n        var paren_char_index25 = 0\n\
    \        var paren_char_index26 = 0\n        var paren_char_index27 = 0\n    \
    \    var paren_char_index28 = 0\n        var paren_char_index29 = 0\n        var\
    \ paren_char_index30 = 0\n        var paren_char_index31 = 0\n        var paren_char_index32\
    \ = 0\n        var paren_char_index33 = 0\n        var paren_char_index34 = 0\n\
    \        var paren_char_index35 = 0\n        var paren_char_index36 = 0\n    \
    \    var paren_char_index37 = 0\n        var paren_char_index38 = 0\n        var\
    \ paren_char_index39 = 0\n        var paren_char_index40 = 0\n        var paren_char_index41\
    \ = 0\n        var paren_char_index42 = 0\n        var paren_char_index43 = 0\n\
    \        var paren_char_index44 = 0\n        var paren_char_index45 = 0\n    \
    \    var paren_char_index46 = 0\n        var paren_char_index47 = 0\n        var\
    \ paren_char_index48 = 0\n        var paren_char_index49 = 0\n        var paren_char_index50\
    \ = 0\n        var paren_char_index51 = 0\n        var paren_char_index52 = 0\n\
    \        var paren_char_index53 = 0\n        var paren_char_index54 = 0\n    \
    \    var paren_char_index55 = 0\n        var paren_char_index56 = 0\n        var\
    \ paren_char_index57 = 0\n\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5wimst6c.scala:12:30 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_map\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                              Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5wimst6c.scala:13:32\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_chars_stack\e[0m = mutable.Stack[\e[35mChar\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp5wimst6c.scala:72:5 ---------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_queue = mutable.Queue[String]()\n        paren_queue.enqueue(paren_string)\n\
    \        paren_stack.push(paren_queue.dequeue)\n        val paren_levels = mutable.ListBuffer[Long]()\n\
    \        while (paren_stack.nonEmpty) {\n            val paren_string = paren_stack.dequeue\n\
    \            val paren_level = 0\n            val paren_open = paren_string.indexOf('(')\n\
    \            val paren_close = paren_string.indexOf(')')\n            val paren_level\
    \ = if (paren_open < paren_close) paren_open else paren_close\n            paren_levels\
    \ += paren_level\n            paren_queue.enqueue(paren_string.substring(paren_open\
    \ + 1, paren_close))\n            paren_stack.push(paren_queue.dequeue)\n    \
    \    }\n        paren_levels.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_6ja87ks.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_6ja87ks.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_queue\e[0m = mutable.Queue[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_6ja87ks.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp_6ja87ks.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mparen_level\e[0m = \e\
    [33mif\e[0m (paren_open < paren_close) paren_open \e[33melse\e[0m paren_close\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_level is already defined as \e[33mvalue\e[0m \e[35mparen_level\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n4 errors found\n"
  stdout: ''
  timestamp: 1659798267
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_levels_count\
    \ = mutable.Stack[Long]()\n        paren_string.split(\"\\\\s+\").foreach(s =>\
    \ {\n            if (s.startsWith(\"(\")) {\n                paren_stack.push(s)\n\
    \                paren_levels_count.push(paren_levels.length)\n            } else\
    \ if (s.endsWith(\")\")) {\n                val paren_level = paren_levels_count.pop\n\
    \                val paren_level_length = paren_levels_count.pop\n           \
    \     val paren_level_length = paren_level_length + 1 // +1 because the last level\
    \ is always empty\n                paren_levels.push(paren_level)\n          \
    \      paren_levels_count.push(paren_level_length)\n                paren_stack.push(s)\n\
    \            } else if (s.startsWith(\")\")) {\n                val paren_level\
    \ = paren_levels_count.pop\n                val paren_level_length = paren_levels_count.pop\n\
    \                val paren_level_length = paren_level_length + 1 // +1 because\
    \ the last level is always empty\n                paren_levels.push(paren_level)\n\
    \                paren_levels_count.push(paren_level_length)\n               \
    \ paren_stack.push(s)\n            }\n        })\n        paren_levels_count.reverse.foldLeft(0L)\
    \ { (sum, level) => sum + level }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb63i383z.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpb63i383z.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpb63i383z.scala:12:33 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_levels_count\e[0m\
    \ = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798267
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_queue = mutable.Queue[String]()\n        paren_queue.enqueue(paren_string)\n\
    \        paren_stack.push(paren_queue.dequeue())\n        var max_level = 0\n\
    \        while(!paren_queue.isEmpty) {\n            val current_paren = paren_queue.dequeue()\n\
    \            val current_level = paren_stack.size\n            val new_level =\
    \ current_level + 1\n            val new_paren = current_paren.substring(0, current_paren.length\
    \ - 1)\n            val new_paren_stack = paren_stack.push(new_paren)\n      \
    \      val new_paren_queue = paren_queue.enqueue(new_paren)\n            val new_max_level\
    \ = max_level\n            if(new_paren_stack.size < new_max_level) {\n      \
    \          max_level = new_max_level\n            }\n        }\n        max_level\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo21crkjc.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpo21crkjc.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_queue\e[0m = mutable.Queue[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo21crkjc.scala:27:8 ---------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        max_level\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (max_level : Int)\n\e[31m   |\e[0m     \
    \   Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count = mutable.Stack[Long]()\n        val paren_stack_top_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index2 = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_index3 = mutable.Stack[Long]()\n        val paren_stack_top_count_index4\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index5 = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index6 = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_index7 = mutable.Stack[Long]()\n        val paren_stack_top_count_index8\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index9 = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index10 = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_index11 = mutable.Stack[Long]()\n        val paren_stack_top_count_index12\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index13 = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index14 = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_index15 = mutable.Stack[Long]()\n        val paren_stack_top_count_index16\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index17 = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index18 = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_index19 = mutable.Stack[Long]()\n        val paren_stack_top_count_index20\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index21 = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index22 = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_index23 = mutable.Stack[Long]()\n        val paren_stack_top_count_index24\
    \ = mutable.Stack[Long]()\n        val paren_stack_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6wj0dqam.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6wj0dqam.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp6wj0dqam.scala:11:31 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m = mutable.Stack[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6wj0dqam.scala:12:30 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6wj0dqam.scala:13:35 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m\
    \ = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp6wj0dqam.scala:14:36 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_top_count\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                              "
  stdout: ''
  timestamp: 1659798270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_map = mutable.Map[String, mutable.Stack[String]]()\n\
    \        val paren_stack_map_keys = mutable.Map[String, Long]()\n        val paren_stack_map_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_keys = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_values = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_values_values_keys = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_values_values_values = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_values_values_values_keys = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_values_values_values_values = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_keys = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpufy29quv.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpufy29quv.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_map_values_values_values_values_values_values_values_values_values_values\e\
    [0m = mutable.Map[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_values_values_values_values_values_values_values_values_values_values\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_map_values_values_values_values_values_values_values_values_values_values\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpufy29quv.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_values_values_values_values_values_values_values_values_values_values_keys\e\
    [0m = mutable.Map[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpufy29quv.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    "
  stdout: ''
  timestamp: 1659798272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_map = mutable.Map[String, Long]()\n        paren_string.split(\"\
    \\\\s+\").foreach(x => {\n            val paren_level = paren_stack_map.getOrElse(x,\
    \ 0)\n            paren_stack_map.put(x, paren_level + 1)\n            paren_stack\
    \ :+= x\n        })\n        val max_level = paren_stack_map.values.max\n    \
    \    val max_level_map = paren_stack_map.filter(_._2 == max_level)\n        val\
    \ max_level_map_values = max_level_map.values.toList\n        val max_level_map_values_sorted\
    \ = max_level_map_values.sortBy(_._1)\n        val max_level_map_values_sorted_list\
    \ = max_level_map_values_sorted.map(_._2).toList\n        val max_level_map_values_sorted_list_sorted\
    \ = max_level_map_values_sorted_list.sortBy(_._1)\n        val max_level_map_values_sorted_list_sorted_reversed\
    \ = max_level_map_values_sorted_list_sorted.reverse\n        max_level_map_values_sorted_list_sorted_reversed.head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplvvzfi82.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmplvvzfi82.scala:11:30 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                              Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val paren_array_map\
    \ = mutable.HashMap[String, Long]()\n        val paren_array_map_size = paren_array_map.size\n\
    \        val paren_array_map_size_max = paren_array_map_size - 1\n        val\
    \ paren_array_map_size_min = paren_array_map_size + 1\n        val paren_array_map_size_mid\
    \ = paren_array_map_size / 2\n        val paren_array_map_size_mid2 = paren_array_map_size\
    \ / 2\n        val paren_array_map_size_mid3 = paren_array_map_size / 2\n    \
    \    val paren_array_map_size_mid4 = paren_array_map_size / 2\n        val paren_array_map_size_mid5\
    \ = paren_array_map_size / 2\n        val paren_array_map_size_mid6 = paren_array_map_size\
    \ / 2\n        val paren_array_map_size_mid7 = paren_array_map_size / 2\n    \
    \    val paren_array_map_size_mid8 = paren_array_map_size / 2\n        val paren_array_map_size_mid9\
    \ = paren_array_map_size / 2\n        val paren_array_map_size_mid10 = paren_array_map_size\
    \ / 2\n        val paren_array_map_size_mid11 = paren_array_map_size / 2\n   \
    \     val paren_array_map_size_mid12 = paren_array_map_size / 2\n        val paren_array_map_size_mid13\
    \ = paren_array_map_size / 2\n        val paren_array_map_size_mid14 = paren_array_map_size\
    \ / 2\n        val paren_array_map_size_mid15 = paren_array_map_size / 2\n   \
    \     val paren_array_map_size_mid16 = paren_array_map_size / 2\n        val paren_array_map_size_mid17\
    \ = paren_array_map_size / 2\n        val paren_array_map_size_mid18 = paren_array_map_size\
    \ / 2\n        val paren_array_map_size_mid19 = paren_array_map_size / 2\n   \
    \     val paren_array_map_size_mid20 = paren_array_map_size / 2\n        val paren_array_map_size_mid21\
    \ = paren_array_map_size / 2\n        val paren_array_map_size_mid22 = paren_array_map_size\
    \ / 2\n        val paren_array_map_size_mid23 = paren_array_map_size / 2\n   \
    \     val paren_array_map_size_mid24 = paren_array_map_size / 2\n        val paren_array_map_size_mid25\
    \ = paren_array_map_size / 2\n        val paren_array_map_size_mid26 = paren_array_map_size\
    \ / 2\n        val paren\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1bqg741x.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1bqg741x.scala:12:30\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_array_map\e[0m = mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                              Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp1bqg741x.scala:43:5 ---------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_string = mutable.Stack[String]()\n        val paren_stack_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_string = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level = mutable.Stack[Long]()\n        val paren_stack_level_level_string\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_string = mutable.Stack[Long]()\n  \
    \      val paren_stack_level_level_level_level = mutable.Stack[Long]()\n     \
    \   val paren_stack_level_level_level_level_string = mutable.Stack[Long]()\n \
    \       val paren_stack_level_level_level_level_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_string = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_level_string = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_level_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_level_level_string = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_level_level_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_level_level_level_string\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_string\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_string\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_string\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_string\
    \ = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_u381pep.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp_u381pep.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level_level_level_level_level_level_level_level_level_level\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_level_level_level_level_level_level_level_level_level_level\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_level_level_level_level_level_level_level_level_level_level\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_u381pep.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level_level_level_level_level_level_level_level_level_level\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_level_level_level_level_level_level_level_level_level_level\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_level_level_level_level_level_level_level_level_level_level\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_u381pep.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level_level_level_level_level_level_level_level_level_level_string\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_level_level_level_level_level_level"
  stdout: ''
  timestamp: 1659798272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_length = mutable.Stack[Long]()\n        val paren_stack_length_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_length_max_index = mutable.Stack[Int]()\n\
    \        val paren_stack_length_max_index2 = mutable.Stack[Int]()\n        val\
    \ paren_stack_length_max_index3 = mutable.Stack[Int]()\n        val paren_stack_length_max_index4\
    \ = mutable.Stack[Int]()\n        val paren_stack_length_max_index5 = mutable.Stack[Int]()\n\
    \        val paren_stack_length_max_index6 = mutable.Stack[Int]()\n        val\
    \ paren_stack_length_max_index7 = mutable.Stack[Int]()\n        val paren_stack_length_max_index8\
    \ = mutable.Stack[Int]()\n        val paren_stack_length_max_index9 = mutable.Stack[Int]()\n\
    \        val paren_stack_length_max_index10 = mutable.Stack[Int]()\n        val\
    \ paren_stack_length_max_index11 = mutable.Stack[Int]()\n        val paren_stack_length_max_index12\
    \ = mutable.Stack[Int]()\n        val paren_stack_length_max_index13 = mutable.Stack[Int]()\n\
    \        val paren_stack_length_max_index14 = mutable.Stack[Int]()\n        val\
    \ paren_stack_length_max_index15 = mutable.Stack[Int]()\n        val paren_stack_length_max_index16\
    \ = mutable.Stack[Int]()\n        val paren_stack_length_max_index17 = mutable.Stack[Int]()\n\
    \        val paren_stack_length_max_index18 = mutable.Stack[Int]()\n        val\
    \ paren_stack_length_max_index19 = mutable.Stack[Int]()\n        val paren_stack_length_max_index20\
    \ = mutable.Stack[Int]()\n        val paren_stack_length_max_index21 = mutable.Stack[Int]()\n\
    \        val paren_stack_length_max_index22 = mutable.Stack[Int]()\n        val\
    \ paren_stack_length_max_index23 = mutable.Stack[Int]()\n        val paren_stack_length_max_index24\
    \ = mutable.Stack[Int]()\n        val paren_stack_length_max_index25 = mutable.Stack[Int]()\n\
    \        val paren_stack_length_max_index26 = mutable.Stack[Int]()\n        val\
    \ paren_stack_length_max_index27 = mutable.Stack[\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp33v3j4_d.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp33v3j4_d.scala:10:26 ------------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp33v3j4_d.scala:11:33 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_length\e[0m\
    \ = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp33v3j4_d.scala:12:37\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_length_max\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp33v3j4_d.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_length_max_index\e\
    [0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp33v3j4_d.scala:14:44 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_length_max_index2\e\
    [0m = mutable.Sta"
  stdout: ''
  timestamp: 1659798272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        paren_string.split(\"\\\\s+\").foreach(x => {\n            if (x.equals(\"\
    (\")) {\n                paren_stack.push(x)\n                paren_levels +=\
    \ 1\n            } else if (x.equals(\")\")) {\n                paren_level -=\
    \ 1\n                paren_levels += paren_level\n                paren_stack.pop()\n\
    \            }\n        })\n        paren_levels\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6p0q73p7.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6p0q73p7.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp6p0q73p7.scala:18:28 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                paren_level -= \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          value\
    \ -= is not a member of Int - did you mean paren_level.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659798271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_groups = paren_string.split(\"\
    \\\\s+\")\n        val paren_groups_with_counts = paren_groups.map(x => x.split(\"\
    \\\\(\")).map(x => (x(0).toLong, x(1).toLong)).toMap\n        val max_count =\
    \ paren_groups_with_counts.values.max\n        val max_count_index = paren_groups_with_counts.values.toList.zipWithIndex.maxBy(_._1)._2\n\
    \        val max_count_index = max_count_index + 1\n        val max_count_index_with_parens\
    \ = max_count_index - 1\n        val max_count_index_with_parens_count = paren_groups_with_counts(max_count_index_with_parens)\n\
    \        val max_count_index_with_parens_count_with_parens = max_count_index_with_parens_count\
    \ - 1\n        val max_count_index_with_parens_count_with_parens_count = paren_groups_with_counts(max_count_index_with_parens_count_with_parens)\n\
    \        val max_count_index_with_parens_count_with_parens_count_with_parens =\
    \ max_count_index_with_parens_count_with_parens_count - 1\n        val max_count_index_with_parens_count_with_parens_count_with_parens_count\
    \ = paren_groups_with_counts(max_count_index_with_parens_count_with_parens_count_with_parens)\n\
    \        val max_count_index_with_parens_count_with_parens_count_with_parens_count_with_parens\
    \ = max_count_index_with_parens_count_with_parens_count_with_parens_count - 1\n\
    \        val max_count_index_with_parens_count_with_parens_count_with_parens_count_with_parens_count\
    \ = paren_groups_with_counts(max_count_index_with_parens_count_with_parens_count_with_parens_count_with_parens)\n\
    \        val max_count_index_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens\
    \ = max_count_index_with_parens_count_with_parens_count_with_parens_count_with_parens_count\
    \ - 1\n        val max_count_index_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens_count\
    \ = paren_groups_with_counts(max_count_index_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens)\n\
    \        val max_count_index_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens\
    \ = max_count_index_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens_count\
    \ - 1\n        val max_count_index_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens\
    \ = max_count_\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppdv3tam6.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmax_count_index\e[0m = max_count_index\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_count_index is already defined as \e[33mvalue\e[0m \e\
    [35mmax_count_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmppdv3tam6.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmax_count_index_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens\e\
    [0m = max_count_\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_count_index_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  max_count_index_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmppdv3tam6.scala:27:5 ---------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_length = mutable.Stack[Long]()\n        val paren_stack_length_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_length_max_index = mutable.Stack[Int]()\n\
    \        val paren_stack_length_max_index2 = mutable.Stack[Int]()\n        val\
    \ paren_stack_length_max_index3 = mutable.Stack[Int]()\n        val paren_stack_length_max_index4\
    \ = mutable.Stack[Int]()\n        val paren_stack_length_max_index5 = mutable.Stack[Int]()\n\
    \        val paren_stack_length_max_index6 = mutable.Stack[Int]()\n        val\
    \ paren_stack_length_max_index7 = mutable.Stack[Int]()\n        val paren_stack_length_max_index8\
    \ = mutable.Stack[Int]()\n        val paren_stack_length_max_index9 = mutable.Stack[Int]()\n\
    \        val paren_stack_length_max_index10 = mutable.Stack[Int]()\n        val\
    \ paren_stack_length_max_index11 = mutable.Stack[Int]()\n        val paren_stack_length_max_index12\
    \ = mutable.Stack[Int]()\n        val paren_stack_length_max_index13 = mutable.Stack[Int]()\n\
    \        val paren_stack_length_max_index14 = mutable.Stack[Int]()\n        val\
    \ paren_stack_length_max_index15 = mutable.Stack[Int]()\n        val paren_stack_length_max_index16\
    \ = mutable.Stack[Int]()\n        val paren_stack_length_max_index17 = mutable.Stack[Int]()\n\
    \        val paren_stack_length_max_index18 = mutable.Stack[Int]()\n        val\
    \ paren_stack_length_max_index19 = mutable.Stack[Int]()\n        val paren_stack_length_max_index20\
    \ = mutable.Stack[Int]()\n        val paren_stack_length_max_index21 = mutable.Stack[Int]()\n\
    \        val paren_stack_length_max_index22 = mutable.Stack[Int]()\n        val\
    \ paren_stack_length_max_index23 = mutable.Stack[Int]()\n        val paren_stack_length_max_index24\
    \ = mutable.Stack[Int]()\n        val paren_stack_length_max_index25 = mutable.Stack[Int]()\n\
    \        val paren_stack_length_max_index26 = mutable.Stack[Int]()\n        val\
    \ paren_stack_length_max_index27 = mutable.Stack[\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp33v3j4_d.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp33v3j4_d.scala:10:26 ------------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp33v3j4_d.scala:11:33 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_length\e[0m\
    \ = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp33v3j4_d.scala:12:37\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_length_max\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp33v3j4_d.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_length_max_index\e\
    [0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp33v3j4_d.scala:14:44 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_length_max_index2\e\
    [0m = mutable.Sta"
  stdout: ''
  timestamp: 1659798272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_map = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max_index = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max_index2 = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max_index3 = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max_index4 = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max_index5 = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max_index6 = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max_index7 = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max_index8 = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max_index9 = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max_index10 = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max_index11 = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max_index12 = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max_index13 = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max_index14 = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max_index15 = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max_index16 = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max_index17 = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max_index18 = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max_index19 = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max_index20 = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max_index21 = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max_index22 = mutable.HashMap[Long,\
    \ Long]\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbkhdslwo.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbkhdslwo.scala:11:30 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                              Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbkhdslwo.scala:12:35\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_map_size\e[0m = mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                   Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbkhdslwo.scala:13:39 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_size_max\e\
    [0m = mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                                       ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbkhdslwo.scala:14:45 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_size_max_index\e\
    [0m = mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                                             ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                             Not fou"
  stdout: ''
  timestamp: 1659798272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_map = mutable.Map[Long, Long]()\n        val paren_stack_map_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_keys = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values = mutable.Map[Long, Long]()\n     \
    \   val paren_stack_map_values_values_keys = mutable.Map[Long, Long]()\n     \
    \   val paren_stack_map_values_values_values = mutable.Map[Long, Long]()\n   \
    \     val paren_stack_map_values_values_values_keys = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_values_values = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_values_values_keys = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpecn7279s.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpecn7279s.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_map_values_values_values_values_values_values_values_values_values_values_keys\e\
    [0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpecn7279s.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_values_values_values_values_values_values_values_values_values_values_values\e\
    [0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_values_values_values_values_values_values_values_values_values_values_values\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_map_values_values_values_values_values_values_values_values_values_values_values\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpecn7279s.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  "
  stdout: ''
  timestamp: 1659798272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_chars = paren_string.split(\"\"\
    \"[\\(\\)]\"\"\").toList\n        val paren_chars_count = paren_chars.length\n\
    \        val paren_chars_map = paren_chars.groupBy(x => x).mapValues(_.length)\n\
    \        val paren_chars_count_map = paren_chars_map.toMap\n        val paren_chars_count_map_sorted\
    \ = paren_chars_count_map.toSeq.sortBy(_._1).reverse\n        val paren_chars_count_map_sorted_keys\
    \ = paren_chars_count_map_sorted.map(_._1)\n        val paren_chars_count_map_sorted_values\
    \ = paren_chars_count_map_sorted.map(_._2)\n        val paren_chars_count_map_sorted_keys_count\
    \ = paren_chars_count_map_sorted_keys.length\n        val paren_chars_count_map_sorted_values_count\
    \ = paren_chars_count_map_sorted_values.length\n        val paren_chars_count_map_sorted_keys_count_map\
    \ = paren_chars_count_map_sorted_keys.zip(paren_chars_count_map_sorted_values).map(x\
    \ => (x._1, x._2)).toMap\n        val paren_chars_count_map_sorted_keys_count_map_sorted\
    \ = paren_chars_count_map_sorted_keys_count.zip(paren_chars_count_map_sorted_keys_count_map).map(x\
    \ => (x._1, x._2.toSeq.sortBy(_._1).reverse)).toMap\n        val paren_chars_count_map_sorted_keys_count_map_sorted_keys\
    \ = paren_chars_count_map_sorted_keys_count_map_sorted.map(_._1)\n        val\
    \ paren_chars_count_map_sorted_keys_count_map_sorted_values = paren_chars_count_map_sorted_keys_count_map_sorted.map(_._2)\n\
    \        val paren_chars_count_map_sorted_keys_count_map_sorted_keys_count = paren_chars_count_map_sorted_keys_count_map_sorted_keys.length\n\
    \        val paren_chars_count_map_sorted_keys_count_map_sorted_values_count =\
    \ paren_chars_count_map_sorted_keys_count_map_sorted_values.length\n        val\
    \ paren_chars_count_map_sorted_keys_count_map_sorted_keys_count_map = paren_chars_count_map_sorted_keys_count_map_sorted_keys.zip(paren_chars_count_map_sorted_keys_count_map_sorted_values).map(x\
    \ => (x._1, x._2.toSeq.sortBy(_._1).reverse)).toMap\n        val paren_chars_count_map_sorted_keys_count_map_sorted_keys_count_map_sorted\
    \ = paren_chars_count_map_sorted_keys_count_map_sorted_keys_count.zip(paren_chars_count_map_sorted_keys_count_map_sorted_keys_count_map).map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2lq2km58.scala:26:224 --------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_count_map_sorted_keys_count_map_sorted_keys_count_map_sorted\e\
    [0m = paren_chars_count_map_sorted_keys_count_map_sorted_keys_count.zip(paren_chars_count_map_sorted_keys_count_map_sorted_keys_count_map).map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \  expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp2lq2km58.scala:20:105 -----------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_count_map_sorted_keys_count_map_sorted\e\
    [0m = paren_chars_count_map_sorted_keys_count.zip(paren_chars_count_map_sorted_keys_count_map).map(\e\
    [36mx\e[0m => (x._1, x._2.toSeq.sortBy(_._1).reverse)).toMap\n\e[31m\e[31m   |\e\
    [0m                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        value zip is not a\
    \ member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2lq2km58.scala:27:5\
    \ ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_chars = paren_string.chars\n \
    \       val paren_chars_size = paren_chars.length\n        val paren_chars_map\
    \ = paren_chars.groupBy(c => c).mapValues(_.length)\n        val paren_chars_map_sorted\
    \ = paren_chars_map.toSeq.sortBy(_._2).reverse\n        val paren_chars_map_sorted_keys\
    \ = paren_chars_map_sorted.map(_._1)\n        val paren_chars_map_sorted_values\
    \ = paren_chars_map_sorted.map(_._2)\n        val paren_chars_map_sorted_keys_size\
    \ = paren_chars_map_sorted_keys.size\n        val paren_chars_map_sorted_values_size\
    \ = paren_chars_map_sorted_values.size\n        val paren_chars_map_sorted_keys_size_minus_1\
    \ = paren_chars_map_sorted_keys_size - 1\n        val paren_chars_map_sorted_values_size_minus_1\
    \ = paren_chars_map_sorted_values_size - 1\n        val paren_chars_map_sorted_keys_size_minus_1_plus_1\
    \ = paren_chars_map_sorted_keys_size - 1\n        val paren_chars_map_sorted_values_size_minus_1_plus_1\
    \ = paren_chars_map_sorted_values_size - 1\n        val paren_chars_map_sorted_keys_size_minus_1_plus_1_plus_1\
    \ = paren_chars_map_sorted_keys_size - 1\n        val paren_chars_map_sorted_values_size_minus_1_plus_1_plus_1\
    \ = paren_chars_map_sorted_values_size - 1\n        val paren_chars_map_sorted_keys_size_minus_1_plus_1_plus_1_plus_1\
    \ = paren_chars_map_sorted_keys_size - 1\n        val paren_chars_map_sorted_values_size_minus_1_plus_1_plus_1_plus_1\
    \ = paren_chars_map_sorted_values_size - 1\n        val paren_chars_map_sorted_keys_size_minus_1_plus_1_plus_1_plus_1_plus_1\
    \ = paren_chars_map_sorted_keys_size - 1\n        val paren_chars_map_sorted_values_size_minus_1_plus_1_plus_1_plus_1_plus_1\
    \ = paren_chars_map_sorted_values_size - 1\n        val paren_chars_map_sorted_keys_size_minus_1_plus_1_plus_1_plus_1_plus_1_plus_1\
    \ = paren_chars_map_sorted_keys_size - 1\n        val paren_chars_map_sorted_values_size_minus_1_plus_1_plus_1_plus_1_plus_1_plus_1\
    \ = paren_chars_map_sorted_values_size - 1\n        val paren_chars_map_sorted_keys_size_minus_1_plus_1_plus_1_plus_1_plus_1_plus_1_plus_1\
    \ = paren\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppxw9x_lx.scala:11:43 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_size\e[0m =\
    \ paren_chars.length\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              value length is not a member of java.util.stream.IntStream\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppxw9x_lx.scala:12:42 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_map\e[0m = paren_chars.groupBy(\e\
    [36mc\e[0m => c).mapValues(_.length)\n\e[31m\e[31m   |\e[0m                  \
    \            ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value groupBy\
    \ is not a member of java.util.stream.IntStream\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmppxw9x_lx.scala:30:97 ------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_chars_map_sorted_keys_size_minus_1_plus_1_plus_1_plus_1_plus_1_plus_1_plus_1\e\
    [0m = paren\n\e[31m\e[31m   |\e[0m                                           \
    \                                                      ^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                        Not found: paren\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppxw9x_lx.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val paren_array_list\
    \ = mutable.ArrayBuffer.empty[Long]\n        val paren_array_list_size = paren_array_list.size\n\
    \        val paren_array_list_index = paren_array_list_size\n        val paren_array_list_index_size\
    \ = paren_array_list_index.size\n        val paren_array_list_index_index_size\
    \ = paren_array_list_index_size.size\n        val paren_array_list_index_index_index_size\
    \ = paren_array_list_index_index_size.size\n        val paren_array_list_index_index_index_size\
    \ = paren_array_list_index_index_index_size.size\n        val paren_array_list_index_index_index_index_size\
    \ = paren_array_list_index_index_index_index_size.size\n        val paren_array_list_index_index_index_index_index_size\
    \ = paren_array_list_index_index_index_index_index_size.size\n        val paren_array_list_index_index_index_index_index_index_size\
    \ = paren_array_list_index_index_index_index_index_index_size.size\n        val\
    \ paren_array_list_index_index_index_index_index_index_index_size = paren_array_list_index_index_index_index_index_index_index_size.size\n\
    \        val paren_array_list_index_index_index_index_index_index_index_index_size\
    \ = paren_array_list_index_index_index_index_index_index_index_index_size.size\n\
    \        val paren_array_list_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_list_index_index_index_index_index_index_index_index_index_size.size\n\
    \        val paren_array_list_index_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_list_index_index_index_index_index_index_index_index_index_index_size.size\n\
    \        val paren_array_list_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_list_index_index_index_index_index_index_index_index_index_index_index_size.size\n\
    \        val paren_array_list_index_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_list_index_index_index_index_index_index_index_index_index_index_index_size.size\n\
    \        val paren_array_list_index_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_list_index_index_index_index_index_index_index_index_index_index_index_index_size.size\n\
    \        val paren_array_list_index_index_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_list_index_index_index_index_index_index_index_index_index_index_index_index_index_size.size\n\
    \        val paren_array_list_index_index_index_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_list_index_index_index_index_index_index_index_\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqqd3ad5_.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_array_list_index_index_index_size\e\
    [0m = paren_array_list_index_index_index_size.size\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_list_index_index_index_size is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_array_list_index_index_index_size\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpqqd3ad5_.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_array_list_index_index_index_index_index_index_index_index_index_index_index_index_size\e\
    [0m = paren_array_list_index_index_index_index_index_index_index_index_index_index_index_index_size.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_list_index_index_index_index_index_index_index_index_index_index_index_index_size\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_array_list_index_index_index_index_index_index_index_index_index_index_index_index_size\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpqqd3ad5_.scala:12:31 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_array_list\e[0m =\
    \ mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m          \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpqqd3ad5_.scala:19:60 ---"
  stdout: ''
  timestamp: 1659798272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_groups = paren_string.split(\"\
    \ \")\n        val max_level = 0\n        val max_levels = mutable.ListBuffer[Long]()\n\
    \        for (paren_group <- paren_groups) {\n            val paren_group_levels\
    \ = paren_group.split(\"\\\\(\").map(_.length).toList\n            if (paren_group_levels.max\
    \ > max_level) {\n                max_level = paren_group_levels.max\n       \
    \         max_levels += max_level\n            }\n        }\n        max_levels\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmt_9ssrc.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmax_levels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpmt_9ssrc.scala:16:26 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                max_level = paren_group_levels.max\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                Reassignment to val max_level\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659798270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Long]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Long]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Long]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Long]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Long]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Long]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Long]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Long]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Long]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Long]()\n        val paren_stack_max_level_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxv76lgne.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxv76lgne.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_max_level_len\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_level_len is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_max_level_len\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxv76lgne.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_level_len\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_level_len is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_max_level_len\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxv76lgne.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_level_len\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_level_len is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_max_level_len\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxv76lgne.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_level_len\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_l"
  stdout: ''
  timestamp: 1659798278
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_top = paren_stack.size\n        val paren_stack_max_level\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren = paren_stack_top\n\
    \        val paren_stack_max_level_with_paren_within_paren = paren_stack_top\n\
    \        val paren_stack_max_level_with_paren_within_paren_within_paren = paren_stack_top\n\
    \        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_with\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpde85372c.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpde85372c.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\e\
    [0m = paren_stack_top\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpde85372c.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpde85372c.scala:26:5 ---------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798277
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_queue = mutable.Queue[String]()\n        paren_queue.enqueue(paren_string)\n\
    \        paren_stack.push(paren_queue.dequeue)\n        val paren_levels = mutable.ListBuffer[Long]()\n\
    \        while (paren_stack.nonEmpty) {\n            val paren_string = paren_stack.dequeue()\n\
    \            val paren_level = 0\n            val paren_start = paren_string.indexOf('(')\n\
    \            val paren_end = paren_string.indexOf(')')\n            val paren_length\
    \ = paren_end - paren_start + 1\n            paren_levels += paren_level\n   \
    \         paren_stack.push(paren_string.substring(paren_start + 1, paren_end))\n\
    \            while (paren_stack.nonEmpty) {\n                val paren_string\
    \ = paren_stack.dequeue()\n                val paren_level = 0\n             \
    \   val paren_start = paren_string.indexOf('(')\n                val paren_end\
    \ = paren_string.indexOf(')')\n                val paren_length = paren_end -\
    \ paren_start + 1\n                paren_levels += paren_level\n             \
    \   paren_stack.push(paren_string.substring(paren_start + 1, paren_end))\n   \
    \         }\n        }\n        paren_levels.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpugkyxke4.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpugkyxke4.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_queue\e[0m = mutable.Queue[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpugkyxke4.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798275
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_array = paren_string.split(\"\
    \ \").map(_.toLong)\n        val max_levels = paren_array.foldLeft(0)(_ + _)\n\
    \        val max_level = paren_array.foldLeft(0)(_ + _)\n        val max_level_array\
    \ = paren_array.foldLeft(0)(_ + _)\n        val max_level_array2 = paren_array.foldLeft(0)(_\
    \ + _)\n        val max_level_array3 = paren_array.foldLeft(0)(_ + _)\n      \
    \  val max_level_array4 = paren_array.foldLeft(0)(_ + _)\n        val max_level_array5\
    \ = paren_array.foldLeft(0)(_ + _)\n        val max_level_array6 = paren_array.foldLeft(0)(_\
    \ + _)\n        val max_level_array7 = paren_array.foldLeft(0)(_ + _)\n      \
    \  val max_level_array8 = paren_array.foldLeft(0)(_ + _)\n        val max_level_array9\
    \ = paren_array.foldLeft(0)(_ + _)\n        val max_level_array10 = paren_array.foldLeft(0)(_\
    \ + _)\n        val max_level_array11 = paren_array.foldLeft(0)(_ + _)\n     \
    \   val max_level_array12 = paren_array.foldLeft(0)(_ + _)\n        val max_level_array13\
    \ = paren_array.foldLeft(0)(_ + _)\n        val max_level_array14 = paren_array.foldLeft(0)(_\
    \ + _)\n        val max_level_array15 = paren_array.foldLeft(0)(_ + _)\n     \
    \   val max_level_array16 = paren_array.foldLeft(0)(_ + _)\n        val max_level_array17\
    \ = paren_array.foldLeft(0)(_ + _)\n        val max_level_array18 = paren_array.foldLeft(0)(_\
    \ + _)\n        val max_level_array19 = paren_array.foldLeft(0)(_ + _)\n     \
    \   val max_level_array20 = paren_array.foldLeft(0)(_ + _)\n        val max_level_array21\
    \ = paren_array.foldLeft(0)(_ + _)\n        val max_level_array22 = paren_array.foldLeft(0)(_\
    \ + _)\n        val max_level_array23 = paren_array.foldLeft(0)(_ + _)\n     \
    \   val max_level_array24 = paren_array.foldLef\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpozyru651.scala:11:49\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mmax_levels\e\
    [0m = paren_array.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m       \
    \                                          ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                                          Found:    Long\n\e[31m   |\e[0m   \
    \                                              Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpozyru651.scala:12:48 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmax_level\e[0m = paren_array.foldLeft(\e\
    [31m0\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m                                    \
    \            ^^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \           Found:    Long\n\e[31m   |\e[0m                                  \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpozyru651.scala:13:54 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax_level_array\e[0m = paren_array.foldLeft(\e\
    [31m0\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m                                    \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \                       Found:    Long\n\e[31m   |\e[0m                      \
    \                                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpozyru651.scala:14:55 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmax_level_array2\e[0m =\
    \ paren_array.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m           \
    \                                            ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                                  Found:    Long\n\e[31m   |\e\
    [0m                                                       Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanati"
  stdout: ''
  timestamp: 1659798284
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplp1miol2.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplp1miol2.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_max_depth_len\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_len is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_max_depth_len\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplp1miol2.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth_len\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_len is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_max_depth_len\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplp1miol2.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth_len\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_len is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_max_depth_len\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplp1miol2.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth_len\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_d"
  stdout: ''
  timestamp: 1659798279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_queue = mutable.Queue[String]()\n        val paren_levels =\
    \ mutable.Queue[Long]()\n        paren_string.split(\" \").foreach(x => {\n  \
    \          val y = x.trim\n            if (y.startsWith(\"(\")) {\n          \
    \      paren_stack += y\n            } else if (y.startsWith(\")\")) {\n     \
    \           paren_queue += y\n            } else if (y.startsWith(\")\")) {\n\
    \                paren_levels += paren_queue.dequeue\n                paren_queue\
    \ += y\n            }\n        })\n        paren_levels foreach { x => paren_levels\
    \ += x }\n        paren_levels reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpv1hrp7f5.scala:25:28 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        paren_levels reverse\n\e[31m\e[31m   |\e[0m \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \  expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpv1hrp7f5.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpv1hrp7f5.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_queue\e[0m = mutable.Queue[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpv1hrp7f5.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.Queue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798277
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_map = mutable.Map[String, Long]()\n        paren_string.split(\"\
    \\\\s+\").foreach(x => {\n            val paren_stack_item = paren_stack.last\n\
    \            val paren_stack_item_count = paren_stack_map.get(paren_stack_item).map(x\
    \ => x + 1).getOrElse(1)\n            paren_stack_map.put(paren_stack_item, paren_stack_item_count\
    \ + 1)\n            paren_stack :+= x\n        })\n        val max_level = paren_stack_map.values.max\n\
    \        val max_level_map = paren_stack_map.map(x => x._1 -> x._2).maxBy(x =>\
    \ x._2)\n        val max_level_map_value = max_level_map._2\n        val max_level_map_key\
    \ = max_level_map._1\n        val max_level_map_value = max_level_map._2\n   \
    \     val max_level_map_key = max_level_map._1\n        val max_level_map_value\
    \ = max_level_map._2\n        val max_level_map_key = max_level_map._1\n     \
    \   val max_level_map_value = max_level_map._2\n        val max_level_map_key\
    \ = max_level_map._1\n        val max_level_map_value = max_level_map._2\n   \
    \     val max_level_map_key = max_level_map._1\n        val max_level_map_value\
    \ = max_level_map._2\n        val max_level_map_key = max_level_map._1\n     \
    \   val max_level_map_value = max_level_map._2\n        val max_level_map_key\
    \ = max_level_map._1\n        val max_level_map_value = max_level_map._2\n   \
    \     val max_level_map_key = max_level_map._1\n        val max_level_map_value\
    \ = max_level_map._2\n        val max_level_map_key = max_level_map._1\n     \
    \   val max_level_map_value = max_level_map._2\n        val max_level_map_key\
    \ = max_level_map._1\n        val max_level_map_value = max_level_map._2\n   \
    \     val max_level_map_key = max_level_map._1\n        val max_level_map_value\
    \ = max_level_map._2\n        val max_level_map_key = max_level_map._1\n     \
    \   val max_level_map_value = max_level_map._2\n        val max_level_map_key\
    \ = max_level_map._1\n        val max_level_map_value = max_level_map._2\n   \
    \     val max_level_map_key = max_level_map._1\n        val max_level_map_value\
    \ = max_level_map._2\n        val max_level_map_key = max_level_map._1\n     \
    \   val max_level_map_value = max_level_map._2\n        val max_level_map_key\
    \ = max_level_map._1\n        val max_level_map_value = max_level_map._2\n   \
    \     val max_level_map_\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3fx_iib2.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3fx_iib2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_level_map_value\e[0m = max_level_map._2\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmax_level_map_value\
    \ is already defined as \e[33mvalue\e[0m \e[35mmax_level_map_value\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp3fx_iib2.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax_level_map_key\e[0m = max_level_map._1\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmax_level_map_key is already defined as \e[33mvalue\e[0m \e[35mmax_level_map_key\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3fx_iib2.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmax_level_map_value\e[0m = max_level_map._2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmax_level_map_value is already defined as \e[33mvalue\e[0m \e[35mmax_level_map_value\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3fx_iib2.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmax_level_map_key\e[0m = max_level_map._1\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmax_level_map_key is already defined as \e[33mvalue\e[0m \e[35mmax_level_map_key\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel d"
  stdout: ''
  timestamp: 1659798281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_chars = paren_string.toCharArray\n\
    \        val paren_chars_size = paren_chars.length\n        val paren_chars_map\
    \ = mutable.Map[Char, Int]()\n        var paren_level = 0\n        var paren_level_count\
    \ = 0\n        var paren_level_max_count = 0\n        var paren_level_max_count_index\
    \ = 0\n        var paren_level_max_count_char = \"\"\n        var paren_level_max_count_char_pos\
    \ = 0\n        var paren_level_max_count_char_pos_index = 0\n        var paren_level_max_count_char_pos_count\
    \ = 0\n        var paren_level_max_count_char_pos_count_index = 0\n        var\
    \ paren_level_max_count_char_pos_count_char = \"\"\n        var paren_level_max_count_char_pos_count_char_pos\
    \ = 0\n        var paren_level_max_count_char_pos_count_char_pos_index = 0\n \
    \       var paren_level_max_count_char_pos_count_char_pos_count = 0\n        var\
    \ paren_level_max_count_char_pos_count_char_pos_count_index = 0\n        var paren_level_max_count_char_pos_count_char_pos_count_char\
    \ = \"\"\n        var paren_level_max_count_char_pos_count_char_pos_count_char_pos\
    \ = 0\n        var paren_level_max_count_char_pos_count_char_pos_count_char_pos_index\
    \ = 0\n        var paren_level_max_count_char_pos_count_char_pos_count_char_pos_count\
    \ = 0\n        var paren_level_max_count_char_pos_count_char_pos_count_char_pos_count_index\
    \ = 0\n        var paren_level_max_count_char_pos_count_char_pos_count_char_pos_count_char\
    \ = \"\"\n        var paren_level_max_count_char_pos_count_char_pos_count_char_pos_count_char_pos\
    \ = 0\n        var paren_level_max_count_char_pos_count_char_pos_count_char_pos_count_char_pos_index\
    \ = 0\n        var paren_level_max_count_char_pos_count_char_pos_count_char_pos_count_char_pos_count\
    \ = 0\n        var paren_level_max_count_char_pos_count_char_pos_count_char_pos_count_char_pos_count_index\
    \ = 0\n        var paren_level_max_count_char_pos_count_char_pos_count_char_pos_count_char_pos_count_char\
    \ = \"\"\n        var paren_level_max_count_char_pos_count_char_pos_count_char_pos_count_char_pos_count_char_pos\
    \ = 0\n        var paren_level_max_count_char_pos_count_char_pos_count_char_pos_count_char_pos_count_char_pos_index\
    \ = 0\n        var paren_level_max_count_char_pos_count_char_pos_count_char_pos_count_char_pos_count_char_pos_count\
    \ = 0\n        var paren_level_max_count_char_pos_count_char_pos_count_char_pos_count_char_pos_count_char_pos_count_index\
    \ = 0\n        var paren_level_max_count_char_pos_count_char_pos_count_char_pos_count_char_pos_count_char_pos_count_char\
    \ = \"\"\n        var paren_level_max_count_char_pos_count_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqvuix_g7.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqvuix_g7.scala:12:30\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_chars_map\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpqvuix_g7.scala:44:5 ---------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count = mutable.Stack[Long]()\n        val paren_stack_top_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index_size = mutable.Stack[Long]()\n      \
    \  val paren_stack_top_count_index_count = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_index_count_size = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_index_count_index = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_index_count_index_size = mutable.Stack[Long]()\n     \
    \   val paren_stack_top_count_index_count_index_count = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index_count_index_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index_count_index_count_index = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index_count_index_count_index_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index_count_index_count_index_count = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index_count_index_count_index_count_size =\
    \ mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_index\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_count_index\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_count_index_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_count_index_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_count_index_count_size\
    \ = mutable.Stack[Long]()\n        val paren_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwvbxbbst.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwvbxbbst.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpwvbxbbst.scala:11:31 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m = mutable.Stack[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpwvbxbbst.scala:12:30 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwvbxbbst.scala:13:35 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m\
    \ = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpwvbxbbst.scala:14:36 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_top_count\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                              "
  stdout: ''
  timestamp: 1659798282
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_map = mutable.Map[String, mutable.Stack[String]]()\n\
    \        val paren_stack_map_keys = mutable.Map[String, Long]()\n        val paren_stack_map_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse =\
    \ mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_keys_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_values_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_keys_reverse_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_values_reverse_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_values_reverse_values_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_keys_reverse_values_reverse_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_values_reverse_values_reverse_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_keys_reverse_values_reverse_values_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_values_reverse_values_reverse_values_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_keys_reverse_values_reverse_values_reverse_values_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_values_reverse_values_reverse_values_reverse_values_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_keys_reverse_values_reverse_values_reverse_values_reverse_values_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_values_reverse_values_reverse_values_reverse_values_reverse_values_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_keys_reverse_values_reverse_values_reverse_values_reverse_values_reverse_values_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_values_reverse_values_reverse_values_reverse_values_reverse_values_reverse_values_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_reverse_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7tmjbh_t.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7tmjbh_t.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7tmjbh_t.scala:11:50 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.Map[\e[35mString\e\
    [0m, mutable.Stack[\e[35mString\e[0m]]()\n\e[31m\e[31m   |\e[0m              \
    \                                    ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7tmjbh_t.scala:11:30 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.Map[\e\
    [35mString\e[0m, mutable.Stack[\e[35mString\e[0m]]()\n\e[31m\e[31m   |\e[0m  \
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7tmjbh_t.scala:12:35 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_map_keys\e[0m = mutable.Map[\e[35mString\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                               \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7tmjbh_t.scala:13:37\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e"
  stdout: ''
  timestamp: 1659798283
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_map = mutable.Map[String, Long]()\n        val paren_stack_map_sorted\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse =\
    \ mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3fqoh41k.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3fqoh41k.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\e\
    [0m = mutable.Map[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp3fqoh41k.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\e\
    [0m = mutable.Map[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_revers"
  stdout: ''
  timestamp: 1659798283
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_queue = mutable.Queue[Long]()\n        paren_string.split(\"\
    \\\\s+\").foreach { x =>\n            val level = paren_stack.size\n         \
    \   val paren_level = paren_queue.size\n            val paren_level_diff = paren_level\
    \ - level\n            val paren_level_diff_max = paren_level_diff == 0 ? 0 :\
    \ paren_level_diff\n            val paren_level_diff_min = paren_level_diff ==\
    \ 0 ? 1 : paren_level_diff\n            val paren_level_diff_max_min = paren_level_diff_max\
    \ * paren_level_diff_min\n            if (paren_level_diff_max_min < 1) {\n  \
    \              paren_stack.push(level)\n                paren_queue.enqueue(level)\n\
    \            } else {\n                val paren_level_diff_max_min_2 = paren_level_diff_max_min\
    \ * 2\n                if (paren_level_diff_max_min_2 < 1) {\n               \
    \     paren_stack.push(level)\n                    paren_queue.enqueue(level)\n\
    \                } else {\n                    val paren_level_diff_max_min_3\
    \ = paren_level_diff_max_min * 3\n                    if (paren_level_diff_max_min_3\
    \ < 1) {\n                        paren_stack.push(level)\n                  \
    \      paren_queue.enqueue(level)\n                    } else {\n            \
    \            val paren_level_diff_max_min_4 = paren_level_diff_max_min * 4\n \
    \                       if (paren_level_diff_max_min_4 < 1) {\n              \
    \              paren_stack.push(level)\n                            paren_queue.enqueue(level)\n\
    \                        } else {\n                            val paren_level_diff_max_min_5\
    \ = paren_level_diff_max_min * 5\n                            if (paren_level_diff_max_min_5\
    \ < 1) {\n                                paren_stack.push(level)\n          \
    \                      paren_queue.enqueue(level)\n                          \
    \  } else {\n                                val paren_level_diff_max_min_6 =\
    \ paren_level_diff_max_min * 6\n                                if (paren_level_diff_max_min_6\
    \ < 1) {\n                                    paren_stack.push(level)\n      \
    \                              paren_queue.enqueue(level)\n                  \
    \              } else {\n                                    val paren_level_diff_max_min_7\
    \ = paren_level_diff_max_min * 7\n                                    if (paren_level_diff_max_min_7\
    \ < 1) {\n                                        paren_stack.push(level)\n  \
    \                                      paren_queue.enqueue(level)\n          \
    \                          } else {\n                                        val\
    \ paren_level_diff_max_min_8 = paren_level_diff_max_min * 8\n                \
    \                        if (paren_level_diff_max_min_8 < 1) {\n             \
    \                               paren_stack.push(level)\n                    \
    \                        paren_queue.enqueue(level)\n                        \
    \                } else {\n                                            val paren_level_diff_max_min_9\
    \ = paren_level_diff_max_min * 9\n\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp54sqi_8d.scala:68:0 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp54sqi_8d.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp54sqi_8d.scala:11:26 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_queue\e[0m = mutable.Queue[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp54sqi_8d.scala:16:67 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mparen_level_diff_max\e\
    [0m = paren_level_diff == \e[31m0\e[0m ? \e[31m0\e[0m : \e[35mparen_level_diff\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   \
    \                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                  Not found: type paren_level_diff\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp54sqi_8d.scala:17:67 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mparen_level_diff_min\e\
    [0m = paren_level_diff == \e[31m0\e[0m ? \e[31m1\e[0m : \e[35mparen_level_diff\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   \
    \                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                  Not found: type paren_level_diff\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- Warning: /tmp/tmp54sqi_8d.scala:61:4 "
  stdout: ''
  timestamp: 1659798280
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_queue = mutable.Queue[String]()\n        val paren_levels =\
    \ mutable.Map[String, Long]()\n        paren_string.split(\"\\\\s+\").foreach(x\
    \ => {\n            val y = x.trim\n            if (y.length == 0) return\n  \
    \          if (paren_stack.nonEmpty) {\n                if (paren_stack.last.equals(y))\
    \ {\n                    paren_stack.pop\n                    paren_levels(paren_stack.last)\
    \ += 1\n                } else {\n                    paren_stack += y\n     \
    \               paren_queue.enqueue(y)\n                }\n            } else\
    \ {\n                paren_stack += y\n                paren_queue.enqueue(y)\n\
    \            }\n        })\n        val max_level = paren_stack.last.length\n\
    \        val max_level_parens = paren_queue.dequeueAll.map(x => paren_levels(x)).toList\n\
    \        val max_level_parens_count = max_level_parens.count(_ > 0)\n        if\
    \ (max_level_parens_count > 0) max_level_parens.max\n        else 0\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1ltdjo0x.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp1ltdjo0x.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_queue\e[0m = mutable.Queue[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp1ltdjo0x.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1ltdjo0x.scala:15:31\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (y.length\
    \ == \e[31m0\e[0m) \e[33mreturn\e[0m\n\e[31m\e[31m   |\e[0m                  \
    \             ^^^^^^\e[0m\n\e[31m   |\e[0m                               Found:\
    \    Unit\n\e[31m   |\e[0m                               Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1ltdjo0x.scala:33:13\
    \ --------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33melse\e[0m \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m             ^\e[0m\n\e[31m   |\e[0m             Found:\
    \    (\e[31m0\e[0m : Int)\n\e[31m   |\e[0m             Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659798284
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_queue = mutable.Queue[String]()\n        paren_queue.enqueue(paren_string)\n\
    \        val paren_levels = mutable.Map[String, Long]()\n        while (paren_queue.nonEmpty)\
    \ {\n            val paren_string = paren_queue.dequeue()\n            paren_stack.push(paren_string)\n\
    \            val paren_level_string = paren_stack.last\n            val paren_level\
    \ = paren_levels.getOrElseUpdate(paren_level_string, 0L)\n            paren_levels\
    \ += (paren_level_string -> paren_level + 1)\n            val paren_group_strings\
    \ = paren_string.split(\" \").filter(_.nonEmpty)\n            paren_group_strings.foreach\
    \ { paren_group_string =>\n                val paren_group_level = paren_levels.getOrElseUpdate(paren_group_string,\
    \ 0L)\n                paren_levels += (paren_group_string -> paren_group_level\
    \ + 1)\n                val paren_group_strings = paren_group_string.split(\"\"\
    ).filter(_.nonEmpty)\n                paren_group_strings.foreach { paren_group_string\
    \ =>\n                    val paren_group_level = paren_levels.getOrElseUpdate(paren_group_string,\
    \ 0L)\n                    paren_levels += (paren_group_string -> paren_group_level\
    \ + 1)\n                    val paren_group_strings = paren_group_string.split(\"\
    \").filter(_.nonEmpty)\n                    paren_group_strings.foreach { paren_group_string\
    \ =>\n                        val paren_group_level = paren_levels.getOrElseUpdate(paren_group_string,\
    \ 0L)\n                        paren_levels += (paren_group_string -> paren_group_level\
    \ + 1)\n                        val paren_group_strings = paren_group_string.split(\"\
    \").filter(_.nonEmpty)\n                        paren_group_strings.foreach {\
    \ paren_group_string =>\n                            val paren_group_level = paren_levels.getOrElseUpdate(paren_group_string,\
    \ 0L)\n                            paren_levels += (paren_group_string -> paren_group_level\
    \ + 1)\n                            val paren_group_strings = paren_group_string.split(\"\
    \").filter(_.nonEmpty)\n                            paren_group_strings.foreach\
    \ { paren_group_string =>\n                                val paren_group_level\
    \ = paren_levels.getOrElseUpdate(paren_group_string, 0L)\n                   \
    \             paren_levels += (paren_group_string -> paren_group_level + 1)\n\
    \                                val paren_group_strings = paren_group_string.split(\"\
    \").filter(_.nonEmpty)\n                                paren_group_strings.foreach\
    \ { paren\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg2wvlgxf.scala:50:0 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg2wvlgxf.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpg2wvlgxf.scala:11:26 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_queue\e[0m = mutable.Queue[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpg2wvlgxf.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg2wvlgxf.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mwhile\e[0m (paren_queue.nonEmpty)\
    \ {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m15 |\e[0m            \e[33mval\e\
    [0m \e[36mparen_string\e[0m = paren_queue.dequeue()\n\e[31m16 |\e[0m         \
    \   paren_stack.push(paren_string)\n\e[31m17 |\e[0m            \e[33mval\e[0m\
    \ \e[36mparen_level_string\e[0m = paren_stack.last\n\e[31m18 |\e[0m          \
    \  \e[33mval\e[0m \e[36mparen_level\e[0m = paren_levels.getOrElseUpdate(paren_level_string,\
    \ \e[31m0L\e[0m)\n\e[31m19 |\e[0m            paren_levels += (paren_level_string\
    \ ->"
  stdout: ''
  timestamp: 1659798281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_queue = mutable.Queue[String]()\n        paren_queue.enqueue(paren_string)\n\
    \        paren_stack.push(paren_queue.dequeue)\n        val paren_levels = mutable.ListBuffer[Long]()\n\
    \        while (paren_stack.nonEmpty) {\n            val paren_str = paren_stack.dequeue\n\
    \            val paren_level = (paren_str.length - 1) / 2\n            paren_levels\
    \ += paren_level\n            if (paren_str.length % 2 == 1) {\n             \
    \   paren_queue.enqueue(paren_str + paren_str)\n            }\n        }\n   \
    \     paren_levels.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2pls9ljh.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2pls9ljh.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_queue\e[0m = mutable.Queue[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2pls9ljh.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798278
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_levels = mutable.ListBuffer[Long]()\n        paren_stack.push(0L)\n\
    \        paren_levels.append(0L)\n        paren_string match {\n            case\
    \ \"\" => paren_levels\n            case x => x foreach { c =>\n             \
    \   val paren_level = paren_stack.last\n                val paren_level = paren_level\
    \ + 1\n                paren_stack.push(paren_level)\n                paren_levels.append(paren_level)\n\
    \                c match {\n                    case '(' -> paren_stack.push(paren_level)\n\
    \                    case ')' -> paren_level -= 1\n                    case '('\
    \ =>\n                        paren_stack.last\n                        paren_level\n\
    \                }\n            }\n        }\n        paren_levels\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7cp5q1g3.scala:23:20 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    \e[33mcase\e[0m \e[31m')'\e[0m ->\
    \ paren_level -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^\e\
    [0m\n\e[31m   |\e[0m                    '=>' expected, but 'case' found\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7cp5q1g3.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7cp5q1g3.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_map = mutable.Map[Long, Long]()\n        val paren_stack_map_size\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_size_size = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_size_size_size: mutable.Map[Long, Long]\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_size_size_size_size:\
    \ mutable.Map[Long, Long] = mutable.Map[Long, Long]()\n        val paren_stack_map_size_size_size_size_size:\
    \ mutable.Map[Long, Long] = mutable.Map[Long, Long]()\n        val paren_stack_map_size_size_size_size_size_size:\
    \ mutable.Map[Long, Long] = mutable.Map[Long, Long]()\n        val paren_stack_map_size_size_size_size_size_size_size:\
    \ mutable.Map[Long, Long] = mutable.Map[Long, Long]()\n        val paren_stack_map_size_size_size_size_size_size_size_size:\
    \ mutable.Map[Long, Long] = mutable.Map[Long, Long]()\n        val paren_stack_map_size_size_size_size_size_size_size_size_size:\
    \ mutable.Map[Long, Long] = mutable.Map[Long, Long]()\n        val paren_stack_map_size_size_size_size_size_size_size_size_size_size:\
    \ mutable.Map[Long, Long] = mutable.Map[Long, Long]()\n        val paren_stack_map_size_size_size_size_size_size_size_size_size_size_size:\
    \ mutable.Map[Long, Long] = mutable.Map[Long, Long]()\n        val paren_stack_map_size_size_size_size_size_size_size_size_size_size_size_size:\
    \ mutable.Map[Long, Long] = mutable.Map[Long, Long]()\n        val paren_stack_map_size_size_size_size_size_size_size_size_size_size_size_size_size:\
    \ mutable.Map[Long, Long] = mutable.Map[Long, Long]()\n        val paren_stack_map_size_size_size_size_size_size_size_size_size_size_size_size_size_size:\
    \ mutable.Map[Long, Long] = mutable.Map[Long, Long]()\n        val paren_stack_map_size_size_size_size_size_size_size_size_size_size_size_size_size_size:\
    \ mutable.Map[Long, Long] = mutable.Map[Long, Long]()\n        val paren_stack_map_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size:\
    \ mutable.Map[Long, Long] = mutable.Map[Long, Long\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx762s99s.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx762s99s.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_map_size_size_size_size_size_size_size_size_size_size_size_size_size_size\e\
    [0m: mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m] = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_size_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_map_size_size_size_size_size_size_size_size_size_size_size_size_size_size\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpx762s99s.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpx762s99s.scala:11:30 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.Map[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                              Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx762s99s.scala:12:35\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_map_size\e[0m = mutable.Map[\e[35mLon"
  stdout: ''
  timestamp: 1659798283
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplp1miol2.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplp1miol2.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_max_depth_len\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_len is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_max_depth_len\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplp1miol2.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth_len\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_len is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_max_depth_len\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplp1miol2.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth_len\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_len is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_max_depth_len\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplp1miol2.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth_len\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_d"
  stdout: ''
  timestamp: 1659798279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_chars = paren_string.toCharArray\n\
    \        val paren_chars_size = paren_chars.length\n        val paren_chars_map\
    \ = mutable.HashMap[Char, Long]()\n        var paren_level = 0\n        var paren_level_count\
    \ = 0\n        var paren_level_max_count = 0\n        var paren_level_max_char\
    \ = \"\"\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren_level_max_char_pos\
    \ = 0\n        var paren_level_max_char_pos = 0\n        var paren\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps_okt8df.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps_okt8df.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mparen_level_max_char_pos\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mparen_level_max_char_pos\
    \ is already defined as \e[33mvariable\e[0m \e[35mparen_level_max_char_pos\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmps_okt8df.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mvar\e[0m \e[36mparen_level_max_char_pos\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mparen_level_max_char_pos is already defined as \e[33mvariable\e[0m \e\
    [35mparen_level_max_char_pos\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmps_okt8df.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mparen_level_max_char_pos\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_level_max_char_pos is already defined as \e[33mvariable\e\
    [0m \e[35mparen_level_max_char_pos\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmps_okt8df.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mparen_level_max_char_pos\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_level_max_char_pos is already defined as \e[33mvariable\e\
    [0m \e[35mparen_level_max_char_pos\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the "
  stdout: ''
  timestamp: 1659798283
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_map = mutable.Map[String, List[Long]]()\n        paren_stack.push(paren_string)\n\
    \        paren_stack_map.put(paren_string, List())\n        while(paren_stack.nonEmpty)\
    \ {\n            val paren_string = paren_stack.pop()\n            val paren_list_string\
    \ = paren_stack_map.get(paren_string).getOrElse(\"\")\n            val paren_list_string\
    \ = paren_list_string + paren_string\n            paren_stack_map.put(paren_string,\
    \ paren_list_string)\n            val paren_list_string = paren_list_string.split(\"\
    \ \")\n            val paren_list_string = paren_list_string.filter(x => x !=\
    \ \"\")\n            val paren_list_string = paren_list_string.map(x => x.toLong)\n\
    \            paren_stack.push(paren_list_string.mkString(\"\"))\n        }\n \
    \       val max_level = paren_stack_map.values.map(_.size).max\n        val max_level_map\
    \ = paren_stack_map.mapValues(_.size)\n        val max_level_map_sorted = max_level_map.toSeq.sortBy(_._1).reverse\n\
    \        val max_level_map_sorted_list = max_level_map_sorted.map(x => x._2).map(x\
    \ => x.toLong)\n        val max_level_map_sorted_list_string = max_level_map_sorted_list.mkString(\"\
    \ \")\n        val max_level_map_sorted_list_string_length = max_level_map_sorted_list_string.size\n\
    \        val max_level_map_sorted_list_string_length_with_spaces = max_level_map_sorted_list_string_length\
    \ + 1\n        val max_level_map_sorted_list_string_length_with_spaces_string\
    \ = max_level_map_sorted_list_string_length_with_spaces + \" \"\n        val max_level_map_sorted_list_string_length_with_spaces_string_reversed\
    \ = max_level_map_sorted_list_string_length_with_spaces_string.reverse\n     \
    \   val max_level_map_sorted_list_string_length_with_spaces_string_reversed_with_spaces\
    \ = max_level_map_sorted_list_string_length_with_spaces_string_reversed.replace(\"\
    \ \", \"\")\n        val max_level_map_sorted_list_string_length_with_spaces_string_reversed_with_spaces_reversed\
    \ = max_level_map_sorted_list_string_length_with_spaces_string_reversed_with_spaces.reverse\n\
    \        val max_level_map_sorted_list_string_length_with_spaces_string_reversed_with_spaces_reversed_with_spaces\
    \ = max_level_map_sorted_list_string_length_with_spaces_string_reversed_with_spaces_reversed.replace(\"\
    \ \", \"\")\n        val max_level_map_sorted_list_string_length_with_spaces_string_reversed_with_spaces_reversed_with_spaces_reversed\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpz3yf479i.scala:36:123 --------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mmax_level_map_sorted_list_string_length_with_spaces_string_reversed_with_spaces_reversed_with_spaces_reversed\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                                                                           ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpz3yf479i.scala:10:26 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpz3yf479i.scala:11:30 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mList\e[0m[\e[35mLong\e[0m]]()\n\e[31m\e[31m   |\e[0m  \
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpz3yf479i.scala:17:16 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m            \e[33mval\e[0m \e[36mparen_list_string\e[0m = paren_list_string\
    \ + paren_string\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_list_string is already defined as \e[33mvalue\e[0m \e\
    [35mparen_list_string\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpz3yf479i.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e"
  stdout: ''
  timestamp: 1659798283
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_groups = paren_string.split(\"\
    \ \")\n        val max_level = 0\n        val levels = mutable.ArrayBuffer.empty[Long]\n\
    \        for (paren_group <- paren_groups) {\n            val paren_group_levels\
    \ = paren_group.split(\"\\\\(\").map(x => x.split(\"\\\\)\").length)\n       \
    \     val max_level = if (paren_group_levels.max > max_level) paren_group_levels.max\
    \ else max_level\n            levels += paren_group_levels.max\n        }\n  \
    \      levels.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplbj3qa81.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmplbj3qa81.scala:15:57 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mmax_level\e[0m = \e\
    [33mif\e[0m (paren_group_levels.max > max_level) paren_group_levels.max \e[33melse\e\
    [0m max_level\n\e[31m\e[31m   |\e[0m                                         \
    \                ^\e[0m\n\e[31m   |\e[0m                                    Recursive\
    \ \e[33mvalue\e[0m \e[35mmax_level\e[0m needs type\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmplbj3qa81.scala:15:96 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mmax_level\e[0m = \e\
    [33mif\e[0m (paren_group_levels.max > max_level) paren_group_levels.max \e[33melse\e\
    [0m max_level\n\e[31m\e[31m   |\e[0m                                         \
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \                                    Recursive \e[33mvalue\e[0m \e[35mmax_level\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_chars = paren_string.split(\"\
    \ \").map(_.toChar)\n        val paren_chars_count = paren_chars.map(_.length).sum\n\
    \        val paren_chars_array = paren_chars.toArray\n        val paren_chars_array_count\
    \ = paren_chars_array.length\n        val paren_chars_array_max_count = paren_chars_array_count\
    \ - 1\n        val paren_chars_array_max_index = paren_chars_array_max_count -\
    \ 1\n        val paren_chars_array_max_value = paren_chars_array_max_count - 1\n\
    \        val paren_chars_array_max_value_count = paren_chars_array_max_value -\
    \ 1\n        val paren_chars_array_max_value_count_index = paren_chars_array_max_value_count\
    \ - 1\n        val paren_chars_array_max_value_count_index = paren_chars_array_max_value_count\
    \ - 1\n        val paren_chars_array_max_value_count_index_count = paren_chars_array_max_value_count_index\
    \ - 1\n        val paren_chars_array_max_value_count_index_count_count = paren_chars_array_max_value_count_index_count\
    \ - 1\n        val paren_chars_array_max_value_count_index_count_count_count =\
    \ paren_chars_array_max_value_count_index_count_count - 1\n        val paren_chars_array_max_value_count_index_count_count_count_count\
    \ = paren_chars_array_max_value_count_index_count_count_count - 1\n        val\
    \ paren_chars_array_max_value_count_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbma92p44.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbma92p44.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_chars_array_max_value_count_index\e[0m = paren_chars_array_max_value_count\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_chars_array_max_value_count_index is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_chars_array_max_value_count_index\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpbma92p44.scala:10:56 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_chars\e[0m = paren_string.split(\e[31m\"\
    \ \"\e[0m).map(_.toChar)\n\e[31m\e[31m   |\e[0m                              \
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \            value toChar is not a member of String\n\e[31m\e[31m-- Error: /tmp/tmpbma92p44.scala:10:63\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m10 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_chars\e[0m = paren_string.split(\e[31m\" \"\e[0m).map(_.toChar)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \       ^\e[0m\n\e[31m   |\e[0m                                          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          \
    \                where:    B is a type variable\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpbma92p44.scala:25:5 ---------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659798285
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_curr = mutable.Stack[Long]()\n        val paren_stack_level_curr\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_curr = mutable.Stack[Long]()\n\
    \        val paren_stack_level_curr = mutable.Stack[Long]()\n        val paren_stack_level_curr\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_curr = mutable.Stack[Long]()\n\
    \        val paren_stack_level_curr = mutable.Stack[Long]()\n        val paren_stack_level_curr\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_curr = mutable.Stack[Long]()\n\
    \        val paren_stack_level_curr = mutable.Stack[Long]()\n        val paren_stack_level_curr\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_curr = mutable.Stack[Long]()\n\
    \        val paren_stack_level_curr = mutable.Stack[Long]()\n        val paren_stack_level_curr\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_curr = mutable.Stack[Long]()\n\
    \        val paren_stack_level_curr = mutable.Stack[Long]()\n        val paren_stack_level_curr\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_curr = mutable.Stack[Long]()\n\
    \        val paren_stack_level_curr = mutable.Stack[Long]()\n        val paren_stack_level_curr\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_curr = mutable.Stack[Long]()\n\
    \        val paren_stack_level_curr = mutable.Stack[Long]()\n        val paren_stack_level_curr\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_curr = mutable.Stack[Long]()\n\
    \        val paren_stack_level_curr = mutable.Stack[Long]()\n        val paren_stack_level_curr\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_curr = mutable.Stack[Long]()\n\
    \        val paren_stack_level_curr = mutable.Stack[Long]()\n        val paren_stack_level_cur\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6cke88jr.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6cke88jr.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_level_curr\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mparen_stack_level_curr is already defined as \e[33mvalue\e[0m \e\
    [35mparen_stack_level_curr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6cke88jr.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level_curr\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_level_curr is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_level_curr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6cke88jr.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level_curr\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_level_curr is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_level_curr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6cke88jr.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level_curr\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_level_curr is already defined as \e[33mvalue\e\
    [0m"
  stdout: ''
  timestamp: 1659798284
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_queue = mutable.Queue[String]()\n        paren_queue.enqueue(paren_string)\n\
    \        paren_stack.push(paren_queue.dequeue())\n        val paren_levels = mutable.ArrayBuffer.empty[Long]\n\
    \        while (paren_stack.nonEmpty) {\n            val paren_str = paren_stack.dequeue()\n\
    \            val paren_level = (paren_str.length - 1) / 2\n            paren_levels\
    \ += paren_level\n            paren_queue.enqueue(paren_str.substring(0, paren_level))\n\
    \            paren_stack.push(paren_queue.dequeue())\n        }\n        paren_levels.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8aeprz2f.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8aeprz2f.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_queue\e[0m = mutable.Queue[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8aeprz2f.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798280
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_queue = mutable.Queue[String]()\n        paren_queue.enqueue(paren_string)\n\
    \        paren_stack.push(paren_queue.dequeue)\n        val max_level = 0\n  \
    \      var level = 0\n        while(!paren_stack.isEmpty) {\n            val paren_string\
    \ = paren_stack.dequeue\n            val paren_level = paren_string.count('(')\
    \ - paren_string.count(')')\n            if(paren_level > max_level) {\n     \
    \           max_level = paren_level\n                level = paren_level\n   \
    \         }\n            paren_stack.enqueue(paren_string)\n            paren_queue.enqueue(paren_string)\n\
    \        }\n        level\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg1a_ntlx.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpg1a_ntlx.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_queue\e[0m = mutable.Queue[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpg1a_ntlx.scala:20:26 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                max_level = paren_level\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          Reassignment to val max_level\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpg1a_ntlx.scala:26:8 ---------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        level\n\e[31m\e[31m   |\e[0m        ^^^^^\e[0m\n\e\
    [31m   |\e[0m        Found:    (level : Int)\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798285
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_array = paren_string.split(\"\
    \ \")\n        val max_level = 0\n        val max_level_array = new Array[Long](paren_array.length)\n\
    \        for (i <- 0 until paren_array.length) {\n            val paren_level\
    \ = paren_array(i).length\n            if (paren_level > max_level) {\n      \
    \          max_level = paren_level\n                max_level_array(i) = paren_level\n\
    \            } else if (paren_level == max_level) {\n                max_level_array(i)\
    \ = max_level_array(i) + 1\n            }\n        }\n        max_level_array.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpb7zjv746.scala:16:26 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                max_level = paren_level\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          Reassignment to val max_level\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798285
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_queue = mutable.Queue[String]()\n        paren_queue.enqueue(paren_string)\n\
    \        paren_stack.push(paren_queue.dequeue)\n        val max_level = 0\n  \
    \      while(!paren_queue.isEmpty) {\n            val current_paren_str = paren_queue.dequeue\n\
    \            val current_paren_stack = paren_stack.last\n            val current_paren_queue\
    \ = paren_queue\n            val current_paren_level = paren_stack.size\n    \
    \        val current_paren_str = current_paren_str.replaceAll(\"\\\\)\", \"\\\\\
    )\").replaceAll(\"\\\\(\", \"\\\\(\")\n            val current_paren_stack = current_paren_stack.replaceAll(\"\
    \\\\)\", \"\\\\)\").replaceAll(\"\\\\(\", \"\\\\(\")\n            val current_paren_queue\
    \ = current_paren_queue.replaceAll(\"\\\\)\", \"\\\\)\").replaceAll(\"\\\\(\"\
    , \"\\\\(\")\n            val current_paren_level = current_paren_level + 1\n\
    \            val current_paren_str = current_paren_str.replaceAll(\"\\\\)\", \"\
    \\\\)\").replaceAll(\"\\\\(\", \"\\\\(\")\n            val current_paren_stack\
    \ = current_paren_stack.replaceAll(\"\\\\)\", \"\\\\)\").replaceAll(\"\\\\(\"\
    , \"\\\\(\")\n            val current_paren_queue = current_paren_queue.replaceAll(\"\
    \\\\)\", \"\\\\)\").replaceAll(\"\\\\(\", \"\\\\(\")\n            val current_paren_level\
    \ = current_paren_level + 1\n            val current_paren_str = current_paren_str.replaceAll(\"\
    \\\\)\", \"\\\\)\").replaceAll(\"\\\\(\", \"\\\\(\")\n            val current_paren_stack\
    \ = current_paren_stack.replaceAll(\"\\\\)\", \"\\\\)\").replaceAll(\"\\\\(\"\
    , \"\\\\(\")\n            val current_paren_queue = current_paren_queue.replaceAll(\"\
    \\\\)\", \"\\\\)\").replaceAll(\"\\\\(\", \"\\\\(\")\n            val current_paren_level\
    \ = current_paren_level + 1\n            val current_paren_str = current_paren_str.replaceAll(\"\
    \\\\)\", \"\\\\)\").replaceAll(\"\\\\(\", \"\\\\(\")\n            val current_paren_stack\
    \ = current_paren_stack.replaceAll(\"\\\\)\", \"\\\\)\").replaceAll(\"\\\\(\"\
    , \"\\\\(\")\n            val current_paren_queue = current_paren_queue.replaceAll(\"\
    \\\\)\", \"\\\\)\").replaceAll(\"\\\\(\", \"\\\\(\")\n            val current_paren_level\
    \ = current_paren_level + 1\n            val current_paren_str = current_paren_str.replaceAll(\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp_cltswrd.scala:36:65 -----------------------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            \e[33mval\e[0m \e[36mcurrent_paren_str\e\
    [0m = current_paren_str.replaceAll(\"\n\e[31m\e[31m   |\e[0m                 \
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                                            unclosed string literal\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmp_cltswrd.scala:45:0 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_cltswrd.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_cltswrd.scala:11:26 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_queue\e[0m = mutable.Queue[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_cltswrd.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mcurrent_paren_str\e\
    [0m = current_paren_str.replaceAll(\e[31m\"\\\\)\"\e[0m, \e[31m\"\\\\)\"\e[0m).replaceAll(\e\
    [31m\"\\\\(\"\e[0m, \e[31m\"\\\\(\"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrent_paren_str is already defined as \e[33mvalue\e[0m \e\
    [35mcurrent_paren_str\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_cltswrd.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 "
  stdout: ''
  timestamp: 1659798290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_size = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_size = mutable.Stack[Long]()\n  \
    \      val paren_stack_top_top_top_top_top_top = mutable.Stack[Long]()\n     \
    \   val paren_stack_top_top_top_top_top_top_size = mutable.Stack[Long]()\n   \
    \     val paren_stack_top_top_top_top_top_top_top = mutable.Stack[Long]()\n  \
    \      val paren_stack_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7q99qins.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7q99qins.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_top_top_top_top_top_top_top_top_top_top_size\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_top_top_top_top_top_top_top_top_top_size is\
    \ already defined as \e[33mvalue\e[0m \e[35mparen_stack_top_top_top_top_top_top_top_top_top_top_size\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp7q99qins.scala:10:26 ------------------------\e[0m\e[0m\n\
    \e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7q99qins.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m =\
    \ mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7q99qins.scala:12:30\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_top\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not F"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_groups = paren_string.split(\"\
    \ \")\n        val max_levels = paren_groups.map(x => x.length).max\n        val\
    \ max_levels_map = mutable.Map[Long, Long]()\n        paren_groups.foreach(x =>\
    \ {\n            val level = x.length\n            val level_value = max_levels_map.getOrElse(level,\
    \ 0)\n            max_levels_map(level) = level_value\n        })\n        val\
    \ max_levels_map_list = max_levels_map.toList.sortBy(_._1).reverse\n        val\
    \ max_levels_map_list_iter = max_levels_map_list.iterator\n        val max_levels_map_list_next\
    \ = max_levels_map_list_iter.next()\n        val max_levels_map_list_value = max_levels_map_list_next._2\n\
    \        val max_levels_map_list_key = max_levels_map_list_next._1\n        val\
    \ max_levels_map_list_value_iter = max_levels_map_list_value.iterator\n      \
    \  val max_levels_map_list_value_next = max_levels_map_list_value_iter.next()\n\
    \        val max_levels_map_list_value_value = max_levels_map_list_value_next._2\n\
    \        val max_levels_map_list_value_key = max_levels_map_list_value_next._1\n\
    \        val max_levels_map_list_key_iter = max_levels_map_list_key.iterator\n\
    \        val max_levels_map_list_key_next = max_levels_map_list_key_iter.next()\n\
    \        val max_levels_map_list_key_value = max_levels_map_list_key_next._2\n\
    \        val max_levels_map_list_key_value = max_levels_map_list_key_next._1\n\
    \        val max_levels_map_list_value_key_iter = max_levels_map_list_value_key.iterator\n\
    \        val max_levels_map_list_value_key_next = max_levels_map_list_value_key_iter.next()\n\
    \        val max_levels_map_list_value_key_value = max_levels_map_list_value_key_next._2\n\
    \        val max_levels_map_list_value_key_value = max_levels_map_list_value_key_next._1\n\
    \        val max_levels_map_list_key_value_iter = max_levels_map_list_key_value.iterator\n\
    \        val max_levels_map_list_key_value_next = max_levels_map_list_key_value_iter.next()\n\
    \        val max_levels_map_list_key_value_key_iter = max_levels_map_list_key_value_next.iterator\n\
    \        val max_levels_map_list_key_value_key_next = max_levels_map_list_key_value_key_iter.next()\n\
    \        val max_levels_map_list_key_value_key_value = max_levels_map_list_key_value_key_next._2\n\
    \        val max_levels_map_list_key_value_key_value = max_levels_map_list_key_value_key_next.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpooxe7a87.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpooxe7a87.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax_levels_map_list_key_value\e[0m = max_levels_map_list_key_next._1\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_levels_map_list_key_value is already defined as \e[33mvalue\e\
    [0m \e[35mmax_levels_map_list_key_value\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpooxe7a87.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mmax_levels_map_list_value_key_value\e\
    [0m = max_levels_map_list_value_key_next._1\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_levels_map_list_value_key_value is already defined as\
    \ \e[33mvalue\e[0m \e[35mmax_levels_map_list_value_key_value\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpooxe7a87.scala:40:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_levels_map_list_key_value_key_value\e[0m = max_levels_map_list_key_value_key_next.\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_levels_map_list_key_value_key_value is already defined\
    \ as \e[33mvalue\e[0m \e[35mmax_levels_map_list_key_value_key_value\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpooxe7a87.scala:12:29 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m"
  stdout: ''
  timestamp: 1659798291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1_jz69qt.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1_jz69qt.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_top_size\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m \e[35mparen_stack_top_size\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1_jz69qt.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp1_jz69qt.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m\
    \ = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp1_jz69qt.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m\
    \ = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_size\e[0m"
  stdout: ''
  timestamp: 1659798290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_map = mutable.HashMap[String, Long]()\n        paren_stack.push(paren_string)\n\
    \        val paren_stack_map_size = paren_stack_map.size\n        while(paren_stack.nonEmpty)\
    \ {\n            val paren_string = paren_stack.pop()\n            val paren_stack_map_size\
    \ = paren_stack_map.size\n            val paren_stack_map_iter = paren_stack_map.iterator\n\
    \            val paren_stack_map_iter_next = paren_stack_map_iter.next()\n   \
    \         val paren_stack_map_iter_next_key = paren_stack_map_iter_next.key\n\
    \            val paren_stack_map_iter_next_value = paren_stack_map_iter_next.value\n\
    \            val paren_stack_map_iter_next_key_size = paren_stack_map_iter_next_key.length\n\
    \            val paren_stack_map_iter_next_value_size = paren_stack_map_iter_next_value.length\n\
    \            val paren_stack_map_iter_next_key_is_space = paren_stack_map_iter_next_key.charAt(paren_stack_map_iter_next_key_size-1)\
    \ == ' '\n            val paren_stack_map_iter_next_value_is_space = paren_stack_map_iter_next_value.charAt(paren_stack_map_iter_next_value_size-1)\
    \ == ' '\n            val paren_stack_map_iter_next_key_is_open = paren_stack_map_iter_next_key.charAt(paren_stack_map_iter_next_key_size-1)\
    \ == '('\n            val paren_stack_map_iter_next_value_is_open = paren_stack_map_iter_next_value.charAt(paren_stack_map_iter_next_value_size-1)\
    \ == '('\n            val paren_stack_map_iter_next_key_is_close = paren_stack_map_iter_next_key.charAt(paren_stack_map_iter_next_key_size-1)\
    \ == ')'\n            val paren_stack_map_iter_next_value_is_close = paren_stack_map_iter_next_value.charAt(paren_stack_map_iter_next_value_size-1)\
    \ == ')'\n            val paren_stack_map_iter_next_key_is_comma = paren_stack_map_iter_next_key.charAt(paren_stack_map_iter_next_key_size-1)\
    \ == ','\n            val paren_stack_map_iter_next_value_is_comma = paren_stack_map_iter_next_value.charAt(paren_stack_map_iter_next_value_size-1)\
    \ == ','\n            val paren_stack_map_iter_next_key_is_dot = paren_stack_map_iter_next_key.charAt(paren_stack_map_iter_next_key_size-1)\
    \ == '.'\n            val paren_stack_map_iter_next_value_is_dot = paren_stack_map_iter_next_value.charAt(paren_stack_map_iter_next_value_size-1)\
    \ == '.'\n            val paren_stack_map_iter_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpls0_j69r.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpls0_j69r.scala:42:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m42 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpls0_j69r.scala:10:26 ------------------------\e[0m\e[0m\n\
    \e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpls0_j69r.scala:11:30 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                              Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpls0_j69r.scala:41:1\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpls0_j69r.scala:35:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m35 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1659798292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_map = mutable.Map[String, List[Long]]()\n        val\
    \ paren_stack_map_keys = mutable.Map[String, Long]()\n        val paren_stack_map_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_keys = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_keys = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_values = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_values_keys = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_values_values = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_values_values_keys = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdwg3eal7.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdwg3eal7.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_map_values_values_values_values_values_values_values_values_values_values_keys\e\
    [0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpdwg3eal7.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_values_values_values_values_values_values_values_values_values_values_values\e\
    [0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_values_values_values_values_values_values_values_values_values_values_values\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_map_values_values_values_values_values_values_values_values_values_values_values\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdwg3eal7.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659798291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_groups = paren_string.split(\"\
    \\\\s+\")\n        val max_levels = paren_groups.map(paren => paren.length).max\n\
    \        val levels = mutable.ArrayBuffer.empty[Long]\n        var level = 0\n\
    \        for (paren \u2190 paren_groups) {\n            if (paren.length == level)\
    \ {\n                levels += 1\n            } else {\n                level\
    \ = 0\n                levels += 1\n            }\n        }\n        levels.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0cfispcu.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\nthere were 3\
    \ deprecation warnings; re-run with -deprecation for details\n1 warning found\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_groups = paren_string.split(\"\
    \ \").map(_.toLong)\n        val max_levels = paren_groups.foldLeft(0)(_ + _.length)\n\
    \        val max_levels_map = paren_groups.map(x => (x, x.length)).toMap\n   \
    \     val max_levels_map_keys = max_levels_map.keys\n        val max_levels_map_values\
    \ = max_levels_map.values\n        val max_levels_map_keys_sorted = max_levels_map_keys.sorted\n\
    \        val max_levels_map_values_sorted = max_levels_map_values.sorted\n   \
    \     val max_levels_map_keys_sorted_zipped = max_levels_map_keys_sorted.zip(max_levels_map_values_sorted)\n\
    \        val max_levels_map_keys_sorted_zipped_sorted = max_levels_map_keys_sorted_zipped.sortBy(_._1).reverse\n\
    \        val max_levels_map_keys_sorted_zipped_sorted_zipped = max_levels_map_keys_sorted_zipped_sorted.zip(max_levels_map_values_sorted)\n\
    \        val max_levels_map_keys_sorted_zipped_sorted_zipped_sorted = max_levels_map_keys_sorted_zipped_sorted_zipped.sortBy(_._1).reverse\n\
    \        val max_levels_map_keys_sorted_zipped_sorted_zipped_sorted_zipped = max_levels_map_keys_sorted_zipped_sorted_zipped_sorted.zip(max_levels_map_values_sorted)\n\
    \        val max_levels_map_keys_sorted_zipped_sorted_zipped_sorted_zipped_sorted\
    \ = max_levels_map_keys_sorted_zipped_sorted_zipped_sorted_zipped.sortBy(_._1).reverse\n\
    \        val max_levels_map_keys_sorted_zipped_sorted_zipped_sorted_zipped_sorted_zipped\
    \ = max_levels_map_keys_sorted_zipped_sorted_zipped_sorted_zipped_sorted.zip(max_levels_map_values_sorted)\n\
    \        val max_levels_map_keys_sorted_zipped_sorted_zipped_sorted_zipped_sorted_zipped_sorted\
    \ = max_levels_map_keys_sorted_zipped_sorted_zipped_sorted_zipped_sorted_zipped.sortBy(_._1).reverse\n\
    \        val max_levels_map_keys_sorted_zipped_sorted_zipped_sorted_zipped_sorted_zipped_sorted_zipped\
    \ = max_levels_map_keys_sorted_zipped_sorted_zipped_sorted_zipped_sorted_zipped_sorted.zip(max_levels_map_values_sorted)\n\
    \        val max_levels_map_keys_sorted_zipped_sorted_zipped_sorted_zipped_sorted_zipped_sorted_zipped_sorted\
    \ = max_levels_map_keys_sorted_zipped_sorted_zipped_sorted_zipped_sorted_zipped_sorted_zipped.sortBy(_._1).reverse\n\
    \        val max_levels_map_keys_sorted_zipped_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpli044ow7.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpli044ow7.scala:11:56\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mmax_levels\e[0m = paren_groups.foldLeft(\e[31m0\e[0m)(_ + _.length)\n\e[31m\e\
    [31m   |\e[0m                                                      ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value length is not a\
    \ member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpli044ow7.scala:12:57\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mmax_levels_map\e[0m = paren_groups.map(\e[36mx\e[0m => (x, x.length)).toMap\n\
    \e[31m\e[31m   |\e[0m                                                       ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value length is not a\
    \ member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpli044ow7.scala:15:61\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mmax_levels_map_keys_sorted\e[0m = max_levels_map_keys.sorted\n\e[31m\e[31m\
    \   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          value sorted is not a member of\
    \ Iterable[Long]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpli044ow7.scala:16:65\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mmax_levels_map_values_sorted\e[0m = max_levels_map_values.sorted\n\e[31m\e\
    [31m   |\e[0m                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       value sorted is not a member of Iterable[Nothing]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpli044ow7.scala:28:5 ---------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    6 errors found\n"
  stdout: ''
  timestamp: 1659798294
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_map = mutable.Map[String, Long]()\n        val paren_stack_map_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_keys = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_values_values = mutable.Map[String, Long]()\n   \
    \     val paren_stack_map_values_values_keys = mutable.Map[String, Long]()\n \
    \       val paren_stack_map_values_values_values = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_values_values_values_keys = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_values_values_values_values = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_keys = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_keys_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys_values_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys_values_values_values_values_keys_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbwax5z6x.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbwax5z6x.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpbwax5z6x.scala:11:30 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.Map[\e[35mString\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbwax5z6x.scala:12:35 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_keys\e[0m\
    \ = mutable.Map[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                                  ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpbwax5z6x.scala:13:37 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_values\e[0m =\
    \ mutable.Map[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                                  ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbwax5z6x.scala:14:42 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_values_keys\e\
    [0m = mutable.Ma"
  stdout: ''
  timestamp: 1659798292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_map = mutable.Map[Long, Long]()\n        val paren_stack_map_keys\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values = mutable.Set[Long]()\n\
    \        val paren_stack_map_values_count = mutable.Map[Long, Long]()\n      \
    \  val paren_stack_map_values_count_keys = mutable.Set[Long]()\n        val paren_stack_map_values_count_values\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_count_keys_count =\
    \ mutable.Map[Long, Long]()\n        val paren_stack_map_values_count_keys_count_values\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_count_keys_count_values_count\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_count_keys_count_values_count_keys\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_count_keys_count_values_count_values\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_count_keys_count_values_count_keys_count\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_count_keys_count_values_count_keys_count_values\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_count_keys_count_values_count_keys_count_values_count\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_count_keys_count_values_count_keys_count_values_count_keys\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_count_keys_count_values_count_keys_count_values_count_values\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_count_keys_count_values_count_keys_count_values_count_keys_count\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_count_keys_count_values_count_keys_count_values_count_keys_count_values\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_count_keys_count_values_count_keys_count_values_count_keys_count_values_count\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_count_keys_count_values_count_keys_count_values_count_keys_count_values_count_keys\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_count_keys_count_values_count_keys_count_values_count_keys_count_values_count_values\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_count_keys_count_values_count_keys_count_values_count_keys_count_values_count_keys_count\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_count_\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2qiy9mwg.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2qiy9mwg.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp2qiy9mwg.scala:11:30 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2qiy9mwg.scala:12:35 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_keys\e[0m\
    \ = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2qiy9mwg.scala:13:37\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_map_values\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp2qiy9mwg.scala:14:43 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_values_count\e\
    [0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[3"
  stdout: ''
  timestamp: 1659798293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_chars = paren_string.split(\"\"\
    \"[\\(\\)]\"\"\").toList\n        val paren_chars_size = paren_chars.size\n  \
    \      val paren_chars_map = paren_chars.zipWithIndex.toMap\n        val paren_chars_map_size\
    \ = paren_chars_map.size\n        val paren_chars_map_keys = paren_chars_map.keys\n\
    \        val paren_chars_map_values = paren_chars_map.values\n        val paren_chars_map_values_size\
    \ = paren_chars_map_values.size\n        val paren_chars_map_values_keys = paren_chars_map_values.keys\n\
    \        val paren_chars_map_values_values_size = paren_chars_map_values_values.size\n\
    \        val paren_chars_map_values_values_keys = paren_chars_map_values_values.keys\n\
    \        val paren_chars_map_values_values_values_size = paren_chars_map_values_values_values.size\n\
    \        val paren_chars_map_values_values_values_keys = paren_chars_map_values_values_values.keys\n\
    \        val paren_chars_map_values_values_values_values_size = paren_chars_map_values_values_values_values.size\n\
    \        val paren_chars_map_values_values_values_values_keys = paren_chars_map_values_values_values_values.keys\n\
    \        val paren_chars_map_values_values_values_values_values_size = paren_chars_map_values_values_values_values_values.size\n\
    \        val paren_chars_map_values_values_values_values_values_keys = paren_chars_map_values_values_values_values_values.keys\n\
    \        val paren_chars_map_values_values_values_values_values_values_size =\
    \ paren_chars_map_values_values_values_values_values_values.size\n        val\
    \ paren_chars_map_values_values_values_values_values_values_values_keys = paren_chars_map_values_values_values_values_values_values_values.keys\n\
    \        val paren_chars_map_values_values_values_values_values_values_values_values_size\
    \ = paren_chars_map_values_values_values_values_values_values_values_values.size\n\
    \        val paren_chars_map_values_values_values_values_values_values_values_values_values_keys\
    \ = paren_chars_map_values_values_values_values_values_values_values_values.keys\n\
    \        val paren_chars_map_values_values_values_values_values_values_values_values_values_values_values_size\
    \ = paren_chars_map_values_values_values_values_values_values_values_values_values.size\n\
    \        val paren_chars_map_values_values_values_values_values_values_values_values_values_values_values_keys\
    \ = paren_chars_map_values_values_values_values_values_values_values_values_values_values.keys\n\
    \        val paren_chars_map_values_values_values_values_values_values_values_values_values_values_values_values_values_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvp5j1n2t.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvp5j1n2t.scala:17:65\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_chars_map_values_keys\e[0m = paren_chars_map_values.keys\n\e[31m\e[31m\
    \   |\e[0m                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue keys is not a member of Iterable[Int] - did you mean\
    \ paren_chars_map_values.head?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvp5j1n2t.scala:18:49\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_chars_map_values_values_size\e[0m = paren_chars_map_values_values.size\n\
    \e[31m\e[31m   |\e[0m                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Not found: paren_chars_map_values_values\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvp5j1n2t.scala:19:49\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_chars_map_values_values_keys\e[0m = paren_chars_map_values_values.keys\n\
    \e[31m\e[31m   |\e[0m                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Not found: paren_chars_map_values_values\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvp5j1n2t.scala:20:56\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_chars_map_values_values_values_size\e[0m = paren_chars_map_values_values_values.size\n\
    \e[31m\e[31m   |\e[0m                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: paren_chars_map_values_values_values\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available "
  stdout: ''
  timestamp: 1659798294
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_map = mutable.Map[String, List[Long]]()\n        paren_stack.push(paren_string)\n\
    \        val paren_stack_map_keys = paren_stack_map.keys\n        val paren_stack_map_values\
    \ = paren_stack_map.values\n        while(paren_stack.nonEmpty) {\n          \
    \  val paren_string = paren_stack.pop()\n            val paren_stack_map_key =\
    \ paren_stack_map_keys.last\n            val paren_stack_map_value = paren_stack_map_values.last\n\
    \            val paren_stack_map_value_length = paren_stack_map_value.length\n\
    \            val paren_stack_map_value_length = paren_stack_map_value_length +\
    \ 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val paren_stack_map_value_length = paren_stack_map_value_length\
    \ + 1\n            val \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpo1j5_e3u.scala:44:15 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m            \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m  \
    \             ^\e[0m\n\e[31m   |\e[0m               pattern expected\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo1j5_e3u.scala:53:0 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo1j5_e3u.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpo1j5_e3u.scala:11:30 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.Map[\e[35mString\e\
    [0m, \e[35mList\e[0m[\e[35mLong\e[0m]]()\n\e[31m\e[31m   |\e[0m              \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                              Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo1j5_e3u.scala:20:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e\
    [0m \e[36mparen_stack_map_value_length\e[0m = paren_stack_map_value_length + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_value_length is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_map_value_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo1j5_e3u.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mparen_stack_map_value_length\e\
    [0m = paren"
  stdout: ''
  timestamp: 1659798293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_size = mutable.Stack[Long]()\n  \
    \      val paren_stack_max_depth_pos_depth_depth = mutable.Stack[Long]()\n   \
    \     val paren_stack_max_depth_pos_depth_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptnox32ws.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptnox32ws.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_max_depth_pos_depth_depth_depth_depth_depth_size\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_pos_depth_depth_depth_depth_depth_size\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_max_depth_pos_depth_depth_depth_depth_depth_size\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptnox32ws.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth_pos_depth_depth_depth_depth_depth_depth\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_pos_depth_depth_depth_depth_depth_depth\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_max_depth_pos_depth_depth_depth_depth_depth_depth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptnox32ws.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_size\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_size\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_max_depth_pos_depth_depth_"
  stdout: ''
  timestamp: 1659798293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_queue = mutable.Queue[String]()\n        paren_queue.enqueue(paren_string)\n\
    \        while(!paren_queue.isEmpty) {\n            val paren_string = paren_queue.dequeue()\n\
    \            val paren_level = paren_stack.size\n            val paren_chars =\
    \ paren_string.chars\n            val paren_chars_size = paren_chars.size\n  \
    \          val paren_chars_index = paren_chars.indexWhere(_ == '(')\n        \
    \    val paren_chars_index_end = paren_chars.indexWhere(_ == ')')\n          \
    \  val paren_chars_index_start = paren_chars_index + 1\n            val paren_chars_index_end\
    \ = paren_chars_index_end + 1\n            val paren_chars_index_start = paren_chars_index_start\
    \ - 1\n            val paren_chars_index_end = paren_chars_index_end - 1\n   \
    \         val paren_chars_index_start = paren_chars_index_start - 1\n        \
    \    val paren_chars_index_end = paren_chars_index_end - 1\n            val paren_chars_index_start\
    \ = paren_chars_index_start - 1\n            val paren_chars_index_end = paren_chars_index_end\
    \ - 1\n            val paren_chars_index_start = paren_chars_index_start - 1\n\
    \            val paren_chars_index_end = paren_chars_index_end - 1\n         \
    \   val paren_chars_index_start = paren_chars_index_start - 1\n            val\
    \ paren_chars_index_end = paren_chars_index_end - 1\n            val paren_chars_index_start\
    \ = paren_chars_index_start - 1\n            val paren_chars_index_end = paren_chars_index_end\
    \ - 1\n            val paren_chars_index_start = paren_chars_index_start - 1\n\
    \            val paren_chars_index_end = paren_chars_index_end - 1\n         \
    \   val paren_chars_index_start = paren_chars_index_start - 1\n            val\
    \ paren_chars_index_end = paren_chars_index_end - 1\n            val paren_chars_index_start\
    \ = paren_chars_index_start - 1\n            val paren_chars_index_end = paren_chars_index_end\
    \ - 1\n            val paren_chars_index_start = paren_chars_index_start - 1\n\
    \            val paren_chars_index_end = paren_chars_index_end - 1\n         \
    \   val paren_chars_index_start = paren_chars_index_start - 1\n            val\
    \ paren_chars_index_end = paren_chars_index_end - \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5t2rh8gl.scala:43:63 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m            \e[33mval\e[0m \e[36mparen_chars_index_end\e\
    [0m = paren_chars_index_end - \n\e[31m\e[31m   |\e[0m                        \
    \                                       ^\e[0m\n\e[31m   |\e[0m              \
    \                         expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5t2rh8gl.scala:52:0 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5t2rh8gl.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp5t2rh8gl.scala:11:26 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_queue\e[0m = mutable.Queue[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5t2rh8gl.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mparen_chars_index_end\e\
    [0m = paren_chars_index_end + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_chars_index_end is already defined as \e[33mvalue\e\
    [0m \e[35mparen_chars_index_end\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5t2rh8gl.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e"
  stdout: ''
  timestamp: 1659798295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_map = mutable.Map[String, Long]()\n        paren_stack.push(paren_string)\n\
    \        paren_stack_map.put(paren_string, 0L)\n        val paren_stack_max_level\
    \ = mutable.Map[String, Long]()\n        val paren_stack_max_level_map = mutable.Map[String,\
    \ Long]()\n        while(paren_stack.nonEmpty) {\n            val paren_string\
    \ = paren_stack.pop()\n            val paren_level = paren_stack_map.get(paren_string)\n\
    \            val paren_level_map = paren_stack_max_level_map.get(paren_string)\n\
    \            if (paren_level == null || paren_level_map == null) {\n         \
    \       paren_stack_max_level.put(paren_string, paren_level)\n               \
    \ paren_stack_max_level_map.put(paren_string, paren_level)\n            } else\
    \ {\n                val max_level = paren_level_map.getOrElse(paren_string, 0L)\n\
    \                if (paren_level > max_level) {\n                    paren_stack_max_level.put(paren_string,\
    \ paren_level)\n                    paren_stack_max_level_map.put(paren_string,\
    \ paren_level)\n                }\n            }\n            val paren_group_string\
    \ = paren_string.substring(0, paren_string.indexOf('('))\n            val paren_group_level\
    \ = paren_stack_map.get(paren_group_string)\n            val paren_group_level_map\
    \ = paren_stack_max_level_map.get(paren_group_string)\n            if (paren_group_level\
    \ == null || paren_group_level_map == null) {\n                paren_stack_max_level.put(paren_group_string,\
    \ paren_group_level)\n                paren_stack_max_level_map.put(paren_group_string,\
    \ paren_group_level)\n            } else {\n                val max_level = paren_group_level_map.getOrElse(paren_group_string,\
    \ 0L)\n                if (paren_group_level > max_level) {\n                \
    \    paren_stack_max_level.put(paren_group_string, paren_group_level)\n      \
    \              paren_stack_max_level_map.put(paren_group_string, paren_group_level)\n\
    \                }\n            }\n            val paren_group_strings = paren_string.substring(paren_string.indexOf('(')\
    \ + 1, paren_string.lastIndexOf(')')).split(' ')\n            paren_group_strings.foreach(s\
    \ => {\n                val paren_group_level = paren_stack_map.get(s)\n     \
    \           val paren_group_level_map = paren_stack_max_level_map.get(s)\n   \
    \             if (paren_group_level == null || paren_group_level_map == null)\
    \ {\n                    paren_stack_max_level.put(s, paren_group_level)\n   \
    \                 paren_stack_max_level_map.put(s, paren_group_level)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkclhncoc.scala:58:0 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkclhncoc.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpkclhncoc.scala:11:30 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.Map[\e[35mString\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkclhncoc.scala:14:36 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_level\e\
    [0m = mutable.Map[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                                    ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpkclhncoc.scala:15:40 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_level_map\e\
    [0m = mutable.Map[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                                        ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpkclhncoc.scala:16:8 ---------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mwhile\e[0m(paren_stack.nonEmpty) {\n\e\
    [31m\e[31m   |\e[0m      "
  stdout: ''
  timestamp: 1659798294
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val paren_array_max\
    \ = paren_array_size - 1\n        var paren_array_index = 0\n        var paren_array_level\
    \ = 0\n        var paren_array_max_level = 0\n        var paren_array_max_level_array\
    \ = new Array[Long](paren_array_max)\n        var paren_array_max_level_array_index\
    \ = 0\n        var paren_array_max_level_array_size = 0\n        var paren_array_max_level_array_max_index\
    \ = 0\n        var paren_array_max_level_array_max_size = 0\n        var paren_array_max_level_array_max_value\
    \ = 0\n        var paren_array_max_level_array_max_value_array = new Array[Long](paren_array_max)\n\
    \        var paren_array_max_level_array_max_value_array_index = 0\n        var\
    \ paren_array_max_level_array_max_value_array_size = 0\n        var paren_array_max_level_array_max_value_array_max_index\
    \ = 0\n        var paren_array_max_level_array_max_value_array_max_size = 0\n\
    \        var paren_array_max_level_array_max_value_array_max_value = 0\n     \
    \   var paren_array_max_level_array_max_value_array_max_value_array = new Array[Long](paren_array_max)\n\
    \        var paren_array_max_level_array_max_value_array_max_value_array_index\
    \ = 0\n        var paren_array_max_level_array_max_value_array_max_value_array_size\
    \ = 0\n        var paren_array_max_level_array_max_value_array_max_value_array_max_index\
    \ = 0\n        var paren_array_max_level_array_max_value_array_max_value_array_max_size\
    \ = 0\n        var paren_array_max_level_array_max_value_array_max_value_array_max_value\
    \ = 0\n        var paren_array_max_level_array_max_value_array_max_value_array_max_value_array\
    \ = new Array[Long](paren_array_max)\n        var paren_array_max_level_array_max_value_array_max_value_array_max_value_array_index\
    \ = 0\n        var paren_array_max_level_array_max_value_array_max_value_array_max_value_array_size\
    \ = 0\n        var paren_array_max_level_array_max_value_array_max_value_array_max_value_array_max_index\
    \ = 0\n        var paren_array_max_level_array_max_value_array_max_value_array_max_value_array_max_size\
    \ = 0\n        var paren_array_max_level_array_max_value_array_max_value_array_max_value_array_max_value\
    \ = 0\n        var paren_array_max_level_array_max_value_array_max_value_array_max_value_array_max_value_array\
    \ = new Array[Long](paren_array_max)\n        var paren_array_max_level_array_max_value_array_max_value_array_max_value_array_max_value_array_index\
    \ = 0\n        var paren_array_max_level_array_max_value_array_max_value_array_max_value_array_max_value_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpklc1ymc2.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpklc1ymc2.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798294
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_max = mutable.Stack[Long]()\n        val paren_stack_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(paren_stack_max.size)\n\
    \        val paren_stack_max_size = paren_stack_max_size.push(\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfr7m882n.scala:37:61 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_size\e[0m\
    \ = paren_stack_max_size.push(\n\e[31m\e[31m   |\e[0m                        \
    \                                     ^\e[0m\n\e[31m   |\e[0m                \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfr7m882n.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_size\e[0m\
    \ = paren_stack_max_size.push(paren_stack_max.size)\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_max_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfr7m882n.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_size\e[0m\
    \ = paren_stack_max_size.push(paren_stack_max.size)\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_max_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfr7m882n.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_size\e[0m\
    \ = paren_stack_max_size.push(paren_stack_max.size)\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_max_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group o"
  stdout: ''
  timestamp: 1659798295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_levels = mutable.ListBuffer[Long]()\n        val paren_level\
    \ = 0\n        paren_string.split(\"\\\\s+\").foreach(x => {\n            val\
    \ level = paren_stack.size\n            paren_stack += level\n            paren_levels\
    \ += level\n            if (x == \"(\") {\n                paren_level += 1\n\
    \            } else if (x == \")\") {\n                paren_level -= 1\n    \
    \        }\n        })\n        paren_level.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnvnqw0um.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpnvnqw0um.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpnvnqw0um.scala:18:28 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                paren_level += \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          value\
    \ += is not a member of Int - did you mean paren_level.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpnvnqw0um.scala:20:28 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m                paren_level -= \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          value\
    \ -= is not a member of Int - did you mean paren_level.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpnvnqw0um.scala:23:20 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        paren_level.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m   value toList is not a member of Int - did you mean paren_level.toInt?\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1659798296
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n        val paren_stack_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpghq2yvwq.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpghq2yvwq.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_max_depth_pos\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_pos is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_max_depth_pos\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpghq2yvwq.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth_pos\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_pos is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_max_depth_pos\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpghq2yvwq.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth_pos\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_pos is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_max_depth_pos\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpghq2yvwq.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth_pos\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_d"
  stdout: ''
  timestamp: 1659798296
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_map = mutable.Map[Long, Long]()\n        paren_string.split(\"\
    \\\\s+\").foreach(x => {\n            val paren_level = paren_stack.size\n   \
    \         val paren_level_map = paren_stack_map.getOrElseUpdate(paren_level, paren_level)\n\
    \            val paren_level_map_key = paren_level_map + paren_level\n       \
    \     val paren_level_map_value = paren_level_map_key + paren_level\n        \
    \    paren_stack.push(paren_level)\n            paren_stack_map.put(paren_level_map_key,\
    \ paren_level_map_value)\n        })\n        paren_stack.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprfav15bp.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprfav15bp.scala:11:30 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.Map[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                              Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_index = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len_max_index_max = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len_max_index_max_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len_max_index_max_len_max = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len_max_index_max_len_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len_max_index_max_len_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len_max_index_max_len_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len_max_index_max_len_max_max_max_max_max =\
    \ mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_index_max_len_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_index_max_len_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_index_max_len_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_index_max_len_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_index_max_len_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_index_max_len_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_index_max_len_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_index_max_len_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_index_max_len_max_max_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1vnw0xag.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1vnw0xag.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_max_depth_len_max_index_max_len_max_max_max_max_max_max_max_max_max_max_max\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_len_max_index_max_len_max_max_max_max_max_max_max_max_max_max_max\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_max_depth_len_max_index_max_len_max_max_max_max_max_max_max_max_max_max_max\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1vnw0xag.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp1vnw0xag.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m =\
    \ mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1vnw0xag.scala:12:35\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_max_size\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                   ^^^^^^^\e[0m\n\e[31m   |"
  stdout: ''
  timestamp: 1659798297
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_levels = mutable.Stack[Long]()\n        paren_stack.push(paren_string)\n\
    \        paren_levels.push(0)\n        val paren_levels_copy = paren_levels.deep\n\
    \        while(paren_stack.nonEmpty) {\n            val paren_string = paren_stack.pop()\n\
    \            val paren_level = paren_levels.pop()\n            val paren_levels_copy\
    \ = paren_levels.deep\n            val paren_levels_copy = paren_levels_copy -\
    \ paren_level\n            val paren_levels_copy = paren_levels_copy - paren_level\n\
    \            val paren_levels_copy = paren_levels_copy - paren_level\n       \
    \     val paren_levels_copy = paren_levels_copy - paren_level\n            val\
    \ paren_levels_copy = paren_levels_copy - paren_level\n            val paren_levels_copy\
    \ = paren_levels_copy - paren_level\n            val paren_levels_copy = paren_levels_copy\
    \ - paren_level\n            val paren_levels_copy = paren_levels_copy - paren_level\n\
    \            val paren_levels_copy = paren_levels_copy - paren_level\n       \
    \     val paren_levels_copy = paren_levels_copy - paren_level\n            val\
    \ paren_levels_copy = paren_levels_copy - paren_level\n            val paren_levels_copy\
    \ = paren_levels_copy - paren_level\n            val paren_levels_copy = paren_levels_copy\
    \ - paren_level\n            val paren_levels_copy = paren_levels_copy - paren_level\n\
    \            val paren_levels_copy = paren_levels_copy - paren_level\n       \
    \     val paren_levels_copy = paren_levels_copy - paren_level\n            val\
    \ paren_levels_copy = paren_levels_copy - paren_level\n            val paren_levels_copy\
    \ = paren_levels_copy - paren_level\n            val paren_levels_copy = paren_levels_copy\
    \ - paren_level\n            val paren_levels_copy = paren_levels_copy - paren_level\n\
    \            val paren_levels_copy = paren_levels_copy - paren_level\n       \
    \     val paren_levels_copy = paren_levels_copy - paren_level\n            val\
    \ paren_levels_copy = paren_levels_copy - paren_level\n            val paren_levels_copy\
    \ = paren_levels_copy - paren_level\n            val paren_levels_\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb9ci475u.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb9ci475u.scala:52:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m52 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpb9ci475u.scala:10:26 ------------------------\e[0m\e[0m\n\
    \e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpb9ci475u.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpb9ci475u.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mparen_levels_copy\e\
    [0m = paren_levels_copy - paren_level\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_levels_copy is already defined as \e[33mvalue\e[0m \e\
    [35mparen_levels_copy\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpb9ci475u.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mparen_levels_copy\e\
    [0m = paren_levels_copy - paren_level\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_levels_copy is already defined as \e[33mvalue\e[0m \e\
    [35mparen_levels_copy\e[0m\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1659798297
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_groups = paren_string.split(\"\
    \\\\s+\")\n        val max_level = 0\n        val max_levels = mutable.ArrayBuffer.empty[Long]\n\
    \        for (paren_group <- paren_groups) {\n            val levels = paren_group.split(\"\
    \\\\(\").map(_.length).max\n            if (levels > max_level) {\n          \
    \      max_level = levels\n                max_levels += levels\n            }\n\
    \        }\n        max_levels.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxd1v799o.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmax_levels\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpxd1v799o.scala:16:26 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                max_level = levels\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val max_level\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_top = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size_top = mutable.Stack[Long]()\n        val paren_stack_top_size_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size_top_size_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size_top_size_top = mutable.Stack[Long]()\n     \
    \   val paren_stack_top_size_top_size_top_size = mutable.Stack[Long]()\n     \
    \   val paren_stack_top_size_top_size_top_size_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size_top_size_top_size_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size_top_size_top_size_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size_top_size_top_size_top_size_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size_top_size_top_size_top_size_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size_top_size_top_size_top_size_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size_top_size_top_size_top_size_top_size_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size_top_size_top_size_top_size_top_size_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size_top_size_top_size_top_size_top_size_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size_top_size_top_size_top_size_top_size_top_size_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size_top_size_top_size_top_size_top_size_top_size_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size_top_size_top_size_top_size_top_size_top_size_top_size_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size_top_size_top_size_top_size_top_size_top_size_top_size_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size_top_size_top_size_top_size_top_size_top_size_top_size_top_size_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size_top_size_top_size_top_size_top_size_top_size_top_size_top_size_top\
    \ = mutable.Stack[\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphq50_8qz.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmphq50_8qz.scala:10:26 ------------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmphq50_8qz.scala:11:30 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphq50_8qz.scala:12:35 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m\
    \ = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmphq50_8qz.scala:13:40 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_top_size_size\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                                        Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphq50_8qz.scala:14:39\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_top_size_top\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e\
    [3"
  stdout: ''
  timestamp: 1659798300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_string = mutable.Stack[String]()\n        val paren_stack_string_count\
    \ = mutable.Stack[Int]()\n        val paren_stack_level = mutable.Stack[Int]()\n\
    \        val paren_stack_level_max = mutable.Stack[Int]()\n        val paren_stack_level_max_count\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_max_index = mutable.Stack[Int]()\n\
    \        val paren_stack_level_max_index = mutable.Stack[Int]()\n        val paren_stack_level_max_index\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_max_index = mutable.Stack[Int]()\n\
    \        val paren_stack_level_max_index = mutable.Stack[Int]()\n        val paren_stack_level_max_index\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_max_index = mutable.Stack[Int]()\n\
    \        val paren_stack_level_max_index = mutable.Stack[Int]()\n        val paren_stack_level_max_index\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_max_index = mutable.Stack[Int]()\n\
    \        val paren_stack_level_max_index = mutable.Stack[Int]()\n        val paren_stack_level_max_index\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_max_index = mutable.Stack[Int]()\n\
    \        val paren_stack_level_max_index = mutable.Stack[Int]()\n        val paren_stack_level_max_index\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_max_index = mutable.Stack[Int]()\n\
    \        val paren_stack_level_max_index = mutable.Stack[Int]()\n        val paren_stack_level_max_index\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_max_index = mutable.Stack[Int]()\n\
    \        val paren_stack_level_max_index = mutable.Stack[Int]()\n        val paren_stack_level_max_index\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_max_index = mutable.Stack[Int]()\n\
    \        val paren_stack_level_max_index = mutable.Stack[Int]()\n        val paren_stack_level_max_index\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_max_index = mutable.Stack[Int]()\n\
    \        val paren_stack_level_max_index = mutable.Stack[Int]()\n        val paren_stack_level_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpebhxif0o.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpebhxif0o.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_level_max_index\e[0m = mutable.Stack[\e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_level_max_index is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_level_max_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpebhxif0o.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level_max_index\e\
    [0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_level_max_index is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_level_max_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpebhxif0o.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level_max_index\e\
    [0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_level_max_index is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_level_max_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpebhxif0o.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level_max_index\e\
    [0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e"
  stdout: ''
  timestamp: 1659798302
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_chars = paren_string.split(\"\
    \ \").map(_.toChar)\n        val paren_chars_count = paren_chars.map(c => if (c\
    \ == '(') 1 else 0).sum\n        val paren_chars_count_max = paren_chars.map(c\
    \ => if (c == '(') 1 else 0).max\n        val paren_chars_count_min = paren_chars.map(c\
    \ => if (c == '(') 1 else 0).min\n        val paren_chars_count_sum = paren_chars.map(c\
    \ => if (c == '(') 1 else 0).sum\n        val paren_chars_count_product = paren_chars.map(c\
    \ => if (c == '(') 1 else 0).product\n        val paren_chars_count_product2 =\
    \ paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product3\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product4\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product5\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product6\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product7\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product8\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product9\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product10\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product11\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product12\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product13\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product14\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product15\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product16\
    \ = paren_chars.map(c => if (c == '('\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppwz8g7j9.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppwz8g7j9.scala:10:56\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_chars\e[0m = paren_string.split(\e[31m\" \"\e[0m).map(_.toChar)\n\e\
    [31m\e[31m   |\e[0m                                                      ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value toChar is not a member\
    \ of String\n\e[31m\e[31m-- Error: /tmp/tmppwz8g7j9.scala:10:63 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_chars\e[0m = paren_string.split(\e\
    [31m\" \"\e[0m).map(_.toChar)\n\e[31m\e[31m   |\e[0m                         \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                           No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                          where:    B is a type variable\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppwz8g7j9.scala:31:5 ---------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798302
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_array = paren_string.split(\"\
    \ \")\n        val max_level = 0\n        val max_level_index = 0\n        val\
    \ paren_array_size = paren_array.length\n        val paren_array_index = 0\n \
    \       val paren_array_size = paren_array.length\n        while (paren_array_index\
    \ < paren_array_size) {\n            if (paren_array(paren_array_index) == \"\
    (\") {\n                paren_array_index += 1\n                val paren_array_size\
    \ = paren_array.length\n                while (paren_array_index < paren_array_size)\
    \ {\n                    if (paren_array(paren_array_index) == \")\") {\n    \
    \                    paren_array_index += 1\n                        val paren_array_size\
    \ = paren_array.length\n                        while (paren_array_index < paren_array_size)\
    \ {\n                            if (paren_array(paren_array_index) == \"(\")\
    \ {\n                                paren_array_index += 1\n                \
    \                val paren_array_size = paren_array.length\n                 \
    \               while (paren_array_index < paren_array_size) {\n             \
    \                       if (paren_array(paren_array_index) == \")\") {\n     \
    \                                   paren_array_index += 1\n                 \
    \                       val paren_array_size = paren_array.length\n          \
    \                              while (paren_array_index < paren_array_size) {\n\
    \                                            val level = paren_array(paren_array_index).toLong\n\
    \                                            if (level > max_level) {\n      \
    \                                          max_level = level\n               \
    \                                 max_level_index = paren_array_index\n      \
    \                                      }\n                                   \
    \         paren_array_index += 1\n                                        }\n\
    \                                    }\n                                    paren_array_index\
    \ += 1\n                                }\n                            }\n   \
    \                         paren_array_index += 1\n                        }\n\
    \                    }\n                    paren_array_index += 1\n         \
    \       }\n            }\n            paren_array_index += 1\n        }\n    \
    \    val max_level = max_level.toLong\n        val max_level_index = max_level_index.toLong\n\
    \        val max_level_paren_array = paren_array(max_level_index + 1 until paren_array_size)\n\
    \        val max_level_paren_array_size = max_level_paren_array.length\n     \
    \   val max_level_paren_array_index = 0\n        val max_level_paren_array_size\
    \ = max_level_paren_array.length\n        while (max_level_paren_array_index <\
    \ max_level_paren_array_size) {\n            if (max_level_paren_array(max_level_paren_array_index)\
    \ == \"(\") {\n                max_level_paren_array_index += 1\n            \
    \    val max_level_paren_array_size = max_level_paren_array.length\n         \
    \       while (max_level_paren_array_index < max_level_paren_array_size) {\n \
    \                   if (max_level_paren_array(max_level_paren_array_index) ==\
    \ \")\") {\n                        max_level_paren_array_index += 1\n       \
    \                 val max_level_paren_array_size = max_level_paren_array.length\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7h03z1x_.scala:75:0 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7h03z1x_.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_array_size\e[0m = paren_array.length\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mparen_array_size\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_array_size\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7h03z1x_.scala:52:12 ---------------------------\e[0m\e[0m\n\e[31m52\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax_level\e[0m = max_level.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmax_level\
    \ is already defined as \e[33mvalue\e[0m \e[35mmax_level\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7h03z1x_.scala:53:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_level_index\e[0m = max_level_index.toLong\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmax_level_index\
    \ is already defined as \e[33mvalue\e[0m \e[35mmax_level_index\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7h03z1x_.scala:57:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m57 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_level_paren_array_size\e[0m = max_level_paren_array.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_level_paren_array_size is already defined as \e[33mvalue\e\
    [0m \e[35mmax_level_paren_array_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of topleve"
  stdout: ''
  timestamp: 1659798306
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_groups = paren_string.split(\"\
    \ \")\n        val max_level = 0\n        val max_level_index = 0\n        val\
    \ levels = mutable.ArrayBuffer.empty[Long]\n        for (i <- 0 until paren_groups.length)\
    \ {\n            val paren_group = paren_groups(i)\n            val paren_group_levels\
    \ = paren_group.split(\"\\\\(\").length\n            if (paren_group_levels >\
    \ max_level) {\n                max_level = paren_group_levels\n             \
    \   max_level_index = i\n            }\n            levels += paren_group_levels\n\
    \        }\n        levels.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgcorjiqo.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpgcorjiqo.scala:18:26 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                max_level = paren_group_levels\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Reassignment to val max_level\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpgcorjiqo.scala:19:32 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                max_level_index = i\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val max_level_index\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_size = mutable.Stack[Long]()\n  \
    \      val paren_stack_max_depth_pos_depth_depth = mutable.Stack[Long]()\n   \
    \     val paren_stack_max_depth_pos_depth_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8dt_5c1b.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8dt_5c1b.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_max_depth_pos_depth_depth_depth_depth_depth_size\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_pos_depth_depth_depth_depth_depth_size\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_max_depth_pos_depth_depth_depth_depth_depth_size\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8dt_5c1b.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth_pos_depth_depth_depth_depth_depth_depth\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_pos_depth_depth_depth_depth_depth_depth\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_max_depth_pos_depth_depth_depth_depth_depth_depth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8dt_5c1b.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_size\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_size\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_max_depth_pos_depth_depth_"
  stdout: ''
  timestamp: 1659798303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_top = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpng6egfc4.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m\
    \ = paren_stack_top_size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpng6egfc4.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m\
    \ = paren_stack_top_size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpng6egfc4.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m\
    \ = paren_stack_top_size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpng6egfc4.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m\
    \ = paren_stack_top_size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpng6egfc4.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m    "
  stdout: ''
  timestamp: 1659798303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val paren_array_max_size\
    \ = paren_array_size - 1\n        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n\
    \        val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_fq4dtcp.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp_fq4dtcp.scala:13:12 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_size\e[0m = paren_array_max_size.map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_array_max_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_fq4dtcp.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_size\e[0m\
    \ = paren_array_max_size.max\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_array_max_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_fq4dtcp.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_size\e[0m\
    \ = paren_array_max_size.map(_.toLong)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_array_max_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_fq4dtcp.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_size\e[0m\
    \ = paren_array_max_size.max\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_size is already defined as \e[33mv"
  stdout: ''
  timestamp: 1659798304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_length = mutable.Stack[Long]()\n        val paren_stack_length_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_length_length_length = mutable.Stack[Long]()\n\
    \        val paren_stack_length_length_length_length = mutable.Stack[Long]()\n\
    \        val paren_stack_length_length_length_length_length = mutable.Stack[Long]()\n\
    \        val paren_stack_length_length_length_length_length_length = mutable.Stack[Long]()\n\
    \        val paren_stack_length_length_length_length_length_length_length = mutable.Stack[Long]()\n\
    \        val paren_stack_length_length_length_length_length_length_length_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_length_length_length_length_length_length_length_length_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_length_length_length_length_length_length_length_length_length_length_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgm_3gsui.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgm_3gsui.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpgm_3gsui.scala:11:33 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_length\e[0m = mutable.Stack[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgm_3gsui.scala:12:40 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_length_length\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpgm_3gsui.scala:13:47 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_length_length_length\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                               Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpgm_3gsui.scala:14:54 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_length_length_length_le"
  stdout: ''
  timestamp: 1659798304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_groups = paren_string.split(\"\
    \\\\s+\")\n        val paren_groups_with_paren = paren_groups.map(x => if (x ==\
    \ '(') 1 else 0)\n        val paren_groups_with_paren_sum = paren_groups_with_paren.reduceLeft(_\
    \ + _)\n        val paren_groups_with_paren_max_sum = paren_groups_with_paren_sum.max\n\
    \        val paren_groups_with_paren_max_index = paren_groups_with_paren_max_sum.indexWhere(_\
    \ == 1)\n        val paren_groups_with_paren_max_index = if (paren_groups_with_paren_max_index\
    \ == -1) 0 else paren_groups_with_paren_max_index\n        val paren_groups_with_paren_max_index_plus_one\
    \ = paren_groups_with_paren_max_index + 1\n        val paren_groups_with_paren_max_index_plus_two\
    \ = paren_groups_with_paren_max_index_plus_one + 1\n        val paren_groups_with_paren_max_index_plus_three\
    \ = paren_groups_with_paren_max_index_plus_two + 1\n        val paren_groups_with_paren_max_index_plus_four\
    \ = paren_groups_with_paren_max_index_plus_three + 1\n        val paren_groups_with_paren_max_index_plus_five\
    \ = paren_groups_with_paren_max_index_plus_four + 1\n        val paren_groups_with_paren_max_index_plus_six\
    \ = paren_groups_with_paren_max_index_plus_five + 1\n        val paren_groups_with_paren_max_index_plus_seven\
    \ = paren_groups_with_paren_max_index_plus_six + 1\n        val paren_groups_with_paren_max_index_plus_eight\
    \ = paren_groups_with_paren_max_index_plus_seven + 1\n        val paren_groups_with_paren_max_index_plus_nine\
    \ = paren_groups_with_paren_max_index_plus_eight + 1\n        val paren_groups_with_paren_max_index_plus_ten\
    \ = paren_groups_with_paren_max_index_plus_nine + 1\n        val paren_groups_with_paren_max_index_plus_eleven\
    \ = paren_groups_with_paren_max_index_plus_ten + 1\n        val paren_groups_with_paren_max_index_plus_twelve\
    \ = paren_groups_with_paren_max_index_plus_eleven + 1\n        val paren_groups_with_paren_max_index_plus_thirteen\
    \ = paren_groups_with_paren_max_index_plus_twelve + 1\n        val paren_groups_with_paren_max_index_plus_fourteen\
    \ = paren_groups_with_paren_max_index_plus_thirteen + 1\n        val paren_groups_with_paren_max_index_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp989oi7m_.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp989oi7m_.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_paren_max_index\e[0m = \e[33mif\e[0m (paren_groups_with_paren_max_index\
    \ == -\e[31m1\e[0m) \e[31m0\e[0m \e[33melse\e[0m paren_groups_with_paren_max_index\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_paren_max_index is already defined as \e\
    [33mvalue\e[0m \e[35mparen_groups_with_paren_max_index\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- Error: /tmp/tmp989oi7m_.scala:11:64\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m11 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_with_paren\e[0m = paren_groups.map(\e[36mx\e\
    [0m => \e[33mif\e[0m (x == \e[31m'('\e[0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \              ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String and\
    \ Char cannot be compared with == or !=\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp989oi7m_.scala:14:80 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_paren_max_index\e[0m = paren_groups_with_paren_max_sum.indexWhere(_\
    \ == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                    \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                          value indexWhere is not a member of Int => Int\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp989oi7m_.scala:31:5 ---------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation avai"
  stdout: ''
  timestamp: 1659798306
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_size = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_size = mutable.Stack[Long]()\n  \
    \      val paren_stack_top_top_top_top_top_top = mutable.Stack[Long]()\n     \
    \   val paren_stack_top_top_top_top_top_top_size = mutable.Stack[Long]()\n   \
    \     val paren_stack_top_top_top_top_top_top_top = mutable.Stack[Long]()\n  \
    \      val paren_stack_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7q99qins.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7q99qins.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_top_top_top_top_top_top_top_top_top_top_size\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_top_top_top_top_top_top_top_top_top_size is\
    \ already defined as \e[33mvalue\e[0m \e[35mparen_stack_top_top_top_top_top_top_top_top_top_top_size\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp7q99qins.scala:10:26 ------------------------\e[0m\e[0m\n\
    \e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7q99qins.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m =\
    \ mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7q99qins.scala:12:30\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_top\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not F"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_queue = mutable.Queue[Long]()\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        val paren_levels = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_levels_size = mutable.ArrayBuffer.empty[Long]\n        paren_queue.foreach\
    \ { paren_level =>\n            paren_levels_size += paren_level\n           \
    \ paren_queue.dequeue()\n            paren_levels += paren_level\n        }\n\
    \        paren_levels_size.foreach { paren_level =>\n            paren_queue.enqueue(paren_level)\n\
    \        }\n        paren_queue.foreach { paren_level =>\n            paren_stack.push(paren_level)\n\
    \            paren_queue.dequeue()\n        }\n        paren_queue.foreach { paren_level\
    \ =>\n            paren_levels += paren_level\n        }\n        paren_levels_size.foreach\
    \ { paren_level =>\n            paren_queue.enqueue(paren_level)\n        }\n\
    \        paren_queue.foreach { paren_level =>\n            paren_stack.push(paren_level)\n\
    \            paren_queue.dequeue()\n        }\n        paren_queue.foreach { paren_level\
    \ =>\n            paren_levels += paren_level\n        }\n        paren_levels_size.foreach\
    \ { paren_level =>\n            paren_queue.enqueue(paren_level)\n        }\n\
    \        paren_queue.foreach { paren_level =>\n            paren_stack.push(paren_level)\n\
    \            paren_queue.dequeue()\n        }\n        paren_queue.foreach { paren_level\
    \ =>\n            paren_levels += paren_level\n        }\n        paren_levels_size.foreach\
    \ { paren_level =>\n            paren_queue.enqueue(paren_level)\n        }\n\
    \        paren_queue.foreach { paren_level =>\n            paren_stack.push(paren_level)\n\
    \            paren_queue.dequeue()\n        }\n        paren_queue.foreach { paren_level\
    \ =>\n            paren_levels += paren_level\n        }\n        paren_levels_size.foreach\
    \ { paren_level =>\n            paren_queue.enqueue(paren_level)\n        }\n\
    \        paren_queue.foreach { paren_level =>\n            paren_stack.push(paren_level)\n\
    \            paren_queue.dequeue()\n        }\n        paren_queue.foreach { paren_level\
    \ =>\n            paren_\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpouikvioc.scala:78:0 ----------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpouikvioc.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpouikvioc.scala:11:26 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_queue\e[0m = mutable.Queue[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpouikvioc.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpouikvioc.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_levels_size\e[0m =\
    \ mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m          \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpouikvioc.scala:77:1 ---------------------\e[0m\e[0m\n\e[31m77\
    \ |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m\
    \   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compilin"
  stdout: ''
  timestamp: 1659798306
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_array = paren_string.split(\"\
    \ \").map(_.toLong)\n        val paren_array_size = paren_array.length\n     \
    \   val paren_array_max_size = paren_array_size - 1\n        val paren_array_max_index\
    \ = paren_array_size - 1\n        val paren_array_max_value = paren_array(paren_array_max_index)\n\
    \        val paren_array_max_value_count = paren_array_max_value.toString.length\n\
    \        val paren_array_max_value_count_index = paren_array_max_value_count -\
    \ 1\n        val paren_array_max_value_count_value = paren_array_max_value_count.toLong\n\
    \        val paren_array_max_value_count_value_count = paren_array_max_value_count_value.toString.length\n\
    \        val paren_array_max_value_count_value_count_index = paren_array_max_value_count_value_count\
    \ - 1\n        val paren_array_max_value_count_value_count_value = paren_array_max_value_count_value_count.toLong\n\
    \        val paren_array_max_value_count_value_count_value_count = paren_array_max_value_count_value_count_value.toString.length\n\
    \        val paren_array_max_value_count_value_count_value_count_index = paren_array_max_value_count_value_count_value_count\
    \ - 1\n        val paren_array_max_value_count_value_count_value_count_value =\
    \ paren_array_max_value_count_value_count_value_count.toLong\n        val paren_array_max_value_count_value_count_value_count_value_count\
    \ = paren_array_max_value_count_value_count_value_count_value.toString.length\n\
    \        val paren_array_max_value_count_value_count_value_count_value_count_index\
    \ = paren_array_max_value_count_value_count_value_count_value_count - 1\n    \
    \    val paren_array_max_value_count_value_count_value_count_value_count_value\
    \ = paren_array_max_value_count_value_count_value_count_value_count.toLong\n \
    \       val paren_array_max_value_count_value_count_value_count_value_count_value_count\
    \ = paren_array_max_value_count_value_count_value_count_value_count_value.toString.length\n\
    \        val paren_array_max_value_count_value_count_value_count_value_count_value_count_index\
    \ = paren_array_max_value_count_value_count_value_count_value_count_value - 1\n\
    \        val paren_array_max_value_count_value_count_value_count_value_count_value_count_value\
    \ = paren_array_max_value_count_value_count_value_count_value_count_value_count.toLong\n\
    \        val paren_array_max_value_count_value_count_value_count_value_count_value_count_value_count_index\
    \ = paren_array_max_value_count_value_count_value_count_value_count_value_count_value\
    \ - 1\n        val paren_array_max_value_count_value_count_value_count_value_count_value_count_value_count_value\
    \ = paren_array_max_value_count_value_count_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwtr0z9zv.scala:31:108 -----------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_value_count_value_count_value_count_value_count_value_count_value_count_value\e\
    [0m = paren_array_max_value_count_value_count_\n\e[31m\e[31m   |\e[0m        \
    \                                                                            \
    \                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: paren_array_max_value_count_value_count_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwtr0z9zv.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = paren_stack_top_size.push(paren_stack_size.size)\n\
    \        val paren_stack_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_size = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_size = mutable.Stack[Long]()\n  \
    \      val paren_stack_top_top_top_top_top_top = mutable.Stack[Long]()\n     \
    \   val paren_stack_top_top_top_top_top_top_size = mutable.Stack[Long]()\n   \
    \     val paren_stack_top_top_top_top_top_top_top = mutable.Stack[Long]()\n  \
    \      val paren_stack_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvryih0m_.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvryih0m_.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_top_size\e[0m = paren_stack_top_size.push(paren_stack_size.size)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpvryih0m_.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpvryih0m_.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m =\
    \ mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvryih0m_.scala:12:30\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_top\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpvryih0m_.scala:13:35 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e["
  stdout: ''
  timestamp: 1659798306
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_levels = mutable.Stack[Long]()\n        paren_stack.push(paren_string)\n\
    \        paren_levels.push(0)\n        val max_levels = mutable.Stack[Long]()\n\
    \        val max_levels_size = mutable.Stack[Long]()\n        while(!paren_stack.isEmpty)\
    \ {\n            val paren_string = paren_stack.pop()\n            val paren_level\
    \ = paren_levels.pop()\n            val paren_level_size = paren_levels.size\n\
    \            val max_level = max_levels_size.pop()\n            val max_level_size\
    \ = max_levels.size\n            if(paren_level_size < max_level_size) {\n   \
    \             max_levels_size.push(max_level_size)\n                max_levels.push(max_level)\n\
    \            }\n            val paren_level_string = paren_stack.mkString(\"\"\
    )\n            if(paren_level_string != paren_string) {\n                paren_stack.push(paren_string)\n\
    \                paren_levels.push(paren_level)\n            }\n        }\n  \
    \      max_levels_size.push(max_levels_size.size)\n        max_levels.push(max_levels_size.size)\n\
    \        max_levels_size.reverse.foreach(x => max_levels.push(x))\n        max_levels.reverse.foreach(x\
    \ => max_levels_size.push(x))\n        max_levels_size.reverse.foreach(x => max_levels_size.push(x))\n\
    \        max_levels_size.reverse.foreach(x => max_levels_size.push(x))\n     \
    \   max_levels_size.reverse.foreach(x => max_levels_size.push(x))\n        max_levels_size.reverse.foreach(x\
    \ => max_levels_size.push(x))\n        max_levels_size.reverse.foreach(x => max_levels_size.push(x))\n\
    \        max_levels_size.reverse.foreach(x => max_levels_size.push(x))\n     \
    \   max_levels_size.reverse.foreach(x => max_levels_size.push(x))\n        max_levels_size.reverse.foreach(x\
    \ => max_levels_size.push(x))\n        max_levels_size.reverse.foreach(x => max_levels_size.push(x))\n\
    \        max_levels_size.reverse.foreach(x => max_levels_size.push(x))\n     \
    \   max_levels_size.reverse.foreach(x => max_levels_size.push(x))\n        max_levels_size.reverse.foreach(x\
    \ => max_levels_size.push(x))\n        max_levels_size.reverse.foreach(x => max_levels_size.push(x))\n\
    \        max_levels_size.reverse.foreach(x => max_levels_size.push(x))\n     \
    \   max_levels_size.reverse.foreach(x => max_levels_size.push(x))\n        max_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzbzx6vic.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpzbzx6vic.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpzbzx6vic.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmax_levels\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpzbzx6vic.scala:15:30 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmax_levels_size\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzbzx6vic.scala:51:8 -------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        max_\n\e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\
    \e[31m   |\e[0m        Not found: max_\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659798301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_len = mutable.Stack[Long]()\n        val paren_stack_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len = mutable.Stack[Long]()\n\
    \        val paren_stack_len_len_len_len = mutable.Stack[Long]()\n        val\
    \ paren_stack_len_len_len_len_len = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprsuksar4.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprsuksar4.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmprsuksar4.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprsuksar4.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not fou"
  stdout: ''
  timestamp: 1659798306
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_queue = mutable.Queue[String]()\n        paren_queue.enqueue(paren_string)\n\
    \        paren_stack.push(paren_string)\n        val max_level = 0\n        while\
    \ (paren_queue.nonEmpty) {\n            val paren_string = paren_queue.dequeue()\n\
    \            val level = 0\n            val paren_length = paren_string.length\n\
    \            while (paren_stack.nonEmpty && paren_stack.peek().length < paren_length)\
    \ {\n                paren_stack.peek() match {\n                    case \")\"\
    \ =>\n                        paren_stack.pop\n                        level -=\
    \ 1\n                    case \")()\" =>\n                        paren_stack.pop\n\
    \                        level -= 1\n                    case \")()()\" =>\n \
    \                       paren_stack.pop\n                        level -= 1\n\
    \                    case \")()()()\" =>\n                        paren_stack.pop\n\
    \                        level -= 1\n                    case \")()()()()\" =>\n\
    \                        paren_stack.pop\n                        level -= 1\n\
    \                    case \")()()()()()\" =>\n                        paren_stack.pop\n\
    \                        level -= 1\n                    case \")()()()()()()\"\
    \ =>\n                        paren_stack.pop\n                        level -=\
    \ 1\n                    case \")()()()()()()()\" =>\n                       \
    \ paren_stack.pop\n                        level -= 1\n                    case\
    \ \")()()()()()()()()\" =>\n                        paren_stack.pop\n        \
    \                level -= 1\n                    case \")()()()()()()()()\" =>\n\
    \                        paren_stack.pop\n                        level -= 1\n\
    \                    case \")()()()()()()()()\" =>\n                        paren_stack.pop\n\
    \                        level -= 1\n                    case \")()()()()()()()()()\"\
    \ =>\n                        paren_stack.pop\n                        level -=\
    \ 1\n                    case \")()()()()()()()()()()\" =>\n                 \
    \       paren_stack.pop\n                        level -= 1\n                \
    \    case \")()()()()()()()()()()()\" =>\n                        paren_stack.pop\n\
    \                        level -= 1\n                    case \")()()()()()()()()()()()\"\
    \ =>\n                        paren_stack.pop\n                        level -=\
    \ 1\n                    case \")()()()()()()()()()()()\" =>\n               \
    \         paren_stack.pop\n                        level -= 1\n              \
    \      case \")()()()()()()()()()()()\" =>\n                        paren_stack.pop\n\
    \                        level -= 1\n                    case \")()()()()()()()()()()()()\"\
    \ =>\n                        paren_stack.pop\n                        level -=\
    \ 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph9m7opuq.scala:84:0 ----------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph9m7opuq.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmph9m7opuq.scala:11:26 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_queue\e[0m = mutable.Queue[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmph9m7opuq.scala:23:30 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                        level -= \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \      value -= is not a member of Int - did you mean level.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmph9m7opuq.scala:26:30 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                        level -= \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \      value -= is not a member of Int - did you mean level.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmph9m7opuq.scala:29:30 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                        level -= \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \      value -= is not a member of Int - did you mean level.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmph9m7opuq.scala:32:30 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                        level -= \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                       "
  stdout: ''
  timestamp: 1659798310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val paren_array_max\
    \ = paren_array_size - 1\n        val paren_array_max_index = paren_array_max\
    \ - 1\n        val paren_array_max_value = paren_array(paren_array_max_index)\n\
    \        val paren_array_max_value_length = paren_array_max_value.length\n   \
    \     val paren_array_max_value_chars = paren_array_max_value_length / 2\n   \
    \     val paren_array_max_value_chars_index = paren_array_max_value_chars - 1\n\
    \        val paren_array_max_value_chars_value = paren_array_max_value(paren_array_max_value_chars_index)\n\
    \        val paren_array_max_value_chars_value_length = paren_array_max_value_chars_value.length\n\
    \        val paren_array_max_value_chars_value_chars = paren_array_max_value_chars_value_length\
    \ / 2\n        val paren_array_max_value_chars_value_chars_index = paren_array_max_value_chars_value_chars\
    \ - 1\n        val paren_array_max_value_chars_value_chars_value = paren_array_max_value_chars_value(paren_array_max_value_chars_value_chars_index)\n\
    \        val paren_array_max_value_chars_value_chars_value_length = paren_array_max_value_chars_value_chars_value.length\n\
    \        val paren_array_max_value_chars_value_chars_value_chars = paren_array_max_value_chars_value_chars_value_length\
    \ / 2\n        val paren_array_max_value_chars_value_chars_value_chars_index =\
    \ paren_array_max_value_chars_value_chars_value_chars - 1\n        val paren_array_max_value_chars_value_chars_value_chars_value\
    \ = paren_array_max_value_chars_value_chars_value(paren_array_max_value_chars_value_chars_value_chars_index)\n\
    \        val paren_array_max_value_chars_value_chars_value_chars_value_length\
    \ = paren_array_max_value_chars_value_chars_value_chars_value.length\n       \
    \ val paren_array_max_value_chars_value_chars_value_chars_value_chars = paren_array_max_value_chars_value_chars_value_chars_value_length\
    \ / 2\n        val paren_array_max_value_chars_value_chars_value_chars_value_chars_index\
    \ = paren_array_max_value_chars_value_chars_value_chars_value_chars - 1\n    \
    \    val paren_array_max_value_chars_value_chars_value_chars_value_chars_value\
    \ = paren_array_max_value_chars_value_chars_value_chars_value(paren_\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr3hb2dxq.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr3hb2dxq.scala:19:89\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_array_max_value_chars_value_length\e[0m = paren_array_max_value_chars_value.length\n\
    \e[31m\e[31m   |\e[0m                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value length is not a\
    \ member of Char\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpr3hb2dxq.scala:22:60\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e\
    [0m \e[36mparen_array_max_value_chars_value_chars_value\e[0m = paren_array_max_value_chars_value(paren_array_max_value_chars_value_chars_index)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \e[33mvalue\e\
    [0m \e[35mparen_array_max_value_chars_value\e[0m does not take parameters\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr3hb2dxq.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_groups = paren_string.split(\"\
    \ \").map(_.toLong)\n        val max_depth = paren_groups.foldLeft(0L) { (max_depth,\
    \ group) => if (group > max_depth) group else max_depth }\n        val max_depth\
    \ = max_depth + 1\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_depth\
    \ = max_depth.toLong\n        val max_depth = max_depth.toLong\n        val max_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8uvlqsvj.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8uvlqsvj.scala:12:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_depth\e[0m = max_depth + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmax_depth is already defined\
    \ as \e[33mvalue\e[0m \e[35mmax_depth\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8uvlqsvj.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mmax_depth\e[0m = max_depth.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmax_depth is already defined as \e[33mvalue\e[0m \e[35mmax_depth\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8uvlqsvj.scala:14:12 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax_depth\e[0m = max_depth.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmax_depth\
    \ is already defined as \e[33mvalue\e[0m \e[35mmax_depth\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8uvlqsvj.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_depth\e[0m = max_depth.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_depth is already defined as \e[33mvalue\e[0m \e[35mmax_depth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8uvlqsvj.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e["
  stdout: ''
  timestamp: 1659798307
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val paren_array_max_size\
    \ = paren_array_size - 1\n        val paren_array_max_index = paren_array_max_size\
    \ - 1\n        val paren_array_max_value = paren_array(paren_array_max_index)\n\
    \        val paren_array_max_value_length = paren_array_max_value.length\n   \
    \     val paren_array_max_value_length = paren_array_max_value_length - 1\n  \
    \      val paren_array_max_value_length = paren_array_max_value_length - 1\n \
    \       val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length - 1\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqlow0jkk.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_value_length\e\
    [0m = paren_array_max_value_length - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mparen_array_max_value_length is already defined as \e[33mvalue\e\
    [0m \e[35mparen_array_max_value_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqlow0jkk.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_value_length\e\
    [0m = paren_array_max_value_length - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mparen_array_max_value_length is already defined as \e[33mvalue\e\
    [0m \e[35mparen_array_max_value_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqlow0jkk.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_value_length\e\
    [0m = paren_array_max_value_length - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mparen_array_max_value_length is already defined as \e[33mvalue\e\
    [0m \e[35mparen_array_max_value_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqlow0jkk.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_value_length\e\
    [0m = paren_array_max_value_length - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mparen_array_max_value_length is already defined as \e[33mvalue\e\
    [0m \e[35mparen_a"
  stdout: ''
  timestamp: 1659798307
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_chars = paren_string.toCharArray\n\
    \        val paren_chars_length = paren_chars.length\n        val paren_chars_count\
    \ = paren_chars_length / 2\n        val paren_chars_array = Array.ofDim[Char](paren_chars_count)\n\
    \        val paren_chars_array_length = paren_chars_array.length\n        val\
    \ paren_chars_array_count = paren_chars_array_length / 2\n        val paren_chars_array_array\
    \ = Array.ofDim[Char](paren_chars_array_count)\n        val paren_chars_array_array_length\
    \ = paren_chars_array_array.length\n        val paren_chars_array_array_count\
    \ = paren_chars_array_array_length / 2\n        val paren_chars_array_array_array\
    \ = Array.ofDim[Char](paren_chars_array_array_count)\n        val paren_chars_array_array_array_length\
    \ = paren_chars_array_array_array.length\n        val paren_chars_array_array_array_count\
    \ = paren_chars_array_array_array_length / 2\n        val paren_chars_array_array_array_array\
    \ = Array.ofDim[Char](paren_chars_array_array_array_count)\n        val paren_chars_array_array_array_array_length\
    \ = paren_chars_array_array_array_array.length\n        val paren_chars_array_array_array_array_count\
    \ = paren_chars_array_array_array_array_length / 2\n        val paren_chars_array_array_array_array_array\
    \ = Array.ofDim[Char](paren_chars_array_array_array_array_array_count)\n     \
    \   val paren_chars_array_array_array_array_array_length = paren_chars_array_array_array_array_array_array.length\n\
    \        val paren_chars_array_array_array_array_array_array_count = paren_chars_array_array_array_array_array_array_length\
    \ / 2\n        val paren_chars_array_array_array_array_array_array_array = Array.ofDim[Char](paren_chars_array_array_array_array_array_array_array_array_count)\n\
    \        val paren_chars_array_array_array_array_array_array_array_array_length\
    \ = paren_chars_array_array_array_array_array_array_array_array_array_length /\
    \ 2\n        val paren_chars_array_array_array_array_array_array_array_array_array_array_count\
    \ = paren_chars_array_array_array_array_array_array_array_array_array_array_array_length\
    \ / 2\n        val paren_chars_array_array_array_array_array_array_array_array_array_array_array_array_array_length\
    \ = paren_chars_array_array_array_array_array_array_array_array_array_array_array_array_array_array_length\
    \ / 2\n        val paren_chars_array_array_array_array_array_\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz6f3vsez.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz6f3vsez.scala:25:74\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_chars_array_array_array_array_array\e[0m = Array.ofDim[\e[35mChar\e\
    [0m](paren_chars_array_array_array_array_array_count)\n\e[31m\e[31m   |\e[0m \
    \                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              Not found: paren_chars_array_array_array_array_array_count\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz6f3vsez.scala:26:63\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_chars_array_array_array_array_array_length\e[0m = paren_chars_array_array_array_array_array_array.length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \              Not found: paren_chars_array_array_array_array_array_array\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz6f3vsez.scala:27:68\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_chars_array_array_array_array_array_array_count\e[0m = paren_chars_array_array_array_array_array_array_length\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m       Not found: paren_chars_array_array_array_array_array_array_length\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz6f3vsez.scala:28:86\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36"
  stdout: ''
  timestamp: 1659798308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_map = mutable.Map[Long, Long]()\n        val paren_stack_map_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_keys = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values = mutable.Map[Long, Long]()\n     \
    \   val paren_stack_map_values_values_keys = mutable.Map[Long, Long]()\n     \
    \   val paren_stack_map_values_values_values = mutable.Map[Long, Long]()\n   \
    \     val paren_stack_map_values_values_values_keys = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_values_values = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_values_values_keys = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp374syvx9.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp374syvx9.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_map_values_values_values_values_values_values_values_values_values_values_keys\e\
    [0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp374syvx9.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_values_values_values_values_values_values_values_values_values_values\e\
    [0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_values_values_values_values_values_values_values_values_values_values\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_map_values_values_values_values_values_values_values_values_values_values\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp374syvx9.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_values_values_values_values_values_values_values_values_values_values_keys\e\
    [0m = "
  stdout: ''
  timestamp: 1659798309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_chars = paren_string.chars\n \
    \       val paren_chars_size = paren_chars.size\n        val paren_chars_array\
    \ = paren_chars.toArray\n        val paren_chars_array_size = paren_chars_array.size\n\
    \        val paren_chars_array_length = paren_chars_array_size - 1\n        val\
    \ paren_chars_array_last_index = paren_chars_array_length - 1\n        val paren_chars_array_last_char\
    \ = paren_chars_array(paren_chars_array_last_index)\n        val paren_chars_array_last_char_index\
    \ = paren_chars_array_last_char.index\n        val paren_chars_array_last_char_char_code\
    \ = paren_chars_array_last_char.code\n        val paren_chars_array_last_char_char_code_length\
    \ = paren_chars_array_last_char_char_code.length\n        val paren_chars_array_last_char_char_code_length\
    \ = paren_chars_array_last_char_char_code_length - 1\n        val paren_chars_array_last_char_char_code_char_code\
    \ = paren_chars_array_last_char_char_code.code\n        val paren_chars_array_last_char_char_code_char_code_length\
    \ = paren_chars_array_last_char_char_code_char_code.length\n        val paren_chars_array_last_char_char_code_char_code_length\
    \ = paren_chars_array_last_char_char_code_char_code_length - 1\n        val paren_chars_array_last_char_char_code_char_code_char_code_length\
    \ = paren_chars_array_last_char_char_code_char_code_char_code.length\n       \
    \ val paren_chars_array_last_char_char_code_char_code_char_code_length = paren_chars_array_last_char_char_code_char_code_char_code_length\
    \ - 1\n        val paren_chars_array_last_char_char_code_char_code_char_code_length\
    \ = paren_chars_array_last_char_char_code_char_code_char_code_length - 1\n   \
    \     val paren_chars_array_last_char_char_code_char_code_char_code_length = paren_chars_array_last_char_char_code_char_code_char_code_length\
    \ - 1\n        val paren_chars_array_last_char_char_code_char_code_char_code_length\
    \ = paren_chars_array_last_char_char_code_char_code_char_code_length - 1\n   \
    \     val paren_chars_array_last_char_char_code_char_code_char_code_length = paren_chars_array_last_char_char_code_char_code_char_code_length\
    \ - 1\n        val paren_chars_array_last_char_char_code_char_code_char_code_length\
    \ = paren_chars_array_last_char_char_code_char_code_char_code_length - 1\n   \
    \     val paren_chars_array_last_char_char_code_char_code_char_\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzqugy0ki.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzqugy0ki.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_chars_array_last_char_char_code_length\e[0m = paren_chars_array_last_char_char_code_length\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_chars_array_last_char_char_code_length is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_chars_array_last_char_char_code_length\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpzqugy0ki.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_chars_array_last_char_char_code_char_code_length\e\
    [0m = paren_chars_array_last_char_char_code_char_code_length - \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_chars_array_last_char_char_code_char_code_length is\
    \ already defined as \e[33mvalue\e[0m \e[35mparen_chars_array_last_char_char_code_char_code_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzqugy0ki.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_array_last_char_char_code_char_code_char_code_length\e\
    [0m = paren_chars_array_last_char_char_code_char_code_char_code_length - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_chars_array_last_char_char_code_c"
  stdout: ''
  timestamp: 1659798311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max = mutable.Stack[Long]()\n        val paren_stack_level_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index_size = mutable.Stack[Long]()\n      \
    \  val paren_stack_level_max_index_count = mutable.Stack[Long]()\n        val\
    \ paren_stack_level_max_index_count_size = mutable.Stack[Long]()\n        val\
    \ paren_stack_level_max_index_count_index = mutable.Stack[Long]()\n        val\
    \ paren_stack_level_max_index_count_index_size = mutable.Stack[Long]()\n     \
    \   val paren_stack_level_max_index_count_index_count = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index_count_index_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index_count_index_count_index = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index_count_index_count_index_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index_count_index_count_index_count = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index_count_index_count_index_count_size =\
    \ mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index_count_index\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index_count_index_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index_count_index_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index_count_index_count_size\
    \ = mutable.Stack[Long]()\n        val paren_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpegwlu88s.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpegwlu88s.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpegwlu88s.scala:11:31 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m = mutable.Stack[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpegwlu88s.scala:12:32 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level\e[0m =\
    \ mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                                Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpegwlu88s.scala:13:37\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_level_size\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpegwlu88s.scala:14:36 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level_max\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \  "
  stdout: ''
  timestamp: 1659798310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val max_level\
    \ = 0\n        var level = 0\n        var paren_count = 0\n        val paren_levels\
    \ = mutable.ArrayBuffer.empty[Long]\n        paren_array.foreach(x => {\n    \
    \        val paren_level = x.count('(') - x.count(')')\n            if (paren_level\
    \ > max_level) {\n                max_level = paren_level\n            }\n   \
    \         if (paren_level == max_level) {\n                paren_count += 1\n\
    \                paren_levels += paren_count\n            }\n        })\n    \
    \    paren_levels\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu50ovkz3.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu50ovkz3.scala:17:38 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mparen_level\e[0m = x.count(\e\
    [31m'('\e[0m) - x.count(\e[31m')'\e[0m)\n\e[31m\e[31m   |\e[0m               \
    \                       ^^^\e[0m\n\e[31m   |\e[0m                            \
    \          Found:    (\e[31m'('\e[0m : Char)\n\e[31m   |\e[0m                \
    \                      Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpu50ovkz3.scala:17:53 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mparen_level\e[0m = x.count(\e\
    [31m'('\e[0m) - x.count(\e[31m')'\e[0m)\n\e[31m\e[31m   |\e[0m               \
    \                                      ^^^\e[0m\n\e[31m   |\e[0m             \
    \                                  Found:    (\e[31m')'\e[0m : Char)\n\e[31m \
    \  |\e[0m                                               Required: Char => Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpu50ovkz3.scala:19:26 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                max_level = paren_level\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          Reassignment to val max_level\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_chars = paren_string.chars\n \
    \       val paren_chars_iter = paren_chars.iterator\n        val paren_chars_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next = paren_chars_iter.next()\n\
    \        val paren_chars_next_next_next = paren_chars_iter.next()\n        val\
    \ paren_chars_next_next_next_next = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnhzh_kyc.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnhzh_kyc.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_chars_next_next_next_next_next_next_next_next_next_next_next_next_next\e\
    [0m = paren_chars_iter.next()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_chars_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpnhzh_kyc.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_next_next_next_next_next_next_next_next_next_next_next_next_next\e\
    [0m = paren_chars_iter.next()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_chars_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpnhzh_kyc.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\e\
    [0m = paren_chars_iter.next()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659798312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_queue = mutable.Queue[String]()\n        paren_queue.enqueue(paren_string)\n\
    \        paren_stack.push(paren_string)\n        val max_level = 0\n        while(!paren_queue.isEmpty)\
    \ {\n            val paren_string = paren_queue.dequeue()\n            val paren_level\
    \ = paren_stack.size\n            val paren_level_str = paren_stack.mkString(\"\
    \")\n            val paren_level_str = paren_level_str.substring(0, paren_level_str.lastIndexOf(\"\
    (\"))\n            val paren_level_long = paren_level_str.toLong\n           \
    \ val paren_level_long = paren_level_long + 1\n            val paren_level_long\
    \ = paren_level_long.toLong\n            val paren_level_long = paren_level_long.toLong\n\
    \            val paren_level_long = paren_level_long.toLong\n            val paren_level_long\
    \ = paren_level_long.toLong\n            val paren_level_long = paren_level_long.toLong\n\
    \            val paren_level_long = paren_level_long.toLong\n            val paren_level_long\
    \ = paren_level_long.toLong\n            val paren_level_long = paren_level_long.toLong\n\
    \            val paren_level_long = paren_level_long.toLong\n            val paren_level_long\
    \ = paren_level_long.toLong\n            val paren_level_long = paren_level_long.toLong\n\
    \            val paren_level_long = paren_level_long.toLong\n            val paren_level_long\
    \ = paren_level_long.toLong\n            val paren_level_long = paren_level_long.toLong\n\
    \            val paren_level_long = paren_level_long.toLong\n            val paren_level_long\
    \ = paren_level_long.toLong\n            val paren_level_long = paren_level_long.toLong\n\
    \            val paren_level_long = paren_level_long.toLong\n            val paren_level_long\
    \ = paren_level_long.toLong\n            val paren_level_long = paren_level_long.toLong\n\
    \            val paren_level_long = paren_level_long.toLong\n            val paren_level_long\
    \ = paren_level_long.toLong\n            val paren_level_long = paren_level_long.toLong\n\
    \            val paren_level_long = paren_level_long.toLong\n            val paren_level_long\
    \ = paren_level_long.toLong\n            val paren_level_long = paren_level_long.toLong\n\
    \            val \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp0jgb4ytc.scala:48:15 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m            \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m  \
    \             ^\e[0m\n\e[31m   |\e[0m               pattern expected\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0jgb4ytc.scala:57:0 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0jgb4ytc.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp0jgb4ytc.scala:11:26 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_queue\e[0m = mutable.Queue[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0jgb4ytc.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mparen_level_str\e[0m\
    \ = paren_level_str.substring(\e[31m0\e[0m, paren_level_str.lastIndexOf(\e[31m\"\
    (\"\e[0m))\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_level_str is already defined as \e[33mvalue\e[0m \e\
    [35mparen_level_str\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0jgb4ytc.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mparen_level_long\e[0m\
    \ = paren_level_long + \e[31m1\e[0m\n\e[31m\e[31m"
  stdout: ''
  timestamp: 1659798313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_queue = mutable.Queue[Long]()\n        paren_queue.enqueue(0)\n\
    \        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.enqueue(0)\n        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.enqueue(0)\n        paren_queue.en\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppurjshah.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppurjshah.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_queue\e[0m = mutable.Queue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count = mutable.Stack[Long]()\n        val paren_stack_top_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n       \
    \ val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n       \
    \ val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n       \
    \ val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n       \
    \ val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n       \
    \ val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n       \
    \ val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnz38kxzl.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_count_indexSize\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_count_indexSize is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_top_count_indexSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnz38kxzl.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_top_count_indexSize\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_count_indexSize is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_top_count_indexSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnz38kxzl.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_top_count_indexSize\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_count_indexSize is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_top_count_indexSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnz38kxzl.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_top_count_indexSize\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_count_indexSize is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_top_count_indexSize\e[0m\n\e[31m   |\e[0m\n"
  stdout: ''
  timestamp: 1659798315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_groups = paren_string.split(\"\
    \ \").map(_.toLong)\n        val max_levels = paren_groups.foldLeft(0) { (max_level,\
    \ group) =>\n            val current_level = max_level\n            val current_group\
    \ = group\n            val current_group_length = current_group.length\n     \
    \       val current_group_length = current_group_length + 1\n            val current_group_length\
    \ = current_group_length + 1\n            if (current_group_length > max_level)\
    \ {\n                max_level = current_group_length\n            }\n       \
    \     current_level\n        }\n        val max_levels = max_levels + 1\n    \
    \    val max_levels = max_levels + 1\n        val max_levels = max_levels + 1\n\
    \        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        val max_levels = max_levels + 1\n        val max_levels = max_levels\
    \ + 1\n        \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppsbhgzo7.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax_levels\e[0m = max_levels\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_levels is already defined as \e[33mvalue\e[0m \e[35mmax_levels\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppsbhgzo7.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mmax_levels\e[0m = max_levels + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmax_levels is already defined as \e[33mvalue\e[0m \e[35mmax_levels\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppsbhgzo7.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmax_levels\e[0m = max_levels + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmax_levels is already defined as \e[33mvalue\e[0m \e[35mmax_levels\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppsbhgzo7.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmax_levels\e[0m = max_levels + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmax_levels is already defined as \e[33mvalue\e[0m \e[35mmax_levels\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppsbhgzo7.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmax_levels\e[0m = max_levels + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmax_levels is already defined as \e"
  stdout: ''
  timestamp: 1659798317
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_map = mutable.Map[String, mutable.Stack[String]]()\n\
    \        val paren_stack_map_keys = mutable.Map[String, Long]()\n        val paren_stack_map_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_keys = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_keys = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_keys = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_keys = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_keys_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys_keys_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys_keys_values_values_values_values_keys_keys_keys_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys_keys_values_values_values_keys_keys_values_values_values_values_values_keys_keys_keys_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphm2usa4k.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphm2usa4k.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmphm2usa4k.scala:11:50 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.Map[\e[35mString\e\
    [0m, mutable.Stack[\e[35mString\e[0m]]()\n\e[31m\e[31m   |\e[0m              \
    \                                    ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmphm2usa4k.scala:11:30 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.Map[\e\
    [35mString\e[0m, mutable.Stack[\e[35mString\e[0m]]()\n\e[31m\e[31m   |\e[0m  \
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmphm2usa4k.scala:12:35 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_map_keys\e[0m = mutable.Map[\e[35mString\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                               \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphm2usa4k.scala:13:37\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e"
  stdout: ''
  timestamp: 1659798315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplp1miol2.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplp1miol2.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_max_depth_len\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_len is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_max_depth_len\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplp1miol2.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth_len\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_len is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_max_depth_len\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplp1miol2.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth_len\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_len is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_max_depth_len\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplp1miol2.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth_len\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_d"
  stdout: ''
  timestamp: 1659798279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val paren_array_max_size\
    \ = paren_array_size - 1\n        val paren_array_max_index = paren_array_max_size\
    \ - 1\n        val paren_array_max_value = paren_array(paren_array_max_index)\n\
    \        val paren_array_max_value_length = paren_array_max_value.length\n   \
    \     val paren_array_max_value_length = paren_array_max_value_length - 1\n  \
    \      val paren_array_max_value_char = paren_array_max_value.charAt(paren_array_max_value_length)\n\
    \        val paren_array_max_value_char_length = paren_array_max_value_char.length\n\
    \        val paren_array_max_value_char_length = paren_array_max_value_char_length\
    \ - 1\n        val paren_array_max_value_char_char = paren_array_max_value.charAt(paren_array_max_value_char_length)\n\
    \        val paren_array_max_value_char_char_length = paren_array_max_value_char_char.length\n\
    \        val paren_array_max_value_char_char_length = paren_array_max_value_char_char_length\
    \ - 1\n        val paren_array_max_value_char_char_char = paren_array_max_value.charAt(paren_array_max_value_char_char_length)\n\
    \        val paren_array_max_value_char_char_char_length = paren_array_max_value_char_char_char.length\n\
    \        val paren_array_max_value_char_char_char_length = paren_array_max_value_char_char_char_length\
    \ - 1\n        val paren_array_max_value_char_char_char_char = paren_array_max_value.charAt(paren_array_max_value_char_char_char_length)\n\
    \        val paren_array_max_value_char_char_char_char_length = paren_array_max_value_char_char_char_char.length\n\
    \        val paren_array_max_value_char_char_char_char_length = paren_array_max_value_char_char_char_char_length\
    \ - 1\n        val paren_array_max_value_char_char_char_char_char = paren_array_max_value.charAt(paren_array_max_value_char_char_char_char_length)\n\
    \        val paren_array_max_value_char_char_char_char_char_length = paren_array_max_value_char_char_char_char_char.length\n\
    \        val paren_array_max_value_char_char_char_char_char_char_length = paren_array_max_value_char_char_char_char_char_char_length\
    \ - 1\n        val paren_array_max_value_char_char_char_char_char_char_char_length\
    \ = paren_array_max_value_char_char_char_char_char_char_char_length - 1\n    \
    \    val paren_array_max_value_char_char_char_char_char_char_char_char_length\
    \ = paren_array_max_value_char_char_char_char_char_char_char_char_length - 1\n\
    \        val paren_array_max_value_char_char_char_char_char_char_\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpst4unvoj.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpst4unvoj.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_array_max_value_length\e[0m = paren_array_max_value_length - \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_value_length is already defined as \e[33mvalue\e\
    [0m \e[35mparen_array_max_value_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpst4unvoj.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_value_char_length\e\
    [0m = paren_array_max_value_char_length - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_value_char_length is already defined as \e\
    [33mvalue\e[0m \e[35mparen_array_max_value_char_length\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpst4unvoj.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_array_max_value_char_char_length\e[0m = paren_array_max_value_char_char_length\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_value_char_char_length is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_array_max_value_char_char_length\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpst4unvoj.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[3"
  stdout: ''
  timestamp: 1659798318
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_levels = mutable.Stack[Long]()\n        paren_stack.push(paren_string)\n\
    \        paren_levels.push(0)\n        while(paren_stack.nonEmpty) {\n       \
    \     val paren_string = paren_stack.pop()\n            val paren_level = paren_levels.pop()\n\
    \            val paren_level_string = paren_stack.last\n            val paren_level_length\
    \ = paren_level_string.length\n            val paren_level_chars = paren_level_string.toCharArray\n\
    \            val paren_level_chars_length = paren_level_chars.length\n       \
    \     val paren_level_chars_index = paren_level_chars_length - 1\n           \
    \ val paren_level_chars_index_start = paren_level_chars_index - 1\n          \
    \  val paren_level_chars_index_end = paren_level_chars_index_start + paren_level_chars_length\n\
    \            val paren_level_chars_index_next_start = paren_level_chars_index_end\
    \ + 1\n            val paren_level_chars_index_next_end = paren_level_chars_index_next_start\
    \ + paren_level_chars_length\n            val paren_level_chars_index_next_next_start\
    \ = paren_level_chars_index_next_end + 1\n            val paren_level_chars_index_next_next_end\
    \ = paren_level_chars_index_next_next_start + paren_level_chars_length\n     \
    \       val paren_level_chars_index_next_next_next_start = paren_level_chars_index_next_next_end\
    \ + 1\n            val paren_level_chars_index_next_next_next_end = paren_level_chars_index_next_next_next_start\
    \ + paren_level_chars_length\n            val paren_level_chars_index_next_next_next_next_start\
    \ = paren_level_chars_index_next_next_next_end + 1\n            val paren_level_chars_index_next_next_next_next_end\
    \ = paren_level_chars_index_next_next_next_next_start + paren_level_chars_length\n\
    \            val paren_level_chars_index_next_next_next_next_next_start = paren_level_chars_index_next_next_next_next_end\
    \ + 1\n            val paren_level_chars_index_next_next_next_next_next_end =\
    \ paren_level_chars_index_next_next_next_next_next_start + paren_level_chars_length\n\
    \            val paren_level_chars_index_next_next_next_next_next_next_start =\
    \ paren_level_chars_index_next_next_next_next_next_end + 1\n            val paren_level_chars_index_next_next_next_next_next_next_end\
    \ = paren_level_chars_index_next_next_next_next_next_next_start + paren_level_chars_length\n\
    \            val paren_level_\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptbj8fzh7.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptbj8fzh7.scala:45:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m45 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmptbj8fzh7.scala:10:26 ------------------------\e[0m\e[0m\n\
    \e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmptbj8fzh7.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptbj8fzh7.scala:44:1 ---------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmptbj8fzh7.scala:38:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m38 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1659798317
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_chars = paren_string.toCharArray\n\
    \        val paren_chars_size = paren_chars.length\n        val paren_chars_map\
    \ = mutable.HashMap[Char, Int]()\n        var paren_char_index = 0\n        var\
    \ paren_char_index2 = 0\n        var paren_char_index3 = 0\n        var paren_char_index4\
    \ = 0\n        var paren_char_index5 = 0\n        var paren_char_index6 = 0\n\
    \        var paren_char_index7 = 0\n        var paren_char_index8 = 0\n      \
    \  var paren_char_index9 = 0\n        var paren_char_index10 = 0\n        var\
    \ paren_char_index11 = 0\n        var paren_char_index12 = 0\n        var paren_char_index13\
    \ = 0\n        var paren_char_index14 = 0\n        var paren_char_index15 = 0\n\
    \        var paren_char_index16 = 0\n        var paren_char_index17 = 0\n    \
    \    var paren_char_index18 = 0\n        var paren_char_index19 = 0\n        var\
    \ paren_char_index20 = 0\n        var paren_char_index21 = 0\n        var paren_char_index22\
    \ = 0\n        var paren_char_index23 = 0\n        var paren_char_index24 = 0\n\
    \        var paren_char_index25 = 0\n        var paren_char_index26 = 0\n    \
    \    var paren_char_index27 = 0\n        var paren_char_index28 = 0\n        var\
    \ paren_char_index29 = 0\n        var paren_char_index30 = 0\n        var paren_char_index31\
    \ = 0\n        var paren_char_index32 = 0\n        var paren_char_index33 = 0\n\
    \        var paren_char_index34 = 0\n        var paren_char_index35 = 0\n    \
    \    var paren_char_index36 = 0\n        var paren_char_index37 = 0\n        var\
    \ paren_char_index38 = 0\n        var paren_char_index39 = 0\n        var paren_char_index40\
    \ = 0\n        var paren_char_index41 = 0\n        var paren_char_index42 = 0\n\
    \        var paren_char_index43 = 0\n        var paren_char_index44 = 0\n    \
    \    var paren_char_index45 = 0\n        var paren_char_index46 = 0\n        var\
    \ paren_char_index47 = 0\n        var paren_char_index48 = 0\n        var paren_char_index49\
    \ = 0\n        var paren_char_index50 = 0\n        var paren_char_index51 = 0\n\
    \        var paren_char_index52 = 0\n        var paren_char_index53 = 0\n    \
    \    var paren_char_index54 = 0\n        var paren_char_index55 = 0\n        var\
    \ paren_char_index56 = 0\n        var paren_char_index57 = 0\n        var paren_char_index58\
    \ = 0\n        var paren_char_index59 = 0\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs0yaw8r.scala:12:30 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_map\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                              Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbs0yaw8r.scala:73:5\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798316
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_top = paren_stack.size\n        val paren_stack_bottom\
    \ = paren_stack.size\n        val paren_stack_max_level = paren_stack.size\n \
    \       val paren_stack_max_level_top = paren_stack.size\n        val paren_stack_max_level_bottom\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level = paren_stack.size\n\
    \        val paren_stack_max_level_max_level_top = paren_stack.size\n        val\
    \ paren_stack_max_level_max_level_bottom = paren_stack.size\n        val paren_stack_max_level_max_level_max_level\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_top\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_bottom\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_max_level\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_max_level_top\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_max_level_bottom\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_max_level_max_level\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_max_level_max_level_top\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_max_level_max_level_bottom\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_max_level_max_level_max_level\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_top\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_bottom\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_max_level\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_max_level_top\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_max_level_bottom\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_top\
    \ = paren_stack.size\n        val paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_bottom\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpsx9cv94v.scala:36:112 --------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_bottom\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                                                                ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsx9cv94v.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpsx9cv94v.scala:37:5 ---------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798318
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_map = mutable.Map[String, Long]()\n        val paren_stack_map_size\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_size_reverse = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_size_max = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_size_max_reverse = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_size_min = mutable.Map[String, Long]()\n        val\
    \ paren_stack_map_size_min_reverse = mutable.Map[String, Long]()\n        val\
    \ paren_stack_map_size_sum = mutable.Map[String, Long]()\n        val paren_stack_map_size_sum_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_size_avg = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_size_avg_reverse = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_size_max = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_size_max_reverse = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_size_min = mutable.Map[String, Long]()\n        val\
    \ paren_stack_map_size_min_reverse = mutable.Map[String, Long]()\n        val\
    \ paren_stack_map_size_sum = mutable.Map[String, Long]()\n        val paren_stack_map_size_sum_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_size_avg = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_size_avg_reverse = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_size_max = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_size_max_reverse = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_size_min = mutable.Map[String, Long]()\n        val\
    \ paren_stack_map_size_min_reverse = mutable.Map[String, Long]()\n        val\
    \ paren_stack_map_size_sum = mutable.Map[String, Long]()\n        val paren_stack_map_size_sum_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_size_avg = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_size_avg_reverse = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_size_max = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_size_max_reverse = mutable.Map[String, Long]()\n\
    \        val paren\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv8ibu4o8.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv8ibu4o8.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_map_size_max\e[0m = mutable.Map[\e[35mString\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_size_max is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_map_size_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv8ibu4o8.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_size_max_reverse\e\
    [0m = mutable.Map[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_size_max_reverse is already defined as \e\
    [33mvalue\e[0m \e[35mparen_stack_map_size_max_reverse\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv8ibu4o8.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_map_size_min\e[0m = mutable.Map[\e[35mString\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_size_min is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_map_size_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv8ibu4o8.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_size_min_reverse\e\
    [0m = mutable.Map[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31"
  stdout: ''
  timestamp: 1659798317
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_groups = paren_string.split(\"\
    \ \")\n        val paren_groups_with_paren = paren_groups.map(x => if (x == '(')\
    \ 1 else 0)\n        val paren_groups_with_paren_sum = paren_groups_with_paren.reduce((x,\
    \ y) => x + y)\n        val paren_groups_with_paren_max_level = paren_groups_with_paren_sum\
    \ / paren_groups_with_paren.size\n        val paren_groups_with_paren_max_level_int\
    \ = paren_groups_with_paren_max_level.asInstanceOf[Int]\n        val paren_groups_with_paren_max_level_long\
    \ = paren_groups_with_paren_max_level_int.asInstanceOf[Long]\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_paren_max_level_long.toList\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_paren_max_level_long_list.dropRight(1)\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_paren_max_level_long_list.dropRight(1)\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_paren_max_level_long_list.dropRight(1)\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_paren_max_level_long_list.dropRight(1)\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_paren_max_level_long_list.dropRight(1)\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_paren_max_level_long_list.dropRight(1)\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_paren_max_level_long_list.dropRight(1)\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_paren_max_level_long_list.dropRight(1)\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_paren_max_level_long_list.dropRight(1)\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_paren_max_level_long_list.dropRight(1)\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_paren_max_level_long_list.dropRight(1)\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_paren_max_level_long_list.dropRight(1)\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_paren_max_level_long_list.dropRight(1)\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnkd58td6.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_paren_max_level_long_list\e\
    [0m = paren_groups_with_paren_max_level_long_list.dropRight(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_paren_max_level_long_list is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_groups_with_paren_max_level_long_list\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpnkd58td6.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_paren_max_level_long_list\e\
    [0m = paren_groups_with_paren_max_level_long_list.dropRight(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_paren_max_level_long_list is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_groups_with_paren_max_level_long_list\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpnkd58td6.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_paren_max_level_long_list\e\
    [0m = paren_groups_with_paren_max_level_long_list.dropRight(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_paren_max_level_long_list is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_groups_with_paren_max_level_long_list\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpnkd58td6.scala:20:12 -----------------"
  stdout: ''
  timestamp: 1659798320
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count = mutable.Stack[Long]()\n        val paren_stack_top_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_count_size = mutable.Stack[Long]()\n      \
    \  val paren_stack_top_count_count_count = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_count_count_size = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_count_count_count = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_count_count_count_size = mutable.Stack[Long]()\n     \
    \   val paren_stack_top_count_count_count_count_count = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_count_count_count_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_count_count_count_count_count = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_count_count_count_count_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_count_count_count_count_count_count = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_count_count_count_count_count_count_size =\
    \ mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4_f8_k5v.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_count_count_count_count_count_count_count_count_count_count\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_count_count_count_count_count_count_count_count_count_count\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_top_count_count_count_count_count_count_count_count_count_count\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp4_f8_k5v.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_count_count_count_count_count_count_count_count_count_count_size\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_count_count_count_count_count_count_count_count_count_count_size\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_top_count_count_count_count_count_count_count_count_count_count_size\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp4_f8_k5v.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp4_f8_k5v.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack"
  stdout: ''
  timestamp: 1659798318
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_chars = paren_string.chars\n \
    \       val paren_chars_iter = paren_chars.iterator\n        val paren_chars_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next = paren_chars_iter.next()\n\
    \        val paren_chars_next_next_next = paren_chars_iter.next()\n        val\
    \ paren_chars_next_next_next_next = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw4jr8szz.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_next_next_next_next_next_next_next_next_next_next_next_next_next\e\
    [0m = paren_chars_iter.next()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_chars_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpw4jr8szz.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\e\
    [0m = paren_chars_iter.next()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpw4jr8szz.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\e\
    [0m = paren_chars_iter.next()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_"
  stdout: ''
  timestamp: 1659798318
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_queue = mutable.Queue[Long]()\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.en\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu95kb1kn.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpu95kb1kn.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_queue\e[0m = mutable.Queue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_array = paren_string.split(\"\
    \ \").map(_.toLong).toArray\n        val paren_stack = mutable.Stack[Long]()\n\
    \        var max_level = 0\n        var level = 0\n        paren_array.foreach\
    \ { paren =>\n            paren_stack.push(paren)\n            level += 1\n  \
    \          if (paren_stack.size == level) {\n                paren_stack.pop()\n\
    \                level += 1\n            }\n            if (paren_stack.size ==\
    \ level) {\n                max_level = level\n            }\n        }\n    \
    \    max_level\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdnzag9fe.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdnzag9fe.scala:25:8 ---------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        max_level\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (max_level : Int)\n\e[31m   |\e[0m     \
    \   Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798320
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_array = paren_string.split(\"\
    \ \")\n        val max_level = 0\n        val max_level_array = new Array[Long](paren_array.length)\n\
    \        val paren_stack = new mutable.Stack[Long]()\n        for (i <- 0 until\
    \ paren_array.length) {\n            val paren_str = paren_array(i)\n        \
    \    val paren_str_array = paren_str.split(\"\\\\)\")\n            val paren_str_array_size\
    \ = paren_str_array.length\n            val paren_str_array_size = paren_str_array_size\
    \ - 1\n            val paren_str_array_size = paren_str_array_size - 1\n     \
    \       val paren_str_array_size = paren_str_array_size - 1\n            val paren_str_array_size\
    \ = paren_str_array_size - 1\n            val paren_str_array_size = paren_str_array_size\
    \ - 1\n            val paren_str_array_size = paren_str_array_size - 1\n     \
    \       val paren_str_array_size = paren_str_array_size - 1\n            val paren_str_array_size\
    \ = paren_str_array_size - 1\n            val paren_str_array_size = paren_str_array_size\
    \ - 1\n            val paren_str_array_size = paren_str_array_size - 1\n     \
    \       val paren_str_array_size = paren_str_array_size - 1\n            val paren_str_array_size\
    \ = paren_str_array_size - 1\n            val paren_str_array_size = paren_str_array_size\
    \ - 1\n            val paren_str_array_size = paren_str_array_size - 1\n     \
    \       val paren_str_array_size = paren_str_array_size - 1\n            val paren_str_array_size\
    \ = paren_str_array_size - 1\n            val paren_str_array_size = paren_str_array_size\
    \ - 1\n            val paren_str_array_size = paren_str_array_size - 1\n     \
    \       val paren_str_array_size = paren_str_array_size - 1\n            val paren_str_array_size\
    \ = paren_str_array_size - 1\n            val paren_str_array_size = paren_str_array_size\
    \ - 1\n            val paren_str_array_size = paren_str_array_size - 1\n     \
    \       val paren_str_array_size = paren_str_array_size - 1\n            val paren_str_array_size\
    \ = paren_str_array_size - 1\n            val paren_str_array_size = paren_str_array_size\
    \ - 1\n            val paren_str_array_size = paren_str_array_size - 1\n     \
    \       val paren_str_array_size = paren_str_array_size - 1\n            val paren_str_array_size\
    \ = paren_str_array_size - 1\n            val paren_str_array_size = paren_str_array_size\
    \ - 1\n            val paren_str_array_size = paren_str_array_size - 1\n\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl5821y58.scala:57:0 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl5821y58.scala:13:30\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = \e[33mnew\e[0m mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpl5821y58.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mparen_str_array_size\e\
    [0m = paren_str_array_size - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_str_array_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_str_array_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpl5821y58.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mparen_str_array_size\e\
    [0m = paren_str_array_size - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_str_array_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_str_array_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpl5821y58.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mparen_str_array_size\e\
    [0m = paren_str_array_size - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_str_array_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_str_array_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ method"
  stdout: ''
  timestamp: 1659798320
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_map = mutable.Map[String, List[Long]]()\n        paren_string.split(\"\
    \\\\s+\").foreach(x => {\n            if (x.isEmpty()) return\n            if\
    \ (paren_stack.nonEmpty) {\n                if (paren_stack.last.equals(x)) {\n\
    \                    paren_stack_map.get(paren_stack.last).map(x => x + 1).toList\
    \ match {\n                        case Nil => paren_stack_map.put(paren_stack.last,\
    \ List(0))\n                        case x => paren_stack_map.put(paren_stack.last,\
    \ x)\n                    }\n                    paren_stack.pop\n           \
    \     } else {\n                    paren_stack_map.put(paren_stack.last, List(0))\n\
    \                    paren_stack.push(x)\n                }\n            } else\
    \ {\n                paren_stack.push(x)\n            }\n        })\n        paren_stack_map.values.flatten.toList.max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr4eg_6qr.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr4eg_6qr.scala:11:30 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mList\e[0m[\e[35mLong\e[0m]]()\n\e[31m\e[31m   |\e[0m  \
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpr4eg_6qr.scala:13:29 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m            \e[33mif\e[0m (x.isEmpty()) \e[33mreturn\e[0m\n\e[31m\e[31m\
    \   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                   Found:    Unit\n\e[31m   |\e[0m                          \
    \   Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798320
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth = mutable.Stack[Long]()\n        val paren_stack_max_depth_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_max_depth = mutable.Stack[Long]()\n       \
    \ val paren_stack_max_depth_max_depth_max = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_max_depth_max_size = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_max_depth_max_depth = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_max_depth_max_depth_max = mutable.Stack[Long]()\n    \
    \    val paren_stack_max_depth_max_depth_max_depth_max_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_max_depth_max_depth_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_max_depth_max_depth_max_depth_max = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9kpjjzdw.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9kpjjzdw.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9kpjjzdw.scala:11:31 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m = mutable.Stack[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9kpjjzdw.scala:12:30 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9kpjjzdw.scala:13:35 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_size\e[0m\
    \ = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9kpjjzdw.scala:14:36 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_max_depth\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                "
  stdout: ''
  timestamp: 1659798321
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_map = mutable.Map[String, Long]()\n        val paren_stack_map_size\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_size_max = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_size_max_key = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_size_max_value = mutable.Map[String, Long]()\n  \
    \      val paren_stack_map_size_max_key = mutable.Map[String, Long]()\n      \
    \  val paren_stack_map_size_max_value = mutable.Map[String, Long]()\n        val\
    \ paren_stack_map_size_max_key = mutable.Map[String, Long]()\n        val paren_stack_map_size_max_value\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_size_max_key = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_size_max_value = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_size_max_key = mutable.Map[String, Long]()\n    \
    \    val paren_stack_map_size_max_value = mutable.Map[String, Long]()\n      \
    \  val paren_stack_map_size_max_key = mutable.Map[String, Long]()\n        val\
    \ paren_stack_map_size_max_value = mutable.Map[String, Long]()\n        val paren_stack_map_size_max_key\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_size_max_value =\
    \ mutable.Map[String, Long]()\n        val paren_stack_map_size_max_key = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_size_max_value = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_size_max_key = mutable.Map[String, Long]()\n    \
    \    val paren_stack_map_size_max_value = mutable.Map[String, Long]()\n      \
    \  val paren_stack_map_size_max_key = mutable.Map[String, Long]()\n        val\
    \ paren_stack_map_size_max_value = mutable.Map[String, Long]()\n        val paren_stack_map_size_max_key\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_size_max_value =\
    \ mutable.Map[String, Long]()\n        val paren_stack_map_size_max_key = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_size_max_value = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_size_max_key = mutable.Map[String, Long]()\n    \
    \    val paren_stack_map_size_max_value = mutable.Map[String, Long]()\n      \
    \  val paren_stack_map_size_max_key = mutable.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2xnhej5e.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp2xnhej5e.scala:16:12 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_size_max_key\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_size_max_key is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_map_size_max_key\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2xnhej5e.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_size_max_value\e\
    [0m = mutable.Map[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mparen_stack_map_size_max_value is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_map_size_max_value\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2xnhej5e.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_size_max_key\e\
    [0m = mutable.Map[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mparen_stack_map_size_max_key is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_map_size_max_key\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2xnhej5e.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_size_max_value\e\
    [0m = mutable.Map[\e[35mString"
  stdout: ''
  timestamp: 1659798321
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_top = mutable.Stack[Long]()\n        val paren_stack_top_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_max_count = mutable.Stack[Long]()\n\
    \        val paren_stack_top_max_count_index = mutable.Stack[Long]()\n       \
    \ val paren_stack_top_max_count_index2 = mutable.Stack[Long]()\n        val paren_stack_top_max_count_index3\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_max_count_index4 = mutable.Stack[Long]()\n\
    \        val paren_stack_top_max_count_index5 = mutable.Stack[Long]()\n      \
    \  val paren_stack_top_max_count_index6 = mutable.Stack[Long]()\n        val paren_stack_top_max_count_index7\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_max_count_index8 = mutable.Stack[Long]()\n\
    \        val paren_stack_top_max_count_index9 = mutable.Stack[Long]()\n      \
    \  val paren_stack_top_max_count_index10 = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_max_count_index11 = mutable.Stack[Long]()\n        val paren_stack_top_max_count_index12\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_max_count_index13 = mutable.Stack[Long]()\n\
    \        val paren_stack_top_max_count_index14 = mutable.Stack[Long]()\n     \
    \   val paren_stack_top_max_count_index15 = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_max_count_index16 = mutable.Stack[Long]()\n        val paren_stack_top_max_count_index17\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_max_count_index18 = mutable.Stack[Long]()\n\
    \        val paren_stack_top_max_count_index19 = mutable.Stack[Long]()\n     \
    \   val paren_stack_top_max_count_index20 = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_max_count_index21 = mutable.Stack[Long]()\n        val paren_stack_top_max_count_index22\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_max_count_index23 = mutable.Stack[Long]()\n\
    \        val paren_stack_top_max_count_index24 = mutable.Stack[Long]()\n     \
    \   val paren_stack_top_max_count_index25\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqg1p7dpj.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqg1p7dpj.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpqg1p7dpj.scala:11:30 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_top\e[0m = mutable.Stack[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpqg1p7dpj.scala:12:34 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_max\e[0m\
    \ = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqg1p7dpj.scala:13:40\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_top_max_count\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                        ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                        Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpqg1p7dpj.scala:14:46 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_max_count_index\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |"
  stdout: ''
  timestamp: 1659798322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_chars = paren_string.toCharArray\n\
    \        val paren_chars_size = paren_chars.length\n        val paren_chars_map\
    \ = mutable.HashMap[Char, Long]()\n        var paren_level = 0\n        var paren_level_count\
    \ = 0\n        var paren_level_max_count = 0\n        var paren_level_max_count_index\
    \ = 0\n        var paren_level_max_count_index2 = 0\n        var paren_level_max_count_index3\
    \ = 0\n        var paren_level_max_count_index4 = 0\n        var paren_level_max_count_index5\
    \ = 0\n        var paren_level_max_count_index6 = 0\n        var paren_level_max_count_index7\
    \ = 0\n        var paren_level_max_count_index8 = 0\n        var paren_level_max_count_index9\
    \ = 0\n        var paren_level_max_count_index10 = 0\n        var paren_level_max_count_index11\
    \ = 0\n        var paren_level_max_count_index12 = 0\n        var paren_level_max_count_index13\
    \ = 0\n        var paren_level_max_count_index14 = 0\n        var paren_level_max_count_index15\
    \ = 0\n        var paren_level_max_count_index16 = 0\n        var paren_level_max_count_index17\
    \ = 0\n        var paren_level_max_count_index18 = 0\n        var paren_level_max_count_index19\
    \ = 0\n        var paren_level_max_count_index20 = 0\n        var paren_level_max_count_index21\
    \ = 0\n        var paren_level_max_count_index22 = 0\n        var paren_level_max_count_index23\
    \ = 0\n        var paren_level_max_count_index24 = 0\n        var paren_level_max_count_index25\
    \ = 0\n        var paren_level_max_count_index26 = 0\n        var paren_level_max_count_index27\
    \ = 0\n        var paren_level_max_count_index28 = 0\n        var paren_level_max_count_index29\
    \ = 0\n        var paren_level_max_count_index30 = 0\n        var paren_level_max_count_index31\
    \ = 0\n        var paren_level_max_count_index32 = 0\n        var paren_level_max_count_index33\
    \ = 0\n        var paren_level_max_count_index34 = 0\n        var paren_level_max_count_index35\
    \ = 0\n        var paren_level_max_count_index36 = 0\n        var paren_level_max_count_index37\
    \ = 0\n        var paren_level_max_count_index38 = 0\n        var paren_level_max_count_index39\
    \ = 0\n        var paren_level_max_count_index40 = 0\n        var paren_level_max_count_index41\
    \ = 0\n        var paren_level_max_count_index42 = 0\n        var paren_level_max_count_index43\
    \ = 0\n        var paren_level_max_count_index44 = 0\n        var paren_level_max_count_index45\
    \ = 0\n        var paren\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp01zxv3sn.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp01zxv3sn.scala:12:30\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_chars_map\e[0m = mutable.HashMap[\e[35mChar\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                              Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp01zxv3sn.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_queue = mutable.Queue[Long]()\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0)\n        paren_stack.push(0)\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0)\n        paren_stack.push(0)\n\
    \        paren_queue.en\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu95kb1kn.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpu95kb1kn.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_queue\e[0m = mutable.Queue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count = mutable.Stack[Long]()\n        val paren_stack_top_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_count_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_count_count_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_count_count_count_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_count_count_count_count_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_count_count_count_count_count_count_size =\
    \ mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0o77x47e.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_count_count_count_count_count_count_count_count_size\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_count_count_count_count_count_count_count_count_size\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_top_count_count_count_count_count_count_count_count_size\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0o77x47e.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_count_count_count_count_count_count_count_count_count_count_size\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_count_count_count_count_count_count_count_count_count_count_size\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_top_count_count_count_count_count_count_count_count_count_count_size\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp0o77x47e.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_count_count_count_count_count_count_count_count_count_count_count_size\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_count_count_count_count_count_count_count_count_count_count_count_size\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_top_count_count_count"
  stdout: ''
  timestamp: 1659798322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_levels = mutable.Stack[Int]()\n        val paren_levels_map\
    \ = mutable.HashMap[String, Int]()\n        val paren_levels_map_sorted = mutable.TreeMap[String,\
    \ Int]()\n        val paren_levels_map_sorted_reversed = mutable.TreeMap[String,\
    \ Int]()\n        val paren_levels_map_sorted_reversed_sorted = mutable.TreeMap[String,\
    \ Int]()\n        val paren_levels_map_sorted_reversed_sorted_reversed = mutable.TreeMap[String,\
    \ Int]()\n        val paren_levels_map_sorted_reversed_sorted_reversed_sorted\
    \ = mutable.TreeMap[String, Int]()\n        val paren_levels_map_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = mutable.TreeMap[String, Int]()\n        val paren_levels_map_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = mutable.TreeMap[String, Int]()\n        val paren_levels_map_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = mutable.TreeMap[String, Int]()\n        val paren_levels_map_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = mutable.TreeMap[String, Int]()\n        val paren_levels_map_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = mutable.TreeMap[String, Int]()\n        val paren_levels_map_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = mutable.TreeMap[String, Int]()\n        val paren_levels_map_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = mutable.TreeMap[String, Int]()\n        val paren_levels_map_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = mutable.TreeMap[String, Int]()\n        val paren_levels_map_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = mutable.TreeMap[String, Int]()\n        val paren_levels_map_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = mutable.TreeMap[String, Int]()\n        val paren_levels_map_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = mutable.TreeMap[String, Int]()\n        val paren_level\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptueo9hjw.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptueo9hjw.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_levels_map_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\e\
    [0m = mutable.TreeMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_levels_map_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_levels_map_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmptueo9hjw.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmptueo9hjw.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.Stack[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmptueo9hjw.scala:12:3"
  stdout: ''
  timestamp: 1659798323
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val max_level\
    \ = 0\n        var max_level_index = 0\n        var level = 0\n        var level_index\
    \ = 0\n        var paren_count = 0\n        var paren_count_index = 0\n      \
    \  var paren_count_temp = 0\n        var paren_count_temp_temp = 0\n        var\
    \ paren_count_temp_temp2 = 0\n        var paren_count_temp_temp3 = 0\n       \
    \ var paren_count_temp_temp4 = 0\n        var paren_count_temp_temp5 = 0\n   \
    \     var paren_count_temp_temp6 = 0\n        var paren_count_temp_temp7 = 0\n\
    \        var paren_count_temp_temp8 = 0\n        var paren_count_temp_temp9 =\
    \ 0\n        var paren_count_temp_temp10 = 0\n        var paren_count_temp_temp11\
    \ = 0\n        var paren_count_temp_temp12 = 0\n        var paren_count_temp_temp13\
    \ = 0\n        var paren_count_temp_temp14 = 0\n        var paren_count_temp_temp15\
    \ = 0\n        var paren_count_temp_temp16 = 0\n        var paren_count_temp_temp17\
    \ = 0\n        var paren_count_temp_temp18 = 0\n        var paren_count_temp_temp19\
    \ = 0\n        var paren_count_temp_temp20 = 0\n        var paren_count_temp_temp21\
    \ = 0\n        var paren_count_temp_temp22 = 0\n        var paren_count_temp_temp23\
    \ = 0\n        var paren_count_temp_temp24 = 0\n        var paren_count_temp_temp25\
    \ = 0\n        var paren_count_temp_temp26 = 0\n        var paren_count_temp_temp27\
    \ = 0\n        var paren_count_temp_temp28 = 0\n        var paren_count_temp_temp29\
    \ = 0\n        var paren_count_temp_temp30 = 0\n        var paren_count_temp_temp31\
    \ = 0\n        var paren_count_temp_temp32 = 0\n        var paren_count_temp_temp33\
    \ = 0\n        var paren_count_temp_temp34 = 0\n        var paren_count_temp_temp35\
    \ = 0\n        var paren_count_temp_temp36 = 0\n        var paren_count_temp_temp37\
    \ = 0\n        var paren_count_temp_temp38 = 0\n        var paren_count_temp_temp39\
    \ = 0\n        var paren_count_temp_temp40 = 0\n        var paren_count_temp_temp41\
    \ = 0\n        var paren_count_temp_temp42 = 0\n        var paren_count_temp_temp43\
    \ = 0\n        var paren_count_temp_temp44 = 0\n        var paren_count_temp_temp45\
    \ = 0\n        var paren_count_temp_temp46 = 0\n        var paren_count_temp_temp47\
    \ = 0\n        var paren_count_temp_temp48 = 0\n        var paren_count_temp_temp49\
    \ = 0\n        var paren_count_temp_temp50 = 0\n        var paren\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvq5c41rf.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpvq5c41rf.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798324
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_levels = mutable.ListBuffer[Long]()\n        val paren_level\
    \ = 0\n        for (i <- 0 until paren_string.length) {\n            if (paren_string(i)\
    \ == '(') {\n                paren_stack.push(paren_string(i))\n             \
    \   paren_levels += 1\n            } else if (paren_string(i) == ')') {\n    \
    \            val paren_level = paren_stack.pop\n                paren_levels +=\
    \ paren_level\n            }\n        }\n        paren_levels\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbt0hc4jq.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbt0hc4jq.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798321
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_chars = paren_string.chars\n \
    \       val paren_chars_iter = paren_chars.iterator\n        val paren_chars_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next = paren_chars_iter.next()\n\
    \        val paren_chars_next_next_next = paren_chars_iter.next()\n        val\
    \ paren_chars_next_next_next_next = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next()\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw4jr8szz.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_next_next_next_next_next_next_next_next_next_next_next_next_next\e\
    [0m = paren_chars_iter.next()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_chars_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpw4jr8szz.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\e\
    [0m = paren_chars_iter.next()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpw4jr8szz.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\e\
    [0m = paren_chars_iter.next()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_"
  stdout: ''
  timestamp: 1659798318
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_levels = mutable.ListBuffer[Long]()\n        paren_string.split(\"\
    \\\\s+\").foreach { s =>\n            val level = paren_stack.size + 1\n     \
    \       paren_stack += level\n            paren_levels += level\n            if\
    \ (s.startsWith(\"(\")) {\n                paren_stack.push(level)\n         \
    \   } else if (s.endsWith(\")\")) {\n                val paren_level = paren_stack.pop()\n\
    \                if (paren_level > 0) {\n                    paren_levels += paren_level\n\
    \                }\n            }\n        }\n        paren_levels.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcn9dwyqu.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpcn9dwyqu.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798323
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_chars = paren_string.chars\n \
    \       val paren_chars_iter = paren_chars.iterator\n        val paren_chars_next\
    \ = paren_chars_iter.next\n        val paren_chars_next_next = paren_chars_iter.next\n\
    \        val paren_chars_next_next_next = paren_chars_iter.next\n        val paren_chars_next_next_next_next\
    \ = paren_chars_iter.next\n        val paren_chars_next_next_next_next_next =\
    \ paren_chars_iter.next\n        val paren_chars_next_next_next_next_next_next\
    \ = paren_chars_iter.next\n        val paren_chars_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next\n        val paren_chars_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next\n        val paren_chars_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next\n        val paren_chars_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next\n        val paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_chars_iter.next\n        val paren_chars_next_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphxk5k1t5.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphxk5k1t5.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_chars_next_next_next_next_next_next_next_next_next_next_next_next\e\
    [0m = paren_chars_iter.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_chars_next_next_next_next_next_next_next_next_next_next_next_next\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_chars_next_next_next_next_next_next_next_next_next_next_next_next\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphxk5k1t5.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_next_next_next_next_next_next_next_next_next_next_next_next_next\e\
    [0m = paren_chars_iter.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_chars_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_chars_next_next_next_next_next_next_next_next_next_next_next_next_next\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmphxk5k1t5.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\e\
    [0m = paren_chars_iter.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_chars_next_n"
  stdout: ''
  timestamp: 1659798328
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = paren_stack_top_size\n\n        paren_string.split(\"\
    \\\\s+\").foreach(x => {\n            if (x == \"(\") {\n                paren_stack.push(paren_stack_size.size)\n\
    \                paren_stack_size.push(1)\n                paren_stack_top.push(paren_stack_size.size)\n\
    \                paren_stack_top_size.push(1)\n            } else if (x == \"\
    )\") {\n                val size = paren_stack_size.pop()\n                val\
    \ top = paren_stack_top.pop()\n                val top_size = paren_stack_top_size.pop()\n\
    \                if (paren_stack_size.size == size) {\n                    paren_stack_top_size.push(top)\n\
    \                    paren_stack_top_size.push(top_size)\n                }\n\
    \            }\n        })\n        val max_size = paren_stack_top_size.pop()\n\
    \        val max_top = paren_stack_top_size.pop()\n        val max_stack_top =\
    \ paren_stack_top.pop()\n        val max_stack_top_size = paren_stack_top_size.pop()\n\
    \        val max_stack_top_top_size = paren_stack_top_top_size.pop()\n       \
    \ val max_stack_top_top_top_size = paren_stack_top_top_top_size.pop()\n      \
    \  val max_stack_top_top_top_top_size = paren_stack_top_top_top_top_size.pop()\n\
    \        val max_stack_top_top_top_top_top_size = paren_stack_top_top_top_top_top_size.pop()\n\
    \        val max_stack_top_top_top_top_top_top_size = paren_stack_top_top_top_top_top_top_size.pop()\n\
    \        val max_stack_top_top_top_top_top_top_top_size = paren_stack_top_top_top_top_top_top_top_size.pop()\n\
    \        val max_stack_top_top_top_top_top_top_top_top_size = paren_stack_top_top_top_top_top_top_top_top_top_size.pop()\n\
    \        val max_stack_top_top_top_top_top_top_top_top_top_size = paren_stack_top_top_top_top_top_top_top_top_top_top_size.pop()\n\
    \        val max_stack_top_top_top_top_top_top_top_top_top_size = paren_stack_top_top_top_top_top_top_top_top_top_top_size.pop()\n\
    \        val max_stack_top_top_top_top_top_top_top_top_top_top_size = paren_stack_top_top_top_top_top_top_top_top_top_top_top_size.pop()\n\
    \        val max_stack_top_top_top_top_top_top_top_top_top_top_size = paren_stack_top_top_top_top_top_top_top_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp930374t5.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m\
    \ = paren_stack_top_size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp930374t5.scala:44:12 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mmax_stack_top_top_top_top_top_top_top_top_top_size\e\
    [0m = paren_stack_top_top_top_top_top_top_top_top_top_top_size.pop()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_stack_top_top_top_top_top_top_top_top_top_size is already\
    \ defined as \e[33mvalue\e[0m \e[35mmax_stack_top_top_top_top_top_top_top_top_top_size\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp930374t5.scala:46:12 ---------------------------\e[0m\e[0m\n\e\
    [31m46 |\e[0m        \e[33mval\e[0m \e[36mmax_stack_top_top_top_top_top_top_top_top_top_top_size\e\
    [0m = paren_stack_top_top_top_top_top_top_top_\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_stack_top_top_top_top_top_top_top_top_top_top_size is\
    \ already defined as \e[33mvalue\e[0m \e[35mmax_stack_top_top_top_top_top_top_top_top_top_top_size\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp930374t5.scala:10:26 ------------------------\e[0m\e[0m\n\
    \e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m              "
  stdout: ''
  timestamp: 1659798327
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_len = mutable.Stack[Long]()\n        paren_stack.push(paren_string)\n\
    \        paren_stack_len.push(0)\n        while(paren_stack.nonEmpty) {\n    \
    \        val paren_string = paren_stack.pop()\n            val paren_stack_len\
    \ = paren_stack_len.pop()\n            val paren_len = paren_string.length\n \
    \           val paren_char = paren_string.charAt(paren_len)\n            val paren_char_code\
    \ = paren_char.codePointAt(0)\n            val paren_char_code_len = 1\n     \
    \       val paren_char_code_char = paren_char.codePointAt(paren_char_code_len)\n\
    \            val paren_char_code_char_code = paren_char_code_char.codePointAt(0)\n\
    \            val paren_char_code_char_code_len = 1\n            val paren_char_code_char_code_char\
    \ = paren_char_code_char.codePointAt(paren_char_code_char_code_len)\n        \
    \    val paren_char_code_char_code_char_code = paren_char_code_char_code_char.codePointAt(0)\n\
    \            val paren_char_code_char_code_char_code_len = 1\n            val\
    \ paren_char_code_char_code_char_code_char = paren_char_code_char_code_char.codePointAt(paren_char_code_char_code_char_code_len)\n\
    \            val paren_char_code_char_code_char_code_char_code = paren_char_code_char_code_char_code_char.codePointAt(0)\n\
    \            val paren_char_code_char_code_char_code_char_code_len = 1\n     \
    \       val paren_char_code_char_code_char_code_char_code_char = paren_char_code_char_code_char_code_char.codePointAt(paren_char_code_char_code_char_code_char_code_len)\n\
    \            val paren_char_code_char_code_char_code_char_code_char_code = paren_char_code_char_code_char_code_char_code_char.codePointAt(0)\n\
    \            val paren_char_code_char_code_char_code_char_code_char_code_len =\
    \ 1\n            val paren_char_code_char_code_char_code_char_code_char_code_char\
    \ = paren_char_code_char_code_char_code_char_code_char_code_char.codePointAt(paren_char_code_char_code_char_code_char_code_char_code_char_code_len)\n\
    \            val paren_char_code_char_code_char_code_char_code_char_code_char_code\
    \ = paren_char_code_char_code_char_code_char_code_char_code_char.codePointAt(0)\n\
    \            val paren_char_code_char_code_char_code_char_code_char_code_char_code_len\
    \ = 1\n            val paren_char_code_char_code_char_code_char_code_char_code_char_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb5i8naiv.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb5i8naiv.scala:45:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m45 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpb5i8naiv.scala:10:26 ------------------------\e[0m\e[0m\n\
    \e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpb5i8naiv.scala:11:30 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_len\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpb5i8naiv.scala:16:34 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mparen_stack_len\e[0m\
    \ = paren_stack_len.pop()\n\e[31m\e[31m   |\e[0m                             \
    \     ^\e[0m\n\e[31m   |\e[0m                              Recursive \e[33mvalue\e\
    [0m \e[35mparen_stack_len\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpb5i8naiv.scala:33:79 ---------------------------\e[0m\e\
    [0m\n\e[31m33 |\e[0m            \e[33mval\e[0m \e[36mparen_char_code_char_code_char_code_char_code_char_code_char\e\
    [0m = paren_char_code_char_code_char_code_char_code_char_code_char.codePointAt(paren_char_code_char_code_char_code_char_code_char_code_char_code_len)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                       ^"
  stdout: ''
  timestamp: 1659798327
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_queue = mutable.Queue[String]()\n        paren_queue.enqueue(paren_string)\n\
    \        paren_stack.push(paren_queue.dequeue)\n        val max_level = 0\n  \
    \      var level = 0\n        while(!paren_stack.isEmpty) {\n            val paren_string\
    \ = paren_stack.dequeue()\n            val paren_level = paren_string.count('(')\
    \ - paren_string.count(')')\n            paren_stack.push(paren_string)\n    \
    \        level += 1\n            if(paren_level > max_level) {\n             \
    \   max_level = paren_level\n            }\n        }\n        level\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5ea8xzdn.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp5ea8xzdn.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_queue\e[0m = mutable.Queue[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmp5ea8xzdn.scala:22:26 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                max_level = paren_level\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          Reassignment to val max_level\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp5ea8xzdn.scala:25:8 ---------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        level\n\e[31m\e[31m   |\e[0m        ^^^^^\e[0m\n\e\
    [31m   |\e[0m        Found:    (level : Int)\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798328
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_len = mutable.Stack[Long]()\n        val paren_stack_len_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max = mutable.Stack[Long]()\n        val\
    \ paren_stack_len_max_len_max_max = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqidse7kf.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqidse7kf.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpqidse7kf.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_len_max_le"
  stdout: ''
  timestamp: 1659798328
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_queue = mutable.Queue[String]()\n        paren_queue.enqueue(paren_string)\n\
    \        val paren_levels = mutable.Map[String, Long]()\n        while (paren_queue.nonEmpty)\
    \ {\n            val paren_string = paren_queue.dequeue()\n            val paren_level\
    \ = paren_levels.getOrElse(paren_string, 0)\n            paren_levels += (paren_string\
    \ -> paren_level)\n            paren_stack += paren_string\n            if (paren_string.contains(\"\
    (\")) {\n                paren_queue.enqueue(paren_string + \")\")\n         \
    \   }\n            if (paren_string.contains(\")\")) {\n                paren_queue.enqueue(paren_string\
    \ + \"(\")\n            }\n        }\n        val max_level = paren_levels\n \
    \           .map { case (paren_string, level) => (paren_string, level) }\n   \
    \         .maxBy(_._2)\n            .map(x => x._2)\n            .headOption\n\
    \            .getOrElse(0)\n        val max_level_paren_string = max_level.map(x\
    \ => paren_stack.pop()).getOrElse(\"\")\n        val max_level_paren_level = max_level.map(x\
    \ => paren_stack.pop()).getOrElse(0)\n        val max_level_paren_levels = max_level_paren_string.zip(max_level_paren_level).map(x\
    \ => x._1 + \" \" + x._2)\n        val max_level_paren_levels_string = max_level_paren_levels.mkString(\"\
    \ \")\n        val max_level_paren_levels_string = max_level_paren_levels_string.substring(0,\
    \ max_level_paren_levels_string.length - 1)\n        val max_level_paren_levels_string\
    \ = max_level_paren_levels_string.substring(0, max_level_paren_levels_string.length\
    \ - 1)\n        val max_level_paren_levels_string = max_level_paren_levels_string.substring(0,\
    \ max_level_paren_levels_string.length - 1)\n        val max_level_paren_levels_string\
    \ = max_level_paren_levels_string.substring(0, max_level_paren_levels_string.length\
    \ - 1)\n        val max_level_paren_levels_string = max_level_paren_levels_string.substring(0,\
    \ max_level_paren_levels_string.length - 1)\n        val max_level_paren_levels_string\
    \ = max_level_paren_levels_string.substring(0, max_level_paren_levels_string.length\
    \ - 1)\n        val max_level_paren_levels_string = max_level_paren_levels_string.substring(0,\
    \ max_level_paren_levels_string.length - 1)\n        val max_level_paren_levels_string\
    \ = max_level_paren_levels_\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpls5yfjwf.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mmax_level_paren_levels_string\e\
    [0m = max_level_paren_levels_string.substring(\e[31m0\e[0m, max_level_paren_levels_string.length\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_level_paren_levels_string is already defined as \e[33mvalue\e\
    [0m \e[35mmax_level_paren_levels_string\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpls5yfjwf.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mmax_level_paren_levels_string\e\
    [0m = max_level_paren_levels_string.substring(\e[31m0\e[0m, max_level_paren_levels_string.length\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_level_paren_levels_string is already defined as \e[33mvalue\e\
    [0m \e[35mmax_level_paren_levels_string\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpls5yfjwf.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mmax_level_paren_levels_string\e\
    [0m = max_level_paren_levels_string.substring(\e[31m0\e[0m, max_level_paren_levels_string.length\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_level_paren_levels_string is already defined as \e[33mvalue\e\
    [0m \e[35mmax_level_paren_levels_string\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpls5yfjwf.sc"
  stdout: ''
  timestamp: 1659798328
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_map = mutable.Map[Long, Long]()\n        val paren_stack_map_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_keys = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values = mutable.Map[Long, Long]()\n     \
    \   val paren_stack_map_values_values_keys = mutable.Map[Long, Long]()\n     \
    \   val paren_stack_map_values_values_values = mutable.Map[Long, Long]()\n   \
    \     val paren_stack_map_values_values_values_keys = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_values_values = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_values_values_keys = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_keys_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys_keys_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_keys_keys_keys_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys_keys_keys_values_values_values_values_keys_keys_keys_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwyiu_aog.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwyiu_aog.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpwyiu_aog.scala:11:30 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwyiu_aog.scala:12:35 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_keys\e[0m\
    \ = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                                ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpwyiu_aog.scala:13:37 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_values\e[0m =\
    \ mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m     \
    \                                ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpwyiu_aog.scala:14:42 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_values_keys\e\
    [0m = mutable.Map[\e[35mL"
  stdout: ''
  timestamp: 1659798329
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_size = mutable.Stack[Long]()\n        val paren_stack_level_max_index\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index_count = mutable.Stack[Long]()\n     \
    \   val paren_stack_level_max_index_count_size = mutable.Stack[Long]()\n     \
    \   val paren_stack_level_max_index_count_index = mutable.Stack[Long]()\n    \
    \    val paren_stack_level_max_index_count_index_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index_count_index_count = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index_count_index_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index_count_index_count_index = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index_count_index_count_index_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index_count_index_count_index_count = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index_count_index_count_index_count_size =\
    \ mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index_count_index\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index_count_index_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index_count_index_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index_count_index_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_count_index_count_index_count_index_count_index_count_index\
    \ = mut\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp86p6_igs.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp86p6_igs.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m =\
    \ mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp86p6_igs.scala:12:32\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_level\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp86p6_igs.scala:13:36 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level_max\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp86p6_igs.scala:14:41 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_level_max_size\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                                         Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-ex"
  stdout: ''
  timestamp: 1659798329
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_queue = mutable.Queue[String]()\n        paren_queue.enqueue(paren_string)\n\
    \        paren_stack.push(paren_queue.dequeue)\n        var paren_level = 0\n\
    \        var paren_level_count = 0\n        var paren_level_max_count = 0\n  \
    \      var paren_level_max_level = 0\n        while (paren_queue.nonEmpty) {\n\
    \            val paren_string = paren_queue.dequeue\n            val paren_level\
    \ = paren_stack.size\n            val paren_level_count = paren_queue.size\n \
    \           val paren_level_max_count = paren_level_count + paren_level_count\n\
    \            val paren_level_max_level = paren_level + paren_level_count\n   \
    \         if (paren_level_max_count > paren_level_max_level) {\n             \
    \   paren_stack.push(paren_string)\n                paren_level_count = 1\n  \
    \              paren_level_max_level = paren_level\n            } else {\n   \
    \             paren_stack.push(paren_string)\n                paren_level_count\
    \ += 1\n            }\n        }\n        val paren_level_list = paren_stack.map(x\
    \ => x.length)\n        paren_level_list.max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsis09nso.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpsis09nso.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_queue\e[0m = mutable.Queue[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpsis09nso.scala:26:34 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                paren_level_count = \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Reassignment to val paren_level_count\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpsis09nso.scala:27:38 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                paren_level_max_level = paren_level\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                Reassignment to val paren_level_max_level\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_map = mutable.Map[Long, Long]()\n        val paren_stack_map_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_keys = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values = mutable.Map[Long, Long]()\n     \
    \   val paren_stack_map_values_values_keys = mutable.Map[Long, Long]()\n     \
    \   val paren_stack_map_values_values_values = mutable.Map[Long, Long]()\n   \
    \     val paren_stack_map_values_values_values_keys = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_values_values = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_values_values_keys = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_keys_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys_values_values_values_keys_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys_values_values_values_values_keys_values_values_values_values_values_values_keys_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnj8kwv77.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnj8kwv77.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpnj8kwv77.scala:11:30 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnj8kwv77.scala:12:35 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_keys\e[0m\
    \ = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                                ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpnj8kwv77.scala:13:37 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_values\e[0m =\
    \ mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m     \
    \                                ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpnj8kwv77.scala:14:42 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_values_keys\e\
    [0m = mutable.Map[\e[35mL"
  stdout: ''
  timestamp: 1659798330
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_levels = mutable.Stack[Int]()\n        val paren_levels_count\
    \ = mutable.Stack[Int]()\n        val paren_levels_count_max = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max_index = mutable.Stack[Int]()\n        val\
    \ paren_levels_count_max_index2 = mutable.Stack[Int]()\n        val paren_levels_count_max_index3\
    \ = mutable.Stack[Int]()\n        val paren_levels_count_max_index4 = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max_index5 = mutable.Stack[Int]()\n        val\
    \ paren_levels_count_max_index6 = mutable.Stack[Int]()\n        val paren_levels_count_max_index7\
    \ = mutable.Stack[Int]()\n        val paren_levels_count_max_index8 = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max_index9 = mutable.Stack[Int]()\n        val\
    \ paren_levels_count_max_index10 = mutable.Stack[Int]()\n        val paren_levels_count_max_index11\
    \ = mutable.Stack[Int]()\n        val paren_levels_count_max_index12 = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max_index13 = mutable.Stack[Int]()\n        val\
    \ paren_levels_count_max_index14 = mutable.Stack[Int]()\n        val paren_levels_count_max_index15\
    \ = mutable.Stack[Int]()\n        val paren_levels_count_max_index16 = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max_index17 = mutable.Stack[Int]()\n        val\
    \ paren_levels_count_max_index18 = mutable.Stack[Int]()\n        val paren_levels_count_max_index19\
    \ = mutable.Stack[Int]()\n        val paren_levels_count_max_index20 = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max_index21 = mutable.Stack[Int]()\n        val\
    \ paren_levels_count_max_index22 = mutable.Stack[Int]()\n        val paren_levels_count_max_index23\
    \ = mutable.Stack[Int]()\n        val paren_levels_count_max_index24 = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max_index25\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0hm9391k.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0hm9391k.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp0hm9391k.scala:11:27 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.Stack[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp0hm9391k.scala:12:33 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_levels_count\e[0m\
    \ = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0hm9391k.scala:13:37\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_levels_count_max\e[0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp0hm9391k.scala:14:43 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_levels_count_max_index\e\
    [0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \       "
  stdout: ''
  timestamp: 1659798332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val paren_array_max_size\
    \ = paren_array_size - 1\n        val paren_array_max_size = paren_array_max_size\
    \ + 1\n        val paren_array_max_size = paren_array_max_size + 1\n        val\
    \ paren_array_max_size = paren_array_max_size + 1\n        val paren_array_max_size\
    \ = paren_array_max_size + 1\n        val paren_array_max_size = paren_array_max_size\
    \ + 1\n        val paren_array_max_size = paren_array_max_size + 1\n        val\
    \ paren_array_max_size = paren_array_max_size + 1\n        val paren_array_max_size\
    \ = paren_array_max_size + 1\n        val paren_array_max_size = paren_array_max_size\
    \ + 1\n        val paren_array_max_size = paren_array_max_size + 1\n        val\
    \ paren_array_max_size = paren_array_max_size + 1\n        val paren_array_max_size\
    \ = paren_array_max_size + 1\n        val paren_array_max_size = paren_array_max_size\
    \ + 1\n        val paren_array_max_size = paren_array_max_size + 1\n        val\
    \ paren_array_max_size = paren_array_max_size + 1\n        val paren_array_max_size\
    \ = paren_array_max_size + 1\n        val paren_array_max_size = paren_array_max_size\
    \ + 1\n        val paren_array_max_size = paren_array_max_size + 1\n        val\
    \ paren_array_max_size = paren_array_max_size + 1\n        val paren_array_max_size\
    \ = paren_array_max_size + 1\n        val paren_array_max_size = paren_array_max_size\
    \ + 1\n        val paren_array_max_size = paren_array_max_size + 1\n        val\
    \ paren_array_max_size = paren_array_max_size + 1\n        val paren_array_max_size\
    \ = paren_array_max_size + 1\n        val paren_array_max_size = paren_array_max_size\
    \ + 1\n        val paren_array_max_size = paren_array_max_size + 1\n        val\
    \ paren_array_max_size = paren_array_max_size + 1\n        val paren_array_max_size\
    \ = paren_array_max_size + 1\n        val paren_array_max_size = paren_array_max_size\
    \ + 1\n        val paren_array_max_size = paren_array_max_size + 1\n        val\
    \ paren_array_max_size = paren_array_max_size + 1\n        val paren_array_max_size\
    \ = paren_array_max_size + 1\n        val paren_array_max_size = paren_array_max_size\
    \ + 1\n        val paren_array_max_size = paren_array_max_size + 1\n        val\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpcgjk0fx_.scala:47:11 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpcgjk0fx_.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_size\e[0m\
    \ = paren_array_max_size + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_array_max_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpcgjk0fx_.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_size\e[0m\
    \ = paren_array_max_size + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_array_max_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpcgjk0fx_.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_size\e[0m\
    \ = paren_array_max_size + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_array_max_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpcgjk0fx_.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_size\e[0m\
    \ = paren_array_max_size + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659798332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_map = mutable.HashMap[Long, Long]()\n        val paren_stack_map_keys\
    \ = mutable.HashSet[Long]()\n        val paren_stack_map_values = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_values_keys = mutable.HashSet[Long]()\n\
    \        val paren_stack_map_values_values = mutable.HashMap[Long, Long]()\n \
    \       val paren_stack_map_values_values_keys = mutable.HashSet[Long]()\n   \
    \     val paren_stack_map_values_values_values = mutable.HashMap[Long, Long]()\n\
    \        val paren_stack_map_values_values_values_keys = mutable.HashSet[Long]()\n\
    \        val paren_stack_map_values_values_values_values = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_keys = mutable.HashSet[Long]()\n\
    \        val paren_stack_map_values_values_values_values_values = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values_keys\
    \ = mutable.HashSet[Long]()\n        val paren_stack_map_values_values_values_values_values_values\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_keys\
    \ = mutable.HashSet[Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_keys\
    \ = mutable.HashSet[Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys\
    \ = mutable.HashSet[Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.HashSet[Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.HashSet[Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_values_values_values_values_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcv5xap9w.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcv5xap9w.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_map_values_values_values_values_values_values_values_values\e\
    [0m = mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_values_values_values_values_values_values_values_values\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_map_values_values_values_values_values_values_values_values\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcv5xap9w.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_values_values_values_values_values_values_values_values_values_keys\e\
    [0m = mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_values_values_values_values_values_values_values_values_values_keys\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_map_values_values_values_values_values_values_values_values_values_keys\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpcv5xap9w.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_values_values_values_values_values_values_values_values_values_values\e\
    [0m = mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659798332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_queue = mutable.Queue[String]()\n        paren_queue.enqueue(paren_string)\n\
    \        paren_stack.push(paren_string)\n        val max_level = 0\n        while(!paren_queue.isEmpty)\
    \ {\n            val current_string = paren_queue.dequeue()\n            val current_level\
    \ = paren_stack.size\n            val current_parens = paren_stack.mkString(\"\
    \").length\n            val current_parens_count = current_parens.toLong\n   \
    \         val current_parens_count_plus_1 = current_parens_count + 1\n       \
    \     val current_parens_count_minus_1 = current_parens_count - 1\n          \
    \  val current_parens_count_minus_2 = current_parens_count - 2\n            val\
    \ current_parens_count_minus_3 = current_parens_count - 3\n            val current_parens_count_minus_4\
    \ = current_parens_count - 4\n            val current_parens_count_minus_5 = current_parens_count\
    \ - 5\n            val current_parens_count_minus_6 = current_parens_count - 6\n\
    \            val current_parens_count_minus_7 = current_parens_count - 7\n   \
    \         val current_parens_count_minus_8 = current_parens_count - 8\n      \
    \      val current_parens_count_minus_9 = current_parens_count - 9\n         \
    \   val current_parens_count_minus_10 = current_parens_count - 10\n          \
    \  val current_parens_count_minus_11 = current_parens_count - 11\n           \
    \ val current_parens_count_minus_12 = current_parens_count - 12\n            val\
    \ current_parens_count_minus_13 = current_parens_count - 13\n            val current_parens_count_minus_14\
    \ = current_parens_count - 14\n            val current_parens_count_minus_15 =\
    \ current_parens_count - 15\n            val current_parens_count_minus_16 = current_parens_count\
    \ - 16\n            val current_parens_count_minus_17 = current_parens_count -\
    \ 17\n            val current_parens_count_minus_18 = current_parens_count - 18\n\
    \            val current_parens_count_minus_19 = current_parens_count - 19\n \
    \           val current_parens_count_minus_20 = current_parens_count - 20\n  \
    \          val current_parens_count_minus_21 = current_parens_count - 21\n   \
    \         val current_parens_count_minus_22 = current_parens_count - 22\n    \
    \        val current_parens_count_minus_23 = current_parens_count - 23\n     \
    \       val current_parens_count_minus_24 = current_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4n3vq6cq.scala:53:0 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4n3vq6cq.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp4n3vq6cq.scala:11:26 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_queue\e[0m = mutable.Queue[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp4n3vq6cq.scala:44:48 ------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m            \e[33mval\e[0m \e[36mcurrent_parens_count_minus_24\e\
    [0m = current_\n\e[31m\e[31m   |\e[0m                                        \
    \        ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                      \
    \          Not found: current_\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp4n3vq6cq.scala:52:1 ---------------------\e[0m\e[0m\n\e[31m52\
    \ |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m\
    \   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp4n3vq6cq.scala:46:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m46 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n5 errors found\n"
  stdout: ''
  timestamp: 1659798332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_groups = paren_string.split(\"\
    \\\\s\")\n        val max_level = 0\n        val max_level_groups = mutable.ListBuffer.empty[String]\n\
    \        for (paren_group <- paren_groups) {\n            val level_of_nesting\
    \ = paren_group.count('(') - paren_group.count(')')\n            if (level_of_nesting\
    \ > max_level) {\n                max_level = level_of_nesting\n             \
    \   max_level_groups = max_level_groups.updated(0, paren_group)\n            }\
    \ else if (level_of_nesting == max_level) {\n                max_level_groups\
    \ = max_level_groups.updated(max_level_groups.size - 1, paren_group)\n       \
    \     }\n        }\n        max_level_groups.map(_.length).max\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjw4x7c1e.scala:12:31 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmax_level_groups\e[0m =\
    \ mutable.ListBuffer.empty[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m         \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpjw4x7c1e.scala:14:53 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m            \e[33mval\e[0m \e[36mlevel_of_nesting\e[0m = paren_group.count(\e\
    [31m'('\e[0m) - paren_group.count(\e[31m')'\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                                                ^^^\e[0m\n\e[31m   |\e[0m   \
    \                                            Found:    (\e[31m'('\e[0m : Char)\n\
    \e[31m   |\e[0m                                               Required: Char =>\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjw4x7c1e.scala:14:78\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e\
    [36mlevel_of_nesting\e[0m = paren_group.count(\e[31m'('\e[0m) - paren_group.count(\e\
    [31m')'\e[0m)\n\e[31m\e[31m   |\e[0m                                         \
    \                                     ^^^\e[0m\n\e[31m   |\e[0m              \
    \                                 Found:    (\e[31m')'\e[0m : Char)\n\e[31m  \
    \ |\e[0m                                               Required: Char => Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpjw4x7c1e.scala:16:26 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                max_level = level_of_nesting\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Reassignment to val max_level\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpjw4x7c1e.scala:17:33 ------------------------"
  stdout: ''
  timestamp: 1659798334
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth = mutable.Stack[Long]()\n        val paren_stack_max_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_size = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_pos_depth = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_pos_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_pos_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_pos_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_pos_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_pos_depth_pos_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_depth_size\
    \ = mutable.Stack[Long]\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7d03ws5c.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7d03ws5c.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m =\
    \ mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7d03ws5c.scala:12:30\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_max\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7d03ws5c.scala:13:35 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_max_size\e[0m = mutable.Stack[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                   Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7d03ws5c.scala:14:36 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E00"
  stdout: ''
  timestamp: 1659798331
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_levels = mutable.ListBuffer[Long]()\n        paren_stack.push(paren_string)\n\
    \        paren_levels.append(0)\n        while (paren_stack.nonEmpty) {\n    \
    \        val paren_string = paren_stack.pop()\n            val paren_level = (paren_levels(paren_levels.length-1)\
    \ + 1)\n            if (paren_string.contains(\"(\")) {\n                paren_stack.push(paren_string)\n\
    \                paren_levels.append(paren_level)\n            }\n           \
    \ else if (paren_string.contains(\")\")) {\n                paren_levels(paren_levels.length-1)\
    \ = paren_level\n            }\n        }\n        paren_levels.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9qapc0n0.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9qapc0n0.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798328
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6xzeq9g.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m\
    \ = paren_stack_top_size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpa6xzeq9g.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m\
    \ = paren_stack_top_size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpa6xzeq9g.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m\
    \ = paren_stack_top_size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpa6xzeq9g.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m\
    \ = paren_stack_top_size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpa6xzeq9g.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m    "
  stdout: ''
  timestamp: 1659798333
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_levels = mutable.ListBuffer[Long]()\n        paren_string.split(\"\
    \ \").foreach(s => {\n            val paren_level = paren_stack.size\n       \
    \     paren_stack.push(paren_level)\n            paren_levels += paren_level\n\
    \            if (s == \"(\") {\n                paren_stack.push(paren_level +\
    \ 1)\n            } else if (s == \")\") {\n                val paren_level =\
    \ paren_stack.pop()\n                if (paren_level > 0) {\n                \
    \    paren_levels += paren_level\n                }\n            }\n        })\n\
    \        paren_levels.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz8_2fq9r.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpz8_2fq9r.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_max = mutable.Stack[Long]()\n        val paren_stack_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size_max_max = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_size_max_max_max = mutable.Stack[Long]()\n        val paren_stack_max_size_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_max_\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5tymyke0.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5tymyke0.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_max_size_max_max_max_max_max_max_max_max_max_max_max_max\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_size_max_max_max_max_max_max_max_max_max_max_max_max\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_max_size_max_max_max_max_max_max_max_max_max_max_max_max\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5tymyke0.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_size_max_max_max_max_max_max_max_max_max_max_max_max_max_max\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_size_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_max_size_max_max_max_max_max_max_max_max_max_max_max_max_max_max\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp5tymyke0.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_size_max_max_max_max_max_max_max_max_max_max_max_max_max_max\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_size_ma"
  stdout: ''
  timestamp: 1659798334
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_queue = mutable.Queue[Long]()\n        val paren_levels = mutable.Map[Long,\
    \ Long]()\n        paren_string.split(\"\\\\s+\").foreach { s =>\n           \
    \ val paren_level = paren_levels(s)\n            if (paren_level == -1) {\n  \
    \              paren_levels(s) = paren_stack.size\n                paren_queue.enqueue(s)\n\
    \            } else {\n                paren_stack.push(paren_level)\n       \
    \     }\n        }\n        val max_levels = paren_queue.dequeue()\n        val\
    \ max_levels_map = paren_levels.toMap\n        val max_levels_map_keys = max_levels_map.keys\n\
    \        val max_levels_map_values = max_levels_map.values\n        val max_levels_map_sorted\
    \ = max_levels_map_keys.sorted\n        val max_levels_map_sorted_values = max_levels_map_values.sorted\n\
    \        val max_levels_map_sorted_keys = max_levels_map_sorted.map(max_levels_map_sorted_values.indexOf(_))\n\
    \        val max_levels_map_sorted_keys_map = max_levels_map_sorted.zip(max_levels_map_sorted_keys).map(x\
    \ => (x._1, x._2)).toMap\n        val max_levels_map_sorted_keys_map_values =\
    \ max_levels_map_sorted_keys.map(max_levels_map_sorted_keys_map.get(_))\n    \
    \    val max_levels_map_sorted_keys_map_values_sorted = max_levels_map_sorted_keys_map_values.sorted\n\
    \        val max_levels_map_sorted_keys_map_values_sorted_keys = max_levels_map_sorted_keys_map_values_sorted.map(max_levels_map_sorted_keys_map_values_sorted_values.indexOf(_))\n\
    \        val max_levels_map_sorted_keys_map_values_sorted_keys_map = max_levels_map_sorted_keys_map_values_sorted.zip(max_levels_map_sorted_keys_map_values_sorted_keys_keys).map(x\
    \ => (x._1, x._2)).toMap\n        val max_levels_map_sorted_keys_map_values_sorted_keys_map_values\
    \ = max_levels_map_sorted_keys_map_values_sorted_keys.map(max_levels_map_sorted_keys_map_values_sorted_keys_map_values.get(_))\n\
    \        val max_levels_map_sorted_keys_map_values_sorted_keys_map_values_sorted\
    \ = max_levels_map_sorted_keys_map_values_sorted_keys_map_values_sorted_keys.map(max_levels_map_sorted_keys_map_values_sorted_keys_map_values_sorted_keys_map.get(_))\n\
    \        val max_levels_map_sorted_keys_map_values_sorted_keys_map_values_sorted_keys\
    \ = max_levels_map_sorted_keys_map_values_sorted_keys_map_values_sorted_keys_map.map(max_levels_map_sorted_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3q9np5z7.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3q9np5z7.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp3q9np5z7.scala:11:26 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_queue\e[0m = mutable.Queue[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp3q9np5z7.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.Map[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3q9np5z7.scala:36:87\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e\
    [36mmax_levels_map_sorted_keys_map_values_sorted_keys_map_values_sorted_keys\e\
    [0m = max_levels_map_sorted_keys_map_values_sorted_keys_map_values_sorted_keys_map.map(max_levels_map_sorted_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: max_levels_map_sorted_keys_map_values_sorted_keys_map_values_sorted_keys_map\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when comp"
  stdout: ''
  timestamp: 1659798334
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_map = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max_size = mutable.HashMap[Long, Long]()\n\
    \        val paren_stack_map_size_max_key = mutable.HashMap[Long, Long]()\n  \
    \      val paren_stack_map_size_max_value = mutable.HashMap[Long, Long]()\n  \
    \      val paren_stack_map_size_max_key_size = mutable.HashMap[Long, Long]()\n\
    \        val paren_stack_map_size_max_value_size = mutable.HashMap[Long, Long]()\n\
    \        val paren_stack_map_size_max_key_value_size = mutable.HashMap[Long, Long]()\n\
    \        val paren_stack_map_size_max_key_value_size_size = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max_key_value_size_max = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max_key_value_size_max_size = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max_key_value_size_max_key = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max_key_value_size_max_value = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_size_max_key_value_size_max_key_size =\
    \ mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_key_value_size_max_value_size\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_key_value_size_max_key_value_size\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_key_value_size_max_key_value_size_max\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_key_value_size_max_key_value_size_max_size\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_key_value_size_max_key_value_size_max_key\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_key_value_size_max_key_value_size_max_value\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_key_value_size_max_key_value_size_max_key_size\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_size_max_\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4f3783w8.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4f3783w8.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp4f3783w8.scala:11:30 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.HashMap[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4f3783w8.scala:12:35 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_size\e[0m\
    \ = mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                                   ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp4f3783w8.scala:13:39 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_size_max\e[0m\
    \ = mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                                       ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                               Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp4f3783w8.scala:14:44 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_size_max_size\e\
    [0m "
  stdout: ''
  timestamp: 1659798333
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_map = mutable.Map[String, List[Long]]()\n        val\
    \ paren_stack_map_keys = mutable.Map[String, Long]()\n        val paren_stack_map_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_keys = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_keys = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_keys = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_keys = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptvni724n.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptvni724n.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_map_values_values_values_values_values_values_values_values_values_values\e\
    [0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_values_values_values_values_values_values_values_values_values_values\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_map_values_values_values_values_values_values_values_values_values_values\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmptvni724n.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_values_values_values_values_values_values_values_values_values_keys\e\
    [0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_values_values_values_values_values_values_values_values_values_keys\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_map_values_values_values_values_values_values_values_values_values_keys\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmptvni724n.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m     "
  stdout: ''
  timestamp: 1659798336
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        val paren_level = 0\n\
    \        val paren_levels = mutable.Stack[Long]()\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpawffysbx.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_levels is already defined as \e[33mvalue\e[0m \e[35mparen_levels\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpawffysbx.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_level\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mparen_level\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_level\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpawffysbx.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_levels\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mparen_levels\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_levels\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpawffysbx.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_level\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_level is already defined as \e[33mvalue\e[0m \e[35mparen_level\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpawffysbx.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_levels is "
  stdout: ''
  timestamp: 1659798261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_queue = mutable.Queue[String]()\n        paren_queue.enqueue(paren_string)\n\
    \        val paren_levels = mutable.Map[String, Long]()\n        while (paren_queue.nonEmpty)\
    \ {\n            val paren_string = paren_queue.dequeue()\n            val paren_level\
    \ = paren_levels(paren_string)\n            if (paren_level == null) {\n     \
    \           paren_levels(paren_string) = paren_stack.size\n            }\n   \
    \         paren_stack :+= paren_string\n            paren_string match {\n   \
    \             case \")\" =>\n                    paren_level += 1\n          \
    \      case \")()\" =>\n                    paren_queue.enqueue(paren_stack.pop())\n\
    \                case \")()()\" =>\n                    paren_queue.enqueue(paren_stack.pop())\n\
    \                case \")()()()\" =>\n                    paren_queue.enqueue(paren_stack.pop())\n\
    \                case \")()()()()\" =>\n                    paren_queue.enqueue(paren_stack.pop())\n\
    \                case \")()()()()()\" =>\n                    paren_queue.enqueue(paren_stack.pop())\n\
    \                case \")()()()()()()\" =>\n                    paren_queue.enqueue(paren_stack.pop())\n\
    \                case \")()()()()()()()\" =>\n                    paren_queue.enqueue(paren_stack.pop())\n\
    \                case \")()()()()()()()()\" =>\n                    paren_queue.enqueue(paren_stack.pop())\n\
    \                case \")()()()()()()()()\" =>\n                    paren_queue.enqueue(paren_stack.pop())\n\
    \                case \")()()()()()()()()()\" =>\n                    paren_queue.enqueue(paren_stack.pop())\n\
    \                case \")()()()()()()()()()()\" =>\n                    paren_queue.enqueue(paren_stack.pop())\n\
    \                case \")()()()()()()()()()()()\" =>\n                    paren_queue.enqueue(paren_stack.pop())\n\
    \                case \")()()()()()()()()()()()\" =>\n                    paren_queue.enqueue(paren_stack.pop())\n\
    \                case \")()()()()()()()()()()()\" =>\n                    paren_queue.enqueue(paren_stack.pop())\n\
    \                case \")()()()()()()()()()()()()\" =>\n                    paren_queue.enqueue(paren_stack.pop())\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwm5dyn8l.scala:63:0 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwm5dyn8l.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpwm5dyn8l.scala:11:26 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_queue\e[0m = mutable.Queue[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpwm5dyn8l.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwm5dyn8l.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mwhile\e[0m (paren_queue.nonEmpty)\
    \ {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m15 |\e[0m            \e[33mval\e\
    [0m \e[36mparen_string\e[0m = paren_queue.dequeue()\n\e[31m16 |\e[0m         \
    \   \e[33mval\e[0m \e[36mparen_level\e[0m = paren_levels(paren_string)\n\e[31m17\
    \ |\e[0m            \e[33mif\e[0m (paren_level == \e[31mnull\e[0m) {\n\e[31m18\
    \ |\e[0m                paren_levels(paren_string) = paren_stack.size\n\e[31m19\
    \ |\e[0m            }\n\e[31m20 |\e[0m            paren_stack :+= paren_string\n\
    \e[31m21 |\e[0m"
  stdout: ''
  timestamp: 1659798338
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_top = paren_stack.size\n        val paren_stack_max_level\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren = paren_stack_top\n\
    \        val paren_stack_max_level_with_paren_within_paren = paren_stack_top\n\
    \        val paren_stack_max_level_with_paren_within_paren_within_paren = paren_stack_top\n\
    \        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_stack_top\n        val paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_with\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpde85372c.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpde85372c.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\e\
    [0m = paren_stack_top\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_max_level_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpde85372c.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpde85372c.scala:26:5 ---------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798277
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val paren_array_max_size\
    \ = paren_array_size - 1\n        val paren_array_max_size = paren_array_max_size\
    \ * paren_array_max_size\n        val paren_array_max_size = paren_array_max_size\
    \ * paren_array_max_size\n        val paren_array_max_size = paren_array_max_size\
    \ * paren_array_max_size\n        val paren_array_max_size = paren_array_max_size\
    \ * paren_array_max_size\n        val paren_array_max_size = paren_array_max_size\
    \ * paren_array_max_size\n        val paren_array_max_size = paren_array_max_size\
    \ * paren_array_max_size\n        val paren_array_max_size = paren_array_max_size\
    \ * paren_array_max_size\n        val paren_array_max_size = paren_array_max_size\
    \ * paren_array_max_size\n        val paren_array_max_size = paren_array_max_size\
    \ * paren_array_max_size\n        val paren_array_max_size = paren_array_max_size\
    \ * paren_array_max_size\n        val paren_array_max_size = paren_array_max_size\
    \ * paren_array_max_size\n        val paren_array_max_size = paren_array_max_size\
    \ * paren_array_max_size\n        val paren_array_max_size = paren_array_max_size\
    \ * paren_array_max_size\n        val paren_array_max_size = paren_array_max_size\
    \ * paren_array_max_size\n        val paren_array_max_size = paren_array_max_size\
    \ * paren_array_max_size\n        val paren_array_max_size = paren_array_max_size\
    \ * paren_array_max_size\n        val paren_array_max_size = paren_array_max_size\
    \ * paren_array_max_size\n        val paren_array_max_size = paren_array_max_size\
    \ * paren_array_max_size\n        val paren_array_max_size = paren_array_max_size\
    \ * paren_array_max_size\n        val paren_array_max_size = paren_array_max_size\
    \ * paren_array_max_size\n        val paren_array_max_size = paren_array_max_size\
    \ * paren_array_max_size\n        val paren_array_max_size = paren_array_max_size\
    \ * paren_array_max_size\n        val paren_array_max_size = paren_array_max_size\
    \ * paren_array_max_size\n        val paren_array_max_size = paren_array_max_size\
    \ * paren_array_max_size\n        val paren_array_max_size = paren_array_max_size\
    \ * paren_array_max_size\n        val paren_array_max_size = paren_array_max_size\
    \ * paren_array_max_size\n        val paren_array_max_size = paren_array_\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpln74vdtr.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_size\e[0m\
    \ = paren_array_max_size * paren_array_max_size\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mparen_array_max_size is already defined as \e[33mvalue\e[0m \e\
    [35mparen_array_max_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpln74vdtr.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_size\e[0m\
    \ = paren_array_max_size * paren_array_max_size\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mparen_array_max_size is already defined as \e[33mvalue\e[0m \e\
    [35mparen_array_max_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpln74vdtr.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_size\e[0m\
    \ = paren_array_max_size * paren_array_max_size\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mparen_array_max_size is already defined as \e[33mvalue\e[0m \e\
    [35mparen_array_max_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpln74vdtr.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_size\e[0m\
    \ = paren_array_max_size * paren_array_max_size\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mparen_array_max_size is already defined as \e[33mvalue\e[0m \e\
    [35mparen_array_max_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ me"
  stdout: ''
  timestamp: 1659798338
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Int]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count = mutable.Stack[Int]()\n        val paren_stack_top_count_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_min = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_min = mutable.Stack[Int]()\n        val paren_stack_top_count_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_min = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_max = mutable.Stack[Int]()\n        val paren_stack_top_count_min\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_max = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_min = mutable.Stack[Int]()\n        val paren_stack_top_count_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_min = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_max = mutable.Stack[Int]()\n        val paren_stack_top_count_min\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_max = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_min = mutable.Stack[Int]()\n        val paren_stack_top_count_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_min = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_max = mutable.Stack[Int]()\n        val paren_stack_top_count_min\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_max = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_min = mutable.Stack[Int]()\n        val paren_stack_top_count_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_min = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_max = mutable.Stack[Int]()\n        val paren_stack_top_count_min\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_max = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_min = mutable.Stack[Int]()\n        val paren_stack_top_count_max\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpu7kj_u1f.scala:42:39 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_count_max\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu7kj_u1f.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_top_count_min\e[0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mparen_stack_top_count_min is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu7kj_u1f.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_count_max\e\
    [0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_count_max is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_top_count_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu7kj_u1f.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_count_min\e\
    [0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_count_min is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_top_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu7kj_u1f.scala:20:12 ---------------------------\e\
    [0m\e"
  stdout: ''
  timestamp: 1659798339
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count = mutable.Stack[Long]()\n        val paren_stack_top_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n       \
    \ val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n       \
    \ val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n       \
    \ val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n       \
    \ val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n       \
    \ val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n       \
    \ val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpabfwoo1z.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_count_indexSize\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_count_indexSize is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_top_count_indexSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpabfwoo1z.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_top_count_indexSize\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_count_indexSize is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_top_count_indexSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpabfwoo1z.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_top_count_indexSize\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_count_indexSize is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_top_count_indexSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpabfwoo1z.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_top_count_indexSize\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_count_indexSize is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_top_count_indexSize\e[0m\n\e[31m   |\e[0m\n"
  stdout: ''
  timestamp: 1659798339
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_top = paren_stack.size\n        val paren_stack_bottom\
    \ = paren_stack.size\n        val paren_stack_max_level = paren_stack.size\n \
    \       val paren_stack_max_level_top = paren_stack_max_level\n        val paren_stack_max_level_bottom\
    \ = paren_stack_max_level\n        val paren_stack_max_level_bottom = paren_stack_max_level\n\
    \        val paren_stack_max_level_bottom = paren_stack_max_level\n        val\
    \ paren_stack_max_level_bottom = paren_stack_max_level\n        val paren_stack_max_level_bottom\
    \ = paren_stack_max_level\n        val paren_stack_max_level_bottom = paren_stack_max_level\n\
    \        val paren_stack_max_level_bottom = paren_stack_max_level\n        val\
    \ paren_stack_max_level_bottom = paren_stack_max_level\n        val paren_stack_max_level_bottom\
    \ = paren_stack_max_level\n        val paren_stack_max_level_bottom = paren_stack_max_level\n\
    \        val paren_stack_max_level_bottom = paren_stack_max_level\n        val\
    \ paren_stack_max_level_bottom = paren_stack_max_level\n        val paren_stack_max_level_bottom\
    \ = paren_stack_max_level\n        val paren_stack_max_level_bottom = paren_stack_max_level\n\
    \        val paren_stack_max_level_bottom = paren_stack_max_level\n        val\
    \ paren_stack_max_level_bottom = paren_stack_max_level\n        val paren_stack_max_level_bottom\
    \ = paren_stack_max_level\n        val paren_stack_max_level_bottom = paren_stack_max_level\n\
    \        val paren_stack_max_level_bottom = paren_stack_max_level\n        val\
    \ paren_stack_max_level_bottom = paren_stack_max_level\n        val paren_stack_max_level_bottom\
    \ = paren_stack_max_level\n        val paren_stack_max_level_bottom = paren_stack_max_level\n\
    \        val paren_stack_max_level_bottom = paren_stack_max_level\n        val\
    \ paren_stack_max_level_bottom = paren_stack_max_level\n        val paren_stack_max_level_bottom\
    \ = paren_stack_max_level\n        val paren_stack_max_level_bottom = paren_stack_max_level\n\
    \        val paren_stack_max_level_bottom = paren_stack_max_level\n        val\
    \ paren_stack_max_level_bottom = paren_stack_max_level\n        val paren_stack_max_level_bottom\
    \ = paren_stack_max_level\n        val paren_stack_max_level_bottom = paren_stack_max_level\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5jd8pbu9.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_level_bottom\e\
    [0m = paren_stack_max_level\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_level_bottom is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_max_level_bottom\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5jd8pbu9.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_level_bottom\e\
    [0m = paren_stack_max_level\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_level_bottom is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_max_level_bottom\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5jd8pbu9.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_level_bottom\e\
    [0m = paren_stack_max_level\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_level_bottom is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_max_level_bottom\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5jd8pbu9.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_level_bottom\e\
    [0m = paren_stack_max_level\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_level_bottom is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_max_level_bottom\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of t"
  stdout: ''
  timestamp: 1659798339
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_length = paren_array.length\n        val max_level\
    \ = 0\n        var level = 0\n        var max_level_index = 0\n        var paren_array_index\
    \ = 0\n        var paren_array_element = \"\"\n        var paren_array_element_count\
    \ = 0\n        var paren_array_element_count_temp = 0\n        var paren_array_element_count_temp2\
    \ = 0\n        var paren_array_element_count_temp3 = 0\n        var paren_array_element_count_temp4\
    \ = 0\n        var paren_array_element_count_temp5 = 0\n        var paren_array_element_count_temp6\
    \ = 0\n        var paren_array_element_count_temp7 = 0\n        var paren_array_element_count_temp8\
    \ = 0\n        var paren_array_element_count_temp9 = 0\n        var paren_array_element_count_temp10\
    \ = 0\n        var paren_array_element_count_temp11 = 0\n        var paren_array_element_count_temp12\
    \ = 0\n        var paren_array_element_count_temp13 = 0\n        var paren_array_element_count_temp14\
    \ = 0\n        var paren_array_element_count_temp15 = 0\n        var paren_array_element_count_temp16\
    \ = 0\n        var paren_array_element_count_temp17 = 0\n        var paren_array_element_count_temp18\
    \ = 0\n        var paren_array_element_count_temp19 = 0\n        var paren_array_element_count_temp20\
    \ = 0\n        var paren_array_element_count_temp21 = 0\n        var paren_array_element_count_temp22\
    \ = 0\n        var paren_array_element_count_temp23 = 0\n        var paren_array_element_count_temp24\
    \ = 0\n        var paren_array_element_count_temp25 = 0\n        var paren_array_element_count_temp26\
    \ = 0\n        var paren_array_element_count_temp27 = 0\n        var paren_array_element_count_temp28\
    \ = 0\n        var paren_array_element_count_temp29 = 0\n        var paren_array_element_count_temp30\
    \ = 0\n        var paren_array_element_count_temp31 = 0\n        var paren_array_element_count_temp32\
    \ = 0\n        var paren_array_element_count_temp33 = 0\n        var paren_array_element_count_temp34\
    \ = 0\n        var paren_array_element_count_temp35 = 0\n        var paren_array_element_count_temp36\
    \ = 0\n        var paren_array_element_count_temp37 = 0\n        var paren_array_element_count_temp38\
    \ = 0\n        var paren_array_element_count_temp39 = 0\n        var paren_array_element_count_temp40\
    \ = 0\n        var paren_array_element_count_temp41 = 0\n        var paren_array_element_count_temp42\
    \ = 0\n        var paren_array_element_count_temp43 = 0\n        var paren_array_element_count_temp44\
    \ = 0\n        var paren_array_element_count_temp45 = 0\n        var paren_array_element_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp26nl0jk7.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp26nl0jk7.scala:64:5 ---------------------\e[0m\e[0m\n\e[31m64 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_chars = paren_string.toCharArray\n\
    \        val paren_chars_size = paren_chars.length\n        val paren_chars_map\
    \ = mutable.Map[Char, Int]()\n        var paren_level = 0\n        var paren_level_max\
    \ = -1\n        var paren_level_max_index = 0\n        var paren_level_max_count\
    \ = 0\n        var paren_level_max_count_index = 0\n        var paren_level_max_count_count\
    \ = 0\n        var paren_level_max_count_index = 0\n        var paren_level_max_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_index = 0\n        var paren_level_max_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_index = 0\n       \
    \ var paren_level_max_count_count_count_count_count_index = 0\n        var paren_level_max_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_index =\
    \ 0\n        var paren_level_max_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n        var paren_level_max_count_count_count_count_count_count_count_count_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9fakf3ig.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9fakf3ig.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mparen_level_max_count_index\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mparen_level_max_count_index\
    \ is already defined as \e[33mvariable\e[0m \e[35mparen_level_max_count_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9fakf3ig.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mvar\e[0m \e[36mparen_level_max_count_count_count_index\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_level_max_count_count_count_index is already defined\
    \ as \e[33mvariable\e[0m \e[35mparen_level_max_count_count_count_index\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9fakf3ig.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mvar\e[0m \e[36mparen_level_max_count_count_count_count_count_count_index\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_level_max_count_count_count_count_count_count_index\
    \ is already defined as \e[33mvariable\e[0m \e[35mparen_level_max_count_count_count_count_count_count_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9fakf3ig.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mvar\e[0m \e[36mparen_level_max_count_count_count_count_count_count_count_count_index\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31"
  stdout: ''
  timestamp: 1659798340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_size = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_size = mutable.Stack[Long]()\n  \
    \      val paren_stack_top_top_top_top_top_top = mutable.Stack[Long]()\n     \
    \   val paren_stack_top_top_top_top_top_top_size = mutable.Stack[Long]()\n   \
    \     val paren_stack_top_top_top_top_top_top_top = mutable.Stack[Long]()\n  \
    \      val paren_stack_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7q99qins.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7q99qins.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_top_top_top_top_top_top_top_top_top_top_size\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_top_top_top_top_top_top_top_top_top_size is\
    \ already defined as \e[33mvalue\e[0m \e[35mparen_stack_top_top_top_top_top_top_top_top_top_top_size\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp7q99qins.scala:10:26 ------------------------\e[0m\e[0m\n\
    \e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7q99qins.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m =\
    \ mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7q99qins.scala:12:30\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_top\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not F"
  stdout: ''
  timestamp: 1659798289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_queue = mutable.Queue[String]()\n        paren_queue.enqueue(paren_string)\n\
    \        paren_stack.push(paren_string)\n        val max_level = 0\n        while(!paren_queue.isEmpty)\
    \ {\n            val current_string = paren_queue.dequeue()\n            val current_level\
    \ = paren_stack.size\n            val current_level_parens = paren_stack.last.count('(')\n\
    \            val current_level_parantheses = paren_stack.last.count(')')\n   \
    \         val current_level_spaces = paren_stack.last.count(' ')\n           \
    \ val current_level_words = paren_stack.last.count(' ')\n            val current_level_words\
    \ = if (current_level_words == 0) 0 else current_level_words / current_level_parens\n\
    \            val current_level_words = if (current_level_words == 0) 0 else current_level_words\
    \ / current_level_spaces\n            val current_level_words = if (current_level_words\
    \ == 0) 0 else current_level_words / current_level_words\n            val current_level_words\
    \ = if (current_level_words == 0) 0 else current_level_words / current_level_parantheses\n\
    \            val current_level_words = if (current_level_words == 0) 0 else current_level_words\
    \ / current_level_parens\n            val current_level_words = if (current_level_words\
    \ == 0) 0 else current_level_words / current_level_spaces\n            val current_level_words\
    \ = if (current_level_words == 0) 0 else current_level_words / current_level_words\n\
    \            val current_level_words = if (current_level_words == 0) 0 else current_level_words\
    \ / current_level_parantheses\n            val current_level_words = if (current_level_words\
    \ == 0) 0 else current_level_words / current_level_parens\n            val current_level_words\
    \ = if (current_level_words == 0) 0 else current_level_words / current_level_spaces\n\
    \            val current_level_words = if (current_level_words == 0) 0 else current_level_words\
    \ / current_level_words\n            val current_level_words = if (current_level_words\
    \ == 0) 0 else current_level_words / current_level_parantheses\n            val\
    \ current_level_words = if (current_level_words == 0) 0 else current_level_words\
    \ / current_level_parens\n            val current_level_words = if (current_level_words\
    \ == 0) 0 else current_level_words / current_level_spaces\n            val current_level_words\
    \ = if (current_level_words == 0) 0 else current_level_words / current_level_words\n\
    \            val current_level_words = if (current_level_words == 0) 0 else current_level_words\
    \ / current_level_parantheses\n            val current_level_words = if (current_level_words\
    \ == 0) 0 else current_level_words / current_level_parens\n            val current_level_words\
    \ = if (current_level_words == \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1h3v44u9.scala:39:64 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m            \e[33mval\e[0m \e[36mcurrent_level_words\e\
    [0m = \e[33mif\e[0m (current_level_words == \n\e[31m\e[31m   |\e[0m          \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1h3v44u9.scala:48:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m48 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp1h3v44u9.scala:10:26 ------------------------\e[0m\e[0m\n\
    \e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp1h3v44u9.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_queue\e[0m = mutable.Queue[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp1h3v44u9.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mcurrent_level_words\e\
    [0m = \e[33mif\e[0m (current_level_words == \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e\
    [0m current_level_words / current_level_parens\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrent_level_words is already defined as \e[33mvalue\e[0m\
    \ \e[35mcurrent_level_words\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same g"
  stdout: ''
  timestamp: 1659798340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val paren_array_max_size\
    \ = paren_array_size - 1\n        val paren_array_max_index = paren_array_size\
    \ - 1\n        val paren_array_max_value = paren_array_max_index.toLong\n    \
    \    val paren_array_max_value_plus_one = paren_array_max_value + 1\n        val\
    \ paren_array_max_value_minus_one = paren_array_max_value - 1\n        val paren_array_max_value_minus_two\
    \ = paren_array_max_value - 2\n        val paren_array_max_value_minus_three =\
    \ paren_array_max_value - 3\n        val paren_array_max_value_minus_four = paren_array_max_value\
    \ - 4\n        val paren_array_max_value_minus_five = paren_array_max_value -\
    \ 5\n        val paren_array_max_value_minus_six = paren_array_max_value - 6\n\
    \        val paren_array_max_value_minus_seven = paren_array_max_value - 7\n \
    \       val paren_array_max_value_minus_eight = paren_array_max_value - 8\n  \
    \      val paren_array_max_value_minus_nine = paren_array_max_value - 9\n    \
    \    val paren_array_max_value_minus_ten = paren_array_max_value - 10\n      \
    \  val paren_array_max_value_minus_eleven = paren_array_max_value - 11\n     \
    \   val paren_array_max_value_minus_twelve = paren_array_max_value - 12\n    \
    \    val paren_array_max_value_minus_thirteen = paren_array_max_value - 13\n \
    \       val paren_array_max_value_minus_fourteen = paren_array_max_value - 14\n\
    \        val paren_array_max_value_minus_fifteen = paren_array_max_value - 15\n\
    \        val paren_array_max_value_minus_sixteen = paren_array_max_value - 16\n\
    \        val paren_array_max_value_minus_seventeen = paren_array_max_value - 17\n\
    \        val paren_array_max_value_minus_eighteen = paren_array_max_value - 18\n\
    \        val paren_array_max_value_minus_nineteen = paren_array_max_value - 19\n\
    \        val paren_array_max_value_minus_twenty = paren_array_max_value - 20\n\
    \        val paren_array_max_value_minus_twenty_one = paren_array_max_value -\
    \ 21\n        val paren_array_max_value_minus_twenty_two = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpe63wqz6r.scala:37:52 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_value_minus_twenty_two\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \    ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpe63wqz6r.scala:38:5 ---------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_size = mutable.Stack[Long]()\n        val paren_stack_level_max_size_stack\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_size_stack_size =\n\
    \            mutable.Stack[Long]()\n        val paren_stack_level_max_size_stack_size_size\
    \ =\n            mutable.Stack[Long]()\n        val paren_stack_level_max_size_stack_size_level\
    \ =\n            mutable.Stack[Long]()\n        val paren_stack_level_max_size_stack_size_level_size\
    \ =\n            mutable.Stack[Long]()\n        val paren_stack_level_max_size_stack_size_level_max_size\
    \ =\n            mutable.Stack[Long]()\n        val paren_stack_level_max_size_stack_size_level_max_size_stack\
    \ =\n            mutable.Stack[Long]()\n        val paren_stack_level_max_size_stack_size_level_max_size_stack_size\
    \ =\n            mutable.Stack[Long]()\n        val paren_stack_level_max_size_stack_size_level_max_size_stack_size_level\
    \ =\n            mutable.Stack[Long]()\n        val paren_stack_level_max_size_stack_size_level_max_size_stack_size_level_size\
    \ =\n            mutable.Stack[Long]()\n        val paren_stack_level_max_size_stack_size_level_max_size_stack_size_level_max_size\
    \ =\n            mutable.Stack[Long]()\n        val paren_stack_level_max_size_stack_size_level_max_size_stack_size_level_max_size_stack\
    \ =\n            mutable.Stack[Long]()\n        val paren_stack_level_max_size_stack_size_level_max_size_stack_size_level_max_size_stack_size\
    \ =\n            mutable.Stack[Long]()\n        val paren_stack_level_max_size_stack_size_level_max_size_stack_size_level_max_size_stack_size_level\
    \ =\n            mutable.Stack[Long]()\n        val paren_stack_level_max_size_stack_size_level_max_size_stack_size_level_max_size_stack_size_level_size\
    \ =\n            mutable.Stack[Long]()\n        val paren_stack_level_max_size_stack_size_level_max_size_stack_size_level_max_size_stack_size_level_max_size\
    \ =\n            mutable.Stack[Long]()\n        val paren_stack_level_max_size_stack_size_level_max_size_stack\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj4xrvaps.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj4xrvaps.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpj4xrvaps.scala:11:31 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m = mutable.Stack[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpj4xrvaps.scala:12:32 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level\e[0m =\
    \ mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                                Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj4xrvaps.scala:13:37\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_level_size\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpj4xrvaps.scala:14:41 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level_max_size\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             "
  stdout: ''
  timestamp: 1659798340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_map = mutable.Map[String, List[Long]]()\n        paren_string.split(\"\
    \\\\s+\").foreach(x => {\n            val paren_str = x.trim()\n            val\
    \ paren_len = paren_str.length\n            if (paren_str.length == 0) return\n\
    \            if (paren_stack.nonEmpty) {\n                paren_stack.last.substring(paren_len\
    \ - 1).trim() match {\n                    case \"()\" => paren_stack_map.put(paren_stack.last,\
    \ List(0))\n                    case \"()()\" => paren_stack_map.put(paren_stack.last,\
    \ List(0))\n                    case \"(())\" => paren_stack_map.put(paren_stack.last,\
    \ List(0))\n                    case \"(()())\" => paren_stack_map.put(paren_stack.last,\
    \ List(0))\n                    case \"(())()\" => paren_stack_map.put(paren_stack.last,\
    \ List(0))\n                    case \"(()())()\" => paren_stack_map.put(paren_stack.last,\
    \ List(0))\n                    case \"(())()()\" => paren_stack_map.put(paren_stack.last,\
    \ List(0))\n                    case \"(())()()()\" => paren_stack_map.put(paren_stack.last,\
    \ List(0))\n                    case \"(())()()()()\" => paren_stack_map.put(paren_stack.last,\
    \ List(0))\n                    case \"(())()()()()()\" => paren_stack_map.put(paren_stack.last,\
    \ List(0))\n                    case \"(())()()()()()()\" => paren_stack_map.put(paren_stack.last,\
    \ List(0))\n                    case \"(())()()()()()()()\" => paren_stack_map.put(paren_stack.last,\
    \ List(0))\n                    case \"(())()()()()()()()()\" => paren_stack_map.put(paren_stack.last,\
    \ List(0))\n                    case \"(())()()()()()()()()()\" => paren_stack_map.put(paren_stack.last,\
    \ List(0))\n                    case \"(())()()()()()()()()()\" => paren_stack_map.put(paren_stack.last,\
    \ List(0))\n                    case \"(())()()()()()()()()()()\" => paren_stack_map.put(paren_stack.last,\
    \ List(0))\n                    case \"(())()()()()()()()()()()\" => paren_stack_map.put(paren_stack.last,\
    \ List(0))\n                    case \"(())()()()()()()()()()()()\" => paren_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg_agblsi.scala:44:0 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg_agblsi.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpg_agblsi.scala:11:30 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.Map[\e[35mString\e\
    [0m, \e[35mList\e[0m[\e[35mLong\e[0m]]()\n\e[31m\e[31m   |\e[0m              \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                              Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg_agblsi.scala:15:39\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (paren_str.length\
    \ == \e[31m0\e[0m) \e[33mreturn\e[0m\n\e[31m\e[31m   |\e[0m                  \
    \                     ^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \            Found:    Unit\n\e[31m   |\e[0m                                 \
    \      Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpg_agblsi.scala:35:57 ------------------------\e[0m\e[0m\n\e[31m35 |\e\
    [0m                    \e[33mcase\e[0m \e[31m\"(())()()()()()()()()()()()\"\e\
    [0m => paren_\n\e[31m\e[31m   |\e[0m                                         \
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \                       Not found: paren_\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmpg_agblsi.scala:37:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m37 |\e[0m "
  stdout: ''
  timestamp: 1659798341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_map = mutable.Map[Long, Long]()\n        val paren_stack_map_keys\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values = mutable.Set[Long]()\n\
    \        val paren_stack_map_values_set = mutable.Set[Long]()\n        val paren_stack_map_values_set_size\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_set_size = mutable.Set[Long]()\n\
    \        val paren_stack_map_values_set_size = mutable.Set[Long]()\n        val\
    \ paren_stack_map_values_set_size = mutable.Set[Long]()\n        val paren_stack_map_values_set_size\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_set_size = mutable.Set[Long]()\n\
    \        val paren_stack_map_values_set_size = mutable.Set[Long]()\n        val\
    \ paren_stack_map_values_set_size = mutable.Set[Long]()\n        val paren_stack_map_values_set_size\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_set_size = mutable.Set[Long]()\n\
    \        val paren_stack_map_values_set_size = mutable.Set[Long]()\n        val\
    \ paren_stack_map_values_set_size = mutable.Set[Long]()\n        val paren_stack_map_values_set_size\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_set_size = mutable.Set[Long]()\n\
    \        val paren_stack_map_values_set_size = mutable.Set[Long]()\n        val\
    \ paren_stack_map_values_set_size = mutable.Set[Long]()\n        val paren_stack_map_values_set_size\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_set_size = mutable.Set[Long]()\n\
    \        val paren_stack_map_values_set_size = mutable.Set[Long]()\n        val\
    \ paren_stack_map_values_set_size = mutable.Set[Long]()\n        val paren_stack_map_values_set_size\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_set_size = mutable.Set[Long]()\n\
    \        val paren_stack_map_values_set_size = mutable.Set[Long]()\n        val\
    \ paren_stack_map_values_set_size = mutable.Set[Long]()\n        val paren_stack_map_values_set_size\
    \ = mutable.Set[Long]()\n        val paren_stack_map_values_set_size = mutable.Set\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmihfwsaj.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_values_set_size\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_values_set_size is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_map_values_set_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmihfwsaj.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_map_values_set_size\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_values_set_size is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_map_values_set_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmihfwsaj.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_map_values_set_size\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_values_set_size is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_map_values_set_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmihfwsaj.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_map_values_set_size\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_values_set_size is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_map_values_set_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNot"
  stdout: ''
  timestamp: 1659798341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplp1miol2.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplp1miol2.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_max_depth_len\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_len is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_max_depth_len\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplp1miol2.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth_len\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_len is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_max_depth_len\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplp1miol2.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth_len\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_len is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_max_depth_len\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplp1miol2.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth_len\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_d"
  stdout: ''
  timestamp: 1659798279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val max_level\
    \ = 0\n        var level = 0\n        var paren_count = 0\n        var paren_level\
    \ = 0\n        var paren_level_array = new Array[Long](paren_array_size)\n   \
    \     var paren_level_array_index = 0\n        var paren_level_array_size = 0\n\
    \        var paren_level_array_index = 0\n        var paren_level_array_size =\
    \ 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp594t8iyj.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mparen_level_array_index\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_level_array_index is already defined as \e[33mvariable\e\
    [0m \e[35mparen_level_array_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp594t8iyj.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mparen_level_array_size\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_level_array_size is already defined as \e[33mvariable\e\
    [0m \e[35mparen_level_array_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp594t8iyj.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mparen_level_array_index\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_level_array_index is already defined as \e[33mvariable\e\
    [0m \e[35mparen_level_array_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp594t8iyj.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mparen_level_array_size\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_level_array_size is already defined as \e[33mvariable\e\
    [0m \e[35mparen_level_array_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp594t8iyj.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e[36mparen_level_array_index\e\
    [0m = \e[31m0\e[0m\n\e"
  stdout: ''
  timestamp: 1659798342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_size = mutable.Stack[Long]()\n  \
    \      val paren_stack_max_depth_pos_depth_depth = mutable.Stack[Long]()\n   \
    \     val paren_stack_max_depth_pos_depth_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8dt_5c1b.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8dt_5c1b.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_max_depth_pos_depth_depth_depth_depth_depth_size\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_pos_depth_depth_depth_depth_depth_size\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_max_depth_pos_depth_depth_depth_depth_depth_size\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8dt_5c1b.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth_pos_depth_depth_depth_depth_depth_depth\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_pos_depth_depth_depth_depth_depth_depth\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_max_depth_pos_depth_depth_depth_depth_depth_depth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8dt_5c1b.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_size\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_pos_depth_depth_depth_depth_depth_depth_depth_size\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_max_depth_pos_depth_depth_"
  stdout: ''
  timestamp: 1659798303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_array = paren_string.split(\"\
    \ \").toList\n        val paren_array_size = paren_array.length\n        val paren_array_max_size\
    \ = paren_array_size - 1\n        val paren_array_max_size_array = paren_array.take(paren_array_max_size).toList\n\
    \        val paren_array_max_size_array_size = paren_array_max_size_array.length\n\
    \        val paren_array_max_size_array_max_size = paren_array_max_size_array_size\
    \ - 1\n        val paren_array_max_size_array_max_size_array = paren_array_max_size_array_array.take(paren_array_max_size_array_max_size).toList\n\
    \        val paren_array_max_size_array_max_size_array_size = paren_array_max_size_array_max_size_array.length\n\
    \        val paren_array_max_size_array_max_size_array_max_size = paren_array_max_size_array_max_size_array_max_size\
    \ - 1\n        val paren_array_max_size_array_max_size_array_max_size_array =\
    \ paren_array_max_size_array_max_size_array_max_size_array.take(paren_array_max_size_array_max_size_array_max_size).toList\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_size = paren_array_max_size_array_max_size_array_max_size_array_size\
    \ - 1\n        val paren_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size - 1\n  \
    \      val paren_array_max_size_array_max_size_array_max_size_array_max_size_array\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array.take(paren_array_max_size_array_max_size_array_max_size_array_max_size).toList\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_size\
    \ - 1\n        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ - 1\n        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ - 1\n        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ - 1\n        val paren_array_max_size_array_max_size_array_max_size_array_max_size_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6yro4cty.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6yro4cty.scala:16:56\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_array_max_size_array_max_size_array\e[0m = paren_array_max_size_array_array.take(paren_array_max_size_array_max_size).toList\n\
    \e[31m\e[31m   |\e[0m                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: paren_array_max_size_array_array\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6yro4cty.scala:18:65\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_array_max_size_array_max_size_array_max_size\e[0m = paren_array_max_size_array_max_size_array_max_size\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                           ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m\
    \ \e[35mparen_array_max_size_array_max_size_array_max_size\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6yro4cty.scala:19:71\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_array_max_size_array_max_size_array_max_size_array\e[0m = paren_array_max_size_array_max_size_array_max_size_array.take(paren_array_max_size_array_max_size_array_max_size).toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mparen_array_max_size_array_max_size_array_max_size_array\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6yro4cty.scala:20:76\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mp"
  stdout: ''
  timestamp: 1659798342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_len = mutable.Stack[Long]()\n        val paren_stack_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len = mutable.Stack[Long]()\n\
    \        val paren_stack_len_len_len_len = mutable.Stack[Long]()\n        val\
    \ paren_stack_len_len_len_len_len = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprsuksar4.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprsuksar4.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmprsuksar4.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprsuksar4.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not fou"
  stdout: ''
  timestamp: 1659798306
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_pos = mutable.Stack[Long]()\n   \
    \     val paren_stack_max_depth_pos_depth_pos_size = mutable.Stack[Long]()\n \
    \       val paren_stack_max_depth_pos_depth_pos_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_pos_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_pos_depth_pos_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_depth_pos_depth\
    \ = mutable.Stack[\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_s77b9j4.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp_s77b9j4.scala:10:26 ------------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_s77b9j4.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m =\
    \ mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_s77b9j4.scala:12:35\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_max_size\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                   ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_s77b9j4.scala:13:36 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_s77b9j4.scala:14:40 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_max_depth_pos\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659798342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_chars = paren_string.split(\"\"\
    \"[\\(\\)]\"\"\").toList\n        val paren_chars_size = paren_chars.size\n  \
    \      val paren_chars_map = paren_chars.map(x => x.toLong).toMap\n        val\
    \ paren_chars_map_size = paren_chars_map.size\n        val paren_chars_map_keys\
    \ = paren_chars_map.keys\n        val paren_chars_map_values = paren_chars_map.values\n\
    \        val paren_chars_map_values_size = paren_chars_map_values.size\n     \
    \   val paren_chars_map_values_keys = paren_chars_map_values.keys\n        val\
    \ paren_chars_map_values_values_size = paren_chars_map_values_values.size\n  \
    \      val paren_chars_map_values_values_keys = paren_chars_map_values_values.keys\n\
    \        val paren_chars_map_values_values_values_size = paren_chars_map_values_values_values.size\n\
    \        val paren_chars_map_values_values_values_keys = paren_chars_map_values_values_values.keys\n\
    \        val paren_chars_map_values_values_values_values_size = paren_chars_map_values_values_values_values.size\n\
    \        val paren_chars_map_values_values_values_values_keys = paren_chars_map_values_values_values_values.keys\n\
    \        val paren_chars_map_values_values_values_values_values_size = paren_chars_map_values_values_values_values_values.size\n\
    \        val paren_chars_map_values_values_values_values_values_keys = paren_chars_map_values_values_values_values_values.keys\n\
    \        val paren_chars_map_values_values_values_values_values_values_size =\
    \ paren_chars_map_values_values_values_values_values_values.size\n        val\
    \ paren_chars_map_values_values_values_values_values_values_keys = paren_chars_map_values_values_values_values_values_values.keys\n\
    \        val paren_chars_map_values_values_values_values_values_values_values_size\
    \ = paren_chars_map_values_values_values_values_values_values_values.size\n  \
    \      val paren_chars_map_values_values_values_values_values_values_values_keys\
    \ = paren_chars_map_values_values_values_values_values_values_values.keys\n  \
    \      val paren_chars_map_values_values_values_values_values_values_values_values_size\
    \ = paren_chars_map_values_values_values_values_values_values_values_values.size\n\
    \        val paren_chars_map_values_values_values_values_values_values_values_values_keys\
    \ = paren_chars_map_values_values_values_values_values_values_values_values.keys\n\
    \        val paren_chars_map_values_values_values_values_values_values_values_values_values_size\
    \ = paren_chars_map_values_values_values_values_values_values_values_values_values.size\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpywezz21f.scala:12:66 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_map\e[0m = paren_chars.map(\e\
    [36mx\e[0m => x.toLong).toMap\n\e[31m\e[31m   |\e[0m                         \
    \                                         ^\e[0m\n\e[31m   |\e[0m            \
    \                           Cannot prove that Long <:< (K, V)\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m                                       where:    K is a type variable\n\
    \e[31m   |\e[0m                                                 V is a type variable\n\
    \e[31m   |\e[0m                                       .\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpywezz21f.scala:18:49 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_map_values_values_size\e\
    [0m = paren_chars_map_values_values.size\n\e[31m\e[31m   |\e[0m              \
    \                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: paren_chars_map_values_values\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpywezz21f.scala:19:49\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_chars_map_values_values_keys\e[0m = paren_chars_map_values_values.keys\n\
    \e[31m\e[31m   |\e[0m                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Not found: paren_chars_map_values_values\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpywezz21f.scala:20:56\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_chars_map_values_values_values_size\e[0m = paren_chars_map_values_values_values.size\n\
    \e[31m\e[31m   |\e[0m                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: paren_chars_map_values_values_values\n\
    \e[31m   |\e[0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1659798342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_array = paren_string.split(\"\
    \ \")\n        val max_level = 0\n        val max_levels = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 0 until paren_array.length) {\n            val levels = paren_array(i).count('(')\
    \ - paren_array(i).count(')')\n            if (levels > max_level) {\n       \
    \         max_level = levels\n                max_levels += levels\n         \
    \   }\n        }\n        max_levels.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpca2gjkqr.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmax_levels\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpca2gjkqr.scala:14:46 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mlevels\e[0m = paren_array(i).count(\e\
    [31m'('\e[0m) - paren_array(i).count(\e[31m')'\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                                            ^^^\e[0m\n\e[31m   |\e[0m       \
    \                                       Found:    (\e[31m'('\e[0m : Char)\n\e\
    [31m   |\e[0m                                              Required: Char => Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpca2gjkqr.scala:14:74\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e\
    [36mlevels\e[0m = paren_array(i).count(\e[31m'('\e[0m) - paren_array(i).count(\e\
    [31m')'\e[0m)\n\e[31m\e[31m   |\e[0m                                         \
    \                                 ^^^\e[0m\n\e[31m   |\e[0m                  \
    \                             Found:    (\e[31m')'\e[0m : Char)\n\e[31m   |\e\
    [0m                                               Required: Char => Boolean\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpca2gjkqr.scala:16:26 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                max_level = levels\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val max_level\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_top = mutable.Stack[String]()\n        val paren_stack_bottom\
    \ = mutable.Stack[String]()\n        val paren_stack_top = paren_stack_bottom.push(paren_string)\n\
    \        val paren_stack_bottom = paren_stack_top.reverse\n        val paren_stack_top\
    \ = paren_stack_top.reverse\n        val paren_stack_bottom = paren_stack_bottom.reverse\n\
    \        val paren_stack_top = paren_stack_top.reverse\n        val paren_stack_bottom\
    \ = paren_stack_bottom.reverse\n        val paren_stack_top = paren_stack_top.reverse\n\
    \        val paren_stack_bottom = paren_stack_bottom.reverse\n        val paren_stack_top\
    \ = paren_stack_top.reverse\n        val paren_stack_bottom = paren_stack_bottom.reverse\n\
    \        val paren_stack_top = paren_stack_top.reverse\n        val paren_stack_bottom\
    \ = paren_stack_bottom.reverse\n        val paren_stack_top = paren_stack_top.reverse\n\
    \        val paren_stack_bottom = paren_stack_bottom.reverse\n        val paren_stack_top\
    \ = paren_stack_top.reverse\n        val paren_stack_bottom = paren_stack_bottom.reverse\n\
    \        val paren_stack_top = paren_stack_top.reverse\n        val paren_stack_bottom\
    \ = paren_stack_bottom.reverse\n        val paren_stack_top = paren_stack_top.reverse\n\
    \        val paren_stack_bottom = paren_stack_bottom.reverse\n        val paren_stack_top\
    \ = paren_stack_top.reverse\n        val paren_stack_bottom = paren_stack_bottom.reverse\n\
    \        val paren_stack_top = paren_stack_top.reverse\n        val paren_stack_bottom\
    \ = paren_stack_bottom.reverse\n        val paren_stack_top = paren_stack_top.reverse\n\
    \        val paren_stack_bottom = paren_stack_bottom.reverse\n        val paren_stack_top\
    \ = paren_stack_top.reverse\n        val paren_stack_bottom = paren_stack_bottom.reverse\n\
    \        val paren_stack_top = paren_stack_top.reverse\n        val paren_stack_bottom\
    \ = paren_stack_bottom.reverse\n        val paren_stack_top = paren_stack_top.reverse\n\
    \        val paren_stack_bottom = paren_stack_bottom.reverse\n        val paren_stack_top\
    \ = paren_stack_top.reverse\n        val paren_stack_bottom = paren_stack_bottom.reverse\n\
    \        val paren_stack_top = paren_stack_top.reverse\n        val paren_stack_bottom\
    \ = paren_stack_bottom.\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoxt539vw.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpoxt539vw.scala:13:12 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top\e[0m = paren_stack_bottom.push(paren_string)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top is already defined as \e[33mvalue\e[0m \e\
    [35mparen_stack_top\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpoxt539vw.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_bottom\e[0m\
    \ = paren_stack_top.reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_bottom is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_bottom\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpoxt539vw.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top\e[0m = paren_stack_top.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mparen_stack_top is already defined as \e[33mvalue\e[0m \e[35mparen_stack_top\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoxt539vw.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_bottom\e[0m = paren_stack_bottom.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_bottom is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_bottom\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote"
  stdout: ''
  timestamp: 1659798343
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_map = mutable.Map[Long, Long]()\n        val paren_stack_map_size\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_size_max = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_size_max_size = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_size_max_size_value = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_size_max_size_value_size = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_size_max_size_value_size_value = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_size_max_size_value_size_value_size = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_size_max_size_value_size_value_size_max\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_size_max_size_value_size_value_size_max_size\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_size_max_size_value_size_value_size_max_size_value\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_size_max_size_value_size_value_size_max_size_value_size\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_size_max_size_value_size_value_size_max_size_value_size_value\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_size_max_size_value_size_value_size_max_size_value_size_value_size\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_size_max_size_value_size_value_size_max_size_value_size_value_size_max\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_size_max_size_value_size_value_size_max_size_value_size_value_size_max_size\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_size_max_size_value_size_value_size_max_size_value_size_value_size_max_size_value\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_size_max_size_value_size_value_size_max_size_value_size_value_size_max_size_value_size\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_size_max_size_value_size_value_size_max_size_value_size_value_size_max_size_value_size_value\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_size_max_size_value_size_value_size_max_size_value_size_value_size_max_size_value_size_value_size\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_size_max_\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp62fxqlh4.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp62fxqlh4.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp62fxqlh4.scala:11:30 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp62fxqlh4.scala:12:35 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_size\e[0m\
    \ = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                                ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp62fxqlh4.scala:13:39 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_size_max\e[0m\
    \ = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                                    ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp62fxqlh4.scala:14:44 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_size_max_size\e\
    [0m = mutable.Ma"
  stdout: ''
  timestamp: 1659798342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    def parseNestedParens(paren_string\
    \ : String) : List[Long] = {\n        val paren_groups = paren_string.split(\"\
    \ \")\n        val max_level = 0\n        val max_levels = mutable.ArrayBuffer.empty[Long]\n\
    \        for (paren_group <- paren_groups) {\n            val paren_group_levels\
    \ = paren_group.split(\"\\\\(\").map(x => x.split(\"\\\\)\").length)\n       \
    \     if (paren_group_levels.max > max_level) {\n                max_level = paren_group_levels.max\n\
    \                max_levels += paren_group_levels.max\n            }\n       \
    \ }\n        max_levels\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfrsvyvcr.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmax_levels\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpfrsvyvcr.scala:16:26 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                max_level = paren_group_levels.max\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                Reassignment to val max_level\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659798342
