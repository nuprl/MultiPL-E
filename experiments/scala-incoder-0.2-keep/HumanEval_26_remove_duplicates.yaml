name: HumanEval_26_remove_duplicates
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // From a list of integers, remove all elements that occur more than once.\n\
  \    // Keep order of elements left the same as in the input.\n    // >>> remove_duplicates([1,\
  \ 2, 3, 2, 4])\n    // [1, 3, 4]\n    def removeDuplicates(numbers : List[Long])\
  \ : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(removeDuplicates((List[Long]())).equals((List[Long]())));\n\
  \    assert(removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(removeDuplicates((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
  \ 4l.toLong, 5l.toLong))));\n    }\n\n}\n"
completions: ["        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            } else {\n                seen += n\n            }\n        }\n \
    \       numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { number =>\n            if (seen.contains(number)) {\n                numbers.remove(number)\n\
    \            } else {\n                seen += number\n            }\n       \
    \ }\n        numbers", "        val result = numbers.foldLeft(List[Long]())((acc,\
    \ x) => {\n            if (acc.contains(x)) {\n                acc\n         \
    \   } else {\n                acc :+ x\n            }\n        })\n        result",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n  \
    \          if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val counts = numbers.groupBy(x => x).mapValues(_.size)\n\
    \        val result = numbers.filter(x => counts(x) > 1)\n        counts.toList.sortBy(_._1).reverse.map(x\
    \ => x._2)", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(n)\n\
    \            } else {\n                seen += n\n            }\n        }\n \
    \       numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            } else {\n                seen += n\n            }\n        }\n \
    \       numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(n)\n\
    \            } else {\n                seen += n\n            }\n        }\n \
    \       numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.foreach { number =>\n      \
    \      if (seen.contains(number)) {\n                numbers.remove(number)\n\
    \            }\n            else {\n                seen += number\n         \
    \   }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.foreach(n => if (seen.contains(n))\
    \ numbers.remove(n) else seen.add(n))\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach(n => if (seen.contains(n)) numbers.remove(n) else seen\
    \ += n)\n        numbers", "        val seen = mutable.HashSet[Long]()\n     \
    \   numbers.foreach { number =>\n            if (seen.contains(number)) {\n  \
    \              numbers.remove(number)\n            } else {\n                seen\
    \ += number\n            }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach(n => if (seen.contains(n)) numbers.remove(n) else seen\
    \ += n)\n        numbers", "        val seen = mutable.HashSet[Long]()\n     \
    \   numbers.foreach(n => if (seen.contains(n)) numbers.remove(numbers.indexOf(n)))\n\
    \        numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.filter(x\
    \ => !seen.contains(x)).sortWith(_ < _)", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n           \
    \ if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.foreach { number =>\n      \
    \      if (seen.contains(number)) {\n                numbers.remove(number)\n\
    \            } else {\n                seen += number\n            }\n       \
    \ }\n        numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.foreach(n => {\n           \
    \ if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        })\n        numbers", "        val counts = numbers.groupBy(x => x).mapValues(_.size)\n\
    \        val toRemove = counts.map(_._2).filter(_ > 1)\n        numbers.filterNot(x\
    \ => toRemove.contains(x))", "        val seen = mutable.HashSet[Long]()\n   \
    \     numbers.foreach { n =>\n            if (seen.contains(n)) {\n          \
    \      numbers.remove(numbers.indexOf(n))\n            } else {\n            \
    \    seen += n\n            }\n        }\n        numbers", "        val seen\
    \ = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n            if (seen.contains(n))\
    \ {\n                numbers -= n\n            } else {\n                seen\
    \ += n\n            }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach(x => if (seen.contains(x)) numbers.remove(x))\n     \
    \   numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { n =>\n            if (seen.contains(n)) {\n         \
    \       numbers.remove(n)\n            } else {\n                seen += n\n \
    \           }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(numbers.indexOf(n))\n            } else {\n         \
    \       seen += n\n            }\n        }\n        numbers", "        val seen\
    \ = mutable.HashSet[Long]()\n        numbers.filter(x => !seen.contains(x)).sortBy(x\
    \ => x).reverse", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n           \
    \ if (seen.contains(n)) {\n                numbers.remove(n)\n            } else\
    \ {\n                seen += n\n            }\n        }\n        numbers", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.foreach { number =>\n\
    \            if (seen.contains(number)) {\n                numbers.remove(number)\n\
    \            }\n            else {\n                seen += number\n         \
    \   }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(n)\n            } else {\n                seen += n\n\
    \            }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers -= n\n            }\n            else {\n                seen\
    \ += n\n            }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(numbers.indexOf(n))\n            }\n            else\
    \ {\n                seen += n\n            }\n        }\n        numbers", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.foreach { number =>\n\
    \            if (seen.contains(number)) numbers.remove(number)\n            else\
    \ seen.add(number)\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(numbers.indexOf(n))\n            } else {\n         \
    \       seen += n\n            }\n        }\n        numbers", "        val seen\
    \ = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n            if (seen.contains(n))\
    \ {\n                numbers.remove(numbers.indexOf(n))\n            }\n     \
    \       else {\n                seen += n\n            }\n        }\n        numbers",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n  \
    \          if (seen.contains(n)) {\n                numbers -= n\n           \
    \ }\n            else {\n                seen += n\n            }\n        }\n\
    \        numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { number =>\n            if (seen.contains(number)) {\n                numbers.remove(number)\n\
    \            } else {\n                seen += number\n            }\n       \
    \ }\n        numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(n)\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { n =>\n            if (seen.contains(n)) {\n         \
    \       numbers.remove(numbers.indexOf(n))\n            }\n            else {\n\
    \                seen += n\n            }\n        }\n        numbers", "    \
    \    val seen = mutable.HashSet[Long]()\n        numbers.foreach { number =>\n\
    \            if (seen.contains(number)) numbers.remove(number)\n            else\
    \ seen.add(number)\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(n)\n            } else {\n                seen += n\n\
    \            }\n        }\n        numbers.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { number =>\n            if (seen.contains(number)) {\n\
    \                numbers.remove(number)\n            }\n            else {\n \
    \               seen += number\n            }\n        }\n        numbers", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n \
    \           if (seen.contains(n)) {\n                numbers.remove(n)\n     \
    \       } else {\n                seen += n\n            }\n        }\n      \
    \  numbers.toList", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach(n\
    \ => {\n            if (seen.contains(n)) {\n                numbers.remove(n)\n\
    \            } else {\n                seen += n\n            }\n        })\n\
    \        numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers -= n\n\
    \            } else {\n                seen += n\n            }\n        }\n \
    \       numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(n)\n\
    \            } else {\n                seen += n\n            }\n        }\n \
    \       numbers.toList", "        val seen = mutable.HashSet[Long]()\n       \
    \ numbers.foreach(x => if (seen.add(x)) x else ())\n        numbers.toList", " \
    \       val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(number\
    \ => if (result.contains(number)) else result += number)\n        result.toList",
  "        val result = numbers.foldLeft(List[Long]())((acc, x) => {\n           \
    \ if (acc.contains(x)) {\n                acc\n            } else {\n        \
    \        acc :+ x\n            }\n        })\n        result", "        val seen\
    \ = mutable.HashSet[Long]()\n        numbers.foreach(n => if (seen.contains(n))\
    \ numbers.remove(n) else seen += n)\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { number =>\n            if (seen.contains(number)) {\n\
    \                numbers -= number\n            } else {\n                seen\
    \ += number\n            }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach(n => if (seen.contains(n)) numbers.remove(n) else seen.add(n))\n\
    \        numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach(n\
    \ => if (seen.contains(n)) numbers.remove(n) else seen += n)\n        numbers",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n  \
    \          if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { n =>\n            if (seen.contains(n)) {\n         \
    \       numbers.remove(numbers.indexOf(n))\n            } else {\n           \
    \     seen += n\n            }\n        }\n        numbers", "        val seen\
    \ = mutable.HashSet[Long]()\n        numbers.filter(x => !seen.contains(x)).sortBy(x\
    \ => x).reverse", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(n)\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach(n => if (seen.contains(n)) numbers.remove(numbers.indexOf(n)))\n\
    \        numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { number =>\n            if (seen.contains(number)) {\n                numbers.remove(number)\n\
    \            } else {\n                seen += number\n            }\n       \
    \ }\n        numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(n)\n\
    \            } else {\n                seen += n\n            }\n        }\n \
    \       numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(n)\n\
    \            } else {\n                seen += n\n            }\n        }\n \
    \       numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { n =>\n            if (seen.contains(n)) {\n         \
    \       numbers.remove(numbers.indexOf(n))\n            }\n            else {\n\
    \                seen += n\n            }\n        }\n        numbers", "    \
    \    val seen = mutable.HashSet[Long]()\n        numbers.foreach { number =>\n\
    \            if (seen.contains(number)) numbers.remove(number)\n            else\
    \ seen.add(number)\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(numbers.indexOf(n))\n            }\n            else\
    \ {\n                seen += n\n            }\n        }\n        numbers", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n \
    \           if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ result = numbers.foldLeft(List[Long]())((acc, x) => {\n            if (acc.contains(x))\
    \ {\n                acc\n            } else {\n                acc :+ x\n   \
    \         }\n        })\n        result", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { number =>\n            if (seen.contains(number)) {\n\
    \                numbers.remove(number)\n            } else {\n              \
    \  seen += number\n            }\n        }\n        numbers", "        val seen\
    \ = mutable.HashSet[Long]()\n        numbers.foreach { number =>\n           \
    \ if (seen.contains(number)) {\n                numbers.remove(number)\n     \
    \       } else {\n                seen += number\n            }\n        }\n \
    \       numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.foreach(x => if (seen.contains(x))\
    \ numbers.remove(x))\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(numbers.indexOf(n))\n            }\n            else\
    \ {\n                seen += n\n            }\n        }\n        numbers", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.foreach { number =>\n\
    \            if (seen.contains(number)) {\n                numbers.remove(number)\n\
    \            } else {\n                seen += number\n            }\n       \
    \ }\n        numbers.toList", "        val counts = numbers.groupBy(x => x).mapValues(_.size)\n\
    \        val result = counts.filter(_._2 > 1).map(_._1)\n        result", "  \
    \      val seen = mutable.HashSet[Long]()\n        numbers.foreach(n => {\n  \
    \          if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        })\n        numbers", "        val seen = mutable.HashSet[Long]()\n \
    \       numbers.foreach { n =>\n            if (seen.contains(n)) {\n        \
    \        numbers.remove(n)\n            } else {\n                seen += n\n\
    \            }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n           \
    \ if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { number =>\n            if (seen.contains(number)) {\n\
    \                numbers.remove(number)\n            }\n            else {\n \
    \               seen += number\n            }\n        }\n        numbers", " \
    \       val result = numbers.groupBy(x => x).mapValues(_.size)\n        val filtered\
    \ = result.filter(_._2 > 1).map(_._1)\n        filtered.toList", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.filter(x => !seen.contains(x)).sortBy(x\
    \ => x).reverse", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n           \
    \ if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { n =>\n            if (seen.contains(n)) {\n         \
    \       numbers.remove(numbers.indexOf(n))\n            }\n            else {\n\
    \                seen += n\n            }\n        }\n        numbers", "    \
    \    val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n    \
    \        if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { n =>\n            if (seen.contains(n)) {\n         \
    \       numbers.remove(numbers.indexOf(n))\n            }\n            else {\n\
    \                seen += n\n            }\n        }\n        numbers", "    \
    \    val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n    \
    \        if (seen.contains(n)) {\n                numbers -= n\n            }\n\
    \            else {\n                seen += n\n            }\n        }\n   \
    \     numbers", "        val result = new mutable.ListBuffer[Long]()\n       \
    \ numbers.foreach { number =>\n            if (result.contains(number)) {\n  \
    \              result -= number\n            } else {\n                result\
    \ += number\n            }\n        }\n        result.toList", "        val seen\
    \ = mutable.HashSet[Long]()\n        numbers.filter(x => !seen.add(x))", "   \
    \     val seen = mutable.HashSet[Long]()\n        numbers.foreach { number =>\n\
    \            if (seen.contains(number)) numbers.remove(number)\n            else\
    \ seen.add(number)\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers -= n\n            } else {\n                seen += n\n    \
    \        }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(numbers.indexOf(n))\n            }\n            else\
    \ {\n                seen += n\n            }\n        }\n        numbers", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.foreach(n => if (seen.contains(n))\
    \ numbers.remove(n) else seen += n)\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n           \
    \ if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n           \
    \ if (seen.contains(n)) {\n                numbers.remove(n)\n            } else\
    \ {\n                seen += n\n            }\n        }\n        numbers", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.foreach { number =>\n\
    \            if (seen.contains(number)) {\n                numbers.remove(number)\n\
    \            }\n            else {\n                seen += number\n         \
    \   }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(numbers.indexOf(n))\n            }\n            else\
    \ {\n                seen += n\n            }\n        }\n        numbers", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n \
    \           if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { n =>\n            if (seen.contains(n)) {\n         \
    \       numbers.remove(numbers.indexOf(n))\n            }\n            else {\n\
    \                seen += n\n            }\n        }\n        numbers", "    \
    \    val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n    \
    \        if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { n =>\n            if (seen.contains(n)) {\n         \
    \       numbers -= n\n            }\n            else {\n                seen\
    \ += n\n            }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach(x => if (seen.add(x)) x else ())\n        numbers.toList",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach { number =>\n\
    \            if (seen.contains(number)) {\n                numbers.remove(number)\n\
    \            }\n            else {\n                seen += number\n         \
    \   }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(numbers.indexOf(n))\n            }\n            else\
    \ {\n                seen += n\n            }\n        }\n        numbers", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n \
    \           if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach(x => if (seen.add(x)) x else ())\n        numbers.toList",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n  \
    \          if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { number =>\n            if (seen.contains(number)) {\n\
    \                numbers.remove(number)\n            }\n            else {\n \
    \               seen += number\n            }\n        }\n        numbers", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.foreach { number =>\n\
    \            if (seen.contains(number)) numbers.remove(number)\n            else\
    \ seen.add(number)\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(numbers.indexOf(n))\n            }\n            else\
    \ {\n                seen += n\n            }\n        }\n        numbers", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.foreach { number =>\n\
    \            if (seen.contains(number)) {\n                numbers.remove(number)\n\
    \            }\n            else {\n                seen += number\n         \
    \   }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { number =>\n            if (seen.contains(number)) {\n\
    \                numbers.remove(number)\n            }\n            else {\n \
    \               seen += number\n            }\n        }\n        numbers", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.filter(x => !seen.contains(x)).sortWith(_\
    \ < _).reverse", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(n)\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { n =>\n            if (seen.contains(n)) {\n         \
    \       numbers.remove(n)\n            } else {\n                seen += n\n \
    \           }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach(n => if (seen.contains(n)) numbers.remove(numbers.indexOf(n))\n\
    \        else seen.add(n))\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(numbers.indexOf(n))\n            }\n            else\
    \ {\n                seen += n\n            }\n        }\n        numbers", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n \
    \           if (seen.contains(n)) {\n                numbers -= n\n          \
    \  } else {\n                seen += n\n            }\n        }\n        numbers",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n  \
    \          if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val result = numbers.groupBy(x => x).mapValues(_.size)\n\
    \        val result2 = result.filter(_._2 > 1).map(_._1)\n        result2.toList",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n  \
    \          if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { n =>\n            if (seen.contains(n)) {\n         \
    \       numbers.remove(numbers.indexOf(n))\n            }\n            else {\n\
    \                seen += n\n            }\n        }\n        numbers", "    \
    \    val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n    \
    \        if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { n =>\n            if (seen.contains(n)) {\n         \
    \       numbers.remove(numbers.indexOf(n))\n            }\n            else {\n\
    \                seen += n\n            }\n        }\n        numbers", "    \
    \    val seen = mutable.HashSet[Long]()\n        numbers.filter(x => !seen.contains(x)).sortWith(_\
    \ < _).reverse", "        val result = new mutable.HashSet[Long]()\n        numbers.foreach(x\
    \ => if (!result.contains(x)) result += x)\n        numbers.toList", "       \
    \ val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n       \
    \     if (seen.contains(n)) {\n                numbers.remove(n)\n           \
    \ }\n            else {\n                seen += n\n            }\n        }\n\
    \        numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.filter(x\
    \ => !seen.add(x))", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { n =>\n            if (seen.contains(n)) {\n         \
    \       numbers.remove(numbers.indexOf(n))\n            }\n            else {\n\
    \                seen += n\n            }\n        }\n        numbers", "    \
    \    val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n    \
    \        if (seen.contains(n)) {\n                numbers.remove(n)\n        \
    \    } else {\n                seen += n\n            }\n        }\n        numbers.toList",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n  \
    \          if (seen.contains(n)) {\n                numbers.remove(n)\n      \
    \      }\n            else {\n                seen += n\n            }\n     \
    \   }\n        numbers", "        val counts = numbers.groupBy(x => x).mapValues(_.size)\n\
    \        val result = counts.filter(_._2 > 1).map(_._1)\n        result", "  \
    \      val seen = mutable.HashSet[Long]()\n        numbers.foreach(n => if (seen.contains(n))\
    \ numbers.remove(n) else seen += n)\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach(x => if (seen.contains(x)) numbers.remove(x))\n     \
    \   numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach(n\
    \ => if (seen.contains(n)) numbers.remove(n) else seen.add(n))\n        numbers",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach { number =>\n\
    \            if (seen.contains(number)) numbers.remove(number)\n            else\
    \ seen.add(number)\n        }\n        numbers", "        val counts = numbers.groupBy(x\
    \ => x).mapValues(_.size)\n        val result = counts.mapValues(x => if (x >\
    \ 1) x else 1)\n        val result = counts.mapValues(x => if (x > 1) x else 1)\n\
    \        val result = counts.mapValues(x => if (x > 1) x else 1)\n        val\
    \ result = counts.mapValues(x => if (x > 1) x else 1)\n        val result = counts.mapValues(x\
    \ => if (x > 1) x else 1)\n        val result = counts.mapValues(x => if (x >\
    \ 1) x else 1)\n        val result = counts.mapValues(x => if (x > 1) x else 1)\n\
    \        val result = counts.mapValues(x => if (x > 1) x else 1)\n        val\
    \ result = counts.mapValues(x => if (x > 1) x else 1)\n        val result = counts.mapValues(x\
    \ => if (x > 1) x else 1)\n        val result = counts.mapValues(x => if (x >\
    \ 1) x else 1)\n        val result = counts.mapValues(x => if (x > 1) x else 1)\n\
    \        val result = counts.mapValues(x => if (x > 1) x else 1)\n        val\
    \ result = counts.mapValues(x => if (x > 1) x else 1)\n        val result = counts.mapValues(x\
    \ => if (x > 1) x else 1)\n        val result = counts.mapValues(x => if (x >\
    \ 1) x else 1)\n        val result = counts.mapValues(x => if (x > 1) x else 1)\n\
    \        val result = counts.mapValues(x => if (x > 1) x else 1)\n        val\
    \ result = counts.mapValues(x => if (x > 1) x else 1)\n        val result = counts.mapValues(x\
    \ => if (x > 1) x else 1)\n        val result = counts.mapValues(x => if (x >\
    \ 1) x else 1)\n        val result = counts.mapValues(x => if (x > 1) x else 1)\n\
    \        val result = counts.mapValues(x => if (x > 1) x else 1)\n        val\
    \ result = counts.mapValues(x => if (x > 1) x else 1)\n        val result = counts.mapValues(x\
    \ => if (x > 1) x else 1)\n        val result = counts.mapValues(x => if (x >\
    \ 1) x else 1)\n        val result = counts.mapValues(x => if (x > 1) x else 1)\n\
    \        val result = counts.mapValues(x => if (x > 1) x else 1)\n        val\
    \ result = counts.mapValues(x => if (x > 1) x else 1)\n        val result = counts.mapValues(x\
    \ => if (x > 1) x else 1)\n        val result = counts.mapValues(x => if (x >\
    \ 1) x else 1)\n        val result = counts.mapValues(x => if (x > 1) x else 1)\n\
    \        val result = counts.mapValues(x => if (x > 1) x else 1)\n        val ",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach { number =>\n\
    \            if (seen.contains(number)) {\n                numbers.remove(number)\n\
    \            }\n            else {\n                seen += number\n         \
    \   }\n        }\n        numbers.toList", "        val counts = mutable.HashMap.empty[Long,\
    \ Int]\n        numbers.foreach { n =>\n            counts.getOrElseUpdate(n,\
    \ 0)\n            counts.get(n) += 1\n        }\n        val result = new ListBuffer[Long]()\n\
    \        counts.foreach { case (n, count) =>\n            if (count > 1) {\n \
    \               result ++= numbers.filterNot(n => n == n)\n            }\n   \
    \     }\n        result.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(numbers.indexOf(n))\n            }\n            else\
    \ {\n                seen += n\n            }\n        }\n        numbers", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n \
    \           if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { number =>\n            if (seen.contains(number)) {\n\
    \                numbers.remove(number)\n            }\n            else {\n \
    \               seen += number\n            }\n        }\n        numbers", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.foreach(n => {\n \
    \           if (seen.contains(n)) {\n                numbers.remove(n)\n     \
    \       }\n            else {\n                seen += n\n            }\n    \
    \    })\n        numbers", "        val seen = mutable.HashSet[Long]()\n     \
    \   numbers.foreach { n =>\n            if (seen.contains(n)) {\n            \
    \    numbers.remove(n)\n            } else {\n                seen += n\n    \
    \        }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { number =>\n            if (seen.contains(number)) {\n\
    \                numbers.remove(number)\n            } else {\n              \
    \  seen += number\n            }\n        }\n        numbers", "        val seen\
    \ = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n            if (seen.contains(n))\
    \ {\n                numbers.remove(n)\n            } else {\n               \
    \ seen += n\n            }\n        }\n        numbers.toList", "        val seen\
    \ = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n            if (seen.contains(n))\
    \ {\n                numbers -= n\n            }\n            else {\n       \
    \         seen += n\n            }\n        }\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n           \
    \ if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            } else {\n                seen += n\n            }\n        }\n \
    \       numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach(x\
    \ => if (seen.add(x)) x else ())\n        numbers.toList", "        val seen =\
    \ mutable.HashSet[Long]()\n        numbers.foreach { n =>\n            if (seen.contains(n))\
    \ {\n                numbers.remove(n)\n            }\n            else {\n  \
    \              seen += n\n            }\n        }\n        numbers", "      \
    \  val seen = mutable.HashSet[Long]()\n        numbers.foreach { number =>\n \
    \           if (seen.contains(number)) {\n                numbers.remove(number)\n\
    \            }\n            else {\n                seen += number\n         \
    \   }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(numbers.indexOf(n))\n            }\n            else\
    \ {\n                seen += n\n            }\n        }\n        numbers", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.foreach { number =>\n\
    \            if (seen.contains(number)) {\n                numbers.remove(number)\n\
    \            }\n            else {\n                seen += number\n         \
    \   }\n        }\n        numbers", "        val counts = numbers.groupBy(x =>\
    \ x).mapValues(_.size)\n        val filtered = counts.filter(_._2 > 1).map(_._1)\n\
    \        filtered.toList", "        val seen = mutable.HashSet[Long]()\n     \
    \   numbers.foreach { n =>\n            if (seen.contains(n)) {\n            \
    \    numbers -= n\n            }\n            else {\n                seen +=\
    \ n\n            }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.filter(x => !seen.contains(x)).sortWith(_ < _).reverse", "  \
    \      val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n  \
    \          if (seen.contains(n)) {\n                numbers.remove(n)\n      \
    \      } else {\n                seen += n\n            }\n        }\n       \
    \ numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { n =>\n            if (seen.contains(n)) {\n         \
    \       numbers.remove(numbers.indexOf(n))\n            }\n            else {\n\
    \                seen += n\n            }\n        }\n        numbers", "    \
    \    val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n    \
    \        if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.foreach(n => if (seen.contains(n))\
    \ numbers.remove(n) else seen.add(n))\n        numbers", "        val counts =\
    \ numbers.groupBy(x => x).mapValues(_.size)\n        val result = numbers.filter(x\
    \ => counts(x) > 1)\n        result", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(n)\n            }\n            else {\n             \
    \   seen += n\n            }\n        }\n        numbers", "        val seen =\
    \ mutable.HashSet[Long]()\n        numbers.foreach { number =>\n            if\
    \ (seen.contains(number)) {\n                numbers -= number\n            }\
    \ else {\n                seen += number\n            }\n        }\n        numbers",
  "        val result = numbers.toSet.toList\n        result.sortWith(_ < _)\n   \
    \     result", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { n =>\n            if (seen.contains(n)) {\n         \
    \       numbers.remove(numbers.indexOf(n))\n            }\n            else {\n\
    \                seen += n\n            }\n        }\n        numbers", "    \
    \    val seen = mutable.HashSet[Long]()\n        numbers.foreach(n => if (seen.contains(n))\
    \ numbers.remove(n) else seen.add(n))\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach(x => if (seen.contains(x)) numbers.remove(x))\n     \
    \   numbers", "        val counts = numbers.groupBy(x => x).mapValues(_.size)\n\
    \        val toRemove = counts.map(_._2).filter(_ > 1)\n        numbers.filterNot(x\
    \ => toRemove.contains(x))", "        val counts = numbers.groupBy(x => x).mapValues(_.size)\n\
    \        val result = counts.filter(_._2 > 1).map(_._1)\n        result", "  \
    \      val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n  \
    \          if (seen.contains(n)) {\n                numbers.remove(n)\n      \
    \      } else {\n                seen += n\n            }\n        }\n       \
    \ numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { n =>\n            if (seen.contains(n)) {\n         \
    \       numbers.remove(numbers.indexOf(n))\n            }\n            else {\n\
    \                seen += n\n            }\n        }\n        numbers", "    \
    \    val seen = mutable.HashSet[Long]()\n        numbers.filter(n => seen.add(n)).sortWith(_\
    \ < _)", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            } else {\n                seen += n\n            }\n        }\n \
    \       numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { n =>\n            if (seen.contains(n)) {\n         \
    \       numbers.remove(numbers.indexOf(n))\n            }\n            else {\n\
    \                seen += n\n            }\n        }\n        numbers", "    \
    \    val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n    \
    \        if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            } else {\n                seen += n\n            }\n        }\n \
    \       numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { n =>\n            if (seen.contains(n)) {\n         \
    \       numbers.remove(numbers.indexOf(n))\n            }\n            else {\n\
    \                seen += n\n            }\n        }\n        numbers", "    \
    \    val seen = mutable.HashSet[Long]()\n        numbers.foreach { number =>\n\
    \            if (seen.contains(number)) {\n                numbers.remove(number)\n\
    \            } else {\n                seen += number\n            }\n       \
    \ }\n        numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers -= n\n\
    \            } else {\n                seen += n\n            }\n        }\n \
    \       numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { number =>\n            if (seen.contains(number)) {\n                numbers\
    \ -= number\n            } else {\n                seen += number\n          \
    \  }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { number =>\n            if (seen.contains(number)) {\n\
    \                numbers.remove(number)\n            }\n            else {\n \
    \               seen += number\n            }\n        }\n        numbers", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.foreach(n => if (seen.contains(n))\
    \ numbers.remove(numbers.indexOf(n)))\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach(n => if (seen.contains(n)) numbers.remove(n) else seen.add(n))\n\
    \        numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(n)\n\
    \            } else {\n                seen += n\n            }\n        }\n \
    \       numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach(x\
    \ => if (seen.contains(x)) numbers.remove(x))\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n           \
    \ if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers"]
stop_tokens:
- "\n    }\n"
