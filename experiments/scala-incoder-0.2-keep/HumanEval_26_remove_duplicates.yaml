name: HumanEval_26_remove_duplicates
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // From a list of integers, remove all elements that occur more than once.\n\
  \    // Keep order of elements left the same as in the input.\n    // >>> remove_duplicates([1,\
  \ 2, 3, 2, 4])\n    // [1, 3, 4]\n    def removeDuplicates(numbers : List[Long])\
  \ : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(removeDuplicates((List[Long]())).equals((List[Long]())));\n\
  \    assert(removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(removeDuplicates((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
  \ 4l.toLong, 5l.toLong))));\n    }\n\n}\n"
completions: ["        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            } else {\n                seen += n\n            }\n        }\n \
    \       numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { number =>\n            if (seen.contains(number)) {\n                numbers.remove(number)\n\
    \            } else {\n                seen += number\n            }\n       \
    \ }\n        numbers", "        val result = numbers.foldLeft(List[Long]())((acc,\
    \ x) => {\n            if (acc.contains(x)) {\n                acc\n         \
    \   } else {\n                acc :+ x\n            }\n        })\n        result",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n  \
    \          if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val counts = numbers.groupBy(x => x).mapValues(_.size)\n\
    \        val result = numbers.filter(x => counts(x) > 1)\n        counts.toList.sortBy(_._1).reverse.map(x\
    \ => x._2)", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(n)\n\
    \            } else {\n                seen += n\n            }\n        }\n \
    \       numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            } else {\n                seen += n\n            }\n        }\n \
    \       numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(n)\n\
    \            } else {\n                seen += n\n            }\n        }\n \
    \       numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.foreach { number =>\n      \
    \      if (seen.contains(number)) {\n                numbers.remove(number)\n\
    \            }\n            else {\n                seen += number\n         \
    \   }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.foreach(n => if (seen.contains(n))\
    \ numbers.remove(n) else seen.add(n))\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach(n => if (seen.contains(n)) numbers.remove(n) else seen\
    \ += n)\n        numbers", "        val seen = mutable.HashSet[Long]()\n     \
    \   numbers.foreach { number =>\n            if (seen.contains(number)) {\n  \
    \              numbers.remove(number)\n            } else {\n                seen\
    \ += number\n            }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach(n => if (seen.contains(n)) numbers.remove(n) else seen\
    \ += n)\n        numbers", "        val seen = mutable.HashSet[Long]()\n     \
    \   numbers.foreach(n => if (seen.contains(n)) numbers.remove(numbers.indexOf(n)))\n\
    \        numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.filter(x\
    \ => !seen.contains(x)).sortWith(_ < _)", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n           \
    \ if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers"]
stop_tokens:
- "\n    }\n"
