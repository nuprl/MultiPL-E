name: HumanEval_42_incr_list
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return list with elements incremented by 1.\n    // >>> incr_list([1, 2,\
  \ 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n \
  \   // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
  \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
  \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
  \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
  \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
  \ 124l.toLong))));\n    }\n\n}\n"
completions: ["        val l1 = l.toList\n        var l2 = l1.reverse\n        var\
    \ l3 = l2.reverse\n        var l4 = l3.reverse\n        var l5 = l4.reverse\n\
    \        var l6 = l5.reverse\n        var l7 = l6.reverse\n        var l8 = l7.reverse\n\
    \        var l9 = l8.reverse\n        var l10 = l9.reverse\n        var l11 =\
    \ l10.reverse\n        var l12 = l11.reverse\n        var l13 = l12.reverse\n\
    \        var l14 = l13.reverse\n        var l15 = l14.reverse\n        var l16\
    \ = l15.reverse\n        var l17 = l16.reverse\n        var l18 = l17.reverse\n\
    \        var l19 = l18.reverse\n        var l20 = l19.reverse\n        var l21\
    \ = l20.reverse\n        var l22 = l21.reverse\n        var l23 = l22.reverse\n\
    \        var l24 = l23.reverse\n        var l25 = l24.reverse\n        var l26\
    \ = l25.reverse\n        var l27 = l26.reverse\n        var l28 = l27.reverse\n\
    \        var l29 = l28.reverse\n        var l30 = l29.reverse\n        var l31\
    \ = l30.reverse\n        var l32 = l31.reverse\n        var l33 = l32.reverse\n\
    \        var l34 = l33.reverse\n        var l35 = l34.reverse\n        var l36\
    \ = l35.reverse\n        var l37 = l36.reverse\n        var l38 = l37.reverse\n\
    \        var l39 = l38.reverse\n        var l40 = l39.reverse\n        var l41\
    \ = l40.reverse\n        var l42 = l41.reverse\n        var l43 = l42.reverse\n\
    \        var l44 = l43.reverse\n        var l45 = l44.reverse\n        var l46\
    \ = l45.reverse\n        var l47 = l46.reverse\n        var l48 = l47.reverse\n\
    \        var l49 = l48.reverse\n        var l50 = l49.reverse\n        var l51\
    \ = l50.reverse\n        var l52 = l51.reverse\n        var l53 = l52.reverse\n\
    \        var l54 = l53.reverse\n        var l55 = l54.reverse\n        var l56\
    \ = l55.reverse\n        var l57 = l56.reverse\n        var l58 = l57.reverse\n\
    \        var l59 = l58.reverse\n        var l60 = l59.reverse\n        var l61\
    \ = l60.reverse\n        var l62 = l61.reverse\n        var l63 = l62.reverse\n\
    \        var l64 = l63.reverse\n        var l", "        val newList = mutable.ListBuffer.empty[Long]\n\
    \        l.foreach { x => newList += x + 1 }\n        newList.toList", "     \
    \   val newList = mutable.ListBuffer.empty[Long]\n        l.foreach { x =>\n \
    \           newList += x + 1\n        }\n        newList.toList", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        l.foreach { x => result +=\
    \ x }\n        result.toList", "        val newList = mutable.ListBuffer.empty[Long]\n\
    \        l.foreach { x =>\n            newList += x + 1\n        }\n        newList.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        l.foreach(x => result.append(x\
    \ + 1))\n        result.toList", "        var result = new ListBuffer[Long]()\n\
    \        l.foreach(x => result += x)\n        result", "        val newList =\
    \ mutable.ListBuffer.empty[Long]\n        l.foreach { x => newList += x + 1 }\n\
    \        newList.toList", "        val l1 = l.toList\n        val l2 = l1.zipWithIndex.filter(_._2\
    \ % 2 == 0).map(_._1).reverse\n        l2.foldLeft(l1) { (acc, x) => acc.insert(x,\
    \ x + 1) }", "        val result = new mutable.ListBuffer[Long]()\n        var\
    \ i = 0\n        while (i < l.length) {\n            result += l(i + 1)\n    \
    \        i += 1\n        }\n        result.toList", "        val result = new\
    \ mutable.ListBuffer[Long]()\n        l.foreach { x => result.add(x+1) }\n   \
    \     result.toList", "        val result = new mutable.ListBuffer[Long]()\n \
    \       l.foreach { x => result += x }\n        result.toList", "        val newList\
    \ = mutable.ListBuffer.empty[Long]\n        l.foreach { x =>\n            newList\
    \ += x + 1\n        }\n        newList.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < l.length) {\n            val x = l(i)\n\
    \            i += 1\n            if (x == 0) continue\n            result.add(x)\n\
    \            result.add(x + 1)\n        }\n        result.toList", "        val\
    \ newList = mutable.ListBuffer[Long]()\n        l.foreach(x => newList += x +\
    \ 1)\n        newList.toList", "        val newList = mutable.ListBuffer.empty[Long]\n\
    \        l.foreach { x =>\n            newList += x + 1\n        }\n        newList.toList",
  "        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach { x =>\
    \ newList += x + 1 }\n        newList.toList", "        var result = new ListBuffer[Long]()\n\
    \        for(i <- 0 until l.length) {\n            result.append(l(i) + 1)\n \
    \       }\n        return result.toList", "        val newList = mutable.ListBuffer.empty[Long]\n\
    \        l.foreach { x => newList += x + 1 }\n        newList.toList", "     \
    \   val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n      \
    \  for (i <- l) {\n            sum += i\n            result.add(sum)\n       \
    \ }\n        result.toList"]
stop_tokens:
- "\n    }\n"
