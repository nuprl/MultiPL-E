name: HumanEval_133_sum_squares
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a list of numbers.\n    // You need to return the sum of squared\
  \ numbers in the given list,\n    // round each element in the list to the upper\
  \ int(Ceiling) first.\n    // Examples:\n    // For lst = [1,2,3] the output should\
  \ be 14\n    // For lst = [1,4,9] the output should be 98\n    // For lst = [1,3,5,7]\
  \ the output should be 84\n    // For lst = [1.4,4.2,0] the output should be 29\n\
  \    // For lst = [-2.4,1,1] the output should be 6\n    def sumSquares(lst : List[Float])\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat))) == (14l));\n    assert(sumSquares((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat))) == (14l));\n    assert(sumSquares((List[Float](1.0f.toFloat,\
  \ 3.0f.toFloat, 5.0f.toFloat, 7.0f.toFloat))) == (84l));\n    assert(sumSquares((List[Float](1.4f.toFloat,\
  \ 4.2f.toFloat, 0.0f.toFloat))) == (29l));\n    assert(sumSquares((List[Float](-2.4f.toFloat,\
  \ 1.0f.toFloat, 1.0f.toFloat))) == (6l));\n    assert(sumSquares((List[Float](100.0f.toFloat,\
  \ 1.0f.toFloat, 15.0f.toFloat, 2.0f.toFloat))) == (10230l));\n    assert(sumSquares((List[Float](10000.0f.toFloat,\
  \ 10000.0f.toFloat))) == (200000000l));\n    assert(sumSquares((List[Float](-1.4f.toFloat,\
  \ 4.6f.toFloat, 6.3f.toFloat))) == (75l));\n    assert(sumSquares((List[Float](-1.4f.toFloat,\
  \ 17.9f.toFloat, 18.9f.toFloat, 19.9f.toFloat))) == (1086l));\n    assert(sumSquares((List[Float](0.0f.toFloat)))\
  \ == (0l));\n    assert(sumSquares((List[Float](-1.0f.toFloat))) == (1l));\n   \
  \ assert(sumSquares((List[Float](-1.0f.toFloat, 1.0f.toFloat, 0.0f.toFloat))) ==\
  \ (2l));\n    }\n\n}\n"
completions: ["        val nums = lst.map(_.toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sum = sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n\
    \        rounded", "        val nums = lst.map(_.toInt)\n        val sum = nums.sum\n\
    \        val sq = nums.map(x => x * x).sum\n        sq.toLong + sum.toLong", " \
    \       val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sumsUp = sums.map(x => math.ceil(x))\n        val sumsUp2 = sumsUp.map(x\
    \ => math.round(x))\n        val sumsUp3 = sumsUp2.map(x => math.floor(x))\n \
    \       val sumsUp4 = sumsUp3.map(x => math.round(x))\n        val sumsUp5 = sumsUp4.map(x\
    \ => math.ceil(x))\n        val sumsUp6 = sumsUp5.map(x => math.round(x))\n  \
    \      val sumsUp7 = sumsUp6.map(x => math.ceil(x))\n        val sumsUp8 = sumsUp7.map(x\
    \ => math.round(x))\n        val sumsUp9 = sumsUp8.map(x => math.ceil(x))\n  \
    \      val sumsUp10 = sumsUp9.map(x => math.round(x))\n        val sumsUp11 =\
    \ sumsUp10.map(x => math.ceil(x))\n        val sumsUp12 = sumsUp11.map(x => math.round(x))\n\
    \        val sumsUp13 = sumsUp12.map(x => math.ceil(x))\n        val sumsUp14\
    \ = sumsUp13.map(x => math.round(x))\n        val sumsUp15 = sumsUp14.map(x =>\
    \ math.ceil(x))\n        val sumsUp16 = sumsUp15.map(x => math.round(x))\n   \
    \     val sumsUp17 = sumsUp16.map(x => math.ceil(x))\n        val sumsUp18 = sumsUp17.map(x\
    \ => math.round(x))\n        val sumsUp19 = sumsUp18.map(x => math.ceil(x))\n\
    \        val sumsUp20 = sumsUp19.map(x => math.round(x))\n        val sumsUp21\
    \ = sumsUp20.map(x => math.ceil(x))\n        val sumsUp22 = sumsUp21.map(x =>\
    \ math.round(x))\n        val sumsUp23 = sumsUp22.map(x => math.ceil(x))\n   \
    \     val sumsUp24 = sumsUp23.map(x => math.round(x))\n        val sumsUp25 =\
    \ sumsUp24.map(x => math.ceil(x))\n        val sumsUp26 = sumsUp25.map(x => math.round(x))\n\
    \        val sumsUp27 = sumsUp26.map(x => math.ceil(x))\n        val sumsUp28\
    \ = sumsUp27.map(x => math.round", "        val nums = lst.map(_.toInt)\n    \
    \    val sum = nums.sum\n        val squares = nums.map(x => x * x)\n        val\
    \ result = squares.sum + sum\n        math.round(result)", "        val sumSquares\
    \ = lst.map(x => math.pow(x, 2)).sum\n        val roundUp = lst.map(x => math.ceil(x)).sum\n\
    \        sumSquares + roundUp", "        val n = lst.size\n        val sum = 0L\n\
    \        val sqSum = lst.map(x => math.pow(x, 2)).sum\n        val round = math.ceil(lst.max)\n\
    \        for(i <- 0 until n) {\n            sum += sqSum * round(lst(i))\n   \
    \     }\n        return sum", "        val nums = lst.map(_.toInt)\n        val\
    \ sums = nums.map(x => x * x)\n        val sum = sums.sum\n        val rounded\
    \ = sums.map(x => math.ceil(x)).sum\n        rounded", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val rounded = sums.map(x => math.ceil(x)).sum\n        rounded", "        val\
    \ sum = 0\n        lst.foreach(x => sum += math.pow(x, 2))\n        sum", "  \
    \      val nums = lst.map(x => math.ceil(x).toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sum = sums.sum\n        return sum", "        val nums\
    \ = lst.map(_.toInt)\n        val sum = nums.sum\n        val squareSum = nums.map(x\
    \ => x * x).sum\n        val squareSum2 = nums.map(x => x * x).map(x => x * x).sum\n\
    \        val squareSum3 = nums.map(x => x * x).map(x => x * x).map(x => x * x).sum\n\
    \        val squareSum4 = nums.map(x => x * x).map(x => x * x).map(x => x * x).map(x\
    \ => x * x).sum\n        val squareSum5 = nums.map(x => x * x).map(x => x * x).map(x\
    \ => x * x).map(x => x * x).map(x => x * x).sum\n        val squareSum6 = nums.map(x\
    \ => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x\
    \ => x * x).sum\n        val squareSum7 = nums.map(x => x * x).map(x => x * x).map(x\
    \ => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).sum\n\
    \        val squareSum8 = nums.map(x => x * x).map(x => x * x).map(x => x * x).map(x\
    \ => x * x).map(x => x * x).map(x => x * x).map(x => x * x).sum\n        val squareSum9\
    \ = nums.map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x\
    \ => x * x).map(x => x * x).map(x => x * x).map(x => x * x).sum\n        val squareSum10\
    \ = nums.map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x\
    \ => x * x).map(x => x * x).map(x => x * x).map(x => x * x).sum\n        val squareSum11\
    \ = nums.map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x\
    \ => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).sum\n\
    \        val squareSum12 = nums.map(x => x * x).map(x => x * x).map(x => x * x).map(x\
    \ => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x\
    \ => x * x).sum\n        val squareSum13 = nums.map(x => x * x).map(x => x * x).map(x\
    \ => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x ", "       \
    \ val sum = 0L\n        for(i <- lst) {\n            sum += i\n        }\n   \
    \     sum", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sumsOfSquares = sums.map(x => x * x)\n        val sumsOfSquaresUpToCeil\
    \ = sumsOfSquares.map(x => math.ceil(x))\n        val sumsOfSquaresUpToCeilSum\
    \ = sumsOfSquaresUpToCeil.reduce((x, y) => x + y)\n        return sumsOfSquaresUpToCeilSum",
  "        val sum = 0\n        lst.foreach(x => sum += math.pow(x, 2))\n        sum.toLong",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n\
    \        rounded", "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x,\
    \ 2))\n        math.ceil(sum)", "        val nums = lst.map(x => math.ceil(x *\
    \ x)).toList\n        val sum = nums.sum\n        val sq = nums.map(x => x * x).sum\n\
    \        sq.toLong + sum.toLong", "        val nums = lst.map(_.toInt)\n     \
    \   val sums = nums.map(x => x * x)\n        val sum = sums.sum\n        val rounded\
    \ = sums.map(x => math.ceil(x).toInt)\n        rounded.sum", "        val nums\
    \ = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val sumsSum\
    \ = sums.sum\n        val sumsSumRounded = sumsSum.roundToInt\n        sumsSumRounded",
  "        val nums = lst.map(_.toInt)\n        val numsSum = nums.sum\n        val\
    \ numsSumSquare = nums.map(x => x*x).sum\n        val numsSumSquareUp = nums.map(x\
    \ => math.ceil(x*x).toInt).sum\n        val numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n     \
    \   val numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n        val\
    \ numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n        val numsSumSquareUp\
    \ = nums.map(x => math.ceil(x*x).toInt).sum\n        val numsSumSquareUp = nums.map(x\
    \ => math.ceil(x*x).toInt).sum\n        val numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n     \
    \   val numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n        val\
    \ numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n        val numsSumSquareUp\
    \ = nums.map(x => math.ceil(x*x).toInt).sum\n        val numsSumSquareUp = nums.map(x\
    \ => math.ceil(x*x).toInt).sum\n        val numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n     \
    \   val numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n        val\
    \ numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n        val numsSumSquareUp\
    \ = nums.map(x => math.ceil(x*x).toInt).sum\n        val numsSumSquareUp = nums.map(x\
    \ => math.ceil(x*x).toInt).sum\n        val numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.", "        val nums = lst.map(_.toInt)\n\
    \        val numsSum = nums.sum\n        val numsSumSquare = nums.map(x => x *\
    \ x).sum\n        val numsSumSquareUp = nums.map(x => math.ceil(x * x)).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.ceil(x * x)).sum\n        val\
    \ numsSumSquareUp = nums.map(x => math.ceil(x * x)).sum\n        val numsSumSquareUp\
    \ = nums.map(x => math.ceil(x * x)).sum\n        val numsSumSquareUp = nums.map(x\
    \ => math.ceil(x * x)).sum\n        val numsSumSquareUp = nums.map(x => math.ceil(x\
    \ * x)).sum\n        val numsSumSquareUp = nums.map(x => math.ceil(x * x)).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.ceil(x * x)).sum\n        val\
    \ numsSumSquareUp = nums.map(x => math.ceil(x * x)).sum\n        val numsSumSquareUp\
    \ = nums.map(x => math.ceil(x * x)).sum\n        val numsSumSquareUp = nums.map(x\
    \ => math.ceil(x * x)).sum\n        val numsSumSquareUp = nums.map(x => math.ceil(x\
    \ * x)).sum\n        val numsSumSquareUp = nums.map(x => math.ceil(x * x)).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.ceil(x * x)).sum\n        val\
    \ numsSumSquareUp = nums.map(x => math.ceil(x * x)).sum\n        val numsSumSquareUp\
    \ = nums.map(x => math.ceil(x * x)).sum\n        val numsSumSquareUp = nums.map(x\
    \ => math.ceil(x * x)).sum\n        val numsSumSquareUp = nums.map(x => math.ceil(x\
    \ * x)).sum\n        val numsSumSquareUp = nums.map(x => math.ceil(x * x)).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.ceil(x * x)).sum\n        val\
    \ numsSumSquareUp = nums.map(x => math.ceil(x * x)).sum\n        val numsSumSquareUp\
    \ = nums.map(x => math.ceil(x * x)).sum\n        val numsSumSquareUp = nums.map(x ",
  "        val nums = lst.map(x => math.ceil(x*x)).toList\n        val sum = nums.sum\n\
    \        val sq = nums.map(x => x*x).sum\n        sq + sum", "        val sumSquares\
    \ = mutable.ListBuffer.empty[Float]\n        lst.foreach(x => sumSquares += math.pow(x,\
    \ 2))\n        sumSquares.sum", "        val nums = lst.map(_.toInt)\n       \
    \ val sums = nums.map(x => x * x)\n        val sumsSum = sums.sum\n        val\
    \ sumsSumRounded = sumsSum.roundToInt\n        sumsSumRounded", "        val nums\
    \ = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val sum\
    \ = sums.sum\n        val rounded = sums.map(_.ceil)\n        val result = rounded.sum\n\
    \        result", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sumsSum = sums.sum\n        val sumsSumRounded = sumsSum.roundToInt\n\
    \        sumsSumRounded", "        val nums = lst.map(_.toInt)\n        val sums\
    \ = nums.map(x => x * x)\n        val sum = sums.sum\n        val rounded = sums.map(x\
    \ => math.ceil(x)).sum\n        sum + rounded", "        val nums = lst.map(x\
    \ => math.ceil(x))\n        val sums = nums.map(x => math.pow(x, 2))\n       \
    \ val sum = sums.sum\n        return sum", "        val nums = lst.map(_.toInt)\n\
    \        val numsSum = nums.sum\n        val numsSumSquare = nums.map(x => x *\
    \ x).sum\n        numsSumSquare.toLong", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val rounded = sums.map(_.ceil)\n        val roundedSum = rounded.sum\n     \
    \   roundedSum * roundedSum", "        val nums = lst.map(_.toInt)\n        val\
    \ numsSum = nums.sum\n        val numsSumSquare = nums.map(x => x * x).sum\n \
    \       val numsSumSquareUp = numsSumSquare + numsSum\n        val numsSumSquareUpRounded\
    \ = numsSumSquareUp.ceil.toInt\n        numsSumSquareUpRounded * numsSumSquareUpRounded",
  "        val sumSquares = lst.foldLeft(0.0f) { (sum, element) =>\n            val\
    \ newSum = sum + element*element\n            val newSumRounded = math.ceil(newSum)\n\
    \            val newSumRoundedToInt: Int = math.round(newSumRounded)\n       \
    \     newSumRoundedToInt*newSumRoundedToInt\n        }\n        sumSquares", " \
    \       val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val rounded = sums.map(_.ceil)\n        val\
    \ roundedSum = rounded.sum\n        roundedSum * roundedSum", "        val sum\
    \ = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n        sum", "     \
    \   val sumSquares = mutable.ListBuffer.empty[Float]\n        lst.foreach(x =>\
    \ {\n            sumSquares += math.pow(x, 2)\n        })\n        sumSquares.sum",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sumsSum = sums.sum\n        val sumsSumRounded = sumsSum.ceil.toInt\n\
    \        sumsSumRounded * sumsSumRounded", "        val nums = lst.map(x => math.ceil(x).toInt)\n\
    \        val sum = 0L\n        for (i <- nums) {\n            sum += i\n     \
    \   }\n        return sum", "        val sum = 0\n        lst.foreach(x => sum\
    \ += math.pow(x, 2))\n        sum.toLong", "        val sum = 0\n        lst.foreach(x\
    \ => sum += math.pow(x, 2))\n        sum.toLong", "        val sumSquares = mutable.ListBuffer.empty[Float]\n\
    \        lst.foreach(x => sumSquares += math.pow(x, 2))\n        sumSquares.sum",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val round = math.ceil(sum)\n        val squares\
    \ = sums.map(x => round - x).sum\n        return squares", "        val sum =\
    \ 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n        sum", "       \
    \ val nums = lst.map(x => math.ceil(x).toInt)\n        val sum = 0L\n        for\
    \ (i <- nums) {\n            sum += i.toLong * i.toLong\n        }\n        return\
    \ sum", "        val nums = lst.map(x => math.ceil(x))\n        val sums = nums.map(x\
    \ => math.pow(x, 2))\n        val sum = sums.sum\n        return sum", "     \
    \   val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n   \
    \     val sumOfSquares = sums.sum\n        sumOfSquares.toLong", "        val\
    \ nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val\
    \ sumsSum = sums.sum\n        val sumsSumRounded = sumsSum.ceil.toInt\n      \
    \  sumsSumRounded * sumsSumRounded", "        val sum = 0\n        lst.foreach(x\
    \ => sum += math.pow(x, 2))\n        sum.toLong", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sumsSum = sums.sum\n   \
    \     sumsSum.toLong", "        val sum = 0\n        lst.foreach(x => sum += math.pow(x,\
    \ 2))\n        math.ceil(sum)", "        val nums = lst.map(_.toInt)\n       \
    \ val sums = nums.map(x => x * x)\n        val sum = sums.sum\n        val rounded\
    \ = sums.map(x => math.ceil(x).toInt)\n        val result = rounded.sum\n    \
    \    result", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sum = sums.sum\n        val squareSums = sums.map(x =>\
    \ x * x)\n        val squareSum = squareSums.sum\n        val squareSumCeil =\
    \ squareSums.map(_.ceil)\n        val squareSumFloor = squareSums.map(_.floor)\n\
    \        val sumOfSquares = squareSumCeil.zip(squareSumFloor).map(x => x._1 +\
    \ x._2)\n        val sumOfSquaresFloor = sumOfSquares.map(_.floor)\n        val\
    \ sumOfSquaresCeil = sumOfSquares.map(_.ceil)\n        val sumOfSquaresFloorCeil\
    \ = sumOfSquares.map(x => x._1 + x._2)\n        val sumOfSquaresFloorCeilSum =\
    \ sumOfSquaresFloorCeil.sum\n        val sumOfSquaresFloorCeilSumFloor = sumOfSquaresFloorCeilSum.map(_.floor)\n\
    \        val sumOfSquaresFloorCeilSumCeil = sumOfSquaresFloorCeilSum.map(_.ceil)\n\
    \        val sumOfSquaresFloorCeilSumFloorCeil = sumOfSquaresFloorCeilSum.map(x\
    \ => x._1 + x._2)\n        val sumOfSquaresFloorCeilSumFloorCeilSum = sumOfSquaresFloorCeilSumFloorCeil.sum\n\
    \        val sumOfSquaresFloorCeilSumFloorCeilSumFloor = sumOfSquaresFloorCeilSumFloorCeilSum.map(_.floor)\n\
    \        val sumOfSquaresFloorCeilSumFloorCeilSumCeil = sumOfSquaresFloorCeilSumFloorCeilSum.map(_.ceil)\n\
    \        val sumOfSquaresFloorCeilSumFloorCeilSumFloorCeil = sumOfSquaresFloorCeilSumFloorCeilSum.map(x\
    \ => x._1 + x._2)\n        val sumOfSquaresFloorCeilSumFloorCeilSumFloorCeilSum\
    \ = sumOfSquaresFloorCeilSumFloorCeilSumFloorCeil.sum\n        val sumOfSquaresFloorCeilSumFloorCeilSumFloorCeilSumFloor\
    \ = ", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x =>\
    \ x * x)\n        val sum = sums.sum\n        val round = math.ceil(sum)\n   \
    \     val result = round * round\n        result", "        val nums = lst.map(_.toInt)\n\
    \        val sum = nums.sum\n        val squares = nums.map(x => x * x)\n    \
    \    val result = squares.sum + sum\n        val rounded = result.ceil.toLong\n\
    \        result", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sum = sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n\
    \        rounded", "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x,\
    \ 2))\n        sum", "        val nums = lst.map(_.toInt)\n        val sum = nums.sum\n\
    \        val sq = nums.map(x => x * x).sum\n        sq.roundToInt", "        val\
    \ nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val\
    \ sumsOfSquares = sums.map(x => x * x)\n        val sumsOfSquaresCeil = sumsOfSquares.map(x\
    \ => math.ceil(x))\n        val sumsOfSquaresCeilSum = sumsOfSquaresCeil.sum\n\
    \        sumsOfSquaresCeilSum", "        val sum = 0L\n        lst.foreach(x =>\
    \ sum += math.pow(x, 2))\n        sum", "        val nums = lst.map(_.toInt)\n\
    \        val sum = nums.sum\n        val sqr = nums.map(x => x * x).sum\n    \
    \    val result = sqr + sum\n        math.round(result)", "        val nums =\
    \ lst.map(x => math.ceil(x*x)).toList\n        nums.sum", "        val sum = 0\n\
    \        val nums = lst.map(x => math.ceil(x))\n        nums.foreach(x => sum\
    \ += math.pow(x, 2))\n        sum", "        val sum = 0\n        lst.foreach(x\
    \ => sum += math.pow(x, 2))\n        sum.toLong", "        val sumSquares = mutable.ListBuffer.empty[Float]\n\
    \        lst.foreach(x => sumSquares += math.pow(x, 2))\n        sumSquares.sum",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val round = math.ceil(sum)\n        val result\
    \ = round * round\n        result", "        val nums = lst.map(_.toInt)\n   \
    \     val sum = nums.sum\n        val sqr = nums.map(x => x * x).sum\n       \
    \ sqr.toLong + sum.toLong", "        val nums = lst.map(_.toInt)\n        val\
    \ numsSum = nums.sum\n        val numsSumSquare = nums.map(x => x * x).sum\n \
    \       val numsSumSquareUp = nums.map(x => math.ceil(x)).map(x => x * x).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.ceil(x)).map(x => x * x).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.ceil(x)).map(x => x * x).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.ceil(x)).map(x => x * x).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.ceil(x)).map(x => x * x).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.ceil(x)).map(x => x * x).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.ceil(x)).map(x => x * x).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.ceil(x)).map(x => x * x).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.ceil(x)).map(x => x * x).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.ceil(x)).map(x => x * x).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.ceil(x)).map(x => x * x).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.ceil(x)).map(x => x * x).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.ceil(x)).map(x => x * x).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.ceil(x)).map(x => x * x).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.ceil(x)).map(x => x * x).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.ceil(x)).map(x => x * x).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.ceil(x)).map(x => x * x).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.ceil(x)).map(x => x * x).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.ceil(x)).map(x => x * x).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.ceil(x)).map(", "        val\
    \ sum = 0\n        for(i <- lst) {\n            sum += i * i\n        }\n    \
    \    sum", "        val nums = lst.map(x => math.ceil(x))\n        val sums =\
    \ nums.map(x => math.pow(x, 2))\n        val sum = sums.sum\n        return sum",
  "        val sum = 0\n        lst.foreach(x => sum += math.pow(x, 2))\n        sum",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val squareSums = sums.map(x => x * x)\n \
    \       val squareSum = squareSums.sum\n        val result = squareSum + sum\n\
    \        result.toLong", "        val sumSquares = lst.map(x => math.pow(x, 2)).sum\n\
    \        val roundedSum = sumSquares.toLong\n        val roundedSum2 = roundedSum.toInt\n\
    \        roundedSum2", "        val nums = lst.map(_.toInt)\n        val sums\
    \ = nums.map(x => x * x)\n        val sumsSum = sums.sum\n        val sumsSumRound\
    \ = sumsSum.round\n        sumsSumRound.toLong", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val rounded = sums.map(_.ceil)\n        val result = rounded.sum\n        result",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val rounded = sums.map(_.ceil)\n        val\
    \ result = rounded.sum\n        result", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val rounded = sums.map(x => math.ceil(x).toInt)\n        rounded.sum", "   \
    \     val n = lst.size\n        val sum = 0L\n        for(i <- 0 until n) {\n\
    \            val x = lst(i)\n            val y = math.ceil(x)\n            val\
    \ z = math.pow(y, 2)\n            sum += z\n        }\n        return sum", " \
    \       val nums = lst.map(x => math.ceil(x).toInt)\n        val sum = 0\n   \
    \     for (i <- 0 until nums.length)\n            sum += nums(i) * nums(i)\n \
    \       sum", "        val sum = 0\n        for(x <- lst) sum += x * x\n     \
    \   sum", "        val sum = 0\n        lst.foreach(x => sum += math.pow(x, 2))\n\
    \        sum.toLong", "        val nums = lst.map(_.toInt)\n        val sums =\
    \ nums.map(x => x * x)\n        val sum = sums.sum\n        val squares = sums.map(x\
    \ => x * x)\n        val rounded = squares.map(x => math.ceil(x).toInt)\n    \
    \    rounded.sum", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sumsSum = sums.sum\n        val sumsSumRounded = sumsSum.roundToInt\n\
    \        sumsSumRounded", "        val nums = lst.map(_.toInt)\n        val sums\
    \ = nums.map(x => x * x)\n        val sum = sums.sum\n        val rounded = sums.map(_.ceil.toInt)\n\
    \        val result = rounded.sum\n        result", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val squares = sums.map(x => x * x)\n        val rounded = squares.map(x => Math.ceil(x).toInt)\n\
    \        val result = rounded.sum\n        result", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sumsSum = sums.sum\n   \
    \     val sumsSumRounded = sumsSum.toLong\n        val sumsSumRoundedRounded =\
    \ math.ceil(sumsSumRounded).toInt\n        return sumsSumRoundedRounded", "  \
    \      val sumSquares = lst.foldLeft(0.0f) {\n            (sum, element) => sum\
    \ + math.pow(element, 2)\n        }\n        sumSquares.toLong", "        val\
    \ nums = lst.map(x => Math.ceil(x).toInt)\n        val sums = nums.map(x => x\
    \ * x)\n        sums.sum", "        val nums = lst.map(_.toInt)\n        val sums\
    \ = nums.map(x => x * x)\n        val sumOfSquares = sums.sum\n        sumOfSquares.toLong",
  "        val sum = 0\n        lst.foreach(x => sum += math.pow(x, 2))\n        sum.toLong",
  "        val nums = lst.map(_.toInt)\n        val numsSum = nums.sum\n        val\
    \ numsSumSquare = nums.map(x => x * x).sum\n        val numsSumSquareUp = numsSumSquare.map(x\
    \ => math.ceil(x)).sum\n        numsSumSquareUp * numsSum", "        val nums\
    \ = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val sum\
    \ = sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n        rounded\
    \ + sum", "        val sumSquares = mutable.ListBuffer.empty[Float]\n        lst.foreach(x\
    \ => sumSquares += math.pow(x, 2))\n        sumSquares.sum", "        val nums\
    \ = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val sum\
    \ = sums.sum\n        val rounded = sums.map(_.ceil)\n        val roundedSum =\
    \ rounded.sum\n        return roundedSum", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val round = math.ceil(sum)\n        val result = round * round\n        result",
  "        val nums = lst.map(x => math.ceil(x).toInt)\n        val sums = nums.map(x\
    \ => math.pow(x, 2)).sum\n        sums", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val rounded = sums.map(x => math.ceil(x)).sum\n        sum + rounded", "   \
    \     val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n \
    \       val sum = sums.sum\n        val squares = sums.map(x => x * x)\n     \
    \   val squareSum = squares.sum\n        val round = squareSum.map(x => math.ceil(x))\n\
    \        val roundSum = round.sum\n        val roundSquares = roundSum.map(x =>\
    \ x * x)\n        val roundSquareSum = roundSquares.sum\n        val roundSquareSum2\
    \ = roundSquareSum.map(x => math.ceil(x))\n        val roundSquareSum3 = roundSquareSum2.sum\n\
    \        val roundSquareSum4 = roundSquareSum3.map(x => math.ceil(x))\n      \
    \  val roundSquareSum5 = roundSquareSum4.map(x => math.ceil(x))\n        val roundSquareSum6\
    \ = roundSquareSum5.map(x => math.ceil(x))\n        val roundSquareSum7 = roundSquareSum6.map(x\
    \ => math.ceil(x))\n        val roundSquareSum8 = roundSquareSum7.map(x => math.ceil(x))\n\
    \        val roundSquareSum9 = roundSquareSum8.map(x => math.ceil(x))\n      \
    \  val roundSquareSum10 = roundSquareSum9.map(x => math.ceil(x))\n        val\
    \ roundSquareSum11 = roundSquareSum10.map(x => math.ceil(x))\n        val roundSquareSum12\
    \ = roundSquareSum11.map(x => math.ceil(x))\n        val roundSquareSum13 = roundSquareSum12.map(x\
    \ => math.ceil(x))\n        val roundSquareSum14 = roundSquareSum13.map(x => math.ceil(x))\n\
    \        val roundSquareSum15 = roundSquareSum14.map(x => math.ceil(x))\n    \
    \    val roundSquareSum16 = roundSquareSum15.map(x => math.ceil(x))\n        val\
    \ roundSquareSum17 = roundSquareSum16.map(x => math.ceil(x))\n        val roundSquareSum18\
    \ = roundSquareSum17.map(x => math.ceil(x))\n        val roundSquareSum19 = roundSquareSum18.map(x\
    \ => math.ceil(x))\n        val roundSquareSum20 = roundSquareSum19.map(x => math.ceil(x))\n\
    \        val roundSquareSum21 = roundSquareSum20.map(x => math.ceil(x))\n    \
    \    val roundSquareSum22 = roundSquareSum21.map(x => math.ceil(x))\n        val\
    \ roundSquareSum23 = roundSquareSum22.map(x => math.ceil(x))\n        val roundSquareSum24\
    \ = roundSquareSum23.map(x => math.ceil(x))\n        val roundSquareSum25 = roundSquareSum24.map(x\
    \ => ", "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n\
    \        sum", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sumsSum = sums.sum\n        val sumsSumRound = sumsSum.round\n\
    \        val sumsSumFloor = sumsSumRound.floor\n        sumsSumFloor + sumsSumRound.toLong",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val squareSum = sums.map(x => x * x).sum\n\
    \        val ceiling = math.ceil(sum)\n        val floor = math.floor(sum)\n \
    \       val ceilingSquare = ceiling * ceiling\n        val floorSquare = floor\
    \ * floor\n        val ceilingSquareSum = ceilingSquare * ceiling\n        val\
    \ floorSquareSum = floorSquare * floor\n        val ceilingSquareSumFloor = ceilingSquareSum\
    \ * floor\n        val floorSquareSumFloor = floorSquareSum * floor\n        val\
    \ ceilingSquareSumFloorCeiling = ceilingSquareSumFloor * ceiling\n        val\
    \ floorSquareSumFloorCeiling = floorSquareSumFloor * ceiling\n        val ceilingSquareSumFloorCeilingFloor\
    \ = ceilingSquareSumFloorCeiling * floor\n        val floorSquareSumFloorCeilingFloor\
    \ = floorSquareSumFloorCeiling * floor\n        val ceilingSquareSumFloorCeilingFloorCeiling\
    \ = ceilingSquareSumFloorCeilingFloor * ceiling\n        val floorSquareSumFloorCeilingFloorCeiling\
    \ = floorSquareSumFloorCeilingFloor * ceiling\n        val ceilingSquareSumFloorCeilingFloorCeilingFloor\
    \ = ceilingSquareSumFloorCeilingFloorCeiling * floor\n        val floorSquareSumFloorCeilingFloorCeilingFloor\
    \ = floorSquareSumFloorCeilingFloorCeiling * floor\n        val ceilingSquareSumFloorCeilingFloorCeilingFloorCeiling\
    \ = ceilingSquareSumFloorCeilingFloorCeilingFloor * ceiling\n        val floorSquareSumFloorCeilingFloorCeilingFloorCeiling\
    \ = floorSquareSumFloorCeilingFloorCeilingFloor * ceiling\n        val ceilingSquareSumFloorCeilingFloorCeilingFloorCeilingFloor\
    \ = ceilingSquareSumFloorCeilingFloorCeilingFloorCeiling * floor\n        val\
    \ floorSquareSumFloorCeilingFloorCeilingFloorCeilingFloor = floorSquareSumFloorCeilingFloorCeilingFloorCeiling",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val rounded = sums.map(_.ceil)\n        val\
    \ roundedSum = rounded.sum\n        roundedSum", "        val sum = 0\n      \
    \  val nums = lst.map(_.toInt)\n        val numsSorted = nums.sortWith(_ < _)\n\
    \        val numsSortedUp = numsSorted.map(_.ceil)\n        val numsSortedUpSorted\
    \ = numsSortedUp.sortWith(_ < _)\n        val numsSortedUpSorted2 = numsSortedUpSorted.map(_.ceil)\n\
    \        val numsSortedUpSorted3 = numsSortedUpSorted2.sortWith(_ < _)\n     \
    \   val numsSortedUpSorted4 = numsSortedUpSorted3.sortWith(_ < _)\n        val\
    \ numsSortedUpSorted5 = numsSortedUpSorted4.sortWith(_ < _)\n        val numsSortedUpSorted6\
    \ = numsSortedUpSorted5.sortWith(_ < _)\n        val numsSortedUpSorted7 = numsSortedUpSorted6.sortWith(_\
    \ < _)\n        val numsSortedUpSorted8 = numsSortedUpSorted7.sortWith(_ < _)\n\
    \        val numsSortedUpSorted9 = numsSortedUpSorted8.sortWith(_ < _)\n     \
    \   val numsSortedUpSorted10 = numsSortedUpSorted9.sortWith(_ < _)\n        val\
    \ numsSortedUpSorted11 = numsSortedUpSorted10.sortWith(_ < _)\n        val numsSortedUpSorted12\
    \ = numsSortedUpSorted11.sortWith(_ < _)\n        val numsSortedUpSorted13 = numsSortedUpSorted12.sortWith(_\
    \ < _)\n        val numsSortedUpSorted14 = numsSortedUpSorted13.sortWith(_ < _)\n\
    \        val numsSortedUpSorted15 = numsSortedUpSorted14.sortWith(_ < _)\n   \
    \     val numsSortedUpSorted16 = numsSortedUpSorted15.sortWith(_ < _)\n      \
    \  val numsSortedUpSorted17 = numsSortedUpSorted16.sortWith(_ < _)\n        val\
    \ numsSortedUpSorted18 = numsSortedUpSorted17.sortWith(_ < _)\n        val numsSortedUpSorted19\
    \ = numsSortedUpSorted18.sortWith(_ < _)\n        val numsSortedUpSorted20 = numsSortedUpSorted19.sortWith(_\
    \ < _)\n        val numsSortedUpSorted21 = numsSortedUpSorted20.sortWith(_ < _)\n\
    \        val numsSortedUpSorted22 = numsSortedUpSorted21.sortWith", "        val\
    \ nums = lst.map(_.toInt)\n        val numsSum = nums.sum\n        val numsSumSquare\
    \ = nums.map(x => x * x).sum\n        val numsSumSquareUp = numsSumSquare.map(x\
    \ => math.ceil(x)).sum\n        numsSumSquareUp * numsSum", "        val sumSquares\
    \ = lst.map(x => math.pow(x, 2)).sum\n        sumSquares.toLong", "        val\
    \ nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val\
    \ sumOfSquares = sums.sum\n        sumOfSquares.toLong", "        val nums = lst.map(_.toInt)\n\
    \        val numsSum = nums.sum\n        val numsSumSquare = nums.map(x => x *\
    \ x).sum\n        val numsSumSquareUp = nums.map(x => math.ceil(x * x)).sum\n\
    \        numsSumSquare + numsSumSquareUp", "        val sum = 0\n        val nums\
    \ = lst.map(_.toInt)\n        nums.foreach(x => sum += x * x)\n        math.ceil(sum).toLong",
  "        val nums = lst.map(_.toInt)\n        val sum = nums.sum\n        val squares\
    \ = nums.map(x => x * x)\n        val result = squares.sum + sum\n        val\
    \ round = math.ceil(result).toInt\n        round", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val sqSums = sums.map(x => x * x)\n        val sqSum = sqSums.sum\n        val\
    \ sqSum2 = sqSums.map(x => x * x)\n        val sqSum3 = sqSum2.map(x => x * x)\n\
    \        val sqSum4 = sqSum3.map(x => x * x)\n        val sqSum5 = sqSum4.map(x\
    \ => x * x)\n        val sqSum6 = sqSum5.map(x => x * x)\n        val sqSum7 =\
    \ sqSum6.map(x => x * x)\n        val sqSum8 = sqSum7.map(x => x * x)\n      \
    \  val sqSum9 = sqSum8.map(x => x * x)\n        val sqSum10 = sqSum9.map(x =>\
    \ x * x)\n        val sqSum11 = sqSum10.map(x => x * x)\n        val sqSum12 =\
    \ sqSum11.map(x => x * x)\n        val sqSum13 = sqSum12.map(x => x * x)\n   \
    \     val sqSum14 = sqSum13.map(x => x * x)\n        val sqSum15 = sqSum14.map(x\
    \ => x * x)\n        val sqSum16 = sqSum15.map(x => x * x)\n        val sqSum17\
    \ = sqSum16.map(x => x * x)\n        val sqSum18 = sqSum17.map(x => x * x)\n \
    \       val sqSum19 = sqSum18.map(x => x * x)\n        val sqSum20 = sqSum19.map(x\
    \ => x * x)\n        val sqSum21 = sqSum20.map(x => x * x)\n        val sqSum22\
    \ = sqSum21.map(x => x * x)\n        val sqSum23 = sqSum22.map(x => x * x)\n \
    \       val sqSum24 = sqSum23.map(x => x * x)\n        val sqSum25 = sqSum24.map(x\
    \ => x * x)\n        val sqSum26 = sqSum25.map(x => x * x)\n        val sqSum27\
    \ = sqSum26.map(x => x * x)\n        val sqSum28 = sqSum27.map(x => x * x)\n \
    \       val sqSum29 = sqSum28.map(x => x * x)\n        val sqSum30 = sqSum29.map(x\
    \ => x * x)\n        val sqSum31 = sqSum30.map(x => x * x)\n        val sqSum32\
    \ = sqSum31.map(x => x * x)\n        val sqSum", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val rounded = sums.map(x => math.ceil(x).toInt)\n        val roundedSum = rounded.sum\n\
    \        roundedSum * roundedSum", "        val nums = lst.map(_.toInt)\n    \
    \    val sum = nums.sum\n        val squares = nums.map(x => x * x)\n        val\
    \ result = squares.sum + sum\n        math.ceil(result).toLong", "        val\
    \ sumSquares = mutable.ListBuffer.empty[Float]\n        lst.foreach(x => sumSquares\
    \ += math.pow(x, 2))\n        sumSquares.sum", "        val sumSquares = lst.foldLeft(0.0f)\
    \ { (sum, element) => sum + element * element }\n        sumSquares.toLong", " \
    \       val sumSquares = mutable.ListBuffer.empty[Float]\n        lst.foreach(x\
    \ => sumSquares += math.pow(x, 2))\n        sumSquares.sum", "        val sumSquares\
    \ = mutable.ListBuffer.empty[Float]\n        lst.foreach(x => sumSquares += math.pow(x,\
    \ 2))\n        sumSquares.sum", "        val nums = lst.map(_.toInt)\n       \
    \ val sum = nums.sum\n        val sq = nums.map(x => x * x).sum\n        sq.toLong\
    \ + sum.toLong", "        val sum = 0\n        lst.foreach(x => sum += math.pow(x,\
    \ 2))\n        sum.toLong", "        val nums = lst.map(_.toInt)\n        val\
    \ sums = nums.map(x => x * x)\n        val sum = sums.sum\n        val rounded\
    \ = sums.map(x => math.ceil(x).toInt)\n        val result = rounded.sum\n    \
    \    result", "        val sumSquares = lst.foldLeft(0.0f) { (sum, element) =>\n\
    \            val square = math.pow(element, 2)\n            sum + square\n   \
    \     }\n        math.ceil(sumSquares).toLong", "        val sumSquares = mutable.ListBuffer.empty[Float]\n\
    \        lst.foreach(x => sumSquares += math.pow(x, 2))\n        sumSquares.sum",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sumsSum = sums.sum\n        val sumsSumRounded = sumsSum.roundToInt\n\
    \        sumsSumRounded", "        val nums = lst.map(_.toInt)\n        val sums\
    \ = nums.map(x => x * x)\n        val sum = sums.sum\n        val rounded = sums.map(x\
    \ => math.ceil(x)).sum\n        rounded", "        val sum = 0L\n        for(i\
    \ <- lst) {\n            sum += i * i\n        }\n        sum", "        val sumSquares\
    \ = mutable.ListBuffer.empty[Float]\n        lst.foreach(x => sumSquares += math.pow(x,\
    \ 2))\n        sumSquares.sum", "        val nums = lst.map(_.toInt)\n       \
    \ val sums = nums.map(x => x * x)\n        val sumsSum = sums.sum\n        val\
    \ sumsSumRounded = sumsSum.ceil.toInt\n        sumsSumRounded * sumsSumRounded",
  "        val sumSquares = lst.foldLeft(0.0f) {\n            (sum, element) => sum\
    \ + element * element\n        }\n        val roundedSum = sumSquares.toInt\n\
    \        val roundedSum2 = sumSquares.toInt\n        val roundedSum3 = sumSquares.toInt\n\
    \        val roundedSum4 = sumSquares.toInt\n        val roundedSum5 = sumSquares.toInt\n\
    \        val roundedSum6 = sumSquares.toInt\n        val roundedSum7 = sumSquares.toInt\n\
    \        val roundedSum8 = sumSquares.toInt\n        val roundedSum9 = sumSquares.toInt\n\
    \        val roundedSum10 = sumSquares.toInt\n        val roundedSum11 = sumSquares.toInt\n\
    \        val roundedSum12 = sumSquares.toInt\n        val roundedSum13 = sumSquares.toInt\n\
    \        val roundedSum14 = sumSquares.toInt\n        val roundedSum15 = sumSquares.toInt\n\
    \        val roundedSum16 = sumSquares.toInt\n        val roundedSum17 = sumSquares.toInt\n\
    \        val roundedSum18 = sumSquares.toInt\n        val roundedSum19 = sumSquares.toInt\n\
    \        val roundedSum20 = sumSquares.toInt\n        val roundedSum21 = sumSquares.toInt\n\
    \        val roundedSum22 = sumSquares.toInt\n        val roundedSum23 = sumSquares.toInt\n\
    \        val roundedSum24 = sumSquares.toInt\n        val roundedSum25 = sumSquares.toInt\n\
    \        val roundedSum26 = sumSquares.toInt\n        val roundedSum27 = sumSquares.toInt\n\
    \        val roundedSum28 = sumSquares.toInt\n        val roundedSum29 = sumSquares.toInt\n\
    \        val roundedSum30 = sumSquares.toInt\n        val roundedSum31 = sumSquares.toInt\n\
    \        val roundedSum32 = sumSquares.toInt\n        val roundedSum33 = sumSquares.toInt\n\
    \        val roundedSum34 = sumSquares.toInt\n        val roundedSum35 = sumSquares.toInt\n\
    \        val roundedSum36 = sumSquares.toInt\n        val roundedSum37 = sumSquares.toInt\n\
    \        val roundedSum38 = sumSquares.toInt\n        val ", "        val nums\
    \ = lst.map(x => math.ceil(x*x)).toList\n        nums.reduce((x,y) => x + y)",
  "        val nums = lst.map(x => math.ceil(x).toInt)\n        val sum = 0L\n   \
    \     for (i <- nums) {\n            sum += i\n        }\n        return sum",
  "        val nums = lst.map(_.toInt)\n        val sum = nums.sum\n        val squares\
    \ = nums.map(x => x * x)\n        val result = squares.sum + sum\n        val\
    \ ceil = math.ceil(result)\n        ceil.toLong", "        val sum = 0\n     \
    \   lst.foreach(x => sum += math.pow(x, 2))\n        sum.toLong", "        val\
    \ nums = lst.map(_.toInt)\n        val numsSum = nums.sum\n        val numsSumSquare\
    \ = nums.map(x => x*x).sum\n        val numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n     \
    \   val numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n        val\
    \ numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n        val numsSumSquareUp\
    \ = nums.map(x => math.ceil(x*x).toInt).sum\n        val numsSumSquareUp = nums.map(x\
    \ => math.ceil(x*x).toInt).sum\n        val numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n     \
    \   val numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n        val\
    \ numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n        val numsSumSquareUp\
    \ = nums.map(x => math.ceil(x*x).toInt).sum\n        val numsSumSquareUp = nums.map(x\
    \ => math.ceil(x*x).toInt).sum\n        val numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n     \
    \   val numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n        val\
    \ numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n        val numsSumSquareUp\
    \ = nums.map(x => math.ceil(x*x).toInt).sum\n        val numsSumSquareUp = nums.map(x\
    \ => math.ceil(x*x).toInt).sum\n        val numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n     \
    \   val numsSumSquareUp = nums.map(x => math.", "        val nums = lst.map(x\
    \ => math.ceil(x))\n        val sums = nums.map(x => math.pow(x, 2))\n       \
    \ val sum = sums.sum\n        return sum", "        val nums = lst.map(x => Math.ceil(x).toInt)\n\
    \        val sum = 0L\n        for (i <- 0 until nums.size) {\n            sum\
    \ += nums(i)*nums(i)\n        }\n        return sum", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sumOfSquares = sums.sum\n\
    \        sumOfSquares.toLong", "        val result = mutable.ListBuffer.empty[Float]\n\
    \        lst.foreach(x => result += math.pow(x, 2))\n        result.sum", "  \
    \      val sum = 0L\n        val nums = lst.map(x => math.ceil(x).toInt)\n   \
    \     val numsSum = nums.sum\n        val numsSumSquare = nums.map(x => x*x).sum\n\
    \        val numsSumSquare = numsSumSquare.toLong\n        sum = sum + numsSumSquare\n\
    \        return sum", "        val nums = lst.map(_.toInt)\n        val sums =\
    \ nums.map(x => x * x)\n        val sumsSum = sums.sum\n        val sumsSumRounded\
    \ = sumsSum.toLong\n        sumsSumRounded", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sumsSum = sums.sum\n   \
    \     val sumsSumRounded = sumsSum.roundToInt\n        sumsSumRounded", "    \
    \    val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n  \
    \      val sum = sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n\
    \        rounded", "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x,\
    \ 2))\n        sum", "        val nums = lst.map(_.toInt)\n        val sums =\
    \ nums.map(x => x * x)\n        val sum = sums.sum\n        val rounded = sums.map(x\
    \ => math.ceil(x).toInt)\n        rounded.sum", "        val sum = 0\n       \
    \ lst.foreach(x => sum += math.pow(x, 2))\n        math.ceil(sum)", "        val\
    \ nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val\
    \ sumsSum = sums.sum\n        val sumsSumRounded = sumsSum.roundToInt\n      \
    \  sumsSumRounded", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sumsOfSquares = sums.sum\n        sumsOfSquares.toLong",
  "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n       \
    \ sum", "        val nums = lst.map(_.toInt)\n        val sum = nums.sum\n   \
    \     val squares = nums.map(x => x * x)\n        val result = squares.sum + sum\n\
    \        math.ceil(result)", "        val sumSquares = lst.foldLeft(0.0f){ (sum,\
    \ num) =>\n            val newSum = sum + num * num\n            val newNum =\
    \ num.toInt\n            val newSumRound = newSum.toLong\n            newSumRound\
    \ / newNum\n        }\n        sumSquares.toLong", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val rounded = sums.map(x => math.ceil(x)).sum\n        rounded", "        val\
    \ result = mutable.ArrayBuffer.empty[Float]\n        lst.foreach(x => result +=\
    \ math.pow(x, 2))\n        result.sum", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val round = math.ceil(sum)\n        val roundedSums = sums.map(x => math.round(x\
    \ * round))\n        val roundedSum = roundedSums.sum\n        roundedSum", " \
    \       val result = mutable.ArrayBuffer.empty[Float]\n        lst.foreach(x =>\
    \ result += Math.ceil(x * x))\n        result.sum", "        val sumSquares =\
    \ mutable.ListBuffer.empty[Float]\n        lst.foreach(x => sumSquares += math.pow(x,\
    \ 2))\n        sumSquares.sum", "        val nums = lst.map(_.toInt)\n       \
    \ val sums = nums.map(x => x * x)\n        val sum = sums.sum\n        val squares\
    \ = sums.map(x => x * x)\n        val squareSum = squares.sum\n        val squareSumRounded\
    \ = squareSum.map(_.ceil.toInt).sum\n        squareSumRounded", "        val nums\
    \ = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val sum\
    \ = sums.sum\n        val rounded = sums.map(_.ceil)\n        val result = rounded.sum\n\
    \        result", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sum = sums.sum\n        val rounded = sums.map(_.ceil)\n\
    \        val roundedSum = rounded.sum\n        roundedSum", "        val sumSquares\
    \ = mutable.ListBuffer.empty[Float]\n        lst.foreach(x => sumSquares += math.pow(x,\
    \ 2))\n        sumSquares.sum", "        val nums = lst.map(_.toInt)\n       \
    \ val sums = nums.map(x => x * x)\n        val sum = sums.sum\n        val squares\
    \ = sums.map(x => x * x)\n        val rounded = squares.map(x => math.ceil(x).toInt)\n\
    \        rounded.sum", "        val nums = lst.map(_.toInt)\n        val numsSorted\
    \ = nums.sortBy(_)\n        val sum = 0L\n        for (i <- 0 until numsSorted.length)\
    \ {\n            sum += numsSorted(i) * numsSorted(i)\n        }\n        sum",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val sumOfSquares = sums.map(x => x * x).sum\n\
    \        val ceilings = nums.map(x => Math.ceil(x))\n        val ceilingSum =\
    \ ceilings.sum\n        val ceilingSumOfSquares = ceilings.map(x => x * x).sum\n\
    \        ceilingSumOfSquares + sumOfSquares", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val rounded = sums.map(x => math.ceil(x)).sum\n        rounded", "        val\
    \ nums = lst.map(_.toInt)\n        val numsSorted = nums.sortBy(_.toInt)\n   \
    \     val numsSortedUp = numsSorted.map(_.ceil)\n        val numsSortedUpSorted\
    \ = numsSortedUp.sortBy(_.toInt)\n        val numsSortedUpSortedSum = numsSortedUpSorted.map(_.sum)\n\
    \        return numsSortedUpSortedSum.sum", "        val sumSquares = lst.foldLeft(0.0f)\
    \ { (sum, num) => sum + num * num }\n        val rounded = sumSquares.toInt\n\
    \        val ceiling = math.ceil(sumSquares).toInt\n        ceiling - rounded",
  "        val nums = lst.map(_.toInt)\n        val numsSum = nums.sum\n        val\
    \ numsSumSquare = nums.map(x => x*x).sum\n        val numsSumSquareUp = numsSumSquare.map(_.ceil)\n\
    \        val numsSumSquareUp2 = numsSumSquareUp.map(_.toInt)\n        val numsSumSquareUp3\
    \ = numsSumSquareUp2.sum\n        numsSumSquareUp3", "        val n = lst.length\n\
    \        val sumSquares = mutable.ListBuffer.empty[Float]\n        for(i <- 0\
    \ until n){\n            val x = lst(i)\n            val y = math.ceil(x)\n  \
    \          sumSquares += y*y\n        }\n        sumSquares.sum", "        val\
    \ nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val\
    \ sum = sums.sum\n        val sum2 = sums.map(x => math.ceil(x)).sum\n       \
    \ sum + sum2", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sum = sums.sum\n        val squares = sums.map(x => x\
    \ * x)\n        val squareSum = squares.sum\n        val round = squareSum.map(x\
    \ => math.ceil(x).toInt)\n        val result = round.sum\n        result", " \
    \       val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n      \
    \  sum", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x =>\
    \ x * x)\n        val sum = sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n\
    \        sum + rounded", "        val sum = 0\n        for(x <- lst) sum += x\n\
    \        sum.toLong", "        val sum = 0\n        lst.foreach(x => sum += math.pow(x,\
    \ 2))\n        sum.toLong", "        val nums = lst.map(_.toInt)\n        val\
    \ sums = nums.map(x => x * x)\n        val sumsSum = sums.sum\n        sumsSum.toLong",
  "        val sum = 0\n        lst.foreach(x => sum += math.pow(x, 2))\n        sum.toLong",
  "        val nums = lst.map(_.toInt)\n        val numsSum = nums.sum\n        val\
    \ numsSumSquare = nums.map(x => x * x).sum\n        val numsSumSquareUp = nums.map(x\
    \ => math.ceil(x)).map(x => x * x).sum\n        val numsSumSquareUp2 = nums.map(x\
    \ => math.ceil(x)).map(x => x * x).sum\n        val numsSumSquareUp3 = nums.map(x\
    \ => math.ceil(x)).map(x => x * x).sum\n        val numsSumSquareUp4 = nums.map(x\
    \ => math.ceil(x)).map(x => x * x).sum\n        val numsSumSquareUp5 = nums.map(x\
    \ => math.ceil(x)).map(x => x * x).sum\n        val numsSumSquareUp6 = nums.map(x\
    \ => math.ceil(x)).map(x => x * x).sum\n        val numsSumSquareUp7 = nums.map(x\
    \ => math.ceil(x)).map(x => x * x).sum\n        val numsSumSquareUp8 = nums.map(x\
    \ => math.ceil(x)).map(x => x * x).sum\n        val numsSumSquareUp9 = nums.map(x\
    \ => math.ceil(x)).map(x => x * x).sum\n        val numsSumSquareUp10 = nums.map(x\
    \ => math.ceil(x)).map(x => x * x).sum\n        val numsSumSquareUp11 = nums.map(x\
    \ => math.ceil(x)).map(x => x * x).sum\n        val numsSumSquareUp12 = nums.map(x\
    \ => math.ceil(x)).map(x => x * x).sum\n        val numsSumSquareUp13 = nums.map(x\
    \ => math.ceil(x)).map(x => x * x).sum\n        val numsSumSquareUp14 = nums.map(x\
    \ => math.ceil(x)).map(x => x * x).sum\n        val numsSumSquareUp15 = nums.map(x\
    \ => math.ceil(x)).map(x => x * x).sum\n        val numsSumSquareUp16 = nums.map(x\
    \ => math.ceil(x)).map(x => x * x).sum\n        val numsSumSquareUp17 = nums.map(x\
    \ => math.ceil(x)).map(x => x * x).sum\n        val numsSumSquareUp18 = nums.map(x\
    \ => math.ceil(x)).map(x => x * x).sum\n        val numsSumSquareUp19 = nums.map(x\
    \ => math.ceil(x)).map(x => x * x).sum\n        val numsSumSquareUp20 = nums.",
  "        val sum = 0\n        lst.foreach(x => sum += math.pow(x, 2))\n        sum",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val squares = sums.map(x => x * x)\n    \
    \    val rounded = squares.map(x => math.ceil(x).toInt)\n        val sum = rounded.sum\n\
    \        sum", "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x,\
    \ 2))\n        sum", "        val n = lst.size\n        val sumSquares = mutable.ArrayBuffer.empty[Float]\n\
    \        for (i <- 0 until n) {\n            val x = math.ceil(lst.apply(i).toFloat)\n\
    \            sumSquares += x * x\n        }\n        sumSquares.sum", "      \
    \  val sumSquares = mutable.ListBuffer.empty[Float]\n        lst.foreach(x =>\
    \ sumSquares += math.pow(x, 2))\n        sumSquares.sum", "        val nums =\
    \ lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val sum =\
    \ sums.sum\n        val sqSums = sums.map(x => x * x)\n        val sqSum = sqSums.sum\n\
    \        val sqSum2 = sqSums.map(x => x * x).sum\n        val sqSum3 = sqSums.map(x\
    \ => x * x).map(x => x * x).sum\n        val sqSum4 = sqSums.map(x => x * x).map(x\
    \ => x * x).map(x => x * x).sum\n        val sqSum5 = sqSums.map(x => x * x).map(x\
    \ => x * x).map(x => x * x).map(x => x * x).sum\n        val sqSum6 = sqSums.map(x\
    \ => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).sum\n\
    \        val sqSum7 = sqSums.map(x => x * x).map(x => x * x).map(x => x * x).map(x\
    \ => x * x).map(x => x * x).map(x => x * x).sum\n        val sqSum8 = sqSums.map(x\
    \ => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x\
    \ => x * x).map(x => x * x).sum\n        val sqSum9 = sqSums.map(x => x * x).map(x\
    \ => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x\
    \ => x * x).map(x => x * x).sum\n        val sqSum10 = sqSums.map(x => x * x).map(x\
    \ => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x\
    \ => x * x).map(x => x * x).map(x => x * x).sum\n        val sqSum11 = sqSums.map(x\
    \ => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x\
    \ => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).sum\n\
    \        val sqSum12 = sqSums.map(x => x * x).map(x => x * x).map(x => x * x).map(x\
    \ => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x\
    \ => x * x).map(x => x * x).sum\n        val sqSum13 = sqSums.map(x => x * x).map(x\
    \ => x * x).map(x => x * ", "        val nums = lst.map(_.toInt)\n        val\
    \ sums = nums.map(x => x * x)\n        val sum = sums.sum\n        val rounded\
    \ = sums.map(_.ceil)\n        val roundedSum = rounded.sum\n        roundedSum\
    \ * roundedSum", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sum = sums.sum\n        val rounded = sums.map(x => math.ceil(x).toInt)\n\
    \        rounded.sum", "        val sum = 0\n        lst.foreach(x => sum += math.pow(x,\
    \ 2))\n        sum.toLong", "        val nums = lst.map(_.toInt)\n        val\
    \ numsSum = nums.sum\n        val numsSumSquare = nums.map(x => x * x).sum\n \
    \       val numsSumSquareRound = numsSumSquare.map(x => math.ceiling(x)).sum\n\
    \        numsSumSquareRound + numsSumSquare", "        val nums = lst.map(_.toInt)\n\
    \        val sum = nums.sum\n        val sqr = nums.map(x => x * x).sum\n    \
    \    val round = math.ceil(sqr)\n        sum + round", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sumsSum = sums.sum\n   \
    \     val sumsSumRounded = sumsSum.toLong\n        sumsSumRounded", "        val\
    \ nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val\
    \ sumsSum = sums.sum\n        val sumsSumRounded = sumsSum.roundToInt\n      \
    \  sumsSumRounded", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sum = sums.sum\n        val round = math.ceil(sum)\n\
    \        val result = round * round\n        result", "        val sum = 0\n \
    \       lst.foreach(x => sum += math.pow(x, 2))\n        sum.toLong", "      \
    \  val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n    \
    \    val sum = sums.sum\n        val round = math.ceil(sum)\n        val result\
    \ = round * round\n        result", "        val sum = 0\n        for(i <- 0 until\
    \ lst.size) {\n            sum += lst(i) * lst(i)\n        }\n        sum", " \
    \       val sumSquares = mutable.ListBuffer.empty[Float]\n        lst.foreach(x\
    \ => sumSquares += math.pow(x, 2))\n        sumSquares.sum", "        val nums\
    \ = lst.map(_.toInt)\n        val sum = nums.sum\n        val squares = nums.map(x\
    \ => x * x)\n        val result = squares.sum + sum\n        val rounded = result.ceil.toLong\n\
    \        result", "        val nums = lst.map(_.toInt)\n        val numsSorted\
    \ = nums.sorted\n        val sum = 0L\n        var i = 0\n        while (i < numsSorted.length)\
    \ {\n            val square = numsSorted(i) * numsSorted(i)\n            sum +=\
    \ square\n            i += 1\n        }\n        sum", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sumsSum = sums.sum\n   \
    \     val sumsSumRounded = sumsSum.roundToInt\n        sumsSumRounded", "    \
    \    val sumSquares = mutable.ListBuffer[Float]()\n        lst.foreach(x => {\n\
    \            sumSquares += math.pow(x, 2)\n        })\n        sumSquares.sum",
  "        val nums = lst.map(_.toInt)\n        val numsSum = nums.sum\n        val\
    \ numsSumSquare = nums.map(x => x * x).sum\n        numsSumSquare.toLong", " \
    \       val sumSquares = mutable.ListBuffer.empty[Float]\n        lst.foreach(x\
    \ => sumSquares += math.pow(x, 2))\n        sumSquares.sum", "        val sumSquares\
    \ = mutable.ListBuffer.empty[Float]\n        lst.foreach(x => sumSquares += math.pow(x,\
    \ 2))\n        sumSquares.sum", "        val sum = 0\n        lst.foreach(x =>\
    \ sum += math.pow(x, 2))\n        sum.toLong", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sumsSum = sums.sum\n   \
    \     val sumsSumRounded = sumsSum.map(_.ceil).toInt\n        sumsSumRounded *\
    \ sumsSumRounded", "        val sumSquares = mutable.ListBuffer.empty[Float]\n\
    \        lst.foreach(x => sumSquares += math.pow(x, 2))\n        sumSquares.sum"]
stop_tokens:
- "\n    }\n"
