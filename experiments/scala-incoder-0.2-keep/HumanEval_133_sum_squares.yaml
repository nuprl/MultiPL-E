name: HumanEval_133_sum_squares
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a list of numbers.\n    // You need to return the sum of squared\
  \ numbers in the given list,\n    // round each element in the list to the upper\
  \ int(Ceiling) first.\n    // Examples:\n    // For lst = [1,2,3] the output should\
  \ be 14\n    // For lst = [1,4,9] the output should be 98\n    // For lst = [1,3,5,7]\
  \ the output should be 84\n    // For lst = [1.4,4.2,0] the output should be 29\n\
  \    // For lst = [-2.4,1,1] the output should be 6\n    def sumSquares(lst : List[Float])\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat))) == (14l));\n    assert(sumSquares((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat))) == (14l));\n    assert(sumSquares((List[Float](1.0f.toFloat,\
  \ 3.0f.toFloat, 5.0f.toFloat, 7.0f.toFloat))) == (84l));\n    assert(sumSquares((List[Float](1.4f.toFloat,\
  \ 4.2f.toFloat, 0.0f.toFloat))) == (29l));\n    assert(sumSquares((List[Float](-2.4f.toFloat,\
  \ 1.0f.toFloat, 1.0f.toFloat))) == (6l));\n    assert(sumSquares((List[Float](100.0f.toFloat,\
  \ 1.0f.toFloat, 15.0f.toFloat, 2.0f.toFloat))) == (10230l));\n    assert(sumSquares((List[Float](10000.0f.toFloat,\
  \ 10000.0f.toFloat))) == (200000000l));\n    assert(sumSquares((List[Float](-1.4f.toFloat,\
  \ 4.6f.toFloat, 6.3f.toFloat))) == (75l));\n    assert(sumSquares((List[Float](-1.4f.toFloat,\
  \ 17.9f.toFloat, 18.9f.toFloat, 19.9f.toFloat))) == (1086l));\n    assert(sumSquares((List[Float](0.0f.toFloat)))\
  \ == (0l));\n    assert(sumSquares((List[Float](-1.0f.toFloat))) == (1l));\n   \
  \ assert(sumSquares((List[Float](-1.0f.toFloat, 1.0f.toFloat, 0.0f.toFloat))) ==\
  \ (2l));\n    }\n\n}\n"
completions: ["        val nums = lst.map(_.toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sum = sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n\
    \        rounded", "        val nums = lst.map(_.toInt)\n        val sum = nums.sum\n\
    \        val sq = nums.map(x => x * x).sum\n        sq.toLong + sum.toLong", " \
    \       val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sumsUp = sums.map(x => math.ceil(x))\n        val sumsUp2 = sumsUp.map(x\
    \ => math.round(x))\n        val sumsUp3 = sumsUp2.map(x => math.floor(x))\n \
    \       val sumsUp4 = sumsUp3.map(x => math.round(x))\n        val sumsUp5 = sumsUp4.map(x\
    \ => math.ceil(x))\n        val sumsUp6 = sumsUp5.map(x => math.round(x))\n  \
    \      val sumsUp7 = sumsUp6.map(x => math.ceil(x))\n        val sumsUp8 = sumsUp7.map(x\
    \ => math.round(x))\n        val sumsUp9 = sumsUp8.map(x => math.ceil(x))\n  \
    \      val sumsUp10 = sumsUp9.map(x => math.round(x))\n        val sumsUp11 =\
    \ sumsUp10.map(x => math.ceil(x))\n        val sumsUp12 = sumsUp11.map(x => math.round(x))\n\
    \        val sumsUp13 = sumsUp12.map(x => math.ceil(x))\n        val sumsUp14\
    \ = sumsUp13.map(x => math.round(x))\n        val sumsUp15 = sumsUp14.map(x =>\
    \ math.ceil(x))\n        val sumsUp16 = sumsUp15.map(x => math.round(x))\n   \
    \     val sumsUp17 = sumsUp16.map(x => math.ceil(x))\n        val sumsUp18 = sumsUp17.map(x\
    \ => math.round(x))\n        val sumsUp19 = sumsUp18.map(x => math.ceil(x))\n\
    \        val sumsUp20 = sumsUp19.map(x => math.round(x))\n        val sumsUp21\
    \ = sumsUp20.map(x => math.ceil(x))\n        val sumsUp22 = sumsUp21.map(x =>\
    \ math.round(x))\n        val sumsUp23 = sumsUp22.map(x => math.ceil(x))\n   \
    \     val sumsUp24 = sumsUp23.map(x => math.round(x))\n        val sumsUp25 =\
    \ sumsUp24.map(x => math.ceil(x))\n        val sumsUp26 = sumsUp25.map(x => math.round(x))\n\
    \        val sumsUp27 = sumsUp26.map(x => math.ceil(x))\n        val sumsUp28\
    \ = sumsUp27.map(x => math.round", "        val nums = lst.map(_.toInt)\n    \
    \    val sum = nums.sum\n        val squares = nums.map(x => x * x)\n        val\
    \ result = squares.sum + sum\n        math.round(result)", "        val sumSquares\
    \ = lst.map(x => math.pow(x, 2)).sum\n        val roundUp = lst.map(x => math.ceil(x)).sum\n\
    \        sumSquares + roundUp", "        val n = lst.size\n        val sum = 0L\n\
    \        val sqSum = lst.map(x => math.pow(x, 2)).sum\n        val round = math.ceil(lst.max)\n\
    \        for(i <- 0 until n) {\n            sum += sqSum * round(lst(i))\n   \
    \     }\n        return sum", "        val nums = lst.map(_.toInt)\n        val\
    \ sums = nums.map(x => x * x)\n        val sum = sums.sum\n        val rounded\
    \ = sums.map(x => math.ceil(x)).sum\n        rounded", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val rounded = sums.map(x => math.ceil(x)).sum\n        rounded", "        val\
    \ sum = 0\n        lst.foreach(x => sum += math.pow(x, 2))\n        sum", "  \
    \      val nums = lst.map(x => math.ceil(x).toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sum = sums.sum\n        return sum", "        val nums\
    \ = lst.map(_.toInt)\n        val sum = nums.sum\n        val squareSum = nums.map(x\
    \ => x * x).sum\n        val squareSum2 = nums.map(x => x * x).map(x => x * x).sum\n\
    \        val squareSum3 = nums.map(x => x * x).map(x => x * x).map(x => x * x).sum\n\
    \        val squareSum4 = nums.map(x => x * x).map(x => x * x).map(x => x * x).map(x\
    \ => x * x).sum\n        val squareSum5 = nums.map(x => x * x).map(x => x * x).map(x\
    \ => x * x).map(x => x * x).map(x => x * x).sum\n        val squareSum6 = nums.map(x\
    \ => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x\
    \ => x * x).sum\n        val squareSum7 = nums.map(x => x * x).map(x => x * x).map(x\
    \ => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).sum\n\
    \        val squareSum8 = nums.map(x => x * x).map(x => x * x).map(x => x * x).map(x\
    \ => x * x).map(x => x * x).map(x => x * x).map(x => x * x).sum\n        val squareSum9\
    \ = nums.map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x\
    \ => x * x).map(x => x * x).map(x => x * x).map(x => x * x).sum\n        val squareSum10\
    \ = nums.map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x\
    \ => x * x).map(x => x * x).map(x => x * x).map(x => x * x).sum\n        val squareSum11\
    \ = nums.map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x\
    \ => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).sum\n\
    \        val squareSum12 = nums.map(x => x * x).map(x => x * x).map(x => x * x).map(x\
    \ => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x\
    \ => x * x).sum\n        val squareSum13 = nums.map(x => x * x).map(x => x * x).map(x\
    \ => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x ", "       \
    \ val sum = 0L\n        for(i <- lst) {\n            sum += i\n        }\n   \
    \     sum", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sumsOfSquares = sums.map(x => x * x)\n        val sumsOfSquaresUpToCeil\
    \ = sumsOfSquares.map(x => math.ceil(x))\n        val sumsOfSquaresUpToCeilSum\
    \ = sumsOfSquaresUpToCeil.reduce((x, y) => x + y)\n        return sumsOfSquaresUpToCeilSum",
  "        val sum = 0\n        lst.foreach(x => sum += math.pow(x, 2))\n        sum.toLong",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n\
    \        rounded", "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x,\
    \ 2))\n        math.ceil(sum)", "        val nums = lst.map(x => math.ceil(x *\
    \ x)).toList\n        val sum = nums.sum\n        val sq = nums.map(x => x * x).sum\n\
    \        sq.toLong + sum.toLong", "        val nums = lst.map(_.toInt)\n     \
    \   val sums = nums.map(x => x * x)\n        val sum = sums.sum\n        val rounded\
    \ = sums.map(x => math.ceil(x).toInt)\n        rounded.sum", "        val nums\
    \ = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val sumsSum\
    \ = sums.sum\n        val sumsSumRounded = sumsSum.roundToInt\n        sumsSumRounded",
  "        val nums = lst.map(_.toInt)\n        val numsSum = nums.sum\n        val\
    \ numsSumSquare = nums.map(x => x*x).sum\n        val numsSumSquareUp = nums.map(x\
    \ => math.ceil(x*x).toInt).sum\n        val numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n     \
    \   val numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n        val\
    \ numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n        val numsSumSquareUp\
    \ = nums.map(x => math.ceil(x*x).toInt).sum\n        val numsSumSquareUp = nums.map(x\
    \ => math.ceil(x*x).toInt).sum\n        val numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n     \
    \   val numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n        val\
    \ numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n        val numsSumSquareUp\
    \ = nums.map(x => math.ceil(x*x).toInt).sum\n        val numsSumSquareUp = nums.map(x\
    \ => math.ceil(x*x).toInt).sum\n        val numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n\
    \        val numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n     \
    \   val numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n        val\
    \ numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n        val numsSumSquareUp\
    \ = nums.map(x => math.ceil(x*x).toInt).sum\n        val numsSumSquareUp = nums.map(x\
    \ => math.ceil(x*x).toInt).sum\n        val numsSumSquareUp = nums.map(x => math.ceil(x*x).toInt).sum\n\
    \        val numsSumSquareUp = nums.map(x => math."]
stop_tokens:
- "\n    }\n"
