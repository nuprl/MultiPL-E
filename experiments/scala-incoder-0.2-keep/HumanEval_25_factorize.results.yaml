language: scala
name: HumanEval_25_factorize
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorization = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSum = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationCountSumsSums = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationCountSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n  \
    \      val factorizationCountSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSums\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsz93uvzb.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsz93uvzb.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m  \
    \ |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsz93uvzb.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsz93uvzb.scala:16:28\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpsz93uvzb.scala:17:33 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsz93uvzb.scala:18:38 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationCount\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \                            "
  stdout: ''
  timestamp: 1659798020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCounts = mutable.ListBuffer[Long]()\n        val factorizationCountSum\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountSums = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSumsSum = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountSumsSums = mutable.ListBuffer[Long]()\n        val factorizationCountSumsSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSumsSumsSumsSum = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2wz1go_i.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2wz1go_i.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp2wz1go_i.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp2wz1go_i.scala:17:29 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2wz1go_i.scala:18:33 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:"
  stdout: ''
  timestamp: 1659798020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSize = mutable.ArrayBuffer.empty[Int]\n        val\
    \ factorizationListSizeSize = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSize2\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSize3 = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSize4 = mutable.ArrayBuffer.empty[Int]\n   \
    \     val factorizationListSizeSize5 = mutable.ArrayBuffer.empty[Int]\n      \
    \  val factorizationListSizeSize6 = mutable.ArrayBuffer.empty[Int]\n        val\
    \ factorizationListSizeSize7 = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSize8\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSize9 = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSize10 = mutable.ArrayBuffer.empty[Int]\n  \
    \      val factorizationListSizeSize11 = mutable.ArrayBuffer.empty[Int]\n    \
    \    val factorizationListSizeSize12 = mutable.ArrayBuffer.empty[Int]\n      \
    \  val factorizationListSizeSize13 = mutable.ArrayBuffer.empty[Int]\n        val\
    \ factorizationListSizeSize14 = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSize15\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSize16 =\
    \ mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSize17 = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSize18 = mutable.ArrayBuffer.empty[Int]\n  \
    \      val factorizationListSizeSize19 = mutable.ArrayBuffer.empty[Int]\n    \
    \    val factorizationListSizeSize20 = mutable.ArrayBuffer.empty[Int]\n      \
    \  val factorizationListSizeSize21 = mutable.ArrayBuffer.empty[Int]\n        val\
    \ factorizationListSizeSize22 = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSize23\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSize24 =\
    \ mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSize25 = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSize26 = mutable.ArrayBuffer.empty[Int]\n  \
    \      val factorizationListSizeSize27 = mutable.ArrayBuffer.empty\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpek1ji5tj.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpek1ji5tj.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList\e[0m =\
    \ mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m          \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpek1ji5tj.scala:16:36 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizationListSize\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpek1ji5tj.scala:17:40\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorizationListSizeSize\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                        Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpek1ji5tj.scala:18:41 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorizationListSizeSize2\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \                                  ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                            Not found: mutable\n\e[3"
  stdout: ''
  timestamp: 1659798019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        var i = 2\n        while(i <= n) {\n\
    \            val f = math.gcd(i, n)\n            if(f == 1) {\n              \
    \  factors += i\n            }\n            i += f\n        }\n        factors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe8lquu8u.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpe8lquu8u.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mf\e[0m = math.gcd(i,\
    \ n)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    value gcd is not a member of math\n2 errors found\n"
  stdout: ''
  timestamp: 1659798019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2L\n        while (i <= n) {\n            if (n % i == 0) {\n\
    \                factors += i\n                primes += i\n                i\
    \ += 1\n            }\n        }\n        factors.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp80z2lxa0.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp80z2lxa0.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isFactorization = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactor\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphh_ra7r9.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphh_ra7r9.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36misPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmphh_ra7r9.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphh_ra7r9.scala:14:22 -----------------------"
  stdout: ''
  timestamp: 1659798019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ListBuffer.empty[Long]\n        val factorization\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCounts = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCountPairs = mutable.ListBuffer.empty[(Long, Long)]\n        val\
    \ factorizationCountPairsSorted = mutable.ListBuffer.empty[(Long, Long)]\n   \
    \     val factorizationCountPairsSortedByCount = mutable.ListBuffer.empty[(Long,\
    \ Long)]\n        val factorizationCountPairsSortedByCountSorted = mutable.ListBuffer.empty[(Long,\
    \ Long)]\n        val factorizationCountPairsSortedByCountSortedByCount = mutable.ListBuffer.empty[(Long,\
    \ Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSorted\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCount\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSorted\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCount\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSorted\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSortedByCount\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSorted\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCount\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSorted\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCount\
    \ = mutable.ListBuffer.empty[(Long, Long\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqf0ts97d.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqf0ts97d.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqf0ts97d.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqf0ts97d.scala:16:27\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mprimeFactors\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpqf0ts97d.scala:17:28 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpqf0ts97d.scala:18:33 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m         \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1659798020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n    \
    \    val primeFactorizationPrimeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorization\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy0wvydn_.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy0wvydn_.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpy0wvydn_.scala:15:29 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpy0wvydn_.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpy0wvydn_.scala:17:33 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpy0wvydn_.scala:18:34 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                 "
  stdout: ''
  timestamp: 1659798020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        for(i <- 2 to n by 2){\n        \
    \    val p = i\n            for(j <- 2 to n by 2){\n                if(p * j ==\
    \ n){\n                    factors += p\n                    break\n         \
    \       }\n            }\n        }\n        factors.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3t_sevrh.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp3t_sevrh.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m to n by \e[31m2\e\
    [0m){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m    \
    \                  Found:    (n : Long)\n\e[31m   |\e[0m                     \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3t_sevrh.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mfor\e[0m(j\
    \ <- \e[31m2\e[0m to n by \e[31m2\e[0m){\n\e[31m\e[31m   |\e[0m              \
    \            ^\e[0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\
    \e[31m   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp3t_sevrh.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factors = mutable.ArrayBuffer.empty[Long]\n        val primeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactors = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationPrimes = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimesPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimesPrimeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimesPrimeFactorsPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimesPrimeFactorsPrimesPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimesPrimeFactorsPrimesPrimesPrimeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimesPrimeFactorsPrimesPrimesPrimesPrimeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimesPrimeFactorsPrimesPrimesPrimesPrimesPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimesPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimesPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimesPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimesPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimesPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimesPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw20kb2lg.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw20kb2lg.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimesPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimeFactors\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimesPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimeFactors\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  factorizationPrimesPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimeFactors\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpw20kb2lg.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpw20kb2lg.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpw20kb2lg.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]"
  stdout: ''
  timestamp: 1659798020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.Array\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpriczr0ui.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpriczr0ui.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpriczr0ui.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpriczr0ui.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Nami"
  stdout: ''
  timestamp: 1659798020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n) \n\
    \        factorization.foreach(f => factors += f)\n        factors.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7ulect5.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpp7ulect5.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\
    \ \n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m \
    \                           Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val factorization = factorization(n)\
    \ \n        factorization foreach { f =>\n            factors += f\n        }\n\
    \        factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyyfcin1d.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpyyfcin1d.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\
    \ \n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m \
    \                           Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2L\n        while(i <= n) {\n            val p = i\n        \
    \    while(p % i == 0) {\n                p /= i\n                factors += p\n\
    \                primes += i\n            }\n            i += 1\n        }\n \
    \       factors.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpklcbst1g.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpklcbst1g.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpklcbst1g.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                p /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean p.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659798019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMin = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountMins = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMin\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMins = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMax = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountMinMaxs = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountMaxMinMax = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMaxMinMaxs = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMinMaxMax = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxMaxMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxMaxMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMin\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl7uxl4lf.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl7uxl4lf.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpl7uxl4lf.scala:15:29 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpl7uxl4lf.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpl7uxl4lf.scala:17:34 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizationCounts\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl7uxl4lf.scala:18:36 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountMax\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong"
  stdout: ''
  timestamp: 1659798020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val primeFactorsCount\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb0eklxn8.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpb0eklxn8.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpb0eklxn8.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpb0eklxn8.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpb0eklxn8.scala:24:12 -"
  stdout: ''
  timestamp: 1659798019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n) //factorization\
    \ is list of factors of given number\n        factorization foreach { f =>\n \
    \           factors += f\n        }\n        factors\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb0s7gldi.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpb0s7gldi.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\
    \ \e[34m//factorization is list of factors of given number\e[0m\n\e[31m\e[31m\
    \   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m                \
    \            Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphmh_djko.scala:38:87 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mfactorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                                       ^\e[0m\n\e[31m   |\e[0m              \
    \                         expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphmh_djko.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mfactorizationListSizeSizeSizeSize\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mfactorizationListSizeSizeSizeSize is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizationListSizeSizeSizeSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphmh_djko.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationListSizeSizeSizeSizeSizeSize\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationListSizeSizeSizeSizeSizeSize is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationListSizeSizeSizeSizeSizeSize\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphmh_djko.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationListSizeSizeSizeSizeSizeSizeSize\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorization"
  stdout: ''
  timestamp: 1659798019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ArrayBuffer.empty[Long]\n        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactors = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationFactorsCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsCount2\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsCount3 =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsCount4 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorsCount5 = mutable.ArrayBuffer.empty[Long]\n  \
    \      val factorizationFactorsCount6 = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationFactorsCount7 = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationFactorsCount8 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationFactorsCount9 = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsCount10\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsCount11 =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsCount12 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorsCount13 = mutable.ArrayBuffer.empty[Long]\n \
    \       val factorizationFactorsCount14 = mutable.ArrayBuffer.empty[Long]\n  \
    \      val factorizationFactorsCount15 = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationFactorsCount16 = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationFactorsCount17 = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationFactorsCount18 = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationFactorsCount19 = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationFactorsCount20 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationFactorsCount21 = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsCount22\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsCount23 =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsCount24 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorsCount25 = mut\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb2fq5yf6.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpb2fq5yf6.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpb2fq5yf6.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpb2fq5yf6.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpb2fq5yf6.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpb2fq5yf6.scala:19"
  stdout: ''
  timestamp: 1659798020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factors = mutable.ArrayBuffer.empty[Long]\n        val factorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimes = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationPrimeFactors = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountSumOfSquares\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountSumOfSquaresOf\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountSumOfSquaresOfSquares\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountSumOfSquaresOfSquaresOf\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountSumOfSquaresOfSquaresOfSquares\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountSumOfSquaresOfSquaresOfSquaresOf\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountSumOfSquaresOfSquaresOfSquaresOfSquares\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountSumOfSquaresOfSquaresOfSquaresOfSquaresOf\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountSumOfSquaresOfSquaresOfSquaresOfSquaresOf\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountSumOfSquaresOfSquaresOfSquaresOfSquaresOf\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountSumOfSquaresOfSquaresOfSquaresOfSquaresOf\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountSumOfSquaresOfSquaresOfSquares\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf8mk1m8p.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf8mk1m8p.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimeFactorsCountSumOfSquaresOfSquaresOfSquaresOfSquaresOf\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimeFactorsCountSumOfSquaresOfSquaresOfSquaresOfSquaresOf\
    \ is already defined as \e[33mvalue\e[0m \e[35mfactorizationPrimeFactorsCountSumOfSquaresOfSquaresOfSquaresOfSquaresOf\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf8mk1m8p.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mfactorizationPrimeFactorsCountSumOfSquaresOfSquaresOfSquaresOfSquaresOf\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimeFactorsCountSumOfSquaresOfSquaresOfSquaresOfSquaresOf\
    \ is already defined as \e[33mvalue\e[0m \e[35mfactorizationPrimeFactorsCountSumOfSquaresOfSquaresOfSquaresOfSquaresOf\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf8mk1m8p.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mfactorizationPrimeFactorsCountSumOfSquaresOfSquaresOfSquaresOfSquaresOf\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizati"
  stdout: ''
  timestamp: 1659798020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization2 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization3 = mutable.ListBuffer[Long]()\n        val primeFactorization4\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization5 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization6 = mutable.ListBuffer[Long]()\n        val primeFactorization7\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization8 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization9 = mutable.ListBuffer[Long]()\n        val primeFactorization10\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization11 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization12 = mutable.ListBuffer[Long]()\n        val primeFactorization13\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization14 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization15 = mutable.ListBuffer[Long]()\n        val primeFactorization16\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization17 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization18 = mutable.ListBuffer[Long]()\n        val primeFactorization19\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization20 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization21 = mutable.ListBuffer[Long]()\n        val primeFactorization22\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization23 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization24 = mutable.ListBuffer[Long]()\n        val primeFactorization25\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization26 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization27 = mutable.ListBuffer[Long]()\n        val primeFactorization28\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization29 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization30 = mutable.ListBuffer[Long]()\n        val primeFactor\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsw2iipze.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsw2iipze.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsw2iipze.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsw2iipze.scala:16:28\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpsw2iipze.scala:17:33 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsw2iipze.scala:18:34 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization2\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1659798019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount2 = mutable.ListBuffer[Long]()\n        val factorizationCount3\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount4 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount5 = mutable.ListBuffer[Long]()\n        val factorizationCount6\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount7 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount8 = mutable.ListBuffer[Long]()\n        val factorizationCount9\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount10 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount11 = mutable.ListBuffer[Long]()\n        val factorizationCount12\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount13 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount14 = mutable.ListBuffer[Long]()\n        val factorizationCount15\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount16 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount17 = mutable.ListBuffer[Long]()\n        val factorizationCount18\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount19 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount20 = mutable.ListBuffer[Long]()\n        val factorizationCount21\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount22 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount23 = mutable.ListBuffer[Long]()\n        val factorizationCount24\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount25 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount26 = mutable.ListBuffer[Long]()\n        val factorizationCount27\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount28 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount29 = mutable.ListBuffer[Long]()\n        val factorizationCount30\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp7_onlu84.scala:47:34 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount30\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7_onlu84.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7_onlu84.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7_onlu84.scala:16:27\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mprimeFactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7_onlu84.scala:17:28 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7_onlu84.scala:18:33 ----------------------"
  stdout: ''
  timestamp: 1659798020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factors = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        val primeFactors = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactors = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimes = mutable.ListBuffer[Boolean]()\n        val isPrimePrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimeFactors = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimes = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimeFactors = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimes = mutable.ListBuffer[Boolean]()\n       \
    \ val isPrimePrimePrimePrimeFactorization = mutable.ListBuffer[Boolean]()\n  \
    \      val isPrimePrimePrimePrimeFactors = mutable.ListBuffer[Boolean]()\n   \
    \     val isPrimePrimePrimePrimePrimes = mutable.ListBuffer[Boolean]()\n     \
    \   val isPrimePrimePrimePrimePrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimeFactors = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimes = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimeFactors = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimes = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimeFactors = mutable.ListBuffer[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90qn9srx.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp90qn9srx.scala:14:28 ------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp90qn9srx.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp90qn9srx.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp90qn9srx.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp90qn9srx.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: "
  stdout: ''
  timestamp: 1659798019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val factorization = mutable.ListBuffer.empty[Long]\n        val factorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizations = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorizations = mutable.ListBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizations = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorizations = mutable.ListBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizations = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorizations = mutable.ListBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizations = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorizations = mutable.ListBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizations = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorizations = mutable.ListBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizations = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorizations = mutable.ListBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizations = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorizations = mutable.ListBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizations = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorizations = mutable.\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwns80ig7.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpwns80ig7.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizations is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorizations\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpwns80ig7.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorization is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorization\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpwns80ig7.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m\
    \ = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizations is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorizations\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpwns80ig7.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorization is alr"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n).toList\n\
    \        factorization.foreach(x => factors += x)\n        factors\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzs79btis.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpzs79btis.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n).toList\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount2\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount3 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount4 = mutable.ListBuffer[Long]()\n        val factorizationCount5\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount6 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount7 = mutable.ListBuffer[Long]()\n        val factorizationCount8\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount9 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount10 = mutable.ListBuffer[Long]()\n        val factorizationCount11\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount12 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount13 = mutable.ListBuffer[Long]()\n        val factorizationCount14\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount15 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount16 = mutable.ListBuffer[Long]()\n        val factorizationCount17\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount18 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount19 = mutable.ListBuffer[Long]()\n        val factorizationCount20\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount21 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount22 = mutable.ListBuffer[Long]()\n        val factorizationCount23\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount24 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount25 = mutable.ListBuffer[Long]()\n        val factorizationCount26\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount27 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount28 = mutable.ListBuffer[Long]()\n        val factorizationCount29\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgdo0dkhu.scala:47:34 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount29\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgdo0dkhu.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgdo0dkhu.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgdo0dkhu.scala:16:28\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpgdo0dkhu.scala:17:33 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgdo0dkhu.scala:18:38 ----"
  stdout: ''
  timestamp: 1659798028
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        factorization.foreach(x => factors += x)\n        factors\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgzvwi2xw.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpgzvwi2xw.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimes = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationPrimeFactorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationPrimeFactorizations = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationPrimeFactorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorization\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd3_srea9.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd3_srea9.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpd3_srea9.scala:15:21 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpd3_srea9.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpd3_srea9.scala:17:29 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpd3_srea9.scala:18:33 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \          "
  stdout: ''
  timestamp: 1659798029
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpd39dbnk6.scala:46:34 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCounts_\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd39dbnk6.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCounts_\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCounts_ is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCounts_\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpd39dbnk6.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCounts_\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCounts_ is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCounts_\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpd39dbnk6.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCounts_\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCounts_ is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCounts_\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpd39dbnk6.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659798029
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val factorizationPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactors = mutable.ListBuffer[Long]()\n   \
    \     val primeFactorizationPrimeFactorsCount = mutable.ListBuffer[Long]()\n \
    \       val primeFactorizationPrimeFactorsCounts = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorsCountPrimes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorsCountPrimesCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorsCountPrimesCounts = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorsCountPrimesCountsCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorsCountPrimesCountsCounts = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorsCountPrimesCountsCountsCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorsCountPrimesCountsCountsCounts = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorsCountPrimesCountsCountsCountsCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCountPrimesCountsCountsCountsCounts\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCountPrimesCountsCountsCountsCountsCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCountPrimesCountsCountsCountsCountsCounts\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCountPrimesCountsCountsCountsCountsCountsCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCountPrimesCountsCountsCountsCoun\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphdie5zv_.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdie5zv_.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdie5zv_.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdie5zv_.scala:16:28\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmphdie5zv_.scala:17:33 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdie5zv_.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              "
  stdout: ''
  timestamp: 1659798030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimes = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationPrime = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactors\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactor = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorPrimes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorPrime = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorPrimeFactors = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorPrimeFactor = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrime = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimeFactors = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimeFactor = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrime = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactors =\
    \ mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactor\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactorPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactorPrime\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactorPrimeFactors\
    \ = mutable.ListBuffer[Long]()\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyomd8tnb.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpyomd8tnb.scala:15:29 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyomd8tnb.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyomd8tnb.scala:17:34 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpyomd8tnb.scala:18:33 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Err"
  stdout: ''
  timestamp: 1659798030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount = mut\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzk7wo1h3.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationCount\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationCount is already defined as \e[33mvalue\e\
    [0m \e[35mprimeFactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzk7wo1h3.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationCount\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationCount is already defined as \e[33mvalue\e\
    [0m \e[35mprimeFactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzk7wo1h3.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationCount\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationCount is already defined as \e[33mvalue\e\
    [0m \e[35mprimeFactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzk7wo1h3.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationCount\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationCount is already defined as \e[33mvalue\e\
    [0m \e[35mprimeFactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of tople"
  stdout: ''
  timestamp: 1659798030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        var factor = 1\n        while (n > 1)\
    \ {\n            while (n % factor == 0) {\n                factorization += factor\n\
    \                n /= factor\n            }\n            factor += 1\n       \
    \ }\n        factorization.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp40iz6_eu.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp40iz6_eu.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                n /= factor\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member\
    \ of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798029
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactors = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorsPrimes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorsPrimesPrimes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorsPrimesPrimesPrimes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorsPrimesPrimesPrimesPrimes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorsPrimesPrimesPrimesPrimesPrimes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPri\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqgb9sw0c.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqgb9sw0c.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqgb9sw0c.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqgb9sw0c.scala:16:28\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpqgb9sw0c.scala:17:33 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqgb9sw0c.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              "
  stdout: ''
  timestamp: 1659798030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n) //factorization\
    \ is list of factors of given number\n        factorization.foreach(f => factors\
    \ += f)\n        factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_ynwnvdp.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp_ynwnvdp.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\
    \ \e[34m//factorization is list of factors of given number\e[0m\n\e[31m\e[31m\
    \   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m                \
    \            Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isPrimeCount\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorCount = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n     \
    \   val isPrimeFactorizationPrimeCount = mutable.ListBuffer[Boolean]()\n     \
    \   val isPrimeFactorizationFactor = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorizationFactorCount = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorizationFactorization = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorizationFactorizationCount = mutable.ListBuffer[Boolean]()\n   \
    \     val isPrimeFactorizationFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationFactorizationPrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationFactorizationFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationFactorizationFactorCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationFactorizationFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationFactorizationFactorizationCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationFactorizationFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationFactorizationFactorizationPrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationFactorizationFactorizationFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationFactorizationFactorizationFactorCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationFactorizationFactorizationFactorization = mutable.ListBuffer[Boolean]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9pnye4sf.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp9pnye4sf.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9pnye4sf.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9pnye4sf.scala:17:28 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9pnye4sf.scala:18:33 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9pnye4sf.scala:19:22 ---------"
  stdout: ''
  timestamp: 1659798030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n) \n\
    \        factorization foreach { x => factors += x }\n        factors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjq3rq09y.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpjq3rq09y.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\
    \ \n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m \
    \                           Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimes = mutable.ListBuffer[Long]()\n        val\
    \ factorizationPrimeFactors = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactors\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizations =\
    \ mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPrimeFactors\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactors\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactors\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactors\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ListBuffer[Long]()\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph9e6hjyl.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmph9e6hjyl.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmph9e6hjyl.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmph9e6hjyl.scala:17:28 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmph9e6hjyl.scala:18:33 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmph9e6hjyl.scala:19:29 ---------"
  stdout: ''
  timestamp: 1659798031
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        var factor = 1\n        for(i <- 2 to\
    \ n by 2){\n            while(n % i == 0){\n                factor *= i\n    \
    \            factors += factor\n                n /= i\n            }\n      \
    \  }\n        factors += n\n        factors.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpds_s7myb.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpds_s7myb.scala:16:22 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m to n by \e[31m2\e\
    [0m){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m    \
    \                  Found:    (n : Long)\n\e[31m   |\e[0m                     \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpds_s7myb.scala:20:18\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                n /= i\n\e\
    [31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ /= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659798031
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorization = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationCount2 = mutable.ArrayBuffer.empty[Long]\n    \
    \    val primeFactorizationCount3 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorizationCount4 = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationCount5\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationCount6 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationCount7 = mutable.ArrayBuffer.empty[Long]\n    \
    \    val primeFactorizationCount8 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorizationCount9 = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationCount10\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationCount11 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationCount12 = mutable.ArrayBuffer.empty[Long]\n   \
    \     val primeFactorizationCount13 = mutable.ArrayBuffer.empty[Long]\n      \
    \  val primeFactorizationCount14 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorizationCount15 = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationCount16\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationCount17 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationCount18 = mutable.ArrayBuffer.empty[Long]\n   \
    \     val primeFactorizationCount19 = mutable.ArrayBuffer.empty[Long]\n      \
    \  val primeFactorizationCount20 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorizationCount21 = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationCount22\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationCount23 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationCount24 = mutable.ArrayBuffer.empty[Long]\n   \
    \     val primeFactorizationCount25 = mutable.ArrayBuffer.empty[Long]\n      \
    \  val primeFactorizationCount26 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorizationCount27 = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationCount28\
    \ = mutable.Array\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa838emiq.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpa838emiq.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpa838emiq.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpa838emiq.scala:17:33 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpa838emiq.scala:18:38 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mprimeFactorizationCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E00"
  stdout: ''
  timestamp: 1659798031
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        var factor = 2\n        while (factor\
    \ <= n) {\n            if (n % factor == 0) {\n                factorization +=\
    \ factor\n                while (n % factor == 0) {\n                    n /=\
    \ factor\n                    factor += 1\n                }\n            }\n\
    \            factor += 1\n        }\n        factorization.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppjsiz1ya.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmppjsiz1ya.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    n /= factor\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^\e[0m\n\e[31m   |\e[0m                   value /= is\
    \ not a member of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798031
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorization = \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps3pp6nhh.scala:48:32 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e\
    [0m                                expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps3pp6nhh.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimeFactorizations\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizations is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorizations\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmps3pp6nhh.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorization is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorization\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmps3pp6nhh.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizations is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorizations\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmps3pp6nhh.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mv"
  stdout: ''
  timestamp: 1659798031
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n) \n\
    \        factorization foreach { f => factors += f }\n        factors\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0dvx62cd.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp0dvx62cd.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\
    \ \n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m \
    \                           Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val factorization = mutable.ListBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationCount = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizationCount2 = mutable.ListBuffer.empty[Long]\n     \
    \   val primeFactorizationCount3 = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorizationCount4 = mutable.ListBuffer.empty[Long]\n        val primeFactorizationCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationCount6 = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizationCount7 = mutable.ListBuffer.empty[Long]\n     \
    \   val primeFactorizationCount8 = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorizationCount9 = mutable.ListBuffer.empty[Long]\n        val primeFactorizationCount10\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizationCount12 = mutable.ListBuffer.empty[Long]\n    \
    \    val primeFactorizationCount13 = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorizationCount14 = mutable.ListBuffer.empty[Long]\n        val primeFactorizationCount15\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationCount16 = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizationCount17 = mutable.ListBuffer.empty[Long]\n    \
    \    val primeFactorizationCount18 = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorizationCount19 = mutable.ListBuffer.empty[Long]\n        val primeFactorizationCount20\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationCount21 = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizationCount22 = mutable.ListBuffer.empty[Long]\n    \
    \    val primeFactorizationCount23 = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorizationCount24 = mutable.ListBuffer.empty[Long]\n        val primeFactorizationCount25\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationCount26 = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizationCount27 = mutable.ListBuffer.empty[Long]\n    \
    \    val primeFactorizationCount28 = mutable.List\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7yiroyxq.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7yiroyxq.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7yiroyxq.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7yiroyxq.scala:17:33 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m         \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7yiroyxq.scala:18:38 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mprimeFactorizationCount\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] No"
  stdout: ''
  timestamp: 1659798031
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        var i = 2\n        while (i <= n / i)\
    \ {\n            if (n % i == 0) {\n                factors += i\n           \
    \     n /= i\n            }\n            i += 1\n        }\n        factors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpklfrofsb.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpklfrofsb.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798031
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val isPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n     \
    \   val isPrimeFactorizationPrimePrime = mutable.ListBuffer[Boolean]()\n     \
    \   val isPrimeFactorizationPrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPri\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt3yf6us9.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt3yf6us9.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36misPrimeFactorizationPrimePrimePrimePrimePrimePrime\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorizationPrimePrimePrimePrimePrimePrime is already\
    \ defined as \e[33mvalue\e[0m \e[35misPrimeFactorizationPrimePrimePrimePrimePrimePrime\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt3yf6us9.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  isPrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpt3yf6us9.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpt3"
  stdout: ''
  timestamp: 1659798032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n).toList\n\
    \        factorization.foreach(factor => factors += factor)\n        factors\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjnn3a8cv.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpjnn3a8cv.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n).toList\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        var i = 2\n        while (i <= n / i)\
    \ {\n            if (n % i == 0) {\n                factors += i\n           \
    \     n /= i\n            }\n            i += 1\n        }\n        if (n != 1)\
    \ factors += n\n        factors.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps1wv6n97.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmps1wv6n97.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798034
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factors = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactors = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationPrimeFactorsCount = mutable.ArrayBuffer.empty[Long]\n \
    \       val factorizationFactorsCount = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationPrimeFactorsCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountCountCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe4a838bz.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpe4a838bz.scala:35:12 ---------------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationPrimeFactorsCountCountCountCountCountCountCountCountCountCountCount\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimeFactorsCountCountCountCountCountCountCountCountCountCountCount\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  factorizationPrimeFactorsCountCountCountCountCountCountCountCountCountCountCount\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpe4a838bz.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mfactorizationPrimeFactorsCountCountCountCountCountCountCountCountCountCountCountCountCount\e\
    [0m = mutable.ArrayBuffer.\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimeFactorsCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  factorizationPrimeFactorsCountCountCountCountCountCountCountCountCountCountCountCountCount\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpe4a838bz.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659798037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factors = mutable.ListBuffer[Long]()\n        val primeFactors =\
    \ mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCounts\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOf = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfs = mutable.ListBuffer[Long]()\n        val factorizationCountOfsOf\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOfsOfs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOf = mutable.ListBuffer[Long]()\n       \
    \ val factorizationCountOfsOfsOfs = mutable.ListBuffer[Long]()\n        val factorizationCountOfsOfsOfsOf\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOf = mutable.ListBuffer[Long]()\n    \
    \    val factorizationCountOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n       \
    \ val factorizationCountOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountOfsOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountOfsOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountOfsOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountOfsOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountOfsOfsOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n      \
    \  val factorizationCountOfsOfsOfsOfs\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4ofuhplg.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4ofuhplg.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountOfsOfsOfsOf\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountOfsOfsOfsOf is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizationCountOfsOfsOfsOf\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4ofuhplg.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountOfsOfsOfsOfs\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountOfsOfsOfsOfs is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizationCountOfsOfsOfsOfs\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4ofuhplg.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountOfsOfsOfsOfsOfsOf\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountOfsOfsOfsOfsOfsOf is already defined as\
    \ \e[33mvalue\e[0m \e[35mfactorizationCountOfsOfsOfsOfsOfsOf\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4ofuhplg.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountOfsOfsOfsOfsOfsOf\e[0m = mutable.ListBuffer[\e[35mLong\e"
  stdout: ''
  timestamp: 1659798039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSum = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationCountSumsSums = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationCountSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n  \
    \      val factorizationCountSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSumsSumsSums\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppgwaw3bw.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppgwaw3bw.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmppgwaw3bw.scala:15:29 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppgwaw3bw.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmppgwaw3bw.scala:17:34 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizationCounts\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppgwaw3bw.scala:18:36 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountSum\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong"
  stdout: ''
  timestamp: 1659798039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        var i = 2\n        while (i <= n\
    \ / i) {\n            if (n % i == 0) {\n                factors += i\n      \
    \          n /= i\n            }\n            i += 1\n        }\n        factors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwbc4xpex.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpwbc4xpex.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n);\n\
    \        factorization.foreach(x => factors += x)\n        factors\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp93_80p4k.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp93_80p4k.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n);\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMin = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountMins = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMin = mutable.ArrayBuffer.empty[Long]\n \
    \       val factorizationCountMinMaxMins = mutable.ArrayBuffer.empty[Long]\n \
    \       val factorizationCountMinMaxMinMinMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMin = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMins = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMinMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMinMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMinMaxMin = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMinMaxMins = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMinMaxMinMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMinMaxMinMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMinMaxMinMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMinMaxMinMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpiww23668.scala:40:11 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpiww23668.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountMinMaxMinMaxMinMaxMinMaxMinMax\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountMinMaxMinMaxMinMaxMinMaxMinMax is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorizationCountMinMaxMinMaxMinMaxMinMaxMinMax\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpiww23668.scala:39:12 ---------------------------\e[0m\e[0m\n\e\
    [31m39 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountMinMaxMinMaxMinMaxMinMaxMinMaxs\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountMinMaxMinMaxMinMaxMinMaxMinMaxs is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorizationCountMinMaxMinMaxMinMaxMinMaxMinMaxs\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpiww23668.scala:14:28 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpiww23668.scala:15:29 -----------------------"
  stdout: ''
  timestamp: 1659798039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationList = mutable.ArrayBuffer.empty[Long]\n      \
    \  val primeFactorizationList = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationList = mutable.ArrayBuffer.empty[Long]\n      \
    \  val primeFactorizationList = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationList = mutable.ArrayBuffer.empty[Long]\n      \
    \  val primeFactorizationList = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationList = mutable.ArrayBuffer.empty[Long]\n      \
    \  val primeFactorizationList = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationList = mutable.ArrayBuffer.empty[Long]\n      \
    \  val primeFactorizationList = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationList = mutable.ArrayBuffer.empty[Long]\n      \
    \  val primeFactorizationList = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationList = mutable.ArrayBuffer.empty[Long]\n      \
    \  val primeFactorizationList = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationList = mutable.ArrayBuffer.empty[Long]\n      \
    \  val primeFactorizationList = \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwmo1bhfr.scala:48:36 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationList\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m\
    \   |\e[0m                                    expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwmo1bhfr.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimeFactorizationList\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationList is already defined as \e[33mvalue\e\
    [0m \e[35mprimeFactorizationList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwmo1bhfr.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationList\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mprimeFactorizationList is already defined as \e[33mvalue\e[0m \e[35mprimeFactorizationList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwmo1bhfr.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationList is already defined as \e[33mvalue\e\
    [0m \e[35mprimeFactorizationList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwmo1bhfr.scala:22:12 -----------"
  stdout: ''
  timestamp: 1659798041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorization = factorization(n)\n\
    \        factorization.foreach(f => factors += f)\n        factors\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwqd2vrau.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpwqd2vrau.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val isPrime =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrimeFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactors = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsCount\
    \ = mutable.ListBuffer[Int]()\n        val isPrimeFactorsCount2 = mutable.ListBuffer[Int]()\n\
    \        val isPrimeFactorsCount3 = mutable.ListBuffer[Int]()\n        val isPrimeFactorsCount4\
    \ = mutable.ListBuffer[Int]()\n        val isPrimeFactorsCount5 = mutable.ListBuffer[Int]()\n\
    \        val isPrimeFactorsCount6 = mutable.ListBuffer[Int]()\n        val isPrimeFactorsCount7\
    \ = mutable.ListBuffer[Int]()\n        val isPrimeFactorsCount8 = mutable.ListBuffer[Int]()\n\
    \        val isPrimeFactorsCount9 = mutable.ListBuffer[Int]()\n        val isPrimeFactorsCount10\
    \ = mutable.ListBuffer[Int]()\n        val isPrimeFactorsCount11 = mutable.ListBuffer[Int]()\n\
    \        val isPrimeFactorsCount12 = mutable.ListBuffer[Int]()\n        val isPrimeFactorsCount13\
    \ = mutable.ListBuffer[Int]()\n        val isPrimeFactorsCount14 = mutable.ListBuffer[Int]()\n\
    \        val isPrimeFactorsCount15 = mutable.ListBuffer[Int]()\n        val isPrimeFactorsCount16\
    \ = mutable.ListBuffer[Int]()\n        val isPrimeFactorsCount17 = mutable.ListBuffer[Int]()\n\
    \        val isPrimeFactorsCount18 = mutable.ListBuffer[Int]()\n        val isPrimeFactorsCount19\
    \ = mutable.ListBuffer[Int]()\n        val isPrimeFactorsCount20 = mutable.ListBuffer[Int]()\n\
    \        val isPrimeFactorsCount21 = mutable.ListBuffer[Int]()\n        val isPrimeFactorsCount22\
    \ = mutable.ListBuffer[Int]()\n        val isPrimeFactorsCount23 = mutable.ListBuffer[Int]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpienr0ib6.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpienr0ib6.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpienr0ib6.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpienr0ib6.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpienr0ib6.scala:18:28 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactor\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpienr0ib6.scala:19:29 ------------------------\e\
    [0m\e[0m\n\e[3"
  stdout: ''
  timestamp: 1659798040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        var i = 2\n        while (i <= n / i)\
    \ {\n            if (n % i == 0) {\n                factors += i\n           \
    \     n /= i\n            }\n            i += 1\n        }\n        factors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpklfrofsb.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpklfrofsb.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798031
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isFactorization = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactor\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphh_ra7r9.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphh_ra7r9.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36misPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmphh_ra7r9.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphh_ra7r9.scala:14:22 -----------------------"
  stdout: ''
  timestamp: 1659798019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        factorization foreach { factor =>\n            factors += factor\n  \
    \      }\n        factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvfoai9wl.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpvfoai9wl.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ListBuffer.empty[Long]\n        val factorization\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount3 = mutable.ListBuffer.empty[Long]\n        val factorizationCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount6 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount7 = mutable.ListBuffer.empty[Long]\n        val factorizationCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount10 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount11 = mutable.ListBuffer.empty[Long]\n        val factorizationCount12\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount14 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount15 = mutable.ListBuffer.empty[Long]\n        val factorizationCount16\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount17 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount18 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount19 = mutable.ListBuffer.empty[Long]\n        val factorizationCount20\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount21 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount22 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount23 = mutable.ListBuffer.empty[Long]\n        val factorizationCount24\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount25 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount26 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount27 = mutable.ListBuffer.empty[Long]\n        val factorizationCount28\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount29 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount30 = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgl660vbw.scala:47:34 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount30\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgl660vbw.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgl660vbw.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgl660vbw.scala:16:27\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mprimeFactors\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpgl660vbw.scala:17:28 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpgl660vbw.scala:18:33 ------"
  stdout: ''
  timestamp: 1659798040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationSize = n\n        val primesSize = factorizationSize / 2\n    \
    \    val primeFactorizationSize = primesSize * 2\n        val factorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationSize\
    \ = factorizationPrimeFactorization.length\n        val factorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimesSize\
    \ = factorizationPrimeFactorizationPrimes.length\n        val factorizationPrimeFactorizationPrimesPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimesPrimesSize\
    \ = factorizationPrimeFactorizationPrimesPrimes.length\n        val factorizationPrimeFactorizationPrimesPrimesPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimesPrimesPrimesSize\
    \ = factorizationPrimeFactorizationPrimesPrimesPrimes.length\n        val factorizationPrimeFactorizationPrimesPrimesPrimesPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimesPrimesPrimesPrimesSize\
    \ = factorizationPrimeFactorizationPrimesPrimesPrimesPrimes.length\n        val\
    \ factorizationPrimeFactorizationPrimesPrimesPrimesPrimesPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimesPrimesPrimesPrimesPrimesSize\
    \ = factorizationPrimeFactorizationPrimesPrimesPrimesPrimesPrimes.length\n   \
    \     val factorizationPrimeFactorizationPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimesPrimesPrimesPrimesPrimesPrimesSize\
    \ = factorizationPrimeFactorizationPrimesPrimesPrimesPrimesPrimesPrimes.length\n\
    \        val factorizationPrimeFactorizationPrimesPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimesPrimesPrimesPrimesPrimesPrimesPri\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph75jmf58.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph75jmf58.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmph75jmf58.scala:15:21 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmph75jmf58.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmph75jmf58.scala:20:34 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizationPrimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph75jmf58.scala:21:46 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mfactorizationPrimeFactorization\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[3"
  stdout: ''
  timestamp: 1659798040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMax = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountMaxs = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n \
    \       val factorizationCountMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n \
    \       val factorizationCountMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = \n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzndca17f.scala:40:65 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                 ^\e[0m\n\e[31m   |\e[0m                                    \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpzndca17f.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpzndca17f.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpzndca17f.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpzndca17f.scala:17:29 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation ava"
  stdout: ''
  timestamp: 1659798041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorization = factorization(n)\
    \ \n        factorization.foreach(x => factors += x)\n        factors\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbyeet6di.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpbyeet6di.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\
    \ \n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m \
    \                           Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ListBuffer.empty[Long]\n        val isPrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactor = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactors = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorsCount\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorsCounts = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsCountOf = mutable.ListBuffer.empty[Boolean]\n     \
    \   val isPrimeFactorsCountOfs = mutable.ListBuffer.empty[Boolean]\n        val\
    \ isPrimeFactorsCountOfsOf = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorsCountOfsOfs\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorsCountOfsOfsOf\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorsCountOfsOfsOfs\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorsCountOfsOfsOfs\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorsCountOfsOfsOfsOf\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorsCountOfsOfsOfsOfs\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorsCountOfsOfsOfsOfsOf\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorsCountOfsOfsOfsOfsOfs\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorsCountOfsOfsOfsOfsOf\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorsCountOfsOfsOfsOfsOfs\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorsCountOfsOfsOfsOfsOf\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorsCountOfsOfsOfsOfsOfs\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorsCountOfsOfsOfsOfsOf\
    \ = mutable.ListBuffer.empty[Boolean]\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp81vpz9p1.scala:38:11 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp81vpz9p1.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorsCountOfsOfsOfs\e\
    [0m = mutable.ListBuffer.empty[\e[35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0misPrimeFactorsCountOfsOfsOfs is already defined as \e[33mvalue\e\
    [0m \e[35misPrimeFactorsCountOfsOfsOfs\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp81vpz9p1.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorsCountOfsOfsOfsOfsOf\e\
    [0m = mutable.ListBuffer.empty[\e[35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorsCountOfsOfsOfsOfsOf is already defined as \e\
    [33mvalue\e[0m \e[35misPrimeFactorsCountOfsOfsOfsOfsOf\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp81vpz9p1.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36misPrimeFactorsCountOfsOfsOfsOfsOfs\e[0m = mutable.ListBuffer.empty[\e\
    [35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorsCountOfsOfsOfsOfsOfs is already defined as \e\
    [33mvalue\e[0m \e[35misPrimeFactorsCountOfsOfsOfsOfsOfs\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp81vpz9p1.scala"
  stdout: ''
  timestamp: 1659798041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorization = factorizations(n)\n\
    \        factorization.foreach(f => factors += f)\n        factors\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptebyetvg.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmptebyetvg.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizations(n)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                            Not found: factorizations\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isFactorization = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qr7hbs.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpd6qr7hbs.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorizationPrimeFactorizationPrimeFactorization\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorizationPrimeFactorizationPrimeFactorization is\
    \ already defined as \e[33mvalue\e[0m \e[35misPrimeFactorizationPrimeFactorizationPrimeFactorization\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd6qr7hbs.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorizationPrimeFactorizationPrimeFactorization\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorizationPrimeFactorizationPrimeFactorization is\
    \ already defined as \e[33mvalue\e[0m \e[35misPrimeFactorizationPrimeFactorizationPrimeFactorization\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd6qr7hbs.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ is already defined as \e[33mvalue\e[0m \e[35misPrimeFac"
  stdout: ''
  timestamp: 1659798041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n) \n\
    \        factorization.foreach(f => factors += f)\n        factors\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu7b_ez4_.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpu7b_ez4_.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\
    \ \n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m \
    \                           Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isFactorization = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationFactorization\
    \ = mutable.ListBuffer[Boolean]\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu59bzfdw.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorizationPrimeFactorizationPrimeFactorization\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorizationPrimeFactorizationPrimeFactorization is\
    \ already defined as \e[33mvalue\e[0m \e[35misPrimeFactorizationPrimeFactorizationPrimeFactorization\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu59bzfdw.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorizationPrimeFactorizationPrimeFactorization\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorizationPrimeFactorizationPrimeFactorization is\
    \ already defined as \e[33mvalue\e[0m \e[35misPrimeFactorizationPrimeFactorizationPrimeFactorization\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu59bzfdw.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ is already defined as \e[33mvalue\e[0m \e[35misPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- ["
  stdout: ''
  timestamp: 1659798041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorizationOf(n)\n\
    \        factorization.foreach(f => factors += f)\n        factors\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwdq40guc.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpwdq40guc.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizationOf(n)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: factorizationOf\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer.empty[Long]\n        val factors = mutable.ListBuffer.empty[Long]\n\
    \        val primes = mutable.ListBuffer.empty[Long]\n        val primeFactors\
    \ = mutable.ListBuffer.empty[Long]\n        val isPrime = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorization = mutable.ListBuffer.empty[Boolean]\n      \
    \  val isPrimeFactors = mutable.ListBuffer.empty[Boolean]\n        val isPrimePrimes\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimePrimeFactorization =\
    \ mutable.ListBuffer.empty[Boolean]\n        val isPrimePrimeFactors = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimes = mutable.ListBuffer.empty[Boolean]\n        val\
    \ isPrimePrimePrimeFactorization = mutable.ListBuffer.empty[Boolean]\n       \
    \ val isPrimePrimePrimeFactors = mutable.ListBuffer.empty[Boolean]\n        val\
    \ isPrimePrimePrimePrimes = mutable.ListBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimeFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimeFactors\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimePrimes\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimePrimeFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimePrimeFactors\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimePrimePrimes\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimePrimePrimeFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimePrimePrimeFactors\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimePrimePrimePrimes\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimePrimePrimePrimeFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimePrimePrimePrimeFactors\
    \ = mutable.ListBuffer.empty\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsr2e8a5m.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpsr2e8a5m.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsr2e8a5m.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpsr2e8a5m.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpsr2e8a5m.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer.empty[\e\
    [35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsr2e8a5m.scala:19:35 -------------------"
  stdout: ''
  timestamp: 1659798043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorize(n, 0, factorization)\n\
    \        factorization.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphbsyycrv.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphbsyycrv.scala:15:18 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        factorize(n, \e[31m0\e[0m, factorization)\n\e\
    [31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                  Found:    (Long, Int, Nothing)\n\e[31m   |\e[0m           \
    \       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factors = mutable.ArrayBuffer.empty[Long]\n        val primeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSum = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationCountSumsSums = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationCountSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n  \
    \      val factorizationCountSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSums\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0_b525gc.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0_b525gc.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountSumsSumsSumsSumsSumsSumsSumsSum\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountSumsSumsSumsSumsSumsSumsSumsSum is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorizationCountSumsSumsSumsSumsSumsSumsSumsSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp0_b525gc.scala:14:28 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0_b525gc.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp0_b525gc.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp0_b525"
  stdout: ''
  timestamp: 1659798046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizations = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCounts = mutable.ListBuffer.empty[Long]\n        val factorizationCountMax\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountMaxs = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCountMaxMax = mutable.ListBuffer.empty[Long]\n     \
    \   val factorizationCountMaxMaxs = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCountMaxMaxMax = mutable.ListBuffer.empty[Long]\n        val factorizationCountMaxMaxMaxs\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountMaxMaxMaxMax\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountMaxMaxMaxMaxs\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountMaxMaxMaxMaxMax\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountMaxMaxMaxMaxs\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountMaxMaxMaxMaxMaxMax\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountMaxMaxMaxMaxMaxs\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountMaxMaxMaxMaxMaxMax\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountMaxMaxMaxMaxMaxMaxs\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountMaxMaxMaxMaxMaxMaxMax\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountMaxMaxMaxMaxMaxMaxMaxs\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMax\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxs\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMax\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxs\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMax\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxs\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountMax\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv59ygnm8.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv59ygnm8.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountMaxMaxMaxMaxs\e[0m = mutable.ListBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountMaxMaxMaxMaxs is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizationCountMaxMaxMaxMaxs\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv59ygnm8.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountMaxMaxMaxMaxMaxMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountMaxMaxMaxMaxMaxMax is already defined as\
    \ \e[33mvalue\e[0m \e[35mfactorizationCountMaxMaxMaxMaxMaxMax\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv59ygnm8.scala:38:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMax is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMax\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpv59ygnm8.scala:14:28 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m "
  stdout: ''
  timestamp: 1659798046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2L\n        while (i <= n) {\n            if (n % i == 0) {\n\
    \                factors += i\n                primes += i\n                while\
    \ (i <= n / i) {\n                    i += 1\n                }\n            }\n\
    \            i += 1\n        }\n        factors.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgpmru3zy.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpgpmru3zy.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        var i = 2L\n        while (i < n) {\n\
    \            if (n % i == 0) {\n                factors += i\n               \
    \ factorization += i\n                primes += i\n                primeFactorization\
    \ += i\n            }\n            i += 1\n        }\n        factors.toList.sortWith(_\
    \ < _)\n        primes.toList.sortWith(_ < _)\n        factorization.toList.sortWith(_\
    \ < _)\n        primeFactorization.toList.sortWith(_ < _)\n        factors.toList.map(n\
    \ => factorization.count(_ == n)).sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0d1m1od6.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp0d1m1od6.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp0d1m1od6.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0d1m1od6.scala:17:33 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val isPrime =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrimeFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactors = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrime = mutable.ListBuffer[Boolean]()\n \
    \       val isPrimeFactorsPrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrime\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwttooifk.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwttooifk.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36misPrimeFactorsPrimePrimePrimePrimePrimePrime\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorsPrimePrimePrimePrimePrimePrime is already defined\
    \ as \e[33mvalue\e[0m \e[35misPrimeFactorsPrimePrimePrimePrimePrimePrime\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpwttooifk.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrime\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrime is\
    \ already defined as \e[33mvalue\e[0m \e[35misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrime\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwttooifk.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ is already defined as \e[33mvalue\e[0m \e[35misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods m"
  stdout: ''
  timestamp: 1659798048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount2\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount3 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount4 = mutable.ListBuffer[Long]()\n        val factorizationCount5\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount6 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount7 = mutable.ListBuffer[Long]()\n        val factorizationCount8\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount9 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount10 = mutable.ListBuffer[Long]()\n        val factorizationCount11\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount12 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount13 = mutable.ListBuffer[Long]()\n        val factorizationCount14\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount15 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount16 = mutable.ListBuffer[Long]()\n        val factorizationCount17\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount18 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount19 = mutable.ListBuffer[Long]()\n        val factorizationCount20\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount21 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount22 = mutable.ListBuffer[Long]()\n        val factorizationCount23\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount24 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount25 = mutable.ListBuffer[Long]()\n        val factorizationCount26\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount27 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount28 = mutable.ListBuffer[Long]()\n        val factorizationCount29\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgdo0dkhu.scala:47:34 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount29\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgdo0dkhu.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgdo0dkhu.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgdo0dkhu.scala:16:28\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpgdo0dkhu.scala:17:33 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgdo0dkhu.scala:18:38 ----"
  stdout: ''
  timestamp: 1659798028
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount2 = mutable.ListBuffer[Long]()\n        val factorizationCount3\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount4 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount5 = mutable.ListBuffer[Long]()\n        val factorizationCount6\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount7 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount8 = mutable.ListBuffer[Long]()\n        val factorizationCount9\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount10 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount11 = mutable.ListBuffer[Long]()\n        val factorizationCount12\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount13 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount14 = mutable.ListBuffer[Long]()\n        val factorizationCount15\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount16 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount17 = mutable.ListBuffer[Long]()\n        val factorizationCount18\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount19 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount20 = mutable.ListBuffer[Long]()\n        val factorizationCount21\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount22 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount23 = mutable.ListBuffer[Long]()\n        val factorizationCount24\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount25 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount26 = mutable.ListBuffer[Long]()\n        val factorizationCount27\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount28 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount29 = mutable.ListBuffer[Long]()\n        val factorizationCount30\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp7_onlu84.scala:47:34 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount30\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7_onlu84.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7_onlu84.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7_onlu84.scala:16:27\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mprimeFactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7_onlu84.scala:17:28 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7_onlu84.scala:18:33 ----------------------"
  stdout: ''
  timestamp: 1659798020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factors = mutable.ArrayBuffer.empty[Long]\n        val primeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactors = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationFactorsCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsCount2\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsCount3 =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsCount4 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorsCount5 = mutable.ArrayBuffer.empty[Long]\n  \
    \      val factorizationFactorsCount6 = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationFactorsCount7 = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationFactorsCount8 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationFactorsCount9 = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsCount10\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsCount11 =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsCount12 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorsCount13 = mutable.ArrayBuffer.empty[Long]\n \
    \       val factorizationFactorsCount14 = mutable.ArrayBuffer.empty[Long]\n  \
    \      val factorizationFactorsCount15 = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationFactorsCount16 = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationFactorsCount17 = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationFactorsCount18 = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationFactorsCount19 = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationFactorsCount20 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationFactorsCount21 = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsCount22\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsCount23 =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsCount24 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorsCount25 = mut\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7a4_xyj.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7a4_xyj.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpp7a4_xyj.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpp7a4_xyj.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7a4_xyj.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7a4_xyj.scala:19"
  stdout: ''
  timestamp: 1659798049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val isPrime =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrimeFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactors = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrime = mutable.ListBuffer[Boolean]()\n \
    \       val isPrimeFactorsPrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrime\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwttooifk.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwttooifk.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36misPrimeFactorsPrimePrimePrimePrimePrimePrime\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorsPrimePrimePrimePrimePrimePrime is already defined\
    \ as \e[33mvalue\e[0m \e[35misPrimeFactorsPrimePrimePrimePrimePrimePrime\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpwttooifk.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrime\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrime is\
    \ already defined as \e[33mvalue\e[0m \e[35misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrime\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwttooifk.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ is already defined as \e[33mvalue\e[0m \e[35misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods m"
  stdout: ''
  timestamp: 1659798048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        var factorizationIndex = 0\n        while(n != 1) {\n            factorizationIndex\
    \ += 1\n            val factorizationIndex = factorizationIndex % factorization.length\n\
    \            factorization += n\n            val factorization = factorization.toList\n\
    \            val factorizations = factorizations.toList\n            val factorization\
    \ = factorization.filterNot(_ == 1)\n            factorizations += factorization\n\
    \            val factorization = factorization.filter(_ == 1)\n            factorizations\
    \ += factorization\n            n /= factorization\n        }\n        factorizations.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph3d6i6mx.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmph3d6i6mx.scala:15:29 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmph3d6i6mx.scala:23:16 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mfactorization\e[0m =\
    \ factorization.filterNot(_ == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorization\
    \ is already defined as \e[33mvalue\e[0m \e[35mfactorization\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph3d6i6mx.scala:25:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e\
    [0m \e[36mfactorization\e[0m = factorization.filter(_ == \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mfactorization is already defined as \e[33mvalue\e[0m \e[35mfactorization\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmph3d6i6mx.scala:19:37 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m            \e[33mval\e[0m \e[36mfactorizationIndex\e[0m = factorizationIndex\
    \ % factorization.length\n\e[31m\e[31m   |\e[0m                          "
  stdout: ''
  timestamp: 1659798048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isFactorization = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqpdsn9bl.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpqpdsn9bl.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpqpdsn9bl.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpqpdsn9bl.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpqpdsn9bl.scala:17"
  stdout: ''
  timestamp: 1659798049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactors\
    \ = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorization = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactors = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactors\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactors\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactors\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactors\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactors\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppwkvltan.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppwkvltan.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmppwkvltan.scala:15:21 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmppwkvltan.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmppwkvltan.scala:17:27 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppwkvltan.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m          "
  stdout: ''
  timestamp: 1659798051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        factorization foreach { f =>\n            factors += f\n        }\n \
    \       factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpos2r5y2w.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpos2r5y2w.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val factorization = factorization(n)\
    \ \n        factorization foreach { x => factors += x }\n        factors\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmvtswhia.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpmvtswhia.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\
    \ \n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m \
    \                           Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factors = mutable.ArrayBuffer.empty[Long]\n        val primeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorsCount2 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorsCount3 = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCount4\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCount5 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorsCount6 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorsCount7 = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCount8\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCount9 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorsCount10 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorsCount11 = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCount12\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCount13 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorsCount14 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorsCount15 = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCount16\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCount17 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorsCount18 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorsCount19 = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCount20\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCount21 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorsCount22 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorsCount23 = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCount24\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCount25 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorsCount26 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorsCount27 = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCount28\
    \ = mutable.ArrayBuffer.\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr6m9wcmi.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpr6m9wcmi.scala:14:28 ------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr6m9wcmi.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpr6m9wcmi.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpr6m9wcmi.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr6m9wcmi.scala:18:32 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorsCount\e[0m =\
    \ mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m          \
    \                      ^^^^^^^\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659798050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factors = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimes = mutable.ListBuffer[Long]()\n        val factorizationFactors\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactors = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorsCount = mutable.ListBuffer[Long]()\n   \
    \     val factorizationFactorsCount = mutable.ListBuffer[Long]()\n        val\
    \ factorizationPrimeFactorsCount2 = mutable.ListBuffer[Long]()\n        val factorizationFactorsCount2\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsCount3 =\
    \ mutable.ListBuffer[Long]()\n        val factorizationFactorsCount3 = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorsCount4 = mutable.ListBuffer[Long]()\n  \
    \      val factorizationFactorsCount4 = mutable.ListBuffer[Long]()\n        val\
    \ factorizationPrimeFactorsCount5 = mutable.ListBuffer[Long]()\n        val factorizationFactorsCount5\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsCount6 =\
    \ mutable.ListBuffer[Long]()\n        val factorizationFactorsCount6 = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorsCount7 = mutable.ListBuffer[Long]()\n  \
    \      val factorizationFactorsCount7 = mutable.ListBuffer[Long]()\n        val\
    \ factorizationPrimeFactorsCount8 = mutable.ListBuffer[Long]()\n        val factorizationFactorsCount8\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsCount9 =\
    \ mutable.ListBuffer[Long]()\n        val factorizationFactorsCount9 = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorsCount10 = mutable.ListBuffer[Long]()\n \
    \       val factorizationFactorsCount10 = mutable.ListBuffer[Long]()\n       \
    \ val factorizationPrimeFactorsCount11 = mutable.ListBuffer[Long]()\n        val\
    \ factorizationFactorsCount11 = mutable.ListBuffer[Long]()\n        \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwl2_e2tx.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpwl2_e2tx.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwl2_e2tx.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpwl2_e2tx.scala:17:33 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpwl2_e2tx.scala:18:29 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpwl2_e2tx.scala:19:34 ---"
  stdout: ''
  timestamp: 1659798050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorsCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorsCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorsCountSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorsCountSums\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorsCountSumOfSquares\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorsCountSumOfSquaresOfSquares\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorsCountSumOfSquaresOfSquaresOfSquares\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorsCountSumOfSquaresOfSquaresOfSquaresOfSquares\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorsCountSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorsCountSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorsCountSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorsCountSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorsCountSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = mutable.ArrayBuffer.empty[\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppysvsw1s.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmppysvsw1s.scala:14:22 ------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppysvsw1s.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppysvsw1s.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmppysvsw1s.scala:17:33 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmppysvsw1s.scala:18:27 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e"
  stdout: ''
  timestamp: 1659798051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount2 = mutable.ListBuffer[Long]()\n        val factorizationCount3\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount4 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount5 = mutable.ListBuffer[Long]()\n        val factorizationCount6\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount7 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount8 = mutable.ListBuffer[Long]()\n        val factorizationCount9\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount10 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount11 = mutable.ListBuffer[Long]()\n        val factorizationCount12\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount13 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount14 = mutable.ListBuffer[Long]()\n        val factorizationCount15\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount16 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount17 = mutable.ListBuffer[Long]()\n        val factorizationCount18\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount19 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount20 = mutable.ListBuffer[Long]()\n        val factorizationCount21\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount22 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount23 = mutable.ListBuffer[Long]()\n        val factorizationCount24\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount25 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount26 = mutable.ListBuffer[Long]()\n        val factorizationCount27\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount28 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount29 = mutable.ListBuffer[Long]()\n        val factorizationCount30\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp7_onlu84.scala:47:34 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount30\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7_onlu84.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7_onlu84.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7_onlu84.scala:16:27\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mprimeFactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7_onlu84.scala:17:28 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7_onlu84.scala:18:33 ----------------------"
  stdout: ''
  timestamp: 1659798020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val factorization = mutable.ListBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizations = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorizationPrimes = mutable.ListBuffer.empty[Long]\n        val primeFactorizationPrimeFactors\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationPrimeFactorsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationPrimeFactorsCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationPrimeFactorsCountSum\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationPrimeFactorsCountSums\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationPrimeFactorsCountSumsSum\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationPrimeFactorsCountSumsSums\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationPrimeFactorsCountSumsSumsSum\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationPrimeFactorsCountSumsSumsSums\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationPrimeFactorsCountSumsSumsSumsSum\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationPrimeFactorsCountSumsSumsSumsSums\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationPrimeFactorsCountSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationPrimeFactorsCountSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationPrimeFactorsCountSumsSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationPrimeFactorsCountSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationPrimeFactorsCountSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationPrimeFactors\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcujf9goi.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcujf9goi.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcujf9goi.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcujf9goi.scala:16:28\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpcujf9goi.scala:17:33 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcujf9goi.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m  "
  stdout: ''
  timestamp: 1659798051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ListBuffer.empty[Long]\n        val factorization\
    \ = mutable.ListBuffer.empty[Long]\n        val isPrime = mutable.ListBuffer.empty[Boolean]\n\
    \        val isFactorization = mutable.ListBuffer.empty[Boolean]\n        val\
    \ isPrimeFactorization = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationPrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorizationFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2qj9jf96.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\e\
    [0m = mutable.ListBuffer.empty[\e[35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp2qj9jf96.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp2qj9jf96.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp2qj9jf96.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/"
  stdout: ''
  timestamp: 1659798052
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factor = 1\n        while(factor\
    \ < n) {\n            while(n % factor == 0) {\n                factorization\
    \ += factor\n                n /= factor\n            }\n            factor +=\
    \ 1\n        }\n        factorization.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6bh8p4_n.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp6bh8p4_n.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                n /= factor\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member\
    \ of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationCountList = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationCountList = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationCountList = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationCountList = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationCountList = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationCountList = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationCountList = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppzekrta0.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppzekrta0.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountList\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountList is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizationCountList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppzekrta0.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountList\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mfactorizationCountList is already defined as \e[33mvalue\e[0m \e[35mfactorizationCountList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppzekrta0.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountList is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizationCountList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppzekrta0.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountList\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659798052
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n) //factorization\
    \ is list of prime factors of n\n        factorization.foreach { f =>\n      \
    \      val factorCount = factors.count(f => f == f)\n            if (factorCount\
    \ == 0) factors += f\n        }\n        factors.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5lmn8jm5.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp5lmn8jm5.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\
    \ \e[34m//factorization is list of prime factors of n\e[0m\n\e[31m\e[31m   |\e\
    [0m                            ^\e[0m\n\e[31m   |\e[0m                       \
    \     Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.Array\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9oj7ywho.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9oj7ywho.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9oj7ywho.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9oj7ywho.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Nami"
  stdout: ''
  timestamp: 1659798053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpd39dbnk6.scala:46:34 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCounts_\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd39dbnk6.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCounts_\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCounts_ is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCounts_\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpd39dbnk6.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCounts_\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCounts_ is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCounts_\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpd39dbnk6.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCounts_\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCounts_ is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCounts_\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpd39dbnk6.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659798029
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        factorization.foreach(f => factors += f)\n        factors\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt32ig420.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpt32ig420.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimes = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationPrimeFactorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationPrimeFactorizations = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPri\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptnnk1zou.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptnnk1zou.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmptnnk1zou.scala:15:29 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmptnnk1zou.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmptnnk1zou.scala:17:33 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmptnnk1zou.scala:18:34 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                 "
  stdout: ''
  timestamp: 1659798054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization2 = mutable.ListBuffer[Long]()\n        val primeFactorization3\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization4 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization5 = mutable.ListBuffer[Long]()\n        val primeFactorization6\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization7 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization8 = mutable.ListBuffer[Long]()\n        val primeFactorization9\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization10 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization11 = mutable.ListBuffer[Long]()\n        val primeFactorization12\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization13 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization14 = mutable.ListBuffer[Long]()\n        val primeFactorization15\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization16 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization17 = mutable.ListBuffer[Long]()\n        val primeFactorization18\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization19 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization20 = mutable.ListBuffer[Long]()\n        val primeFactorization21\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization22 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization23 = mutable.ListBuffer[Long]()\n        val primeFactorization24\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization25 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization26 = mutable.ListBuffer[Long]()\n        val primeFactorization27\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization28 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization29 = mutable.ListBuffer[Long]()\n        val primeFactorization\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoce448nv.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoce448nv.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoce448nv.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoce448nv.scala:16:29\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorizations\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpoce448nv.scala:17:34 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoce448nv.scala:18:33 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659798054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationSize = n\n        val primeFactorizationSize = factorizationSize\
    \ / 2\n        val factorizationPrimes = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationPrimeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationSize = factorizationPrimes.size\n\
    \        val factorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationSize = factorizationPrimeFactorizationPrimes.size\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationSize\
    \ = factorizationPrimeFactorizationPrimeFactorization.size\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationSize\
    \ = factorizationPrimeFactorizationPrimeFactorizationPrimeFactorization.size\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationSize\
    \ = factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization.size\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_3czzsp2.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_3czzsp2.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_3czzsp2.scala:15:21 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_3czzsp2.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_3czzsp2.scala:19:34 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizationPrimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_3czzsp2.scala:20:46 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfactorizationPrimeFactorization\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[3"
  stdout: ''
  timestamp: 1659798056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factors = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeRev = mutable.ListBuffer[Boolean]()\n        val isPrimeRev2\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeRev3 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeRev4 = mutable.ListBuffer[Boolean]()\n        val isPrimeRev5\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeRev6 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeRev7 = mutable.ListBuffer[Boolean]()\n        val isPrimeRev8\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeRev9 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeRev10 = mutable.ListBuffer[Boolean]()\n        val isPrimeRev11\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeRev12 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeRev13 = mutable.ListBuffer[Boolean]()\n        val isPrimeRev14\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeRev15 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeRev16 = mutable.ListBuffer[Boolean]()\n        val isPrimeRev17\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeRev18 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeRev19 = mutable.ListBuffer[Boolean]()\n        val isPrimeRev20\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeRev21 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeRev22 = mutable.ListBuffer[Boolean]()\n        val isPrimeRev23\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeRev24 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeRev25 = mutable.ListBuffer[Boolean]()\n        val isPrimeRev26\
    \ = mutable.ListBuffer[Boolean]()\n        val isPri\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq91ebyvt.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq91ebyvt.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpq91ebyvt.scala:15:22 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpq91ebyvt.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpq91ebyvt.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpq91ebyvt.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36misPrimeRev\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m"
  stdout: ''
  timestamp: 1659798056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpd39dbnk6.scala:46:34 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCounts_\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd39dbnk6.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCounts_\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCounts_ is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCounts_\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpd39dbnk6.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCounts_\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCounts_ is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCounts_\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpd39dbnk6.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCounts_\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCounts_ is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCounts_\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpd39dbnk6.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659798029
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorizations(n)\n\
    \        factorization.foreach(f => factors += f)\n        factors\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppde6pbe9.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppde6pbe9.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizations(n)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                            Not found: factorizations\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationSize = n\n        val primeFactorizationSize = factorizationSize\
    \ / 2\n        val primeFactorizationSize2 = primeFactorizationSize / 2\n    \
    \    val primeFactorizationSize3 = primeFactorizationSize2 / 2\n        val primeFactorizationSize4\
    \ = primeFactorizationSize3 / 2\n        val primeFactorizationSize5 = primeFactorizationSize4\
    \ / 2\n        val primeFactorizationSize6 = primeFactorizationSize5 / 2\n   \
    \     val primeFactorizationSize7 = primeFactorizationSize6 / 2\n        val primeFactorizationSize8\
    \ = primeFactorizationSize7 / 2\n        val primeFactorizationSize9 = primeFactorizationSize8\
    \ / 2\n        val primeFactorizationSize10 = primeFactorizationSize9 / 2\n  \
    \      val primeFactorizationSize11 = primeFactorizationSize10 / 2\n        val\
    \ primeFactorizationSize12 = primeFactorizationSize11 / 2\n        val primeFactorizationSize13\
    \ = primeFactorizationSize12 / 2\n        val primeFactorizationSize14 = primeFactorizationSize13\
    \ / 2\n        val primeFactorizationSize15 = primeFactorizationSize14 / 2\n \
    \       val primeFactorizationSize16 = primeFactorizationSize15 / 2\n        val\
    \ primeFactorizationSize17 = primeFactorizationSize16 / 2\n        val primeFactorizationSize18\
    \ = primeFactorizationSize17 / 2\n        val primeFactorizationSize19 = primeFactorizationSize18\
    \ / 2\n        val primeFactorizationSize20 = primeFactorizationSize19 / 2\n \
    \       val primeFactorizationSize21 = primeFactorizationSize20 / 2\n        val\
    \ primeFactorizationSize22 = primeFactorizationSize21 / 2\n        val primeFactorizationSize23\
    \ = primeFactorizationSize22 / 2\n        val primeFactorizationSize24 = primeFactorizationSize23\
    \ / 2\n        val primeFactorizationSize25 = primeFactorizationSize24 / 2\n \
    \       val primeFactorizationSize26 = primeFactorizationSize25 / 2\n        val\
    \ primeFactorizationSize27 = primeFactorizationSize26 / 2\n        val primeFactorizationSize28\
    \ = primeFactorizationSize27 / 2\n        val primeFactorizationSize29 = primeFactorizationSize28\
    \ / 2\n        val primeFactorizationSize30 = primeFactorizationSize29 / 2\n\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt5hulcj5.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpt5hulcj5.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpt5hulcj5.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpt5hulcj5.scala:49:5 ---------------------\e[0m\e[0m\n\e[31m49\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factor = 2\n        var factorCount\
    \ = 0\n        while (n > 1) {\n            if (n % factor == 0) {\n         \
    \       factorCount += 1\n                factorization += factor\n          \
    \      n /= factor\n            } else {\n                factor += 1\n      \
    \          factorCount += 1\n            }\n        }\n        factorization.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptcs2eypa.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmptcs2eypa.scala:21:18 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                n /= factor\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member\
    \ of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorization = \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps3pp6nhh.scala:48:32 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e\
    [0m                                expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps3pp6nhh.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimeFactorizations\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizations is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorizations\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmps3pp6nhh.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorization is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorization\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmps3pp6nhh.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizations is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorizations\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmps3pp6nhh.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mv"
  stdout: ''
  timestamp: 1659798031
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n    \
    \    val primeFactorizationPrimeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorization\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy0wvydn_.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy0wvydn_.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpy0wvydn_.scala:15:29 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpy0wvydn_.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpy0wvydn_.scala:17:33 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpy0wvydn_.scala:18:34 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                 "
  stdout: ''
  timestamp: 1659798020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactors = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val factor\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprtquq435.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprtquq435.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimeFactorizations\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mprimeFactorizations is already defined as \e[33mvalue\e[0m \e[35mprimeFactorizations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprtquq435.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations is already defined as \e[33mvalue\e[0m \e[35mfactorizations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprtquq435.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizations is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorizations\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprtquq435.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizations is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorizations"
  stdout: ''
  timestamp: 1659798058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount2 = mutable.ListBuffer[Long]()\n        val factorizationCount3\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount4 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount5 = mutable.ListBuffer[Long]()\n        val factorizationCount6\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount7 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount8 = mutable.ListBuffer[Long]()\n        val factorizationCount9\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount10 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount11 = mutable.ListBuffer[Long]()\n        val factorizationCount12\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount13 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount14 = mutable.ListBuffer[Long]()\n        val factorizationCount15\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount16 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount17 = mutable.ListBuffer[Long]()\n        val factorizationCount18\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount19 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount20 = mutable.ListBuffer[Long]()\n        val factorizationCount21\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount22 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount23 = mutable.ListBuffer[Long]()\n        val factorizationCount24\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount25 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount26 = mutable.ListBuffer[Long]()\n        val factorizationCount27\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount28 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount29 = mutable.ListBuffer[Long]()\n        val factorizationCount30\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp7_onlu84.scala:47:34 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount30\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7_onlu84.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7_onlu84.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7_onlu84.scala:16:27\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mprimeFactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7_onlu84.scala:17:28 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7_onlu84.scala:18:33 ----------------------"
  stdout: ''
  timestamp: 1659798020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorization = factorization(n)\
    \ //factorization is list of factors of given number\n        factorization.foreach\
    \ { f =>\n            factors += f\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphfn43k8_.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmphfn43k8_.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\
    \ \e[34m//factorization is list of factors of given number\e[0m\n\e[31m\e[31m\
    \   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m                \
    \            Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationOfFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationOfFactorizationOfFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationOfFactorizationOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationOfFactorizationOfFactorizationOfFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationOfFactorizationOfFactorizationOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationOfFactorizationOfFactorizationOfFactorizationOfFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationOfFactorizationOfFactorizationOfFactorizationOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationOfFactorizationOfFactorizationOfFactorizationOfFactorizationOfFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationOfFactorizationOfFactorizationOfFactorizationOfFactorizationOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationOfFactorizationOfFactorizationOfFactorizationOfFactorizationOfFactorizationOfFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationOfFactorizationOfFactorizationOfFactorizationOfFactorizationOfFactorizationOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationOfFactorizationOfFactorizationOfFactorizationOfFactorizationOfFactorizationOfFactorizationOfFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationOfFactorizationOfFactorizationOfFactorizationOfFactorizationOfFactorizationOfFactorizationOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_8uoxxsb.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_8uoxxsb.scala:15:29 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_8uoxxsb.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_8uoxxsb.scala:17:34 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizationCounts\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_8uoxxsb.scala:18:48 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountOfFactorization\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \                                          ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e"
  stdout: ''
  timestamp: 1659798059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorizations(n)\n\
    \        factorization.foreach(f => factors += f)\n        factors\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppde6pbe9.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppde6pbe9.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizations(n)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                            Not found: factorizations\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizations = mutable.ListBuffer.empty[Long]\n\
    \        val primes = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpyqndemkp.scala:48:32 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e\
    [0m                                expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyqndemkp.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimeFactorizations\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizations is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorizations\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpyqndemkp.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorization is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorization\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpyqndemkp.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m\
    \ = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizations is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorizations\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpyqndemkp.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m"
  stdout: ''
  timestamp: 1659798060
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount2 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount3 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount4\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount5 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount6 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount7 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount8\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount9 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount10 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount11 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount12\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount13 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount14 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount15 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount16\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount17 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount18 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount19 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount20\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount21 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount22 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount23 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount24\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount25 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount26 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount27 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount28\
    \ = mutable.List\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp23yteio.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpp23yteio.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpp23yteio.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpp23yteio.scala:17:33 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpp23yteio.scala:18:38 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mprimeFactorizationCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/"
  stdout: ''
  timestamp: 1659798061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ListBuffer.empty[Long]\n        val factorization\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ListBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ListBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ListBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ListBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ListBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ListBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ListBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ListBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount = mutable.ListBuffer.empty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjury_mx0.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjury_mx0.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjury_mx0.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjury_mx0.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error"
  stdout: ''
  timestamp: 1659798060
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationList = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationList2 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationList3 = mutable.ListBuffer[Long]()\n        val primeFactorizationList4\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationList5 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationList6 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationList7 = mutable.ListBuffer[Long]()\n        val primeFactorizationList8\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationList9 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationList10 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationList11 = mutable.ListBuffer[Long]()\n        val primeFactorizationList12\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationList13 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationList14 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationList15 = mutable.ListBuffer[Long]()\n        val primeFactorizationList16\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationList17 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationList18 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationList19 = mutable.ListBuffer[Long]()\n        val primeFactorizationList20\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationList21 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationList22 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationList23 = mutable.ListBuffer[Long]()\n        val primeFactorizationList24\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationList25 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationList26 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationList27 = mutable.ListBuffer[Long]()\n        val primeFactorizationList28\
    \ = mutable.List\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpafiad5mq.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpafiad5mq.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpafiad5mq.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpafiad5mq.scala:17:33 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpafiad5mq.scala:18:37 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mprimeFactorizationList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp"
  stdout: ''
  timestamp: 1659798061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorizations(n)\n\
    \        factorization.foreach(f => factors += f)\n        factors\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppde6pbe9.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppde6pbe9.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizations(n)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                            Not found: factorizations\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n) \n\
    \        for (i <- factorization.indices) {\n            val factorCount = factorization(i)\n\
    \            factors += factorCount\n        }\n        factors.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbdstwgo8.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpbdstwgo8.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\
    \ \n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m \
    \                           Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isFactorization = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactor\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphh_ra7r9.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphh_ra7r9.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36misPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmphh_ra7r9.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphh_ra7r9.scala:14:22 -----------------------"
  stdout: ''
  timestamp: 1659798019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val isPrime =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrimeFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactors = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrime = mutable.ListBuffer[Boolean]()\n \
    \       val isPrimeFactorsPrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrime\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwttooifk.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwttooifk.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36misPrimeFactorsPrimePrimePrimePrimePrimePrime\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorsPrimePrimePrimePrimePrimePrime is already defined\
    \ as \e[33mvalue\e[0m \e[35misPrimeFactorsPrimePrimePrimePrimePrimePrime\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpwttooifk.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrime\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrime is\
    \ already defined as \e[33mvalue\e[0m \e[35misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrime\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwttooifk.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ is already defined as \e[33mvalue\e[0m \e[35misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods m"
  stdout: ''
  timestamp: 1659798048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationSize = n\n        val primeFactorizationSize = factorizationSize\
    \ / 2\n        val primeFactorizationSize2 = primeFactorizationSize / 2\n    \
    \    val primeFactorizationSize3 = primeFactorizationSize2 / 2\n        val primeFactorizationSize4\
    \ = primeFactorizationSize3 / 2\n        val primeFactorizationSize5 = primeFactorizationSize4\
    \ / 2\n        val primeFactorizationSize6 = primeFactorizationSize5 / 2\n   \
    \     val primeFactorizationSize7 = primeFactorizationSize6 / 2\n        val primeFactorizationSize8\
    \ = primeFactorizationSize7 / 2\n        val primeFactorizationSize9 = primeFactorizationSize8\
    \ / 2\n        val primeFactorizationSize10 = primeFactorizationSize9 / 2\n  \
    \      val primeFactorizationSize11 = primeFactorizationSize10 / 2\n        val\
    \ primeFactorizationSize12 = primeFactorizationSize11 / 2\n        val primeFactorizationSize13\
    \ = primeFactorizationSize12 / 2\n        val primeFactorizationSize14 = primeFactorizationSize13\
    \ / 2\n        val primeFactorizationSize15 = primeFactorizationSize14 / 2\n \
    \       val primeFactorizationSize16 = primeFactorizationSize15 / 2\n        val\
    \ primeFactorizationSize17 = primeFactorizationSize16 / 2\n        val primeFactorizationSize18\
    \ = primeFactorizationSize17 / 2\n        val primeFactorizationSize19 = primeFactorizationSize18\
    \ / 2\n        val primeFactorizationSize20 = primeFactorizationSize19 / 2\n \
    \       val primeFactorizationSize21 = primeFactorizationSize20 / 2\n        val\
    \ primeFactorizationSize22 = primeFactorizationSize21 / 2\n        val primeFactorizationSize23\
    \ = primeFactorizationSize22 / 2\n        val primeFactorizationSize24 = primeFactorizationSize23\
    \ / 2\n        val primeFactorizationSize25 = primeFactorizationSize24 / 2\n \
    \       val primeFactorizationSize26 = primeFactorizationSize25 / 2\n        val\
    \ primeFactorizationSize27 = primeFactorizationSize26 / 2\n        val primeFactorizationSize28\
    \ = primeFactorizationSize27 / 2\n        val primeFactorizationSize29 = primeFactorizationSize28\
    \ / 2\n        val primeFactorizationSize30 = primeFactorizationSize29 / 2\n\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt5hulcj5.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpt5hulcj5.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpt5hulcj5.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpt5hulcj5.scala:49:5 ---------------------\e[0m\e[0m\n\e[31m49\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val isPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationInOrder = mutable.ListBuffer[Boolean]()\n   \
    \     val isPrimeFactorizationInOrderInOrder = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationInOrderInOrderInOrder = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationInOrderInOrderInOrderInOrder = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationInOrderInOrderInOrderInOrderInOrder = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrder =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationIn\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpge3u1shp.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpge3u1shp.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36misPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpge3u1shp.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpge3u1shp.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\e\
    [0m = mut"
  stdout: ''
  timestamp: 1659798061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n     \
    \   val isPrimeFactorizationPrimeCount = mutable.ListBuffer[Boolean]()\n     \
    \   val isPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeCount\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationCount\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeCount\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPri\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuirh_2t7.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuirh_2t7.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpuirh_2t7.scala:15:21 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpuirh_2t7.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpuirh_2t7.scala:17:38 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mprimeFactorizationCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuirh_2t7.scala:18:22\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36misPrime\e[0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                      ^^"
  stdout: ''
  timestamp: 1659798061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList2\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList3 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList4 = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationCountList5 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList6 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList7\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList8 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList9 = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationCountList10 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList11 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList12\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList13 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList14 = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountList15 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList16 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList17\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList18 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList19 = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountList20 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList21 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList22\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList23 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList24 = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountList25 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList26 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList27\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList28 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList29\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz2x70jt1.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz2x70jt1.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpz2x70jt1.scala:15:32 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz2x70jt1.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpz2x70jt1.scala:17:37 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizationCountList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz2x70jt1.scala:18:38\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorizationCountList2\e[0m = mutable.ArrayBu"
  stdout: ''
  timestamp: 1659798062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ArrayBuffer.empty[Long]\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe225l7p8.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpe225l7p8.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpe225l7p8.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpe225l7p8.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Nami"
  stdout: ''
  timestamp: 1659798063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factors =\
    \ mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCounts\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountMax = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMaxs = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountMin = mutable.ListBuffer[Long]()\n        val factorizationCountMins\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountSum = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSums = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountSumMax = mutable.ListBuffer[Long]()\n        val factorizationCountSumMaxs\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountSumMin = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSumMins = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountSumSum = mutable.ListBuffer[Long]()\n        val factorizationCountSumSums\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountSumSumMax = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSumSumMaxs = mutable.ListBuffer[Long]()\n     \
    \   val factorizationCountSumSumMin = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountSumSumMins = mutable.ListBuffer[Long]()\n        val factorizationCountSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountSumSumSumMax = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSumSumSumMaxs = mutable.ListBuffer[Long]()\n  \
    \      val factorizationCountSumSumSumMin = mutable.ListBuffer[Long]()\n     \
    \   val factorizationCountSumSumSumMins = mutable.ListBuffer[Long]()\n       \
    \ val factorizationCountSumSumSumSum = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountSumSumSumSumMax = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountSumSumSumSumMaxs = mut\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprb5tgslh.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprb5tgslh.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprb5tgslh.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprb5tgslh.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmprb5tgslh.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprb5tgslh.scala:19:33 ---------------------"
  stdout: ''
  timestamp: 1659798062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val isPrime =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrimeFactors = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsSet = mutable.Set[Boolean]()\n        val isPrimeFactorsSetSet\
    \ = mutable.Set[Boolean]()\n        val isPrimeFactorsSetSetSet = mutable.Set[Boolean]()\n\
    \        val isPrimeFactorsSetSetSetSet = mutable.Set[Boolean]()\n        val\
    \ isPrimeFactorsSetSetSetSetSet = mutable.Set[Boolean]()\n        val isPrimeFactorsSetSetSetSetSetSet\
    \ = mutable.Set[Boolean]()\n        val isPrimeFactorsSetSetSetSetSetSetSet =\
    \ mutable.Set[Boolean]()\n        val isPrimeFactorsSetSetSetSetSetSetSet = mutable.Set[Boolean]()\n\
    \        val isPrimeFactorsSetSetSetSetSetSetSetSet = mutable.Set[Boolean]()\n\
    \        val isPrimeFactorsSetSetSetSetSetSetSetSet = mutable.Set[Boolean]()\n\
    \        val isPrimeFactorsSetSetSetSetSetSetSetSet = mutable.Set[Boolean]()\n\
    \        val isPrimeFactorsSetSetSetSetSetSetSetSet = mutable.Set[Boolean]()\n\
    \        val isPrimeFactorsSetSetSetSetSetSetSetSetSet = mutable.Set[Boolean]()\n\
    \        val isPrimeFactorsSetSetSetSetSetSetSetSetSet = mutable.Set[Boolean]()\n\
    \        val isPrimeFactorsSetSetSetSetSetSetSetSetSetSet = mutable.Set[Boolean]()\n\
    \        val isPrimeFactorsSetSetSetSetSetSetSetSetSetSet = mutable.Set[Boolean]()\n\
    \        val isPrimeFactorsSetSetSetSetSetSetSetSetSetSet = mutable.Set[Boolean]()\n\
    \        val isPrimeFactorsSetSetSetSetSetSetSetSetSetSet = mutable.Set[Boolean]()\n\
    \        val isPrimeFactorsSetSetSetSetSetSetSetSetSetSet = mutable.Set[Boolean]()\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpqa8b91im.scala:38:11 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpqa8b91im.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorsSetSetSetSetSetSetSet\e\
    [0m = mutable.Set[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorsSetSetSetSetSetSetSet is already defined as\
    \ \e[33mvalue\e[0m \e[35misPrimeFactorsSetSetSetSetSetSetSet\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqa8b91im.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36misPrimeFactorsSetSetSetSetSetSetSetSet\e[0m = mutable.Set[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorsSetSetSetSetSetSetSetSet is already defined\
    \ as \e[33mvalue\e[0m \e[35misPrimeFactorsSetSetSetSetSetSetSetSet\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpqa8b91im.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorsSetSetSetSetSetSetSetSet\e\
    [0m = mutable.Set[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorsSetSetSetSetSetSetSetSet is already defined\
    \ as \e[33mvalue\e[0m \e[35misPrimeFactorsSetSetSetSetSetSetSetSet\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpqa8b91im.scala:3"
  stdout: ''
  timestamp: 1659798063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationList = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationList = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationList = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationList = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationList = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationList = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationList = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationList = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationList = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.Array\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0x3qy0gn.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList\e[0m =\
    \ mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationList is already defined as \e[33mvalue\e[0m \e\
    [35mfactorizationList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0x3qy0gn.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList\e[0m =\
    \ mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationList is already defined as \e[33mvalue\e[0m \e\
    [35mfactorizationList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0x3qy0gn.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList\e[0m =\
    \ mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationList is already defined as \e[33mvalue\e[0m \e\
    [35mfactorizationList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0x3qy0gn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList\e[0m =\
    \ mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationList is already defined as \e[33mvalue\e[0m \e\
    [35mfactorizationList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/t"
  stdout: ''
  timestamp: 1659798063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ListBuffer.empty[Long]\n        val factorization\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCounts = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCounts_prime = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_prime_prime\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_prime_prime_prime\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_prime_prime_prime_prime\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_prime_prime_prime_prime_prime\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_prime_prime_prime_prime_prime_prime\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_prime_prime_prime_prime_prime_prime_prime\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_prime_prime_prime_prime_prime_prime\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1k6uumzt.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1k6uumzt.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCounts_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCounts_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  factorizationCounts_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp1k6uumzt.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCounts_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCounts_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  factorizationCounts_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1k6uumzt.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   "
  stdout: ''
  timestamp: 1659798065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val isPrime =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrimeFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor2 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor3\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor4 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor5 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor6\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor7 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor8 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor9\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor10 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor11 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor12\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor13 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor14 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor15\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor16 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor17 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor18\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor19 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor20 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor21\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor22 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor23 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor24\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor25 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor26 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor27\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor28 = mutable.\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxwgiwras.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpxwgiwras.scala:14:22 ------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpxwgiwras.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpxwgiwras.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpxwgiwras.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpxwgiwras.scala:18:28 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactor\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not foun"
  stdout: ''
  timestamp: 1659798065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorize(n, factorization)\n   \
    \     factorization.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqydq_njc.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqydq_njc.scala:15:18 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        factorize(n, factorization)\n\e[31m\e[31m   |\e\
    [0m                  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  Found:\
    \    (Long, Nothing)\n\e[31m   |\e[0m                  Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimes = mutable.ListBuffer[Long]()\n        val factorizationPrime\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizations =\
    \ mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorization = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorizationPrimes = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorizationPrime = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorizationPrimeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimes = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPri\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqf2ijmuc.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqf2ijmuc.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpqf2ijmuc.scala:15:29 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqf2ijmuc.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpqf2ijmuc.scala:17:34 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpqf2ijmuc.scala:18:33 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^"
  stdout: ''
  timestamp: 1659798065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.Array\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw6shs0_0.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpw6shs0_0.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpw6shs0_0.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpw6shs0_0.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Nami"
  stdout: ''
  timestamp: 1659798067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val primes =\
    \ mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.List\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe7veeds8.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizations is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorizations\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpe7veeds8.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorization is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorization\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpe7veeds8.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizations is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorizations\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpe7veeds8.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorization is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorization\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpe7veeds8.scala"
  stdout: ''
  timestamp: 1659798067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n    \
    \    val primeFactorizationPrime = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorizationPrimeFactorization = mutable.ArrayBuffer.empty[Long]\n   \
    \     val primeFactorizationPrimeFactorizationPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizationPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp6pcqx8aa.scala:34:127 --------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp6pcqx8aa.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp6pcqx8aa.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizatio"
  stdout: ''
  timestamp: 1659798069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationSize = n\n        val primeFactorizationSize = factorizationSize\
    \ / 2\n        val factorizationPrimes = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationPrimeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationSize = factorizationPrimes.size /\
    \ 2\n        val factorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationSize = factorizationPrimeFactorizationPrimes.size\
    \ / 2\n        val factorizationPrimeFactorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationSize\
    \ = factorizationPrimeFactorizationPrimeFactorization.size / 2\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationSize\
    \ = factorizationPrimeFactorizationPrimeFactorizationPrimes.size / 2\n       \
    \ val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationSize\
    \ = factorizationPrimeFactorizationPrimeFactorizationPrimeFactorization.size /\
    \ 2\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrime\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp91bt69tx.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp91bt69tx.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp91bt69tx.scala:15:21 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp91bt69tx.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp91bt69tx.scala:19:34 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizationPrimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp91bt69tx.scala:20:46 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfactorizationPrimeFactorization\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[3"
  stdout: ''
  timestamp: 1659798068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val factorization = mutable.ListBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationCount = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCounts = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_primes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_primes_primes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_primes_primes_primes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_primes_primes_primes_primes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_primes_primes_primes_primes_primes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_primes_primes_primes_primes_primes_primes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_primes_primes_primes_primes_primes_primes_primes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf2ktljsh.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf2ktljsh.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf2ktljsh.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf2ktljsh.scala:16:28\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf2ktljsh.scala:17:33 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf2ktljsh.scala:18:38 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationCount\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \                               ^"
  stdout: ''
  timestamp: 1659798068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationInOrder\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationInOrderInOrder\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationInOrderInOrderInOrder\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationInOrderInOrderInOrderInOrder\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationInOrderInOrderInOrderInOrderInOrder\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationIn\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm59_3c72.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm59_3c72.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36misPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpm59_3c72.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpm59_3c72.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOr"
  stdout: ''
  timestamp: 1659798069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpd39dbnk6.scala:46:34 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCounts_\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd39dbnk6.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCounts_\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCounts_ is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCounts_\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpd39dbnk6.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCounts_\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCounts_ is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCounts_\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpd39dbnk6.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCounts_\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCounts_ is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCounts_\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpd39dbnk6.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659798029
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val isPrime =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrimeFactors = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsIndex = mutable.ListBuffer[Int]()\n        val isPrimeFactorsIndexIndex\
    \ = mutable.ListBuffer[Int]()\n        val isPrimeFactorsIndexIndexIndex = mutable.ListBuffer[Int]()\n\
    \        val isPrimeFactorsIndexIndexIndexIndex = mutable.ListBuffer[Int]()\n\
    \        val isPrimeFactorsIndexIndexIndexIndexIndex = mutable.ListBuffer[Int]()\n\
    \        val isPrimeFactorsIndexIndexIndexIndexIndexIndexIndex = mutable.ListBuffer[Int]()\n\
    \        val isPrimeFactorsIndexIndexIndexIndexIndexIndexIndexIndex = mutable.ListBuffer[Int]()\n\
    \        val isPrimeFactorsIndexIndexIndexIndexIndexIndexIndexIndexIndex = mutable.ListBuffer[Int]()\n\
    \        val isPrimeFactorsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = mutable.ListBuffer[Int]()\n        val isPrimeFactorsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = mutable.ListBuffer[Int]()\n        val isPrimeFactorsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = mutable.ListBuffer[Int]()\n        val isPrimeFactorsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = mutable.ListBuffer[Int]()\n        val isPrimeFactorsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = mutable.ListBuffer[Int]()\n        val isPrimeFactorsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = mutable.ListBuffer[Int]()\n        val isPrimeFactorsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = mutable.ListBuffer[Int]()\n        val isPrimeFactorsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = mutable.ListBuffer[Int]()\n        val isPrimeFactorsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = mutable.ListBuffer[Int]()\n        val isPrimeFactorsIndexIndexIndexIndexIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmpi8nr3u.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmpi8nr3u.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36misPrimeFactorsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  isPrimeFactorsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpmpi8nr3u.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  isPrimeFactorsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpmpi8nr3u.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m  "
  stdout: ''
  timestamp: 1659798070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factor = 1\n        while (n\
    \ > 1) {\n            while (n % factor == 0) {\n                factorization\
    \ += factor\n                n /= factor\n            }\n            factor +=\
    \ 1\n        }\n        factorization.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdswy7l5i.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpdswy7l5i.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                n /= factor\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member\
    \ of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        var i = 2\n        while (i <= n)\
    \ {\n            if (n % i == 0) {\n                factors += i\n           \
    \     n /= i\n            }\n            i += 1\n        }\n        factors\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzdssw2dh.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpzdssw2dh.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798071
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n);\n\
    \        factorization.foreach(x => factors += x)\n        factors\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp93_80p4k.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp93_80p4k.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n);\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        var i = 2\n        while (i <= n) {\n\
    \            if (n % i == 0) {\n                factors += i\n               \
    \ n /= i\n            }\n            i += 1\n        }\n        factors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpul5umg3g.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpul5umg3g.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        var i = 2L\n        while (i <= n) {\n\
    \            if (n % i == 0) {\n                factors.append(i)\n          \
    \      factors.append(n / i)\n                factors.append(n / i * i)\n    \
    \            factors.append(n / i * i * i)\n                factors.append(n /\
    \ i * i * i * i)\n                factors.append(n / i * i * i * i * i)\n    \
    \            factors.append(n / i * i * i * i * i * i)\n                factors.append(n\
    \ / i * i * i * i * i * i * i)\n                factors.append(n / i * i * i *\
    \ i * i * i * i * i)\n                factors.append(n / i * i * i * i * i * i\
    \ * i * i * i)\n                factors.append(n / i * i * i * i * i * i * i *\
    \ i * i * i)\n                factors.append(n / i * i * i * i * i * i * i * i\
    \ * i * i * i)\n                factors.append(n / i * i * i * i * i * i * i *\
    \ i * i * i * i * i)\n                factors.append(n / i * i * i * i * i * i\
    \ * i * i * i * i * i * i * i)\n                factors.append(n / i * i * i *\
    \ i * i * i * i * i * i * i * i * i * i * i)\n                factors.append(n\
    \ / i * i * i * i * i * i * i * i * i * i * i * i * i * i * i)\n             \
    \   factors.append(n / i * i * i * i * i * i * i * i * i * i * i * i * i * i *\
    \ i)\n                factors.append(n / i * i * i * i * i * i * i * i * i * i\
    \ * i * i * i * i * i)\n                factors.append(n / i * i * i * i * i *\
    \ i * i * i * i * i * i * i * i * i * i)\n                factors.append(n / i\
    \ * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i)\n             \
    \   factors.append(n / i * i * i * i * i * i * i * i * i * i * i * i * i * i *\
    \ i * i)\n                factors.append(n / i * i * i * i * i * i * i * i * i\
    \ * i * i * i * i * i * i * i)\n                factors.append(n / i * i * i *\
    \ i * i * i * i * i * i * i * i * i * i * i * i * i)\n                factors.append(n\
    \ / i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i)\n         \
    \       factors.append(n / i * i * i * i * i * i * i * i * i * i * i * i * i *\
    \ i * i * i)\n                factors.append(n / i * i * i * i * i * i * i * i\
    \ * i * i * i * i * i * i * i * i * i)\n                factors.append(n / i *\
    \ i * i * i * i * \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpn_gzrmmt.scala:47:54 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m                factors.append(n / i * i * i * i * i\
    \ * \n\e[31m\e[31m   |\e[0m                                                  \
    \    ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpn_gzrmmt.scala:61:0 ----------------------------\e[0m\e[0m\n\e[31m61\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_gzrmmt.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpn_gzrmmt.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpn_gzrmmt.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_gzrmmt.scala:17:33 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m     "
  stdout: ''
  timestamp: 1659798070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp8f5nuta.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp8f5nuta.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationListSizeSizeSizeSize\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationListSizeSizeSizeSize is already defined as \e\
    [33mvalue\e[0m \e[35mfactorizationListSizeSizeSizeSize\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp8f5nuta.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationListSizeSizeSizeSizeSizeSize\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationListSizeSizeSizeSizeSizeSize is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationListSizeSizeSizeSizeSizeSize\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpp8f5nuta.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationListSizeSizeSizeSizeSizeSizeSize\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationListSizeSizeSizeSizeSizeSizeSize is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationListSizeSizeSizeSizeSizeSizeSize\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpp8f5nuta.scala:30:12 ----------------"
  stdout: ''
  timestamp: 1659798072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factor = 2\n        while (factor\
    \ <= n) {\n            if (n % factor == 0) {\n                factorization +=\
    \ factor\n                n /= factor\n            } else {\n                factor\
    \ += 1\n            }\n        }\n        factorization.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpulhm8odl.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpulhm8odl.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                n /= factor\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member\
    \ of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationSize = n\n        val primesSize = factorizationSize / 2\n    \
    \    val primeFactorizationSize = primesSize * 2\n        val primeFactorizationBuffer\
    \ = new Array[Long](primeFactorizationSize)\n        val factorizationBuffer =\
    \ new Array[Long](factorizationSize)\n        val primeFactorizationBuffer = new\
    \ Array[Long](primeFactorizationSize)\n        val factorizationBuffer = new Array[Long](factorizationSize)\n\
    \        val primeFactorizationBuffer = new Array[Long](primeFactorizationSize)\n\
    \        val factorizationBuffer = new Array[Long](factorizationSize)\n      \
    \  val primeFactorizationBuffer = new Array[Long](primeFactorizationSize)\n  \
    \      val factorizationBuffer = new Array[Long](factorizationSize)\n        val\
    \ primeFactorizationBuffer = new Array[Long](primeFactorizationSize)\n       \
    \ val factorizationBuffer = new Array[Long](factorizationSize)\n        val primeFactorizationBuffer\
    \ = new Array[Long](primeFactorizationSize)\n        val factorizationBuffer =\
    \ new Array[Long](factorizationSize)\n        val primeFactorizationBuffer = new\
    \ Array[Long](primeFactorizationSize)\n        val factorizationBuffer = new Array[Long](factorizationSize)\n\
    \        val primeFactorizationBuffer = new Array[Long](primeFactorizationSize)\n\
    \        val factorizationBuffer = new Array[Long](factorizationSize)\n      \
    \  val primeFactorizationBuffer = new Array[Long](primeFactorizationSize)\n  \
    \      val factorizationBuffer = new Array[Long](factorizationSize)\n        val\
    \ primeFactorizationBuffer = new Array[Long](primeFactorizationSize)\n       \
    \ val factorizationBuffer = new Array[Long](factorizationSize)\n        val primeFactorizationBuffer\
    \ = new Array[Long](primeFactorizationSize)\n        val factorizationBuffer =\
    \ new Array[Long](factorizationSize)\n        val primeFactorizationBuffer = new\
    \ Array[Long](primeFactorizationSize)\n        val factorizationBuffer = new Array[Long](factorizationSize)\n\
    \        val primeFactorizationBuffer = new Array[Long](primeFactorizationSize)\n\
    \        val factorizationBuffer = new Array[Long](factorizationSize)\n      \
    \  val primeFactorizationBuffer = new Array[Long](primeFactorizationSize)\n  \
    \      val factorizationBuffer = new Array\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt5br8cfp.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationBuffer\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](primeFactorizationSize)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationBuffer is already defined as \e[33mvalue\e\
    [0m \e[35mprimeFactorizationBuffer\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt5br8cfp.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mfactorizationBuffer\e[0m\
    \ = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](factorizationSize)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationBuffer is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationBuffer\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpt5br8cfp.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationBuffer\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](primeFactorizationSize)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationBuffer is already defined as \e[33mvalue\e\
    [0m \e[35mprimeFactorizationBuffer\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt5br8cfp.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mfactorizationBuffer\e[0m\
    \ = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](factorizationSize)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationBuffer is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659798073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n) \n\
    \        for (factor <- factorization) {\n            factors += factor\n    \
    \    }\n        factors.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwony3d47.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpwony3d47.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\
    \ \n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m \
    \                           Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n) //factorization\
    \ is list of factors of given number\n        factorization foreach { factor =>\n\
    \            factors += factor\n        }\n        factors\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcr6u1b2q.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpcr6u1b2q.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\
    \ \e[34m//factorization is list of factors of given number\e[0m\n\e[31m\e[31m\
    \   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m                \
    \            Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ArrayBuffer.empty[Long]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactors = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeFactorsOfPrimes = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorsOfPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorsOfPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorsOfPrimeFactor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorsOfPrimeFactorOfPrimes\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorsOfPrimeFactorOfPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorsOfPrimeFactorOfPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorsOfPrimeFactorOfPrimeFactor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorsOfPrimeFactorOfPrimeFactorOfPrimes\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorsOfPrimeFactorOfPrimeFactorOfPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorsOfPrimeFactorOfPrimeFactorOfPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorsOfPrimeFactorOfPrimeFactorOfPrimeFactor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorsOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimes\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorsOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorsOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorsOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2ch4elzs.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp2ch4elzs.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp2ch4elzs.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2ch4elzs.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp2ch4elzs.scala:18:28 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactor\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2ch4elzs.scala:19:29 -----------"
  stdout: ''
  timestamp: 1659798074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorizations_count = mutable.ListBuffer[Long]()\n        val factorizations_count_max\
    \ = mutable.ListBuffer[Long]()\n        val factorizations_count_min = mutable.ListBuffer[Long]()\n\
    \        val factorizations_count_min = mutable.ListBuffer[Long]()\n        val\
    \ factorizations_count_max = mutable.ListBuffer[Long]()\n        val factorizations_count_min\
    \ = mutable.ListBuffer[Long]()\n        val factorizations_count_max = mutable.ListBuffer[Long]()\n\
    \        val factorizations_count_min = mutable.ListBuffer[Long]()\n        val\
    \ factorizations_count_max = mutable.ListBuffer[Long]()\n        val factorizations_count_min\
    \ = mutable.ListBuffer[Long]()\n        val factorizations_count_max = mutable.ListBuffer[Long]()\n\
    \        val factorizations_count_min = mutable.ListBuffer[Long]()\n        val\
    \ factorizations_count_max = mutable.ListBuffer[Long]()\n        val factorizations_count_min\
    \ = mutable.ListBuffer[Long]()\n        val factorizations_count_max = mutable.ListBuffer[Long]()\n\
    \        val factorizations_count_min = mutable.ListBuffer[Long]()\n        val\
    \ factorizations_count_max = mutable.ListBuffer[Long]()\n        val factorizations_count_min\
    \ = mutable.ListBuffer[Long]()\n        val factorizations_count_max = mutable.ListBuffer[Long]()\n\
    \        val factorizations_count_min = mutable.ListBuffer[Long]()\n        val\
    \ factorizations_count_max = mutable.ListBuffer[Long]()\n        val factorizations_count_min\
    \ = mutable.ListBuffer[Long]()\n        val factorizations_count_max = mutable.ListBuffer[Long]()\n\
    \        val factorizations_count_min = mutable.ListBuffer[Long]()\n        val\
    \ factorizations_count_max = mutable.ListBuffer[Long]()\n        val factorizations_count_min\
    \ = mutable.ListBuffer[Long]()\n        val factorizations_count_max = mutable.ListBuffer[Long]()\n\
    \        val factorizations_count_min = mutable.ListBuffer[Long]()\n        val\
    \ factorizations_count_max = mutable.ListBuffer[Long]()\n        val factorizations_count_min\
    \ = mutable.ListBuffer[Long]()\n        val factorizations_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6h38bwwl.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6h38bwwl.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizations_count_min\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations_count_min is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizations_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6h38bwwl.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfactorizations_count_max\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations_count_max is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizations_count_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6h38bwwl.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mfactorizations_count_min\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations_count_min is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizations_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6h38bwwl.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mfactorizations_count_max\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31"
  stdout: ''
  timestamp: 1659798075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n) \n\
    \        factorization.foreach { f =>\n            factors += f\n        }\n \
    \       factors.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps_k277gh.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmps_k277gh.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\
    \ \n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m \
    \                           Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798071
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        var i = 2\n        while (i <= n / i)\
    \ {\n            if (n % i == 0) {\n                factors += i\n           \
    \     n /= i\n            }\n            i += 1\n        }\n        factors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpklfrofsb.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpklfrofsb.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798031
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ArrayBuffer.empty[Long]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactorization = mutable.ArrayBuffer.empty[Boolean]\n     \
    \   val isPrimeFactorizationPrime = mutable.ArrayBuffer.empty[Boolean]\n     \
    \   val isPrimeFactorizationPrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactorizationPrimeFactorFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactorizationPrimeFactorFactorFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactorizationPrimeFactorFactorFactorFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactorizationPrimeFactorFactorFactorFactorFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactorizationPrimeFactorFactorFactorFactorFactorFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactorizationPrimeFactorFactorFactorFactorFactorFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactorizationPrimeFactorFactorFactorFactorFactorFactorFactor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = mutable.ArrayBuffer.empty[Boolean\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdvazv1q7.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdvazv1q7.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36misPrimeFactorizationPrimeFactorFactorFactorFactorFactorFactor\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorizationPrimeFactorFactorFactorFactorFactorFactor\
    \ is already defined as \e[33mvalue\e[0m \e[35misPrimeFactorizationPrimeFactorFactorFactorFactorFactorFactor\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdvazv1q7.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorizationPrimeFactorFactorFactorFactorFactorFactorFactorFactor\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorizationPrimeFactorFactorFactorFactorFactorFactorFactorFactor\
    \ is already defined as \e[33mvalue\e[0m \e[35misPrimeFactorizationPrimeFactorFactorFactorFactorFactorFactorFactorFactor\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdvazv1q7.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorizationPrimeFactorFactorFactorFactorFactorFactorFactorFactor\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorizationP"
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n) //factorization\
    \ is list of factors of n\n        factorization.foreach(factor => factors +=\
    \ factor)\n        factors\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs25mpg4.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpbs25mpg4.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\
    \ \e[34m//factorization is list of factors of n\e[0m\n\e[31m\e[31m   |\e[0m  \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \ Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val factorization = factorization(n)\n\
    \        factorization foreach { f =>\n            factors += f\n        }\n \
    \       factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp5405tj1.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpp5405tj1.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList2\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList3 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList4 = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationCountList5 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList6 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList7\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList8 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList9 = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationCountList10 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList11 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList12\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList13 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList14 = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountList15 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList16 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList17\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList18 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList19 = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountList20 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList21 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList22\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList23 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList24 = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountList25 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList26 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList27\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList28 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList29\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz2x70jt1.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz2x70jt1.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpz2x70jt1.scala:15:32 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz2x70jt1.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpz2x70jt1.scala:17:37 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizationCountList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz2x70jt1.scala:18:38\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorizationCountList2\e[0m = mutable.ArrayBu"
  stdout: ''
  timestamp: 1659798062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationSize = n\n        val primeFactorizationSize = factorizationSize\
    \ / 2\n        val primeFactorizationSize2 = primeFactorizationSize / 2\n    \
    \    val primeFactorizationSize3 = primeFactorizationSize2 / 2\n        val primeFactorizationSize4\
    \ = primeFactorizationSize3 / 2\n        val primeFactorizationSize5 = primeFactorizationSize4\
    \ / 2\n        val primeFactorizationSize6 = primeFactorizationSize5 / 2\n   \
    \     val primeFactorizationSize7 = primeFactorizationSize6 / 2\n        val primeFactorizationSize8\
    \ = primeFactorizationSize7 / 2\n        val primeFactorizationSize9 = primeFactorizationSize8\
    \ / 2\n        val primeFactorizationSize10 = primeFactorizationSize9 / 2\n  \
    \      val primeFactorizationSize11 = primeFactorizationSize10 / 2\n        val\
    \ primeFactorizationSize12 = primeFactorizationSize11 / 2\n        val primeFactorizationSize13\
    \ = primeFactorizationSize12 / 2\n        val primeFactorizationSize14 = primeFactorizationSize13\
    \ / 2\n        val primeFactorizationSize15 = primeFactorizationSize14 / 2\n \
    \       val primeFactorizationSize16 = primeFactorizationSize15 / 2\n        val\
    \ primeFactorizationSize17 = primeFactorizationSize16 / 2\n        val primeFactorizationSize18\
    \ = primeFactorizationSize17 / 2\n        val primeFactorizationSize19 = primeFactorizationSize18\
    \ / 2\n        val primeFactorizationSize20 = primeFactorizationSize19 / 2\n \
    \       val primeFactorizationSize21 = primeFactorizationSize20 / 2\n        val\
    \ primeFactorizationSize22 = primeFactorizationSize21 / 2\n        val primeFactorizationSize23\
    \ = primeFactorizationSize22 / 2\n        val primeFactorizationSize24 = primeFactorizationSize23\
    \ / 2\n        val primeFactorizationSize25 = primeFactorizationSize24 / 2\n \
    \       val primeFactorizationSize26 = primeFactorizationSize25 / 2\n        val\
    \ primeFactorizationSize27 = primeFactorizationSize26 / 2\n        val primeFactorizationSize28\
    \ = primeFactorizationSize27 / 2\n        val primeFactorizationSize29 = primeFactorizationSize28\
    \ / 2\n        val primeFactorizationSize30 = primeFactorizationSize29 / 2\n\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt5hulcj5.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpt5hulcj5.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpt5hulcj5.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpt5hulcj5.scala:49:5 ---------------------\e[0m\e[0m\n\e[31m49\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        var i = 2L\n        while (i <= n / i)\
    \ {\n            if (n % i == 0) {\n                factors += i\n           \
    \     n /= i\n            }\n            i += 1\n        }\n        if (n > 1)\
    \ {\n            factors += n\n        }\n        factors.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6_g8u1jf.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp6_g8u1jf.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n) \n\
    \        for (i <- factorization.indices) {\n            val count = factorization(i)\n\
    \            val factor = factors(i)\n            factors += factor * count\n\
    \        }\n        factors.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqe3qm5vb.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpqe3qm5vb.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\
    \ \n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m \
    \                           Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimes = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationPrime = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfqpn6z_w.scala:36:109 --------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                                                             ^\e[0m\n\e[31m \
    \  |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfqpn6z_w.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpfqpn6z_w.scala:15:29 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfqpn6z_w.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfqpn6z_w.scala:17:34 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \      "
  stdout: ''
  timestamp: 1659798078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val isPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationInOrder = mutable.ListBuffer[Boolean]()\n   \
    \     val isPrimeFactorizationInOrderInOrder = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationInOrderInOrderInOrder = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationInOrderInOrderInOrderInOrder = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationInOrderInOrderInOrderInOrderInOrder = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrder =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderIn\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdr0_m2mu.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdr0_m2mu.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36misPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpdr0_m2mu.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpdr0_m2mu.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e"
  stdout: ''
  timestamp: 1659798080
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val factorization = factorization(n)\n\
    \        factorization.foreach(f => factors += f)\n        factors\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzvgz65it.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpzvgz65it.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factors = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimes = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationFactors = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountCountCountCountCountCountCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorsCountCountCountCountCountCountCountCountCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0929pxfj.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0929pxfj.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimeFactorsCountCountCountCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimeFactorsCountCountCountCount is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationPrimeFactorsCountCountCountCount\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp0929pxfj.scala:36:12 ---------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationPrimeFactorsCountCountCountCountCountCountCountCountCountCountCountCount\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimeFactorsCountCountCountCountCountCountCountCountCountCountCountCount\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  factorizationPrimeFactorsCountCountCountCountCountCountCountCountCountCountCountCount\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp0929pxfj.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Erro"
  stdout: ''
  timestamp: 1659798079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n     \
    \   val isPrimeFactorizationPrimeCount = mutable.ListBuffer[Boolean]()\n     \
    \   val isPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeCount\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationCount\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeCount\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPri\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq3stbae_.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq3stbae_.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq3stbae_.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq3stbae_.scala:16:27\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mprimeFactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpq3stbae_.scala:17:28 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpq3stbae_.scala:18:33 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                        "
  stdout: ''
  timestamp: 1659798079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n    \
    \    val primeFactorizationPrime = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorizationPrimeFactors = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorizationPrimeFactor = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorizationPrimeFactorPrimes = mutable.ArrayBuffer.empty[Long]\n    \
    \    val primeFactorizationPrimeFactorPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactor = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimeFactor = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactors =\
    \ mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactor\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactorPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactorPrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactorPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1ebzqy5z.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp1ebzqy5z.scala:15:29 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp1ebzqy5z.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1ebzqy5z.scala:17:34 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp1ebzqy5z.scala:18:33 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[3"
  stdout: ''
  timestamp: 1659798081
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        factorization foreach { x =>\n            factors += x\n        }\n \
    \       factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdub6uuo2.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpdub6uuo2.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount2 = mutable.ListBuffer[Long]()\n        val factorizationCount3\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount4 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount5 = mutable.ListBuffer[Long]()\n        val factorizationCount6\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount7 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount8 = mutable.ListBuffer[Long]()\n        val factorizationCount9\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount10 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount11 = mutable.ListBuffer[Long]()\n        val factorizationCount12\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount13 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount14 = mutable.ListBuffer[Long]()\n        val factorizationCount15\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount16 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount17 = mutable.ListBuffer[Long]()\n        val factorizationCount18\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount19 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount20 = mutable.ListBuffer[Long]()\n        val factorizationCount21\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount22 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount23 = mutable.ListBuffer[Long]()\n        val factorizationCount24\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount25 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount26 = mutable.ListBuffer[Long]()\n        val factorizationCount27\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount28 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount29 = mutable.ListBuffer[Long]()\n        val factorizationCount30\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp7_onlu84.scala:47:34 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount30\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7_onlu84.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7_onlu84.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7_onlu84.scala:16:27\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mprimeFactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7_onlu84.scala:17:28 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7_onlu84.scala:18:33 ----------------------"
  stdout: ''
  timestamp: 1659798020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationSize = n\n        val\
    \ factorizationPrimes = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactors\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsSize = factorizationPrimes.size\n\
    \        val factorizationPrimeFactorsIndex = factorizationPrimeFactorsSize -\
    \ 1\n        val factorizationPrimeFactorsIndexSize = factorizationPrimeFactorsIndex\
    \ + 1\n        val factorizationPrimeFactorsIndexLast = factorizationPrimeFactorsIndexSize\
    \ - 1\n        val factorizationPrimeFactorsIndexLastSize = factorizationPrimeFactorsIndexLast\
    \ + 1\n        val factorizationPrimeFactorsIndexLastLast = factorizationPrimeFactorsIndexLastSize\
    \ - 1\n        val factorizationPrimeFactorsIndexLastLastSize = factorizationPrimeFactorsIndexLastLast\
    \ + 1\n        val factorizationPrimeFactorsIndexLastLastLast = factorizationPrimeFactorsIndexLastLastSize\
    \ - 1\n        val factorizationPrimeFactorsIndexLastLastLastSize = factorizationPrimeFactorsIndexLastLastLast\
    \ + 1\n        val factorizationPrimeFactorsIndexLastLastLastLast = factorizationPrimeFactorsIndexLastLastLastSize\
    \ - 1\n        val factorizationPrimeFactorsIndexLastLastLastLastSize = factorizationPrimeFactorsIndexLastLastLastLast\
    \ + 1\n        val factorizationPrimeFactorsIndexLastLastLastLastSize = factorizationPrimeFactorsIndexLastLastLastLastSize\
    \ - 1\n        val factorizationPrimeFactorsIndexLastLastLastLastLastSize = factorizationPrimeFactorsIndexLastLastLastLastSize\
    \ - 1\n        val factorizationPrimeFactorsIndexLastLastLastLastLastSize = factorizationPrimeFactorsIndexLastLastLastLastLastSize\
    \ - 1\n        val factorizationPrimeFactorsIndexLastLastLastLastLastLastSize\
    \ = factorizationPrimeFactorsIndexLastLastLastLastLastSize - 1\n        val factorizationPrimeFactorsIndexLastLastLastLastLastLastSize\
    \ = factorizationPrimeFactorsIndexLastLastLastLastLastSize - 1\n        val factorizationPrimeFactorsIndexLastLastLastLastLastLastSize\
    \ = factorizationPrimeFactorsIndexLastLast\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwxs9n9zx.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mfactorizationPrimeFactorsIndexLastLastLastLastSize\e\
    [0m = factorizationPrimeFactorsIndexLastLastLastLastSize - \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimeFactorsIndexLastLastLastLastSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorizationPrimeFactorsIndexLastLastLastLastSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwxs9n9zx.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mfactorizationPrimeFactorsIndexLastLastLastLastLastSize\e\
    [0m = factorizationPrimeFactorsIndexLastLastLastLastLastSize - \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimeFactorsIndexLastLastLastLastLastSize is\
    \ already defined as \e[33mvalue\e[0m \e[35mfactorizationPrimeFactorsIndexLastLastLastLastLastSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwxs9n9zx.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mfactorizationPrimeFactorsIndexLastLastLastLastLastLastSize\e\
    [0m = factorizationPrimeFactorsIndexLastLastLastLastLastSize - \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimeFactorsIndexLastLastLastLastLastLastSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mfactorizationPrimeFactorsIndexLastLastLastLastLastLastSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must a"
  stdout: ''
  timestamp: 1659798081
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorizations_count = mutable.ListBuffer[Long]()\n        val factorizations_count_max\
    \ = mutable.ListBuffer[Long]()\n        val factorizations_count_max_index = mutable.ListBuffer[Int]()\n\
    \        val factorizations_count_max_index2 = mutable.ListBuffer[Int]()\n   \
    \     val factorizations_count_max_index3 = mutable.ListBuffer[Int]()\n      \
    \  val factorizations_count_max_index4 = mutable.ListBuffer[Int]()\n        val\
    \ factorizations_count_max_index5 = mutable.ListBuffer[Int]()\n        val factorizations_count_max_index6\
    \ = mutable.ListBuffer[Int]()\n        val factorizations_count_max_index7 = mutable.ListBuffer[Int]()\n\
    \        val factorizations_count_max_index8 = mutable.ListBuffer[Int]()\n   \
    \     val factorizations_count_max_index9 = mutable.ListBuffer[Int]()\n      \
    \  val factorizations_count_max_index10 = mutable.ListBuffer[Int]()\n        val\
    \ factorizations_count_max_index11 = mutable.ListBuffer[Int]()\n        val factorizations_count_max_index12\
    \ = mutable.ListBuffer[Int]()\n        val factorizations_count_max_index13 =\
    \ mutable.ListBuffer[Int]()\n        val factorizations_count_max_index14 = mutable.ListBuffer[Int]()\n\
    \        val factorizations_count_max_index15 = mutable.ListBuffer[Int]()\n  \
    \      val factorizations_count_max_index16 = mutable.ListBuffer[Int]()\n    \
    \    val factorizations_count_max_index17 = mutable.ListBuffer[Int]()\n      \
    \  val factorizations_count_max_index18 = mutable.ListBuffer[Int]()\n        val\
    \ factorizations_count_max_index19 = mutable.ListBuffer[Int]()\n        val factorizations_count_max_index20\
    \ = mutable.ListBuffer[Int]()\n        val factorizations_count_max_index21 =\
    \ mutable.ListBuffer[Int]()\n        val factorizations_count_max_index22 = mutable.ListBuffer[Int]()\n\
    \        val factorizations_count_max_index23 = mutable.ListBuffer[Int]()\n  \
    \      val factorizations_count_max_index24 = mutable.ListBuffer[Int]()\n    \
    \    val factorizations_count_max_index25 = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmplvcx73uw.scala:42:46 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mfactorizations_count_max_index25\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmplvcx73uw.scala:14:28 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmplvcx73uw.scala:15:29 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplvcx73uw.scala:16:35 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorizations_count\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmplvcx73uw.scala:17:39 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizations_count_max\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation a"
  stdout: ''
  timestamp: 1659798082
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val isPrime =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n     \
    \   val isPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorization\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnf8yer0n.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnf8yer0n.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36misPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpnf8yer0n.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpnf8yer0n.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPri"
  stdout: ''
  timestamp: 1659798081
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        var factor = 2\n        while (factor\
    \ <= n) {\n            if (n % factor == 0) {\n                factorization +=\
    \ factor\n                while (factor <= n / factor) {\n                   \
    \ factor += factor\n                }\n            }\n            factor += 1\n\
    \        }\n        factorization.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr26_3kcy.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659798078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCounts\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCounts_ = mutable.ListBuffer[Long]()\n\
    \        val factorizationCounts_ = mutable.ListBuffer[Long]()\n        val factorizationCounts_\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCounts_ = mutable.ListBuffer[Long]()\n\
    \        val factorizationCounts_ = mutable.ListBuffer[Long]()\n        val factorizationCounts_\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCounts_ = mutable.ListBuffer[Long]()\n\
    \        val factorizationCounts_ = mutable.ListBuffer[Long]()\n        val factorizationCounts_\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCounts_ = mutable.ListBuffer[Long]()\n\
    \        val factorizationCounts_ = mutable.ListBuffer[Long]()\n        val factorizationCounts_\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCounts_ = mutable.ListBuffer[Long]()\n\
    \        val factorizationCounts_ = mutable.ListBuffer[Long]()\n        val factorizationCounts_\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCounts_ = mutable.ListBuffer[Long]()\n\
    \        val factorizationCounts_ = mutable.ListBuffer[Long]()\n        val factorizationCounts_\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCounts_ = mutable.ListBuffer[Long]()\n\
    \        val factorizationCounts_ = mutable.ListBuffer[Long]()\n        val factorizationCounts_\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCounts_ = mutable.ListBuffer[Long]()\n\
    \        val factorizationCounts_ = mutable.ListBuffer[Long]()\n        val factorizationCounts_\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCounts_ = mutable.ListBuffer[Long]()\n\
    \        val factorizationCounts_ = mutable.ListBuffer[Long]()\n        val factorizationCounts_\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCounts_ = mutable.ListBuffer[Long]()\n\
    \        val factorizationCounts_ = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmplqr0l41p.scala:46:34 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCounts_\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplqr0l41p.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCounts_\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCounts_ is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCounts_\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmplqr0l41p.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCounts_\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCounts_ is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCounts_\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmplqr0l41p.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCounts_\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCounts_ is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCounts_\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmplqr0l41p.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e"
  stdout: ''
  timestamp: 1659798082
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount2 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount3 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount4\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount5 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount6 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount7 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount8\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount9 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount10 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount11 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount12\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount13 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount14 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount15 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount16\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount17 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount18 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount19 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount20\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount21 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount22 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount23 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount24\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount25 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount26 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount27 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount28\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount29 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount30 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount31 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount32\
    \ = mutable.ArrayBuffer.empty[Long]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphnstev9b.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmphnstev9b.scala:15:33 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmphnstev9b.scala:16:34 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizationCount2\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphnstev9b.scala:17:34 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount3\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmphnstev9b.scala:18:34 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizationCount4\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explana"
  stdout: ''
  timestamp: 1659798083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        var i = 2\n        while (i <= n / i)\
    \ {\n            if (n % i == 0) {\n                factors += i\n           \
    \     n /= i\n            }\n            i += 1\n        }\n        factors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpklfrofsb.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpklfrofsb.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798031
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isPrimeCount\
    \ = mutable.ListBuffer[Boolean]()\n        val isFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isFactorizationCount = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorization = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount2 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationCount3 = mutable.ListBuffer[Boolean]()\n    \
    \    val isPrimeFactorizationCount4 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorizationCount5 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount6\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount7 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationCount8 = mutable.ListBuffer[Boolean]()\n    \
    \    val isPrimeFactorizationCount9 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorizationCount10 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount11\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount12 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationCount13 = mutable.ListBuffer[Boolean]()\n   \
    \     val isPrimeFactorizationCount14 = mutable.ListBuffer[Boolean]()\n      \
    \  val isPrimeFactorizationCount15 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorizationCount16 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount17\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount18 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationCount19 = mutable.ListBuffer[Boolean]()\n   \
    \     val isPrimeFactorizationCount20 = mutable.ListBuffer[Boolean]()\n\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzfdjx4j6.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpzfdjx4j6.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpzfdjx4j6.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpzfdjx4j6.scala:17:28 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpzfdjx4j6.scala:18:33 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpzfdjx4j6.scala:19:22 ---------"
  stdout: ''
  timestamp: 1659798083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factors = mutable.ListBuffer[Long]()\n        val primeFactors =\
    \ mutable.ListBuffer[Long]()\n        val primeFactorsCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorsCount2\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount2 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount3 = mutable.ListBuffer[Long]()\n        val factorizationCount3\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount4 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount4 = mutable.ListBuffer[Long]()\n        val primeFactorsCount5\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount5 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount6 = mutable.ListBuffer[Long]()\n        val factorizationCount6\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount7 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount7 = mutable.ListBuffer[Long]()\n        val primeFactorsCount8\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount8 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount9 = mutable.ListBuffer[Long]()\n        val factorizationCount9\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount10 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount10 = mutable.ListBuffer[Long]()\n        val primeFactorsCount11\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount11 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount12 = mutable.ListBuffer[Long]()\n        val factorizationCount12\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount13 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount13 = mutable.ListBuffer[Long]()\n        val primeFactorsCount14\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount14 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount15 = mutable.ListBuffer[Long]()\n        val factorizationCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqhtb60pm.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqhtb60pm.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpqhtb60pm.scala:15:21 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpqhtb60pm.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpqhtb60pm.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpqhtb60pm.scala:18:32 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorsCount\e[0m =\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                          "
  stdout: ''
  timestamp: 1659798083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization2 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization3 = mutable.ListBuffer[Long]()\n        val primeFactorization4\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization5 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization6 = mutable.ListBuffer[Long]()\n        val primeFactorization7\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization8 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization9 = mutable.ListBuffer[Long]()\n        val primeFactorization10\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization11 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization12 = mutable.ListBuffer[Long]()\n        val primeFactorization13\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization14 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization15 = mutable.ListBuffer[Long]()\n        val primeFactorization16\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization17 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization18 = mutable.ListBuffer[Long]()\n        val primeFactorization19\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization20 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization21 = mutable.ListBuffer[Long]()\n        val primeFactorization22\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization23 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization24 = mutable.ListBuffer[Long]()\n        val primeFactorization25\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization26 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization27 = mutable.ListBuffer[Long]()\n        val primeFactorization28\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization29 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization30 = mutable.ListBuffer[Long]()\n        val primeFactor\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsw2iipze.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsw2iipze.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsw2iipze.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsw2iipze.scala:16:28\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpsw2iipze.scala:17:33 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsw2iipze.scala:18:34 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization2\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1659798019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n     \
    \   val isPrimeFactorizationPrimeCount = mutable.ListBuffer[Boolean]()\n     \
    \   val isPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeCount\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationCount\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeCount\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPri\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuirh_2t7.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuirh_2t7.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpuirh_2t7.scala:15:21 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpuirh_2t7.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpuirh_2t7.scala:17:38 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mprimeFactorizationCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuirh_2t7.scala:18:22\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36misPrime\e[0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                      ^^"
  stdout: ''
  timestamp: 1659798061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factors = mutable.ArrayBuffer.empty[Long]\n        val factorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorizations = mutable.\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj5n61dqg.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpj5n61dqg.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizations is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorizations\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpj5n61dqg.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorization is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorization\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpj5n61dqg.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizations is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorizations\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpj5n61dqg.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizatio"
  stdout: ''
  timestamp: 1659798083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val isPrime = mutable.ListBuffer.empty[Boolean]\n        val isPrimeIter\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeIter2 = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeIter3 = mutable.ListBuffer.empty[Boolean]\n        val isPrimeIter4\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeIter5 = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeIter6 = mutable.ListBuffer.empty[Boolean]\n        val isPrimeIter7\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeIter8 = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeIter9 = mutable.ListBuffer.empty[Boolean]\n        val isPrimeIter10\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeIter11 = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeIter12 = mutable.ListBuffer.empty[Boolean]\n        val isPrimeIter13\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeIter14 = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeIter15 = mutable.ListBuffer.empty[Boolean]\n        val isPrimeIter16\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeIter17 = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeIter18 = mutable.ListBuffer.empty[Boolean]\n        val isPrimeIter19\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeIter20 = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeIter21 = mutable.ListBuffer.empty[Boolean]\n        val isPrimeIter22\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeIter23 = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeIter24 = mutable.ListBuffer.empty[Boolean]\n        val isPrimeIter25\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeIter26 = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeIter27 = mutable.ListBuffer.empty[Boolean]\n        val isPrimeIter28\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeIter29\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4soxewc9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4soxewc9.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4soxewc9.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4soxewc9.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36misPrime\e[0m = mutable.ListBuffer.empty[\e[35mBoolean\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp4soxewc9.scala:17:26 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36misPrimeIter\e[0m = mutable.ListBuffer.empty[\e\
    [35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp4soxewc9.scala:18:27 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36misPrimeIter2\e[0m = mutable.ListBuffer.empty[\e\
    [35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           N"
  stdout: ''
  timestamp: 1659798084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorizationOf(n)\n\
    \        factorization foreach { f =>\n            factors += f\n        }\n \
    \       factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgl4a0idi.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpgl4a0idi.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizationOf(n)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: factorizationOf\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798081
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountPairs\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSorted\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCount\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountReversed\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountReversedByCount\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountReversedByCountReversed\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountReversedByCountReversedByCount\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountReversedByCountReversedByCountReversed\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountReversedByCountReversedByCountReversedByCount\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountReversedByCountReversedByCountReversedByCountReversed\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountReversedByCountReversedByCountReversedByCountReversedByCount\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountReversedByCountReversedByCountReversedByCountReversedByCountReversed\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountReversedByCountReversedByCountReversedByCountReversedByCountReversedByCount\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountReversedByCountReversedByCountReversedByCountReversedByCountReversedByCountReversed\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountReversedByCountReversedByCountReversedByCountReversedByCountReversedByCountReversedBy\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph2rapu7l.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph2rapu7l.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmph2rapu7l.scala:15:29 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmph2rapu7l.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmph2rapu7l.scala:17:34 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizationCounts\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph2rapu7l.scala:18:38 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountPairs\e\
    [0m = mutable.ArrayBuffer.empty[(\e[35mL"
  stdout: ''
  timestamp: 1659798084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorization = \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps3pp6nhh.scala:48:32 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e\
    [0m                                expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps3pp6nhh.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimeFactorizations\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizations is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorizations\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmps3pp6nhh.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorization is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorization\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmps3pp6nhh.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizations is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorizations\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmps3pp6nhh.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mv"
  stdout: ''
  timestamp: 1659798031
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factors = mutable.ListBuffer[Long]()\n        val primeFactors =\
    \ mutable.ListBuffer[Long]()\n        val primeFactorsCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount2 = mutable.ListBuffer[Long]()\n        val primeFactorsCount3\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount4 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount5 = mutable.ListBuffer[Long]()\n        val primeFactorsCount6\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount7 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount8 = mutable.ListBuffer[Long]()\n        val primeFactorsCount9\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount10 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount11 = mutable.ListBuffer[Long]()\n        val primeFactorsCount12\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount13 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount14 = mutable.ListBuffer[Long]()\n        val primeFactorsCount15\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount16 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount17 = mutable.ListBuffer[Long]()\n        val primeFactorsCount18\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount19 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount20 = mutable.ListBuffer[Long]()\n        val primeFactorsCount21\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount22 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount23 = mutable.ListBuffer[Long]()\n        val primeFactorsCount24\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount25 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount26 = mutable.ListBuffer[Long]()\n        val primeFactorsCount27\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount28 = mutable.ListBuffer\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc_oma_6m.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpc_oma_6m.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpc_oma_6m.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpc_oma_6m.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpc_oma_6m.scala:18:32 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorsCount\e[0m =\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc_oma_6m.scala:19:33\
    \ ------------"
  stdout: ''
  timestamp: 1659798085
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationList = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationList = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationList2 = mutable.ListBuffer[Long]()\n        val primeFactorizationList3\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationList4 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationList5 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationList6 = mutable.ListBuffer[Long]()\n        val primeFactorizationList7\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationList8 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationList9 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationList10 = mutable.ListBuffer[Long]()\n        val primeFactorizationList11\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationList12 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationList13 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationList14 = mutable.ListBuffer[Long]()\n        val primeFactorizationList15\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationList16 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationList17 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationList18 = mutable.ListBuffer[Long]()\n        val primeFactorizationList19\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationList20 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationList21 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationList22 = mutable.ListBuffer[Long]()\n        val primeFactorizationList23\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationList24 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationList25 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationList26 = mutable.ListBuffer[Long]()\n        val primeFactorizationList27\
    \ = mutable.ListBuffer[Long\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpix7zwudb.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpix7zwudb.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpix7zwudb.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpix7zwudb.scala:16:28\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpix7zwudb.scala:17:33 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpix7zwudb.scala:18:32 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList\e[0m =\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m        "
  stdout: ''
  timestamp: 1659798085
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationSize = n\n     \
    \   val primeFactorizationSize = factorizationSize / 2\n        val primeFactorizationSize\
    \ = primeFactorizationSize / 2\n        val primeFactorizationSize = primeFactorizationSize\
    \ / 2\n        val primeFactorizationSize = primeFactorizationSize / 2\n     \
    \   val primeFactorizationSize = primeFactorizationSize / 2\n        val primeFactorizationSize\
    \ = primeFactorizationSize / 2\n        val primeFactorizationSize = primeFactorizationSize\
    \ / 2\n        val primeFactorizationSize = primeFactorizationSize / 2\n     \
    \   val primeFactorizationSize = primeFactorizationSize / 2\n        val primeFactorizationSize\
    \ = primeFactorizationSize / 2\n        val primeFactorizationSize = primeFactorizationSize\
    \ / 2\n        val primeFactorizationSize = primeFactorizationSize / 2\n     \
    \   val primeFactorizationSize = primeFactorizationSize / 2\n        val primeFactorizationSize\
    \ = primeFactorizationSize / 2\n        val primeFactorizationSize = primeFactorizationSize\
    \ / 2\n        val primeFactorizationSize = primeFactorizationSize / 2\n     \
    \   val primeFactorizationSize = primeFactorizationSize / 2\n        val primeFactorizationSize\
    \ = primeFactorizationSize / 2\n        val primeFactorizationSize = primeFactorizationSize\
    \ / 2\n        val primeFactorizationSize = primeFactorizationSize / 2\n     \
    \   val primeFactorizationSize = primeFactorizationSize / 2\n        val primeFactorizationSize\
    \ = primeFactorizationSize / 2\n        val primeFactorizationSize = primeFactorizationSize\
    \ / 2\n        val primeFactorizationSize = primeFactorizationSize / 2\n     \
    \   val primeFactorizationSize = primeFactorizationSize / 2\n        val primeFactorizationSize\
    \ = primeFactorizationSize / 2\n        val primeFactorizationSize = primeFactorizationSize\
    \ / 2\n        val primeFactorizationSize = primeFactorizationSize / 2\n     \
    \   val primeFactorizationSize = primeFactorizationSize / 2\n        val primeFactorizationSize\
    \ = primeFactorizationSize / 2\n        val primeFactorizationSize = primeFactorizationSize\
    \ / 2\n        val primeFactorizationSize = primeFactorizationSize / 2\n     \
    \   val primeFactorizationSize = primeFactorizationSize / 2\n        val primeFactorizationSize\
    \ = primeFactorizationSize / 2\n        val primeFactorizationSize = primeFactorization\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphmdwi9bq.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationSize\e\
    [0m = primeFactorizationSize / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationSize is already defined as \e[33mvalue\e\
    [0m \e[35mprimeFactorizationSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphmdwi9bq.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationSize\e\
    [0m = primeFactorizationSize / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationSize is already defined as \e[33mvalue\e\
    [0m \e[35mprimeFactorizationSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphmdwi9bq.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationSize\e\
    [0m = primeFactorizationSize / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationSize is already defined as \e[33mvalue\e\
    [0m \e[35mprimeFactorizationSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphmdwi9bq.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationSize\e\
    [0m = primeFactorizationSize / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationSize is already defined as \e[33mvalue\e\
    [0m \e[35mprimeFactorizationSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n"
  stdout: ''
  timestamp: 1659798086
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimes = mutable.ListBuffer[Long]()\n        val factorizationPrime\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizations =\
    \ mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorization = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorizationPrimes = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorizationPrime = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorizationPrimeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimes = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPri\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqf2ijmuc.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqf2ijmuc.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpqf2ijmuc.scala:15:29 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqf2ijmuc.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpqf2ijmuc.scala:17:34 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpqf2ijmuc.scala:18:33 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^"
  stdout: ''
  timestamp: 1659798065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ListBuffer.empty[Long]\n        val isPrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactors = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrime = mutable.ListBuffer.empty[Boolean]\n       \
    \ val isPrimeFactorsPrimePrime = mutable.ListBuffer.empty[Boolean]\n        val\
    \ isPrimeFactorsPrimePrimePrime = mutable.ListBuffer.empty[Boolean]\n        val\
    \ isPrimeFactorsPrimePrimePrimePrime = mutable.ListBuffer.empty[Boolean]\n   \
    \     val isPrimeFactorsPrimePrimePrimePrimePrime = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrime = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrime = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrime\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfthnoyjr.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfthnoyjr.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36misPrimeFactorsPrimePrimePrimePrimePrimePrime\e[0m = mutable.ListBuffer.empty[\e\
    [35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorsPrimePrimePrimePrimePrimePrime is already defined\
    \ as \e[33mvalue\e[0m \e[35misPrimeFactorsPrimePrimePrimePrimePrimePrime\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpfthnoyjr.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime\e\
    [0m = mutable.ListBuffer.empty[\e[35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ is already defined as \e[33mvalue\e[0m \e[35misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfthnoyjr.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\e\
    [0m = mutable.ListBuffer.empty[\e[35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ is already defined as \e[33mvalue\e[0m \e[35misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePri"
  stdout: ''
  timestamp: 1659798086
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.List\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv24vwiw4.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationCount\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationCount is already defined as \e[33mvalue\e\
    [0m \e[35mprimeFactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv24vwiw4.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationCount\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationCount is already defined as \e[33mvalue\e\
    [0m \e[35mprimeFactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv24vwiw4.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationCount\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationCount is already defined as \e[33mvalue\e\
    [0m \e[35mprimeFactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv24vwiw4.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationCount\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationCount is already defined as \e[33mvalue\e\
    [0m \e[35mprimeFactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of tople"
  stdout: ''
  timestamp: 1659798086
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        var factor = 1\n        while (n >\
    \ 1) {\n            while (n % factor == 0) {\n                factors += factor\n\
    \                n /= factor\n            }\n            factor += 1\n       \
    \ }\n        factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeoi49p9e.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeoi49p9e.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                n /= factor\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member\
    \ of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798086
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factors = mutable.ListBuffer[Long]()\n        val primeFactors =\
    \ mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val factorizationPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactors = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorizations = mutable.ListBuffer[Long]()\n \
    \       val factorizationPrimeFactorizationPrimes = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorizationPrimeFactors = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorizationPrimeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimes = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactors = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactors\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactors\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxr8wt5ex.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxr8wt5ex.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpxr8wt5ex.scala:15:21 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpxr8wt5ex.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpxr8wt5ex.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpxr8wt5ex.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not"
  stdout: ''
  timestamp: 1659798086
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        factorization.foreach(x => factors += x)\n        factors\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgzvwi2xw.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpgzvwi2xw.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.Array\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9oj7ywho.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9oj7ywho.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9oj7ywho.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9oj7ywho.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Nami"
  stdout: ''
  timestamp: 1659798053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCounts = mutable.ListBuffer[Long]()\n        val factorizationCountMax\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountMaxs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMin = mutable.ListBuffer[Long]()\n        val factorizationCountMins\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountMaxMin = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMaxMins = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountMinMax = mutable.ListBuffer[Long]()\n        val factorizationCountMinMaxs\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountMinMaxMin = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMinMaxMins = mutable.ListBuffer[Long]()\n     \
    \   val factorizationCountMinMaxMinMax = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountMinMaxMinMaxs = mutable.ListBuffer[Long]()\n        val factorizationCountMinMaxMinMaxMin\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountMinMaxMinMaxMins\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountMinMaxMinMaxMinMax\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountMinMaxMinMaxMinMaxs\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountMinMaxMinMaxMinMaxMin\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountMinMaxMinMaxMinMaxMins\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountMinMaxMinMaxMinMaxMinMax\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountMinMaxMinMaxMinMaxMinMaxs\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountMinMaxMinMaxMinMaxMinMaxMax\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = mutable.ListBuffer[Long]()\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkuocl0_0.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpkuocl0_0.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpkuocl0_0.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpkuocl0_0.scala:17:29 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpkuocl0_0.scala:18:33 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:"
  stdout: ''
  timestamp: 1659798087
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphiznb1n7.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphiznb1n7.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizations is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorizations\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphiznb1n7.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorization is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorization\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphiznb1n7.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizations is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorizations\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphiznb1n7.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorization is already defined as \e[33mvalue\e[0m\
    \ \e"
  stdout: ''
  timestamp: 1659798087
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizations = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n    \
    \    val primeFactorizationPrimeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpk4zb0d71.scala:34:11 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpk4zb0d71.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpk4zb0d71.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpk4zb0d71.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpk4zb0d71.scala:17:34 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpk4zb0d71.scala:18:34 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e["
  stdout: ''
  timestamp: 1659798087
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize(8)\n    // [2,\
    \ 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n \
    \   // [2, 5, 7]\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val factorizationSize\
    \ = n\n        val primeFactorizationSize = factorizationSize / 2\n        val\
    \ primeFactorizationSize2 = primeFactorizationSize / 2\n        val primeFactorizationSize3\
    \ = primeFactorizationSize2 / 2\n        val primeFactorizationSize4 = primeFactorizationSize3\
    \ / 2\n        val primeFactorizationSize5 = primeFactorizationSize4 / 2\n   \
    \     val primeFactorizationSize6 = primeFactorizationSize5 / 2\n        val primeFactorizationSize7\
    \ = primeFactorizationSize6 / 2\n        val primeFactorizationSize8 = primeFactorizationSize7\
    \ / 2\n        val primeFactorizationSize9 = primeFactorizationSize8 / 2\n   \
    \     val primeFactorizationSize10 = primeFactorizationSize9 / 2\n        val\
    \ primeFactorizationSize11 = primeFactorizationSize10 / 2\n        val primeFactorizationSize12\
    \ = primeFactorizationSize11 / 2\n        val primeFactorizationSize13 = primeFactorizationSize12\
    \ / 2\n        val primeFactorizationSize14 = primeFactorizationSize13 / 2\n \
    \       val primeFactorizationSize15 = primeFactorizationSize14 / 2\n        val\
    \ primeFactorizationSize16 = primeFactorizationSize15 / 2\n        val primeFactorizationSize17\
    \ = primeFactorizationSize16 / 2\n        val primeFactorizationSize18 = primeFactorizationSize17\
    \ / 2\n        val primeFactorizationSize19 = primeFactorizationSize18 / 2\n \
    \       val primeFactorizationSize20 = primeFactorizationSize19 / 2\n        val\
    \ primeFactorizationSize21 = primeFactorizationSize20 / 2\n        val primeFactorizationSize22\
    \ = primeFactorizationSize21 / 2\n        val primeFactorizationSize23 = primeFactorizationSize22\
    \ / 2\n        val primeFactorizationSize24 = primeFactorizationSize23 / 2\n \
    \       val primeFactorizationSize25 = primeFactorizationSize24 / 2\n        val\
    \ primeFactorizationSize26 = primeFactorizationSize25 / 2\n        val primeFactorizationSize27\
    \ = primeFactorizationSize26 / 2\n        val primeFactorizationSize28 = primeFactorizationSize27\
    \ / 2\n        val primeFactorizationSize29 = primeFactorizationSize28 / 2\n \
    \       val primeFactorizationSize30 = primeFactorizationSize29 / 2\n\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoihe297x.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpoihe297x.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpoihe297x.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoihe297x.scala:49:5 ---------------------\e[0m\e[0m\n\e[31m49\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798087
