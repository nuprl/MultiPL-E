language: scala
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val max = new mutable.PriorityQueue[Long]()\n        val min = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        val minIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxCount = new mutable.PriorityQueue[Int]()\n\
    \        val minCount = new mutable.PriorityQueue[Int]()\n        val maxCountIndex\
    \ = mutable.PriorityQueue[Int]()\n        val minCountIndex = mutable.PriorityQueue[Int]()\n\
    \        val maxCountIndex = mutable.PriorityQueue[Int]()\n        val minCountIndex\
    \ = mutable.PriorityQueue[Int]()\n        val maxCountIndex = mutable.PriorityQueue[Int]()\n\
    \        val minCountIndex = mutable.PriorityQueue[Int]()\n        val maxCountIndex\
    \ = mutable.PriorityQueue[Int]()\n        val minCountIndex = mutable.PriorityQueue[Int]()\n\
    \        val maxCountIndex = mutable.PriorityQueue[Int]()\n        val minCountIndex\
    \ = mutable.PriorityQueue[Int]()\n        val maxCountIndex = mutable.PriorityQueue[Int]()\n\
    \        val minCountIndex = mutable.PriorityQueue[Int]()\n        val maxCountIndex\
    \ = mutable.PriorityQueue[Int]()\n        val minCountIndex = mutable.PriorityQueue[Int]()\n\
    \        val maxCountIndex = mutable.PriorityQueue[Int]()\n        val minCountIndex\
    \ = mutable.PriorityQueue[Int]()\n        val maxCountIndex = mutable.PriorityQueue[Int]()\n\
    \        val minCountIndex = mutable.PriorityQueue[Int]()\n        val maxCountIndex\
    \ = mutable.PriorityQueue[Int]()\n        val minCountIndex = mutable.PriorityQueue[Int]()\n\
    \        val maxCountIndex = mutable.PriorityQueue[Int]()\n        val minCountIndex\
    \ = mutable.PriorityQueue[Int]()\n        val maxCountIndex = mutable.PriorityQueue[Int]()\n\
    \        val minCountIndex = mutable.PriorityQueue[Int]()\n        val maxCountIndex\
    \ = mutable.PriorityQueue[Int]()\n        val minCountIndex = mutable.PriorityQueue[Int]()\n\
    \        val maxCountIndex = mutable.PriorityQueue[Int]()\n        val minCountIndex\
    \ = mutable.PriorityQueue[Int]()\n        val maxCountIndex = mutable.PriorityQueue[Int]()\n\
    \        val minCountIndex = mutable.PriorityQueue[Int\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_cw961h0.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_cw961h0.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxCountIndex\e[0m = mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxCountIndex is already defined as \e[33mvalue\e[0m \e[35mmaxCountIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_cw961h0.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mminCountIndex\e[0m = mutable.PriorityQueue[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminCountIndex is already defined as \e[33mvalue\e[0m \e[35mminCountIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_cw961h0.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mmaxCountIndex\e[0m = mutable.PriorityQueue[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCountIndex is already defined as \e[33mvalue\e[0m \e[35mmaxCountIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_cw961h0.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mminCountIndex\e[0m = mutable.PriorityQueue[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminCountIndex is already defined as \e[33mvalue\e[0m \e[35mminCountIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods"
  stdout: ''
  timestamp: 1659793814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Long]()\n        val maxIndexMap\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap2 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap3 = new mutable.HashMap[Long, Long]()\n    \
    \    val maxIndexMap4 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap5\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap6 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap7 = new mutable.HashMap[Long, Long]()\n    \
    \    val maxIndexMap8 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap9\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap10 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap11 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap12 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap13\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap14 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap15 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap16 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap17\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap18 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap19 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap20 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap21\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap22 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap23 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap24 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap25\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap26 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap27 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap28 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap29\
    \ = new mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplyi9bs0r.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmplyi9bs0r.scala:20:22 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmplyi9bs0r.scala:21:27 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e\
    [0m mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m          \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplyi9bs0r.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmplyi9bs0r.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmplyi9bs0r.scala:24:31 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e"
  stdout: ''
  timestamp: 1659793813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0L\n        var index = 0\n        for (i <- 0 until arr.length)\
    \ {\n            if (max < arr(i)) {\n                max = arr(i)\n         \
    \       index = i\n            }\n        }\n        result.add(max)\n       \
    \ for (i <- 0 until arr.length - k) {\n            if (arr(index) < arr(i)) {\n\
    \                result.add(arr(i))\n                index = i\n            }\n\
    \        }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn3zcg_2c.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn3zcg_2c.scala:30:26\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until arr.length - k) {\n\e[31m\e[31m   |\e[0m                \
    \          ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          Found:\
    \    Long\n\e[31m   |\e[0m                          Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxLength = arr.length\n        val maxK = k\n        val maxIndex\
    \ = arr.indexWhere(x => x > 0)\n        val maxValue = arr.take(maxIndex)\n  \
    \      val maxIndexList = arr.indexWhere(x => x > 0)\n        val maxValueList\
    \ = arr.take(maxIndexList)\n        val maxKList = arr.take(maxIndexList.take(maxK))\n\
    \        val maxKListLength = maxKList.length\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        val maxKListLength = maxKListLength\n        val maxKListLength = maxKListLength\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9yxi2la1.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxKListLength\e[0m = maxKListLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxKListLength is already defined as \e[33mvalue\e[0m \e[35mmaxKListLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9yxi2la1.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxKListLength\e[0m = maxKListLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxKListLength is already defined as \e[33mvalue\e[0m \e[35mmaxKListLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9yxi2la1.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mmaxKListLength\e[0m = maxKListLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxKListLength is already defined as \e[33mvalue\e[0m \e[35mmaxKListLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9yxi2la1.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mmaxKListLength\e[0m = maxKListLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxKListLength is already defined as \e[33mvalue\e[0m \e[35mmaxKListLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9yxi2la1.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mmaxKListLength\e[0m = maxKListLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxKLis"
  stdout: ''
  timestamp: 1659793814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var maxIndex = 0\n        for(i <- 0 until arr.length)\
    \ {\n            if(arr(i) > max) {\n                max = arr(i)\n          \
    \      maxIndex = i\n            }\n        }\n        for(i <- 0 until arr.length)\
    \ {\n            if(arr(i) == max) {\n                result.add(arr(maxIndex))\n\
    \            }\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsnt_10bu.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsnt_10bu.scala:25:25\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                max = arr(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new Array[Long](k)\n\
    \        var max = 0\n        var maxIndex = 0\n        var i = 0\n        var\
    \ j = 0\n        var k = 0\n        while (i < arr.length) {\n            max\
    \ = arr(i)\n            maxIndex = i\n            while (j < arr.length) {\n \
    \               if (arr(j) > max) {\n                    max = arr(j)\n      \
    \              maxIndex = j\n                }\n                j += 1\n     \
    \       }\n            result(k) = max\n            k += 1\n            i += 1\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa1rbxumi.scala:27:21\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            max = arr(i)\n\e\
    [31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \      Found:    Long\n\e[31m   |\e[0m                  Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa1rbxumi.scala:31:29 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                    max = arr(j)\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \      Found:    Long\n\e[31m   |\e[0m                          Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa1rbxumi.scala:40:15\
    \ --------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mreturn\e[0m result\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \  Found:    (result : Array[Long])\n\e[31m   |\e[0m               Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var i = 0\n        while (i < arr.length) {\n  \
    \          if (arr(i) > max) {\n                max = arr(i)\n            }\n\
    \            i += 1\n        }\n        var j = 0\n        while (j < arr.length)\
    \ {\n            if (arr(j) < max) {\n                result.add(arr(j))\n   \
    \         }\n            j += 1\n        }\n        result.take(k).toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8wsgfvi_.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8wsgfvi_.scala:25:25\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                max = arr(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0L\n        var maxIndex = 0\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) > max) {\n                max = arr(i)\n         \
    \       maxIndex = i\n            }\n        }\n        result.add(max)\n    \
    \    for (i <- 0 until arr.length - 1) {\n            if (arr(i) > max && arr(i)\
    \ != max) {\n                result.add(arr(maxIndex))\n                result.add(arr(i))\n\
    \                maxIndex = i\n            }\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp2eatmbi.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new Array[Long](k)\n\
    \        var maxIndex = 0\n        var maxValue = 0L\n        var i = 0\n    \
    \    while (i < arr.length) {\n            if (arr(i) > maxValue) {\n        \
    \        maxValue = arr(i)\n                maxIndex = i\n            }\n    \
    \        i += 1\n        }\n        max.update(maxIndex, maxValue)\n        max.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7sbdukb6.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val max = new mutable.PriorityQueue[Long]()\n        val maxIndex = new\
    \ mutable.PriorityQueue[Int]()\n        val maxIndexSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mut\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0uwe7cq8.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexSetSetSetSet\e[0m\
    \ = \e[33mnew\e[0m mutable.HashSet[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmaxIndexSetSetSetSet is already defined as \e[33mvalue\e[0m \e[35mmaxIndexSetSetSetSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0uwe7cq8.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexSetSetSetSetSet\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mmaxIndexSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0uwe7cq8.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexSetSetSetSetSet\e\
    [0m = \e[33mnew\e[0m mutable.HashSet[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxIndexSetSetSetSetSet is already defined as \e[33mvalue\e[0m \e[35mmaxIndexSetSetSetSetSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0uwe7cq8.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexSetSetSetSetSet\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mmaxIndexSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in"
  stdout: ''
  timestamp: 1659793813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        val maxIndexMap\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap2 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap3 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap4 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap5\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap6 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap7 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap8 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap9\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap10 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap11 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap12 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap13\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap14 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap15 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap16 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap17\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap18 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap19 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap20 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap21\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap22 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap23 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap24 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap25\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap26 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap27 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap28 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap29\
    \ = new mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp02ivnlk6.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp02ivnlk6.scala:20:22 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp02ivnlk6.scala:21:27 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e\
    [0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp02ivnlk6.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp02ivnlk6.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp02ivnlk6.scala:24:31 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mI"
  stdout: ''
  timestamp: 1659793814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer[Long]()\n\
    \        val maxValue = arr.max\n        val maxIndex = arr.indexWhere(x => x\
    \ == maxValue)\n        val maxListSize = maxIndex - k + 1\n        val maxListArray\
    \ = arr.take(maxListSize)\n        maxListArray foreach { x => maxList += x }\n\
    \        maxList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpacjvwyq4.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpacjvwyq4.scala:24:36 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxListArray\e[0m = arr.take(maxListSize)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                    Found:    (maxListSize : Long)\n\
    \e[31m   |\e[0m                                    Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new Array[Long](k)\n\
    \        var maxIndex = 0\n        var maxValue = arr(0)\n        for(i <- 0 until\
    \ k) {\n            if(arr(i) > maxValue) {\n                maxValue = arr(i)\n\
    \                maxIndex = i\n            }\n        }\n        for(i <- 0 until\
    \ k) {\n            if(arr(i) == maxValue) {\n                max(i) = arr(i)\n\
    \            }\n        }\n        max.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmpvy9axo.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpmpvy9axo.scala:23:25 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until k) {\n\e[31m\e[31m   |\e\
    [0m                         ^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (k : Long)\n\e[31m   |\e[0m                         Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmpvy9axo.scala:29:25 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until k) {\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0L\n        var i = 0\n        while (i < arr.length) {\n \
    \           if (arr(i) > max) {\n                max = arr(i)\n            }\n\
    \            i += 1\n        }\n        var j = 0\n        while (j < k) {\n \
    \           if (max < arr(j)) {\n                max += arr(j)\n            }\n\
    \            j += 1\n        }\n        result.clear()\n        result.add(max)\n\
    \        return result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpubx__euu.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortWith(_ <\
    \ _)\n        val max = new Array[Long](k)\n        var maxIndex = 0\n       \
    \ var maxValue = arr(0)\n        for(i <- 0 until arr.length) {\n            if(arr(i)\
    \ > maxValue) {\n                maxValue = arr(i)\n                maxIndex =\
    \ i\n            }\n        }\n        for(i <- 0 until k) {\n            if(!arr.contains(maxIndex\
    \ + i)) {\n                max(i) = arr(maxIndex + i)\n            }\n       \
    \ }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpblllpftz.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m       \
    \           Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpblllpftz.scala:21:34 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpblllpftz.scala:30:25\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until k) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (k : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpblllpftz.scala:35:15 --------------------\e[0m\e\
    [0m\n\e[31m35 |\e[0m        \e[33mreturn\e[0m max\n\e[31m\e[31m   |\e[0m     \
    \          ^^^\e[0m\n\e[31m   |\e[0m               Found:    (max : Array[Long])\n\
    \e[31m   |\e[0m               Required: List[Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxNums = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsSize = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsIndexCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ maxNumsIndexCountSize = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexCountMaxSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsIndexCountMaxIndex = mutable.ArrayBuffer.empty[Long]\n   \
    \     val maxNumsIndexCountMaxIndexSize = mutable.ArrayBuffer.empty[Long]\n  \
    \      val maxNumsIndexCountMaxIndexCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsIndexCountMaxIndexCountSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsIndexCountMaxIndexCountMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsIndexCountMaxIndexCountMaxSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsIndexCountMaxIndexCountMaxIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsIndexCountMaxIndexCountMaxIndexSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsIndexCountMaxIndexCountMaxIndexCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsIndexCountMaxIndexCountMaxIndexCountSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsIndexCountMaxIndexCountMaxIndexCountMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsIndexCountMaxIndexCountMaxIndexCountMaxSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsIndexCountMaxIndexCountMaxIndexCountMaxIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsIndexCountMaxIndexCountMaxIndexCountMaxIndexSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsIndexCountMaxIndexCountMaxIndexCountMaxIndexCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsIndexCountMaxIndexCountMaxIndexCountMaxIndexCountSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpbjwjs06f.scala:45:11 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbjwjs06f.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxNums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbjwjs06f.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsSize\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbjwjs06f.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsIndex\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbjwjs06f.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsIndexSize\e[0m =\
    \ mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m          \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpbjwjs06f.scala:24:32 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxNumsInd"
  stdout: ''
  timestamp: 1659793814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        var maxNum = arr(0)\n        for (i <- 0 until arr.length) {\n      \
    \      if (arr(i) > maxNum) {\n                maxNum = arr(i)\n            }\n\
    \        }\n        maxList += maxNum\n        for (i <- 0 until arr.length -\
    \ k) {\n            if (arr(i) > maxNum) {\n                maxNum = arr(i)\n\
    \            }\n        }\n        maxList += maxNum\n        return maxList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkxnik8lu.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpkxnik8lu.scala:28:26 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until arr.length\
    \ - k) {\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Found:    Long\n\e[31m   |\e[0m     \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxNum = arr.sortWith(_\
    \ > _)\n        val maxNums = maxNum.take(k)\n        val maxNumsSorted = maxNums.sortWith(_\
    \ > _)\n        val maxNumsSortedList = maxNumsSorted.toList\n        return maxNumsSortedList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpitu_338r.scala:21:34\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxNums\e\
    [0m = maxNum.take(k)\n\e[31m\e[31m   |\e[0m                                  ^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    (k : Long)\n\e\
    [31m   |\e[0m                                  Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var maxIndex = 0\n        var i = 0\n        while\
    \ (i < arr.length) {\n            if (arr(i) > max) {\n                max = arr(i)\n\
    \                maxIndex = i\n            }\n            i += 1\n        }\n\
    \        var j = 0\n        while (j < arr.length) {\n            if (arr(j) <\
    \ max) {\n                result.add(arr(j))\n            }\n            j +=\
    \ 1\n        }\n        if (result.size < k) {\n            while (j < arr.length)\
    \ {\n                result.add(arr(j))\n                j += 1\n            }\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnr2u41he.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnr2u41he.scala:26:25\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                max = arr(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val max = new mutable.PriorityQueue[Long]()\n        val maxIndex = new\
    \ mutable.PriorityQueue[Int]()\n        val maxIndexMap = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap3 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap7 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap11 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap15 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap19 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap23 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap27 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Int, \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpivvp2ktv.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpivvp2ktv.scala:20:25\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpivvp2ktv.scala:21:22 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpivvp2ktv.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e\
    [0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpivvp2ktv.scala:23:30\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpivvp2ktv.scala:24:31 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |"
  stdout: ''
  timestamp: 1659793813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new Array[Long](k)\n\
    \        val maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap29 = new mutable.HashMap[Long,\
    \ Int]\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_jbeli04.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_jbeli04.scala:21:38 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e[0m \e[35mArray\e\
    [0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m                                \
    \      ^\e[0m\n\e[31m   |\e[0m                                      Found:   \
    \ (k : Long)\n\e[31m   |\e[0m                                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jbeli04.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jbeli04.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_jbeli04.scala:24:31 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1659793814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val max = new mutable.PriorityQueue[Long]()\n        val min = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        val minIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexMap = new mutable.HashMap[Int,\
    \ Int]()\n        val minIndexMap = new mutable.HashMap[Int, Int]()\n        val\
    \ maxIndexMap2 = new mutable.HashMap[Int, Int]()\n        val minIndexMap2 = new\
    \ mutable.HashMap[Int, Int]()\n        val maxIndexMap3 = new mutable.HashMap[Int,\
    \ Int]()\n        val minIndexMap3 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap4 = new mutable.HashMap[Int, Int]()\n        val minIndexMap4\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Int,\
    \ Int]()\n        val minIndexMap5 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap6 = new mutable.HashMap[Int, Int]()\n        val minIndexMap6\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap7 = new mutable.HashMap[Int,\
    \ Int]()\n        val minIndexMap7 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap8 = new mutable.HashMap[Int, Int]()\n        val minIndexMap8\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Int,\
    \ Int]()\n        val minIndexMap9 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap10 = new mutable.HashMap[Int, Int]()\n        val minIndexMap10\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap11 = new mutable.HashMap[Int,\
    \ Int]()\n        val minIndexMap11 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap12 = new mutable.HashMap[Int, Int]()\n        val minIndexMap12\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Int,\
    \ Int]()\n        val minIndexMap13 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_excinux.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_excinux.scala:20:25\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_excinux.scala:21:22 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_excinux.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = \e[33mnew\e[0m\
    \ mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_excinux.scala:23:27\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndex\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_excinux.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = \e[33mnew\e\
    [0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                ^^^^^^^\e[0m\n"
  stdout: ''
  timestamp: 1659793814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new Array[Long](k)\n\
    \        val max = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n\
    \        val maxIndexMap = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap3 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap4 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap5 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap6\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap7 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap8 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap9 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap10\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap11 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap12 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap13 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap14\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap15 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap16 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap17 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap18\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap19 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap20 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap21 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap22\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap23 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap24 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap25 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap26\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap27 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap28 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw5r2th97.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpw5r2th97.scala:20:37 --------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e\
    [35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                                     ^\e\
    [0m\n\e[31m   |\e[0m                                     Found:    (k : Long)\n\
    \e[31m   |\e[0m                                     Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw5r2th97.scala:21:34 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw5r2th97.scala:22:38\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m\
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpw5r2th97.scala:23:30 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-expla"
  stdout: ''
  timestamp: 1659793814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxNum = arr.max\n   \
    \     val maxNumIndex = arr.indexWhere(x => x == maxNum)\n        val maxNums\
    \ = arr.take(maxNumIndex).toList\n        val maxNumsIndex = arr.indexWhere(x\
    \ => x == maxNum)\n        val maxNumsIndex = arr.indexWhere(x => x == maxNum)\n\
    \        val maxNumsIndex = arr.indexWhere(x => x == maxNum)\n        val maxNumsIndex\
    \ = arr.indexWhere(x => x == maxNum)\n        val maxNumsIndex = arr.indexWhere(x\
    \ => x == maxNum)\n        val maxNumsIndex = arr.indexWhere(x => x == maxNum)\n\
    \        val maxNumsIndex = arr.indexWhere(x => x == maxNum)\n        val maxNumsIndex\
    \ = arr.indexWhere(x => x == maxNum)\n        val maxNumsIndex = arr.indexWhere(x\
    \ => x == maxNum)\n        val maxNumsIndex = arr.indexWhere(x => x == maxNum)\n\
    \        val maxNumsIndex = arr.indexWhere(x => x == maxNum)\n        val maxNumsIndex\
    \ = arr.indexWhere(x => x == maxNum)\n        val maxNumsIndex = arr.indexWhere(x\
    \ => x == maxNum)\n        val maxNumsIndex = arr.indexWhere(x => x == maxNum)\n\
    \        val maxNumsIndex = arr.indexWhere(x => x == maxNum)\n        val maxNumsIndex\
    \ = arr.indexWhere(x => x == maxNum)\n        val maxNumsIndex = arr.indexWhere(x\
    \ => x == maxNum)\n        val maxNumsIndex = arr.indexWhere(x => x == maxNum)\n\
    \        val maxNumsIndex = arr.indexWhere(x => x == maxNum)\n        val maxNumsIndex\
    \ = arr.indexWhere(x => x == maxNum)\n        val maxNumsIndex = arr.indexWhere(x\
    \ => x == maxNum)\n        val maxNumsIndex = arr.indexWhere(x => x == maxNum)\n\
    \        val maxNumsIndex = arr.indexWhere(x => x == maxNum)\n        val maxNumsIndex\
    \ = arr.indexWhere(x => x == maxNum)\n        val maxNumsIndex = arr.indexWhere(x\
    \ => x == maxNum)\n        val maxNumsIndex = arr.indexWhere(x => x == maxNum)\n\
    \        val maxNumsIndex = arr.indexWhere(x => x == maxNum)\n        val maxNumsIndex\
    \ = arr.indexWhere(x => x == maxNum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq2v1aapi.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq2v1aapi.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxNumsIndex\e[0m = arr.indexWhere(\e[36mx\e[0m => x == maxNum)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxNumsIndex is already defined as \e[33mvalue\e[0m \e[35mmaxNumsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq2v1aapi.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsIndex\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x == maxNum)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumsIndex is already defined as \e[33mvalue\e[0m \e[35mmaxNumsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq2v1aapi.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsIndex\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x == maxNum)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumsIndex is already defined as \e[33mvalue\e[0m \e[35mmaxNumsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq2v1aapi.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsIndex\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x == maxNum)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumsIndex is already defined as \e[33mvalue\e[0m \e[35mmaxNumsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that ov"
  stdout: ''
  timestamp: 1659793818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val maxNum = arr.max\n        val maxIndex = arr.indexWhere(x => x ==\
    \ maxNum)\n        val maxNums = arr.take(maxIndex).toList\n        val maxNumsIndex\
    \ = arr.indexWhere(x => x == maxNums)\n        val maxNumsIndex = maxNumsIndex\
    \ + 1\n        val maxNumsIndex2 = maxNumsIndex + k\n        val maxNumsIndex3\
    \ = maxNumsIndex2 + k\n        val maxNumsIndex4 = maxNumsIndex3 + k\n       \
    \ val maxNumsIndex5 = maxNumsIndex4 + k\n        val maxNumsIndex6 = maxNumsIndex5\
    \ + k\n        val maxNumsIndex7 = maxNumsIndex6 + k\n        val maxNumsIndex8\
    \ = maxNumsIndex7 + k\n        val maxNumsIndex9 = maxNumsIndex8 + k\n       \
    \ val maxNumsIndex10 = maxNumsIndex9 + k\n        val maxNumsIndex11 = maxNumsIndex10\
    \ + k\n        val maxNumsIndex12 = maxNumsIndex11 + k\n        val maxNumsIndex13\
    \ = maxNumsIndex12 + k\n        val maxNumsIndex14 = maxNumsIndex13 + k\n    \
    \    val maxNumsIndex15 = maxNumsIndex14 + k\n        val maxNumsIndex16 = maxNumsIndex15\
    \ + k\n        val maxNumsIndex17 = maxNumsIndex16 + k\n        val maxNumsIndex18\
    \ = maxNumsIndex17 + k\n        val maxNumsIndex19 = maxNumsIndex18 + k\n    \
    \    val maxNumsIndex20 = maxNumsIndex19 + k\n        val maxNumsIndex21 = maxNumsIndex20\
    \ + k\n        val maxNumsIndex22 = maxNumsIndex21 + k\n        val maxNumsIndex23\
    \ = maxNumsIndex22 + k\n        val maxNumsIndex24 = maxNumsIndex23 + k\n    \
    \    val maxNumsIndex25 = maxNumsIndex24 + k\n        val maxNumsIndex26 = maxNumsIndex25\
    \ + k\n        val maxNumsIndex27 = maxNumsIndex26 + k\n        val maxNumsIndex28\
    \ = maxNumsIndex27 + k\n        val maxNumsIndex29 = maxNumsIndex28 + k\n    \
    \    \n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4v08aggk.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsIndex\e[0m = maxNumsIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumsIndex is already defined as \e[33mvalue\e[0m \e[35mmaxNumsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp4v08aggk.scala:20:25 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmp4v08aggk.scala:24:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsIndex\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x == maxNums)\n\e[31m\e[31m   |\e[0m                           \
    \                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    Values of types Long\
    \ and List[Long] cannot be compared with == or !=\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp4v08aggk.scala:55:5 ---------------------\e[0m\e[0m\n\
    \e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxNum = arr(0)\n        var maxIndex = 0\n        var i = 0\n  \
    \      while (i < arr.length) {\n            if (arr(i) > maxNum) {\n        \
    \        maxNum = arr(i)\n                maxIndex = i\n            }\n      \
    \      i += 1\n        }\n        val maxList = maxList.updated(maxIndex, maxNum)\n\
    \        val newList = maxList.take(k).sorted\n        newList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong,\
    \ 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp70ft4ph5.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = maxList.updated(maxIndex,\
    \ maxNum)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxList is already defined as \e[33mvalue\e[0m \e[35mmaxList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp70ft4ph5.scala:20:22 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793817
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxNum : Long = -1\n        var maxIndex : Int = 0\n        for (i\
    \ <- 0 until arr.length) {\n            if (arr(i) > maxNum) {\n             \
    \   maxNum = arr(i)\n                maxIndex = i\n            }\n        }\n\
    \        maxList += maxNum\n        if (maxIndex < k) {\n            maxList +=\
    \ arr(maxIndex)\n        }\n        maxList.sortWith(_ < _)\n        maxList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpboj8c8w7.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793817
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new Array[Long](k)\n\
    \        var maxIndex = 0\n        var maxValue = arr(0)\n        var i = 0\n\
    \        while (i < arr.length) {\n            if (arr(i) > maxValue) {\n    \
    \            maxValue = arr(i)\n                maxIndex = i\n            }\n\
    \            i += 1\n        }\n        val result = new Array[Long](k)\n    \
    \    var j = 0\n        while (j < k) {\n            result(j) = arr(maxIndex)\n\
    \            j += 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps3x0ykok.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps3x0ykok.scala:31:37 --------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m \e[35mArray\e\
    [0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                               \
    \      ^\e[0m\n\e[31m   |\e[0m                                     Found:    (k\
    \ : Long)\n\e[31m   |\e[0m                                     Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps3x0ykok.scala:37:8\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val max = arr.take(k).toList\n        val rest = arr.drop(k)\n      \
    \  rest match {\n            case Nil => max\n            case _ => maximum(max,\
    \ rest.max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6wfx5brs.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(-_)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793817
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxNums = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxNumsIndex = 0\n        var maxNumsValue = 0L\n        var maxNumsIndex2\
    \ = 0\n        var maxNumsValue2 = 0L\n        for(i <- 0 until arr.length) {\n\
    \            if(arr(i) > maxNumsValue) {\n                maxNumsValue = arr(i)\n\
    \                maxNumsIndex = i\n            }\n            if(arr(i) > maxNumsValue2)\
    \ {\n                maxNumsValue2 = arr(i)\n                maxNumsIndex2 = i\n\
    \            }\n        }\n        if(maxNumsIndex == maxNumsIndex2) {\n     \
    \       val newMaxNums = mutable.ArrayBuffer.empty[Long]\n            newMaxNums\
    \ += maxNumsValue\n            newMaxNums += maxNumsValue2\n            return\
    \ newMaxNums\n        }\n        if(maxNumsIndex > maxNumsIndex2) {\n        \
    \    val newMaxNums = mutable.ArrayBuffer.empty[Long]\n            newMaxNums\
    \ += maxNumsValue\n            newMaxNums += maxNumsValue2\n            val newMaxNumsIndex\
    \ = maxNumsIndex\n            newMaxNums += arr(maxNumsIndex)\n            return\
    \ newMaxNums\n        }\n        val newMaxNums = mutable.ArrayBuffer.empty[Long]\n\
    \        newMaxNums += maxNumsValue\n        newMaxNums += maxNumsValue2\n   \
    \     newMaxNums += arr(maxNumsIndex2)\n        return newMaxNums\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpme8i8az9.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxNums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpme8i8az9.scala:36:29 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            \e[33mval\e[0m \e[36mnewMaxNums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpme8i8az9.scala:42:29 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m            \e[33mval\e[0m \e[36mnewMaxNums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpme8i8az9.scala:49:25 ------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \e[36mnewMaxNums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val maxArray = arr.sortWith(_ > _)\n        val maxLength = maxArray.length\n\
    \        val maxK = maxLength - k\n        val maxArray2 = maxArray.take(maxK)\n\
    \        result.+=(maxArray2)\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkljzi990.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkljzi990.scala:24:38\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxArray2\e\
    [0m = maxArray.take(maxK)\n\e[31m\e[31m   |\e[0m                             \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                                      Found:\
    \    (maxK : Long)\n\e[31m   |\e[0m                                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new Array[Long](k)\n\
    \        var max = 0L\n        var maxIndex = 0\n        var i = 0\n        while\
    \ (i < arr.length) {\n            if (arr(i) > max) {\n                max = arr(i)\n\
    \                maxIndex = i\n            }\n            i += 1\n        }\n\
    \        var j = 0\n        while (j < k) {\n            if (maxIndex < arr.length)\
    \ {\n                result(j) = arr(maxIndex)\n                maxIndex += 1\n\
    \            }\n            j += 1\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong,\
    \ 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn29h98s5.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpn29h98s5.scala:39:8 ---------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new Array[Long](k)\n\
    \        val maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  var index = 0\n        var maxIndexCount = 0\n        var maxIndexCount2 =\
    \ 0\n        var maxIndexCount3 = 0\n        var maxIndexCount4 = 0\n        var\
    \ maxIndexCount5 = 0\n        var maxIndexCount6 = 0\n        var maxIndexCount7\
    \ = 0\n        var maxIndexCount8 = 0\n        var maxIndexCount9 = 0\n      \
    \  var maxIndexCount10 = 0\n        var maxIndexCount11 = 0\n        var maxIndexCount12\
    \ = 0\n        var maxIndexCount13 = 0\n        var maxIndexCount14 = 0\n    \
    \    var maxIndexCount15 = 0\n        var maxIndexCount16 = 0\n        var maxIndexCount17\
    \ = 0\n        var maxIndexCount18 = 0\n        var maxIndexCount19 = 0\n    \
    \    var maxIndexCount20 = 0\n        var maxIndexCount21 = 0\n        var maxIndexCount22\
    \ = 0\n        var maxIndexCount23 = 0\n        var maxIndexCount24 = 0\n    \
    \    var maxIndexCount25 = 0\n        var maxIndexCount26 = 0\n        var maxIndexCount27\
    \ = 0\n        var maxIndexCount28 = 0\n        var maxIndexCount29 = 0\n    \
    \    var maxIndexCount30 = 0\n        var maxIndexCount31 = 0\n        var maxIndexCount32\
    \ = 0\n        var maxIndexCount33 = 0\n        var maxIndexCount34 = 0\n    \
    \    var maxIndexCount35 = 0\n        var maxIndexCount36 = 0\n        var maxIndexCount37\
    \ = 0\n        var maxIndexCount38 = 0\n        var maxIndexCount39 = 0\n    \
    \    var maxIndexCount40 = 0\n        var maxIndexCount41 = 0\n        var maxIndexCount42\
    \ = 0\n        var maxIndexCount43 = 0\n        var maxIndexCount44 = 0\n    \
    \    var maxIndexCount45 = 0\n        var maxIndexCount46 = 0\n        var maxIndexCount47\
    \ = 0\n        var maxIndexCount48 = 0\n        var maxIndexCount49 = 0\n    \
    \    var maxIndexCount50 = 0\n        var maxIndexCount51 = 0\n        var maxIndexCount52\
    \ = 0\n        var maxIndexCount53 = 0\n        var maxIndexCount54 = 0\n    \
    \    var maxIndexCount55 = 0\n        var maxIndexCount56 = 0\n        var maxIndexCount57\
    \ = 0\n        var maxIndexCount58 = 0\n        var maxIndexCount59 = 0\n    \
    \    var maxIndexCount60 = 0\n        var maxIndexCount61 = 0\n        var maxIndexCount62\
    \ = 0\n        var maxIndexCount63 = 0\n        var maxIndexCount64 = 0\n    \
    \    var maxIndexCount65 = 0\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2txsnawp.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp2txsnawp.scala:21:38 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e[0m \e[35mArray\e\
    [0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m                                \
    \      ^\e[0m\n\e[31m   |\e[0m                                      Found:   \
    \ (k : Long)\n\e[31m   |\e[0m                                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2txsnawp.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2txsnawp.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp2txsnawp.scala:91:5 ---------------------\e[0m\e[0m\n\e[31m91\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1659793820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxLength = 0\n        var maxIndex = 0\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) > arr(maxIndex)) {\n                maxLength\
    \ += 1\n                maxIndex += 1\n                maxList += arr(i)\n   \
    \         }\n        }\n        if (maxLength > k) {\n            val newList\
    \ = maxList.take(k - maxLength)\n            val newList2 = maxList.drop(k - maxLength)\n\
    \            val newList3 = newList.zip(newList2).map(_._1)\n            val newList4\
    \ = newList.zip(newList2).map(_._2)\n            val newList5 = newList.zip(newList3).map(_._1)\n\
    \            val newList6 = newList.zip(newList3).map(_._2)\n            val newList7\
    \ = newList.zip(newList4).map(_._1)\n            val newList8 = newList.zip(newList4).map(_._2)\n\
    \            val newList9 = newList.zip(newList5).map(_._1)\n            val newList10\
    \ = newList.zip(newList5).map(_._2)\n            val newList11 = newList.zip(newList6).map(_._1)\n\
    \            val newList12 = newList.zip(newList6).map(_._2)\n            val\
    \ newList13 = newList.zip(newList7).map(_._1)\n            val newList14 = newList.zip(newList7).map(_._2)\n\
    \            val newList15 = newList.zip(newList8).map(_._1)\n            val\
    \ newList16 = newList.zip(newList8).map(_._2)\n            val newList17 = newList.zip(newList9).map(_._1)\n\
    \            val newList18 = newList.zip(newList9).map(_._2)\n            val\
    \ newList19 = newList.zip(newList10).map(_._1)\n            val newList20 = newList.zip(newList10).map(_._2)\n\
    \            val newList21 = newList.zip(newList11).map(_._1)\n            val\
    \ newList22 = newList.zip(newList11).map(_._2)\n            val newList23 = newList.zip(newList12).map(_._1)\n\
    \            val newList24 = newList.zip(newList12).map(_._2)\n            val\
    \ newList25 = newList.zip(newList13).map(_._1)\n            val newList26 = newList.zip(newList13).map(_._2)\n\
    \            val newList27 = newList.zip(newList14\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc0dj1go9.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc0dj1go9.scala:74:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m74 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpc0dj1go9.scala:20:22 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpc0dj1go9.scala:73:1 ---------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpc0dj1go9.scala:59:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m59 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659793820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new Array[Long](k)\n\
    \        val maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap29 = new mutable.HashMap[Long,\
    \ Int]\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_jbeli04.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_jbeli04.scala:21:38 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e[0m \e[35mArray\e\
    [0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m                                \
    \      ^\e[0m\n\e[31m   |\e[0m                                      Found:   \
    \ (k : Long)\n\e[31m   |\e[0m                                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jbeli04.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jbeli04.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_jbeli04.scala:24:31 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1659793814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Long]()\n        val maxIndexMap\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap2 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap3 = new mutable.HashMap[Long, Long]()\n    \
    \    val maxIndexMap4 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap5\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap6 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap7 = new mutable.HashMap[Long, Long]()\n    \
    \    val maxIndexMap8 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap9\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap10 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap11 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap12 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap13\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap14 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap15 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap16 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap17\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap18 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap19 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap20 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap21\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap22 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap23 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap24 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap25\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap26 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap27 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap28 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap29\
    \ = new mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplyi9bs0r.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmplyi9bs0r.scala:20:22 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmplyi9bs0r.scala:21:27 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e\
    [0m mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m          \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplyi9bs0r.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmplyi9bs0r.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmplyi9bs0r.scala:24:31 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e"
  stdout: ''
  timestamp: 1659793813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var maxIndex = 0\n        var i = 0\n        while\
    \ (i < arr.length) {\n            if (arr(i) > max) {\n                max = arr(i)\n\
    \                maxIndex = i\n            }\n            i += 1\n        }\n\
    \        val maxIndex = arr.length - 1\n        while (maxIndex >= 0) {\n    \
    \        if (arr(maxIndex) > max) {\n                max = arr(maxIndex)\n   \
    \             maxIndex = maxIndex - 1\n            }\n            maxIndex -=\
    \ 1\n        }\n        result.clear()\n        result.add(max)\n        result.addAll(arr.take(maxIndex\
    \ + 1))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpve2ar30a.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.length\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvariable\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpve2ar30a.scala:20:25 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpve2ar30a.scala:26:25 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                max = arr(i)\n\e[31m\e[31m   |\e[0m \
    \                     ^^^^^^\e[0m\n\e[31m   |\e[0m                      Found:\
    \    Long\n\e[31m   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpve2ar30a.scala:34:25 --------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                max = arr(maxIndex)\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \     Found:    Long\n\e[31m   |\e[0m                      Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659793820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxNums = arr.take(k).maxBy(_.abs)\n\
    \        val maxNumsIndex = arr.lastIndexWhere(_ == maxNums)\n        val maxNumsIndexList\
    \ = maxNumsIndex.until(maxNumsIndex.drop(k))\n        val maxNumsIndexListReversed\
    \ = maxNumsIndexList.reverse\n        val maxNumsIndexListReversedList = maxNumsIndexList.reverse.take(k)\n\
    \        val maxNumsIndexListReversedListReversed = maxNumsIndexListReversed.reverse.take(k)\n\
    \        val maxNumsIndexListReversedListReversedList = maxNumsIndexListReversedList.reverse.take(k)\n\
    \        val maxNumsIndexListReversedListReversedListReversed = maxNumsIndexListReversedListReversed.reverse.take(k)\n\
    \        val maxNumsIndexListReversedListReversedListReversedList = maxNumsIndexListReversedListReversedList.reverse.take(k)\n\
    \        val maxNumsIndexListReversedListReversedListReversedListReversed = maxNumsIndexListReversedListReversedListReversed.reverse.take(k)\n\
    \        val maxNumsIndexListReversedListReversedListReversedListReversedList\
    \ = maxNumsIndexListReversedListReversedListReversedList.reverse.take(k)\n   \
    \     val maxNumsIndexListReversedListReversedListReversedListReversedListReversed\
    \ = maxNumsIndexListReversedListReversedListReversedListReversed.reverse.take(k)\n\
    \        val maxNumsIndexListReversedListReversedListReversedListReversedListReversedList\
    \ = maxNumsIndexListReversedListReversedListReversedListReversedList.reverse.take(k)\n\
    \        val maxNumsIndexListReversedListReversedListReversedListReversedListReversedListReversed\
    \ = maxNumsIndexListReversedListReversedListReversedListReversedListReversed.reverse.take(k)\n\
    \        val maxNumsIndexListReversedListReversedListReversedListReversedListReversedListReversedList\
    \ = maxNumsIndexListReversedListReversedListReversedListReversedListReversedList.reverse.take(k)\n\
    \        val maxNumsIndexListReversedListReversedListReversedListReversedListReversedListReversed\
    \ = maxNumsIndexListReversedListReversedListReversedListReversedListReverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphgbxrv0h.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsIndexListReversedListReversedListReversedListReversedListReversedListReversed\e\
    [0m = maxNumsIndexListReversedListReversedListReversedListReversedListReverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumsIndexListReversedListReversedListReversedListReversedListReversedListReversed\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  maxNumsIndexListReversedListReversedListReversedListReversedListReversedListReversed\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmphgbxrv0h.scala:20:31 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxNums\e[0m = arr.take(k).maxBy(_.abs)\n\
    \e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m  \
    \                             Found:    (k : Long)\n\e[31m   |\e[0m          \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmphgbxrv0h.scala:22:63 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxNumsIndexList\e[0m = maxNumsIndex.until(maxNumsIndex.drop(k))\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       value drop is not a\
    \ member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphgbxrv0h.scala:24:73\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsIndexListReversedList\e\
    [0m = maxNumsIndexList.reverse.take(k)\n\e[31m\e[31m   |\e[0m                \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0m                                        "
  stdout: ''
  timestamp: 1659793821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val maxList = arr.take(k)\n        val maxList = maxList.sortBy(-_)\n\
    \        maxList\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplo32i85r.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = maxList.sortBy(-_)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmaxList is already defined as \e[33mvalue\e[0m \e[35mmaxList\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmplo32i85r.scala:20:18 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(-_)\n\e[31m\e[31m \
    \  |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive\
    \ \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortWith(_ <\
    \ _)\n        val max = new mutable.PriorityQueue[Long]()\n        val maxIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Int, Long]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap7 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap11 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap15 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap19 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap23 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap27 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Int, Int]\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp47o304b2.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m       \
    \           Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp47o304b2.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp47o304b2.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndex\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp47o304b2.scala:23:30 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp47o304b2.scala:24:31 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- "
  stdout: ''
  timestamp: 1659793820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val max = new mutable.ListBuffer[Long]()\n        var i = 0\n       \
    \ while (i < arr.length) {\n            if (arr.length <= k) {\n             \
    \   max += arr(i)\n                i += 1\n            } else {\n            \
    \    val maxIndex = i\n                val maxValue = arr(i)\n               \
    \ val maxIndex2 = i\n                val maxValue2 = arr(i)\n                val\
    \ maxIndex3 = i\n                val maxValue3 = arr(i)\n                val maxIndex4\
    \ = i\n                val maxValue4 = arr(i)\n                val maxIndex5 =\
    \ i\n                val maxValue5 = arr(i)\n                val maxIndex6 = i\n\
    \                val maxValue6 = arr(i)\n                val maxIndex7 = i\n \
    \               val maxValue7 = arr(i)\n                val maxIndex8 = i\n  \
    \              val maxValue8 = arr(i)\n                val maxIndex9 = i\n   \
    \             val maxValue9 = arr(i)\n                val maxIndex10 = i\n   \
    \             val maxValue10 = arr(i)\n                val maxIndex11 = i\n  \
    \              val maxValue11 = arr(i)\n                val maxIndex12 = i\n \
    \               val maxValue12 = arr(i)\n                val maxIndex13 = i\n\
    \                val maxValue13 = arr(i)\n                val maxIndex14 = i\n\
    \                val maxValue14 = arr(i)\n                val maxIndex15 = i\n\
    \                val maxValue15 = arr(i)\n                val maxIndex16 = i\n\
    \                val maxValue16 = arr(i)\n                val maxIndex17 = i\n\
    \                val maxValue17 = arr(i)\n                val maxIndex18 = i\n\
    \                val maxValue18 = arr(i)\n                val maxIndex19 = i\n\
    \                val maxValue19 = arr(i)\n                val maxIndex20 = i\n\
    \                val maxValue20 = arr(i)\n                val maxIndex21 = i\n\
    \                val maxValue21 = arr(i)\n                val maxIndex22 = i\n\
    \                val maxValue22 = arr(i)\n                val maxIndex23 = i\n\
    \                val maxValue23 = arr(i)\n                val maxIndex24 = i\n\
    \                val maxValue24 = arr(i)\n                val maxIndex25 = i\n\
    \                val maxValue25 = arr(i)\n                val maxIndex26 = i\n\
    \                val maxValue26 = arr(i)\n                val maxIndex27 = i\n\
    \                val maxValue27 = arr(i)\n                val maxIndex28 = i\n\
    \                val maxValue28 = arr(i)\n                val maxIndex29 = i\n\
    \                val maxValue29\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzxx9kp1g.scala:86:4 ----------------------------\e\
    [0m\e[0m\n\e[31m86 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzxx9kp1g.scala:102:0\
    \ ---------------------------\e[0m\e[0m\n\e[31m102 |\e[0m\n\e[31m\e[31m    |\e\
    [0m^\e[0m\n\e[31m    |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpzxx9kp1g.scala:20:18 ---------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(-_)\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpzxx9kp1g.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpzxx9kp1g.scala:87:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m87 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659793818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxLength = arr.length\n        val maxIndex = arr.indexOfMax\n \
    \       val maxValue = arr(maxIndex)\n        val maxIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexLength = arr.length - 1\n        val maxIndexValue = arr(maxIndexLength)\n\
    \        val maxIndexIndex = 0\n        val maxIndexValueIndex = 0\n        val\
    \ maxIndexValueIndexList = mutable.ArrayBuffer.empty[Long]\n        val maxIndexValueIndexListLength\
    \ = arr.length - 1\n        val maxIndexValueIndexListValue = arr(maxIndexValueIndexListLength)\n\
    \        val maxIndexValueIndexListIndex = 0\n        val maxIndexValueIndexListValueIndex\
    \ = 0\n        val maxIndexValueIndexListValueIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexValueIndexListValueIndexListLength = arr.length - 1\n   \
    \     val maxIndexValueIndexListValueIndexListValue = arr(maxIndexValueIndexListValueIndexListLength)\n\
    \        val maxIndexValueIndexListValueIndexListIndex = 0\n        val maxIndexValueIndexListValueIndexListValueIndex\
    \ = 0\n        val maxIndexValueIndexListValueIndexListValueIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexValueIndexListValueIndexListValueIndexListLength = arr.length\
    \ - 1\n        val maxIndexValueIndexListValueIndexListValueIndexListValue = arr(maxIndexValueIndexListValueIndexListValueIndexListLength)\n\
    \        val maxIndexValueIndexListValueIndexListValueIndexListIndex = 0\n   \
    \     val maxIndexValueIndexListValueIndexListValueIndexListValueIndex = 0\n \
    \       val maxIndexValueIndexListValueIndexListValueIndexListValueIndexList =\
    \ mutable.ArrayBuffer.empty[Long]\n        val maxIndexValueIndexListValueIndexListValueIndexListValueIndexListLength\
    \ = arr.length - 1\n        val maxIndexValueIndexListValueIndexListValueIndexListValueIndexListValue\
    \ = arr(maxIndexValueIndexListValueIndexListValueIndexListValueIndexListValueIndexListLength)\n\
    \        val maxIndexValueIndexListValueIndexListValueIndexListValueIndexListIndex\
    \ = 0\n        val maxIndexValueIndexListValueIndexListValueIndexListValueIndexListValueIndex\
    \ = 0\n        val maxIndexValueIndexListValueIndexListValueIndexListValueIndexListValueIndexList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxIndexValueIndexListValueIndexListValueIndexListValueIndexListValueIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp40h1vnov.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp40h1vnov.scala:20:22\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxList\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m  \
    \ |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp40h1vnov.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndex\e[0m = arr.indexOfMax\n\e[31m\e[31m   |\e[0m                    \
    \   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue indexOfMax is not a member of List[Long]\
    \ - did you mean arr.indexOf?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp40h1vnov.scala:24:27\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexList\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp40h1vnov.scala:29:37 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexValueIndexList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp40h1vnov.scala:34:51\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexValueIndexListValueIndexList\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m                                                  \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1659793820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val max = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n\
    \        var i = 0\n        var j = 0\n        var maxIndexIndex = 0\n       \
    \ var maxIndexValue = 0\n        var maxValue = 0\n        var maxIndexValueIndex\
    \ = 0\n        var maxIndexValueValue = 0\n        var maxIndexValueValueIndex\
    \ = 0\n        var maxIndexValueValueValue = 0\n        var maxIndexValueValueValueIndex\
    \ = 0\n        var maxIndexValueValueValueValue = 0\n        var maxIndexValueValueValueIndex\
    \ = 0\n        var maxIndexValueValueValueValue = 0\n        var maxIndexValueValueValueIndex\
    \ = 0\n        var maxIndexValueValueValueValue = 0\n        var maxIndexValueValueValueIndex\
    \ = 0\n        var maxIndexValueValueValueValue = 0\n        var maxIndexValueValueValueIndex\
    \ = 0\n        var maxIndexValueValueValueValue = 0\n        var maxIndexValueValueValueIndex\
    \ = 0\n        var maxIndexValueValueValueValue = 0\n        var maxIndexValueValueValueIndex\
    \ = 0\n        var maxIndexValueValueValueValue = 0\n        var maxIndexValueValueValueIndex\
    \ = 0\n        var maxIndexValueValueValueValue = 0\n        var maxIndexValueValueValueIndex\
    \ = 0\n        var maxIndexValueValueValueValue = 0\n        var maxIndexValueValueValueIndex\
    \ = 0\n        var maxIndexValueValueValueValue = 0\n        var maxIndexValueValueValueIndex\
    \ = 0\n        var maxIndexValueValueValueValue = 0\n        var maxIndexValueValueValueIndex\
    \ = 0\n        var maxIndexValueValueValueValue = 0\n        var maxIndexValueValueValueIndex\
    \ = 0\n        var maxIndexValueValueValueValue = 0\n        var maxIndexValueValueValueIndex\
    \ = 0\n        var maxIndexValueValueValueValue = 0\n        var maxIndexValueValueValueIndex\
    \ = 0\n        var maxIndexValueValueValueValue = 0\n        var maxIndexValueValueValueIndex\
    \ = 0\n        var maxIndexValueValueValueValue = 0\n        var maxIndexValueValueValueIndex\
    \ = 0\n        var maxIndexValueValueValueValue = 0\n        var maxIndexValueValueValueIndex\
    \ = 0\n        var maxIndexValueValueValueValue = 0\n        var maxIndexValueValueValueIndex\
    \ = 0\n        var maxIndexValueValueValueValue = 0\n        var maxIndexValueValueValueIndex\
    \ = 0\n        var maxIndexValueValueValueValue = 0\n        var maxIndexValueValueValueIndex\
    \ = 0\n        var maxIndexValueValueValueValue = 0\n        var maxIndexValueValueValueIndex\
    \ = 0\n        var maxIndexValueValueValueValue = 0\n        var maxIndexValueValueValueIndex\
    \ = 0\n        var maxIndexValueValueValueValue = 0\n        var maxIndexValueValueValueIndex\
    \ = 0\n        var maxIndexValue\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaliaqt0i.scala:80:4 ----------------------------\e\
    [0m\e[0m\n\e[31m80 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaliaqt0i.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mmaxIndexValueValueValueIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxIndexValueValueValueIndex\
    \ is already defined as \e[33mvariable\e[0m \e[35mmaxIndexValueValueValueIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpaliaqt0i.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mvar\e[0m \e[36mmaxIndexValueValueValueValue\e[0m =\
    \ \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexValueValueValueValue is already defined as \e[33mvariable\e\
    [0m \e[35mmaxIndexValueValueValueValue\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaliaqt0i.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mvar\e[0m \e[36mmaxIndexValueValueValueIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexValueValueValueIndex is already defined as \e[33mvariable\e\
    [0m \e[35mmaxIndexValueValueValueIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaliaqt0i.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mvar\e[0m \e[36mmaxIndexValueValueValueValue\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexValueValueValueValue is already defined as \e[33mvariable\e\
    [0m \e[35mmaxIndexValueValueValueValue\e[0m\n\e[31m   |\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659793821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxArray = new mutable.PriorityQueue[Long]()\n        val maxArray2\
    \ = new mutable.PriorityQueue[Long]()\n        val maxArray3 = new mutable.PriorityQueue[Long]()\n\
    \        val maxArray4 = new mutable.PriorityQueue[Long]()\n        val maxArray5\
    \ = new mutable.PriorityQueue[Long]()\n        val maxArray6 = new mutable.PriorityQueue[Long]()\n\
    \        val maxArray7 = new mutable.PriorityQueue[Long]()\n        val maxArray8\
    \ = new mutable.PriorityQueue[Long]()\n        val maxArray9 = new mutable.PriorityQueue[Long]()\n\
    \        val maxArray10 = new mutable.PriorityQueue[Long]()\n        val maxArray11\
    \ = new mutable.PriorityQueue[Long]()\n        val maxArray12 = new mutable.PriorityQueue[Long]()\n\
    \        val maxArray13 = new mutable.PriorityQueue[Long]()\n        val maxArray14\
    \ = new mutable.PriorityQueue[Long]()\n        val maxArray15 = new mutable.PriorityQueue[Long]()\n\
    \        val maxArray16 = new mutable.PriorityQueue[Long]()\n        val maxArray17\
    \ = new mutable.PriorityQueue[Long]()\n        val maxArray18 = new mutable.PriorityQueue[Long]()\n\
    \        val maxArray19 = new mutable.PriorityQueue[Long]()\n        val maxArray20\
    \ = new mutable.PriorityQueue[Long]()\n        val maxArray21 = new mutable.PriorityQueue[Long]()\n\
    \        val maxArray22 = new mutable.PriorityQueue[Long]()\n        val maxArray23\
    \ = new mutable.PriorityQueue[Long]()\n        val maxArray24 = new mutable.PriorityQueue[Long]()\n\
    \        val maxArray25 = new mutable.PriorityQueue[Long]()\n        val maxArray26\
    \ = new mutable.PriorityQueue[Long]()\n        val maxArray27 = new mutable.PriorityQueue[Long]()\n\
    \        val maxArray28 = new mutable.PriorityQueue[Long]()\n        val maxArray29\
    \ = new mutable.PriorityQueue[Long]()\n        val maxArray30 = new mutable.PriorityQueue[Long]()\n\
    \        val maxArray31 = new mutable.PriorityQueue[Long]()\n        val maxArray32\
    \ = new mutable.PriorityQueue[Long]()\n        val maxArray33 = new mutable.PriorityQueue[Long]()\n\
    \        val max\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpag83mquh.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpag83mquh.scala:20:22\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpag83mquh.scala:21:27 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxArray\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpag83mquh.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxArray2\e[0m = \e[33mnew\e\
    [0m mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m          \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpag83mquh.scala:23:28\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxArray3\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpag83mquh.scala:24:28 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxArray4\e[0m = \e[33mnew\e\
    [0m mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m      "
  stdout: ''
  timestamp: 1659793820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val maxNum = arr.max\n        val maxIndex = arr.indexWhere(x => x ==\
    \ maxNum)\n        val maxNums = arr.take(maxIndex - k + 1)\n        result.addAll(maxNums)\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps468gpxd.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps468gpxd.scala:23:31\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxNums\e\
    [0m = arr.take(maxIndex - k + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m           \
    \                    ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \             Found:    Long\n\e[31m   |\e[0m                               Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxLength = arr.length\n        val maxK = k\n        val maxValue\
    \ = arr(0)\n        val maxIndex = 0\n        for(i <- 0 until maxLength) {\n\
    \            if(arr(i) > maxValue) {\n                maxValue = arr(i)\n    \
    \            maxIndex = i\n            }\n        }\n        for(i <- 0 until\
    \ maxK) {\n            maxList += maxValue\n        }\n        maxList.take(maxK)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpio4balr2.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpio4balr2.scala:27:25 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                maxValue = arr(i)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxValue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpio4balr2.scala:28:25\
    \ -----------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                maxIndex\
    \ = i\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Reassignment to val maxIndex\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpio4balr2.scala:31:25 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until maxK)\
    \ {\n\e[31m\e[31m   |\e[0m                         ^^^^\e[0m\n\e[31m   |\e[0m\
    \                         Found:    (maxK : Long)\n\e[31m   |\e[0m           \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new Array[Long](k)\n\
    \        var max = 0L\n        var index = 0\n        for(i <- 0 until arr.length)\
    \ {\n            if(arr(i) > max) {\n                max = arr(i)\n          \
    \      index = i\n            }\n        }\n        result(index) = max\n    \
    \    return result\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps2u9l3xa.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps2u9l3xa.scala:30:15 --------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mreturn\e[0m result\n\e[31m\e[31m   |\e[0m              \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m               Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m               Required: List[Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val maxList = arr.take(k)\n        val maxList2 = arr.drop(k)\n     \
    \   val maxList3 = arr.takeRight(k)\n        val maxList4 = arr.dropRight(k)\n\
    \        val maxList5 = arr.take(k)\n        val maxList6 = arr.drop(k)\n    \
    \    val maxList7 = arr.takeRight(k)\n        val maxList8 = arr.dropRight(k)\n\
    \        val maxList9 = arr.take(k)\n        val maxList10 = arr.drop(k)\n   \
    \     val maxList11 = arr.takeRight(k)\n        val maxList12 = arr.dropRight(k)\n\
    \        val maxList13 = arr.take(k)\n        val maxList14 = arr.drop(k)\n  \
    \      val maxList15 = arr.takeRight(k)\n        val maxList16 = arr.dropRight(k)\n\
    \        val maxList17 = arr.take(k)\n        val maxList18 = arr.drop(k)\n  \
    \      val maxList19 = arr.takeRight(k)\n        val maxList20 = arr.dropRight(k)\n\
    \        val maxList21 = arr.take(k)\n        val maxList22 = arr.drop(k)\n  \
    \      val maxList23 = arr.takeRight(k)\n        val maxList24 = arr.dropRight(k)\n\
    \        val maxList25 = arr.take(k)\n        val maxList26 = arr.drop(k)\n  \
    \      val maxList27 = arr.takeRight(k)\n        val maxList28 = arr.dropRight(k)\n\
    \        val maxList29 = arr.take(k)\n        val maxList30 = arr.drop(k)\n  \
    \      val maxList31 = arr.takeRight(k)\n        val maxList32 = arr.dropRight(k)\n\
    \        val maxList33 = arr.take(k)\n        val maxList34 = arr.drop(k)\n  \
    \      val maxList35 = arr.takeRight(k)\n        val maxList36 = arr.dropRight(k)\n\
    \        val maxList37 = arr.take(k)\n        val maxList38 = arr.drop(k)\n  \
    \      val maxList39 = arr.takeRight(k)\n        val maxList40 = arr.dropRight(k)\n\
    \        val maxList41 = arr.take(k)\n        val maxList42 = arr.drop(k)\n  \
    \      val maxList43 = arr.takeRight(k)\n        val maxList44 = arr.dropRight(k)\n\
    \        val maxList45 = arr.take(\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpf5m6dgwg.scala:65:33 ---------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m        \e[33mval\e[0m \e[36mmaxList45\e[0m = arr.take(\n\
    \e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m\
    \                                 expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpf5m6dgwg.scala:20:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.sortBy(-_)\n\e[31m\e[31m   |\e[0m                  ^\e\
    [0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf5m6dgwg.scala:66:5\
    \ ---------------------\e[0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val max = new mutable.PriorityQueue[Long]()\n        val min = new mutable.PriorityQueue[Long]()\n\
    \        for(i <- 0 until arr.length){\n            max.enqueue(arr(i))\n    \
    \        min.enqueue(arr(i))\n        }\n        while(max.size < k){\n      \
    \      val maxElement = max.dequeue()\n            val minElement = min.dequeue()\n\
    \            if(maxElement > minElement){\n                result.enqueue(maxElement)\n\
    \                max.enqueue(minElement)\n            }\n        }\n        result.take(k).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp99l07oce.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp99l07oce.scala:21:22\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp99l07oce.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mmin\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxNum = Long.MinValue\n        var i = 0\n        while (i < arr.length)\
    \ {\n            if (arr(i) > maxNum) {\n                maxNum = arr(i)\n   \
    \         }\n            i += 1\n        }\n        var j = 0\n        while (j\
    \ < arr.length) {\n            if (arr(j) < maxNum) {\n                maxNum\
    \ = arr(j)\n            }\n            j += 1\n        }\n        if (maxNum <\
    \ k) {\n            while (j < arr.length) {\n                if (arr(j) < maxNum)\
    \ {\n                    maxNum = arr(j)\n                }\n                j\
    \ += 1\n            }\n        }\n        val maxList = maxList.take(k).toList\n\
    \        return maxList\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzl_39cp5.scala:44:12 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = maxList.take(k).toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxList is already defined as \e[33mvalue\e[0m \e[35mmaxList\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpzl_39cp5.scala:20:22 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793823
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxValue = arr.max\n        val maxIndex = arr.indexWhere(x => x\
    \ == maxValue)\n        val maxLength = arr.length\n        val maxK = k\n   \
    \     val maxKIndex = maxIndex - k\n        val maxKLength = maxLength - k\n \
    \       val maxKValue = arr(maxKIndex)\n        val maxKIndexList = arr.take(maxKLength)\n\
    \        val maxKIndexListLength = maxKIndexList.length\n        val maxKIndexListLength\
    \ = maxKIndexListLength - 1\n        val maxKIndexListLength = maxKIndexListLength\
    \ - 1\n        val maxKIndexListLength = maxKIndexListLength - 1\n        val\
    \ maxKIndexListLength = maxKIndexListLength - 1\n        val maxKIndexListLength\
    \ = maxKIndexListLength - 1\n        val maxKIndexListLength = maxKIndexListLength\
    \ - 1\n        val maxKIndexListLength = maxKIndexListLength - 1\n        val\
    \ maxKIndexListLength = maxKIndexListLength - 1\n        val maxKIndexListLength\
    \ = maxKIndexListLength - 1\n        val maxKIndexListLength = maxKIndexListLength\
    \ - 1\n        val maxKIndexListLength = maxKIndexListLength - 1\n        val\
    \ maxKIndexListLength = maxKIndexListLength - 1\n        val maxKIndexListLength\
    \ = maxKIndexListLength - 1\n        val maxKIndexListLength = maxKIndexListLength\
    \ - 1\n        val maxKIndexListLength = maxKIndexListLength - 1\n        val\
    \ maxKIndexListLength = maxKIndexListLength - 1\n        val maxKIndexListLength\
    \ = maxKIndexListLength - 1\n        val maxKIndexListLength = maxKIndexListLength\
    \ - 1\n        val maxKIndexListLength = maxKIndexListLength - 1\n        val\
    \ maxKIndexListLength = maxKIndexListLength - 1\n        val maxKIndexListLength\
    \ = maxKIndexListLength - 1\n        val maxKIndexListLength = maxKIndexListLength\
    \ - 1\n        val maxKIndexListLength = maxKIndexListLength - 1\n        val\
    \ maxKIndexListLength = maxKIndexListLength - 1\n        val maxKIndexListLength\
    \ = maxKIndexListLength - 1\n        val maxKIndexListLength = maxKIndexListLength\
    \ - 1\n        val maxKIndexListLength = maxKIndexListLength - 1\n        val\
    \ maxKIndexListLength = maxKIndexListLength - 1\n        val maxKIndexListLength\
    \ = maxKIndexListLength - 1\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj7kf3dwo.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxKIndexListLength\e[0m\
    \ = maxKIndexListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxKIndexListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxKIndexListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpj7kf3dwo.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mmaxKIndexListLength\e[0m\
    \ = maxKIndexListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxKIndexListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxKIndexListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpj7kf3dwo.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mmaxKIndexListLength\e[0m\
    \ = maxKIndexListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxKIndexListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxKIndexListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpj7kf3dwo.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mmaxKIndexListLength\e[0m\
    \ = maxKIndexListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxKIndexListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxKIndexListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpj7kf3dwo.scala:34:12 ---------"
  stdout: ''
  timestamp: 1659793825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new Array[Long](k)\n\
    \        val maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap29 = new mutable.HashMap[Long,\
    \ Int]\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_jbeli04.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_jbeli04.scala:21:38 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e[0m \e[35mArray\e\
    [0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m                                \
    \      ^\e[0m\n\e[31m   |\e[0m                                      Found:   \
    \ (k : Long)\n\e[31m   |\e[0m                                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jbeli04.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jbeli04.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_jbeli04.scala:24:31 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1659793814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var maxIndex = 0\n        var i = 0\n        while\
    \ (i < arr.length) {\n            if (arr(i) > max) {\n                max = arr(i)\n\
    \                maxIndex = i\n            }\n            i += 1\n        }\n\
    \        val maxLength = arr.length - maxIndex\n        val maxArray = arr.take(maxLength)\n\
    \        result.addAll(maxArray)\n        val newArray = arr.drop(maxIndex)\n\
    \        result.addAll(newArray)\n        result.sortWith(_ < _)\n        result.take(k)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3renh51y.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3renh51y.scala:26:25\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                max = arr(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new Array[Long](k)\n\
    \        var max = 0L\n        var maxIndex = 0\n        for(i <- 0 until arr.length)\
    \ {\n            if(arr(i) > max) {\n                max = arr(i)\n          \
    \      maxIndex = i\n            }\n        }\n        for(i <- 0 until k) {\n\
    \            result(i) = arr(maxIndex)\n            maxIndex += 1\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp64qnftm9.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp64qnftm9.scala:29:25 --------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until k) {\n\e[31m\e[31m   |\e\
    [0m                         ^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (k : Long)\n\e[31m   |\e[0m                         Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp64qnftm9.scala:33:8 ---------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m\
    \        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new Array[Long](k)\n\
    \        var max = 0L\n        var maxIndex = 0\n        var i = 0\n        var\
    \ j = 0\n        while (i < arr.length) {\n            max = arr(i)\n        \
    \    maxIndex = i\n            while (j < arr.length && arr(j) < max) {\n    \
    \            max += arr(j)\n                maxIndex += 1\n                j +=\
    \ 1\n            }\n            result(i) = max\n            i += 1\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq52a4zii.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpq52a4zii.scala:36:8 ---------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new Array[Long](k)\n\
    \        var i = 0\n        var j = 0\n        var maxIndex = 0\n        for(i\
    \ <- 0 until arr.length) {\n            for(j <- 0 until k) {\n              \
    \  if(arr(i) > max(j)) {\n                    max(j) = arr(i)\n              \
    \      maxIndex = j\n                }\n            }\n        }\n        max.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvv3wpb0j.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpvv3wpb0j.scala:25:29 --------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m            \e[33mfor\e[0m(j <- \e[31m0\e[0m until k) {\n\e[31m\e[31m\
    \   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m               \
    \              Found:    (k : Long)\n\e[31m   |\e[0m                         \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvv3wpb0j.scala:32:12\
    \ --------------------\e[0m\e[0m\n\e[31m32 |\e[0m        max.reverse\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e\
    [31mArray\e[0m[Long]\n\e[31m   |\e[0m        Required: \e[1m\e[32mList\e[0m[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var maxIndex = 0\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) > max) {\n                max = arr(i)\n         \
    \       maxIndex = i\n            }\n        }\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) == max) {\n                result.add(arr(maxIndex))\n\
    \            }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfb067256.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfb067256.scala:25:25\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                max = arr(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new Array[Long](k)\n\
    \        var max = 0L\n        var maxIndex = 0\n        var i = 0\n        while\
    \ (i < arr.length) {\n            if (arr(i) > max) {\n                max = arr(i)\n\
    \                maxIndex = i\n            }\n            i += 1\n        }\n\
    \        val maxList = arr.take(maxIndex).reverse\n        for (i <- 0 until maxList.length)\n\
    \            result(i) = maxList(i)\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmkmc46ky.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpmkmc46ky.scala:34:8 ---------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793826
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxNums = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxNumsIndex = 0\n        var maxNumsValue = arr(0)\n        var\
    \ i = 0\n        while (i < arr.length) {\n            if (arr(i) > maxNumsValue)\
    \ {\n                maxNumsValue = arr(i)\n                maxNumsIndex = i\n\
    \            }\n            i += 1\n        }\n        val maxNumsIndex = arr.length\
    \ - k\n        val maxNumsValue = arr(maxNumsIndex)\n        val maxNumsIndex\
    \ = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n        val\
    \ maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.length - k\n        val maxNumsValue = arr(maxNumsIndex)\n\
    \        val maxNumsIndex = arr.\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa6af96ii.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpa6af96ii.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxNumsIndex\e[0m = arr.length - k\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxNumsIndex\
    \ is already defined as \e[33mvariable\e[0m \e[35mmaxNumsIndex\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6af96ii.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxNumsValue\e[0m = arr(maxNumsIndex)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumsValue is already defined as \e[33mvariable\e[0m \e\
    [35mmaxNumsValue\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpa6af96ii.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsIndex\e[0m = arr.length\
    \ - k\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxNumsIndex is already defined as \e[33mvariable\e[0m \e[35mmaxNumsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpa6af96ii.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsValue\e[0m = arr(maxNumsIndex)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxNumsValue is already defined as \e[33mvariable\e[0m \e[35mmaxNumsValue\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpa6af96ii.scala:35:12 ----"
  stdout: ''
  timestamp: 1659793826
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new Array[Long](k)\n\
    \        val maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap29 = new mutable.HashMap[Long,\
    \ Int]\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_jbeli04.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_jbeli04.scala:21:38 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e[0m \e[35mArray\e\
    [0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m                                \
    \      ^\e[0m\n\e[31m   |\e[0m                                      Found:   \
    \ (k : Long)\n\e[31m   |\e[0m                                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jbeli04.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jbeli04.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_jbeli04.scala:24:31 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1659793814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new Array[Long](k)\n\
    \        var max = 0\n        var maxIndex = 0\n        var i = 0\n        var\
    \ j = 0\n        while (i < arr.length) {\n            max = arr(i)\n        \
    \    maxIndex = i\n            while (j < arr.length && arr(j) < max) {\n    \
    \            max += arr(j)\n                j++\n            }\n            result(maxIndex)\
    \ = max\n            i += 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpg95yuyhy.scala:30:19 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                j++\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg95yuyhy.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpg95yuyhy.scala:26:21 --------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m            max = arr(i)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    Long\n\e[31m   |\e[0m        \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpg95yuyhy.scala:29:20 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m                max += arr(j)\n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Int - did you\
    \ mean Int.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg95yuyhy.scala:35:8\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659793827
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxNums = arr.take(k).maxBy(_.abs)\n\
    \        val maxNumsIndex = arr.lastIndexWhere(_ == maxNums)\n        val maxNumsIndex\
    \ = maxNumsIndex + 1\n        val maxNumsIndex2 = maxNumsIndex + k\n        val\
    \ maxNumsIndex3 = maxNumsIndex2 + k\n        val maxNumsIndex4 = maxNumsIndex3\
    \ + k\n        val maxNumsIndex5 = maxNumsIndex4 + k\n        val maxNumsIndex6\
    \ = maxNumsIndex5 + k\n        val maxNumsIndex7 = maxNumsIndex6 + k\n       \
    \ val maxNumsIndex8 = maxNumsIndex7 + k\n        val maxNumsIndex9 = maxNumsIndex8\
    \ + k\n        val maxNumsIndex10 = maxNumsIndex9 + k\n        val maxNumsIndex11\
    \ = maxNumsIndex10 + k\n        val maxNumsIndex12 = maxNumsIndex11 + k\n    \
    \    val maxNumsIndex13 = maxNumsIndex12 + k\n        val maxNumsIndex14 = maxNumsIndex13\
    \ + k\n        val maxNumsIndex15 = maxNumsIndex14 + k\n        val maxNumsIndex16\
    \ = maxNumsIndex15 + k\n        val maxNumsIndex17 = maxNumsIndex16 + k\n    \
    \    val maxNumsIndex18 = maxNumsIndex17 + k\n        val maxNumsIndex19 = maxNumsIndex18\
    \ + k\n        val maxNumsIndex20 = maxNumsIndex19 + k\n        val maxNumsIndex21\
    \ = maxNumsIndex20 + k\n        val maxNumsIndex22 = maxNumsIndex21 + k\n    \
    \    val maxNumsIndex23 = maxNumsIndex22 + k\n        val maxNumsIndex24 = maxNumsIndex23\
    \ + k\n        val maxNumsIndex25 = maxNumsIndex24 + k\n        val maxNumsIndex26\
    \ = maxNumsIndex25 + k\n        val maxNumsIndex27 = maxNumsIndex26 + k\n    \
    \    val maxNumsIndex28 = maxNumsIndex27 + k\n        val maxNumsIndex29 = maxNumsIndex28\
    \ + k\n        val maxNumsIndex30 = maxNumsIndex29 + k\n        val maxNumsIndex31\
    \ = maxNumsIndex30 + k\n        val maxNums\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuj9rscc6.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuj9rscc6.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxNumsIndex\e[0m = maxNumsIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxNumsIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxNumsIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuj9rscc6.scala:20:31\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxNums\e\
    [0m = arr.take(k).maxBy(_.abs)\n\e[31m\e[31m   |\e[0m                        \
    \       ^\e[0m\n\e[31m   |\e[0m                               Found:    (k : Long)\n\
    \e[31m   |\e[0m                               Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuj9rscc6.scala:54:5 ---------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659793827
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxLength = 0\n        var maxIndex = 0\n        var i = 0\n    \
    \    while (i < arr.length) {\n            if (arr(i) > 0) {\n               \
    \ maxLength += 1\n                if (maxLength > k) {\n                    maxList\
    \ = maxList :+ arr(i)\n                    maxLength = k\n                   \
    \ maxIndex = i\n                }\n            }\n            i += 1\n       \
    \ }\n        if (maxLength > k) {\n            maxList = maxList :+ arr(maxIndex)\n\
    \        }\n        return maxList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpygkdxjyb.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpygkdxjyb.scala:28:28 -----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    maxList = maxList :+ arr(i)\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    Reassignment to val maxList\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpygkdxjyb.scala:29:32 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    maxLength = k\n\e[31m\e[31m   |\e\
    [0m                                ^\e[0m\n\e[31m   |\e[0m                   \
    \             Found:    (k : Long)\n\e[31m   |\e[0m                          \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpygkdxjyb.scala:36:20\
    \ -----------------------------\e[0m\e[0m\n\e[31m36 |\e[0m            maxList\
    \ = maxList :+ arr(maxIndex)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val maxList\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659793827
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxNums = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsIndex = mutable.ArrayBuffer.empty[Int]\n        val maxNumsIndexMap\
    \ = mutable.HashMap.empty[Int, Long]\n        arr.foreach { x =>\n           \
    \ val index = maxNums.length\n            val maxNum = if (x > 0) x else 0\n \
    \           val maxNumIndex = if (x > 0) index else 0\n            val maxNumsIndexMap\
    \ = if (x > 0) maxNumsIndexMap + (maxNumIndex -> x) else None\n            val\
    \ maxNumsIndex = if (x > 0) maxNumsIndex + (index -> x) else None\n          \
    \  if (maxNumsIndexMap.contains(maxNumIndex)) {\n                maxNumsIndexMap(maxNumIndex)\
    \ = maxNumsIndexMap(maxNumIndex) + x\n            } else {\n                maxNumsIndexMap(maxNumIndex)\
    \ = x\n            }\n            if (maxNumsIndexMap.contains(maxNum)) {\n  \
    \              maxNumsIndexMap(maxNum) = maxNumsIndexMap(maxNum) + x\n       \
    \     } else {\n                maxNumsIndexMap(maxNum) = x\n            }\n \
    \       }\n        val maxNumsIndexMapSorted = maxNumsIndexMap.sortBy(_._1).reverse\n\
    \        val maxNumsSorted = maxNumsIndexMapSorted.map { case (index, x) => x\
    \ }\n        val maxNumsSorted = maxNumsSorted.take(k).sorted\n        val maxNumsSorted\
    \ = maxNumsSorted.reverse\n        val maxNumsSorted = maxNumsSorted.map { x =>\
    \ if (x > 0) x else 0 }\n        val maxNumsSorted = maxNumsSorted.take(k).sorted\n\
    \        val maxNumsSorted = maxNumsSorted.reverse\n        val maxNumsSorted\
    \ = maxNumsSorted.map { x => if (x > 0) x else 0 }\n        val maxNumsSorted\
    \ = maxNumsSorted.take(k).sorted\n        val maxNumsSorted = maxNumsSorted.reverse\n\
    \        val maxNumsSorted = maxNumsSorted.map { x => if (x > 0) x else 0 }\n\
    \        val maxNumsSorted = maxNumsSorted.take(k).sorted\n        val maxNumsSorted\
    \ = maxNumsSorted.reverse\n        val maxNumsSorted = maxNumsSorted.map { x =>\
    \ if (x > 0) x else 0 }\n        val maxNumsSorted = maxNumsSorted.take(k).sorted\n\
    \        val maxNumsSor\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4ymtnfn6.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4ymtnfn6.scala:42:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxNumsSorted\e[0m = maxNumsSorted.take(k).sorted\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmaxNumsSorted is already defined as \e[33mvalue\e[0m \e[35mmaxNumsSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4ymtnfn6.scala:43:12 ---------------------------\e[0m\e[0m\n\e\
    [31m43 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsSorted\e[0m = maxNumsSorted.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxNumsSorted is already defined as \e[33mvalue\e[0m \e[35mmaxNumsSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4ymtnfn6.scala:44:12 ---------------------------\e[0m\e[0m\n\e\
    [31m44 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsSorted\e[0m = maxNumsSorted.map\
    \ { \e[36mx\e[0m => \e[33mif\e[0m (x > \e[31m0\e[0m) x \e[33melse\e[0m \e[31m0\e\
    [0m }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumsSorted is already defined as \e[33mvalue\e[0m \e[35mmaxNumsSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4ymtnfn6.scala:45:12 ---------------------------\e[0m\e[0m\n\e\
    [31m45 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsSorted\e[0m = maxNumsSorted.take(k).sorted\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumsSorted is already defined as \e[33mvalue\e[0m \e[35mmaxNumsSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e"
  stdout: ''
  timestamp: 1659793827
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val max = new Array[Long](k)\n        var i = 0\n        var j = 0\n\
    \        var maxIndex = 0\n        while (i < arr.length) {\n            if (j\
    \ == k) {\n                maxIndex = i\n                while (j < k) {\n   \
    \                 max(i) = max(max(i), arr(j))\n                    j += 1\n \
    \               }\n                i += 1\n                j = 0\n           \
    \ } else {\n                if (arr(i) > arr(j)) {\n                    maxIndex\
    \ = i\n                    max(i) = arr(i)\n                    i += 1\n     \
    \           } else {\n                    maxIndex = j\n                    max(j)\
    \ = arr(j)\n                    j += 1\n                }\n            }\n   \
    \     }\n        max.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxdsyfu_f.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(-_)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxdsyfu_f.scala:21:34 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxdsyfu_f.scala:29:33\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m                    max(i) =\
    \ max(max(i), arr(j))\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Found:    (Long, Nothing)\n\
    \e[31m   |\e[0m                                 Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659793827
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxIndex = mutable.ListBuffer.empty[Int]\n        val maxLength =\
    \ mutable.ListBuffer.empty[Int]\n        val maxLengthIndex = mutable.ListBuffer.empty[Int]\n\
    \        val maxLengthLength = mutable.ListBuffer.empty[Int]\n        val maxLengthLengthIndex\
    \ = mutable.ListBuffer.empty[Int]\n        val maxLengthLengthLength = mutable.ListBuffer.empty[Int]\n\
    \        val maxLengthLengthLengthIndex = mutable.ListBuffer.empty[Int]\n    \
    \    val maxLengthLengthLengthLength = mutable.ListBuffer.empty[Int]\n       \
    \ val maxLengthLengthLengthIndex = mutable.ListBuffer.empty[Int]\n        val\
    \ maxLengthLengthLengthLength = mutable.ListBuffer.empty[Int]\n        val maxLengthLengthLengthIndex\
    \ = mutable.ListBuffer.empty[Int]\n        val maxLengthLengthLengthLength = mutable.ListBuffer.empty[Int]\n\
    \        val maxLengthLengthLengthIndex = mutable.ListBuffer.empty[Int]\n    \
    \    val maxLengthLengthLengthLength = mutable.ListBuffer.empty[Int]\n       \
    \ val maxLengthLengthLengthIndex = mutable.ListBuffer.empty[Int]\n        val\
    \ maxLengthLengthLengthLength = mutable.ListBuffer.empty[Int]\n        val maxLengthLengthLengthIndex\
    \ = mutable.ListBuffer.empty[Int]\n        val maxLengthLengthLengthLength = mutable.ListBuffer.empty[Int]\n\
    \        val maxLengthLengthLengthIndex = mutable.ListBuffer.empty[Int]\n    \
    \    val maxLengthLengthLengthLength = mutable.ListBuffer.empty[Int]\n       \
    \ val maxLengthLengthLengthIndex = mutable.ListBuffer.empty[Int]\n        val\
    \ maxLengthLengthLengthLength = mutable.ListBuffer.empty[Int]\n        val maxLengthLengthLengthIndex\
    \ = mutable.ListBuffer.empty[Int]\n        val maxLengthLengthLengthLength = mutable.ListBuffer.empty[Int]\n\
    \        val maxLengthLengthLengthIndex = mutable.ListBuffer.empty[Int]\n    \
    \    val maxLengthLengthLengthLength = mutable.ListBuffer.empty[Int]\n       \
    \ val maxLengthLengthLengthIndex = mutable.ListBuffer.empty[Int]\n        val\
    \ maxLengthLengthLengthLength = mutable.ListBuffer.empty[Int]\n        val maxLengthLengthLengthIndex\
    \ = mutable.ListBuffer.empty[Int]\n        val maxLengthLengthLengthLength = mutable.ListBuffer.empty[Int]\n\
    \        val maxLengthLengthLengthIndex = mutable.ListBuffer.empty[Int]\n    \
    \    val maxLengthLengthLengthLength = mutable.ListBuffer.empty[Int]\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp81n9_uz9.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxLengthLengthLengthIndex\e\
    [0m = mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLengthLengthLengthIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxLengthLengthLengthIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp81n9_uz9.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxLengthLengthLengthLength\e\
    [0m = mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLengthLengthLengthLength is already defined as \e[33mvalue\e\
    [0m \e[35mmaxLengthLengthLengthLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp81n9_uz9.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mmaxLengthLengthLengthIndex\e\
    [0m = mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLengthLengthLengthIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxLengthLengthLengthIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp81n9_uz9.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mmaxLengthLengthLengthLength\e\
    [0m = mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLengthLengthLengthLength is already defined as \e[33mvalue\e\
    [0m \e[35mmaxLengthLengthLengthLength\e[0m\n\e[31m   |\e[0m\n\e[31m   "
  stdout: ''
  timestamp: 1659793827
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var maxIndex = 0\n        var i = 0\n        while\
    \ (i < arr.length) {\n            if (max < arr(i)) {\n                max = arr(i)\n\
    \                maxIndex = i\n            }\n            i += 1\n        }\n\
    \        val maxLength = arr.length - maxIndex\n        val maxLength = maxLength\
    \ - k\n        if (maxLength < 0) {\n            while (maxLength < 0) {\n   \
    \             max -= 1\n                maxIndex -= 1\n                maxLength\
    \ += 1\n            }\n        }\n        val maxLength = maxLength + k\n    \
    \    while (maxLength > 0) {\n            max += 1\n            maxIndex += 1\n\
    \            maxLength -= 1\n        }\n        result.clear()\n        result.add(max)\n\
    \        result.add(maxIndex)\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjvgls_ax.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mmaxLength\e[0m = maxLength\
    \ - k\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxLength is already defined as \e[33mvalue\e[0m \e[35mmaxLength\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjvgls_ax.scala:40:12 ---------------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxLength\e[0m = maxLength + k\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjvgls_ax.scala:20:25\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpjvgls_ax.scala:26:25 --------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m                max = arr(i)\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m                      Found:    Long\n\e[31m\
    \   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpjvgls_ax.scala:37:26 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                maxLength += \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean maxLength.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpjvgls_ax.scala:44:22 ------------------------\e[0m\e\
    [0m\n\e[31m44 |\e[0m            maxLen"
  stdout: ''
  timestamp: 1659793828
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxValue = arr.head\n        val maxIndex = arr.indexOfMax\n    \
    \    arr.foreach { x =>\n            if (x > maxValue) {\n                maxValue\
    \ = x\n                maxIndex = arr.indexOfMax\n            }\n        }\n \
    \       maxList += maxValue\n        val newList = arr.take(maxIndex - k + 1)\n\
    \        newList += maxValue\n        newList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjwu_v7x2.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpjwu_v7x2.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpjwu_v7x2.scala:25:25 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                maxValue = x\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxValue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjwu_v7x2.scala:26:31\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                maxIndex\
    \ = arr.indexOfMax\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue indexOfMax is not a member of List[Long] - did you mean\
    \ arr.indexOf?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjwu_v7x2.scala:31:16\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        newList += maxValue\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       value += is\
    \ not a member of List[Long] - did you mean newList.!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1659793828
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val max = arr.sortWith(_ > _)\n        val maxList = max.take(k)\n     \
    \   val maxList2 = max.drop(k)\n        val maxList3 = maxList.zip(maxList2).map(_._1)\n\
    \        val maxList4 = maxList3.sortWith(_ > _)\n        val maxList5 = maxList4.take(k)\n\
    \        val maxList6 = maxList4.drop(k)\n        val maxList7 = maxList5.zip(maxList6).map(_._1)\n\
    \        val maxList8 = maxList7.sortWith(_ > _)\n        val maxList9 = maxList8.take(k)\n\
    \        val maxList10 = maxList8.drop(k)\n        val maxList11 = maxList9.zip(maxList10).map(_._1)\n\
    \        val maxList12 = maxList11.sortWith(_ > _)\n        val maxList13 = maxList12.take(k)\n\
    \        val maxList14 = maxList12.drop(k)\n        val maxList15 = maxList13.zip(maxList14).map(_._1)\n\
    \        val maxList16 = maxList15.sortWith(_ > _)\n        val maxList17 = maxList16.take(k)\n\
    \        val maxList18 = maxList16.drop(k)\n        val maxList19 = maxList17.zip(maxList18).map(_._1)\n\
    \        val maxList20 = maxList19.sortWith(_ > _)\n        val maxList21 = maxList20.take(k)\n\
    \        val maxList22 = maxList20.drop(k)\n        val maxList23 = maxList21.zip(maxList22).map(_._1)\n\
    \        val maxList24 = maxList23.sortWith(_ > _)\n        val maxList25 = maxList24.take(k)\n\
    \        val maxList26 = maxList24.drop(k)\n        val maxList27 = maxList25.zip(maxList26).map(_._1)\n\
    \        val maxList28 = maxList27.sortWith(_ > _)\n        val maxList29 = maxList28.take(k)\n\
    \        val maxList30 = maxList28.drop(k)\n        val maxList31 = maxList29.zip(maxList30).map(_._1)\n\
    \        val maxList32 = maxList31.sortWith(_ > _)\n        val maxList33 = maxList32.take(k)\n\
    \        val maxList34 = maxList32.drop(k)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzs0sflt_.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpzs0sflt_.scala:56:5 ---------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793827
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new Array[Long](k)\n\
    \        var max = 0\n        var i = 0\n        while (i < arr.length) {\n  \
    \          if (arr(i) > max) {\n                max = arr(i)\n            }\n\
    \            i += 1\n        }\n        var j = 0\n        while (j < k) {\n \
    \           if (max < arr(j)) {\n                result(j) = max\n           \
    \     max += 1\n            } else {\n                result(j) = arr(j)\n   \
    \         }\n            j += 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkggsvs5j.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpkggsvs5j.scala:25:25 --------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m                max = arr(i)\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m                      Found:    Long\n\e[31m\
    \   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpkggsvs5j.scala:39:8 ---------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m\
    \        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793828
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var maxIndex = 0\n        var i = 0\n        while(i\
    \ < arr.length) {\n            if(arr(i) > max) {\n                max = arr(i)\n\
    \                maxIndex = i\n            }\n            i += 1\n        }\n\
    \        while(i < arr.length) {\n            if(arr(i) == max) {\n          \
    \      result.add(arr(maxIndex))\n                maxIndex += 1\n            }\n\
    \            i += 1\n        }\n        if(result.size == k) {\n            result\n\
    \        } else {\n            result.take(k).toList\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong,\
    \ 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdldrtiz0.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdldrtiz0.scala:26:25\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                max = arr(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793827
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val maxHeap = new mutable.PriorityQueue[Long]()\n        val heapSize\
    \ = arr.length\n        val heapSizeInt = new mutable.PriorityQueue[Int]()\n \
    \       val heapSizeInt2 = new mutable.PriorityQueue[Int]()\n        val heapSizeInt3\
    \ = new mutable.PriorityQueue[Int]()\n        val heapSizeInt4 = new mutable.PriorityQueue[Int]()\n\
    \        val heapSizeInt5 = new mutable.PriorityQueue[Int]()\n        val heapSizeInt6\
    \ = new mutable.PriorityQueue[Int]()\n        val heapSizeInt7 = new mutable.PriorityQueue[Int]()\n\
    \        val heapSizeInt8 = new mutable.PriorityQueue[Int]()\n        val heapSizeInt9\
    \ = new mutable.PriorityQueue[Int]()\n        val heapSizeInt10 = new mutable.PriorityQueue[Int]()\n\
    \        val heapSizeInt11 = new mutable.PriorityQueue[Int]()\n        val heapSizeInt12\
    \ = new mutable.PriorityQueue[Int]()\n        val heapSizeInt13 = new mutable.PriorityQueue[Int]()\n\
    \        val heapSizeInt14 = new mutable.PriorityQueue[Int]()\n        val heapSizeInt15\
    \ = new mutable.PriorityQueue[Int]()\n        val heapSizeInt16 = new mutable.PriorityQueue[Int]()\n\
    \        val heapSizeInt17 = new mutable.PriorityQueue[Int]()\n        val heapSizeInt18\
    \ = new mutable.PriorityQueue[Int]()\n        val heapSizeInt19 = new mutable.PriorityQueue[Int]()\n\
    \        val heapSizeInt20 = new mutable.PriorityQueue[Int]()\n        val heapSizeInt21\
    \ = new mutable.PriorityQueue[Int]()\n        val heapSizeInt22 = new mutable.PriorityQueue[Int]()\n\
    \        val heapSizeInt23 = new mutable.PriorityQueue[Int]()\n        val heapSizeInt24\
    \ = new mutable.PriorityQueue[Int]()\n        val heapSizeInt25 = new mutable.PriorityQueue[Int]()\n\
    \        val heapSizeInt26 = new mutable.PriorityQueue[Int]()\n        val heapSizeInt27\
    \ = new mutable.PriorityQueue[Int]()\n        val heapSizeInt28 = new mutable.PriorityQueue[Int]()\n\
    \        val heapSizeInt29 = new mutable.PriorityQueue[Int]()\n        val heapSizeInt30\
    \ = new mutable.PriorityQueue[Int\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa7qomo_j.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa7qomo_j.scala:20:25\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpa7qomo_j.scala:21:26 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxHeap\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpa7qomo_j.scala:23:30 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mheapSizeInt\e[0m = \e[33mnew\e\
    [0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa7qomo_j.scala:24:31\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mheapSizeInt2\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpa7qomo_j.scala:25:31 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mheapSizeInt3\e[0m = \e[33mnew\e\
    [0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e"
  stdout: ''
  timestamp: 1659793828
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ i = 0\n        var j = 0\n        var maxIndex = 0\n        while (i < len)\
    \ {\n            while (j < k) {\n                if (arr(i) > arr(j)) {\n   \
    \                 maxIndex = j\n                    arr(maxIndex) = arr(i)\n \
    \                   arr(i) = arr(j)\n                    arr(j) = arr(maxIndex)\n\
    \                }\n                j += 1\n            }\n            i += 1\n\
    \        }\n        arr\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_27ph0kz.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(-_)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_27ph0kz.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793828
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var maxIndex = 0\n        var i = 0\n        while\
    \ (i < arr.length) {\n            if (arr(i) > max) {\n                max = arr(i)\n\
    \                maxIndex = i\n            }\n            i += 1\n        }\n\
    \        var j = 0\n        while (j < arr.length) {\n            if (arr(j) <\
    \ max) {\n                max -= arr(j)\n                maxIndex -= 1\n     \
    \       }\n            j += 1\n        }\n        var k = 0\n        while (k\
    \ <= maxIndex) {\n            result.add(arr(k))\n            k += 1\n       \
    \ }\n        return result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6pa5nmrb.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6pa5nmrb.scala:26:25\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                max = arr(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6pa5nmrb.scala:34:20\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m                max -= arr(j)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value -= is not a member of Int - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659793829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxCount = mutable.ArrayBuffer.empty[Long]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprehp__6s.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxCountIndex\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCountIndex is already defined as \e[33mvalue\e[0m \e[35mmaxCountIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprehp__6s.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxCountIndex\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCountIndex is already defined as \e[33mvalue\e[0m \e[35mmaxCountIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprehp__6s.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxCountIndex\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCountIndex is already defined as \e[33mvalue\e[0m \e[35mmaxCountIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprehp__6s.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxCountIndex\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCountIndex is already defined as \e[33mvalue\e[0m \e[35mmaxCountIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprehp__6s.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m"
  stdout: ''
  timestamp: 1659793829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val max = new mutable.PriorityQueue[Long]()\n        val min = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        val minIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxValue = new mutable.PriorityQueue[Long]()\n\
    \        val minValue = new mutable.PriorityQueue[Long]()\n        val maxIndexValue\
    \ = new mutable.PriorityQueue[Int]()\n        val minIndexValue = new mutable.PriorityQueue[Int]()\n\
    \        val maxValueValue = new mutable.PriorityQueue[Long]()\n        val minValueValue\
    \ = new mutable.PriorityQueue[Long]()\n        val maxIndexIndex = new mutable.PriorityQueue[Int]()\n\
    \        val minIndexIndex = new mutable.PriorityQueue[Int]()\n        val maxValueIndex\
    \ = new mutable.PriorityQueue[Long]()\n        val minValueIndex = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndexValueIndex = new mutable.PriorityQueue[Int]()\n        val\
    \ minIndexValueIndex = new mutable.PriorityQueue[Int]()\n        val maxValueValueIndex\
    \ = new mutable.PriorityQueue[Long]()\n        val minValueValueIndex = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndexIndexIndex = new mutable.PriorityQueue[Int]()\n        val\
    \ minIndexIndexIndex = new mutable.PriorityQueue[Int]()\n        val maxValueIndexIndex\
    \ = new mutable.PriorityQueue[Long]()\n        val minValueIndexIndex = new mutable.PriorityQueue[Long]()\n\
    \        val maxValueValueIndex = new mutable.PriorityQueue[Long]()\n        val\
    \ minValueValueIndex = new mutable.PriorityQueue[Long]()\n        val maxIndexIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val minIndexIndexIndex = new mutable.PriorityQueue[Int]()\n\
    \        val maxValueIndexIndex = new mutable.PriorityQueue[Long]()\n        val\
    \ minValueIndexIndex = new mutable.PriorityQueue[Long]()\n        val maxValueValueIndex\
    \ = new mutable.PriorityQueue[Long]()\n        val minValueValueIndex = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndexIndexIndexIndex = new mutable.PriorityQueue[Int]()\n    \
    \    val minIndexIndexIndex = new mutable.PriorityQueue[Int]()\n        val maxValueIndexIndex\
    \ = new \n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyx20l4o7.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpyx20l4o7.scala:43:12 ---------------------------\e[0m\e[0m\n\e[31m43\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxValueValueIndex\e[0m = \e[33mnew\e[0m\
    \ mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxValueValueIndex is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxValueValueIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpyx20l4o7.scala:44:12 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mminValueValueIndex\e[0m\
    \ = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mminValueValueIndex is already defined as \e[33mvalue\e[0m \e[35mminValueValueIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyx20l4o7.scala:46:12 ---------------------------\e[0m\e[0m\n\e\
    [31m46 |\e[0m        \e[33mval\e[0m \e[36mminIndexIndexIndex\e[0m = \e[33mnew\e\
    [0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminIndexIndexIndex is already defined as \e[33mvalue\e[0m\
    \ \e[35mminIndexIndexIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpyx20l4o7.scala:47:12 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mmaxValueIndexIndex\e[0m\
    \ = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659793830
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndex = mutable.ArrayBuffer.empty[Int]\n        val maxValue =\
    \ mutable.ArrayBuffer.empty[Long]\n        val maxIndexList = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxValueList = mutable.ArrayBuffer.empty[Long]\n        for(i <-\
    \ 0 until arr.length){\n            if(arr(i) > 0){\n                maxList +=\
    \ arr(i)\n                maxIndex += i\n                maxValue += arr(i)\n\
    \                maxIndexList += i\n                maxValueList += arr(i)\n \
    \           }\n        }\n        val maxListLength = maxList.length\n       \
    \ val maxIndexLength = maxIndex.length\n        val maxValueLength = maxValue.length\n\
    \        val maxIndexListLength = maxIndexList.length\n        val maxValueListLength\
    \ = maxValueList.length\n        val maxListLength = maxListLength - k\n     \
    \   val maxIndexLength = maxIndexLength - k\n        val maxValueLength = maxValueLength\
    \ - k\n        val maxIndexListLength = maxIndexListLength - k\n        val maxValueListLength\
    \ = maxValueListLength - k\n        val maxListLength = maxListLength - k\n  \
    \      val maxIndexLength = maxIndexLength - k\n        val maxValueLength = maxValueLength\
    \ - k\n        val maxIndexListLength = maxIndexListLength - k\n        val maxValueListLength\
    \ = maxValueListLength - k\n        val maxListLength = maxListLength - k\n  \
    \      val maxIndexLength = maxIndexLength - k\n        val maxValueLength = maxValueLength\
    \ - k\n        val maxIndexListLength = maxIndexListLength - k\n        val maxValueListLength\
    \ = maxValueListLength - k\n        val maxListLength = maxListLength - k\n  \
    \      val maxIndexLength = maxIndexLength - k\n        val maxValueLength = maxValueLength\
    \ - k\n        val maxIndexListLength = maxIndexListLength - k\n        val maxValueListLength\
    \ = maxValueListLength - k\n        val maxListLength = maxListLength - k\n  \
    \      val maxIndexLength = maxIndexLength - k\n        val maxValueLength = maxValueLength\
    \ - k\n        val maxIndexListLength = maxIndexListLength - k\n        val maxValueListLength\
    \ = maxValueListLength - k\n        val maxListLength = maxListLength - k\n  \
    \      val maxIndexLength = maxIndexLength - k\n        val maxValueLength = maxValueLength\
    \ - k\n        val maxIndexListLength = maxIndexListLength - k\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong,\
    \ 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6fa64up7.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mmaxListLength\e[0m = maxListLength\
    \ - k\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxListLength is already defined as \e[33mvalue\e[0m \e[35mmaxListLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6fa64up7.scala:40:12 ---------------------------\e[0m\e[0m\n\e\
    [31m40 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexLength\e[0m = maxIndexLength\
    \ - k\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexLength is already defined as \e[33mvalue\e[0m \e[35mmaxIndexLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6fa64up7.scala:41:12 ---------------------------\e[0m\e[0m\n\e\
    [31m41 |\e[0m        \e[33mval\e[0m \e[36mmaxValueLength\e[0m = maxValueLength\
    \ - k\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxValueLength is already defined as \e[33mvalue\e[0m \e[35mmaxValueLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6fa64up7.scala:42:12 ---------------------------\e[0m\e[0m\n\e\
    [31m42 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListLength\e[0m = maxIndexListLength\
    \ - k\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxIndexListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6fa64up7.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mmaxValueListLength\e[0m\
    \ = maxValueListLength - k\n\e[31m\e[31m   |\e[0m      "
  stdout: ''
  timestamp: 1659793831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new Array[Long](k)\n\
    \        val max = new Array[Long](k)\n        var i = 0\n        var j = 0\n\
    \        var maxIndex = 0\n        while(i < arr.length && j < k) {\n        \
    \    if(arr(i) > arr(j)) {\n                result(maxIndex) = arr(i)\n      \
    \          maxIndex(j) = i\n                i += 1\n            } else {\n   \
    \             result(maxIndex) = arr(j)\n                maxIndex(j) = j\n   \
    \             j += 1\n            }\n        }\n        while(i < arr.length)\
    \ {\n            result(maxIndex) = arr(i)\n            maxIndex(j) = i\n    \
    \        i += 1\n        }\n        while(j < k) {\n            result(maxIndex)\
    \ = arr(j)\n            maxIndex(j) = j\n            j += 1\n        }\n     \
    \   result\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcxmcxw6s.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpcxmcxw6s.scala:21:34 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e\
    [35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                                  ^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    (k : Long)\n\e\
    [31m   |\e[0m                                  Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpcxmcxw6s.scala:28:16 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                maxIndex(j) = i\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value update is\
    \ not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcxmcxw6s.scala:32:16\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m                maxIndex(j)\
    \ = j\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \             value update is not a member of Int\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpcxmcxw6s.scala:38:12 ------------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m            maxIndex(j) = i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value update is not a member of Int\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpcxmcxw6s.scala:43:12 ------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m            maxIndex(j) = j\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value update is not a member\
    \ of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcxmcxw6s.scala:46:8\
    \ ---------------------\e[0m\e[0m"
  stdout: ''
  timestamp: 1659793831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new Array[Long](k)\n\
    \        val maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap29 = new mutable.HashMap[Long,\
    \ Int]\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_jbeli04.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_jbeli04.scala:21:38 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e[0m \e[35mArray\e\
    [0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m                                \
    \      ^\e[0m\n\e[31m   |\e[0m                                      Found:   \
    \ (k : Long)\n\e[31m   |\e[0m                                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jbeli04.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jbeli04.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_jbeli04.scala:24:31 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1659793814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer[Long]()\n\
    \        var maxNum : Long = arr(0)\n        var maxIndex : Int = 0\n        var\
    \ index : Int = 0\n        while (index < arr.length) {\n            if (arr(index)\
    \ > maxNum) {\n                maxNum = arr(index)\n                maxIndex =\
    \ index\n            }\n            index += 1\n        }\n        var i = 0\n\
    \        while (i < k) {\n            maxList += maxNum\n            i += 1\n\
    \        }\n        return maxList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0dd_pjdu.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxNum : Long = 0\n        var index = 0\n        for(i <- 0 until\
    \ arr.length) {\n            if(arr(i) > maxNum) {\n                maxNum = arr(i)\n\
    \                maxList = mutable.ArrayBuffer.empty[Long]\n                maxList\
    \ += arr(i)\n            }\n            else if(arr(i) == maxNum) {\n        \
    \        maxList += arr(i)\n            }\n            else if(arr(i) < maxNum)\
    \ {\n                maxNum = arr(i)\n                maxList = mutable.ArrayBuffer.empty[Long]\n\
    \                maxList += arr(i)\n            }\n        }\n        if(maxList.size\
    \ == k) {\n            return maxList\n        }\n        else {\n           \
    \ val maxList2 = mutable.ArrayBuffer.empty[Long]\n            val maxNum2 = maxList.last\n\
    \            for(i <- 0 until arr.length) {\n                if(arr(i) > maxNum2)\
    \ {\n                    maxList2 += arr(i)\n                }\n             \
    \   else if(arr(i) == maxNum2) {\n                    maxList2 += arr(i)\n   \
    \             }\n                else if(arr(i) < maxNum2) {\n               \
    \     maxNum2 = arr(i)\n                    maxList2 += arr(i)\n             \
    \   }\n            }\n            if(maxList2.size == k) {\n                return\
    \ maxList2\n            }\n            else {\n                return maxList\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd801dr1z.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpd801dr1z.scala:26:26 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                maxList = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpd801dr1z.scala:34:26 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                maxList = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpd801dr1z.scala:42:27 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m            \e[33mval\e[0m \e[36mmaxList2\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpd801dr1z.scala:52:28 -----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m                    maxNum2 = arr(i)\n\e[31m\e[31m  \
    \ |\e[0m                    ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \         Reassignment to val maxNum2\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659793830
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new Array[Long](k)\n\
    \        var maxIndex = 0\n        var maxValue = arr(0)\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) > maxValue) {\n                maxValue\
    \ = arr(i)\n                maxIndex = i\n            }\n        }\n        val\
    \ result = new Array[Long](k)\n        for (i <- 0 until k) {\n            result(i)\
    \ = arr(maxIndex + i)\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpru51e91x.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpru51e91x.scala:29:37 --------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m \e[35mArray\e\
    [0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                               \
    \      ^\e[0m\n\e[31m   |\e[0m                                     Found:    (k\
    \ : Long)\n\e[31m   |\e[0m                                     Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpru51e91x.scala:30:26\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until k) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (k : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpru51e91x.scala:33:8 ---------------------\e[0m\e\
    [0m\n\e[31m33 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m     \
    \   Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer[Long]()\n\
    \        val maxValue = arr.head\n        val maxIndex = arr.indexOfMax\n    \
    \    for(i <- 0 until arr.length){\n            if(arr(i) > maxValue){\n     \
    \           maxValue = arr(i)\n                maxIndex = i\n            }\n \
    \       }\n        maxList += maxValue\n        for(i <- 0 until arr.length){\n\
    \            if(i != maxIndex){\n                maxList += arr(i)\n         \
    \   }\n        }\n        maxList.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq71j6ygm.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpq71j6ygm.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpq71j6ygm.scala:25:25 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                maxValue = arr(i)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxValue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpq71j6ygm.scala:26:25\
    \ -----------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                maxIndex\
    \ = i\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Reassignment to val maxIndex\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var maxIndex = 0\n        var i = 0\n        while(i\
    \ < arr.length) {\n            val current = arr(i)\n            if(current >\
    \ max) {\n                max = current\n                maxIndex = i\n      \
    \      }\n            i += 1\n        }\n        while(i < arr.length) {\n   \
    \         val current = arr(i)\n            if(current > max) {\n            \
    \    max = current\n                maxIndex = i\n            }\n            i\
    \ += 1\n        }\n        while(i < arr.length) {\n            val current =\
    \ arr(i)\n            if(current > max) {\n                max = current\n   \
    \             maxIndex = i\n            }\n            i += 1\n        }\n   \
    \     while(i < arr.length) {\n            val current = arr(i)\n            if(current\
    \ > max) {\n                max = current\n                maxIndex = i\n    \
    \        }\n            i += 1\n        }\n        while(i < arr.length) {\n \
    \           val current = arr(i)\n            if(current > max) {\n          \
    \      max = current\n                maxIndex = i\n            }\n          \
    \  i += 1\n        }\n        while(i < arr.length) {\n            val current\
    \ = arr(i)\n            if(current > max) {\n                max = current\n \
    \               maxIndex = i\n            }\n            i += 1\n        }\n \
    \       while(i < arr.length) {\n            val current = arr(i)\n          \
    \  if(current > max) {\n                max = current\n                maxIndex\
    \ = i\n            }\n            i += 1\n        }\n        while(i < arr.length)\
    \ {\n            val current = arr(i)\n            if(current > max) {\n     \
    \           max = current\n                maxIndex = i\n            }\n     \
    \       i += 1\n        }\n        while(i < arr.length) {\n            val current\
    \ = arr(i)\n            if(current > max) {\n                max = current\n \
    \               maxIndex = i\n            }\n            i += 1\n        }\n \
    \       while(i < arr.length) {\n            val current = arr(i)\n          \
    \  if(current > max) {\n                max = current\n                maxIndex\
    \ = i\n            }\n            i += 1\n        }\n        while(i < arr.length)\
    \ {\n            val current = arr(i)\n            if(current > max) {\n     \
    \           max = current\n                maxIndex = i\n            }\n     \
    \       i += 1\n        }\n        while(i < arr.length) {\n            val current\
    \ = arr(i)\n            if(current > max) {\n                max = current\n \
    \               maxIndex = i\n            }\n            i += 1\n        }\n \
    \       while(i < arr.length) {\n            val current = arr(i)\n          \
    \  if(current > max) {\n                max = current\n                maxIndex\
    \ = i\n            }\n            i += 1\n        }\n        while(i < arr.length)\
    \ {\n            val current = arr(i)\n            if(current > max) {\n     \
    \           max = current\n                maxIndex = i\n            }\n     \
    \       i += 1\n        }\n        while(i < arr.length) {\n            val current\
    \ = arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdhbhlwl3.scala:154:0 ---------------------------\e\
    [0m\e[0m\n\e[31m154 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdhbhlwl3.scala:20:25\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpdhbhlwl3.scala:27:22 --------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m                max = current\n\e[31m\e[31m   |\e[0m                 \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Found:    (current :\
    \ Long)\n\e[31m   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdhbhlwl3.scala:35:22 --------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                max = current\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Found:\
    \    (current : Long)\n\e[31m   |\e[0m                      Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdhbhlwl3.scala:43:22\
    \ --------------------\e[0m\e[0m\n\e[31m43 |\e[0m                max = current\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Found:    (current : Long)\n\e[31m   |\e[0m                \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdhbhlwl3.scala:51:22\
    \ --------------------\e[0m\e[0m\n\e[31m51 |\e[0m                max = current\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Found:    (current : Long)\n\e[31m   |\e[0m                \
    \   "
  stdout: ''
  timestamp: 1659793834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new Array[Long](k)\n\
    \        val maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap29 = new mutable.HashMap[Long,\
    \ Int]\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_jbeli04.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_jbeli04.scala:21:38 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e[0m \e[35mArray\e\
    [0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m                                \
    \      ^\e[0m\n\e[31m   |\e[0m                                      Found:   \
    \ (k : Long)\n\e[31m   |\e[0m                                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jbeli04.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jbeli04.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_jbeli04.scala:24:31 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1659793814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var index = 0\n        var maxIndex = 0\n      \
    \  for(i <- 0 until arr.length) {\n            if(arr(i) > max) {\n          \
    \      max = arr(i)\n                maxIndex = i\n            }\n        }\n\
    \        while(max != 0) {\n            result.add(max)\n            max -= 1\n\
    \            index += 1\n            if(index == k) {\n                break\n\
    \            }\n            for(i <- 0 until arr.length) {\n                if(arr(i)\
    \ > max) {\n                    max = arr(i)\n                    maxIndex = i\n\
    \                }\n            }\n        }\n        result.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzwpzuisp.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzwpzuisp.scala:26:25\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                max = arr(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzwpzuisp.scala:35:16\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m                break\n\e\
    [31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzwpzuisp.scala:39:29\
    \ --------------------\e[0m\e[0m\n\e[31m39 |\e[0m                    max = arr(i)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                        Found:    Long\n\e[31m   |\e[0m                     \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new Array[Long](k)\n\
    \        var maxIndex = 0\n        var maxValue = 0L\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) > maxValue) {\n                maxValue\
    \ = arr(i)\n                maxIndex = i\n            }\n        }\n        val\
    \ newArr = new Array[Long](k)\n        for (i <- 0 until k) {\n            newArr(i)\
    \ = arr(maxIndex + i)\n        }\n        newArr\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbi4rdeq1.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpbi4rdeq1.scala:29:37 --------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mnewArr\e[0m = \e[33mnew\e[0m \e[35mArray\e\
    [0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                               \
    \      ^\e[0m\n\e[31m   |\e[0m                                     Found:    (k\
    \ : Long)\n\e[31m   |\e[0m                                     Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbi4rdeq1.scala:30:26\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until k) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (k : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpbi4rdeq1.scala:33:8 ---------------------\e[0m\e\
    [0m\n\e[31m33 |\e[0m        newArr\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    (newArr : Array[Long])\n\e[31m   |\e[0m     \
    \   Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var maxIndex = 0\n        var i = 0\n        var\
    \ j = 0\n        while (i < arr.length) {\n            max = arr(i)\n        \
    \    maxIndex = i\n            while (j < arr.length && arr(j) < max) {\n    \
    \            max += arr(j)\n                j += 1\n            }\n          \
    \  result.add(max)\n            i += 1\n        }\n        if (result.size < k)\
    \ {\n            while (j < arr.length) {\n                max += arr(j)\n   \
    \             j += 1\n            }\n            result.add(max)\n        }\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp79ulg7ox.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp79ulg7ox.scala:26:21\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            max = arr(i)\n\e\
    [31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \      Found:    Long\n\e[31m   |\e[0m                  Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp79ulg7ox.scala:29:20 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                max += arr(j)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp79ulg7ox.scala:37:20 ------------------------\e[0m\e[0m\n\e[31m37 |\e\
    [0m                max += arr(j)\n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Int - did you\
    \ mean Int.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659793834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxCount = mutable.ArrayBuffer.empty[Long]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxCountIndex = mutable.ArrayBuffer.empty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprehp__6s.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxCountIndex\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCountIndex is already defined as \e[33mvalue\e[0m \e[35mmaxCountIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprehp__6s.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxCountIndex\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCountIndex is already defined as \e[33mvalue\e[0m \e[35mmaxCountIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprehp__6s.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxCountIndex\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCountIndex is already defined as \e[33mvalue\e[0m \e[35mmaxCountIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprehp__6s.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxCountIndex\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCountIndex is already defined as \e[33mvalue\e[0m \e[35mmaxCountIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprehp__6s.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m"
  stdout: ''
  timestamp: 1659793829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortWith(_ <\
    \ _)\n        val max = new Array[Long](k)\n        var i = 0\n        var j =\
    \ 0\n        var maxIndex = 0\n        while (i < arr.length) {\n            if\
    \ (j == k) {\n                maxIndex = i\n                while (maxIndex <\
    \ arr.length && arr(maxIndex) < arr(maxIndex + 1)) {\n                    maxIndex\
    \ += 1\n                }\n                maxIndex -= 1\n                max(i)\
    \ = arr(maxIndex)\n                i += 1\n                j = 0\n           \
    \ } else {\n                if (arr(i) > arr(j)) {\n                    max(i)\
    \ = arr(j)\n                    j += 1\n                } else {\n           \
    \         max(i) = arr(i)\n                    i += 1\n                }\n   \
    \         }\n        }\n        if (maxIndex < arr.length) {\n            max(i)\
    \ = arr(maxIndex)\n        }\n        max.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0lfx4_e8.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m       \
    \           Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0lfx4_e8.scala:21:34 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new Array[Long](k)\n\
    \        val max = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n\
    \        val maxIndexMap = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap3 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap4 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap5 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap6\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap7 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap8 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap9 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap10\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap11 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap12 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap13 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap14\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap15 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap16 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap17 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap18\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap19 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap20 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap21 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap22\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap23 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap24 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap25 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap26\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap27 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap28 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw5r2th97.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpw5r2th97.scala:20:37 --------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e\
    [35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                                     ^\e\
    [0m\n\e[31m   |\e[0m                                     Found:    (k : Long)\n\
    \e[31m   |\e[0m                                     Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw5r2th97.scala:21:34 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw5r2th97.scala:22:38\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m\
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpw5r2th97.scala:23:30 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-expla"
  stdout: ''
  timestamp: 1659793814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxValue = arr.max\n        val maxIndex = arr.indexWhere(x => x\
    \ == maxValue)\n        val maxLength = arr.length\n        val maxIndex = maxIndex\
    \ / k\n        val maxLength = maxLength / k\n        val maxIndex = maxIndex.toInt\n\
    \        val maxLength = maxLength.toInt\n        val maxIndex = maxIndex % k\n\
    \        val maxLength = maxLength % k\n        val maxIndex = maxIndex + k\n\
    \        val maxLength = maxLength + k\n        val maxIndex = maxIndex.toInt\n\
    \        val maxLength = maxLength.toInt\n        val maxIndex = maxIndex % k\n\
    \        val maxLength = maxLength % k\n        val maxIndex = maxIndex + k\n\
    \        val maxLength = maxLength + k\n        val maxIndex = maxIndex.toInt\n\
    \        val maxLength = maxLength.toInt\n        val maxIndex = maxIndex % k\n\
    \        val maxLength = maxLength % k\n        val maxIndex = maxIndex + k\n\
    \        val maxLength = maxLength + k\n        val maxIndex = maxIndex.toInt\n\
    \        val maxLength = maxLength.toInt\n        val maxIndex = maxIndex % k\n\
    \        val maxLength = maxLength % k\n        val maxIndex = maxIndex + k\n\
    \        val maxLength = maxLength + k\n        val maxIndex = maxIndex.toInt\n\
    \        val maxLength = maxLength.toInt\n        val maxIndex = maxIndex % k\n\
    \        val maxLength = maxLength % k\n        val maxIndex = maxIndex + k\n\
    \        val maxLength = maxLength + k\n        val maxIndex = maxIndex.toInt\n\
    \        val maxLength = maxLength.toInt\n        val maxIndex = maxIndex % k\n\
    \        val maxLength = maxLength % k\n        val maxIndex = maxIndex + k\n\
    \        val maxLength = maxLength + k\n        val maxIndex = maxIndex.toInt\n\
    \        val maxLength = maxLength.toInt\n        val maxIndex = maxIndex % k\n\
    \        val maxLength = maxLength % k\n        val maxIndex = maxIndex + k\n\
    \        val maxLength = maxLength + k\n        val maxIndex = maxIndex.toInt\n\
    \        val maxLength = maxLength.toInt\n        val maxIndex = maxIndex % k\n\
    \        val maxLength = maxLength % k\n        val maxIndex = maxIndex + k\n\
    \        val maxLength = maxLength + k\n        val maxIndex = maxIndex.toInt\n\
    \        val maxLength = maxLength.toInt\n        val max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp70s4omww.scala:77:4 ----------------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp70s4omww.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndex\e[0m = maxIndex / k\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp70s4omww.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxLength\e[0m = maxLength / k\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp70s4omww.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndex\e[0m = maxIndex.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp70s4omww.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxLength\e[0m = maxLength.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmaxLength is already defined as \e[33mvalue\e[0m \e[35mmaxLength\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp70s4omww.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = maxIndex"
  stdout: ''
  timestamp: 1659793834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val max = new mutable.PriorityQueue[Long]()\n        val min = new mutable.PriorityQueue[Long]()\n\
    \        val minIndex = new mutable.PriorityQueue[Int]()\n        val maxIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexIndex = new mutable.PriorityQueue[Int]()\n\
    \        val maxIndexIndexIndex = new mutable.PriorityQueue[Int]()\n        val\
    \ maxIndexIndexIndexIndex = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdj4y7sul.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdj4y7sul.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\e[0m = \e[33mnew\e\
    [0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdj4y7sul.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\e\
    [0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdj4y7sul.scala:39:12 ---------------------------\e[0m\e[0m\n\e\
    [31m39 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\e\
    [0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexIndexIndexIndexIndexIndexIndexIndexIndex"
  stdout: ''
  timestamp: 1659793833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        var maxNum : Long = 0\n        var i : Int = 0\n        while(i < arr.length)\
    \ {\n            val currentNum = arr(i)\n            if(currentNum > maxNum)\
    \ {\n                maxNum = currentNum\n            }\n            i += 1\n\
    \        }\n        while(i < arr.length) {\n            val currentNum = arr(i)\n\
    \            if(currentNum > maxNum) {\n                maxNum = currentNum\n\
    \            }\n            i += 1\n        }\n        while(i < arr.length) {\n\
    \            val currentNum = arr(i)\n            if(currentNum > maxNum) {\n\
    \                maxNum = currentNum\n            }\n            i += 1\n    \
    \    }\n        while(i < arr.length) {\n            val currentNum = arr(i)\n\
    \            if(currentNum > maxNum) {\n                maxNum = currentNum\n\
    \            }\n            i += 1\n        }\n        while(i < arr.length) {\n\
    \            val currentNum = arr(i)\n            if(currentNum > maxNum) {\n\
    \                maxNum = currentNum\n            }\n            i += 1\n    \
    \    }\n        while(i < arr.length) {\n            val currentNum = arr(i)\n\
    \            if(currentNum > maxNum) {\n                maxNum = currentNum\n\
    \            }\n            i += 1\n        }\n        while(i < arr.length) {\n\
    \            val currentNum = arr(i)\n            if(currentNum > maxNum) {\n\
    \                maxNum = currentNum\n            }\n            i += 1\n    \
    \    }\n        while(i < arr.length) {\n            val currentNum = arr(i)\n\
    \            if(currentNum > maxNum) {\n                maxNum = currentNum\n\
    \            }\n            i += 1\n        }\n        while(i < arr.length) {\n\
    \            val currentNum = arr(i)\n            if(currentNum > maxNum) {\n\
    \                maxNum = currentNum\n            }\n            i += 1\n    \
    \    }\n        while(i < arr.length) {\n            val currentNum = arr(i)\n\
    \            if(currentNum > maxNum) {\n                maxNum = currentNum\n\
    \            }\n            i += 1\n        }\n        while(i < arr.length) {\n\
    \            val currentNum = arr(i)\n            if(currentNum > maxNum) {\n\
    \                maxNum = currentNum\n            }\n            i += 1\n    \
    \    }\n        while(i < arr.length) {\n            val currentNum = arr(i)\n\
    \            if(currentNum > maxNum) {\n                maxNum = currentNum\n\
    \            }\n            i += 1\n        }\n        while(i < arr.length) {\n\
    \            val currentNum = arr(i)\n            if(currentNum > maxNum) {\n\
    \                maxNum = currentNum\n            }\n            i += 1\n    \
    \    }\n        while(i < arr.length) {\n            val currentNum = arr(i)\n\
    \            if(currentNum > \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_f8dztli.scala:116:27 --------------------------\e\
    [0m\e[0m\n\e[31m116 |\e[0m            \e[33mif\e[0m(currentNum > \n\e[31m\e[31m\
    \    |\e[0m                           ^\e[0m\n\e[31m    |\e[0m               \
    \            expression expected but \e[31m'}'\e[0m found\n\e[31m    |\e[0m\n\e\
    [31m    |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f8dztli.scala:133:0 ---------------------------\e\
    [0m\e[0m\n\e[31m133 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_f8dztli.scala:20:22\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxList\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_f8dztli.scala:132:1\
    \ --------------------\e[0m\e[0m\n\e[31m132 |\e[0m}\n\e[31m\e[31m    |\e[0m ^\e\
    [0m\n\e[31m    |\e[0m Found:    Unit\n\e[31m    |\e[0m Required: List[Long]\n\e\
    [31m    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp_f8dztli.scala:118:4 ---------------------------------------\e\
    [0m\e[0m\n\e[33m118 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m:\
    \ \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m    |\e[0m    ^\e[0m\n\
    \e[33m    |\e[0m    Line is indented too far to the left, or a `}` is missing\n\
    1 warning found\n4 errors found\n"
  stdout: ''
  timestamp: 1659793834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortWith(_.compareTo(_)\
    \ < 0)\n        val max = arr.take(k).toList\n        val rest = arr.drop(k)\n\
    \        rest.foreach(x => max.add(x))\n        max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgxcxymdp.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortWith(_.compareTo(_)\
    \ < \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e\
    [0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer(arr)\n\
    \        var maxLength = 0\n        var maxIndex = 0\n        var maxValue = arr(0)\n\
    \        for(i <- arr.indices) {\n            if(maxLength < k) {\n          \
    \      maxLength = k\n                maxIndex = i\n                maxValue =\
    \ arr(i)\n            }\n            else if(arr(i) > maxValue) {\n          \
    \      maxLength = k\n                maxIndex = i\n                maxValue =\
    \ arr(i)\n            }\n        }\n        maxList.updated(maxIndex, maxValue)\n\
    \        return maxList.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp382i81bd.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ArrayBuffer(arr)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp382i81bd.scala:26:28 --------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m                maxLength = k\n\e[31m\e[31m   |\e[0m     \
    \                       ^\e[0m\n\e[31m   |\e[0m                            Found:\
    \    (k : Long)\n\e[31m   |\e[0m                            Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp382i81bd.scala:31:28\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m                maxLength = k\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new Array[Long](k)\n\
    \        val maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap29 = new mutable.HashMap[Long,\
    \ Int]\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_jbeli04.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_jbeli04.scala:21:38 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e[0m \e[35mArray\e\
    [0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m                                \
    \      ^\e[0m\n\e[31m   |\e[0m                                      Found:   \
    \ (k : Long)\n\e[31m   |\e[0m                                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jbeli04.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jbeli04.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_jbeli04.scala:24:31 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1659793814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new Array[Long](k)\n\
    \        val maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap29 = new mutable.HashMap[Long,\
    \ Int]\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_jbeli04.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_jbeli04.scala:21:38 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e[0m \e[35mArray\e\
    [0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m                                \
    \      ^\e[0m\n\e[31m   |\e[0m                                      Found:   \
    \ (k : Long)\n\e[31m   |\e[0m                                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jbeli04.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jbeli04.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_jbeli04.scala:24:31 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1659793814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxNum = arr.max\n   \
    \     val maxNumIndex = arr.indexWhere(x => x == maxNum)\n        val maxNumList\
    \ = arr.take(maxNumIndex + k).toList\n        val maxNumListIndex = maxNumList.indexWhere(x\
    \ => x == maxNum)\n        val maxNumList2 = maxNumList.take(maxNumListIndex +\
    \ k).toList\n        val maxNumList2Index = maxNumList2.indexWhere(x => x == maxNum)\n\
    \        val maxNumList3 = maxNumList2.take(maxNumList2Index + k).toList\n   \
    \     val maxNumList3Index = maxNumList3.indexWhere(x => x == maxNum)\n      \
    \  val maxNumList4 = maxNumList3.take(maxNumList3Index + k).toList\n        val\
    \ maxNumList4Index = maxNumList4.indexWhere(x => x == maxNum)\n        val maxNumList5\
    \ = maxNumList4.take(maxNumList4Index + k).toList\n        val maxNumList5Index\
    \ = maxNumList5.indexWhere(x => x == maxNum)\n        val maxNumList6 = maxNumList5.take(maxNumList5Index\
    \ + k).toList\n        val maxNumList6Index = maxNumList6.indexWhere(x => x ==\
    \ maxNum)\n        val maxNumList7 = maxNumList6.take(maxNumList6Index + k).toList\n\
    \        val maxNumList7Index = maxNumList7.indexWhere(x => x == maxNum)\n   \
    \     val maxNumList8 = maxNumList7.take(maxNumList7Index + k).toList\n      \
    \  val maxNumList8Index = maxNumList8.indexWhere(x => x == maxNum)\n        val\
    \ maxNumList9 = maxNumList8.take(maxNumList8Index + k).toList\n        val maxNumList9Index\
    \ = maxNumList9.indexWhere(x => x == maxNum)\n        val maxNumList10 = maxNumList9.take(maxNumList9Index\
    \ + k).toList\n        val maxNumList10Index = maxNumList10.indexWhere(x => x\
    \ == maxNum)\n        val maxNumList11 = maxNumList10.take(maxNumList10Index +\
    \ k).toList\n        val maxNumList11Index = maxNumList11.indexWhere(x => x ==\
    \ maxNum)\n        val maxNumList12 = maxNumList11.take(maxNumList11Index + k).toList\n\
    \        val max\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxr3k5k1a.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpxr3k5k1a.scala:22:34 --------------------\e[0m\e[0m\n\e[31m22 |\e[0m\
    \        \e[33mval\e[0m \e[36mmaxNumList\e[0m = arr.take(maxNumIndex + k).toList\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                  Found:    Long\n\e[31m   |\e[0m\
    \                                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpxr3k5k1a.scala:24:42 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxNumList2\e[0m = maxNumList.take(maxNumListIndex\
    \ + k).toList\n\e[31m\e[31m   |\e[0m                                         \
    \ ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \        Found:    Long\n\e[31m   |\e[0m                                     \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxr3k5k1a.scala:26:43\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxNumList3\e\
    [0m = maxNumList2.take(maxNumList2Index + k).toList\n\e[31m\e[31m   |\e[0m   \
    \                                        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                           Found:    Long\n\e[31m   |\e[0m\
    \                                           Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxr3k5k1a.scala:28:43 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxNumList4\e[0m = maxNumList3.take(maxNumList3Index\
    \ + k).toList\n\e[31m\e[31m   |\e[0m                                         \
    \  ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \           Found:    Long"
  stdout: ''
  timestamp: 1659793835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val max = new mutable.PriorityQueue[Long]()\n        val min = new mutable.PriorityQueue[Long]()\n\
    \        for(i <- 0 until arr.length){\n            max.enqueue(arr(i))\n    \
    \        min.enqueue(arr(i))\n        }\n        while(max.size < k){\n      \
    \      val max1 = max.dequeue()\n            val min1 = min.dequeue()\n      \
    \      if(max1 > min1){\n                result.add(max1)\n                max.enqueue(max1)\n\
    \                min.enqueue(min1)\n            }\n        }\n        while(max.size\
    \ > k){\n            val max1 = max.dequeue()\n            val min1 = min.dequeue()\n\
    \            if(max1 < min1){\n                result.add(max1)\n            \
    \    max.enqueue(max1)\n                min.enqueue(min1)\n            }\n   \
    \     }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxwagxwvb.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxwagxwvb.scala:21:22\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpxwagxwvb.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mmin\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new Array[Long](k)\n\
    \        val max = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n\
    \        val maxIndexMap = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap3 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap4 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap5 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap6\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap7 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap8 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap9 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap10\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap11 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap12 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap13 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap14\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap15 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap16 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap17 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap18\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap19 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap20 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap21 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap22\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap23 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap24 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap25 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap26\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap27 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap28 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw5r2th97.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpw5r2th97.scala:20:37 --------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e\
    [35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                                     ^\e\
    [0m\n\e[31m   |\e[0m                                     Found:    (k : Long)\n\
    \e[31m   |\e[0m                                     Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw5r2th97.scala:21:34 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw5r2th97.scala:22:38\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m\
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpw5r2th97.scala:23:30 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-expla"
  stdout: ''
  timestamp: 1659793814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        val maxLength\
    \ = new mutable.PriorityQueue[Int]()\n        val maxLengthIndex = new mutable.PriorityQueue[Int]()\n\
    \        val maxLengthLength = new mutable.PriorityQueue[Int]()\n        val maxLengthLengthIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxLengthLengthLength = new\
    \ mutable.PriorityQueue[Int]()\n        val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n\
    \        val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n \
    \       val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n  \
    \      val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n   \
    \     val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n    \
    \    val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n     \
    \   val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n      \
    \  val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n       \
    \ val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n        val\
    \ maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n        val maxLengthLengthLengthIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxLengthLengthLengthIndex =\
    \ new mutable.PriorityQueue[Int]()\n        val maxLengthLengthLengthIndex = new\
    \ mutable.PriorityQueue[Int]()\n        val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n\
    \        val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n \
    \       val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n  \
    \      val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n   \
    \     val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n    \
    \    val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n     \
    \   val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n      \
    \  val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n       \
    \ val maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n        val\
    \ maxLengthLengthLengthIndex = new mutable.PriorityQueue[Int]()\n        val maxLengthLengthLengthIndex\
    \ = new mutable.PriorityQueue[Int]()\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnr361r4f.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxLengthLengthLengthIndex\e\
    [0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLengthLengthLengthIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxLengthLengthLengthIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnr361r4f.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxLengthLengthLengthIndex\e\
    [0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLengthLengthLengthIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxLengthLengthLengthIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnr361r4f.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxLengthLengthLengthIndex\e\
    [0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLengthLengthLengthIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxLengthLengthLengthIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnr361r4f.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mmaxLengthLengthLengthIndex\e\
    [0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLengthLengthLengthIndex is already defined as \e[33mvalue\e\
    [0m \e[35mm"
  stdout: ''
  timestamp: 1659793834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new Array[Long](k)\n\
    \        var maxIndex = 0\n        var maxValue = arr(0)\n        for(i <- 0 until\
    \ arr.length) {\n            val value = arr(i)\n            if(value > maxValue)\
    \ {\n                maxValue = value\n                maxIndex = i\n        \
    \    }\n        }\n        for(i <- 0 until maxIndex) {\n            val value\
    \ = arr(i)\n            val index = i\n            val temp = maxValue\n     \
    \       maxValue = maxIndex\n            maxIndex = index\n            maxValue\
    \ = temp\n        }\n        val result = new Array[Long](k)\n        for(i <-\
    \ 0 until maxIndex) {\n            result(i) = arr(i)\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9yyd1z5v.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9yyd1z5v.scala:38:37 --------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m \e[35mArray\e\
    [0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                               \
    \      ^\e[0m\n\e[31m   |\e[0m                                     Found:    (k\
    \ : Long)\n\e[31m   |\e[0m                                     Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9yyd1z5v.scala:42:8\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var maxIndex = 0\n        var i = 0\n        while\
    \ (i < arr.length) {\n            if (arr(i) > max) {\n                max = arr(i)\n\
    \                maxIndex = i\n            }\n            i += 1\n        }\n\
    \        var j = 0\n        while (j < arr.length) {\n            if (arr(j) <\
    \ max && j < maxIndex) {\n                result.add(arr(j))\n               \
    \ j += 1\n            }\n            j += 1\n        }\n        result.sortWith((x,\
    \ y) => x > y)\n        result.take(k)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2jh26zk2.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2jh26zk2.scala:26:25\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                max = arr(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var maxIndex = 0\n        var i = 0\n        while(i\
    \ < arr.length) {\n            val curr = arr(i)\n            if(curr > max) {\n\
    \                max = curr\n                maxIndex = i\n            }\n   \
    \         i += 1\n        }\n        while(i < arr.length) {\n            val\
    \ curr = arr(i)\n            if(curr > max) {\n                max = curr\n  \
    \              maxIndex = i\n            }\n            i += 1\n        }\n  \
    \      while(i < arr.length) {\n            val curr = arr(i)\n            if(curr\
    \ > max) {\n                max = curr\n                maxIndex = i\n       \
    \     }\n            i += 1\n        }\n        while(i < arr.length) {\n    \
    \        val curr = arr(i)\n            if(curr > max) {\n                max\
    \ = curr\n                maxIndex = i\n            }\n            i += 1\n  \
    \      }\n        while(i < arr.length) {\n            val curr = arr(i)\n   \
    \         if(curr > max) {\n                max = curr\n                maxIndex\
    \ = i\n            }\n            i += 1\n        }\n        while(i < arr.length)\
    \ {\n            val curr = arr(i)\n            if(curr > max) {\n           \
    \     max = curr\n                maxIndex = i\n            }\n            i +=\
    \ 1\n        }\n        while(i < arr.length) {\n            val curr = arr(i)\n\
    \            if(curr > max) {\n                max = curr\n                maxIndex\
    \ = i\n            }\n            i += 1\n        }\n        while(i < arr.length)\
    \ {\n            val curr = arr(i)\n            if(curr > max) {\n           \
    \     max = curr\n                maxIndex = i\n            }\n            i +=\
    \ 1\n        }\n        while(i < arr.length) {\n            val curr = arr(i)\n\
    \            if(curr > max) {\n                max = curr\n                maxIndex\
    \ = i\n            }\n            i += 1\n        }\n        while(i < arr.length)\
    \ {\n            val curr = arr(i)\n            if(curr > max) {\n           \
    \     max = curr\n                maxIndex = i\n            }\n            i +=\
    \ 1\n        }\n        while(i < arr.length) {\n            val curr = arr(i)\n\
    \            if(curr > max) {\n                max = curr\n                maxIndex\
    \ = i\n            }\n            i += 1\n        }\n        while(i < arr.length)\
    \ {\n            val curr = arr(i)\n            if(curr > max) {\n           \
    \     max = curr\n                maxIndex = i\n            }\n            i +=\
    \ 1\n        }\n        while(i < arr.length) {\n            val curr = arr(i)\n\
    \            if(curr > max) {\n                max = curr\n                maxIndex\
    \ = i\n            }\n            i += 1\n        }\n        while(i < arr.length)\
    \ {\n            val curr = arr(i)\n            if(curr > max) {\n           \
    \     max = curr\n                maxIndex = i\n            }\n            i +=\
    \ 1\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx710myoo.scala:151:0 ---------------------------\e\
    [0m\e[0m\n\e[31m151 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx710myoo.scala:20:25\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpx710myoo.scala:27:22 --------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m                max = curr\n\e[31m\e[31m   |\e[0m                    \
    \  ^^^^\e[0m\n\e[31m   |\e[0m                      Found:    (curr : Long)\n\e\
    [31m   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpx710myoo.scala:35:22 --------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                max = curr\n\e[31m\e[31m   |\e[0m   \
    \                   ^^^^\e[0m\n\e[31m   |\e[0m                      Found:   \
    \ (curr : Long)\n\e[31m   |\e[0m                      Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx710myoo.scala:43:22 --------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m                max = curr\n\e[31m\e[31m   |\e[0m   \
    \                   ^^^^\e[0m\n\e[31m   |\e[0m                      Found:   \
    \ (curr : Long)\n\e[31m   |\e[0m                      Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx710myoo.scala:51:22 --------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m                max = curr\n\e[31m\e[31m   |\e[0m   \
    \                   ^^^^\e[0m\n\e[31m   |\e[0m                      Found:   \
    \ (curr : Long)\n\e[31m   |\e[0m                      Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659793837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var maxIndex = 0\n        var i = 0\n        var\
    \ j = 0\n        while(i < arr.length) {\n            max = arr(i)\n         \
    \   while(j < arr.length && arr(j) < max) {\n                max += arr(j)\n \
    \               j++\n            }\n            if(maxIndex < k) {\n         \
    \       result.add(max)\n                maxIndex += 1\n            }\n      \
    \      i += 1\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpnzua3hye.scala:29:19 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                j++\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnzua3hye.scala:20:25\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpnzua3hye.scala:26:21 --------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m            max = arr(i)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    Long\n\e[31m   |\e[0m        \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpnzua3hye.scala:28:20 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m                max += arr(j)\n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Int - did you\
    \ mean Int.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659793836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val max = new mutable.PriorityQueue[Long]()\n        for (i <- 0 until\
    \ arr.length) {\n            if (max.size < k) {\n                max += arr(i)\n\
    \            }\n            else {\n                if (arr(i) > max.peek) {\n\
    \                    max += arr(i)\n                }\n            }\n       \
    \ }\n        max.toList\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjvxz1j1f.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(-_)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpjvxz1j1f.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new Array[Long](k)\n\
    \        val maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap29 = new mutable.HashMap[Long,\
    \ Int]\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_jbeli04.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_jbeli04.scala:21:38 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e[0m \e[35mArray\e\
    [0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m                                \
    \      ^\e[0m\n\e[31m   |\e[0m                                      Found:   \
    \ (k : Long)\n\e[31m   |\e[0m                                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jbeli04.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jbeli04.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_jbeli04.scala:24:31 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1659793814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val max = new mutable.PriorityQueue[Long]()\n        val maxIndex = new\
    \ mutable.PriorityQueue[Int]()\n        val maxIndexMap = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap3 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap7 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap11 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap15 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap19 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap23 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap27 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Int, \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpivvp2ktv.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpivvp2ktv.scala:20:25\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpivvp2ktv.scala:21:22 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpivvp2ktv.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e\
    [0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpivvp2ktv.scala:23:30\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpivvp2ktv.scala:24:31 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |"
  stdout: ''
  timestamp: 1659793813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        val maxIndexMap\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap3 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap4 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap5\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap6 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap7 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap8 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap9\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap10 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap11 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap12 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap13\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap14 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap15 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap16 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap17\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap18 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap19 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap20 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap21\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap22 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap23 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap24 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap25\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap26 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap27 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap28 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap29\
    \ = new mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1w0fxxlz.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp1w0fxxlz.scala:20:22 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp1w0fxxlz.scala:21:27 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e\
    [0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1w0fxxlz.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp1w0fxxlz.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp1w0fxxlz.scala:24:31 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35"
  stdout: ''
  timestamp: 1659793836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val max = arr.max\n        val min = arr.min\n        val mid = max /\
    \ 2\n        val mid2 = mid / 2\n        val mid3 = mid2 / 2\n        val mid4\
    \ = mid3 / 2\n        val mid5 = mid4 / 2\n        val mid6 = mid5 / 2\n     \
    \   val mid7 = mid6 / 2\n        val mid8 = mid7 / 2\n        val mid9 = mid8\
    \ / 2\n        val mid10 = mid9 / 2\n        val mid11 = mid10 / 2\n        val\
    \ mid12 = mid11 / 2\n        val mid13 = mid12 / 2\n        val mid14 = mid13\
    \ / 2\n        val mid15 = mid14 / 2\n        val mid16 = mid15 / 2\n        val\
    \ mid17 = mid16 / 2\n        val mid18 = mid17 / 2\n        val mid19 = mid18\
    \ / 2\n        val mid20 = mid19 / 2\n        val mid21 = mid20 / 2\n        val\
    \ mid22 = mid21 / 2\n        val mid23 = mid22 / 2\n        val mid24 = mid23\
    \ / 2\n        val mid25 = mid24 / 2\n        val mid26 = mid25 / 2\n        val\
    \ mid27 = mid26 / 2\n        val mid28 = mid27 / 2\n        val mid29 = mid28\
    \ / 2\n        val mid30 = mid29 / 2\n        val mid31 = mid30 / 2\n        val\
    \ mid32 = mid31 / 2\n        val mid33 = mid32 / 2\n        val mid34 = mid33\
    \ / 2\n        val mid35 = mid34 / 2\n        val mid36 = mid35 / 2\n        val\
    \ mid37 = mid36 / 2\n        val mid38 = mid37 / 2\n        val mid39 = mid38\
    \ / 2\n        val mid40 = mid39 / 2\n        val mid41 = mid40 / 2\n        val\
    \ mid42 = mid41 / 2\n        val mid43 = mid42 / 2\n        val mid44 = mid43\
    \ / 2\n        val mid45 = mid44 / 2\n        val mid46 = mid45 / 2\n        val\
    \ mid47 = mid46 / 2\n        val mid48 = mid47 / 2\n        val mid49 = mid48\
    \ / 2\n        val mid50 = mid49 / 2\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp03n2_vlj.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp03n2_vlj.scala:74:5\
    \ ---------------------\e[0m\e[0m\n\e[31m74 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val max = new mutable.PriorityQueue[Long]()\n        val maxSize = new\
    \ mutable.PriorityQueue[Long]()\n        val maxIndex = new mutable.PriorityQueue[Long]()\n\
    \        val maxSizeIndex = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex2\
    \ = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex3 = new mutable.PriorityQueue[Long]()\n\
    \        val maxSizeIndex4 = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex5\
    \ = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex6 = new mutable.PriorityQueue[Long]()\n\
    \        val maxSizeIndex7 = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex8\
    \ = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex9 = new mutable.PriorityQueue[Long]()\n\
    \        val maxSizeIndex10 = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex11\
    \ = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex12 = new mutable.PriorityQueue[Long]()\n\
    \        val maxSizeIndex13 = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex14\
    \ = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex15 = new mutable.PriorityQueue[Long]()\n\
    \        val maxSizeIndex16 = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex17\
    \ = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex18 = new mutable.PriorityQueue[Long]()\n\
    \        val maxSizeIndex19 = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex20\
    \ = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex21 = new mutable.PriorityQueue[Long]()\n\
    \        val maxSizeIndex22 = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex23\
    \ = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex24 = new mutable.PriorityQueue[Long]()\n\
    \        val maxSizeIndex25 = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex26\
    \ = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex27 = new mutable.PriorityQueue[Long]()\n\
    \        val maxSizeIndex28 = new mutable.PriorityQueue[Long]()\n        val maxSizeIndex29\
    \ = new mutable.PriorityQueue[Long\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqlo4c0je.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqlo4c0je.scala:20:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.sortBy(-_)\n\e[31m\e[31m   |\e[0m                  ^\e\
    [0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqlo4c0je.scala:21:22\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpqlo4c0je.scala:22:26 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxSize\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpqlo4c0je.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e\
    [0m mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m          \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqlo4c0je.scala:24:31\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxSizeIndex\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659793838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val max = new mutable.PriorityQueue[Long]()\n        val maxIndex = new\
    \ mutable.PriorityQueue[Int]()\n        val maxIndexMap = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap3 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap7 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap11 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap15 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap19 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap23 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap27 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Int, \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpivvp2ktv.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpivvp2ktv.scala:20:25\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpivvp2ktv.scala:21:22 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpivvp2ktv.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e\
    [0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpivvp2ktv.scala:23:30\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpivvp2ktv.scala:24:31 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |"
  stdout: ''
  timestamp: 1659793813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val maxList = arr.take(k).maxBy(x => x)\n        val maxList2 = arr.takeRight(k).maxBy(x\
    \ => x)\n        val maxList3 = arr.takeRight(k).reverse.maxBy(x => x)\n     \
    \   val maxList4 = arr.takeRight(k).reverse.maxBy(x => x)\n        val maxList5\
    \ = arr.takeRight(k).reverse.maxBy(x => x)\n        val maxList6 = arr.takeRight(k).reverse.maxBy(x\
    \ => x)\n        val maxList7 = arr.takeRight(k).reverse.maxBy(x => x)\n     \
    \   val maxList8 = arr.takeRight(k).reverse.maxBy(x => x)\n        val maxList9\
    \ = arr.takeRight(k).reverse.maxBy(x => x)\n        val maxList10 = arr.takeRight(k).reverse.maxBy(x\
    \ => x)\n        val maxList11 = arr.takeRight(k).reverse.maxBy(x => x)\n    \
    \    val maxList12 = arr.takeRight(k).reverse.maxBy(x => x)\n        val maxList13\
    \ = arr.takeRight(k).reverse.maxBy(x => x)\n        val maxList14 = arr.takeRight(k).reverse.maxBy(x\
    \ => x)\n        val maxList15 = arr.takeRight(k).reverse.maxBy(x => x)\n    \
    \    val maxList16 = arr.takeRight(k).reverse.maxBy(x => x)\n        val maxList17\
    \ = arr.takeRight(k).reverse.maxBy(x => x)\n        val maxList18 = arr.takeRight(k).reverse.maxBy(x\
    \ => x)\n        val maxList19 = arr.takeRight(k).reverse.maxBy(x => x)\n    \
    \    val maxList20 = arr.takeRight(k).reverse.maxBy(x => x)\n        val maxList21\
    \ = arr.takeRight(k).reverse.maxBy(x => x)\n        val maxList22 = arr.takeRight(k).reverse.maxBy(x\
    \ => x)\n        val maxList23 = arr.takeRight(k).reverse.maxBy(x => x)\n    \
    \    val maxList24 = arr.takeRight(k).reverse.maxBy(x => x)\n        val maxList25\
    \ = arr.takeRight(k).reverse.maxBy(x => x)\n        val maxList26 = arr.takeRight(k).reverse.maxBy(x\
    \ => x)\n        val maxList27 = arr.takeRight(k).reverse.maxBy(x => x)\n    \
    \    val maxList28 = arr.takeRight(k\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyd7sckv5.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpyd7sckv5.scala:20:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyd7sckv5.scala:49:5\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val max = arr.take(k).toList\n        val rest = arr.drop(k)\n      \
    \  rest match {\n            case Nil => max\n            case x :: rest => maximum(x\
    \ :: rest, k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpst_q4fxp.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(-_)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new Array[Long](k)\n\
    \        val maxIndex = new Array[Int](k)\n        var i = 0\n        var j =\
    \ 0\n        var maxIndex = 0\n        var maxValue = arr(0)\n        for(i <-\
    \ 0 until arr.length) {\n            if(arr(i) > maxValue) {\n               \
    \ maxValue = arr(i)\n                maxIndex = i\n            }\n        }\n\
    \        for(i <- 0 until arr.length) {\n            if(arr(i) == maxValue) {\n\
    \                maxIndex(i) = i\n            }\n        }\n        for(i <- 0\
    \ until arr.length) {\n            for(j <- 0 until arr.length) {\n          \
    \      if(i != j) {\n                    if(arr(i) < arr(j)) {\n             \
    \           maxIndex(i) = j\n                    }\n                }\n      \
    \      }\n        }\n        for(i <- 0 until arr.length) {\n            for(j\
    \ <- 0 until arr.length) {\n                if(i != j) {\n                   \
    \ if(arr(i) > arr(j)) {\n                        maxIndex(i) = j\n           \
    \         }\n                }\n            }\n        }\n        for(i <- 0 until\
    \ arr.length) {\n            for(j <- 0 until arr.length) {\n                if(i\
    \ != j) {\n                    if(arr(i) < arr(j)) {\n                       \
    \ maxIndex(i) = j\n                    }\n                }\n            }\n \
    \       }\n        for(i <- 0 until arr.length) {\n            for(j <- 0 until\
    \ arr.length) {\n                if(i != j) {\n                    if(arr(i) >\
    \ arr(j)) {\n                        maxIndex(i) = j\n                    }\n\
    \                }\n            }\n        }\n        for(i <- 0 until arr.length)\
    \ {\n            for(j <- 0 until arr.length) {\n                if(i != j) {\n\
    \                    if(arr(i) < arr(j)) {\n                        maxIndex(i)\
    \ = j\n                    }\n                }\n            }\n        }\n  \
    \      for(i <- 0 until arr.length) {\n            for(j <- 0 until arr.length)\
    \ {\n                if(i != j) {\n                    if(arr(i) > arr(j)) {\n\
    \                        maxIndex(i) = j\n                    }\n            \
    \    }\n            }\n        }\n        for(i <- 0 until arr.length) {\n   \
    \         for(j <- 0 until arr.length) {\n                if(i != j) {\n     \
    \               if(arr(i) < arr(j)) {\n                        maxIndex(i) = j\n\
    \                    }\n                }\n            }\n        }\n        for(i\
    \ <- 0 until arr.length) {\n            for(j <- 0 until arr.length) {\n     \
    \           if(i != j) {\n                    if(arr(i) > arr(j)) {\n        \
    \                maxIndex(i) = j\n                    }\n                }\n \
    \           }\n        }\n        for(i <- 0 until arr.length) {\n           \
    \ for(j <- 0 until arr.length) {\n                if(i != j) {\n             \
    \       if(arr(i) < arr(j\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp20xzoc7f.scala:113:4 ---------------------------\e\
    [0m\e[0m\n\e[31m113 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp20xzoc7f.scala:129:0\
    \ ---------------------------\e[0m\e[0m\n\e[31m129 |\e[0m\n\e[31m\e[31m    |\e\
    [0m^\e[0m\n\e[31m    |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161]\
    \ Naming Error: /tmp/tmp20xzoc7f.scala:24:12 ---------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m \e[36mmaxIndex\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxIndex is\
    \ already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp20xzoc7f.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp20xzoc7f.scala:21:38 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e[0m \e[35mArray\e\
    [0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m                                \
    \      ^\e[0m\n\e[31m   |\e[0m                                      Found:   \
    \ (k : Long)\n\e[31m   |\e[0m                                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp20xzoc7f.scala:29:27\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m                maxIndex = i\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Found:    (i : Int)\n\e[31m   |\e[0m                   \
    \        Required: Array[Int]\n"
  stdout: ''
  timestamp: 1659793840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxLength = arr.length\n        val maxK = k\n        val maxValue\
    \ = arr(0)\n        val maxIndex = arr.indexOf(0)\n        val maxIndexList =\
    \ mutable.ArrayBuffer.empty[Long]\n        val maxIndexLength = arr.indexOf(0)\n\
    \        val maxIndexK = k\n        val maxIndexValue = arr(0)\n        val maxIndexIndex\
    \ = arr.indexOf(0)\n        val maxIndexIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexIndexLength = arr.indexOf(0)\n        val maxIndexIndexK\
    \ = k\n        val maxIndexIndexValue = arr(0)\n        val maxIndexIndexIndex\
    \ = arr.indexOf(0)\n        val maxIndexIndexIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexLength = arr.indexOf(0)\n        val maxIndexIndexIndexK\
    \ = k\n        val maxIndexIndexIndexValue = arr(0)\n        val maxIndexIndexIndexIndex\
    \ = arr.indexOf(0)\n        val maxIndexIndexIndexIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexIndexLength = arr.indexOf(0)\n        val maxIndexIndexIndexIndexK\
    \ = k\n        val maxIndexIndexIndexIndexValue = arr(0)\n        val maxIndexIndexIndexIndexIndex\
    \ = arr.indexOf(0)\n        val maxIndexIndexIndexIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexIndexLength = arr.indexOf(0)\n        val maxIndexIndexIndexIndexK\
    \ = k\n        val maxIndexIndexIndexIndexValue = arr(0)\n        val maxIndexIndexIndexIndexIndex\
    \ = arr.indexOf(0)\n        val maxIndexIndexIndexIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexIndexLength = arr.indexOf(0)\n        val maxIndexIndexIndexIndexK\
    \ = k\n        val maxIndexIndexIndexIndexValue = arr(0)\n        val maxIndexIndexIndexIndexIndex\
    \ = arr.indexOf(0)\n        val maxIndexIndexIndexIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexIndexLength = arr.indexOf(0)\n        val maxIndexIndexIndexIndexK\
    \ = k\n        val maxIndexIndexIndexIndexValue = arr(0)\n        val maxIndexIndexIndexIndexIndex\
    \ = arr.indexOf(0)\n        val maxIndexIndexIndexIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexIndexLength = arr.indexOf(0)\n        val maxIndexIndexIndexIndexK\
    \ = k\n        val maxIndexIndexIndexIndexValue = arr(0)\n        val maxIndexIndexIndexIndexIndex\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzi885jge.scala:64:42 ---------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexIndexIndexIndexIndex\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                          ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzi885jge.scala:45:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndexIndexIndexIndexList\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexIndexIndexIndexList is already defined as \e[33mvalue\e\
    [0m \e[35mmaxIndexIndexIndexIndexList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzi885jge.scala:46:12 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexIndexIndexIndexLength\e\
    [0m = arr.indexOf(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexIndexIndexIndexLength is already defined as \e[33mvalue\e\
    [0m \e[35mmaxIndexIndexIndexIndexLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzi885jge.scala:47:12 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexIndexIndexIndexK\e\
    [0m = k\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxIndexIndexIndexIndexK is already defined as \e[33mvalue\e[0m \e\
    [35mmaxIndexIndexIndexIndexK\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpzi885jge.scala:48:12 ---------------------------\e\
    [0m\e[0m\n\e[31m48"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer(arr.take(k))\n\
    \        val maxLength = arr.length\n        for(i <- 0 until arr.length){\n \
    \           val curMax = arr(i)\n            for(j <- 0 until maxLength){\n  \
    \              if(curMax < arr(j)){\n                    maxList += arr(j)\n \
    \                   maxLength = j\n                }\n            }\n        }\n\
    \        maxList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgcj5xruf.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ArrayBuffer(arr.take(k))\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpgcj5xruf.scala:27:30 -----------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m                    maxLength = j\n\e[31m\e[31m   |\e[0m \
    \                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    Reassignment\
    \ to val maxLength\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val max = arr.sortWith(_ < _)\n        val maxList = max.take(k).toList\n\
    \        val maxList2 = max.drop(k).toList\n        val maxList3 = maxList2.sortWith(_\
    \ < _)\n        val maxList4 = maxList3.take(k).toList\n        val maxList5 =\
    \ maxList4.drop(k).toList\n        val maxList6 = maxList5.sortWith(_ < _)\n \
    \       val maxList7 = maxList6.take(k).toList\n        val maxList8 = maxList7.drop(k).toList\n\
    \        val maxList9 = maxList8.sortWith(_ < _)\n        val maxList10 = maxList9.take(k).toList\n\
    \        val maxList11 = maxList10.drop(k).toList\n        val maxList12 = maxList11.sortWith(_\
    \ < _)\n        val maxList13 = maxList12.take(k).toList\n        val maxList14\
    \ = maxList13.drop(k).toList\n        val maxList15 = maxList14.sortWith(_ < _)\n\
    \        val maxList16 = maxList15.take(k).toList\n        val maxList17 = maxList16.drop(k).toList\n\
    \        val maxList18 = maxList17.sortWith(_ < _)\n        val maxList19 = maxList18.take(k).toList\n\
    \        val maxList20 = maxList19.drop(k).toList\n        val maxList21 = maxList20.sortWith(_\
    \ < _)\n        val maxList22 = maxList21.take(k).toList\n        val maxList23\
    \ = maxList22.drop(k).toList\n        val maxList24 = maxList23.sortWith(_ < _)\n\
    \        val maxList25 = maxList24.take(k).toList\n        val maxList26 = maxList25.drop(k).toList\n\
    \        val maxList27 = maxList26.sortWith(_ < _)\n        val maxList28 = maxList27.take(k).toList\n\
    \        val maxList29 = maxList28.drop(k).toList\n        val maxList30 = maxList29.sortWith(_\
    \ < _)\n        val maxList31 = maxList30.take(k).toList\n        val maxList32\
    \ = maxList31.drop(k).toList\n        val maxList33 = maxList32.sortWith(_ < _)\n\
    \        val maxList34 = maxList33.take(k).toList\n        val maxList35 = maxList34.drop(k).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0xpp9a3g.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0xpp9a3g.scala:57:5 ---------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxCount = mutable.ArrayBuffer.empty[Long]\n        val maxIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndex = mutable.ArrayBuffer.empty[Long]\n        val maxCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxCount = mutable.ArrayBuffer.empty[Long]\n        val maxIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndex = mutable.ArrayBuffer.empty[Long]\n        val maxCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxCount = mutable.ArrayBuffer.empty[Long]\n        val maxIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndex = mutable.ArrayBuffer.empty[Long]\n        val maxCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxCount = mutable.ArrayBuffer.empty[Long]\n        val maxIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndex = mutable.ArrayBuffer.empty[Long]\n        val maxCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxCount = mutable.ArrayBuffer.empty[Long]\n        val maxIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndex = mutable.ArrayBuffer.empty[Long]\n        val maxCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxCount = mutable.ArrayBuffer.empty[Long]\n        val maxIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndex = mutable.ArrayBuffer.empty[Long]\n        val maxCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxCount = mutable.ArrayBuffer.empty[Long]\n        val maxIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxCount = mut\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong,\
    \ 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1lfp8rvj.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCount is already defined as \e[33mvalue\e[0m \e[35mmaxCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1lfp8rvj.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1lfp8rvj.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCount is already defined as \e[33mvalue\e[0m \e[35mmaxCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1lfp8rvj.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1lfp8rvj.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35m"
  stdout: ''
  timestamp: 1659793840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortWith(_ <\
    \ _)\n        val max = new Array[Long](k)\n        var maxIndex = 0\n       \
    \ var i = 0\n        while (i < arr.length) {\n            if (maxIndex < k) {\n\
    \                maxIndex(k) = arr(i)\n                max(i) = 0\n          \
    \  }\n            i += 1\n        }\n        return max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpncy_8jsp.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m       \
    \           Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpncy_8jsp.scala:21:34 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpncy_8jsp.scala:26:16\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                maxIndex(k)\
    \ = arr(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                value update is not a member of Int\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpncy_8jsp.scala:31:15 --------------------\e[0m\e[0m\n\
    \e[31m31 |\e[0m        \e[33mreturn\e[0m max\n\e[31m\e[31m   |\e[0m          \
    \     ^^^\e[0m\n\e[31m   |\e[0m               Found:    (max : Array[Long])\n\e\
    [31m   |\e[0m               Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new Array[Long](k)\n\
    \        val maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap29 = new mutable.HashMap[Long,\
    \ Int]\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_jbeli04.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_jbeli04.scala:21:38 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e[0m \e[35mArray\e\
    [0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m                                \
    \      ^\e[0m\n\e[31m   |\e[0m                                      Found:   \
    \ (k : Long)\n\e[31m   |\e[0m                                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jbeli04.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jbeli04.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_jbeli04.scala:24:31 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1659793814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        var maxNum = arr.head\n        var maxIndex = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) > maxNum) {\n                maxNum\
    \ = arr(i)\n                maxIndex = i\n            }\n        }\n        maxList\
    \ += maxNum\n        for (i <- 0 until arr.length - maxIndex + 1) {\n        \
    \    if (arr(i) > maxNum) {\n                maxNum = arr(i)\n               \
    \ maxIndex = i\n            }\n        }\n        maxList += maxNum\n        if\
    \ (maxIndex < k) {\n            val newList = arr.take(maxIndex).sorted\n    \
    \        val newMaxList = newList.take(k - maxIndex).sorted\n            val newMaxList2\
    \ = newList.drop(maxIndex).sorted\n            val newMaxList3 = newList.drop(k\
    \ - maxIndex).sorted\n            val newMaxList4 = newList.take(k - maxIndex).sorted\n\
    \            val newMaxList5 = newList.drop(k - maxIndex).sorted\n           \
    \ val newMaxList6 = newList.take(k - maxIndex).sorted\n            val newMaxList7\
    \ = newList.drop(k - maxIndex).sorted\n            val newMaxList8 = newList.take(k\
    \ - maxIndex).sorted\n            val newMaxList9 = newList.drop(k - maxIndex).sorted\n\
    \            val newMaxList10 = newList.take(k - maxIndex).sorted\n          \
    \  val newMaxList11 = newList.drop(k - maxIndex).sorted\n            val newMaxList12\
    \ = newList.take(k - maxIndex).sorted\n            val newMaxList13 = newList.drop(k\
    \ - maxIndex).sorted\n            val newMaxList14 = newList.take(k - maxIndex).sorted\n\
    \            val newMaxList15 = newList.drop(k - maxIndex).sorted\n          \
    \  val newMaxList16 = newList.take(k - maxIndex).sorted\n            val newMaxList17\
    \ = newList.drop(k - maxIndex).sorted\n            val newMaxList18 = newList.take(k\
    \ - maxIndex).sorted\n            val newMaxList19 = newList.drop(k - maxIndex).sorted\n\
    \            val newMaxList20 = newList.take(k - maxIndex).sorted\n          \
    \  val newMaxList21 = newList.drop(k - maxIndex).sorted\n            val newMaxList22\
    \ = newList.take(k - maxIndex).sorted\n            val newMaxList23 = newList.drop(k\
    \ - maxIndex).sorted\n            val newMaxList24 = newList.take(k - maxIndex).sorted\n\
    \            val newMaxList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp1v9pa13.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp1v9pa13.scala:80:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m80 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpp1v9pa13.scala:20:22 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpp1v9pa13.scala:39:42 --------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m            \e[33mval\e[0m \e[36mnewMaxList\e[0m = newList.take(k\
    \ - maxIndex).sorted\n\e[31m\e[31m   |\e[0m                                  \
    \        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \        Found:    Long\n\e[31m   |\e[0m                                     \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp1v9pa13.scala:41:43\
    \ --------------------\e[0m\e[0m\n\e[31m41 |\e[0m            \e[33mval\e[0m \e\
    [36mnewMaxList3\e[0m = newList.drop(k - maxIndex).sorted\n\e[31m\e[31m   |\e[0m\
    \                                           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                           Found:    Long\n\e[31m   |\e[0m  \
    \                                         Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpp1v9pa13.scala:42:43 --------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m            \e[33mval\e[0m \e[36mnewMaxList4\e[0m = newList.take(k\
    \ - maxIndex).sorted\n\e[31m\e[31m   |\e[0m                                  \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          "
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val max = new Array[Long](k)\n        var i = 0\n        var j = 0\n\
    \        while (i < arr.length && j < k) {\n            if (arr(i) > arr(j)) {\n\
    \                max(i) = arr(i)\n                i += 1\n            } else {\n\
    \                max(j) = arr(j)\n                j += 1\n            }\n    \
    \    }\n        if (i < arr.length) {\n            val temp = arr.slice(i).toList\n\
    \            arr.clear\n            arr ++= temp\n        }\n        if (j < k)\
    \ {\n            val temp = arr.slice(j).toList\n            arr.clear\n     \
    \       arr ++= temp\n        }\n        arr\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5ms829kq.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(-_)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5ms829kq.scala:21:34 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        val maxIndexMap\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap2 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap3 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap4 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap5\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap6 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap7 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap8 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap9\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap10 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap11 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap12 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap13\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap14 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap15 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap16 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap17\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap18 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap19 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap20 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap21\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap22 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap23 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap24 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap25\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap26 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap27 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap28 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap29\
    \ = new mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp02ivnlk6.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp02ivnlk6.scala:20:22 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp02ivnlk6.scala:21:27 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e\
    [0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp02ivnlk6.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp02ivnlk6.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp02ivnlk6.scala:24:31 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mI"
  stdout: ''
  timestamp: 1659793814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new Array[Long](k)\n\
    \        var max = 0L\n        var maxIndex = 0\n        var i = 0\n        while\
    \ (i < arr.length) {\n            if (max < arr(i)) {\n                max = arr(i)\n\
    \                maxIndex = i\n            }\n            i += 1\n        }\n\
    \        var j = 0\n        while (j < k) {\n            result(j) = arr(maxIndex)\n\
    \            j += 1\n            maxIndex -= 1\n        }\n        result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa4569v32.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpa4569v32.scala:37:8 ---------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new Array[Long](k)\n\
    \        val maxIndex = new Array[Int](k)\n        val maxIndexSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSet2\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet3 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet4 = new mutable.HashSet[Int]()\n        val maxIndexSetSet5\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet6 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet7 = new mutable.HashSet[Int]()\n        val maxIndexSetSet8\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet9 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet10 = new mutable.HashSet[Int]()\n        val maxIndexSetSet11\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet12 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet13 = new mutable.HashSet[Int]()\n        val maxIndexSetSet14\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet15 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet16 = new mutable.HashSet[Int]()\n        val maxIndexSetSet17\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet18 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet19 = new mutable.HashSet[Int]()\n        val maxIndexSetSet20\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet21 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet22 = new mutable.HashSet[Int]()\n        val maxIndexSetSet23\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet24 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet25 = new mutable.HashSet[Int]()\n        val maxIndexSetSet26\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet27 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet28 = new mutable.HashSet[Int]()\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpljugowgn.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpljugowgn.scala:21:38 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e[0m \e[35mArray\e\
    [0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m                                \
    \      ^\e[0m\n\e[31m   |\e[0m                                      Found:   \
    \ (k : Long)\n\e[31m   |\e[0m                                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpljugowgn.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexSet\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpljugowgn.scala:23:33 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexSetSet\e[0m = \e\
    [33mnew\e[0m mutable.HashSet[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpljugowgn.scala:24:34 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexSetSet2\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                                  ^^^^^^"
  stdout: ''
  timestamp: 1659793841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxIndex = 0\n        var maxVal = arr(0)\n        var i = 0\n  \
    \      while (i < arr.length) {\n            if (arr(i) > maxVal) {\n        \
    \        maxVal = arr(i)\n                maxIndex = i\n            }\n      \
    \      i += 1\n        }\n        if (maxIndex - k >= 0) {\n            maxList\
    \ += maxIndex - k\n        }\n        maxList += maxVal\n        return maxList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgpqakid2.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxIndex = arr.length\n        val maxValue = arr(0)\n        for(i\
    \ <- 0 until arr.length) {\n            val currentValue = arr(i)\n          \
    \  if(currentValue > maxValue) {\n                maxValue = currentValue\n  \
    \              maxIndex = i\n            }\n        }\n        for(i <- 0 until\
    \ k) {\n            maxList += maxValue\n        }\n        maxList.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpapzavks2.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpapzavks2.scala:26:25 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                maxValue = currentValue\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          Reassignment to val maxValue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpapzavks2.scala:27:25 -----------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m                maxIndex = i\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val\
    \ maxIndex\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpapzavks2.scala:30:25\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until k) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (k : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var maxIndex = 0\n        var i = 0\n        while(i\
    \ < arr.length) {\n            val value = arr(i)\n            if(value > max)\
    \ {\n                max = value\n                maxIndex = i\n            }\n\
    \            i += 1\n        }\n        while(maxIndex < arr.length) {\n     \
    \       val value = arr(maxIndex)\n            if(value > max) {\n           \
    \     max = value\n                maxIndex = arr.length\n            }\n    \
    \        arr.insert(maxIndex, max)\n            maxIndex += 1\n        }\n   \
    \     arr.take(k)\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2nd5rf5a.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2nd5rf5a.scala:27:22\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m                max = value\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \               Found:    (value : Long)\n\e[31m   |\e[0m                    \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2nd5rf5a.scala:35:22\
    \ --------------------\e[0m\e[0m\n\e[31m35 |\e[0m                max = value\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \               Found:    (value : Long)\n\e[31m   |\e[0m                    \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2nd5rf5a.scala:38:16\
    \ ------------------------\e[0m\e[0m\n\e[31m38 |\e[0m            arr.insert(maxIndex,\
    \ max)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \ value insert is not a member of List[Long] - did you mean arr.init?\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp2nd5rf5a.scala:41:17 --------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        arr.take(k)\n\e[31m\e[31m   |\e[0m          \
    \       ^\e[0m\n\e[31m   |\e[0m                 Found:    (k : Long)\n\e[31m \
    \  |\e[0m                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortWith(_ <\
    \ _)\n        val max = new Array[Long](k)\n        var i = 0\n        while (i\
    \ < k) {\n            if (arr(i) > arr(i + 1)) {\n                max(i) = arr(i)\n\
    \                i += 1\n            } else {\n                max(i) = arr(i\
    \ + 1)\n            }\n        }\n        max.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpza0t5prx.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m       \
    \           Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpza0t5prx.scala:21:34 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var maxIndex = 0\n        var i = 0\n        while\
    \ (i < arr.length) {\n            if (arr(i) > max) {\n                max = arr(i)\n\
    \                maxIndex = i\n            }\n            i += 1\n        }\n\
    \        val maxIndex = maxIndex\n        var j = 0\n        while (j < arr.length)\
    \ {\n            if (arr(j) < max && j < maxIndex) {\n                result.add(arr(j))\n\
    \            }\n            j += 1\n        }\n        if (result.size == k) {\n\
    \            result\n        } else {\n            result.take(k).reverse\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvv52rdj6.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = maxIndex\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxIndex\
    \ is already defined as \e[33mvariable\e[0m \e[35mmaxIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvv52rdj6.scala:20:25\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpvv52rdj6.scala:26:25 --------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m                max = arr(i)\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m                      Found:    Long\n\e[31m\
    \   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxNum : Long = 0\n        var maxIndex : Int = 0\n        for(i\
    \ <- 0 until arr.length) {\n            if(arr(i) > maxNum) {\n              \
    \  maxNum = arr(i)\n                maxIndex = i\n            }\n        }\n \
    \       for(i <- 0 until arr.length) {\n            if(arr(i) == maxNum) {\n \
    \               maxList += arr(i)\n            }\n        }\n        val result\
    \ = maxList.take(k).toList\n        for(i <- 0 until result.length) {\n      \
    \      if(result(i) < 0) {\n                result(i) = -result(i)\n         \
    \   }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp100xi8f4.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new mutable.ListBuffer[Long]()\n\
    \        val maxIndex = new mutable.ListBuffer[Int]()\n        var maxIndexCount\
    \ = 0\n        var maxIndexCount2 = 0\n        var maxIndexCount3 = 0\n      \
    \  var maxIndexCount4 = 0\n        var maxIndexCount5 = 0\n        var maxIndexCount6\
    \ = 0\n        var maxIndexCount7 = 0\n        var maxIndexCount8 = 0\n      \
    \  var maxIndexCount9 = 0\n        var maxIndexCount10 = 0\n        var maxIndexCount11\
    \ = 0\n        var maxIndexCount12 = 0\n        var maxIndexCount13 = 0\n    \
    \    var maxIndexCount14 = 0\n        var maxIndexCount15 = 0\n        var maxIndexCount16\
    \ = 0\n        var maxIndexCount17 = 0\n        var maxIndexCount18 = 0\n    \
    \    var maxIndexCount19 = 0\n        var maxIndexCount20 = 0\n        var maxIndexCount21\
    \ = 0\n        var maxIndexCount22 = 0\n        var maxIndexCount23 = 0\n    \
    \    var maxIndexCount24 = 0\n        var maxIndexCount25 = 0\n        var maxIndexCount26\
    \ = 0\n        var maxIndexCount27 = 0\n        var maxIndexCount28 = 0\n    \
    \    var maxIndexCount29 = 0\n        var maxIndexCount30 = 0\n        var maxIndexCount31\
    \ = 0\n        var maxIndexCount32 = 0\n        var maxIndexCount33 = 0\n    \
    \    var maxIndexCount34 = 0\n        var maxIndexCount35 = 0\n        var maxIndexCount36\
    \ = 0\n        var maxIndexCount37 = 0\n        var maxIndexCount38 = 0\n    \
    \    var maxIndexCount39 = 0\n        var maxIndexCount40 = 0\n        var maxIndexCount41\
    \ = 0\n        var maxIndexCount42 = 0\n        var maxIndexCount43 = 0\n    \
    \    var maxIndexCount44 = 0\n        var maxIndexCount45 = 0\n        var maxIndexCount46\
    \ = 0\n        var maxIndexCount47 = 0\n        var maxIndexCount48 = 0\n    \
    \    var maxIndexCount49 = 0\n        var maxIndexCount50 = 0\n        var maxIndexCount51\
    \ = 0\n        var maxIndexCount52 = 0\n        var maxIndexCount53 = 0\n    \
    \    var maxIndexCount54 = 0\n        var maxIndexCount55 = 0\n        var maxIndexCount56\
    \ = 0\n        var maxIndexCount57 = 0\n        var maxIndexCount58 = 0\n    \
    \    var maxIndexCount59 = 0\n        var maxIndexCount60 = 0\n        var maxIndexCount61\
    \ = 0\n        var maxIndexCount62 = 0\n        var maxIndexCount63 = 0\n    \
    \    var maxIndexCount64 = 0\n        var maxIndexCount65 = 0\n        var maxIndexCount66\
    \ = 0\n        var maxIndexCount67 = 0\n        var maxIndexCount68 = 0\n    \
    \    var maxIndexCount69 = 0\n        var maxIndex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0sk9uf9q.scala:92:4 ----------------------------\e\
    [0m\e[0m\n\e[31m92 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0sk9uf9q.scala:20:22\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmax\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp0sk9uf9q.scala:21:27 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0sk9uf9q.scala:92:5 ---------------------\e\
    [0m\e[0m\n\e[31m92 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val max = new mutable.ListBuffer[Long]()\n        var i = 0\n       \
    \ while (i < arr.length) {\n            if (max.length < k) {\n              \
    \  max += arr(i)\n            }\n            i += 1\n        }\n        max.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_tj2ly4p.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(-_)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_tj2ly4p.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new Array[Long](k)\n\
    \        var max = 0L\n        var index = 0\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) > max) {\n                max = arr(i)\n         \
    \       index = i\n            }\n        }\n        result(index) = max\n   \
    \     return result\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfse3gw22.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpfse3gw22.scala:30:15 --------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mreturn\e[0m result\n\e[31m\e[31m   |\e[0m              \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m               Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m               Required: List[Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val max = new Array[Long](k)\n        var i = 0\n        var j = 0\n\
    \        var maxIndex = 0\n        while(i < arr.length) {\n            while(j\
    \ < arr.length && arr(j) < arr(i)) {\n                j += 1\n            }\n\
    \            if(j == arr.length) {\n                max(i) = arr(i)\n        \
    \        i += 1\n            } else {\n                max(i) = arr(j)\n     \
    \           j += 1\n            }\n            i += 1\n        }\n        max.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpuo8qu2js.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(-_)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuo8qu2js.scala:21:34 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val max = new Array[Long](k)\n        var i = 0\n        while(i < k)\
    \ {\n            if(arr(i) > arr(i + 1)) {\n                max(i) = arr(i)\n\
    \                i += 1\n            } else {\n                max(i) = arr(i\
    \ + 1)\n                i += 1\n            }\n        }\n        max.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmkgehg22.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(-_)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmkgehg22.scala:21:34 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        var max = 0\n        var i = 0\n        while (i < arr.length) {\n  \
    \          if (arr(i) > max) {\n                max = arr(i)\n            }\n\
    \            i += 1\n        }\n        val maxListSize = k - max\n        val\
    \ maxListArray = Array.ofDim[Long](maxListSize)\n        var j = 0\n        while\
    \ (j < arr.length) {\n            if (arr(j) > max) {\n                maxListArray(j)\
    \ = arr(j)\n                j += 1\n            } else {\n                j +=\
    \ 1\n            }\n        }\n        val maxListArrayList = maxListArray.toList\n\
    \        val maxListArrayListSize = maxListArrayList.size\n        val maxListArrayListArray\
    \ = Array.ofDim[Long](maxListArrayListSize)\n        var k = 0\n        while\
    \ (k <= maxListArrayListSize) {\n            maxListArrayListArray(k) = maxListArrayList(k)\n\
    \            k += 1\n        }\n        return maxListArrayListArray.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbq3mknxy.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpbq3mknxy.scala:25:25 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                max = arr(i)\n\e[31m\e[31m   |\e[0m \
    \                     ^^^^^^\e[0m\n\e[31m   |\e[0m                      Found:\
    \    Long\n\e[31m   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        var maxNum : Long = 0\n        var i : Int = 0\n        while(i < arr.length)\
    \ {\n            if(arr(i) > maxNum) {\n                maxNum = arr(i)\n    \
    \        }\n            i += 1\n        }\n        while(i < arr.length) {\n \
    \           if(arr(i) > maxNum) {\n                maxNum = arr(i)\n         \
    \   }\n            i += 1\n        }\n        while(i < arr.length) {\n      \
    \      if(arr(i) > maxNum) {\n                maxNum = arr(i)\n            }\n\
    \            i += 1\n        }\n        while(i < arr.length) {\n            if(arr(i)\
    \ > maxNum) {\n                maxNum = arr(i)\n            }\n            i +=\
    \ 1\n        }\n        while(i < arr.length) {\n            if(arr(i) > maxNum)\
    \ {\n                maxNum = arr(i)\n            }\n            i += 1\n    \
    \    }\n        while(i < arr.length) {\n            if(arr(i) > maxNum) {\n \
    \               maxNum = arr(i)\n            }\n            i += 1\n        }\n\
    \        while(i < arr.length) {\n            if(arr(i) > maxNum) {\n        \
    \        maxNum = arr(i)\n            }\n            i += 1\n        }\n     \
    \   while(i < arr.length) {\n            if(arr(i) > maxNum) {\n             \
    \   maxNum = arr(i)\n            }\n            i += 1\n        }\n        while(i\
    \ < arr.length) {\n            if(arr(i) > maxNum) {\n                maxNum =\
    \ arr(i)\n            }\n            i += 1\n        }\n        while(i < arr.length)\
    \ {\n            if(arr(i) > maxNum) {\n                maxNum = arr(i)\n    \
    \        }\n            i += 1\n        }\n        while(i < arr.length) {\n \
    \           if(arr(i) > maxNum) {\n                maxNum = arr(i)\n         \
    \   }\n            i += 1\n        }\n        while(i < arr.length) {\n      \
    \      if(arr(i) > maxNum) {\n                maxNum = arr(i)\n            }\n\
    \            i += 1\n        }\n        while(i < arr.length) {\n            if(arr(i)\
    \ > maxNum) {\n                maxNum = arr(i)\n            }\n            i +=\
    \ 1\n        }\n        while(i < arr.length) {\n            if(arr(i) > maxNum)\
    \ {\n                maxNum = arr(i)\n            }\n            i += 1\n    \
    \    }\n        while(i < arr.length) {\n            if(arr(i) > maxNum) {\n \
    \               maxNum = arr(i)\n            }\n            i += 1\n        }\n\
    \        while(i < arr.length) {\n            if(arr(i) > maxNum) {\n        \
    \        maxNum = arr(i)\n            }\n            i += 1\n        }\n     \
    \   while(i < arr.length) {\n            if(arr(i) > maxNum) {\n             \
    \   maxNum = arr(i)\n            }\n            i += 1\n        }\n        while(i\
    \ < arr.length) {\n            if(arr(i) > \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpmt4ow46d.scala:126:23 --------------------------\e\
    [0m\e[0m\n\e[31m126 |\e[0m            \e[33mif\e[0m(arr(i) > \n\e[31m\e[31m  \
    \  |\e[0m                       ^\e[0m\n\e[31m    |\e[0m                     \
    \  expression expected but \e[31m'}'\e[0m found\n\e[31m    |\e[0m\n\e[31m    |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmpmt4ow46d.scala:143:0 ---------------------------\e\
    [0m\e[0m\n\e[31m143 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmt4ow46d.scala:20:22\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxList\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmt4ow46d.scala:142:1\
    \ --------------------\e[0m\e[0m\n\e[31m142 |\e[0m}\n\e[31m\e[31m    |\e[0m ^\e\
    [0m\n\e[31m    |\e[0m Found:    Unit\n\e[31m    |\e[0m Required: List[Long]\n\e\
    [31m    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpmt4ow46d.scala:128:4 ---------------------------------------\e\
    [0m\e[0m\n\e[33m128 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m:\
    \ \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m    |\e[0m    ^\e[0m\n\
    \e[33m    |\e[0m    Line is indented too far to the left, or a `}` is missing\n\
    1 warning found\n4 errors found\n"
  stdout: ''
  timestamp: 1659793844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new Array[Long](k)\n\
    \        val max = new Array[Long](k)\n        var maxIndex = 0\n        var maxValue\
    \ = arr(0)\n        for(i <- 0 until k){\n            val value = arr(i)\n   \
    \         if(value > maxValue){\n                maxValue = value\n          \
    \      maxIndex = i\n            }\n        }\n        for(i <- 0 until k){\n\
    \            result(i) = arr(maxIndex)\n        }\n        result\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzdfavmmk.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpzdfavmmk.scala:21:34 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e\
    [35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                                  ^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    (k : Long)\n\e\
    [31m   |\e[0m                                  Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzdfavmmk.scala:24:25 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until k){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (k : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzdfavmmk.scala:31:25\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until k){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (k : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpzdfavmmk.scala:34:8 ---------------------\e[0m\e\
    [0m\n\e[31m34 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m     \
    \   Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e"
  stdout: ''
  timestamp: 1659793845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxNums = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsSize = mutable.ArrayBuffer.empty[Int]\n        val maxNumsIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxNumsSizeIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxNumsSizeIndexMap = mutable.HashMap.empty[Int, Int]\n        val\
    \ maxNumsIndexMap = mutable.HashMap.empty[Int, Int]\n        val maxNumsIndexMapSize\
    \ = mutable.HashMap.empty[Int, Int]\n        val maxNumsIndexMapSizeIndex = mutable.HashMap.empty[Int,\
    \ Int]\n        val maxNumsIndexMapSizeIndexMap = mutable.HashMap.empty[Int, Int]\n\
    \        val maxNumsIndexMapSizeIndexMapSize = mutable.HashMap.empty[Int, Int]\n\
    \        val maxNumsIndexMapSizeIndexMapSizeIndex = mutable.HashMap.empty[Int,\
    \ Int]\n        val maxNumsIndexMapSizeIndexMapSizeIndexMap = mutable.HashMap.empty[Int,\
    \ Int]\n        val maxNumsIndexMapSizeIndexMapSizeIndexMapSize = mutable.HashMap.empty[Int,\
    \ Int]\n        val maxNumsIndexMapSizeIndexMapSizeIndexMapSizeIndex = mutable.HashMap.empty[Int,\
    \ Int]\n        val maxNumsIndexMapSizeIndexMapSizeIndexMapSizeIndexMap = mutable.HashMap.empty[Int,\
    \ Int]\n        val maxNumsIndexMapSizeIndexMapSizeIndexMapSizeIndexMapSize =\
    \ mutable.HashMap.empty[Int, Int]\n        val maxNumsIndexMapSizeIndexMapSizeIndexMapSizeIndexMapSizeIndex\
    \ = mutable.HashMap.empty[Int, Int]\n        val maxNumsIndexMapSizeIndexMapSizeIndexMapSizeIndexMapSizeIndexMap\
    \ = mutable.HashMap.empty[Int, Int]\n        val maxNumsIndexMapSizeIndexMapSizeIndexMapSizeIndexMapSizeIndexMapSize\
    \ = mutable.HashMap.empty[Int, Int]\n        val maxNumsIndexMapSizeIndexMapSizeIndexMapSizeIndexMapSizeIndexMapSizeIndex\
    \ = mutable.HashMap.empty[Int, Int]\n        val maxNumsIndexMapSizeIndexMapSizeIndexMapSizeIndexMapSizeIndexMapSizeIndexMapSize\
    \ = mutable.HashMap.empty[Int, Int]\n        val maxNumsIndexMapSizeIndexMapSizeIndexMapSizeIndexMapSizeIndexMapSizeIndexMapSizeIndex\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpqeatbay9.scala:41:98 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsIndexMapSizeIndexMapSizeIndexMapSizeIndexMapSizeIndexMapSizeIndexMapSizeIndex\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                                                  ^\e[0m\n\e[31m   |\e[0m   \
    \                                    expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqeatbay9.scala:20:22\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxNums\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m  \
    \ |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqeatbay9.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxNumsSize\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpqeatbay9.scala:22:27 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxNumsIndex\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpqeatbay9.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsSizeIndex\e[0m =\
    \ mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m           \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Not found: mutable\n\e["
  stdout: ''
  timestamp: 1659793846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var i = 0\n        while (i < arr.length) {\n  \
    \          if (arr(i) > max) {\n                max = arr(i)\n            }\n\
    \            i += 1\n        }\n        var j = 0\n        while (j < arr.length)\
    \ {\n            if (arr(j) < max) {\n                result.add(arr(j))\n   \
    \         }\n            j += 1\n        }\n        result.sortWith((x, y) =>\
    \ x > y)\n        result.take(k)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg1m179vi.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg1m179vi.scala:25:25\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                max = arr(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val max = new mutable.ListBuffer[Long]()\n        var i = 0\n       \
    \ while(i < arr.length) {\n            val curr = arr(i)\n            if(curr\
    \ <= k) {\n                max += curr\n                i += 1\n            }\
    \ else {\n                while(i < arr.length && arr(i) <= k) {\n           \
    \         i += 1\n                }\n                max += k\n              \
    \  i -= 1\n            }\n        }\n        max.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpp96lwtaq.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(-_)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpp96lwtaq.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxLength = arr.length\n        val maxK = k\n        val maxValue\
    \ = arr.max\n        val maxIndex = arr.indexOf(maxValue)\n        val maxIndexList\
    \ = mutable.ListBuffer.empty[Long]\n        val maxIndexLength = maxIndex + 1\n\
    \        val maxIndexK = maxIndexLength / maxK\n        val maxIndexValue = maxIndex\
    \ % maxK\n        val maxIndexIndexList = mutable.ListBuffer.empty[Long]\n   \
    \     val maxIndexIndexLength = maxIndexIndex + 1\n        val maxIndexIndexK\
    \ = maxIndexIndexLength / maxK\n        val maxIndexIndexValue = maxIndexIndex\
    \ % maxK\n        val maxIndexIndexIndexList = mutable.ListBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexLength = maxIndexIndexIndex + 1\n        val maxIndexIndexIndexK\
    \ = maxIndexIndexIndexLength / maxK\n        val maxIndexIndexIndexValue = maxIndexIndexIndex\
    \ % maxK\n        val maxIndexIndexIndexIndexList = mutable.ListBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexIndexLength = maxIndexIndexIndexIndex + 1\n   \
    \     val maxIndexIndexIndexIndexK = maxIndexIndexIndexIndexLength / maxK\n  \
    \      val maxIndexIndexIndexIndexValue = maxIndexIndexIndexIndex % maxK\n   \
    \     val maxIndexIndexIndexIndexIndexList = mutable.ListBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexIndexIndexLength = maxIndexIndexIndexIndexIndex\
    \ + 1\n        val maxIndexIndexIndexIndexK = maxIndexIndexIndexIndexLength /\
    \ maxK\n        val maxIndexIndexIndexIndexValue = maxIndexIndexIndexIndex % maxK\n\
    \        val maxIndexIndexIndexIndexIndexList = mutable.ListBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexIndexIndexLength = maxIndexIndexIndexIndexIndex\
    \ + 1\n        val maxIndexIndexIndexIndexK = maxIndexIndexIndexIndexLength /\
    \ maxK\n        val maxIndexIndexIndexIndexValue = maxIndexIndexIndexIndex % maxK\n\
    \        val maxIndexIndexIndexIndexIndexList = mutable.ListBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexIndexIndexLength = maxIndexIndexIndexIndexIndex\
    \ + 1\n        val maxIndexIndexIndexIndexK = maxIndexIndexIndexIndexLength /\
    \ maxK\n        val maxIndexIndexIndexIndexValue = maxIndexIndexIndexIndex % maxK\n\
    \        val maxIndexIndexIndexIndexIndexList = mutable.ListBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexIndexIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpock1qlmw.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpock1qlmw.scala:43:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndexIndexIndexIndexK\e[0m = maxIndexIndexIndexIndexLength / maxK\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexIndexIndexIndexK is already defined as \e[33mvalue\e\
    [0m \e[35mmaxIndexIndexIndexIndexK\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpock1qlmw.scala:44:12 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexIndexIndexIndexValue\e\
    [0m = maxIndexIndexIndexIndex % maxK\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexIndexIndexIndexValue is already defined as \e[33mvalue\e\
    [0m \e[35mmaxIndexIndexIndexIndexValue\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpock1qlmw.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexIndexIndexIndexIndexList\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxIndexIndexIndexIndexIndexList is already defined as \e[33mvalue\e\
    [0m \e[35mmaxIndexIndexIndexIndexIndexList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpock1qlmw.scala:46:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndexIndexIndexIndexIndexLength\e[0m = maxIndexIndexIndexIndexIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m"
  stdout: ''
  timestamp: 1659793847
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortWith(_ <\
    \ _)\n        val result = new Array[Long](k)\n        var i = 0\n        var\
    \ j = 0\n        var max = 0\n        while (i < arr.length) {\n            if\
    \ (j == k) {\n                max += arr(i)\n                i += 1\n        \
    \        j = 0\n            } else {\n                max += arr(i)\n        \
    \        i += 1\n                j += 1\n            }\n        }\n        result(0)\
    \ = max\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpm5r_r_x3.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m       \
    \           Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm5r_r_x3.scala:21:37 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m              \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \       Found:    (k : Long)\n\e[31m   |\e[0m                                \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm5r_r_x3.scala:37:8\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793847
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val max = new Array[Long](k)\n        var i = 0\n        var j = 0\n\
    \        var maxIndex = 0\n        while (i < arr.length) {\n            while\
    \ (j < arr.length && arr(j) < arr(i)) {\n                j += 1\n            }\n\
    \            if (j == arr.length) {\n                max(i) = arr(i)\n       \
    \         i += 1\n            } else {\n                max(i) = arr(j)\n    \
    \            j += 1\n            }\n        }\n        max.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpj3hmq28x.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(-_)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj3hmq28x.scala:21:34 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var maxIndex = 0\n        var i = 0\n        while\
    \ (i < arr.length) {\n            if (arr(i) > max) {\n                max = arr(i)\n\
    \                maxIndex = i\n            }\n            i += 1\n        }\n\
    \        val maxValue = arr(maxIndex)\n        var j = 0\n        while (j < arr.length)\
    \ {\n            if (arr(j) < maxValue) {\n                result.add(arr(j))\n\
    \                j += 1\n            }\n            j += 1\n        }\n      \
    \  result.take(k).toList\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpghk6go6o.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpghk6go6o.scala:26:25\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                max = arr(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793847
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new mutable.ListBuffer[Long]()\n\
    \        var maxIndex = 0\n        arr.foreach(x => {\n            if (x > max.lastOption.getOrElse(-1L))\
    \ {\n                max += x\n                maxIndex += 1\n            }\n\
    \        })\n        max.take(k).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxmeckjq9.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val max = new mutable.PriorityQueue[Long]()\n        for (i <- 0 until\
    \ arr.length) {\n            if (max.size < k) {\n                max += arr(i)\n\
    \            }\n            else {\n                if (arr(i) > max.peek()) {\n\
    \                    max += arr(i)\n                }\n            }\n       \
    \ }\n        result ++= max\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_supem2p.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_supem2p.scala:21:22\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ i = 0\n        var j = 0\n        var maxIndex = 0\n        while (i < len)\
    \ {\n            while (j < k && arr(i) < arr(j)) {\n                j += 1\n\
    \            }\n            if (j == k) {\n                max(i) = arr(i)\n \
    \               i += 1\n                j += 1\n            } else {\n       \
    \         max(i) = arr(j)\n                j += 1\n            }\n        }\n\
    \        if (maxIndex == k) {\n            max.reverse\n        } else {\n   \
    \         max.reverse\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmps4f75xii.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(-_)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps4f75xii.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps4f75xii.scala:40:16\
    \ --------------------\e[0m\e[0m\n\e[31m40 |\e[0m            max.reverse\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found: \
    \   \e[1m\e[31mArray\e[0m[Long]\n\e[31m   |\e[0m            Required: \e[1m\e\
    [32mList\e[0m[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps4f75xii.scala:42:16\
    \ --------------------\e[0m\e[0m\n\e[31m42 |\e[0m            max.reverse\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found: \
    \   \e[1m\e[31mArray\e[0m[Long]\n\e[31m   |\e[0m            Required: \e[1m\e\
    [32mList\e[0m[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793847
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var maxIndex = 0\n        var i = 0\n        while\
    \ (i < arr.length) {\n            if (arr(i) > max) {\n                max = arr(i)\n\
    \                maxIndex = i\n            }\n            i += 1\n        }\n\
    \        if (maxIndex < k) {\n            while (maxIndex < k) {\n           \
    \     result.add(arr(maxIndex))\n                maxIndex += 1\n            }\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuqaojzcn.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuqaojzcn.scala:26:25\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                max = arr(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793847
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new Array[Long](k)\n\
    \        var max = 0\n        var index = 0\n        for (i <- 0 until arr.length)\
    \ {\n            if (max < arr(i)) {\n                max = arr(i)\n         \
    \       index = i\n            }\n        }\n        for (i <- 0 until k) {\n\
    \            result(i) = arr(index)\n            index += 1\n        }\n     \
    \   result\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf2y_h03j.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpf2y_h03j.scala:25:25 --------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m                max = arr(i)\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m                      Found:    Long\n\e[31m\
    \   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpf2y_h03j.scala:29:26 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until k) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (k : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf2y_h03j.scala:33:8\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortWith(_ <\
    \ _)\n        val max = new Array[Long](k)\n        var i = 0\n        var j =\
    \ 0\n        while (i < arr.length) {\n            if (j == k) {\n           \
    \     max += arr(j)\n                j = 0\n            }\n            else if\
    \ (arr(i) > arr(j)) {\n                max += arr(j)\n                j += 1\n\
    \            }\n            else {\n                max += arr(i)\n          \
    \      i += 1\n            }\n        }\n        max += arr(j)\n        max.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpsukqnd2w.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m       \
    \           Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsukqnd2w.scala:21:34 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsukqnd2w.scala:26:20\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                max += arr(j)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m          value\
    \ += is not a member of Array[Long] - did you mean max.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpsukqnd2w.scala:30:20 ------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m                max += arr(j)\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m          value += is not a member of\
    \ Array[Long] - did you mean max.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsukqnd2w.scala:34:20\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m                max += arr(i)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m          value\
    \ += is not a member of Array[Long] - did you mean max.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpsukqnd2w.scala:38:12 ------------------------\e[0m\e\
    [0m\n\e[31m38 |\e[0m        max += arr(j)\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value += is not a member of Array[Long] - did you\
    \ mean max.!=?\n6 errors found\n"
  stdout: ''
  timestamp: 1659793849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new Array[Long](k)\n\
    \        var maxIndex = 0\n        var index = 0\n        var maxValue = arr(0)\n\
    \        for(i <- 0 until arr.length) {\n            if(arr(i) > maxValue) {\n\
    \                maxValue = arr(i)\n                maxIndex = i\n           \
    \ }\n        }\n        for(i <- 0 until arr.length) {\n            if(arr(i)\
    \ == maxValue) {\n                max(i) = arr(i)\n            }\n        }\n\
    \        for(i <- 0 until arr.length) {\n            if(arr(i) < maxValue) {\n\
    \                max(i) = arr(i)\n            }\n        }\n        for(i <- 0\
    \ until arr.length) {\n            if(arr(i) == maxValue) {\n                max(i)\
    \ = arr(i)\n            }\n        }\n        for(i <- 0 until arr.length) {\n\
    \            if(arr(i) < maxValue) {\n                max(i) = arr(i)\n      \
    \      }\n        }\n        for(i <- 0 until arr.length) {\n            if(arr(i)\
    \ == maxValue) {\n                max(i) = arr(i)\n            }\n        }\n\
    \        for(i <- 0 until arr.length) {\n            if(arr(i) < maxValue) {\n\
    \                max(i) = arr(i)\n            }\n        }\n        for(i <- 0\
    \ until arr.length) {\n            if(arr(i) == maxValue) {\n                max(i)\
    \ = arr(i)\n            }\n        }\n        for(i <- 0 until arr.length) {\n\
    \            if(arr(i) < maxValue) {\n                max(i) = arr(i)\n      \
    \      }\n        }\n        for(i <- 0 until arr.length) {\n            if(arr(i)\
    \ == maxValue) {\n                max(i) = arr(i)\n            }\n        }\n\
    \        for(i <- 0 until arr.length) {\n            if(arr(i) < maxValue) {\n\
    \                max(i) = arr(i)\n            }\n        }\n        for(i <- 0\
    \ until arr.length) {\n            if(arr(i) == maxValue) {\n                max(i)\
    \ = arr(i)\n            }\n        }\n        for(i <- 0 until arr.length) {\n\
    \            if(arr(i) < maxValue) {\n                max(i) = arr(i)\n      \
    \      }\n        }\n        for(i <- 0 until arr.length) {\n            if(arr(i)\
    \ == maxValue) {\n                max(i) = arr(i)\n            }\n        }\n\
    \        for(i <- 0 until arr.length) {\n            if(arr(i) < maxValue) {\n\
    \                max(i) = arr(i)\n            }\n        }\n        for(i <- 0\
    \ until arr.length) {\n            if(arr(i) == maxValue) {\n                max(i)\
    \ = arr(i)\n            }\n        }\n        for(i <- 0 until arr.length) {\n\
    \            if(arr(i) < maxValue) {\n                max(i) = arr(i)\n      \
    \      }\n        }\n        for(i <- 0 until arr.length) {\n            if(arr(i)\
    \ == maxValue) {\n                max(i) = arr(i)\n            }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong,\
    \ 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdl72lcbn.scala:130:0 ---------------------------\e\
    [0m\e[0m\n\e[31m130 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdl72lcbn.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpdl72lcbn.scala:129:1 --------------------\e[0m\e[0m\n\e[31m129\
    \ |\e[0m}\n\e[31m\e[31m    |\e[0m ^\e[0m\n\e[31m    |\e[0m Found:    Unit\n\e\
    [31m    |\e[0m Required: List[Long]\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmpdl72lcbn.scala:115:4 ---------------------------------------\e[0m\e\
    [0m\n\e[33m115 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m    |\e[0m    ^\e[0m\n\e[33m    |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659793849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxIndex = 0\n        var maxValue = arr(0)\n        for(i <- 0 until\
    \ arr.length) {\n            if(arr(i) > maxValue) {\n                maxValue\
    \ = arr(i)\n                maxIndex = i\n            }\n        }\n        maxList\
    \ += maxValue\n        for(i <- 0 until arr.length - k) {\n            val value\
    \ = arr(i)\n            if(value > maxValue) {\n                maxValue = value\n\
    \                maxIndex = i\n            }\n        }\n        maxList += maxValue\n\
    \        arr.drop(maxIndex + 1).take(k).sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbaksrdf9.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpbaksrdf9.scala:30:25 --------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until arr.length\
    \ - k) {\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Found:    Long\n\e[31m   |\e[0m        \
    \                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpbaksrdf9.scala:38:36 --------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m        arr.drop(maxIndex + \e[31m1\e[0m).take(k).sorted\n\e[31m\e[31m\
    \   |\e[0m                                    ^\e[0m\n\e[31m   |\e[0m        \
    \                            Found:    (k : Long)\n\e[31m   |\e[0m           \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val max = arr.sortBy(-_).take(k).toList\n        arr.filterNot(x => max.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfrtoa2na.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793847
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var maxIndex = 0\n        for(i <- 0 until arr.length)\
    \ {\n            if(arr(i) > max) {\n                max = arr(i)\n          \
    \      maxIndex = i\n            }\n        }\n        for(i <- 0 until arr.length)\
    \ {\n            if(arr(i) == max) {\n                result += arr(maxIndex)\n\
    \                maxIndex += 1\n            }\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcwe4hcym.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcwe4hcym.scala:25:25\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                max = arr(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var maxIndex = 0\n        var index = 0\n      \
    \  for(i <- 0 until arr.length){\n            if(arr(i) > max){\n            \
    \    max = arr(i)\n                maxIndex = i\n            }\n        }\n  \
    \      for(i <- 0 until arr.length){\n            if(arr(i) == max){\n       \
    \         index += 1\n                if(index == k){\n                    result\
    \ += arr(maxIndex)\n                }\n            }\n        }\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiiljme18.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiiljme18.scala:26:25\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                max = arr(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxValue = arr.max\n        val maxIndex = arr.indexWhere(x => x\
    \ == maxValue)\n        val maxLength = arr.length - maxIndex\n        val maxK\
    \ = math.min(k, maxLength)\n        for (i <- 0 until maxK) {\n            val\
    \ maxIndex = arr.indexWhere(x => x == maxValue)\n            val maxLength = arr.length\
    \ - maxIndex\n            val maxK = math.min(k, maxLength)\n            val maxValue\
    \ = arr.max\n            val maxIndex = arr.indexWhere(x => x == maxValue)\n \
    \           val maxLength = arr.length - maxIndex\n            val maxK = math.min(k,\
    \ maxLength)\n            val maxValue = arr.max\n            val maxIndex = arr.indexWhere(x\
    \ => x == maxValue)\n            val maxLength = arr.length - maxIndex\n     \
    \       val maxK = math.min(k, maxLength)\n            val maxValue = arr.max\n\
    \            val maxIndex = arr.indexWhere(x => x == maxValue)\n            val\
    \ maxLength = arr.length - maxIndex\n            val maxK = math.min(k, maxLength)\n\
    \            val maxValue = arr.max\n            val maxIndex = arr.indexWhere(x\
    \ => x == maxValue)\n            val maxLength = arr.length - maxIndex\n     \
    \       val maxK = math.min(k, maxLength)\n            val maxValue = arr.max\n\
    \            val maxIndex = arr.indexWhere(x => x == maxValue)\n            val\
    \ maxLength = arr.length - maxIndex\n            val maxK = math.min(k, maxLength)\n\
    \            val maxValue = arr.max\n            val maxIndex = arr.indexWhere(x\
    \ => x == maxValue)\n            val maxLength = arr.length - maxIndex\n     \
    \       val maxK = math.min(k, maxLength)\n            val maxValue = arr.max\n\
    \            val maxIndex = arr.indexWhere(x => x == maxValue)\n            val\
    \ maxLength = arr.length - maxIndex\n            val maxK = math.min(k, maxLength)\n\
    \            val maxValue = arr.max\n            val maxIndex = arr.indexWhere(x\
    \ => x == maxValue)\n            val maxLength = arr.length - maxIndex\n     \
    \       val maxK = math.min(k, maxLength)\n            val maxValue = arr.max\n\
    \            val maxIndex = arr.indexWhere(x => x == maxValue)\n            val\
    \ maxLength = arr.length - maxIndex\n            val maxK = math.min(k, maxLength)\n\
    \            val maxValue = arr.max\n            val maxIndex = arr.indexWhere(x\
    \ => x == maxValue)\n            val maxLength = arr.length - maxIndex\n     \
    \       val maxK = \n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpz_usib8s.scala:68:22 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m            \e[33mval\e[0m \e[36mmaxK\e[0m = \n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmpz_usib8s.scala:85:0 ----------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz_usib8s.scala:20:22\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxList\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz_usib8s.scala:25:26\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until maxK) {\n\e[31m\e[31m   |\e[0m                          ^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (maxK : Long)\n\e[31m\
    \   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpz_usib8s.scala:30:16 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x == maxValue)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpz_usib8s.scala:31:16 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m            \e[33mval\e[0m \e[36mmaxLength\e[0m = arr.length - maxIndex\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^"
  stdout: ''
  timestamp: 1659793851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer(arr.take(k))\n\
    \        val maxLength = arr.length\n        val maxLengthMinusOne = maxLength\
    \ - 1\n        val maxLengthMinusOneMinusK = maxLengthMinusOne - k\n        val\
    \ maxLengthMinusOneMinusKMinusOne = maxLengthMinusOneMinusK - 1\n        val maxLengthMinusOneMinusKMinusOneMinusK\
    \ = maxLengthMinusOneMinusKMinusOne - k - 1\n        val maxLengthMinusOneMinusKMinusOneMinusKMinusOne\
    \ = maxLengthMinusOneMinusKMinusOneMinusK - 1\n        val maxLengthMinusOneMinusKMinusOneMinusKMinusOneMinusK\
    \ = maxLengthMinusOneMinusKMinusOneMinusKMinusOne - k - 1 - 1\n        val maxLengthMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOne\
    \ = maxLengthMinusOneMinusKMinusOneMinusKMinusOneMinusK - 1\n        val maxLengthMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOneMinusK\
    \ = maxLengthMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOneMinusK - 1\n  \
    \      val maxLengthMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOne\
    \ = maxLengthMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOne\
    \ - k - 1 - 1 - 1 - 1\n        val maxLengthMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOneMinusK\
    \ = maxLengthMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOneMinusK\
    \ - 1\n        val maxLengthMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOne\
    \ = maxLengthMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOneMinusK\
    \ - 1\n        val maxLengthMinusOneMin\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwymf66n1.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwymf66n1.scala:20:22\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxList\e[0m = mutable.ArrayBuffer(arr.take(k))\n\e[31m\e[31m   |\e[0m   \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwymf66n1.scala:29:80\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxLengthMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOneMinusK\e[0m\
    \ = maxLengthMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOneMinusK - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   \
    \                             ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m\
    \ \e[35mmaxLengthMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOneMinusK\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwymf66n1.scala:30:88\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxLengthMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOne\e\
    [0m = maxLengthMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOne\
    \ - k - \e[31m1\e[0m - \e[31m1\e[0m - \e[31m1\e[0m - \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                     ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mmaxLengthMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOneMinusKMinusOne\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwymf66n1.scala:31:94\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxLengthMinusOneMinusKMinusOneMinusKMinusOneMinusKMinu"
  stdout: ''
  timestamp: 1659793850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new Array[Long](k)\n\
    \        val maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap29 = new mutable.HashMap[Long,\
    \ Int]\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_jbeli04.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_jbeli04.scala:21:38 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e[0m \e[35mArray\e\
    [0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m                                \
    \      ^\e[0m\n\e[31m   |\e[0m                                      Found:   \
    \ (k : Long)\n\e[31m   |\e[0m                                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jbeli04.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jbeli04.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_jbeli04.scala:24:31 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1659793814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val max = arr.take(k).toList\n        val rest = arr.drop(k)\n      \
    \  rest match {\n            case Nil => max\n            case _ => maximum(max,\
    \ rest.max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6wfx5brs.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(-_)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793817
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(x =>\
    \ x)\n        val max = new Array[Long](k)\n        var i = 0\n        while(i\
    \ < k) {\n            if(arr(i) > arr(i + 1)) {\n                max(i) = arr(i)\n\
    \                i += 1\n            } else {\n                max(i) = arr(i\
    \ + 1)\n                i += 1\n            }\n        }\n        max.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxtf3exqa.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e\
    [0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxtf3exqa.scala:21:34\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0L\n        var maxIndex = 0\n        var i = 0\n        while\
    \ (i < arr.length) {\n            if (arr(i) > max) {\n                max = arr(i)\n\
    \                maxIndex = i\n            }\n            i += 1\n        }\n\
    \        var j = 0\n        while (j < arr.length) {\n            if (arr(j) <\
    \ max) {\n                result.add(arr(j))\n                j += 1\n       \
    \     } else {\n                result.add(max)\n                result.add(maxIndex)\n\
    \                max = arr(j)\n                maxIndex = j\n            }\n \
    \       }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcqjotd31.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new Array[Long](k)\n\
    \        var max = 0L\n        var index = 0\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) > max) {\n                max = arr(i)\n         \
    \       index = i\n            }\n        }\n        result(index) = max\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7lcqrn8c.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp7lcqrn8c.scala:30:8 ---------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val maxValue = arr.max\n        val maxIndex = arr.indexWhere(x => x\
    \ == maxValue)\n        val maxIndexList = arr.take(maxIndex).toList\n       \
    \ val maxIndexListSize = maxIndexList.length\n        val maxIndexListSize = maxIndexListSize\
    \ - 1\n        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppp_lj91u.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListSize\e[0m =\
    \ maxIndexListSize - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListSize is already defined as \e[33mvalue\e[0m \e\
    [35mmaxIndexListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmppp_lj91u.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListSize\e[0m =\
    \ maxIndexListSize - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListSize is already defined as \e[33mvalue\e[0m \e\
    [35mmaxIndexListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmppp_lj91u.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListSize\e[0m =\
    \ maxIndexListSize - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListSize is already defined as \e[33mvalue\e[0m \e\
    [35mmaxIndexListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmppp_lj91u.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListSize\e[0m =\
    \ maxIndexListSize - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListSize is already defined as \e[33mvalue\e[0m \e\
    [35mmaxIndexListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmppp_lj91u.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxInd"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxListSize = mutable.ArrayBuffer.empty[Long]\n        val maxListIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxListSize = arr.length\n  \
    \      val maxListIndex = arr.indices\n        val maxListSize = arr.length\n\
    \        val maxListIndex = arr.indices\n        var maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxListSize = mutable.ArrayBuffer.empty[Long]\n        var maxListIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        var maxListSize = arr.length\n  \
    \      var maxListIndex = arr.indices\n        var maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxListSize = mutable.ArrayBuffer.empty[Long]\n        var maxListIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        var maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxListSize = arr.length\n        var maxListIndex = arr.indices\n\
    \        var maxList = mutable.ArrayBuffer.empty[Long]\n        var maxListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        var maxListIndex = arr.indices\n\
    \        var maxList = mutable.ArrayBuffer.empty[Long]\n        var maxListSize\
    \ = arr.length\n        var maxListIndex = arr.indices\n        var maxList =\
    \ mutable.ArrayBuffer.empty[Long]\n        var maxListSize = arr.length\n    \
    \    var maxListIndex = arr.indices\n        var maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxListSize = arr.length\n        var maxListIndex = arr.indices\n\
    \        var maxList = mutable.ArrayBuffer.empty[Long]\n        var maxListSize\
    \ = arr.length\n        var maxListIndex = arr.indices\n        var maxList =\
    \ mutable.ArrayBuffer.empty[Long]\n        var maxListSize = arr.length\n    \
    \    var maxListIndex = arr.indices\n        var maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxListSize = arr.length\n        var maxListIndex = arr.indices\n\
    \        var maxList = mutable.ArrayBuffer.empty[Long]\n        var maxListSize\
    \ = arr.length\n        var maxListIndex = arr.indices\n        var maxList =\
    \ mutable.ArrayBuffer.empty[Long]\n        var maxListSize = arr.length\n    \
    \    var maxListIndex = arr.indices\n        var maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxListSize = arr.length\n        var maxListIndex = arr.indices\n\
    \        var maxList = mutable.ArrayBuffer.empty[Long]\n        var maxListSize\
    \ = arr.length\n        var maxListIndex = arr.indices\n        var maxList =\
    \ mutable.ArrayBuffer.empty[Long]\n        var maxListSize = arr.length\n    \
    \    var maxListIndex = arr.indices\n        var maxList = mutable.\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvixv1mo8.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpvixv1mo8.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxListSize\e[0m = arr.length\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxListSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxListSize\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvixv1mo8.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxListIndex\e[0m = arr.indices\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxListIndex is already defined as \e[33mvalue\e[0m \e[35mmaxListIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvixv1mo8.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxListSize\e[0m = arr.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxListSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxListSize\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvixv1mo8.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxListIndex\e[0m = arr.indices\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxListIndex is already defined as \e[33mvalue\e[0m \e[35mmaxListIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvixv1mo8.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mva"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        var maxNum = arr(0)\n        for(i <- 0 until arr.length) {\n       \
    \     if(arr(i) > maxNum) {\n                maxNum = arr(i)\n            }\n\
    \        }\n        for(i <- 0 until arr.length) {\n            if(arr(i) == maxNum)\
    \ {\n                maxList += arr(i)\n            }\n        }\n        if(maxList.length\
    \ < k) {\n            for(i <- 0 until k - maxList.length) {\n               \
    \ maxList += maxNum\n            }\n        }\n        maxList.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpboxtp790.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.size\n        val max = new Array[Long](k)\n        var maxIndex\
    \ = 0\n        var maxVal = arr(0)\n        var i = 0\n        while (i < len)\
    \ {\n            if (arr(i) > maxVal) {\n                maxIndex = i\n      \
    \          maxVal = arr(i)\n            }\n            i += 1\n        }\n   \
    \     val result = new Array[Long](k)\n        var j = 0\n        while (j < k)\
    \ {\n            result(j) = arr(maxIndex)\n            j += 1\n        }\n  \
    \      result\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpydwxk4st.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpydwxk4st.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpydwxk4st.scala:33:37\
    \ --------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpydwxk4st.scala:39:8 ---------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new Array[Long](k)\n\
    \        val maxIndex = new Array[Int](k)\n        val maxIndexSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSet\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong,\
    \ 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb4750gbm.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb4750gbm.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndexSetSetSetSet\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexSetSetSetSet is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxIndexSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpb4750gbm.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexSetSetSetSetSet\e\
    [0m = \e[33mnew\e[0m mutable.HashSet[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxIndexSetSetSetSetSet is already defined as \e[33mvalue\e[0m \e[35mmaxIndexSetSetSetSetSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb4750gbm.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexSetSetSetSetSet\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mmaxIndexSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb4750gbm.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexSetSetSetSetSet\e\
    [0m = \e[33mnew\e[0m mutable.HashSet[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659793853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndex = mutable.ArrayBuffer.empty[Int]\n        val maxValue =\
    \ mutable.ArrayBuffer.empty[Long]\n        val maxIndexList = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxValueList = mutable.ArrayBuffer.empty[Long]\n        for(i <-\
    \ 0 until arr.length) {\n            val currentValue = arr(i)\n            val\
    \ currentIndex = i\n            val currentMax = currentValue\n            val\
    \ currentMaxIndex = i\n            val currentMaxValue = currentValue\n      \
    \      for(j <- 0 until arr.length) {\n                if(j != i) {\n        \
    \            val currentValue2 = arr(j)\n                    val currentIndex2\
    \ = j\n                    val currentMax2 = currentValue2\n                 \
    \   val currentMaxIndex2 = j\n                    val currentMaxValue2 = currentValue2\n\
    \                    if(currentMax2 < currentMax) {\n                        currentMax\
    \ = currentMax2\n                        currentMaxIndex = currentMaxIndex2\n\
    \                        currentMaxValue = currentMaxValue2\n                \
    \    }\n                    if(currentMaxIndex2 < currentMaxIndex) {\n       \
    \                 currentMaxIndex = currentMaxIndex2\n                       \
    \ currentMaxValue = currentMaxValue2\n                    }\n                \
    \    if(currentMaxValue2 < currentMaxValue) {\n                        currentMaxValue\
    \ = currentMaxValue2\n                    }\n                }\n            }\n\
    \            maxList += currentMax\n            maxIndex += currentMaxIndex\n\
    \            maxValue += currentMaxValue\n            maxIndexList += currentMaxIndex\n\
    \            maxValueList += currentMaxValue\n        }\n        val maxList2\
    \ = maxList.sortWith(_ < _)\n        val maxIndex2 = maxIndex.sortWith(_ < _)\n\
    \        val maxValue2 = maxValue.sortWith(_ < _)\n        val maxIndexList2 =\
    \ maxIndexList.sortWith(_ < _)\n        val maxValueList2 = maxValueList.sortWith(_\
    \ < _)\n        val result = new ArrayList[Long](k)\n        for(i <- 0 until\
    \ k) {\n            result(i) = maxList2(i)\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppxb5u5ry.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppxb5u5ry.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppxb5u5ry.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxValue\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppxb5u5ry.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppxb5u5ry.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxValueList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmppxb5u5ry.scala:39:35 ------------------"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxValue = arr.head\n        val maxIndex = arr.indexOfMax\n    \
    \    for(i <- 0 until arr.length){\n            if(arr(i) > maxValue){\n     \
    \           maxValue = arr(i)\n                maxIndex = i\n            }\n \
    \       }\n        maxList += maxValue\n        for(i <- 0 until maxIndex){\n\
    \            arr(i) = arr(i) - maxValue\n            val temp = arr.take(i)\n\
    \            arr(i) = maxValue\n            maxList += temp\n        }\n     \
    \   arr\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2hqattk1.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp2hqattk1.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmp2hqattk1.scala:25:25 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                maxValue = arr(i)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxValue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp2hqattk1.scala:26:25\
    \ -----------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                maxIndex\
    \ = i\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Reassignment to val maxIndex\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp2hqattk1.scala:31:12 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            arr(i) = arr(i) - maxValue\n\e[31m\e[31m\
    \   |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m  value update is not a member\
    \ of List[Long] - did you mean arr.updated?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp2hqattk1.scala:33:12 ------------------------\e[0m\e[0m\n\e[31m33 |\e\
    [0m            arr(i) = maxValue\n\e[31m\e[31m   |\e[0m            ^^^\e[0m\n\e\
    [31m   |\e[0m  value update is not a member of List[Long] - did you mean arr.updated?\n\
    6 errors found\n"
  stdout: ''
  timestamp: 1659793853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val max = arr.take(k).toList\n        val rest = arr.drop(k)\n      \
    \  rest match {\n            case Nil => max\n            case _ => maximum(max,\
    \ rest.max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6wfx5brs.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(-_)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793817
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ i = 0\n        while (i < k) {\n            if (arr(i) > arr(i + 1)) {\n   \
    \             val temp = arr(i)\n                arr(i) = arr(i + 1)\n       \
    \         arr(i + 1) = temp\n            }\n            i += 1\n        }\n  \
    \      arr.take(k).reverse\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpajew9t8u.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(-_)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpajew9t8u.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new Array[Long](k)\n\
    \        var max = 0L\n        var maxIndex = 0\n        for(i <- 0 until arr.length)\
    \ {\n            if(arr(i) > max) {\n                max = arr(i)\n          \
    \      maxIndex = i\n            }\n        }\n        for(i <- 0 until k) {\n\
    \            result(i) = arr(maxIndex)\n        }\n        result\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgqf_gjs6.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpgqf_gjs6.scala:29:25 --------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until k) {\n\e[31m\e[31m   |\e\
    [0m                         ^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (k : Long)\n\e[31m   |\e[0m                         Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgqf_gjs6.scala:32:8 ---------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m\
    \        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxK = k\n        val maxIndex = arr.length\n        val maxValue\
    \ = arr(0)\n        for(i <- 0 until maxIndex){\n            val currentValue\
    \ = arr(i)\n            if(currentValue > maxValue){\n                maxValue\
    \ = currentValue\n                maxList.clear()\n            }\n           \
    \ if(currentValue == maxValue){\n                maxList += currentValue\n   \
    \         }\n        }\n        if(maxList.size == maxK){\n            return\
    \ maxList\n        }\n        val maxList2 = mutable.ListBuffer.empty[Long]\n\
    \        val maxK2 = k\n        val maxIndex2 = arr.length\n        val maxValue2\
    \ = arr(0)\n        for(i <- 0 until maxIndex2){\n            val currentValue2\
    \ = arr(i)\n            if(currentValue2 > maxValue2){\n                maxValue2\
    \ = currentValue2\n                maxList2.clear()\n            }\n         \
    \   if(currentValue2 == maxValue2){\n                maxList2 += currentValue2\n\
    \            }\n        }\n        if(maxList2.size == maxK2){\n            return\
    \ maxList2\n        }\n        val maxList3 = mutable.ListBuffer.empty[Long]\n\
    \        val maxK3 = k\n        val maxIndex3 = arr.length\n        val maxValue3\
    \ = arr(0)\n        for(i <- 0 until maxIndex3){\n            val currentValue3\
    \ = arr(i)\n            if(currentValue3 > maxValue3){\n                maxValue3\
    \ = currentValue3\n                maxList3.clear()\n            }\n         \
    \   if(currentValue3 == maxValue3){\n                maxList3 += currentValue3\n\
    \            }\n        }\n        if(maxList3.size == maxK3){\n            return\
    \ maxList3\n        }\n        val maxList4 = mutable.ListBuffer.empty[Long]\n\
    \        val maxK4 = k\n        val maxIndex4 = arr.length\n        val maxValue4\
    \ = arr(0)\n        for(i <- 0 until maxIndex4){\n            val currentValue4\
    \ = arr(i)\n            if(currentValue4 > maxValue4){\n                maxValue4\
    \ = currentValue4\n                maxList4.clear()\n            }\n         \
    \   if(currentValue4 == maxValue4){\n                maxList4 += currentValue4\n\
    \            }\n        }\n        if(maxList4.size == maxK4){\n            return\
    \ maxList4\n        }\n        val maxList5 = mutable.ListBuffer.empty[Long]\n\
    \        val maxK5 = k\n        val maxIndex5 = arr.length\n        val maxValue5\
    \ = arr(0)\n        for(i <- 0 until \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpd0y575cn.scala:92:24 ---------------------------\e\
    [0m\e[0m\n\e[31m92 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until \n\e[31m\e\
    [31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                 \
    \       expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpd0y575cn.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpd0y575cn.scala:27:25 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                maxValue = currentValue\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          Reassignment to val maxValue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpd0y575cn.scala:37:23 ------------------------\e[0m\e\
    [0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mmaxList2\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpd0y575cn.scala:44:26 -----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m                maxValue2 = currentValue2\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \            Reassignment to val maxValue2\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpd0y575cn.scala:54:23 ------------------------\e[0m\e\
    [0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \e[36mmaxList3\e[0m = mutable.ListBuffer.empt"
  stdout: ''
  timestamp: 1659793853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val max = new mutable.PriorityQueue[Long]()\n        val maxIndex = new\
    \ mutable.PriorityQueue[Int]()\n        val maxIndexMap = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap3 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap7 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap11 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap15 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap19 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap23 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap27 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Int, Int]()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpiidj6ueq.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(-_)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpiidj6ueq.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiidj6ueq.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndex\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpiidj6ueq.scala:23:30 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpiidj6ueq.scala:24:31 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] "
  stdout: ''
  timestamp: 1659793853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new Array[Long](k)\n\
    \        var max = 0L\n        var i = 0\n        while (i < arr.length) {\n \
    \           if (arr(i) > max) {\n                max = arr(i)\n            }\n\
    \            i += 1\n        }\n        var j = 0\n        while (j < k) {\n \
    \           if (max < result[j]) {\n                result(j) = max\n        \
    \    }\n            j += 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv2beeote.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpv2beeote.scala:31:29 ------------------------\e[0m\e[0m\n\e[31m31 |\e\
    [0m            \e[33mif\e[0m (max < result[\e[35mj\e[0m]) {\n\e[31m\e[31m   |\e\
    [0m                             ^\e[0m\n\e[31m   |\e[0m                      \
    \       Not found: type j\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpv2beeote.scala:36:8 ---------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Long]()\n        val maxIndexMap\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap2 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap3 = new mutable.HashMap[Long, Long]()\n    \
    \    val maxIndexMap4 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap5\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap6 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap7 = new mutable.HashMap[Long, Long]()\n    \
    \    val maxIndexMap8 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap9\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap10 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap11 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap12 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap13\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap14 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap15 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap16 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap17\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap18 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap19 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap20 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap21\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap22 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap23 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap24 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap25\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap26 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap27 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap28 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap29\
    \ = new mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplyi9bs0r.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmplyi9bs0r.scala:20:22 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmplyi9bs0r.scala:21:27 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e\
    [0m mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m          \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplyi9bs0r.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmplyi9bs0r.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmplyi9bs0r.scala:24:31 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e"
  stdout: ''
  timestamp: 1659793813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new Array[Long](k)\n\
    \        var max = 0L\n        var maxIndex = 0\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) > max) {\n                max = arr(i)\n         \
    \       maxIndex = i\n            }\n        }\n        for (i <- 0 until k) {\n\
    \            result(i) = arr(maxIndex)\n            maxIndex += 1\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyh3_vufi.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpyh3_vufi.scala:29:26 --------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until k) {\n\e[31m\e[31m   |\e\
    [0m                          ^\e[0m\n\e[31m   |\e[0m                         \
    \ Found:    (k : Long)\n\e[31m   |\e[0m                          Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyh3_vufi.scala:33:8\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new Array[Long](k)\n\
    \        var max = 0L\n        var maxIndex = 0\n        var index = 0\n     \
    \   for(i <- 0 until arr.length) {\n            if(max < arr(i)) {\n         \
    \       max = arr(i)\n                maxIndex = i\n            }\n        }\n\
    \        for(i <- 0 until arr.length) {\n            if(arr(i) == max) {\n   \
    \             result(index) = arr(i)\n                index += 1\n           \
    \ }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9zg6axpx.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9zg6axpx.scala:36:8 ---------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val max = new mutable.PriorityQueue[Long]()\n        val maxIndex = new\
    \ mutable.PriorityQueue[Long]()\n        val maxValue = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndexValue = new mutable.PriorityQueue[Long]()\n        val maxIndexValue2\
    \ = new mutable.PriorityQueue[Long]()\n        val maxIndexValue3 = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndexValue4 = new mutable.PriorityQueue[Long]()\n        val maxIndexValue5\
    \ = new mutable.PriorityQueue[Long]()\n        val maxIndexValue6 = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndexValue7 = new mutable.PriorityQueue[Long]()\n        val maxIndexValue8\
    \ = new mutable.PriorityQueue[Long]()\n        val maxIndexValue9 = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndexValue10 = new mutable.PriorityQueue[Long]()\n        val\
    \ maxIndexValue11 = new mutable.PriorityQueue[Long]()\n        val maxIndexValue12\
    \ = new mutable.PriorityQueue[Long]()\n        val maxIndexValue13 = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndexValue14 = new mutable.PriorityQueue[Long]()\n        val\
    \ maxIndexValue15 = new mutable.PriorityQueue[Long]()\n        val maxIndexValue16\
    \ = new mutable.PriorityQueue[Long]()\n        val maxIndexValue17 = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndexValue18 = new mutable.PriorityQueue[Long]()\n        val\
    \ maxIndexValue19 = new mutable.PriorityQueue[Long]()\n        val maxIndexValue20\
    \ = new mutable.PriorityQueue[Long]()\n        val maxIndexValue21 = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndexValue22 = new mutable.PriorityQueue[Long]()\n        val\
    \ maxIndexValue23 = new mutable.PriorityQueue[Long]()\n        val maxIndexValue24\
    \ = new mutable.PriorityQueue[Long]()\n        val maxIndexValue25 = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndexValue26 = new mutable.PriorityQueue[Long]()\n        val\
    \ maxIndexValue27 = new mutable.PriorityQueue[Long]()\n        val maxIndexValue28\
    \ = new mutable.PriorityQueue[Long]()\n        val maxIndexValue29 = new mutable.Priority\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp86jfrg8l.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp86jfrg8l.scala:21:22\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp86jfrg8l.scala:22:27 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp86jfrg8l.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxValue\e[0m = \e[33mnew\e\
    [0m mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m          \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp86jfrg8l.scala:24:32\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexValue\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m--"
  stdout: ''
  timestamp: 1659793855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(x =>\
    \ x)\n        val max = arr.take(k).toList\n        val rest = arr.drop(k)\n \
    \       rest match {\n            case Nil => max\n            case x :: xs =>\
    \ maximum(x :: xs, k)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpam912ct0.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e\
    [0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpam912ct0.scala:25:41\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mcase\e\
    [0m x :: xs => maximum(x :: xs, k)\n\e[31m\e[31m   |\e[0m                    \
    \                     ^^\e[0m\n\e[31m   |\e[0m                               \
    \          Not found: xs\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer(arr)\n\
    \        val maxLength = arr.length\n        val maxLengthK = maxLength - k\n\
    \        val maxLengthKList = maxList.take(maxLengthK).toList\n        val maxLengthKListLength\
    \ = maxLengthKList.length\n        val maxLengthKListLength = maxLengthKListLength\
    \ - 1\n        val maxLengthKListLength = maxLengthKListLength - 1\n        val\
    \ maxLengthKListLength = maxLengthKListLength - 1\n        val maxLengthKListLength\
    \ = maxLengthKListLength - 1\n        val maxLengthKListLength = maxLengthKListLength\
    \ - 1\n        val maxLengthKListLength = maxLengthKListLength - 1\n        val\
    \ maxLengthKListLength = maxLengthKListLength - 1\n        val maxLengthKListLength\
    \ = maxLengthKListLength - 1\n        val maxLengthKListLength = maxLengthKListLength\
    \ - 1\n        val maxLengthKListLength = maxLengthKListLength - 1\n        val\
    \ maxLengthKListLength = maxLengthKListLength - 1\n        val maxLengthKListLength\
    \ = maxLengthKListLength - 1\n        val maxLengthKListLength = maxLengthKListLength\
    \ - 1\n        val maxLengthKListLength = maxLengthKListLength - 1\n        val\
    \ maxLengthKListLength = maxLengthKListLength - 1\n        val maxLengthKListLength\
    \ = maxLengthKListLength - 1\n        val maxLengthKListLength = maxLengthKListLength\
    \ - 1\n        val maxLengthKListLength = maxLengthKListLength - 1\n        val\
    \ maxLengthKListLength = maxLengthKListLength - 1\n        val maxLengthKListLength\
    \ = maxLengthKListLength - 1\n        val maxLengthKListLength = maxLengthKListLength\
    \ - 1\n        val maxLengthKListLength = maxLengthKListLength - 1\n        val\
    \ maxLengthKListLength = maxLengthKListLength - 1\n        val maxLengthKListLength\
    \ = maxLengthKListLength - 1\n        val maxLengthKListLength = maxLengthKListLength\
    \ - 1\n        val maxLengthKListLength = maxLengthKListLength - 1\n        val\
    \ maxLengthKListLength = maxLengthKListLength - 1\n        val maxLengthKListLength\
    \ = maxLengthKListLength - 1\n        val maxLengthKListLength = maxLengthKListLength\
    \ - 1\n        val maxLengthKListLength = maxLengthKListLength - 1\n        val\
    \ maxLengthKListLength = maxLengthKListLength - 1\n        val maxLengthKListLength\
    \ = maxLengthKListLength - 1\n        val maxLengthKListLength = \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmprudy4dn8.scala:57:34 ---------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m        \e[33mval\e[0m \e[36mmaxLengthKListLength\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprudy4dn8.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxLengthKListLength\e[0m = maxLengthKListLength - \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxLengthKListLength is already defined as \e[33mvalue\e[0m \e\
    [35mmaxLengthKListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprudy4dn8.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxLengthKListLength\e[0m\
    \ = maxLengthKListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLengthKListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxLengthKListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprudy4dn8.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxLengthKListLength\e[0m\
    \ = maxLengthKListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLengthKListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxLengthKListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprudy4dn8.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxLengt"
  stdout: ''
  timestamp: 1659793855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxValue = arr(0)\n        var maxIndex = 0\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) > maxValue) {\n                maxValue\
    \ = arr(i)\n                maxIndex = i\n            }\n        }\n        maxList\
    \ += maxValue\n        val newList = arr.take(maxIndex+1).drop(maxIndex).take(k).toList\n\
    \        newList.sortWith(_ > _)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi9orfmxl.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpi9orfmxl.scala:30:63 --------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = arr.take(maxIndex+\e\
    [31m1\e[0m).drop(maxIndex).take(k).toList\n\e[31m\e[31m   |\e[0m             \
    \                                                  ^\e[0m\n\e[31m   |\e[0m   \
    \                                                 Found:    (k : Long)\n\e[31m\
    \   |\e[0m                                                    Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0L\n        var i = 0\n        while (i < arr.length) {\n \
    \           if (arr(i) > max) {\n                max = arr(i)\n            }\n\
    \            i += 1\n        }\n        var j = 0\n        while (j < arr.length)\
    \ {\n            if (arr(j) < max) {\n                result.add(arr(j))\n   \
    \         }\n            j += 1\n        }\n        result.take(k).toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6f9_nzm.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new Array[Long](k)\n\
    \        var maxIndex = 0\n        var maxValue = arr(0)\n        for(i <- 0 until\
    \ arr.length) {\n            if(arr(i) > maxValue) {\n                maxValue\
    \ = arr(i)\n                maxIndex = i\n            }\n        }\n        for(i\
    \ <- 0 until k) {\n            max(i) = arr(maxIndex)\n        }\n        return\
    \ max\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe2uwnkcw.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpe2uwnkcw.scala:29:25 --------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until k) {\n\e[31m\e[31m   |\e\
    [0m                         ^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (k : Long)\n\e[31m   |\e[0m                         Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe2uwnkcw.scala:32:15 --------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mreturn\e[0m max\n\e[31m\e[31m   |\e[0m\
    \               ^^^\e[0m\n\e[31m   |\e[0m               Found:    (max : Array[Long])\n\
    \e[31m   |\e[0m               Required: List[Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val max = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n\
    \        var maxIndexIndex = 0\n        var i = 0\n        while (i < k) {\n \
    \           if (arr(i) > arr(i + 1)) {\n                max(i) = arr(i)\n    \
    \            maxIndex(i) = i\n                maxIndexIndex = i\n            }\n\
    \            i += 1\n        }\n        var j = 0\n        while (j < k) {\n \
    \           if (maxIndexIndex == j) maxIndex(j) = 0\n            else {\n    \
    \            if (arr(maxIndexIndex) < arr(j)) {\n                    maxIndex(j)\
    \ = 0\n                } else {\n                    maxIndex(j) = 1\n       \
    \         }\n            }\n            j += 1\n        }\n        val result\
    \ = new Array[Long](k)\n        var k = 0\n        while (k <= maxIndex.length\
    \ - 1) {\n            result(k) = arr(maxIndex(k))\n            k += 1\n     \
    \   }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmgolqqn8.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(-_)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmgolqqn8.scala:51:8 ---------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m\
    \        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxLength = arr.length\n        val maxK = k\n        val maxIndex\
    \ = arr.indexWhere(x => x >= 0)\n        val maxValue = arr.max\n        val maxIndexList\
    \ = arr.toList.sortWith(_ < _)\n        val maxIndexListLength = maxIndexList.length\n\
    \        val maxIndexListLength = maxIndexListLength - maxK\n        val maxIndexListLength\
    \ = maxIndexListLength + 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdeq0g5v4.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdeq0g5v4.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndexListLength\e[0m = maxIndexListLength - maxK\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmaxIndexListLength is already defined as \e[33mvalue\e[0m \e[35mmaxIndexListLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdeq0g5v4.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListLength\e[0m = maxIndexListLength\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxIndexListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpdeq0g5v4.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListLength\e[0m\
    \ = maxIndexListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxIndexListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpdeq0g5v4.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListLength\e[0m\
    \ = maxIndexListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxIndexListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1659793856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortWith(_ <\
    \ _)\n        val max = new Array[Long](k)\n        var i = 0\n        var j =\
    \ 0\n        var maxIndex = 0\n        while(i < arr.length && j < k) {\n    \
    \        if(arr(i) > arr(j)) {\n                max(i) = arr(i)\n            \
    \    i += 1\n            } else {\n                max(j) = arr(j)\n         \
    \       j += 1\n            }\n        }\n        while(i < arr.length) {\n  \
    \          max(i) = arr(i)\n            i += 1\n        }\n        while(j < k)\
    \ {\n            max(j) = arr(j)\n            j += 1\n        }\n        max.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmps2rjdqip.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m       \
    \           Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps2rjdqip.scala:21:34 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Long]()\n        val maxIndexMap\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap2 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap3 = new mutable.HashMap[Long, Long]()\n    \
    \    val maxIndexMap4 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap5\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap6 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap7 = new mutable.HashMap[Long, Long]()\n    \
    \    val maxIndexMap8 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap9\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap10 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap11 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap12 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap13\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap14 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap15 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap16 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap17\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap18 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap19 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap20 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap21\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap22 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap23 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap24 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap25\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap26 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap27 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap28 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap29\
    \ = new mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplyi9bs0r.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmplyi9bs0r.scala:20:22 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmplyi9bs0r.scala:21:27 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e\
    [0m mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m          \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplyi9bs0r.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmplyi9bs0r.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmplyi9bs0r.scala:24:31 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e"
  stdout: ''
  timestamp: 1659793813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new Array[Long](k)\n\
    \        var max = 0\n        var maxIndex = 0\n        var index = 0\n      \
    \  for(i <- 0 until arr.length) {\n            val value = arr(i)\n          \
    \  if(value > max) {\n                max = value\n                maxIndex =\
    \ i\n            }\n        }\n        for(i <- 0 until arr.length) {\n      \
    \      val value = arr(i)\n            if(value == max) {\n                result(index)\
    \ = value\n                index += 1\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8_hr86xq.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp8_hr86xq.scala:27:22 --------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m                max = value\n\e[31m\e[31m   |\e[0m                   \
    \   ^^^^^\e[0m\n\e[31m   |\e[0m                      Found:    (value : Long)\n\
    \e[31m   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp8_hr86xq.scala:38:8 ---------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m\
    \        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val max = new Array[Long](k)\n        var i = 0\n        var j = 0\n\
    \        var maxIndex = 0\n        while (i < arr.length) {\n            if (arr(i)\
    \ > arr(maxIndex)) {\n                maxIndex = i\n            }\n          \
    \  i += 1\n        }\n        val maxList = arr.take(maxIndex)\n        val maxList2\
    \ = arr.drop(maxIndex)\n        val maxList3 = maxList2.sortBy(-_)\n        val\
    \ maxList4 = maxList3.take(k)\n        val maxList5 = maxList3.drop(k)\n     \
    \   val maxList6 = maxList4.sortBy(-_)\n        val maxList7 = maxList6.take(k)\n\
    \        val maxList8 = maxList6.drop(k)\n        val maxList9 = maxList7.sortBy(-_)\n\
    \        val maxList10 = maxList9.take(k)\n        val maxList11 = maxList9.drop(k)\n\
    \        val maxList12 = maxList10.sortBy(-_)\n        val maxList13 = maxList12.take(k)\n\
    \        val maxList14 = maxList12.drop(k)\n        val maxList15 = maxList13.sortBy(-_)\n\
    \        val maxList16 = maxList15.take(k)\n        val maxList17 = maxList15.drop(k)\n\
    \        val maxList18 = maxList16.sortBy(-_)\n        val maxList19 = maxList18.take(k)\n\
    \        val maxList20 = maxList18.drop(k)\n        val maxList21 = maxList19.sortBy(-_)\n\
    \        val maxList22 = maxList21.take(k)\n        val maxList23 = maxList21.drop(k)\n\
    \        val maxList24 = maxList22.sortBy(-_)\n        val maxList25 = maxList24.take(k)\n\
    \        val maxList26 = maxList24.drop(k)\n        val maxList27 = maxList25.sortBy(-_)\n\
    \        val maxList28 = maxList26.take(k)\n        val maxList29 = maxList26.drop(k)\n\
    \        val maxList30 = maxList27.sortBy(-_)\n        val maxList31 = maxList28.take(k)\n\
    \        val maxList32 = maxList28.drop(k)\n        val maxList33 = maxList30.sortBy(-_)\n\
    \        val maxList34 = maxList31.take(k)\n        val maxList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong,\
    \ 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5egypfi0.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5egypfi0.scala:20:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.sortBy(-_)\n\e[31m\e[31m   |\e[0m                  ^\e\
    [0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5egypfi0.scala:21:34\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp5egypfi0.scala:66:5 ---------------------\e[0m\e[0m\n\e[31m66\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val max = new mutable.PriorityQueue[Long]()\n        val min = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        val minIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxCount = new mutable.PriorityQueue[Int]()\n\
    \        val minCount = new mutable.PriorityQueue[Int]()\n        val maxCountIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val minCountIndex = new mutable.PriorityQueue[Int]()\n\
    \        val maxCountMinCount = new mutable.PriorityQueue[Int]()\n        val\
    \ minCountMaxCount = new mutable.PriorityQueue[Int]()\n        val maxCountMinCountIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val minCountMaxCountIndex = new\
    \ mutable.PriorityQueue[Int]()\n        val maxCountMinCountMinCount = new mutable.PriorityQueue[Int]()\n\
    \        val minCountMaxCountMaxCount = new mutable.PriorityQueue[Int]()\n   \
    \     val maxCountMinCountMinCountIndex = new mutable.PriorityQueue[Int]()\n \
    \       val minCountMaxCountMaxCountIndex = new mutable.PriorityQueue[Int]()\n\
    \        val maxCountMinCountMinCountMinCount = new mutable.PriorityQueue[Int]()\n\
    \        val minCountMaxCountMaxCountMaxCount = new mutable.PriorityQueue[Int]()\n\
    \        val maxCountMinCountMinCountMinCountIndex = new mutable.PriorityQueue[Int]()\n\
    \        val minCountMaxCountMaxCountMaxCountIndex = new mutable.PriorityQueue[Int]()\n\
    \        val maxCountMinCountMinCountMinCountMinCount = new mutable.PriorityQueue[Int]()\n\
    \        val minCountMaxCountMaxCountMaxCountMaxCount = new mutable.PriorityQueue[Int]()\n\
    \        val maxCountMinCountMinCountMinCountMinCountIndex = new mutable.PriorityQueue[Int]()\n\
    \        val minCountMaxCountMaxCountMaxCountMaxCountIndex = new mutable.PriorityQueue[Int]()\n\
    \        val maxCountMinCountMinCountMinCountMinCountMinCount = new mutable.PriorityQueue[Int]()\n\
    \        val minCountMaxCountMaxCountMaxCountMaxCountMaxCount = new mutable.PriorityQueue[Int]()\n\
    \        val maxCountMinCountMinCountMinCountMinCountMinCountIndex = new mutable.PriorityQueue[Int]()\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpxb82244_.scala:48:11 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpxb82244_.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxb82244_.scala:21:22\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpxb82244_.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mmin\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpxb82244_.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e\
    [0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxb82244_.scala:24:27\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mminIndex\e[0m = \e"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new mutable.ListBuffer[Long]()\n\
    \        val maxIndex = new mutable.ListBuffer[Int]()\n        val maxIndexCount\
    \ = new mutable.ListBuffer[Int]()\n        val maxIndexCountMap = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexCountMap2 = new mutable.HashMap[Int, Int]()\n  \
    \      val maxIndexCountMap3 = new mutable.HashMap[Int, Int]()\n        val maxIndexCountMap4\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexCountMap5 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexCountMap6 = new mutable.HashMap[Int, Int]()\n  \
    \      val maxIndexCountMap7 = new mutable.HashMap[Int, Int]()\n        val maxIndexCountMap8\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexCountMap9 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexCountMap10 = new mutable.HashMap[Int, Int]()\n \
    \       val maxIndexCountMap11 = new mutable.HashMap[Int, Int]()\n        val\
    \ maxIndexCountMap12 = new mutable.HashMap[Int, Int]()\n        val maxIndexCountMap13\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexCountMap14 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexCountMap15 = new mutable.HashMap[Int, Int]()\n \
    \       val maxIndexCountMap16 = new mutable.HashMap[Int, Int]()\n        val\
    \ maxIndexCountMap17 = new mutable.HashMap[Int, Int]()\n        val maxIndexCountMap18\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexCountMap19 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexCountMap20 = new mutable.HashMap[Int, Int]()\n \
    \       val maxIndexCountMap21 = new mutable.HashMap[Int, Int]()\n        val\
    \ maxIndexCountMap22 = new mutable.HashMap[Int, Int]()\n        val maxIndexCountMap23\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexCountMap24 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexCountMap25 = new mutable.HashMap[Int, Int]()\n \
    \       val maxIndexCountMap26 = new mutable.HashMap[Int, Int]()\n        val\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpta010iux.scala:49:11 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpta010iux.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpta010iux.scala:21:27\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndex\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpta010iux.scala:22:32 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexCount\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpta010iux.scala:23:35\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexCountMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpta010iux.scala:24:36\
    \ ------------------------\e[0m"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        val maxIndexMap\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap3 = new mutable.HashMap[Int, Long]()\n     \
    \   val maxIndexMap4 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap5\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap6 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap7 = new mutable.HashMap[Int, Long]()\n     \
    \   val maxIndexMap8 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap9\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap10 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap11 = new mutable.HashMap[Int, Long]()\n    \
    \    val maxIndexMap12 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap13\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap14 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap15 = new mutable.HashMap[Int, Long]()\n    \
    \    val maxIndexMap16 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap17\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap18 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap19 = new mutable.HashMap[Int, Long]()\n    \
    \    val maxIndexMap20 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap21\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap22 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap23 = new mutable.HashMap[Int, Long]()\n    \
    \    val maxIndexMap24 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap25\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap26 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap27 = new mutable.HashMap[Int, Long]()\n    \
    \    val maxIndexMap28 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap29\
    \ = new mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3e3uopf1.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp3e3uopf1.scala:20:22 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp3e3uopf1.scala:21:27 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e\
    [0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3e3uopf1.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp3e3uopf1.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp3e3uopf1.scala:24:31 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxLength = arr.length\n        val maxK = k\n        val maxElement\
    \ = arr.max\n        val maxIndex = arr.indexWhere(x => x == maxElement)\n   \
    \     val maxIndex = maxIndex.toInt\n        val maxElementIndex = maxIndex -\
    \ k\n        val maxElement = arr(maxIndex)\n        val maxElementIndex = maxElementIndex.toInt\n\
    \        val maxElementIndex = maxElementIndex + 1\n        val maxElementIndex\
    \ = maxElementIndex - 1\n        val maxElementIndex = maxElementIndex - 1\n \
    \       val maxElementIndex = maxElementIndex - 1\n        val maxElementIndex\
    \ = maxElementIndex - 1\n        val maxElementIndex = maxElementIndex - 1\n \
    \       val maxElementIndex = maxElementIndex - 1\n        val maxElementIndex\
    \ = maxElementIndex - 1\n        val maxElementIndex = maxElementIndex - 1\n \
    \       val maxElementIndex = maxElementIndex - 1\n        val maxElementIndex\
    \ = maxElementIndex - 1\n        val maxElementIndex = maxElementIndex - 1\n \
    \       val maxElementIndex = maxElementIndex - 1\n        val maxElementIndex\
    \ = maxElementIndex - 1\n        val maxElementIndex = maxElementIndex - 1\n \
    \       val maxElementIndex = maxElementIndex - 1\n        val maxElementIndex\
    \ = maxElementIndex - 1\n        val maxElementIndex = maxElementIndex - 1\n \
    \       val maxElementIndex = maxElementIndex - 1\n        val maxElementIndex\
    \ = maxElementIndex - 1\n        val maxElementIndex = maxElementIndex - 1\n \
    \       val maxElementIndex = maxElementIndex - 1\n        val maxElementIndex\
    \ = maxElementIndex - 1\n        val maxElementIndex = maxElementIndex - 1\n \
    \       val maxElementIndex = maxElementIndex - 1\n        val maxElementIndex\
    \ = maxElementIndex - 1\n        val maxElementIndex = maxElementIndex - 1\n \
    \       val maxElementIndex = maxElementIndex - 1\n        val maxElementIndex\
    \ = maxElementIndex - 1\n        val maxElementIndex = maxElementIndex - 1\n \
    \       val maxElementIndex = maxElementIndex - 1\n        val maxElementIndex\
    \ = maxElementIndex - 1\n        val maxElementIndex = maxElementIndex - 1\n \
    \       val maxElementIndex = maxElementIndex - 1\n        val maxElementIndex\
    \ = maxElementIndex - 1\n        val maxElementIndex = maxElementIndex - 1\n \
    \       val maxElementIndex = maxElementIndex - 1\n        val maxElementIndex\
    \ = maxElementIndex - 1\n        val maxElementIndex = maxElementIndex - 1\n \
    \       val maxElementIndex = maxElementIndex - 1\n        val maxElementIndex\
    \ = maxElementIndex - 1\n        val maxElementIndex = maxElementIndex - 1\n \
    \       val \n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpfe1nujbx.scala:71:11 ---------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpfe1nujbx.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = maxIndex.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpfe1nujbx.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxElement\e[0m = arr(maxIndex)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxElement\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxElement\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfe1nujbx.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxElementIndex\e[0m = maxElementIndex.toInt\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxElementIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxElementIndex\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfe1nujbx.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxElementIndex\e[0m = maxElementIndex + \e[31m1\e[0m\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxElementIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxElementIndex\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in th"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new Array[Long](k)\n\
    \        val max = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n\
    \        val maxIndexSet = new HashSet[Int]()\n        val maxIndexSetSet = new\
    \ HashSet[Int]()\n        val maxIndexSetSetSet = new HashSet[Int]()\n       \
    \ val maxIndexSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new HashSet[Int]()\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8qjrjxfr.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexSetSetSetSet\e[0m\
    \ = \e[33mnew\e[0m \e[35mHashSet\e[0m[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxIndexSetSetSetSet\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxIndexSetSetSetSet\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8qjrjxfr.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndexSetSetSetSetSet\e[0m = \e[33mnew\e\
    [0m \e[35mHashSet\e[0m[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mmaxIndexSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8qjrjxfr.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexSetSetSetSetSet\e\
    [0m = \e[33mnew\e[0m \e[35mHashSet\e[0m[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmaxIndexSetSetSetSetSet is already defined as \e[33mvalue\e[0m \e[35mmaxIndexSetSetSetSetSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8qjrjxfr.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexSetSetSetSetSet\e[0m = \e[33mnew\e\
    [0m \e[35mHashSet\e[0m[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mmaxIndexSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel "
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3,\
    \ 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxValue = arr.head\n        val maxIndex = arr.indexOfMax\n    \
    \    for(i <- 0 until arr.length){\n            if(arr(i) > maxValue){\n     \
    \           maxValue = arr(i)\n                maxIndex = i\n            }\n \
    \       }\n        maxList += maxValue\n        val newList = arr.drop(maxIndex\
    \ + 1)\n        val newMaxList = newList.take(k)\n        newMaxList += maxValue\n\
    \        newMaxList\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4llkddnw.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp4llkddnw.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmp4llkddnw.scala:25:25 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                maxValue = arr(i)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxValue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp4llkddnw.scala:26:25\
    \ -----------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                maxIndex\
    \ = i\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Reassignment to val maxIndex\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp4llkddnw.scala:31:38 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mnewMaxList\e[0m = newList.take(k)\n\
    \e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e\
    [0m                                      Found:    (k : Long)\n\e[31m   |\e[0m\
    \                                      Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp4llkddnw.scala:32:19 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        newMaxList += maxValue\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  "
  stdout: ''
  timestamp: 1659793858
