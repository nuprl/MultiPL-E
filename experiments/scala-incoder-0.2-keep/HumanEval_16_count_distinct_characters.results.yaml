language: scala
name: HumanEval_16_count_distinct_characters
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj7zg8b7g.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        distinctChars.size\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue size is not a member of java.util.stream.IntStream\
    \ - did you mean distinctChars.skip?\n1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toUpperCase).distinct\n\
    \        chars.count(_ == string.charAt(0))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe4xq99up.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(_.toUpperCase).distinct\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value toUpperCase is not a member of\
    \ Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.distinct\n        chars.foldLeft(0)((acc,\
    \ c) => acc + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp14qbo1n7.scala:16)\n\tat Problem.main(tmp14qbo1n7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.distinct\n        val charCount\
    \ = chars.toSet.size\n        charCount\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw0p4lted.scala:17)\n\tat Problem.main(tmpw0p4lted.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size + 1\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp38kiahf_.scala:14)\n\tat Problem.main(tmp38kiahf_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size * (chars.size + 1)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6r5kvxje.scala:15)\n\tat Problem.main(tmp6r5kvxje.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(c => c.toLowerCase + c.toUpperCase).toSet\n\
    \        chars.size + 1\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpejsz395t.scala:10:38 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(\e\
    [36mc\e[0m => c.toLowerCase + c.toUpperCase).toSet\n\e[31m\e[31m   |\e[0m    \
    \                                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                      value toLowerCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.distinct\n        chars.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8lizb_m6.scala:16)\n\tat Problem.main(tmp8lizb_m6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ counts = mutable.HashMap.empty[Char, Int]\n        chars.foreach(c => counts.getOrElse(c,\
    \ 0) + 1)\n        counts.values.toList.distinct.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp370x3mi3.scala:11:21 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct.length\n        distinctChars\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2eyaxvc5.scala:11:43 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mdistinctChars\e[0m = chars.distinct.length\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m              value length is not a member of java.util.stream.IntStream\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.distinct\n        chars.toSet.size\
    \ // number of distinct characters\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4xvg5hdb.scala:16)\n\tat Problem.main(tmp4xvg5hdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size + 1\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp38kiahf_.scala:14)\n\tat Problem.main(tmp38kiahf_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct.length\n        distinctChars\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2eyaxvc5.scala:11:43 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mdistinctChars\e[0m = chars.distinct.length\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m              value length is not a member of java.util.stream.IntStream\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.toList.distinct.size\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toUpperCase).distinct\n\
    \        chars.size + 1\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp141vodni.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(_.toUpperCase).distinct\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value toUpperCase is not a member of\
    \ Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size + (chars.size - chars.distinct.size)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd78ub_kj.scala:11:41 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        chars.size + (chars.size - chars.distinct.size)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                             value distinct is not a member of Set[Char]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.toList.distinct.length\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(c => c.toUpperCase).distinct\n\
    \        chars.size\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp13u2ruuy.scala:10:38 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(\e\
    [36mc\e[0m => c.toUpperCase).distinct\n\e[31m\e[31m   |\e[0m                 \
    \                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \         value toUpperCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.distinct\n        chars.foldLeft(0)((acc,\
    \ c) => acc + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp14qbo1n7.scala:16)\n\tat Problem.main(tmp14qbo1n7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toUpperCase)\n      \
    \  val counts = chars.foldLeft(Map[Char,Long]()){\n            case (acc, c) =>\
    \ (acc + (c -> (acc.getOrElse(c,0) + 1)))\n        }\n        counts.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp09lbxw99.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(_.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value toUpperCase is not a member of\
    \ Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj7zg8b7g.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        distinctChars.size\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue size is not a member of java.util.stream.IntStream\
    \ - did you mean distinctChars.skip?\n1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toUpperCase).distinct\n\
    \        chars.count(_ == 'Z') + chars.count(_ == 'z') + chars.count(_ == 'Y')\
    \ + chars.count(_ == 'y')\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprele66ui.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(_.toUpperCase).distinct\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value toUpperCase is not a member of\
    \ Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val counts =\
    \ mutable.HashMap.empty[Char, Int]\n        for (c <- chars) {\n            val\
    \ count = counts.getOrElse(c, 0) + 1\n            counts.update(c, count)\n  \
    \      }\n        counts.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7f00n5hp.scala:11:21 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp7f00n5hp.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (c <- chars) {\n\e[31m\e[31m \
    \  |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0mvalue foreach is not a member\
    \ of java.util.stream.IntStream - did you mean chars.forEach?\n2 errors found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct.length\n        distinctChars\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2eyaxvc5.scala:11:43 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mdistinctChars\e[0m = chars.distinct.length\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m              value length is not a member of java.util.stream.IntStream\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars.toList\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2k3s79sc.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.chars.toList\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m              value toList is not a member of java.util.stream.IntStream\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(c => c.toUpperCase).distinct\n\
    \        chars.length\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4zxo51yh.scala:10:38 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(\e\
    [36mc\e[0m => c.toUpperCase).distinct\n\e[31m\e[31m   |\e[0m                 \
    \                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \         value toUpperCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars.toSet\n        chars.foldLeft(0)(_\
    \ + chars.size)\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj3zq9mdw.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.chars.toSet\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue toSet is not a member of java.util.stream.IntStream - did you mean IntStream.boxed?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805716
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj7zg8b7g.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        distinctChars.size\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue size is not a member of java.util.stream.IntStream\
    \ - did you mean distinctChars.skip?\n1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj7zg8b7g.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        distinctChars.size\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue size is not a member of java.util.stream.IntStream\
    \ - did you mean distinctChars.skip?\n1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toUpperCase).distinct\n\
    \        chars.count(_ == string.head.toUpperCase)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprp5i9oht.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(_.toUpperCase).distinct\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value toUpperCase is not a member of\
    \ Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805716
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val counts =\
    \ mutable.HashMap.empty[Char, Int]\n        for (c <- chars) {\n            counts.getOrElseUpdate(c,\
    \ 0) + 1\n        }\n        counts.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_3e1px0w.scala:11:21 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp_3e1px0w.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (c <- chars) {\n\e[31m\e[31m \
    \  |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0mvalue foreach is not a member\
    \ of java.util.stream.IntStream - did you mean chars.forEach?\n2 errors found\n"
  stdout: ''
  timestamp: 1659805718
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(c => c.toLowerCase + c.toUpperCase)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps16h9nyy.scala:10:38 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(\e\
    [36mc\e[0m => c.toLowerCase + c.toUpperCase)\n\e[31m\e[31m   |\e[0m          \
    \                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                value toLowerCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805718
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct.length\n        distinctChars\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2eyaxvc5.scala:11:43 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mdistinctChars\e[0m = chars.distinct.length\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m              value length is not a member of java.util.stream.IntStream\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(c => c.toUpperCase).distinct\n\
    \        chars.toSet.size + 1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj1knij9a.scala:10:38 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(\e\
    [36mc\e[0m => c.toUpperCase).distinct\n\e[31m\e[31m   |\e[0m                 \
    \                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \         value toUpperCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805718
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.distinct\n        chars.foldLeft(0)((acc,\
    \ c) => acc + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp14qbo1n7.scala:16)\n\tat Problem.main(tmp14qbo1n7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars.toList\n        val charsSet\
    \ = chars.toSet\n        charsSet.size // number of distinct characters\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl0gc959n.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.chars.toList\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m              value toList is not a member of java.util.stream.IntStream\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toUpperCase)\n      \
    \  val counts = chars.groupBy(identity).mapValues(_.size)\n        counts.foldLeft(0)((acc,\
    \ x) => acc + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw_aggk3a.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(_.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value toUpperCase is not a member of\
    \ Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(c => c.toUpperCase).distinct\n\
    \        chars.size\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp13u2ruuy.scala:10:38 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(\e\
    [36mc\e[0m => c.toUpperCase).distinct\n\e[31m\e[31m   |\e[0m                 \
    \                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \         value toUpperCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size * (chars.size + 1)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6r5kvxje.scala:15)\n\tat Problem.main(tmp6r5kvxje.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct.length\n        return distinctChars\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw540mg_m.scala:11:43 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mdistinctChars\e[0m = chars.distinct.length\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m              value length is not a member of java.util.stream.IntStream\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.toSet.size + (chars.toSet - chars.toSet)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmprrk3e9it.scala:11:25 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        chars.toSet.size + (chars.toSet - chars.toSet)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m None of\
    \ the overloaded alternatives of \e[33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e\
    [0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double): Double\n\e[31m  \
    \ |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x: Long): Long\n\e[31m   |\e[0m\
    \  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\e[31m   |\e[0m  (x: Short):\
    \ Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e[0m  (x: String): String\n\
    \e[31m   |\e[0m match arguments (Set[B])\n1 error found\n"
  stdout: ''
  timestamp: 1659805717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.distinct\n        chars.foldLeft(0){\
    \ (acc, c) => acc + c.length }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz3sscu8c.scala:11:47 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        chars.foldLeft(\e[31m0\e[0m){ (\e[36macc\e[0m,\
    \ \e[36mc\e[0m) => acc + c.length }\n\e[31m\e[31m   |\e[0m                   \
    \                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                value length is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805718
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.distinct\n        chars.count(_\
    \ == 'z') + chars.count(_ == 'Z') + chars.count(_ == 'z') + chars.count(_ == 'Z')\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr26p_7c_.scala:15)\n\tat Problem.main(tmpr26p_7c_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805719
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.distinct\n        chars.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp300obn_.scala:16)\n\tat Problem.main(tmpp300obn_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val counts =\
    \ mutable.HashMap[Char, Int]()\n        chars.foreach(c => counts(c) += 1)\n \
    \       counts.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn29_hsbr.scala:11:21 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpn29_hsbr.scala:12:14 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        chars.foreach(\e[36mc\e[0m => counts(c) += \e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ foreach is not a member of java.util.stream.IntStream - did you mean chars.forEach?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.distinct\n        chars.foldLeft(0)((acc,\
    \ c) => acc + c.length)\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp28c44djf.scala:11:46 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        chars.foldLeft(\e[31m0\e[0m)((\e[36macc\e[0m,\
    \ \e[36mc\e[0m) => acc + c.length)\n\e[31m\e[31m   |\e[0m                    \
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \              value length is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(c => c.toLowerCase + c.toUpperCase).distinct\n\
    \        chars.size + 1\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpml56q95o.scala:10:38 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(\e\
    [36mc\e[0m => c.toLowerCase + c.toUpperCase).distinct\n\e[31m\e[31m   |\e[0m \
    \                                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                         value toLowerCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toUpperCase).distinct\n\
    \        chars.length\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx51q1sh6.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(_.toUpperCase).distinct\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value toUpperCase is not a member of\
    \ Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805719
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size + 1\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp38kiahf_.scala:14)\n\tat Problem.main(tmp38kiahf_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size + (chars.toSet - chars).toSet.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph4pv2nl7.scala:15)\n\tat Problem.main(tmph4pv2nl7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805720
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ charsSet = chars.toSet\n        charsSet.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.distinct\n        chars.count(_\
    \ == 'a')\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe5t1oeu6.scala:15)\n\tat Problem.main(tmpe5t1oeu6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805720
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct.length\n        distinctChars\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2eyaxvc5.scala:11:43 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mdistinctChars\e[0m = chars.distinct.length\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m              value length is not a member of java.util.stream.IntStream\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.distinct\n        chars.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp300obn_.scala:16)\n\tat Problem.main(tmpp300obn_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805719
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size + 1\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp38kiahf_.scala:14)\n\tat Problem.main(tmp38kiahf_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.toList.distinct.length\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size + 1\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp38kiahf_.scala:14)\n\tat Problem.main(tmp38kiahf_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars.toList\n        val charsSet\
    \ = chars.toSet\n        charsSet.size // number of distinct characters\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl0gc959n.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.chars.toList\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m              value toList is not a member of java.util.stream.IntStream\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj7zg8b7g.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        distinctChars.size\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue size is not a member of java.util.stream.IntStream\
    \ - did you mean distinctChars.skip?\n1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.distinct\n        val charCount\
    \ = chars.toSet.size\n        charCount\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw0p4lted.scala:17)\n\tat Problem.main(tmpw0p4lted.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.distinct\n        chars.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp300obn_.scala:16)\n\tat Problem.main(tmpp300obn_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805719
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ charSet = chars.distinct\n        charSet.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805720
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ charsSet = chars.toSet\n        charsSet.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj7zg8b7g.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        distinctChars.size\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue size is not a member of java.util.stream.IntStream\
    \ - did you mean distinctChars.skip?\n1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size + 1\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp38kiahf_.scala:14)\n\tat Problem.main(tmp38kiahf_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ charSet = chars.distinct\n        charSet.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805720
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(c => c.toLowerCase + c.toUpperCase).toSet\n\
    \        chars.size + 1\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpejsz395t.scala:10:38 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(\e\
    [36mc\e[0m => c.toLowerCase + c.toUpperCase).toSet\n\e[31m\e[31m   |\e[0m    \
    \                                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                      value toLowerCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(c => c.toUpperCase).distinct\n\
    \        chars.count(_ == string.head)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp29uzbyhx.scala:10:38 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(\e\
    [36mc\e[0m => c.toUpperCase).distinct\n\e[31m\e[31m   |\e[0m                 \
    \                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \         value toUpperCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805720
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ counts = chars.groupBy(identity).mapValues(_.size)\n        counts.foldLeft(0)(_\
    \ + _._2)\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl5dei1ll.scala:17)\n\tat Problem.main(tmpl5dei1ll.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj7zg8b7g.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        distinctChars.size\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue size is not a member of java.util.stream.IntStream\
    \ - did you mean distinctChars.skip?\n1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsqar2wcm.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        distinctChars.length\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value length is not\
    \ a member of java.util.stream.IntStream\n1 error found\n"
  stdout: ''
  timestamp: 1659805720
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size * (chars.size + 1)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6r5kvxje.scala:15)\n\tat Problem.main(tmp6r5kvxje.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size * (chars.size + 1)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6r5kvxje.scala:15)\n\tat Problem.main(tmp6r5kvxje.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(c => c.toUpperCase).distinct\n\
    \        chars.count(_ == string.head.toUpperCase)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsfqvciva.scala:10:38 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(\e\
    [36mc\e[0m => c.toUpperCase).distinct\n\e[31m\e[31m   |\e[0m                 \
    \                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \         value toUpperCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805727
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size + 1\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp38kiahf_.scala:14)\n\tat Problem.main(tmp38kiahf_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.distinct\n        chars.toSet.size\
    \ // number of distinct characters\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4xvg5hdb.scala:16)\n\tat Problem.main(tmp4xvg5hdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toUpperCase).distinct\n\
    \        chars.count(_ == string.charAt(0))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe4xq99up.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(_.toUpperCase).distinct\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value toUpperCase is not a member of\
    \ Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsqar2wcm.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        distinctChars.length\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value length is not\
    \ a member of java.util.stream.IntStream\n1 error found\n"
  stdout: ''
  timestamp: 1659805720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.distinct\n        chars.foldLeft(0)((acc,\
    \ c) => acc + c.length)\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp28c44djf.scala:11:46 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        chars.foldLeft(\e[31m0\e[0m)((\e[36macc\e[0m,\
    \ \e[36mc\e[0m) => acc + c.length)\n\e[31m\e[31m   |\e[0m                    \
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \              value length is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805719
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size * (chars.size + 1)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6r5kvxje.scala:15)\n\tat Problem.main(tmp6r5kvxje.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(c => c.toLowerCase + c.toUpperCase\
    \ + c.toUpperCase).toSet\n        chars.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprpi6v5wr.scala:10:38 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(\e\
    [36mc\e[0m => c.toLowerCase + c.toUpperCase + c.toUpperCase).toSet\n\e[31m\e[31m\
    \   |\e[0m                                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toLowerCase is not a member of Char\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805727
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size * (chars.size + 1)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6r5kvxje.scala:15)\n\tat Problem.main(tmp6r5kvxje.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ charsSet = chars.toSet\n        charsSet.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj7zg8b7g.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        distinctChars.size\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue size is not a member of java.util.stream.IntStream\
    \ - did you mean distinctChars.skip?\n1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct.length\n        distinctChars\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2eyaxvc5.scala:11:43 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mdistinctChars\e[0m = chars.distinct.length\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m              value length is not a member of java.util.stream.IntStream\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.distinct\n        chars.foldLeft(0)((acc,\
    \ c) => acc + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp14qbo1n7.scala:16)\n\tat Problem.main(tmp14qbo1n7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct.length\n        distinctChars\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2eyaxvc5.scala:11:43 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mdistinctChars\e[0m = chars.distinct.length\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m              value length is not a member of java.util.stream.IntStream\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size * (chars.size + 1)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6r5kvxje.scala:15)\n\tat Problem.main(tmp6r5kvxje.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars.toList\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2k3s79sc.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.chars.toList\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m              value toList is not a member of java.util.stream.IntStream\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805707
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.distinct\n        chars.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp300obn_.scala:16)\n\tat Problem.main(tmpp300obn_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj7zg8b7g.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        distinctChars.size\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue size is not a member of java.util.stream.IntStream\
    \ - did you mean distinctChars.skip?\n1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(c => c.toLowerCase + c.toUpperCase).toSet\n\
    \        chars.size\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpik8r17i3.scala:10:38 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(\e\
    [36mc\e[0m => c.toLowerCase + c.toUpperCase).toSet\n\e[31m\e[31m   |\e[0m    \
    \                                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                      value toLowerCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805727
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size + 1\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp38kiahf_.scala:14)\n\tat Problem.main(tmp38kiahf_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.distinct\n        chars.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp300obn_.scala:16)\n\tat Problem.main(tmpp300obn_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805719
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size + 1\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp38kiahf_.scala:14)\n\tat Problem.main(tmp38kiahf_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size + (chars.toSet - chars).toSet.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph4pv2nl7.scala:15)\n\tat Problem.main(tmph4pv2nl7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars.toList\n        val charsSet\
    \ = chars.toSet\n        charsSet.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsy209xnh.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.chars.toList\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m              value toList is not a member of java.util.stream.IntStream\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805728
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.toList.distinct.length\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj7zg8b7g.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        distinctChars.size\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue size is not a member of java.util.stream.IntStream\
    \ - did you mean distinctChars.skip?\n1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj7zg8b7g.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        distinctChars.size\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue size is not a member of java.util.stream.IntStream\
    \ - did you mean distinctChars.skip?\n1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size + 1\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp38kiahf_.scala:14)\n\tat Problem.main(tmp38kiahf_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(c => c.toLowerCase + c.toUpperCase)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps16h9nyy.scala:10:38 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(\e\
    [36mc\e[0m => c.toLowerCase + c.toUpperCase)\n\e[31m\e[31m   |\e[0m          \
    \                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                value toLowerCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toUpperCase).distinct\n\
    \        chars.length\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx51q1sh6.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(_.toUpperCase).distinct\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value toUpperCase is not a member of\
    \ Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(c => c.toLowerCase + c.toUpperCase).toSet\n\
    \        chars.size\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpik8r17i3.scala:10:38 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(\e\
    [36mc\e[0m => c.toLowerCase + c.toUpperCase).toSet\n\e[31m\e[31m   |\e[0m    \
    \                                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                      value toLowerCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805727
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.distinct\n        val charsCount\
    \ = chars.toSet.size\n        charsCount\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp53ol0qpo.scala:17)\n\tat Problem.main(tmp53ol0qpo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805729
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj7zg8b7g.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        distinctChars.size\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue size is not a member of java.util.stream.IntStream\
    \ - did you mean distinctChars.skip?\n1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size + 1\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp38kiahf_.scala:14)\n\tat Problem.main(tmp38kiahf_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toUpperCase).distinct\n\
    \        chars.length\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx51q1sh6.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(_.toUpperCase).distinct\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value toUpperCase is not a member of\
    \ Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805719
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.distinct\n        chars.foldLeft(0)((acc,\
    \ c) => acc + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp14qbo1n7.scala:16)\n\tat Problem.main(tmp14qbo1n7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size + 1\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp38kiahf_.scala:14)\n\tat Problem.main(tmp38kiahf_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.toList.distinct.length\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toUpperCase).distinct.length\n\
    \        chars\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyrpssbkg.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(_.toUpperCase).distinct.length\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value toUpperCase is not a member of\
    \ Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805727
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val charsSet\
    \ = chars.toSet\n        charsSet.size // number of distinct characters\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1whuh9ch.scala:11:29 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mcharsSet\e[0m = chars.toSet\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ toSet is not a member of java.util.stream.IntStream - did you mean chars.boxed?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(c => c.toUpperCase).distinct\n\
    \        chars.count(_ == string.head.toUpperCase)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsfqvciva.scala:10:38 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(\e\
    [36mc\e[0m => c.toUpperCase).distinct\n\e[31m\e[31m   |\e[0m                 \
    \                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \         value toUpperCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805727
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.distinct\n        val charsSet\
    \ = chars.toSet\n        charsSet.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfolemvqa.scala:17)\n\tat Problem.main(tmpfolemvqa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805729
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.toSet.size // number of distinct characters\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805729
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ counts = mutable.HashMap.empty[Char, Int]\n        chars.foreach(c => counts.getOrElse(c,\
    \ 0L) += 1)\n        counts.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp907473s8.scala:11:21 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805726
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.distinct\n        chars.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp300obn_.scala:16)\n\tat Problem.main(tmpp300obn_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805719
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct.length\n        distinctChars\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2eyaxvc5.scala:11:43 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mdistinctChars\e[0m = chars.distinct.length\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m              value length is not a member of java.util.stream.IntStream\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toUpperCase).map(_.toLowerCase).toSet\n\
    \        chars.size\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnzgtaixi.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(_.toUpperCase).map(_.toLowerCase).toSet\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value toUpperCase is not a member of\
    \ Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805728
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.distinct\n        chars.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp300obn_.scala:16)\n\tat Problem.main(tmpp300obn_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj7zg8b7g.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        distinctChars.size\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue size is not a member of java.util.stream.IntStream\
    \ - did you mean distinctChars.skip?\n1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.distinct\n        val charCount\
    \ = chars.toSet.size\n        charCount\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw0p4lted.scala:17)\n\tat Problem.main(tmpw0p4lted.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(c => c.toLowerCase + c.toUpperCase).distinct\n\
    \        chars.toList.size\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpycm2hv54.scala:10:38 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(\e\
    [36mc\e[0m => c.toLowerCase + c.toUpperCase).distinct\n\e[31m\e[31m   |\e[0m \
    \                                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                         value toLowerCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(c => c.toLowerCase + c.toUpperCase\
    \ + c.toUpperCase).toSet\n        chars.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprpi6v5wr.scala:10:38 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(\e\
    [36mc\e[0m => c.toLowerCase + c.toUpperCase + c.toUpperCase).toSet\n\e[31m\e[31m\
    \   |\e[0m                                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toLowerCase is not a member of Char\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805727
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ charsSet = chars.toSet\n        charsSet.size // number of distinct characters\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805730
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj7zg8b7g.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        distinctChars.size\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue size is not a member of java.util.stream.IntStream\
    \ - did you mean distinctChars.skip?\n1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ charSet = chars.toSet\n        charSet.size + 1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6hihtlzl.scala:15)\n\tat Problem.main(tmp6hihtlzl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805730
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ charsSet = chars.toSet\n        charsSet.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(c => c.toLowerCase + c.toUpperCase).toSet\n\
    \        chars.size + 1\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpejsz395t.scala:10:38 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(\e\
    [36mc\e[0m => c.toLowerCase + c.toUpperCase).toSet\n\e[31m\e[31m   |\e[0m    \
    \                                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                      value toLowerCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj7zg8b7g.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        distinctChars.size\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue size is not a member of java.util.stream.IntStream\
    \ - did you mean distinctChars.skip?\n1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct.length\n        distinctChars\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2eyaxvc5.scala:11:43 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mdistinctChars\e[0m = chars.distinct.length\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m              value length is not a member of java.util.stream.IntStream\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size + 1\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp38kiahf_.scala:14)\n\tat Problem.main(tmp38kiahf_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size + 1\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp38kiahf_.scala:14)\n\tat Problem.main(tmp38kiahf_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ counts = mutable.HashMap.empty[Char, Int]\n        for (c <- chars) {\n    \
    \        counts.getOrElseUpdate(c, counts.getOrElse(c, 0) + 1)\n        }\n  \
    \      counts.values.toList.size\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu4w0khkj.scala:11:21 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ counts = mutable.HashMap.empty[Char, Int]\n        chars.foreach(c => counts(c)\
    \ += 1)\n        counts.values.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt4qgpnlt.scala:11:21 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805727
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(c => c.toLowerCase + c.toUpperCase)\n\
    \        val counts = chars.groupBy(identity).mapValues(_.size)\n        counts.foldLeft(0)((acc,\
    \ x) => acc + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpck89m7x0.scala:10:38 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(\e\
    [36mc\e[0m => c.toLowerCase + c.toUpperCase)\n\e[31m\e[31m   |\e[0m          \
    \                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                value toLowerCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805729
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val counts =\
    \ mutable.HashMap[Char, Int]()\n        for (c <- chars) {\n            counts(c)\
    \ match {\n                case Some(count) => counts(c) = count + 1\n       \
    \         case None => counts(c) = 1\n            }\n        }\n        counts.values.toList.foldLeft(0)((acc,\
    \ x) => acc + x)\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpukoc44rn.scala:11:21 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpukoc44rn.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (c <- chars) {\n\e[31m\e[31m \
    \  |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0mvalue foreach is not a member\
    \ of java.util.stream.IntStream - did you mean chars.forEach?\n2 errors found\n"
  stdout: ''
  timestamp: 1659805730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val distinctChars\
    \ = mutable.Set[Char]()\n        chars.foreach(distinctChars += _)\n        distinctChars.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0hgie2q8.scala:11:28 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mdistinctChars\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp0hgie2q8.scala:12:14 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        chars.foreach(distinctChars += _)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue foreach is not a member\
    \ of java.util.stream.IntStream - did you mean chars.forEach?\n2 errors found\n"
  stdout: ''
  timestamp: 1659805730
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size + 1\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp38kiahf_.scala:14)\n\tat Problem.main(tmp38kiahf_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj7zg8b7g.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        distinctChars.size\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue size is not a member of java.util.stream.IntStream\
    \ - did you mean distinctChars.skip?\n1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val charsSet\
    \ = chars.toSet\n        charsSet.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprbw8hf3k.scala:11:29 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mcharsSet\e[0m = chars.toSet\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ toSet is not a member of java.util.stream.IntStream - did you mean chars.boxed?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805729
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj7zg8b7g.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        distinctChars.size\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue size is not a member of java.util.stream.IntStream\
    \ - did you mean distinctChars.skip?\n1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.distinct\n        chars.foldLeft(0)(_\
    \ + _.length)\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk5sm_lwh.scala:11:32 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        chars.foldLeft(\e[31m0\e[0m)(_ + _.length)\n\e\
    [31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value length is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805730
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size + 1\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp38kiahf_.scala:14)\n\tat Problem.main(tmp38kiahf_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(c => c.toLowerCase + c.toUpperCase).toSet\n\
    \        chars.size\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpik8r17i3.scala:10:38 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(\e\
    [36mc\e[0m => c.toLowerCase + c.toUpperCase).toSet\n\e[31m\e[31m   |\e[0m    \
    \                                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                      value toLowerCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805727
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toUpperCase)\n      \
    \  val distinctChars = chars.distinct\n        distinctChars.size\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\"\
    )) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeqegv8y1.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(_.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value toUpperCase is not a member of\
    \ Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(c => c.toLowerCase + c.toUpperCase).distinct\n\
    \        chars.size + 1\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpml56q95o.scala:10:38 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(\e\
    [36mc\e[0m => c.toLowerCase + c.toUpperCase).distinct\n\e[31m\e[31m   |\e[0m \
    \                                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                         value toLowerCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct.length\n        return distinctChars\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw540mg_m.scala:11:43 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mdistinctChars\e[0m = chars.distinct.length\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m              value length is not a member of java.util.stream.IntStream\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805718
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size + (chars.toSet - chars).toSet.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph4pv2nl7.scala:15)\n\tat Problem.main(tmph4pv2nl7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805720
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size + 1\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp38kiahf_.scala:14)\n\tat Problem.main(tmp38kiahf_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct.length\n        return distinctChars\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw540mg_m.scala:11:43 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mdistinctChars\e[0m = chars.distinct.length\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m              value length is not a member of java.util.stream.IntStream\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805718
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj7zg8b7g.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        distinctChars.size\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue size is not a member of java.util.stream.IntStream\
    \ - did you mean distinctChars.skip?\n1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(c => c.toLowerCase + c.toUpperCase\
    \ + c.toUpperCase).distinct\n        chars.toSet.size // chars.toSet is immutable\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwjs078gi.scala:10:38 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(\e\
    [36mc\e[0m => c.toLowerCase + c.toUpperCase + c.toUpperCase).distinct\n\e[31m\e\
    [31m   |\e[0m                                    ^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                               value toLowerCase is not a member of Char\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(c => c.toUpperCase).distinct\n\
    \        chars.size + 1\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb4sxoirp.scala:10:38 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(\e\
    [36mc\e[0m => c.toUpperCase).distinct\n\e[31m\e[31m   |\e[0m                 \
    \                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \         value toUpperCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805731
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toUpperCase).distinct\n\
    \        chars.count(_ == string.head.toUpperCase)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprp5i9oht.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(_.toUpperCase).distinct\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value toUpperCase is not a member of\
    \ Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805716
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size + 1\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp38kiahf_.scala:14)\n\tat Problem.main(tmp38kiahf_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size + 1\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp38kiahf_.scala:14)\n\tat Problem.main(tmp38kiahf_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size * (chars.size + 1)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6r5kvxje.scala:15)\n\tat Problem.main(tmp6r5kvxje.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(c => c.toUpperCase).distinct\n\
    \        chars.count(_ == string.head.toUpperCase)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsfqvciva.scala:10:38 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(\e\
    [36mc\e[0m => c.toUpperCase).distinct\n\e[31m\e[31m   |\e[0m                 \
    \                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \         value toUpperCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805727
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(c => c.toLowerCase + c.toUpperCase).toSet\n\
    \        chars.size + 1\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpejsz395t.scala:10:38 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.map(\e\
    [36mc\e[0m => c.toLowerCase + c.toUpperCase).toSet\n\e[31m\e[31m   |\e[0m    \
    \                                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                      value toLowerCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
    \ : String) : Long = {\n        val chars = string.map(_.toLower).toSet\n    \
    \    chars.size * (chars.size + 1)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6r5kvxje.scala:15)\n\tat Problem.main(tmp6r5kvxje.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805709
