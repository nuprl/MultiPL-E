language: scala
name: HumanEval_17_parse_music
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split('|').map(_.toInt).toList\n  \
    \      val music_length = music_list.size\n        val music_beats = music_list.map(music_length\
    \ % _)\n        val music_last_beats = music_list.map(music_length % _).reverse\n\
    \        music_beats ++ music_last_beats\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5k46zuxh.scala:18:8\
    \ ---------------------\e[0m\e[0m\n\e[31m18 |\e[0m        music_beats ++ music_last_beats\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required:\
    \ List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799998
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \").map(_.toUpperCase).toList\n\
    \        val music_length = music_list.length\n        val music_notes = music_list.map(music_to_note)\n\
    \        val music_notes_length = music_notes.length\n        val music_notes_length_without_rest\
    \ = music_notes_length - music_notes.filter(music_notes_without_rest).length\n\
    \        val music_notes_length_without_rest_with_beats = music_notes_length_without_rest\
    \ / music_notes_length\n        val music_notes_length_without_rest_with_beats_without_rest\
    \ = music_notes_length_without_rest_with_beats - music_notes_length_without_rest\n\
    \        val music_notes_length_without_rest_with_beats_without_rest_with_beats\
    \ = music_notes_length_without_rest_with_beats_without_rest / music_notes_length_without_rest_with_beats\n\
    \        val music_notes_length_without_rest_with_beats_without_rest_with_beats_without_rest\
    \ = music_notes_length_without_rest_with_beats_without_rest_with_beats / music_notes_length_without_rest_with_beats_without_rest\n\
    \        val music_notes_length_without_rest_with_beats_without_rest_with_beats_without_rest_with_beats\
    \ = music_notes_length_without_rest_with_beats_without_rest_with_beats_without_rest\
    \ / music_notes_length_without_rest_with_beats_without_rest_with_beats\n     \
    \   val music_notes_length_without_rest_with_beats_without_rest_with_beats_without_rest_with_beats_without_rest\
    \ = music_notes_length_without_rest_with_beats_without_rest_with_beats_without_rest_with_beats_without_rest\
    \ / music_notes_length_without_rest_with_beats_without_rest_with_beats_without_rest_with_beats\n\
    \        val music_notes_length_without_rest_with_beats_without_rest_with_beats_without_rest_with_beats_without_rest_with_beats\
    \ = music_notes_length_without_rest_with_beats_without_rest_with_beats_without_rest_with_beats_without_rest\
    \ / music_notes_length_without_rest_with_beats_without_rest_with_beats_without_rest_with_beats_without_rest\n\
    \        val music_notes_length_without_rest_with_beats_without_rest_with_beats_without_rest_with_beats_without_rest_with_beats_without_rest\
    \ = music_notes_length_without_rest_with_beats_without_rest_with_beats_without_rest_with_beats_without_rest_with_beats_without_rest_with_beats_without_rest\n\
    \        val music_notes_length_without_rest_with_beats_without_rest_with_beats_without_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz7dacqym.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz7dacqym.scala:16:41\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_notes\e[0m = music_list.map(music_to_note)\n\e[31m\e[31m   |\e[0m  \
    \                                       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                       Not found: music_to_note\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz7dacqym.scala:18:86 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_length_without_rest\e\
    [0m = music_notes_length - music_notes.filter(music_notes_without_rest).length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                              ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     Not found: music_notes_without_rest\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpz7dacqym.scala:24:118\
    \ --------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_notes_length_without_rest_with_beats_without_rest_with_beats_without_rest_with_beats_without_rest\e\
    [0m = music_notes_length_without_rest_with_beats_without_rest_with_beats_without_rest_with_beats_without_rest\
    \ / music_notes_length_without_rest_with_beats_without_rest_with_beats_without_rest_with_beats\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  music_notes_length_without_rest_with_beats_without_rest_with_beats_without_rest_with_beats_without_rest\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31"
  stdout: ''
  timestamp: 1659799997
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \").map(music_string => music_string.charAt(0).toInt)\n\
    \        val music_list_size = music_list.length\n        val music_list_size_half\
    \ = music_list_size / 2\n        val music_list_size_quarter = music_list_size\
    \ / 4\n        val music_list_size_whole = music_list_size - music_list_size_half\
    \ - music_list_size_quarter\n        val music_list_size_whole_half = music_list_size_whole\
    \ / 2\n        val music_list_size_whole_quarter = music_list_size_whole / 4\n\
    \        val music_list_size_whole_whole = music_list_size_whole - music_list_size_whole_half\
    \ - music_list_size_whole_quarter\n        val music_list_size_whole_whole_half\
    \ = music_list_size_whole_whole / 2\n        val music_list_size_whole_whole_quarter\
    \ = music_list_size_whole_whole / 4\n        val music_list_size_whole_whole_whole\
    \ = music_list_size_whole_whole - music_list_size_whole_whole_half - music_list_size_whole_whole_quarter\n\
    \        val music_list_size_whole_whole_whole_half = music_list_size_whole_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_whole_quarter = music_list_size_whole_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole_whole = music_list_size_whole_whole_whole\
    \ - music_list_size_whole_whole_whole_half - music_list_size_whole_whole_whole_quarter\n\
    \        val music_list_size_whole_whole_whole_whole_half = music_list_size_whole_whole_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_whole_whole_quarter = music_list_size_whole_whole_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole_whole_whole = music_list_size_whole_whole_whole_whole\
    \ - music_list_size_whole_whole_whole_whole_half - music_list_size_whole_whole_whole_whole_quarter\n\
    \        val music_list_size_whole_whole_whole_whole_whole_half = music_list_size_whole_whole_whole_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_whole_whole_whole_quarter\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp81gti20j.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp81gti20j.scala:33:5 ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799997
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \").map(_.toInt)\n       \
    \ val music_list_length = music_list.length\n        val music_list_with_beats\
    \ = music_list.zipWithIndex.map { case (music_note, index) => (music_note, index)\
    \ }\n        val music_list_with_beats_length = music_list_with_beats.length\n\
    \        val music_list_with_beats_last_beat = music_list_with_beats.last._1\n\
    \        val music_list_with_beats_last_beat_index = music_list_with_beats.last._2\n\
    \        val music_list_with_beats_last_beat_length = music_list_with_beats_last_beat_index\
    \ - music_list_with_beats_last_beat\n        val music_list_with_beats_last_beat_length\
    \ = music_list_with_beats_last_beat_length / 4\n        val music_list_with_beats_last_beat_length\
    \ = music_list_with_beats_last_beat_length * 4\n        val music_list_with_beats_last_beat_length\
    \ = music_list_with_beats_last_beat_length + music_list_with_beats_last_beat\n\
    \        val music_list_with_beats_last_beat_length = music_list_with_beats_last_beat_length\
    \ / 4\n        val music_list_with_beats_last_beat_length = music_list_with_beats_last_beat_length\
    \ * 4\n        val music_list_with_beats_last_beat_length = music_list_with_beats_last_beat_length\
    \ + music_list_with_beats_last_beat\n        val music_list_with_beats_last_beat_length\
    \ = music_list_with_beats_last_beat_length / 4\n        val music_list_with_beats_last_beat_length\
    \ = music_list_with_beats_last_beat_length * 4\n        val music_list_with_beats_last_beat_length\
    \ = music_list_with_beats_last_beat_length + music_list_with_beats_last_beat\n\
    \        val music_list_with_beats_last_beat_length = music_list_with_beats_last_beat_length\
    \ / 4\n        val music_list_with_beats_last_beat_length = music_list_with_beats_last_beat_length\
    \ * 4\n        val music_list_with_beats_last_beat_length = music_list_with_beats_last_beat_length\
    \ + music_list_with_beats_last_beat\n        val music_list_with_beats_last_beat_length\
    \ = music_list_with_beats_last_beat_length / 4\n        val music_list_with_beats_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptwvm7gqj.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptwvm7gqj.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_with_beats_last_beat_length\e[0m = music_list_with_beats_last_beat_length\
    \ / \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_with_beats_last_beat_length is already defined\
    \ as \e[33mvalue\e[0m \e[35mmusic_list_with_beats_last_beat_length\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmptwvm7gqj.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mmusic_list_with_beats_last_beat_length\e\
    [0m = music_list_with_beats_last_beat_length * \e[31m4\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_with_beats_last_beat_length is already defined\
    \ as \e[33mvalue\e[0m \e[35mmusic_list_with_beats_last_beat_length\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmptwvm7gqj.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mmusic_list_with_beats_last_beat_length\e\
    [0m = music_list_with_beats_last_beat_length + music_list_with_beats_last_beat\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_with_beats_last_beat_length is already defined\
    \ as \e[33mvalue\e[0m \e[35mmusic_list_with_beats_last_beat_length\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of top"
  stdout: ''
  timestamp: 1659799998
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(' ').map(_.toUpperCase).toList\n\
    \        val notes = music_list.filterNot(_.isEmpty)\n        val notes_length\
    \ = notes.size\n        val beats_length = notes_length / 4\n        val notes_beats\
    \ = notes.grouped(beats_length).map(_.size)\n        val notes_beats_sum = notes_beats.sum\n\
    \        val notes_beats_count = notes_beats.count\n        val notes_beats_average\
    \ = notes_beats_sum / notes_beats_count\n        val notes_beats_average_list\
    \ = notes_beats_average.toList\n        val notes_beats_average_list2 = notes_beats_average_list.map(x\
    \ => x * beats_length)\n        val notes_beats_average_list3 = notes_beats_average_list2.map(x\
    \ => x * beats_length)\n        val notes_beats_average_list4 = notes_beats_average_list3.map(x\
    \ => x * beats_length)\n        val notes_beats_average_list5 = notes_beats_average_list4.map(x\
    \ => x * beats_length)\n        val notes_beats_average_list6 = notes_beats_average_list5.map(x\
    \ => x * beats_length)\n        val notes_beats_average_list7 = notes_beats_average_list6.map(x\
    \ => x * beats_length)\n        val notes_beats_average_list8 = notes_beats_average_list7.map(x\
    \ => x * beats_length)\n        val notes_beats_average_list9 = notes_beats_average_list8.map(x\
    \ => x * beats_length)\n        val notes_beats_average_list10 = notes_beats_average_list9.map(x\
    \ => x * beats_length)\n        val notes_beats_average_list11 = notes_beats_average_list10.map(x\
    \ => x * beats_length)\n        val notes_beats_average_list12 = notes_beats_average_list11.map(x\
    \ => x * beats_length)\n        val notes_beats_average_list13 = notes_beats_average_list12.map(x\
    \ => x * beats_length)\n        val notes_beats_average_list14 = notes_beats_average_list13.map(x\
    \ => x * beats_length)\n        val notes_beats_average_list15 = notes_beats_average_list14.map(x\
    \ => x * beats_length)\n        val notes_beats_average_list16 = notes_beats_average_list15.map(x\
    \ => x * beats_length)\n        val notes_beats_average_list17 = notes_beats_average_list16.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpq8jczqsl.scala:38:72 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_average_list17\e\
    [0m = notes_beats_average_list16.map(\n\e[31m\e[31m   |\e[0m                 \
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpq8jczqsl.scala:21:50\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e\
    [0m \e[36mnotes_beats_average\e[0m = notes_beats_sum / notes_beats_count\n\e[31m\e\
    [31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m None of the overloaded alternatives of \e[33mmethod\e[0m \e[35m/\e\
    [0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double):\
    \ Double\n\e[31m   |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x: Long): Long\n\
    \e[31m   |\e[0m  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\e[31m   |\e\
    [0m  (x: Short): Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e[0m match arguments\
    \ ((notes_beats_count : (Int => Boolean) => Int))\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpq8jczqsl.scala:39:5 ---------------------\e[0m\e[0m\n\
    \e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799997
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.substring(0,\
    \ 1)\n                val rest = music_string.substring(1)\n                beat.toLong\
    \ * rest.length\n            }).sum\n            note.toLong * beats\n       \
    \ }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppvpo2bv1.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m15 |\e[0m\
    \            \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e\
    [0m, \e[31m1\e[0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m\
    \ = music_string.substring(\e[31m1\e[0m).split(\e[31m\"|\"\e[0m).map(\e[36mmusic_string\e\
    [0m => {\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mbeat\e[0m = music_string.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mrest\e\
    [0m = music_string.substring(\e[31m1\e[0m)\n\e[31m19 |\e[0m                beat.toLong\
    \ * rest.length\n\e[31m20 |\e[0m            }).sum\n\e[31m21 |\e[0m          \
    \  note.toLong * beats\n\e[31m22 |\e[0m        }).sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799997
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(' ').map(_.toInt)\n        val\
    \ notes = music_list.sliding(music_list.length / 4).toList\n        val notes_count\
    \ = notes.map(x => x.length)\n        val notes_count_sum = notes_count.sum\n\
    \        val notes_count_average = notes_count.sum / notes_count_sum\n       \
    \ val notes_count_average_list = notes_count.map(x => x / notes_count_sum)\n \
    \       val notes_count_average_list_sum = notes_count_average_list.sum\n    \
    \    val notes_count_average_list_average = notes_count_average_list.sum / notes_count_average_list_sum\n\
    \        val notes_count_average_list_average_list = notes_count_average_list.map(x\
    \ => x / notes_count_average_list_sum)\n        val notes_count_average_list_average_list_sum\
    \ = notes_count_average_list_average_list.sum\n        val notes_count_average_list_average_list_average\
    \ = notes_count_average_list_average_list.sum / notes_count_average_list_average_list_sum\n\
    \        val notes_count_average_list_average_list_average_list = notes_count_average_list_average_list.map(x\
    \ => x / notes_count_average_list_average_list_sum)\n        val notes_count_average_list_average_list_average_list_sum\
    \ = notes_count_average_list_average_list_average_list.sum\n        val notes_count_average_list_average_list_average_list_average\
    \ = notes_count_average_list_average_list_average_list.sum / notes_count_average_list_average_list_average_list_sum\n\
    \        val notes_count_average_list_average_list_average_list_average_list =\
    \ notes_count_average_list_average_list_average_list.map(x => x / notes_count_average_list_average_list_average_list_sum)\n\
    \        val notes_count_average_list_average_list_average_list_average_list_sum\
    \ = notes_count_average_list_average_list_average_list_average_list.sum\n    \
    \    val notes_count_average_list_average_list_average_list_average_list_average\
    \ = notes_count_average_list_average_list_average_list_average_list.sum / notes_count_average_list_average_list_average_list_average_list_sum\n\
    \        val notes_count_average_list_average_list_average_list_average_list_average_list\
    \ = notes_count_average_list_average_list_average_list_average_list.map(x => x\
    \ / notes_count_average_list_average_list_average_list_average_list_sum)\n   \
    \     val notes_count_average_list_average_list_average_list_average_list_average_list_sum\
    \ = notes_count_average_list_average_list_average_list_average_list_average_list.sum\n\
    \        val notes_count_average_list_average_list_average_list_average_list_average_list_average\
    \ = notes_count_average_list_average_list_average_list_average_list_average_list.sum\
    \ / \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\"\
    )).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpj02iiuyk.scala:33:181 --------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mnotes_count_average_list_average_list_average_list_average_list_average_list_average\e\
    [0m = notes_count_average_list_average_list_average_list_average_list_average_list.sum\
    \ / \n\e[31m\e[31m   |\e[0m                                                  \
    \                                                                            \
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj02iiuyk.scala:34:5\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799996
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \").map(_.toUpperCase).toList\n\
    \        val music_length = music_list.length\n        val music_beats = music_list.map(music_length\
    \ % 2 != 0).sum\n        val music_notes = music_list.map(music_length % 2 ==\
    \ 0).sum\n        val music_notes_beats = music_notes * music_beats\n        val\
    \ music_notes_beats_sum = music_notes_beats.toLong\n        val music_notes_beats_sum_array\
    \ = Array.ofDim[Long](music_notes_beats_sum)\n        val music_notes_beats_sum_array_length\
    \ = music_notes_beats_sum_array.length\n        val music_notes_beats_sum_array_length\
    \ = music_notes_beats_sum_array_length.toLong\n        val music_notes_beats_sum_array_length\
    \ = music_notes_beats_sum_array_length.toLong\n        val music_notes_beats_sum_array_length\
    \ = music_notes_beats_sum_array_length.toLong\n        val music_notes_beats_sum_array_length\
    \ = music_notes_beats_sum_array_length.toLong\n        val music_notes_beats_sum_array_length\
    \ = music_notes_beats_sum_array_length.toLong\n        val music_notes_beats_sum_array_length\
    \ = music_notes_beats_sum_array_length.toLong\n        val music_notes_beats_sum_array_length\
    \ = music_notes_beats_sum_array_length.toLong\n        val music_notes_beats_sum_array_length\
    \ = music_notes_beats_sum_array_length.toLong\n        val music_notes_beats_sum_array_length\
    \ = music_notes_beats_sum_array_length.toLong\n        val music_notes_beats_sum_array_length\
    \ = music_notes_beats_sum_array_length.toLong\n        val music_notes_beats_sum_array_length\
    \ = music_notes_beats_sum_array_length.toLong\n        val music_notes_beats_sum_array_length\
    \ = music_notes_beats_sum_array_length.toLong\n        val music_notes_beats_sum_array_length\
    \ = music_notes_beats_sum_array_length.toLong\n        val music_notes_beats_sum_array_length\
    \ = music_notes_beats_sum_array_length.toLong\n        val music_notes_beats_sum_array_length\
    \ = music_notes_beats_sum_array_length.toLong\n        val music_notes_beats_sum_array_length\
    \ = music_notes_beats_sum_array_length.to\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9_adjb8w.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_beats_sum_array_length\e\
    [0m = music_notes_beats_sum_array_length.toLong\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_beats_sum_array_length is already defined as \e\
    [33mvalue\e[0m \e[35mmusic_notes_beats_sum_array_length\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9_adjb8w.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_notes_beats_sum_array_length\e[0m = music_notes_beats_sum_array_length.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_beats_sum_array_length is already defined as \e\
    [33mvalue\e[0m \e[35mmusic_notes_beats_sum_array_length\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9_adjb8w.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_notes_beats_sum_array_length\e[0m = music_notes_beats_sum_array_length.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_beats_sum_array_length is already defined as \e\
    [33mvalue\e[0m \e[35mmusic_notes_beats_sum_array_length\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9_adjb8w.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_notes_beats_sum_array_length\e[0m = music_notes_beats_sum_array_length.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799998
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \")\n        val music_list_size\
    \ = music_list.size\n        val music_list_size_2 = music_list_size / 2\n   \
    \     val music_list_size_3 = music_list_size_2 / 2\n        val music_list_size_4\
    \ = music_list_size_3 / 2\n        val music_list_size_5 = music_list_size_4 /\
    \ 2\n        val music_list_size_6 = music_list_size_5 / 2\n        val music_list_size_7\
    \ = music_list_size_6 / 2\n        val music_list_size_8 = music_list_list_size_7\
    \ / 2\n        val music_list_size_9 = music_list_size_8 / 2\n        val music_list_size_10\
    \ = music_list_size_9 / 2\n        val music_list_size_11 = music_list_size_10\
    \ / 2\n        val music_list_size_12 = music_list_size_11 / 2\n        val music_list_size_13\
    \ = music_list_size_12 / 2\n        val music_list_size_14 = music_list_size_13\
    \ / 2\n        val music_list_size_15 = music_list_size_14 / 2\n        val music_list_size_16\
    \ = music_list_size_15 / 2\n        val music_list_size_17 = music_list_size_16\
    \ / 2\n        val music_list_size_18 = music_list_size_17 / 2\n        val music_list_size_19\
    \ = music_list_size_18 / 2\n        val music_list_size_20 = music_list_size_19\
    \ / 2\n        val music_list_size_21 = music_list_size_20 / 2\n        val music_list_size_22\
    \ = music_list_size_21 / 2\n        val music_list_size_23 = music_list_size_22\
    \ / 2\n        val music_list_size_24 = music_list_size_23 / 2\n        val music_list_size_25\
    \ = music_list_size_24 / 2\n        val music_list_size_26 = music_list_size_25\
    \ / 2\n        val music_list_size_27 = music_list_size_26 / 2\n        val music_list_size_28\
    \ = music_list_size_27 / 2\n        val music_list_size_29 = music_list_size_28\
    \ / 2\n        val music_list_size_30 = music_list_size_29 / 2\n        val music_list_size_31\
    \ = music_list_size_30 / 2\n        val music_list_size_32 = music_list_size_31\
    \ / 2\n        val music_list_size_33 = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpg5ceu5i2.scala:47:32 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_33\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e\
    [0m                                expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg5ceu5i2.scala:22:32\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg5ceu5i2.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799997
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.substring(0,\
    \ 1)\n                val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                    val rest = music_string.substring(0, 1)\n        \
    \            val rest = music_string.substring(1).split(\".\").map(music_string\
    \ => {\n                        val rest = music_string.substring(0, 1)\n    \
    \                    val rest = music_string.substring(1).split(\"|\").map(music_string\
    \ => {\n                            val rest = music_string.substring(0, 1)\n\
    \                            val rest = music_string.substring(1).split(\"o\"\
    ).map(music_string => {\n                                val rest = music_string.substring(0,\
    \ 1)\n                                val rest = music_string.substring(1).split(\"\
    .\").map(music_string => {\n                                    val rest = music_string.substring(0,\
    \ 1)\n                                    val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                        val rest =\
    \ music_string.substring(0, 1)\n                                        val rest\
    \ = music_string.substring(1).split(\"o\").map(music_string => {\n           \
    \                                 val rest = music_string.substring(0, 1)\n  \
    \                                          val rest = music_string.substring(1).split(\"\
    .\").map(music_string => {\n                                                val\
    \ rest = music_string.substring(0, 1)\n                                      \
    \          val rest = music_string.substring(1).split(\"|\").map(music_string\
    \ => {\n                                                    val rest = music_string.substring(0,\
    \ 1)\n                                                    val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \       val rest = music_string.substring(0, 1)\n                            \
    \                            val rest = music_string.substring(1).split(\".\"\
    ).map(music_string => {\n                                                    \
    \        val rest = music_string.substring(0, 1)\n                           \
    \                                 val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \               val rest = music_string.substring(0, 1)\n                    \
    \                                            val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                   val rest = music_string.substring(0, 1)\n                \
    \                                                    val rest = music_string.substring(1).split(\"\
    .\").map(music_string => {\n                                                 \
    \                       val rest = music_string.substring(0, 1)\n            \
    \                                                            val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \                           val rest = music_string.substring(0, 1)\n        \
    \                                                                    val rest\
    \ = music_string.substring(1).split(\"o\").map(music_string => {\n           \
    \                                                                     val rest\
    \ = music_string.substring(0, 1)\n                                           \
    \                                     val rest = musi\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0mc6c_fe.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp0mc6c_fe.scala:61:0 ----------------------------\e[0m\e[0m\n\e[31m61\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0mc6c_fe.scala:50:84 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m                                                    \
    \                            \e[33mval\e[0m \e[36mrest\e[0m = musi\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mrest is already defined as\
    \ \e[33mvalue\e[0m \e[35mrest\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_list_size\
    \ = music_list.size\n        val music_list_size_int = music_list_size.asInstanceOf[Int]\n\
    \        val music_list_size_long = music_list_size_int.asInstanceOf[Long]\n \
    \       val music_list_size_long_int = music_list_size_long.asInstanceOf[Int]\n\
    \        val music_list_size_long_long_int = music_list_size_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_int = music_list_size_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_int = music_list_size_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_int = music_list_size_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw8i_wlli.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_long_long_long_long_long_long_long_long_long_int\e\
    [0m = music_list_size_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_long_long_long_long_long_long_long_long_long_int\
    \ is already defined as \e[33mvalue\e[0m \e[35mmusic_list_size_long_long_long_long_long_long_long_long_long_long_int\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8i_wlli.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int\e\
    [0m = music_list_size_long_long_long_long_long_\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpw8i_wlli.scala:24:69 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_long_long_long_long_long_long_int\e\
    [0m = music_list_size_long_long_long_long_long_long_long_int.asInstanceOf[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m                                                  \
    \                   ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mmusic"
  stdout: ''
  timestamp: 1659799998
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split(\"\\\\|\").map(_.toInt)\n        val\
    \ notes_length = notes.length\n        val notes_beats = notes.map(n => n / 4)\n\
    \        val notes_beats_length = notes_beats.length\n        val notes_beats_sum\
    \ = notes_beats.sum\n        val notes_beats_sum_length = notes_beats_sum.length\n\
    \        val notes_beats_sum_length = notes_beats_sum_length / 4\n        val\
    \ notes_beats_sum_length = notes_beats_sum_length.toInt\n        val notes_beats_sum_length\
    \ = notes_beats_sum_length * 4\n        val notes_beats_sum_length = notes_beats_sum_length.toInt\n\
    \        val notes_beats_sum_length = notes_beats_sum_length * 4\n        val\
    \ notes_beats_sum_length = notes_beats_sum_length * 4\n        val notes_beats_sum_length\
    \ = notes_beats_sum_length * 4\n        val notes_beats_sum_length = notes_beats_sum_length\
    \ * 4\n        val notes_beats_sum_length = notes_beats_sum_length * 4\n     \
    \   val notes_beats_sum_length = notes_beats_sum_length * 4\n        val notes_beats_sum_length\
    \ = notes_beats_sum_length * 4\n        val notes_beats_sum_length = notes_beats_sum_length\
    \ * 4\n        val notes_beats_sum_length = notes_beats_sum_length * 4\n     \
    \   val notes_beats_sum_length = notes_beats_sum_length * 4\n        val notes_beats_sum_length\
    \ = notes_beats_sum_length * 4\n        val notes_beats_sum_length = notes_beats_sum_length\
    \ * 4\n        val notes_beats_sum_length = notes_beats_sum_length * 4\n     \
    \   val notes_beats_sum_length = notes_beats_sum_length * 4\n        val notes_beats_sum_length\
    \ = notes_beats_sum_length * 4\n        val notes_beats_sum_length = notes_beats_sum_length\
    \ * 4\n        val notes_beats_sum_length = notes_beats_sum_length * 4\n     \
    \   val notes_beats_sum_length = notes_beats_sum_length * 4\n        val notes_beats_sum_length\
    \ = notes_beats_sum_length * 4\n        val notes_beats_sum_length = notes_beats_sum_length\
    \ * 4\n        val notes_beats_sum_length = notes_beats_sum_length * 4\n     \
    \   val notes_beats_sum_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnk0v03xf.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnk0v03xf.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotes_beats_sum_length\e[0m = notes_beats_sum_length / \e[31m4\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_sum_length is already defined as \e[33mvalue\e\
    [0m \e[35mnotes_beats_sum_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnk0v03xf.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_sum_length\e\
    [0m = notes_beats_sum_length.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_sum_length is already defined as \e[33mvalue\e\
    [0m \e[35mnotes_beats_sum_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnk0v03xf.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_sum_length\e\
    [0m = notes_beats_sum_length * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_sum_length is already defined as \e[33mvalue\e\
    [0m \e[35mnotes_beats_sum_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnk0v03xf.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_sum_length\e\
    [0m = notes_beats_sum_length.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_sum_length is alr"
  stdout: ''
  timestamp: 1659799999
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val beats = rest.split(\"|\").map(rest =>\
    \ rest.split(\"o\").length).sum\n            beats\n        }).toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpenxozcxu.scala:19:11\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m15 |\e[0m            \e\
    [33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e[0m, \e[31m1\e\
    [0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mrest\e[0m = music_string.substring(\e\
    [31m1\e[0m, music_string.length)\n\e[31m17 |\e[0m            \e[33mval\e[0m \e\
    [36mbeats\e[0m = rest.split(\e[31m\"|\"\e[0m).map(\e[36mrest\e[0m => rest.split(\e\
    [31m\"o\"\e[0m).length).sum\n\e[31m18 |\e[0m            beats\n\e[31m19 |\e[0m\
    \        }).toList\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m     \
    \   Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required: List[\e\
    [1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799998
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_length\
    \ = notes.length\n        val notes_array = notes.map(_.toInt).toArray\n     \
    \   val notes_array_length = notes_array.length\n        val notes_array_sorted\
    \ = notes_array.sortWith(_ < _)\n        val notes_array_sorted_length = notes_array_sorted.length\n\
    \        val notes_array_sorted_length = notes_array_sorted_length / 4\n     \
    \   val notes_array_sorted_length_2 = notes_array_sorted_length / 2\n        val\
    \ notes_array_sorted_length_3 = notes_array_sorted_length / 3\n        val notes_array_sorted_length_4\
    \ = notes_array_sorted_length / 4\n        val notes_array_sorted_length_5 = notes_array_sorted_length\
    \ / 5\n        val notes_array_sorted_length_6 = notes_array_sorted_length / 6\n\
    \        val notes_array_sorted_length_7 = notes_array_sorted_length / 7\n   \
    \     val notes_array_sorted_length_8 = notes_array_sorted_length / 8\n      \
    \  val notes_array_sorted_length_9 = notes_array_sorted_length / 9\n        val\
    \ notes_array_sorted_length_10 = notes_array_sorted_length / 10\n        val notes_array_sorted_length_11\
    \ = notes_array_sorted_length / 11\n        val notes_array_sorted_length_12 =\
    \ notes_array_sorted_length / 12\n        val notes_array_sorted_length_13 = notes_array_sorted_length\
    \ / 13\n        val notes_array_sorted_length_14 = notes_array_sorted_length /\
    \ 14\n        val notes_array_sorted_length_15 = notes_array_sorted_length / 15\n\
    \        val notes_array_sorted_length_16 = notes_array_sorted_length / 16\n \
    \       val notes_array_sorted_length_17 = notes_array_sorted_length / 17\n  \
    \      val notes_array_sorted_length_18 = notes_array_sorted_length / 18\n   \
    \     val notes_array_sorted_length_19 = notes_array_sorted_length / 19\n    \
    \    val notes_array_sorted_length_20 = notes_array_sorted_length / 20\n     \
    \   val notes_array_sorted_length_21 = notes_array_sorted_length / 21\n      \
    \  val notes_array_sorted_length_22 = notes_array_sorted_length / 22\n       \
    \ val notes_array_sorted_length_23 = notes_array_sorted_length / 23\n        val\
    \ notes_array_sorted_length_24 = notes_array_sorted_length / 24\n        val notes_array_sorted_length_25\
    \ = notes_array_sorted_length / 25\n        val notes_array_sorted_length_26 =\
    \ notes_array_sorted_length / 26\n        val notes_array_sorted_length_27\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0yz2y8hn.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0yz2y8hn.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotes_array_sorted_length\e[0m = notes_array_sorted_length / \e[31m4\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array_sorted_length is already defined as \e[33mvalue\e\
    [0m \e[35mnotes_array_sorted_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0yz2y8hn.scala:47:5 ---------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799997
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\"\\\\|\").map(music_string => {\n           \
    \ val music_notes = music_string.split(\"o\").map(music_note => {\n          \
    \      val note = music_note.trim\n                val beats = note.length / 4\n\
    \                beats\n            })\n            music_notes.sum\n        })\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjloxf7xg.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m  \
    \      ^\e[0m\n\e[31m   |\e[0m        Found:    Array[Int]\n\e[31m   |\e[0m  \
    \      Required: List[Long]\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mmusic_notes\e\
    [0m = music_string.split(\e[31m\"o\"\e[0m).map(\e[36mmusic_note\e[0m => {\n\e\
    [31m16 |\e[0m                \e[33mval\e[0m \e[36mnote\e[0m = music_note.trim\n\
    \e[31m17 |\e[0m                \e[33mval\e[0m \e[36mbeats\e[0m = note.length /\
    \ \e[31m4\e[0m\n\e[31m18 |\e[0m                beats\n\e[31m19 |\e[0m        \
    \    })\n\e[31m20 |\e[0m            music_notes.sum\n\e[31m21 |\e[0m        })\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799998
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.substring(0,\
    \ 1)\n                val rest = music_string.substring(1)\n                val\
    \ beats = rest.split(\"o\").map(music_string => {\n                    val beat\
    \ = music_string.substring(0, 1)\n                    val rest = music_string.substring(1)\n\
    \                    val beats = rest.split(\"|\").map(music_string => {\n   \
    \                     val beat = music_string.substring(0, 1)\n              \
    \          val rest = music_string.substring(1)\n                        val beats\
    \ = rest.split(\"|\").map(music_string => {\n                            val beat\
    \ = music_string.substring(0, 1)\n                            val rest = music_string.substring(1)\n\
    \                            val beats = rest.split(\"|\").map(music_string =>\
    \ {\n                                val beat = music_string.substring(0, 1)\n\
    \                                val rest = music_string.substring(1)\n      \
    \                          val beats = rest.split(\"|\").map(music_string => {\n\
    \                                    val beat = music_string.substring(0, 1)\n\
    \                                    val rest = music_string.substring(1)\n  \
    \                                  val beats = rest.split(\"|\").map(music_string\
    \ => {\n                                        val beat = music_string.substring(0,\
    \ 1)\n                                        val rest = music_string.substring(1)\n\
    \                                        val beats = rest.split(\"|\").map(music_string\
    \ => {\n                                            val beat = music_string.substring(0,\
    \ 1)\n                                            val rest = music_string.substring(1)\n\
    \                                            val beats = rest.split(\"|\").map(music_string\
    \ => {\n                                                val beat = music_string.substring(0,\
    \ 1)\n                                                val rest = music_string.substring(1)\n\
    \                                                val beats = rest.split(\"|\"\
    ).map(music_string => {\n                                                    val\
    \ beat = music_string.substring(0, 1)\n                                      \
    \              val rest = music_string.substring(1)\n                        \
    \                            val beats = rest.split(\"|\").map(music_string =>\
    \ {\n                                                        val beat = music_string.substring(0,\
    \ 1)\n                                                        val rest = music_string.substring(1)\n\
    \                                                        val beats = rest.split(\"\
    |\").map(music_string => {\n                                                 \
    \           val beat = music_string.substring(0, 1)\n                        \
    \                                    val rest = music_string.substring(1)\n  \
    \                                                          val beats = rest.split(\"\
    |\").map(music_string => {\n                                                 \
    \               val beat = music_string.substring(0, 1)\n                    \
    \                                            val rest = music_string.substring(1)\n\
    \                                                                val beats = rest.split(\"\
    |\").map(music_string => {\n                                                 \
    \                   val beat = music_string.substring(0, 1)\n                \
    \                                                    val rest = music_string.substring(1)\n\
    \                                                                    val beats\
    \ = rest.split(\"\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp51k_7cll.scala:58:91 -----------------------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m                                                    \
    \                \e[33mval\e[0m \e[36mbeats\e[0m = rest.split(\"\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \                    unclosed string literal\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp51k_7cll.scala:60:4 ----------------------------\e[0m\e[0m\n\e[31m60\
    \ |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e\
    [35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')'\
    \ expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp51k_7cll.scala:69:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n3 errors found\n"
  stdout: ''
  timestamp: 1659799994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.substring(0,\
    \ 1)\n                val rest = music_string.substring(1)\n                val\
    \ beats = rest.split(\"o\").map(music_string => {\n                    val beat\
    \ = music_string.substring(0, 1)\n                    val rest = music_string.substring(1)\n\
    \                    val beats = rest.split(\"|\").map(music_string => {\n   \
    \                     val beat = music_string.substring(0, 1)\n              \
    \          val rest = music_string.substring(1)\n                        val beats\
    \ = rest.split(\"o\").map(music_string => {\n                            val beat\
    \ = music_string.substring(0, 1)\n                            val rest = music_string.substring(1)\n\
    \                            val beats = rest.split(\"|\").map(music_string =>\
    \ {\n                                val beat = music_string.substring(0, 1)\n\
    \                                val rest = music_string.substring(1)\n      \
    \                          val beats = rest.split(\"o\").map(music_string => {\n\
    \                                    val beat = music_string.substring(0, 1)\n\
    \                                    val rest = music_string.substring(1)\n  \
    \                                  val beats = rest.split(\"|\").map(music_string\
    \ => {\n                                        val beat = music_string.substring(0,\
    \ 1)\n                                        val rest = music_string.substring(1)\n\
    \                                        val beats = rest.split(\"o\").map(music_string\
    \ => {\n                                            val beat = music_string.substring(0,\
    \ 1)\n                                            val rest = music_string.substring(1)\n\
    \                                            val beats = rest.split(\"|\").map(music_string\
    \ => {\n                                                val beat = music_string.substring(0,\
    \ 1)\n                                                val rest = music_string.substring(1)\n\
    \                                                val beats = rest.split(\"o\"\
    ).map(music_string => {\n                                                    val\
    \ beat = music_string.substring(0, 1)\n                                      \
    \              val rest = music_string.substring(1)\n                        \
    \                            val beats = rest.split(\"|\").map(music_string =>\
    \ {\n                                                        val beat = music_string.substring(0,\
    \ 1)\n                                                        val rest = music_string.substring(1)\n\
    \                                                        val beats = rest.split(\"\
    o\").map(music_string => {\n                                                 \
    \           val beat = music_string.substring(0, 1)\n                        \
    \                                    val rest = music_string.substring(1)\n  \
    \                                                          val beats = rest.split(\"\
    |\").map(music_string => {\n                                                 \
    \               val beat = music_string.substring(0, 1)\n                    \
    \                                            val rest = music_string.substring(1)\n\
    \                                                                val beats = rest.split(\"\
    o\").map(music_string => {\n                                                 \
    \                   val beat = music_string.substring(0, 1)\n                \
    \                                                    val rest = music_string.substring(1)\n\
    \                                                                    val beats\
    \ = rest.split(\"\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpa9ls87o5.scala:58:91 -----------------------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m                                                    \
    \                \e[33mval\e[0m \e[36mbeats\e[0m = rest.split(\"\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \                    unclosed string literal\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpa9ls87o5.scala:60:4 ----------------------------\e[0m\e[0m\n\e[31m60\
    \ |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e\
    [35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')'\
    \ expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa9ls87o5.scala:69:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n3 errors found\n"
  stdout: ''
  timestamp: 1659799995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.charAt(0).toLowerCase\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.charAt(0).toLowerCase\n\
    \                val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                    val rest = music_string.charAt(0).toLowerCase\n  \
    \                  val rest = music_string.substring(1).split(\"|\").map(music_string\
    \ => {\n                        val rest = music_string.charAt(0).toLowerCase\n\
    \                        val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                            val rest = music_string.charAt(0).toLowerCase\n\
    \                            val rest = music_string.substring(1).split(\"|\"\
    ).map(music_string => {\n                                val rest = music_string.charAt(0).toLowerCase\n\
    \                                val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                    val rest = music_string.charAt(0).toLowerCase\n\
    \                                    val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                        val rest =\
    \ music_string.charAt(0).toLowerCase\n                                       \
    \ val rest = music_string.substring(1).split(\"o\").map(music_string => {\n  \
    \                                          val rest = music_string.charAt(0).toLowerCase\n\
    \                                            val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                val\
    \ rest = music_string.charAt(0).toLowerCase\n                                \
    \                val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                                                    val rest = music_string.charAt(0).toLowerCase\n\
    \                                                    val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \       val rest = music_string.charAt(0).toLowerCase\n                      \
    \                                  val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \           val rest = music_string.charAt(0).toLowerCase\n                  \
    \                                          val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \               val rest = music_string.charAt(0).toLowerCase\n              \
    \                                                  val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                   val rest = music_string.charAt(0).toLowerCase\n          \
    \                                                          val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \                       val rest = music_string.charAt(0).toLowerCase\n      \
    \                                                                  val rest =\
    \ music_string.substring(1).split(\"o\").map(music_string => {\n             \
    \                                                               val rest = music_string.charAt(0).toLowerCase\n\
    \                                                                            \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnrr_r5v7.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpnrr_r5v7.scala:59:0 ----------------------------\e[0m\e[0m\n\e[31m59\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnrr_r5v7.scala:15:46 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mnote\e[0m = music_string.charAt(\e\
    [31m0\e[0m).toLowerCase\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       value toLowerCase is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnrr_r5v7.scala:17:50 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mbeat\e[0m = music_string.charAt(\e\
    [31m0\e[0m).toLowerCase\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           value toLowerCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnrr_r5v7.scala:19:54\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                    \e[33mval\e\
    [0m \e[36mrest\e[0m = music_string.charAt(\e[31m0\e[0m).toLowerCase\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnrr_r5v7.scala:21:58\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                        \e\
    [33mval\e[0m \e[36mrest\e[0m = music_string.charAt(\e[31m0\e[0m).toLowerCase\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnrr_r5v7.scala:23:62\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e["
  stdout: ''
  timestamp: 1659800000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_count\
    \ = notes.length\n        val notes_last_beats = notes.map(x => x.split(\"o\"\
    ).length).sum\n        val notes_last_beats_count = notes_last_beats / notes_count\n\
    \        val notes_last_beats_count_rounded = notes_last_beats_count.toInt\n \
    \       val notes_last_beats_count_rounded_to_int = notes_last_beats_count_rounded\
    \ + 1\n        val notes_last_beats_count_rounded_to_int = notes_last_beats_count_rounded\
    \ + 1\n        val notes_last_beats_count_rounded_to_int = notes_last_beats_count_rounded\
    \ + 1\n        val notes_last_beats_count_rounded_to_int = notes_last_beats_count_rounded\
    \ + 1\n        val notes_last_beats_count_rounded_to_int = notes_last_beats_count_rounded\
    \ + 1\n        val notes_last_beats_count_rounded_to_int = notes_last_beats_count_rounded\
    \ + 1\n        val notes_last_beats_count_rounded_to_int = notes_last_beats_count_rounded\
    \ + 1\n        val notes_last_beats_count_rounded_to_int = notes_last_beats_count_rounded\
    \ + 1\n        val notes_last_beats_count_rounded_to_int = notes_last_beats_count_rounded\
    \ + 1\n        val notes_last_beats_count_rounded_to_int = notes_last_beats_count_rounded\
    \ + 1\n        val notes_last_beats_count_rounded_to_int = notes_last_beats_count_rounded\
    \ + 1\n        val notes_last_beats_count_rounded_to_int = notes_last_beats_count_rounded\
    \ + 1\n        val notes_last_beats_count_rounded_to_int = notes_last_beats_count_rounded\
    \ + 1\n        val notes_last_beats_count_rounded_to_int = notes_last_beats_count_rounded\
    \ + 1\n        val notes_last_beats_count_rounded_to_int = notes_last_beats_count_rounded\
    \ + 1\n        val notes_last_beats_count_rounded_to_int = notes_last_beats_count_rounded\
    \ + 1\n        val notes_last_beats_count_rounded_to_int = notes_last_beats_count_rounded\
    \ + 1\n        val notes_last_beats_count_rounded_to_int = notes_last_beats_count_rounded\
    \ + 1\n        val notes_last_beats_count_rounded_to_int = notes_last_beats_count_rounded\
    \ + 1\n        val notes_last_beats_count_rounded_to_int = notes_last_beats_count_rounded\
    \ + 1\n        val notes_last_beats_count_rounded_to_int = notes_last_beats_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp997iwww.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnotes_last_beats_count_rounded_to_int\e\
    [0m = notes_last_beats_count_rounded + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_last_beats_count_rounded_to_int is already defined as\
    \ \e[33mvalue\e[0m \e[35mnotes_last_beats_count_rounded_to_int\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp997iwww.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotes_last_beats_count_rounded_to_int\e[0m = notes_last_beats_count_rounded\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_last_beats_count_rounded_to_int is already defined as\
    \ \e[33mvalue\e[0m \e[35mnotes_last_beats_count_rounded_to_int\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp997iwww.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotes_last_beats_count_rounded_to_int\e[0m = notes_last_beats_count_rounded\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_last_beats_count_rounded_to_int is already defined as\
    \ \e[33mvalue\e[0m \e[35mnotes_last_beats_count_rounded_to_int\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp997iwww.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotes_last_beats_count_rounded_to_int\e[0m = notes_last_beats_count_rounded\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799998
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val beats = rest.split(\"|\").map(music_string\
    \ => {\n                val beat = music_string.substring(0, 1)\n            \
    \    val rest = music_string.substring(1, music_string.length)\n             \
    \   beat.toLong * 4\n            }).sum\n            note.toLong * beats\n   \
    \     }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr3cmgeqy.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m15 |\e[0m\
    \            \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e\
    [0m, \e[31m1\e[0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mrest\e[0m\
    \ = music_string.substring(\e[31m1\e[0m, music_string.length)\n\e[31m17 |\e[0m\
    \            \e[33mval\e[0m \e[36mbeats\e[0m = rest.split(\e[31m\"|\"\e[0m).map(\e\
    [36mmusic_string\e[0m => {\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mbeat\e\
    [0m = music_string.substring(\e[31m0\e[0m, \e[31m1\e[0m)\n\e[31m19 |\e[0m    \
    \            \e[33mval\e[0m \e[36mrest\e[0m = music_string.substring(\e[31m1\e\
    [0m, music_string.length)\n\e[31m20 |\e[0m                beat.toLong * \e[31m4\e\
    [0m\n\e[31m21 |\e[0m            }).sum\n\e[31m22 |\e[0m            note.toLong\
    \ * beats\n\e[31m23 |\e[0m        }).sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799998
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \").map(_.toUpperCase).toList\n\
    \        val notes = music_list.filter(x => x != \"O\" && x != \"|\")\n      \
    \  val notes_length = notes.length\n        val notes_beats = notes.map(x => x.toString.length).sum\n\
    \        val notes_beats_length = notes_beats / notes_length\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length.toLong\n        val\
    \ notes_beats_length = notes_beats_length / 2\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length\
    \ / 1\n        val notes_beats_length = notes_beats_length.toLong\n        val\
    \ notes_beats_length = notes_beats_length / 4\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length.toLong\n        val\
    \ notes_beats_length = notes_beats_length / 4\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length / 4\n        val notes_beats_length\
    \ = notes_beats_length / 4\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length / 4\n        val notes_beats_length\
    \ = notes_beats_length / 4\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length / 4\n        val notes_beats_length\
    \ = notes_beats_length / 4\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length / 4\n        val notes_beats_length\
    \ = notes_beats_length / 4\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length / 4\n        val notes_beats_length\
    \ = notes_beats_length / 4\n        val notes_beats_length = notes_beats_length\
    \ / 4\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptg1m3zed.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptg1m3zed.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length / \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptg1m3zed.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptg1m3zed.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptg1m3zed.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[3"
  stdout: ''
  timestamp: 1659799998
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \")\n        val music_list_size\
    \ = music_list.size\n        val music_list_size_2 = music_list_size / 2\n   \
    \     val music_list_size_3 = music_list_size_2 / 2\n        val music_list_size_4\
    \ = music_list_size_3 / 2\n        val music_list_size_5 = music_list_size_4 /\
    \ 2\n        val music_list_size_6 = music_list_size_5 / 2\n        val music_list_size_7\
    \ = music_list_size_6 / 2\n        val music_list_size_8 = music_list_list_size_7\
    \ / 2\n        val music_list_size_9 = music_list_size_8 / 2\n        val music_list_size_10\
    \ = music_list_size_9 / 2\n        val music_list_size_11 = music_list_size_10\
    \ / 2\n        val music_list_size_12 = music_list_size_11 / 2\n        val music_list_size_13\
    \ = music_list_size_12 / 2\n        val music_list_size_14 = music_list_size_13\
    \ / 2\n        val music_list_size_15 = music_list_size_14 / 2\n        val music_list_size_16\
    \ = music_list_size_15 / 2\n        val music_list_size_17 = music_list_size_16\
    \ / 2\n        val music_list_size_18 = music_list_size_17 / 2\n        val music_list_size_19\
    \ = music_list_size_18 / 2\n        val music_list_size_20 = music_list_size_19\
    \ / 2\n        val music_list_size_21 = music_list_size_20 / 2\n        val music_list_size_22\
    \ = music_list_size_21 / 2\n        val music_list_size_23 = music_list_size_22\
    \ / 2\n        val music_list_size_24 = music_list_size_23 / 2\n        val music_list_size_25\
    \ = music_list_size_24 / 2\n        val music_list_size_26 = music_list_size_25\
    \ / 2\n        val music_list_size_27 = music_list_size_26 / 2\n        val music_list_size_28\
    \ = music_list_size_27 / 2\n        val music_list_size_29 = music_list_size_28\
    \ / 2\n        val music_list_size_30 = music_list_size_29 / 2\n        val music_list_size_31\
    \ = music_list_size_30 / 2\n        val music_list_size_32 = music_list_size_31\
    \ / 2\n        val music_list_size_33 = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpg5ceu5i2.scala:47:32 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_33\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e\
    [0m                                expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg5ceu5i2.scala:22:32\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg5ceu5i2.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799997
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.substring(0,\
    \ 1)\n                val rest = music_string.substring(1)\n                beat.toLong\
    \ * rest.length\n            }).sum\n            note -> beats\n        }).groupBy(music_string\
    \ => {\n            music_string._1\n        }).values.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn2f7iecf.scala:24:18\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m15 |\e[0m            \e\
    [33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e[0m, \e[31m1\e\
    [0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m = music_string.substring(\e\
    [31m1\e[0m).split(\e[31m\"|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m17\
    \ |\e[0m                \e[33mval\e[0m \e[36mbeat\e[0m = music_string.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mrest\e\
    [0m = music_string.substring(\e[31m1\e[0m)\n\e[31m19 |\e[0m                beat.toLong\
    \ * rest.length\n\e[31m20 |\e[0m            }).sum\n\e[31m21 |\e[0m          \
    \  note -> beats\n\e[31m22 |\e[0m        }).groupBy(\e[36mmusic_string\e[0m =>\
    \ {\n\e[31m23 |\e[0m            music_string._1\n\e[31m24 |\e[0m        }).values.toList\n\
    \e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e\
    [1m\e[31mArray\e[0m\e[1m\e[31m[\e[0m\e[1m\e[31m(\e[0m\e[1m\e[31mString\e[0m\e\
    [1m\e[31m,\e[0m\e[1m\e[31m \e[0mLong\e[1m\e[31m)\e[0m\e[1m\e[31m]\e[0m]\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799998
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_length\
    \ = notes.length\n        val notes_beats = notes.map(x => x.split(\"o\")).map(x\
    \ => x.length)\n        val notes_beats_sum = notes_beats.sum\n        val notes_beats_length\
    \ = notes_beats.length\n        val notes_beats_sum = notes_beats.sum\n      \
    \  val notes_beats_length = notes_beats.length\n        val notes_beats_sum =\
    \ notes_beats.sum\n        val notes_beats_length = notes_beats.length\n     \
    \   val notes_beats_sum = notes_beats.sum\n        val notes_beats_length = notes_beats.length\n\
    \        val notes_beats_sum = notes_beats.sum\n        val notes_beats_length\
    \ = notes_beats.length\n        val notes_beats_sum = notes_beats.sum\n      \
    \  val notes_beats_length = notes_beats.length\n        val notes_beats_sum =\
    \ notes_beats.sum\n        val notes_beats_length = notes_beats.length\n     \
    \   val notes_beats_sum = notes_beats.sum\n        val notes_beats_length = notes_beats.length\n\
    \        val notes_beats_sum = notes_beats.sum\n        val notes_beats_length\
    \ = notes_beats.length\n        val notes_beats_sum = notes_beats.sum\n      \
    \  val notes_beats_length = notes_beats.length\n        val notes_beats_sum =\
    \ notes_beats.sum\n        val notes_beats_length = notes_beats.length\n     \
    \   val notes_beats_sum = notes_beats.sum\n        val notes_beats_length = notes_beats.length\n\
    \        val notes_beats_sum = notes_beats.sum\n        val notes_beats_length\
    \ = notes_beats.length\n        val notes_beats_sum = notes_beats.sum\n      \
    \  val notes_beats_length = notes_beats.length\n        val notes_beats_sum =\
    \ notes_beats.sum\n        val notes_beats_length = notes_beats.length\n     \
    \   val notes_beats_sum = notes_beats.sum\n        val notes_beats_length = notes_beats.length\n\
    \        val notes_beats_sum = notes_beats.sum\n        val notes_beats_length\
    \ = notes_beats.length\n        val notes_beats_sum = notes_beats.sum\n      \
    \  val notes_beats_length = notes_beats.length\n        val notes_beats_sum =\
    \ notes_beats.sum\n        val notes_beats_length = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmptciexobp.scala:54:32 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e\
    [0m                                expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptciexobp.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotes_beats_sum\e[0m = notes_beats.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_sum is already defined as \e[33mvalue\e[0m \e\
    [35mnotes_beats_sum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptciexobp.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptciexobp.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_sum\e[0m = notes_beats.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnotes_beats_sum is already defined as \e[33mvalue\e[0m \e[35mnotes_beats_sum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptciexobp.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m = notes_beats.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnotes_"
  stdout: ''
  timestamp: 1659799998
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \").map(_.toUpperCase()).filter(_.nonEmpty).toList\n\
    \        val notes = music_list.zipWithIndex.filter(_._2 % 2 == 0).map(_._1).distinct\n\
    \        val beats = music_list.zipWithIndex.filter(_._2 % 2 == 1).map(_._1).distinct\n\
    \        val note_to_beat = music_list.zipWithIndex.filter(_._2 % 2 == 0).map(_._1).distinct.map(_.toLong)\n\
    \        val note_to_beat = music_list.zipWithIndex.filter(_._2 % 2 == 1).map(_._1).distinct.map(_.toLong)\n\
    \        val note_to_beat = music_list.zipWithIndex.filter(_._2 % 2 == 0).map(_._1).distinct.map(_.toLong)\n\
    \        val note_to_beat = music_list.zipWithIndex.filter(_._2 % 2 == 1).map(_._1).distinct.map(_.toLong)\n\
    \        val note_to_beat = music_list.zipWithIndex.filter(_._2 % 2 == 0).map(_._1).distinct.map(_.toLong)\n\
    \        val note_to_beat = music_list.zipWithIndex.filter(_._2 % 2 == 1).map(_._1).distinct.map(_.toLong)\n\
    \        val note_to_beat = music_list.zipWithIndex.filter(_._2 % 2 == 0).map(_._1).distinct.map(_.toLong)\n\
    \        val note_to_beat = music_list.zipWithIndex.filter(_._2 % 2 == 1).map(_._1).distinct.map(_.toLong)\n\
    \        val note_to_beat = music_list.zipWithIndex.filter(_._2 % 2 == 0).map(_._1).distinct.map(_.toLong)\n\
    \        val note_to_beat = music_list.zipWithIndex.filter(_._2 % 2 == 1).map(_._1).distinct.map(_.toLong)\n\
    \        val note_to_beat = music_list.zipWithIndex.filter(_._2 % 2 == 0).map(_._1).distinct.map(_.toLong)\n\
    \        val note_to_beat = music_list.zipWithIndex.filter(_._2 % 2 == 1).map(_._1).distinct.map(_.toLong)\n\
    \        val note_to_beat = music_list.zipWithIndex.filter(_._2 % 2 == 0).map(_._1).distinct.map(_.toLong)\n\
    \        val note_to_beat = music_list.zipWithIndex.filter(_._2 % 2 == 1).map(_._1).distin\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2o8_bjny.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnote_to_beat\e[0m = music_list.zipWithIndex.filter(_._2\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).map(_._1).distinct.map(_.toLong)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnote_to_beat is already defined as \e[33mvalue\e[0m \e[35mnote_to_beat\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2o8_bjny.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mnote_to_beat\e[0m = music_list.zipWithIndex.filter(_._2\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).map(_._1).distinct.map(_.toLong)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnote_to_beat is already defined as \e[33mvalue\e[0m \e[35mnote_to_beat\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2o8_bjny.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnote_to_beat\e[0m = music_list.zipWithIndex.filter(_._2\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).map(_._1).distinct.map(_.toLong)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnote_to_beat is already defined as \e[33mvalue\e[0m \e[35mnote_to_beat\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2o8_bjny.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnote_to_beat\e[0m = music_list.zipWithIndex.filter(_._2\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).map(_._1).distinct.map(_.toLong)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659800007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val beats = rest.split(\"|\").map(music_string\
    \ => {\n                val beat = music_string.substring(0, 1)\n            \
    \    val rest = music_string.substring(1, music_string.length)\n             \
    \   beat.toLong * 4\n            }).sum\n            note -> beats\n        }).map(music_string\
    \ => {\n            music_string._1 -> music_string._2\n        }).toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpet_h4krc.scala:25:11\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m15 |\e[0m            \e\
    [33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e[0m, \e[31m1\e\
    [0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mrest\e[0m = music_string.substring(\e\
    [31m1\e[0m, music_string.length)\n\e[31m17 |\e[0m            \e[33mval\e[0m \e\
    [36mbeats\e[0m = rest.split(\e[31m\"|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\
    \e[31m18 |\e[0m                \e[33mval\e[0m \e[36mbeat\e[0m = music_string.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m19 |\e[0m                \e[33mval\e[0m \e[36mrest\e\
    [0m = music_string.substring(\e[31m1\e[0m, music_string.length)\n\e[31m20 |\e\
    [0m                beat.toLong * \e[31m4\e[0m\n\e[31m21 |\e[0m            }).sum\n\
    \e[31m22 |\e[0m            note -> beats\n\e[31m23 |\e[0m        }).map(\e[36mmusic_string\e\
    [0m => {\n\e[31m24 |\e[0m            music_string._1 -> music_string._2\n\e[31m25\
    \ |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m\
    \        Found:    List[\e[1m\e[31m(\e[0m\e[1m\e[31mString\e[0m\e[1m\e[31m,\e\
    [0m\e[1m\e[31m \e[0mLong\e[1m\e[31m)\e[0m]\n\e[31m   |\e[0m        Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800006
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \").map(music_char => music_char.toInt)\n\
    \        val music_list_size = music_list.size\n        val music_list_size_half\
    \ = music_list_size / 2\n        val music_list_size_quarter = music_list_size\
    \ / 4\n        val music_list_size_whole = music_list_size\n        val music_list_size_whole_half\
    \ = music_list_size_whole / 2\n        val music_list_size_whole_quarter = music_list_size_whole\
    \ / 4\n        val music_list_size_whole_whole = music_list_size_whole / 8\n \
    \       val music_list_size_whole_whole_half = music_list_size_whole_whole / 2\n\
    \        val music_list_size_whole_whole_quarter = music_list_size_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole = music_list_size_whole_whole\
    \ / 8\n        val music_list_size_whole_whole_whole_half = music_list_size_whole_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_whole_quarter = music_list_size_whole_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole_whole = music_list_size_whole_whole_whole\
    \ / 8\n        val music_list_size_whole_whole_whole_half = music_list_size_whole_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_whole_quarter = music_list_size_whole_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole_whole = music_list_size_whole_whole_whole\
    \ / 8\n        val music_list_size_whole_whole_whole_half = music_list_size_whole_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_whole_quarter = music_list_size_whole_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole_whole = music_list_size_whole_whole_whole\
    \ / 8\n        val music_list_size_whole_whole_whole_half = music_list_size_whole_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_whole_quarter = music_list_size_whole_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole_whole = music_list_size_whole_whole_whole\
    \ / \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\"\
    )).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphwdci1z4.scala:36:89 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_whole_whole_whole_whole\e\
    [0m = music_list_size_whole_whole_whole / \n\e[31m\e[31m   |\e[0m            \
    \                                                                            \
    \ ^\e[0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphwdci1z4.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_whole_whole_whole_half\e\
    [0m = music_list_size_whole_whole_whole / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_whole_whole_whole_half is already defined\
    \ as \e[33mvalue\e[0m \e[35mmusic_list_size_whole_whole_whole_half\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphwdci1z4.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_whole_whole_whole_quarter\e\
    [0m = music_list_size_whole_whole_whole / \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_whole_whole_whole_quarter is already defined\
    \ as \e[33mvalue\e[0m \e[35mmusic_list_size_whole_whole_whole_quarter\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphwdci1z4.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_whole_whole_whole_whole\e\
    [0m = music_list_size_whole_whole_whole / \e[31m8\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659800007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.substring(0, 1)\n            val rest = music_string.substring(1).trim\n\
    \            val beats = rest.split(\"|\").map(rest => {\n                val\
    \ beat = rest.substring(0, 1)\n                val rest = rest.substring(1)\n\
    \                beat.toLong * 4\n            }).sum\n            note match {\n\
    \                case \"o\" => beats\n                case \"o|\" => beats / 2\n\
    \                case \".|\" => beats\n                case _ => throw new Exception(\"\
    Invalid music string\")\n            }\n        }).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpw4id8kx8.scala:19:27 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e[0m \e[36mrest\e[0m = rest.substring(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m  \
    \ |\e[0m                           Recursive \e[33mvalue\e[0m \e[35mrest\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpw4id8kx8.scala:21:14\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \     }).sum\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e[0m     \
    \         No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m      \
    \        where:    B is a type variable\n\e[31m\e[31m-- Error: /tmp/tmpw4id8kx8.scala:28:10\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m28 |\e[0m       \
    \ }).sum\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e[31m   |\e[0m          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m          where:    B is a\
    \ type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_list_size\
    \ = music_list.size\n        val music_list_size_2 = music_list_size / 2\n   \
    \     val music_list_size_3 = music_list_size_2 / 2\n        val music_list_size_4\
    \ = music_list_size_3 / 2\n        val music_list_size_5 = music_list_size_4 /\
    \ 2\n        val music_list_size_6 = music_list_size_5 / 2\n        val music_list_size_7\
    \ = music_list_size_6 / 2\n        val music_list_size_8 = music_list_size_7 /\
    \ 2\n        val music_list_size_9 = music_list_size_8 / 2\n        val music_list_size_10\
    \ = music_list_size_9 / 2\n        val music_list_size_11 = music_list_size_10\
    \ / 2\n        val music_list_size_12 = music_list_size_11 / 2\n        val music_list_size_13\
    \ = music_list_size_12 / 2\n        val music_list_size_14 = music_list_size_13\
    \ / 2\n        val music_list_size_15 = music_list_size_14 / 2\n        val music_list_size_16\
    \ = music_list_size_15 / 2\n        val music_list_size_17 = music_list_size_16\
    \ / 2\n        val music_list_size_18 = music_list_size_17 / 2\n        val music_list_size_19\
    \ = music_list_size_18 / 2\n        val music_list_size_20 = music_list_size_19\
    \ / 2\n        val music_list_size_21 = music_list_size_20 / 2\n        val music_list_size_22\
    \ = music_list_size_21 / 2\n        val music_list_size_23 = music_list_size_22\
    \ / 2\n        val music_list_size_24 = music_list_size_23 / 2\n        val music_list_size_25\
    \ = music_list_size_24 / 2\n        val music_list_size_26 = music_list_size_25\
    \ / 2\n        val music_list_size_27 = music_list_size_26 / 2\n        val music_list_size_28\
    \ = music_list_size_27 / 2\n        val music_list_size_29 = music_list_size_28\
    \ / 2\n        val music_list_size_30 = music_list_size_29 / 2\n        val music_list_size_31\
    \ = music_list_size_30 / 2\n        val music_list_size_32 = music_list_size_31\
    \ / 2\n        val music_list_\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7pcuy2n4.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp7pcuy2n4.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split('|').map(_.toInt)\n        val beats\
    \ = notes.map(n => math.ceil(n/4))\n        val notes_count = notes.map(n => math.ceil(n/2))\n\
    \        val notes_count_2 = notes.map(n => math.ceil(n/2))\n        val notes_count_3\
    \ = notes.map(n => math.ceil(n/2))\n        val notes_count_4 = notes.map(n =>\
    \ math.ceil(n/2))\n        val notes_count_5 = notes.map(n => math.ceil(n/2))\n\
    \        val notes_count_6 = notes.map(n => math.ceil(n/2))\n        val notes_count_7\
    \ = notes.map(n => math.ceil(n/2))\n        val notes_count_8 = notes.map(n =>\
    \ math.ceil(n/2))\n        val notes_count_9 = notes.map(n => math.ceil(n/2))\n\
    \        val notes_count_10 = notes.map(n => math.ceil(n/2))\n        val notes_count_11\
    \ = notes.map(n => math.ceil(n/2))\n        val notes_count_12 = notes.map(n =>\
    \ math.ceil(n/2))\n        val notes_count_13 = notes.map(n => math.ceil(n/2))\n\
    \        val notes_count_14 = notes.map(n => math.ceil(n/2))\n        val notes_count_15\
    \ = notes.map(n => math.ceil(n/2))\n        val notes_count_16 = notes.map(n =>\
    \ math.ceil(n/2))\n        val notes_count_17 = notes.map(n => math.ceil(n/2))\n\
    \        val notes_count_18 = notes.map(n => math.ceil(n/2))\n        val notes_count_19\
    \ = notes.map(n => math.ceil(n/2))\n        val notes_count_20 = notes.map(n =>\
    \ math.ceil(n/2))\n        val notes_count_21 = notes.map(n => math.ceil(n/2))\n\
    \        val notes_count_22 = notes.map(n => math.ceil(n/2))\n        val notes_count_23\
    \ = notes.map(n => math.ceil(n/2))\n        val notes_count_24 = notes.map(n =>\
    \ math.ceil(n/2))\n        val notes_count_25 = notes.map(n => math.ceil(n/2))\n\
    \        val notes_count_26 = notes.map(n => math.ceil(n/2))\n        val notes_count_27\
    \ = notes.map(n => math.ceil(n/2))\n        val notes_count_28 = note\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk16b4k78.scala:43:29 ------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mnotes_count_28\e[0m = note\n\
    \e[31m\e[31m   |\e[0m                             ^^^^\e[0m\n\e[31m   |\e[0m \
    \                            Not found: note\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpk16b4k78.scala:44:5 ---------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_notes = music_string.split(\"\\\\|\")\n        val music_notes_length\
    \ = music_notes.length\n        val music_notes_beats = music_notes.map(music_note\
    \ => music_note.length.toLong)\n        val music_notes_beats_length = music_notes_beats.sum\n\
    \        val music_notes_beats_count = music_notes_beats.length\n        val music_notes_beats_count_length\
    \ = music_notes_beats_count.toLong\n        val music_notes_beats_count_count_length\
    \ = music_notes_beats_count_length.toLong\n        val music_notes_beats_count_count_count_length\
    \ = music_notes_beats_count_count_length.toLong\n        val music_notes_beats_count_count_count_count_length\
    \ = music_notes_beats_count_count_count_length.toLong\n        val music_notes_beats_count_count_count_count_count_length\
    \ = music_notes_beats_count_count_count_count_length.toLong\n        val music_notes_beats_count_count_count_count_count_count_length\
    \ = music_notes_beats_count_count_count_count_count_length.toLong\n        val\
    \ music_notes_beats_count_count_count_count_count_count_count_length = music_notes_beats_count_count_count_count_count_count_length.toLong\n\
    \        val music_notes_beats_count_count_count_count_count_count_count_count_length\
    \ = music_notes_beats_count_count_count_count_count_count_count_length.toLong\n\
    \        val music_notes_beats_count_count_count_count_count_count_count_count_count_length\
    \ = music_notes_beats_count_count_count_count_count_count_count_count_count_length.toLong\n\
    \        val music_notes_beats_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = music_notes_beats_count_count_count_count_count_count_count_count_count_count_length.toLong\n\
    \        val music_notes_beats_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = music_notes_beats_count_count_count_count_count_count_count_count_count_count_length.toLong\n\
    \        val music_notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = music_notes_beats_count_count_count_count_count_count_count_count_count_count_count_length.toLong\n\
    \        val music_notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = music_notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_length.toLong\n\
    \        val music_notes_beats_count_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3bakrngr.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3bakrngr.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_notes_beats_count_count_count_count_count_count_count_count_count_count_count_length\e\
    [0m = music_notes_beats_count_count_count_count_count_count_count_count_count_count_length.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_beats_count_count_count_count_count_count_count_count_count_count_count_length\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  music_notes_beats_count_count_count_count_count_count_count_count_count_count_count_length\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp3bakrngr.scala:27:93 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_beats_count_count_count_count_count_count_count_count_count_length\e\
    [0m = music_notes_beats_count_count_count_count_count_count_count_count_count_length.toLong\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                     ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  music_notes_beats_count_count_count_count_count_count_count_count_count_length\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp3bakrngr.scala:28:105 -----------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m        \e[33mval\e[0m \e[36mmusic_notes_beats_count_count_count_count_count_count_count_count_count_count_count_length\e\
    [0m = music_"
  stdout: ''
  timestamp: 1659800010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.substring(0,\
    \ 1)\n                val rest = music_string.substring(1)\n                val\
    \ beats = rest.split(\"o\").map(music_string => {\n                    val beat\
    \ = music_string.substring(0, 1)\n                    val rest = music_string.substring(1)\n\
    \                    val beats = rest.split(\"|\").map(music_string => {\n   \
    \                     val beat = music_string.substring(0, 1)\n              \
    \          val rest = music_string.substring(1)\n                        val beats\
    \ = rest.split(\"o\").map(music_string => {\n                            val beat\
    \ = music_string.substring(0, 1)\n                            val rest = music_string.substring(1)\n\
    \                            val beats = rest.split(\"|\").map(music_string =>\
    \ {\n                                val beat = music_string.substring(0, 1)\n\
    \                                val rest = music_string.substring(1)\n      \
    \                          val beats = rest.split(\"o\").map(music_string => {\n\
    \                                    val beat = music_string.substring(0, 1)\n\
    \                                    val rest = music_string.substring(1)\n  \
    \                                  val beats = rest.split(\"|\").map(music_string\
    \ => {\n                                        val beat = music_string.substring(0,\
    \ 1)\n                                        val rest = music_string.substring(1)\n\
    \                                        val beats = rest.split(\"o\").map(music_string\
    \ => {\n                                            val beat = music_string.substring(0,\
    \ 1)\n                                            val rest = music_string.substring(1)\n\
    \                                            val beats = rest.split(\"|\").map(music_string\
    \ => {\n                                                val beat = music_string.substring(0,\
    \ 1)\n                                                val rest = music_string.substring(1)\n\
    \                                                val beats = rest.split(\"o\"\
    ).map(music_string => {\n                                                    val\
    \ beat = music_string.substring(0, 1)\n                                      \
    \              val rest = music_string.substring(1)\n                        \
    \                            val beats = rest.split(\"|\").map(music_string =>\
    \ {\n                                                        val beat = music_string.substring(0,\
    \ 1)\n                                                        val rest = music_string.substring(1)\n\
    \                                                        val beats = rest.split(\"\
    o\").map(music_string => {\n                                                 \
    \           val beat = music_string.substring(0, 1)\n                        \
    \                                    val rest = music_string.substring(1)\n  \
    \                                                          val beats = rest.split(\"\
    |\").map(music_string => {\n                                                 \
    \               val beat = music_string.substring(0, 1)\n                    \
    \                                            val rest = music_string.substring(1)\n\
    \                                                                val beats = rest.split(\"\
    o\").map(music_string => {\n                                                 \
    \                   val beat = music_string.substring(0, 1)\n                \
    \                                                    val rest = music_string.substring(1)\n\
    \                                                                    val beats\
    \ = rest.split(\"\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpa9ls87o5.scala:58:91 -----------------------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m                                                    \
    \                \e[33mval\e[0m \e[36mbeats\e[0m = rest.split(\"\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \                    unclosed string literal\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpa9ls87o5.scala:60:4 ----------------------------\e[0m\e[0m\n\e[31m60\
    \ |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e\
    [35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')'\
    \ expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa9ls87o5.scala:69:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n3 errors found\n"
  stdout: ''
  timestamp: 1659799995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_length\
    \ = music_list.length\n        val music_beats = music_list.map(music_string =>\
    \ {\n            val music_note = music_string.substring(0, 1)\n            val\
    \ music_beats = music_string.substring(1, music_string.length).trim\n        \
    \    val music_beats_array = music_beats.split(\"o\")\n            val music_beats_array_length\
    \ = music_beats_array.length\n            val music_beats_array_length = music_beats_array.length\n\
    \            val music_beats_array_length = music_beats_array.length\n       \
    \     val music_beats_array_length = music_beats_array.length\n            val\
    \ music_beats_array_length = music_beats_array.length\n            val music_beats_array_length\
    \ = music_beats_array.length\n            val music_beats_array_length = music_beats_array.length\n\
    \            val music_beats_array_length = music_beats_array.length\n       \
    \     val music_beats_array_length = music_beats_array.length\n            val\
    \ music_beats_array_length = music_beats_array.length\n            val music_beats_array_length\
    \ = music_beats_array.length\n            val music_beats_array_length = music_beats_array.length\n\
    \            val music_beats_array_length = music_beats_array.length\n       \
    \     val music_beats_array_length = music_beats_array.length\n            val\
    \ music_beats_array_length = music_beats_array.length\n            val music_beats_array_length\
    \ = music_beats_array.length\n            val music_beats_array_length = music_beats_array.length\n\
    \            val music_beats_array_length = music_beats_array.length\n       \
    \     val music_beats_array_length = music_beats_array.length\n            val\
    \ music_beats_array_length = music_beats_array.length\n            val music_beats_array_length\
    \ = music_beats_array.length\n            val music_beats_array_length = music_beats_array.length\n\
    \            val music_beats_array_length = music_beats_array.length\n       \
    \     val music_beats_array_length = music_beats_array.length\n            val\
    \ music_beats_array_length = music_beats_array.length\n            val music_beats_array_length\
    \ = music_beats_array.length\n            val music_beats_array_length = music_beats_array.length\n\
    \            val music_beats_array_length = music_beats_array.length\n       \
    \     val music_beats_array_length = musi\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf_qk61ke.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpf_qk61ke.scala:59:0 ----------------------------\e[0m\e[0m\n\e[31m59\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf_qk61ke.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mmusic_beats_array_length\e\
    [0m = music_beats_array.length\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_beats_array_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_beats_array_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf_qk61ke.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mmusic_beats_array_length\e\
    [0m = music_beats_array.length\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_beats_array_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_beats_array_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf_qk61ke.scala:23:16 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mmusic_beats_array_length\e\
    [0m = music_beats_array.length\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_beats_array_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_beats_array_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf_qk61ke.sc"
  stdout: ''
  timestamp: 1659800008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \")\n        val music_list_size\
    \ = music_list.size\n        val music_list_size_2 = music_list_size / 2\n   \
    \     val music_list_size_3 = music_list_size_2 / 2\n        val music_list_size_4\
    \ = music_list_size_3 / 2\n        val music_list_size_5 = music_list_size_4 /\
    \ 2\n        val music_list_size_6 = music_list_size_5 / 2\n        val music_list_size_7\
    \ = music_list_size_6 / 2\n        val music_list_size_8 = music_list_list_size_7\
    \ / 2\n        val music_list_size_9 = music_list_size_8 / 2\n        val music_list_size_10\
    \ = music_list_size_9 / 2\n        val music_list_size_11 = music_list_size_10\
    \ / 2\n        val music_list_size_12 = music_list_size_11 / 2\n        val music_list_size_13\
    \ = music_list_size_12 / 2\n        val music_list_size_14 = music_list_size_13\
    \ / 2\n        val music_list_size_15 = music_list_size_14 / 2\n        val music_list_size_16\
    \ = music_list_size_15 / 2\n        val music_list_size_17 = music_list_size_16\
    \ / 2\n        val music_list_size_18 = music_list_size_17 / 2\n        val music_list_size_19\
    \ = music_list_size_18 / 2\n        val music_list_size_20 = music_list_size_19\
    \ / 2\n        val music_list_size_21 = music_list_size_20 / 2\n        val music_list_size_22\
    \ = music_list_size_21 / 2\n        val music_list_size_23 = music_list_size_22\
    \ / 2\n        val music_list_size_24 = music_list_size_23 / 2\n        val music_list_size_25\
    \ = music_list_size_24 / 2\n        val music_list_size_26 = music_list_size_25\
    \ / 2\n        val music_list_size_27 = music_list_size_26 / 2\n        val music_list_size_28\
    \ = music_list_size_27 / 2\n        val music_list_size_29 = music_list_size_28\
    \ / 2\n        val music_list_size_30 = music_list_size_29 / 2\n        val music_list_size_31\
    \ = music_list_size_30 / 2\n        val music_list_size_32 = music_list_size_31\
    \ / 2\n        val music_list_size_33 = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpg5ceu5i2.scala:47:32 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_33\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e\
    [0m                                expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg5ceu5i2.scala:22:32\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg5ceu5i2.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799997
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_list_size\
    \ = music_list.size\n        val music_list_size_2 = music_list_size / 2\n   \
    \     val music_list_size_3 = music_list_size_2 / 2\n        val music_list_size_4\
    \ = music_list_size_3 / 2\n        val music_list_size_5 = music_list_size_4 /\
    \ 2\n        val music_list_size_6 = music_list_size_5 / 2\n        val music_list_size_7\
    \ = music_list_size_6 / 2\n        val music_list_size_8 = music_list_size_7 /\
    \ 2\n        val music_list_size_9 = music_list_size_8 / 2\n        val music_list_size_10\
    \ = music_list_size_9 / 2\n        val music_list_size_11 = music_list_size_10\
    \ / 2\n        val music_list_size_12 = music_list_size_11 / 2\n        val music_list_size_13\
    \ = music_list_size_12 / 2\n        val music_list_size_14 = music_list_size_13\
    \ / 2\n        val music_list_size_15 = music_list_size_14 / 2\n        val music_list_size_16\
    \ = music_list_size_15 / 2\n        val music_list_size_17 = music_list_size_16\
    \ / 2\n        val music_list_size_18 = music_list_size_17 / 2\n        val music_list_size_19\
    \ = music_list_size_18 / 2\n        val music_list_size_20 = music_list_size_19\
    \ / 2\n        val music_list_size_21 = music_list_size_20 / 2\n        val music_list_size_22\
    \ = music_list_size_21 / 2\n        val music_list_size_23 = music_list_size_22\
    \ / 2\n        val music_list_size_24 = music_list_size_23 / 2\n        val music_list_size_25\
    \ = music_list_size_24 / 2\n        val music_list_size_26 = music_list_size_25\
    \ / 2\n        val music_list_size_27 = music_list_size_26 / 2\n        val music_list_size_28\
    \ = music_list_size_27 / 2\n        val music_list_size_29 = music_list_size_28\
    \ / 2\n        val music_list_size_30 = music_list_size_29 / 2\n        val music_list_size_31\
    \ = music_list_size_30 / 2\n        val music_list_size_32 = music_list_size_31\
    \ / 2\n        val music_list_size_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_47dpr8t.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_47dpr8t.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(' ').map(music_string => {\n            val note\
    \ = music_string.charAt(0)\n            val rest = music_string.substring(1).trim\n\
    \            val beats = rest match {\n                case 'o' => 4\n       \
    \         case 'o|' => 2\n                case '.|' => 1\n                case\
    \ _ => 0\n            }\n            beats * note.toLong\n        }).sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpj2oiceu9.scala:19:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mcase\e[0m \e[31m'o\e[0m|' => \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0msymbol\
    \ literal 'o is no longer supported,\n\e[31m   |\e[0muse a string literal \"o\"\
    \ or an application Symbol(\"o\") instead,\n\e[31m   |\e[0mor enclose in braces\
    \ '{o} if you want a quoted expression.\n\e[31m   |\e[0mFor now, you can also\
    \ `import language.deprecated.symbolLiterals` to accept\n\e[31m   |\e[0mthe idiom,\
    \ but this possibility might no longer be available in the future.\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmpj2oiceu9.scala:19:26 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mcase\e[0m \e[31m'o\e[0m|' => \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                          ^^\e[0m\n\e[31m   |\e\
    [0m                          '{' expected, but '=>' found\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpj2oiceu9.scala:20:21 -----------------------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m '.|' => \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                    \
    \ unclosed character literal\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj2oiceu9.scala:23:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            beats * note.toLong\n\
    \e[31m\e[31m   |\e[0m^^^^^\e[0m\n\e[31m   |\e[0m'=>' expected, but 'end of statement'\
    \ found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj2oiceu9.scala:24:9 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        }).sum\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\
    \e[31m   |\e[0m         '}' expected, but ')' found\n\e[31m\e[31m-- Error: /tmp/tmpj2oiceu9.scala:26:4\
    \ ------------------------------------------\e[0m\e[0m\n\e[31m26 |\e[0m    \e\
    [33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e\
    [0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    end of statement\
    \ expected but 'def' found\n\e[31m\e[31m-- Error: /tmp/tmpj2oiceu9.scala:18:21\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m       \
    \         \e[33mcase\e[0m \e[31m'o'\e[0m => \e[31m4\e[0m\n\e[3"
  stdout: ''
  timestamp: 1659800010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(' ').map(_.toInt).toList\n  \
    \      val beats = music_list.foldLeft(List[Long]())((acc, note) => acc :+ note.last)\n\
    \        beats\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqeiexwdq.scala:15:81 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mbeats\e[0m = music_list.foldLeft(List[\e\
    [35mLong\e[0m]())((\e[36macc\e[0m, \e[36mnote\e[0m) => acc :+ note.last)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \      value last is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.substring(0, 1)\n            val beats = music_string.substring(1,\
    \ music_string.length)\n            val beats_as_int = beats.toInt\n         \
    \   val beats_as_long = beats_as_int * 1000\n            val note_to_beats = Map(\n\
    \                \"o\" -> 4,\n                \"o|\" -> 2,\n                \"\
    .|\" -> 1\n            )\n            note_to_beats(note) match {\n          \
    \      case Some(beats) => beats\n                case None => 0\n           \
    \ }\n        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmm4vf_9f.scala:26:21\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                \e[33mcase\e\
    [0m None => \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^^\e[0m\n\
    \e[31m   |\e[0m                     Found:    None.type\n\e[31m   |\e[0m     \
    \                Required: Int\n\e[31m   |\e[0m                     pattern type\
    \ is incompatible with expected type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpmm4vf_9f.scala:28:14 -----------------------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m        }).sum\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\
    \e[31m   |\e[0m              No implicit Ordering defined for Any.\n2 errors found\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(' ').map(music_string => {\n            val note\
    \ = music_string.charAt(0)\n            val rest = music_string.substring(1).trim\n\
    \            val beats = rest.split('|').map(rest => {\n                val beat\
    \ = rest.charAt(0)\n                val rest = rest.substring(1)\n           \
    \     val rest = rest.replace('o', '0')\n                val rest = rest.replace('|',\
    \ '0')\n                val rest = rest.replace('.', '0')\n                val\
    \ rest = rest.replace('o', '0')\n                val rest = rest.replace('|',\
    \ '0')\n                val rest = rest.replace('.', '0')\n                val\
    \ rest = rest.replace('o', '0')\n                val rest = rest.replace('|',\
    \ '0')\n                val rest = rest.replace('.', '0')\n                val\
    \ rest = rest.replace('o', '0')\n                val rest = rest.replace('|',\
    \ '0')\n                val rest = rest.replace('.', '0')\n                val\
    \ rest = rest.replace('o', '0')\n                val rest = rest.replace('|',\
    \ '0')\n                val rest = rest.replace('.', '0')\n                val\
    \ rest = rest.replace('o', '0')\n                val rest = rest.replace('|',\
    \ '0')\n                val rest = rest.replace('.', '0')\n                val\
    \ rest = rest.replace('o', '0')\n                val rest = rest.replace('|',\
    \ '0')\n                val rest = rest.replace('.', '0')\n                val\
    \ rest = rest.replace('o', '0')\n                val rest = rest.replace('|',\
    \ '0')\n                val rest = rest.replace('.', '0')\n                val\
    \ rest = rest.replace('o', '0')\n                val rest = rest.replace('|',\
    \ '0')\n                val rest = rest.replace('.', '0')\n                val\
    \ rest = rest.replace('o', '0')\n                val rest = rest.replace('|',\
    \ '0')\n                val rest = rest.replace('.', '0')\n                val\
    \ rest = rest.replace('o', '0')\n                val rest = rest.replace('|',\
    \ '0')\n                val rest = rest.replace('.', '0')\n                val\
    \ rest = rest.replace('o', '0')\n                val rest = rest.replace('|',\
    \ '0')\n                val rest = rest.replace('.', '0')\n                val\
    \ rest = rest.replace('o', '0')\n                val rest = rest.replace('|',\
    \ '0')\n                val rest = rest.replace('.', '0')\n                val\
    \ rest = rest.replace('o', '0')\n                val rest = rest.replace('|',\
    \ '0')\n                val rest = rest.replace('.', '0')\n                val\
    \ rest = rest.replace('o', '0')\n                val rest = rest.replace('|',\
    \ '0')\n                val rest = rest.replace('.', '0')\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaq33m4w8.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpaq33m4w8.scala:76:0 ----------------------------\e[0m\e[0m\n\e[31m76\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800006
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ notes = music_string.split(\"|\")\n            val notes_length = notes.length\n\
    \            val notes_array = notes.map(note => note.charAt(0).toInt)\n     \
    \       val notes_array = notes_array.filter(note => note != '.')\n          \
    \  val notes_array = notes_array.filter(note => note != 'o')\n            val\
    \ notes_array = notes_array.filter(note => note != 'o|')\n            val notes_array\
    \ = notes_array.filter(note => note != '|')\n            val notes_array = notes_array.filter(note\
    \ => note != 'o|o|')\n            val notes_array = notes_array.filter(note =>\
    \ note != 'o|o|o|')\n            val notes_array = notes_array.filter(note =>\
    \ note != 'o|o|o|o|')\n            val notes_array = notes_array.filter(note =>\
    \ note != 'o|o|o|o|o|o|')\n            val notes_array = notes_array.filter(note\
    \ => note != 'o|o|o|o|o|o|o|o|')\n            val notes_array = notes_array.filter(note\
    \ => note != 'o|o|o|o|o|o|o|o|o|o|')\n            val notes_array = notes_array.filter(note\
    \ => note != 'o|o|o|o|o|o|o|o|o|o|o|')\n            val notes_array = notes_array.filter(note\
    \ => note != 'o|o|o|o|o|o|o|o|o|o|o|o|o|')\n            val notes_array = notes_array.filter(note\
    \ => note != 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|')\n            val notes_array = notes_array.filter(note\
    \ => note != 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|')\n            val notes_array =\
    \ notes_array.filter(note => note != 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|')\n   \
    \         val notes_array = notes_array.filter(note => note != 'o|o|o|o|o|o|o|o\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp59xzatfp.scala:20:65 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.filter(\e\
    [36mnote\e[0m => note != \e[31m'o\e[0m|')\n\e[31m\e[31m   |\e[0m             \
    \                                                    ^\e[0m\n\e[31m   |\e[0msymbol\
    \ literal 'o is no longer supported,\n\e[31m   |\e[0muse a string literal \"o\"\
    \ or an application Symbol(\"o\") instead,\n\e[31m   |\e[0mor enclose in braces\
    \ '{o} if you want a quoted expression.\n\e[31m   |\e[0mFor now, you can also\
    \ `import language.deprecated.symbolLiterals` to accept\n\e[31m   |\e[0mthe idiom,\
    \ but this possibility might no longer be available in the future.\n\e[31m\e[31m--\
    \ Error: /tmp/tmp59xzatfp.scala:20:68 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.filter(\e\
    [36mnote\e[0m => note != \e[31m'o\e[0m|')\n\e[31m\e[31m   |\e[0m             \
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \                                              unclosed character literal\n\e\
    [31m\e[31m-- Error: /tmp/tmp59xzatfp.scala:22:70 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.filter(\e\
    [36mnote\e[0m => note != \e[31m'o\e[0m|o|')\n\e[31m\e[31m   |\e[0m           \
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                              unclosed character literal\n\e\
    [31m\e[31m-- Error: /tmp/tmp59xzatfp.scala:23:72 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.filter(\e\
    [36mnote\e[0m => note != \e[31m'o\e[0m|o|o|')\n\e[31m\e[31m   |\e[0m         \
    \                                                               ^\e[0m\n\e[31m\
    \   |\e[0m                                              unclosed character literal\n\
    \e[31m\e[31m-- Error: /tmp/tmp59xzatfp.scala:24:74 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mnotes_array\e["
  stdout: ''
  timestamp: 1659800006
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split('|').map(_.toInt)\n        val notes_length\
    \ = notes.length\n        val beats_length = notes_length / 4\n        val beats\
    \ = notes.grouped(beats_length).map(_.length)\n        val notes_lasts = notes.grouped(beats_length).map(_.take(beats_length))\n\
    \        val notes_lasts_length = notes_lasts.length\n        val beats_lasts\
    \ = notes_lasts.grouped(beats_lasts_length).map(_.length)\n        val notes_lasts_lasts\
    \ = notes_lasts.grouped(beats_lasts_length).map(_.take(beats_lasts_length))\n\
    \        val notes_lasts_lasts_length = notes_lasts_lasts.length\n        val\
    \ beats_lasts_lasts = notes_lasts_lasts.grouped(beats_lasts_lasts_length).map(_.length)\n\
    \        val notes_lasts_lasts_lasts_length = notes_lasts_lasts_lasts.length\n\
    \        val beats_lasts_lasts_lasts = notes_lasts_lasts_lasts.grouped(beats_lasts_lasts_lasts_length).map(_.length)\n\
    \        val notes_lasts_lasts_lasts_lasts_length = notes_lasts_lasts_lasts_lasts.length\n\
    \        val beats_lasts_lasts_lasts_lasts = notes_lasts_lasts_lasts_lasts.grouped(beats_lasts_lasts_lasts_lasts_length).map(_.length)\n\
    \        val notes_lasts_lasts_lasts_lasts_length = notes_lasts_lasts_lasts_lasts_lasts.length\n\
    \        val beats_lasts_lasts_lasts_lasts_lasts = notes_lasts_lasts_lasts_lasts_lasts.grouped(beats_lasts_lasts_lasts_lasts_lasts_length).map(_.length)\n\
    \        val notes_lasts_lasts_lasts_lasts_lasts_length = notes_lasts_lasts_lasts_lasts_lasts_lasts.length\n\
    \        val beats_lasts_lasts_lasts_lasts_lasts_lasts = notes_lasts_lasts_lasts_lasts_lasts_lasts_lasts.length\n\
    \        val beats_lasts_lasts_lasts_lasts_lasts_lasts_length = beats_lasts_lasts_lasts_lasts_lasts_lasts_lasts.length\n\
    \        val beats_lasts_lasts_lasts_lasts_lasts_lasts_lasts_length = beats_lasts_lasts_lasts_lasts_lasts_lasts_last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl_k0j1nc.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnotes_lasts_lasts_lasts_lasts_length\e\
    [0m = notes_lasts_lasts_lasts_lasts_lasts.length\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_lasts_lasts_lasts_lasts_length is already defined as\
    \ \e[33mvalue\e[0m \e[35mnotes_lasts_lasts_lasts_lasts_length\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl_k0j1nc.scala:20:46\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mbeats_lasts\e[0m = notes_lasts.grouped(beats_lasts_length).map(_.length)\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                           Not found: beats_lasts_length\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl_k0j1nc.scala:21:52\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mnotes_lasts_lasts\e[0m = notes_lasts.grouped(beats_lasts_length).map(_.take(beats_lasts_length))\n\
    \e[31m\e[31m   |\e[0m                                                    ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                           Not found: beats_lasts_length\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl_k0j1nc.scala:21:83\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mnotes_lasts_lasts\e[0m = notes_lasts.grouped(beats_lasts_length).map(_.take(beats_lasts_length))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                           ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                                  Not found: beats_lasts_length\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explan"
  stdout: ''
  timestamp: 1659800010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \").map(_.toUpperCase()).filter(_.length>0)\n\
    \        val notes = music_list.flatMap(music_note => music_note.split(\"|\"))\n\
    \        val notes_count = notes.map(music_note => music_note.length).sum\n  \
    \      val notes_last_beats = notes.map(music_note => music_note.last).sum\n \
    \       val notes_last_beats_count = notes_last_beats.toLong\n        val notes_last_beats_count_remainder\
    \ = notes_last_beats_count % 4\n        val notes_last_beats_count_remainder_count\
    \ = notes_last_beats_count_remainder.toLong\n        val notes_last_beats_count_remainder_count_remainder\
    \ = notes_last_beats_count_remainder % 4\n        val notes_last_beats_count_remainder_count_remainder_count\
    \ = notes_last_beats_count_remainder_count_remainder.toLong\n        val notes_last_beats_count_remainder_count_remainder_count_remainder\
    \ = notes_last_beats_count_remainder_count_remainder.toLong\n        val notes_last_beats_count_remainder_count_remainder_count_remainder_count\
    \ = notes_last_beats_count_remainder_count_remainder_count_remainder.toLong\n\
    \        val notes_last_beats_count_remainder_count_remainder_count_remainder_count_remainder\
    \ = notes_last_beats_count_remainder_count_remainder_count_remainder.toLong\n\
    \        val notes_last_beats_count_remainder_count_remainder_count_remainder_count_remainder_count\
    \ = notes_last_beats_count_remainder_count_remainder_count_remainder_count_remainder.toLong\n\
    \        val notes_last_beats_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder\
    \ = notes_last_beats_count_remainder_count_remainder_count_remainder_count_remainder.toLong\n\
    \        val notes_last_beats_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder\
    \ = notes_last_beats_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder.toLong\n\
    \        val notes_last_beats_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder_count\
    \ = notes_last_beats_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder_count.toLong\n\
    \        val notes_last_beats_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder\
    \ = notes_last_beats_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsbj2awcv.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnotes_last_beats_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder\e\
    [0m = notes_last_beats_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_last_beats_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  notes_last_beats_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpsbj2awcv.scala:29:117 --------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnotes_last_beats_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder_count\e\
    [0m = notes_last_beats_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder_count.toLong\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                             ^\e[0m\n\e[31m \
    \  |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  notes_last_beats_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder_count\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpsbj2awcv.scala:30:127 -----------------------\e[0m\e[0m\n\e[31m30 |\e\
    [0m        \e[33mval\e[0m \e[36mnotes_last_beats_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder_count_remainder\e\
    [0m = notes_last_beats_count_remainde"
  stdout: ''
  timestamp: 1659800009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ notes = music_string.split(\"|\").map(music_string => {\n                val\
    \ note = music_string.split(\"o\").head\n                val beats = music_string.split(\"\
    o|\").head\n                note.toLong * beats.toLong\n            }).sum\n \
    \           notes\n        }).sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpflignjmy.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m15 |\e[0m\
    \            \e[33mval\e[0m \e[36mnotes\e[0m = music_string.split(\e[31m\"|\"\e\
    [0m).map(\e[36mmusic_string\e[0m => {\n\e[31m16 |\e[0m                \e[33mval\e\
    [0m \e[36mnote\e[0m = music_string.split(\e[31m\"o\"\e[0m).head\n\e[31m17 |\e\
    [0m                \e[33mval\e[0m \e[36mbeats\e[0m = music_string.split(\e[31m\"\
    o|\"\e[0m).head\n\e[31m18 |\e[0m                note.toLong * beats.toLong\n\e\
    [31m19 |\e[0m            }).sum\n\e[31m20 |\e[0m            notes\n\e[31m21 |\e\
    [0m        }).sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.charAt(0)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.charAt(0)\n\
    \                val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                    val rest = music_string.charAt(0)\n              \
    \      val rest = music_string.substring(1).split(\".\").map(music_string => {\n\
    \                        val rest = music_string.charAt(0)\n                 \
    \       val rest = music_string.substring(1).split(\"|\").map(music_string =>\
    \ {\n                            val rest = music_string.charAt(0)\n         \
    \                   val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                                val rest = music_string.charAt(0)\n  \
    \                              val rest = music_string.substring(1).split(\".\"\
    ).map(music_string => {\n                                    val rest = music_string.charAt(0)\n\
    \                                    val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                        val rest =\
    \ music_string.charAt(0)\n                                        val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                            val rest\
    \ = music_string.charAt(0)\n                                            val rest\
    \ = music_string.substring(1).split(\".\").map(music_string => {\n           \
    \                                     val rest = music_string.charAt(0)\n    \
    \                                            val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \   val rest = music_string.charAt(0)\n                                      \
    \              val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                                                        val rest = music_string.charAt(0)\n\
    \                                                        val rest = music_string.substring(1).split(\"\
    .\").map(music_string => {\n                                                 \
    \           val rest = music_string.charAt(0)\n                              \
    \                              val rest = music_string.substring(1).split(\"|\"\
    ).map(music_string => {\n                                                    \
    \            val rest = music_string.charAt(0)\n                             \
    \                                   val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                   val rest = music_string.charAt(0)\n                      \
    \                                              val rest = music_string.substring(1).split(\"\
    .\").map(music_string => {\n                                                 \
    \                       val rest = music_string.charAt(0)\n                  \
    \                                                      val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \                           val rest = music_string.charAt(0)\n              \
    \                                                              val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                               val rest = music_string.charAt(0)\n          \
    \                                                                      val rest\
    \ = musi\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprs56wkk9.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmprs56wkk9.scala:61:0 ----------------------------\e[0m\e[0m\n\e[31m61\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprs56wkk9.scala:50:84 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m                                                    \
    \                            \e[33mval\e[0m \e[36mrest\e[0m = musi\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mrest is already defined as\
    \ \e[33mvalue\e[0m \e[35mrest\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val beats = rest.split(\"|\").map(x => x.toLong).sum\n\
    \            val rest = rest.replace(\"|\", \"\")\n            val rest = rest.replace(\"\
    o\", \"\")\n            val rest = rest.replace(\"o|\", \"\")\n            val\
    \ rest = rest.replace(\".|\", \"\")\n            val rest = rest.replace(\"o\"\
    , \"\")\n            val rest = rest.replace(\"o|\", \"\")\n            val rest\
    \ = rest.replace(\".|\", \"\")\n            val rest = rest.replace(\"o\", \"\"\
    )\n            val rest = rest.replace(\"o|\", \"\")\n            val rest = rest.replace(\"\
    .|\", \"\")\n            val rest = rest.replace(\"o\", \"\")\n            val\
    \ rest = rest.replace(\"o|\", \"\")\n            val rest = rest.replace(\".|\"\
    , \"\")\n            val rest = rest.replace(\"o\", \"\")\n            val rest\
    \ = rest.replace(\"o|\", \"\")\n            val rest = rest.replace(\".|\", \"\
    \")\n            val rest = rest.replace(\"o\", \"\")\n            val rest =\
    \ rest.replace(\"o|\", \"\")\n            val rest = rest.replace(\".|\", \"\"\
    )\n            val rest = rest.replace(\"o\", \"\")\n            val rest = rest.replace(\"\
    o|\", \"\")\n            val rest = rest.replace(\".|\", \"\")\n            val\
    \ rest = rest.replace(\"o\", \"\")\n            val rest = rest.replace(\"o|\"\
    , \"\")\n            val rest = rest.replace(\".|\", \"\")\n            val rest\
    \ = rest.replace(\"o\", \"\")\n            val rest = rest.replace(\"o|\", \"\"\
    )\n            val rest = rest.replace(\".|\", \"\")\n            val rest = rest.replace(\"\
    o\", \"\")\n            val rest = rest.replace(\"o|\", \"\")\n            val\
    \ rest = rest.replace(\".|\", \"\")\n            val rest = rest.replace(\"o\"\
    , \"\")\n            val rest = rest.replace(\"o|\", \"\")\n            val rest\
    \ = rest.replace(\".|\", \"\")\n            val rest = rest.replace(\"o\", \"\"\
    )\n            val rest = rest.replace(\"o|\", \"\")\n            val rest = rest.replace(\"\
    .|\", \"\")\n            val rest = rest.replace(\"o\", \"\")\n            val\
    \ rest = rest.replace(\"o|\", \"\")\n            val rest = rest.replace(\".|\"\
    , \"\")\n            val rest = rest.replace(\"o\", \"\")\n            val rest\
    \ = rest.replace(\"o|\", \"\")\n            val rest = rest.replace(\".|\", \"\
    \")\n            val rest = rest.replace(\"o\", \"\")\n            val rest =\
    \ rest.replace(\"o|\", \"\")\n            val rest = rest.replace(\".|\", \"\"\
    )\n            val rest = rest.replace(\"o\", \"\")\n            val rest = \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5bbti2re.scala:65:22 ---------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m            \e[33mval\e[0m \e[36mrest\e[0m = \n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmp5bbti2re.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp5bbti2re.scala:76:0 ----------------------------\e[0m\e[0m\n\e[31m76\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5bbti2re.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mrest\e[0m = rest.replace(\e\
    [31m\"|\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrest is already defined as \e[33mvalue\e[0m \e[35mrest\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp5bbti2re.scala:19:16 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m            \e[33mval\e[0m \e[36mrest\e[0m = rest.replace(\e[31m\"o\"\e\
    [0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrest is already defined as \e[33mvalue\e[0m \e[35mrest\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp5bbti2re.scala:20:16 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            \e[33mval\e[0m \e[36mrest\e[0m = rest.replace(\e[31m\"o|\"\
    \e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrest is already defined as \e[33mvalue\e[0m \e[35mrest\e[0m\n\
    \e[31m  "
  stdout: ''
  timestamp: 1659800008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_length\
    \ = music_list.length\n        val music_notes = music_list.map(music_note =>\
    \ {\n            val music_note_length = music_note.length\n            val music_note_char\
    \ = music_note.charAt(0)\n            val music_note_octave = music_note.charAt(1)\n\
    \            val music_note_note = music_note.charAt(2)\n            val music_note_beats\
    \ = music_note.charAt(3)\n            val music_note_notes = music_note.substring(music_note_length).split(\"\
    o\")\n            val music_note_notes_length = music_note_notes.length\n    \
    \        val music_note_notes_length = music_note_notes_length.toInt\n       \
    \     val music_note_notes_length = music_note_notes_length.toLong\n         \
    \   val music_note_notes_length = music_note_notes_length.toInt\n            val\
    \ music_note_notes_length = music_note_notes_length.toLong\n            val music_note_notes_length\
    \ = music_note_notes_length.toInt\n            val music_note_notes_length = music_note_notes_length.toLong\n\
    \            val music_note_notes_length = music_note_notes_length.toInt\n   \
    \         val music_note_notes_length = music_note_notes_length.toLong\n     \
    \       val music_note_notes_length = music_note_notes_length.toInt\n        \
    \    val music_note_notes_length = music_note_notes_length.toLong\n          \
    \  val music_note_notes_length = music_note_notes_length.toInt\n            val\
    \ music_note_notes_length = music_note_notes_length.toLong\n            val music_note_notes_length\
    \ = music_note_notes_length.toInt\n            val music_note_notes_length = music_note_notes_length.toLong\n\
    \            val music_note_notes_length = music_note_notes_length.toInt\n   \
    \         val music_note_notes_length = music_note_notes_length.toLong\n     \
    \       val music_note_notes_length = music_note_notes_length.toInt\n        \
    \    val music_note_notes_length = music_note_notes_length.toLong\n          \
    \  val music_note_notes_length = music_note_notes_length.toInt\n            val\
    \ music_note_notes_length = music_note_notes_length.toLong\n            val music_note_notes_length\
    \ = music_note_notes_length.toInt\n            val music_note_notes_length = music_note_notes_length.to\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxjjtkntt.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpxjjtkntt.scala:56:0 ----------------------------\e[0m\e[0m\n\e[31m56\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxjjtkntt.scala:24:16 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mmusic_note_notes_length\e\
    [0m = music_note_notes_length.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_note_notes_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_note_notes_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxjjtkntt.scala:25:16 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mmusic_note_notes_length\e\
    [0m = music_note_notes_length.toLong\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_note_notes_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_note_notes_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxjjtkntt.scala:26:16 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mmusic_note_notes_length\e\
    [0m = music_note_notes_length.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_note_notes_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_note_notes_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error:"
  stdout: ''
  timestamp: 1659800010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \").map(music_string => music_string.charAt(0).toInt)\n\
    \        val music_list_size = music_list.length\n        val music_list_size_half\
    \ = music_list_size / 2\n        val music_list_size_quarter = music_list_size\
    \ / 4\n        val music_list_size_whole = music_list_size - music_list_size_half\
    \ - music_list_size_quarter\n        val music_list_size_whole_and_half = music_list_size_whole\
    \ + music_list_size_half\n        val music_list_size_whole_and_half_and_quarter\
    \ = music_list_size_whole_and_half + music_list_size_quarter\n        val music_list_size_whole_and_half_and_quarter_and_whole\
    \ = music_list_size_whole_and_half_and_quarter + music_list_size_whole\n     \
    \   val music_list_size_whole_and_half_and_quarter_and_whole_and_half = music_list_size_whole_and_half_and_quarter_and_whole\
    \ + music_list_size_half\n        val music_list_size_whole_and_half_and_quarter_and_whole_and_half_and_quarter\
    \ = music_list_size_whole_and_half_and_quarter_and_whole_and_half + music_list_size_quarter\n\
    \        val music_list_size_whole_and_half_and_quarter_and_whole_and_half_and_quarter_and_whole\
    \ = music_list_size_whole_and_half_and_quarter_and_whole_and_half_and_quarter_and_whole\n\
    \        val music_list_size_whole_and_half_and_quarter_and_whole_and_half_and_quarter_and_whole_and_half\
    \ = music_list_size_whole_and_half_and_quarter_and_whole_and_half_and_quarter_and_whole_and_half\n\
    \        val music_list_size_whole_and_half_and_quarter_and_whole_and_half_and_quarter_and_whole_and_half_and_quarter\
    \ = music_list_size_whole_and_half_and_quarter_and_whole_and_half_and_quarter_and_whole_and_half_and_quarter\n\
    \        val music_list_size_whole_and_half_and_quarter_and_whole_and_half_and_quarter_and_whole_and_half_and_quarter_and_whole\
    \ = music_list_size_whole_and_half_and_quarter_and_whole_and_half_and_quarter_and_whole_and_half_and_quarter_and_whole\n\
    \        val music_list_size_whole_and_half_and_quarter_and_whole_and_half_and_quarter_and_whole_and_half_and_quarter_and_whole_and_half\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpufwoug5g.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpufwoug5g.scala:24:98\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_size_whole_and_half_and_quarter_and_whole_and_half_and_quarter_and_whole\e\
    [0m = music_list_size_whole_and_half_and_quarter_and_whole_and_half_and_quarter_and_whole\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                          ^\e[0m\n\e[31m   |\e[0mRecursive \e\
    [33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  music_list_size_whole_and_half_and_quarter_and_whole_and_half_and_quarter_and_whole\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpufwoug5g.scala:25:107 --------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_whole_and_half_and_quarter_and_whole_and_half_and_quarter_and_whole_and_half\e\
    [0m = music_list_size_whole_and_half_and_quarter_and_whole_and_half_and_quarter_and_whole_and_half\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                   ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  music_list_size_whole_and_half_and_quarter_and_whole_and_half_and_quarter_and_whole_and_half\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpufwoug5g.scala:26:119 --------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_whole_and_half_and_quarter_and_whole_and_half_and_quarter_and_whole_and_half_and_quarter\e\
    [0m = music_list_size_whole_and_half_and_quarter_and_whole_and_half_and_quarter_and_whole_and_half_and_quarter\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \     "
  stdout: ''
  timestamp: 1659800010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(' ').map(music_char => {\n            val music_char_index\
    \ : Int = music_string.indexOf(music_char)\n            val music_char_length\
    \ : Int = music_string.size - music_char_index\n            val music_char_length_in_beats\
    \ : Long = music_char_length / 4\n            val music_char_length_in_beats_mod\
    \ : Long = music_char_length_in_beats % 4\n            val music_char_length_in_beats_mod_2\
    \ : Long = music_char_length_in_beats_mod * 2\n            val music_char_length_in_beats_mod_3\
    \ : Long = music_char_length_in_beats_mod_2 * 2\n            val music_char_length_in_beats_mod_4\
    \ : Long = music_char_length_in_beats_mod_3 * 2\n            val music_char_length_in_beats_mod_5\
    \ : Long = music_char_length_in_beats_mod_4 * 2\n            val music_char_length_in_beats_mod_6\
    \ : Long = music_char_length_in_beats_mod_5 * 2\n            val music_char_length_in_beats_mod_7\
    \ : Long = music_char_length_in_beats_mod_6 * 2\n            val music_char_length_in_beats_mod_8\
    \ : Long = music_char_length_in_beats_mod_7 * 2\n            val music_char_length_in_beats_mod_9\
    \ : Long = music_char_length_in_beats_mod_8 * 2\n            val music_char_length_in_beats_mod_10\
    \ : Long = music_char_length_in_beats_mod_9 * 2\n            val music_char_length_in_beats_mod_11\
    \ : Long = music_char_length_in_beats_mod_10 * 2\n            val music_char_length_in_beats_mod_12\
    \ : Long = music_char_length_in_beats_mod_11 * 2\n            val music_char_length_in_beats_mod_13\
    \ : Long = music_char_length_in_beats_mod_12 * 2\n            val music_char_length_in_beats_mod_14\
    \ : Long = music_char_length_in_beats_mod_13 * 2\n            val music_char_length_in_beats_mod_15\
    \ : Long = music_char_length_in_beats_mod_14 * 2\n            val music_char_length_in_beats_mod_16\
    \ : Long = music_char_length_in_beats_mod_15 * 2\n            val music_char_length_in_beats_mod_17\
    \ : Long = music_char_length_in_beats_mod_16 * 2\n            val music_char_length_in_beats_mod_18\
    \ : Long = music_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfycafkmd.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpfycafkmd.scala:46:0 ----------------------------\e[0m\e[0m\n\e[31m46\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfycafkmd.scala:35:59 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m            \e[33mval\e[0m \e[36mmusic_char_length_in_beats_mod_18\e\
    [0m : \e[35mLong\e[0m = music_\n\e[31m\e[31m   |\e[0m                        \
    \                                   ^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                                          Not found: music_\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.substring(0,\
    \ 1)\n                val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                    val rest = music_string.substring(0, 1)\n        \
    \            val rest2 = music_string.substring(1).split(\"|\").map(music_string\
    \ => {\n                        val rest3 = music_string.substring(0, 1)\n   \
    \                     val rest4 = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                            val rest5 = music_string.substring(0, 1)\n\
    \                            val rest6 = music_string.substring(1).split(\"|\"\
    ).map(music_string => {\n                                val rest7 = music_string.substring(0,\
    \ 1)\n                                val rest8 = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                    val rest9 = music_string.substring(0,\
    \ 1)\n                                    val rest10 = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                        val rest11\
    \ = music_string.substring(0, 1)\n                                        val\
    \ rest12 = music_string.substring(1).split(\"o\").map(music_string => {\n    \
    \                                        val rest13 = music_string.substring(0,\
    \ 1)\n                                            val rest14 = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                val\
    \ rest15 = music_string.substring(0, 1)\n                                    \
    \            val rest16 = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                                                    val rest17 = music_string.substring(0,\
    \ 1)\n                                                    val rest18 = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \       val rest19 = music_string.substring(0, 1)\n                          \
    \                              val rest20 = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \           val rest21 = music_string.substring(0, 1)\n                      \
    \                                      val rest22 = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \               val rest23 = music_string.substring(0, 1)\n                  \
    \                                              val rest24 = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                   val rest25 = music_string.substring(0, 1)\n              \
    \                                                      val rest26 = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \                       val rest27 = music_string.substring(0, 1)\n          \
    \                                                              val rest28 = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                           val rest29 = music_string.substring(0, 1)\n      \
    \                                                                      val rest30\
    \ = music_string.substring(1).split(\"|\").map(music_string => {\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwfs_6icg.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpwfs_6icg.scala:59:0 ----------------------------\e[0m\e[0m\n\e[31m59\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_length\
    \ = notes.length\n        val notes_array = notes.map(_.toInt)\n        val notes_length\
    \ = notes_array.length\n        val notes_array = notes_array.map(x => if (x ==\
    \ 0) 0 else x)\n        val notes_length = notes_array.length\n        val notes_array\
    \ = notes_array.map(x => if (x == 0) 0 else x)\n        val notes_length = notes_array.length\n\
    \        val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n      \
    \  val notes_length = notes_array.length\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 0 else x)\n        val notes_length = notes_array.length\n  \
    \      val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n        val\
    \ notes_length = notes_array.length\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 0 else x)\n        val notes_length = notes_array.length\n  \
    \      val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n        val\
    \ notes_length = notes_array.length\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 0 else x)\n        val notes_length = notes_array.length\n  \
    \      val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n        val\
    \ notes_length = notes_array.length\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 0 else x)\n        val notes_length = notes_array.length\n  \
    \      val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n        val\
    \ notes_length = notes_array.length\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 0 else x)\n        val notes_length = notes_array.length\n  \
    \      val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n        val\
    \ notes_length = notes_array.length\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 0 else x)\n        val notes_length = notes_array.length\n  \
    \      val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n        val\
    \ notes_length = notes_array.length\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 0 else x)\n        val notes_length = notes_array.length\n  \
    \      val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n        val\
    \ notes_length = notes_array.length\n        val notes_array = notes_array.map(x\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\"\
    )).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmox6_ecl.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmox6_ecl.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotes_length\e[0m = notes_array.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_length is already defined as \e[33mvalue\e[0m \e[35mnotes_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmox6_ecl.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x == \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m x)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmox6_ecl.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_length\e[0m = notes_array.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnotes_length is already defined as \e[33mvalue\e[0m \e[35mnotes_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmox6_ecl.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x == \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m x)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |"
  stdout: ''
  timestamp: 1659800018
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.substring(0,\
    \ 1)\n                val rest = music_string.substring(1)\n                val\
    \ beats = rest.split(\"o\").map(music_string => {\n                    val beat\
    \ = music_string.substring(0, 1)\n                    val rest = music_string.substring(1)\n\
    \                    val beats = rest.split(\"|\").map(music_string => {\n   \
    \                     val beat = music_string.substring(0, 1)\n              \
    \          val rest = music_string.substring(1)\n                        val beats\
    \ = rest.split(\"o\").map(music_string => {\n                            val beat\
    \ = music_string.substring(0, 1)\n                            val rest = music_string.substring(1)\n\
    \                            val beats = rest.split(\"|\").map(music_string =>\
    \ {\n                                val beat = music_string.substring(0, 1)\n\
    \                                val rest = music_string.substring(1)\n      \
    \                          val beats = rest.split(\"o\").map(music_string => {\n\
    \                                    val beat = music_string.substring(0, 1)\n\
    \                                    val rest = music_string.substring(1)\n  \
    \                                  val beats = rest.split(\"|\").map(music_string\
    \ => {\n                                        val beat = music_string.substring(0,\
    \ 1)\n                                        val rest = music_string.substring(1)\n\
    \                                        val beats = rest.split(\"o\").map(music_string\
    \ => {\n                                            val beat = music_string.substring(0,\
    \ 1)\n                                            val rest = music_string.substring(1)\n\
    \                                            val beats = rest.split(\"|\").map(music_string\
    \ => {\n                                                val beat = music_string.substring(0,\
    \ 1)\n                                                val rest = music_string.substring(1)\n\
    \                                                val beats = rest.split(\"o\"\
    ).map(music_string => {\n                                                    val\
    \ beat = music_string.substring(0, 1)\n                                      \
    \              val rest = music_string.substring(1)\n                        \
    \                            val beats = rest.split(\"|\").map(music_string =>\
    \ {\n                                                        val beat = music_string.substring(0,\
    \ 1)\n                                                        val rest = music_string.substring(1)\n\
    \                                                        val beats = rest.split(\"\
    o\").map(music_string => {\n                                                 \
    \           val beat = music_string.substring(0, 1)\n                        \
    \                                    val rest = music_string.substring(1)\n  \
    \                                                          val beats = rest.split(\"\
    |\").map(music_string => {\n                                                 \
    \               val beat = music_string.substring(0, 1)\n                    \
    \                                            val rest = music_string.substring(1)\n\
    \                                                                val beats = rest.split(\"\
    o\").map(music_string => {\n                                                 \
    \                   val beat = music_string.substring(0, 1)\n                \
    \                                                    val rest = music_string.substring(1)\n\
    \                                                                    val beats\
    \ = rest.split(\"\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpa9ls87o5.scala:58:91 -----------------------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m                                                    \
    \                \e[33mval\e[0m \e[36mbeats\e[0m = rest.split(\"\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \                    unclosed string literal\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpa9ls87o5.scala:60:4 ----------------------------\e[0m\e[0m\n\e[31m60\
    \ |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e\
    [35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')'\
    \ expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa9ls87o5.scala:69:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n3 errors found\n"
  stdout: ''
  timestamp: 1659799995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \").map(_.toUpperCase)\n \
    \       val music_length = music_list.length\n        val music_beats = music_list.map(music_length\
    \ % 2 != 0).sum\n        val music_notes = music_list.map(music_length % 2 ==\
    \ 0).sum\n        val music_notes_beats = music_notes * music_beats\n        val\
    \ music_notes_beats_length = music_notes_beats / music_length\n        val music_notes_beats_length_length\
    \ = music_notes_beats_length / music_length\n        val music_notes_beats_length_length_length\
    \ = music_notes_beats_length_length / music_length\n        val music_notes_beats_length_length_length_length\
    \ = music_notes_beats_length_length_length / music_length\n        val music_notes_beats_length_length_length_length_length\
    \ = music_notes_beats_length_length_length_length / music_length\n        val\
    \ music_notes_beats_length_length_length_length_length_length = music_notes_beats_length_length_length_length_length\
    \ / music_length\n        val music_notes_beats_length_length_length_length_length_length_length\
    \ = music_notes_beats_length_length_length_length_length_length / music_length\n\
    \        val music_notes_beats_length_length_length_length_length_length_length_length\
    \ = music_notes_beats_length_length_length_length_length_length_length / music_length\n\
    \        val music_notes_beats_length_length_length_length_length_length_length_length_length\
    \ = music_notes_beats_length_length_length_length_length_length_length_length\
    \ / music_length\n        val music_notes_beats_length_length_length_length_length_length_length_length_length\
    \ = music_notes_beats_length_length_length_length_length_length_length_length\
    \ / music_length\n        val music_notes_beats_length_length_length_length_length_length_length_length_length\
    \ = music_notes_beats_length_length_length_length_length_length_length_length\
    \ / music_length\n        val music_notes_beats_length_length_length_length_length_length_length_length_length_length\
    \ = music_notes_beats_length_length_length_length_length_length_length_length_length\
    \ / music_length\n        val music_notes_beats_length_length_length_length_length_length_length_length_length_length\
    \ = music_notes_beats_length_length_length_length_length_length_length_length_length\
    \ / music_length\n        val music_notes_beats_length_length_length_length_length_length_length_length_length_length\
    \ = music_notes_beats_length_length_length_length_length_length_length_length_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf6ym0gpv.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_beats_length_length_length_length_length_length_length_length_length\e\
    [0m = music_notes_beats_length_length_length_length_length_length_length_length\
    \ / music_length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_beats_length_length_length_length_length_length_length_length_length\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  music_notes_beats_length_length_length_length_length_length_length_length_length\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpf6ym0gpv.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_beats_length_length_length_length_length_length_length_length_length\e\
    [0m = music_notes_beats_length_length_length_length_length_length_length_length\
    \ / music_length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_beats_length_length_length_length_length_length_length_length_length\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  music_notes_beats_length_length_length_length_length_length_length_length_length\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpf6ym0gpv.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_beats_length_length_length_length_length_length_length_length_length_length\e\
    [0m = music_notes_beats_length_length_length"
  stdout: ''
  timestamp: 1659800020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(' ').map(music_note => {\n            val note\
    \ = music_note.charAt(0)\n            val beats = music_note.substring(1).split('|').map(_.toInt)\n\
    \            beats.map(beat => if (note == 'o') 4 else if (note == '.') 1 else\
    \ beat)\n        }).flatten.distinct\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq41g2q2i.scala:18:19\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m' '\e[0m).map(\e[36mmusic_note\e[0m => {\n\e[31m15 |\e[0m            \e[33mval\e\
    [0m \e[36mnote\e[0m = music_note.charAt(\e[31m0\e[0m)\n\e[31m16 |\e[0m       \
    \     \e[33mval\e[0m \e[36mbeats\e[0m = music_note.substring(\e[31m1\e[0m).split(\e\
    [31m'|'\e[0m).map(_.toInt)\n\e[31m17 |\e[0m            beats.map(\e[36mbeat\e\
    [0m => \e[33mif\e[0m (note == \e[31m'o'\e[0m) \e[31m4\e[0m \e[33melse\e[0m \e\
    [33mif\e[0m (note == \e[31m'.'\e[0m) \e[31m1\e[0m \e[33melse\e[0m beat)\n\e[31m18\
    \ |\e[0m        }).flatten.distinct\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        Found:    Array[Int]\n\e[31m   |\e[0m        Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\"\\\\|\").map(music_string => {\n           \
    \ val notes = music_string.split(\"\\\\o\").map(music_string => {\n          \
    \      val note = music_string.split(\"\\\\.\").map(music_string => {\n      \
    \              val beats = music_string.split(\"\\\\|\").map(music_string => {\n\
    \                        music_string.split(\"\\\\o\").map(music_string => {\n\
    \                            music_string.split(\"\\\\.\").map(music_string =>\
    \ {\n                                music_string.split(\"\\\\|\").map(music_string\
    \ => {\n                                    music_string.split(\"\\\\o\").map(music_string\
    \ => {\n                                        music_string.split(\"\\\\.\").map(music_string\
    \ => {\n                                            music_string.split(\"\\\\\
    |\").map(music_string => {\n                                                music_string.split(\"\
    \\\\o\").map(music_string => {\n                                             \
    \       music_string.split(\"\\\\.\").map(music_string => {\n                \
    \                                        music_string.split(\"\\\\|\").map(music_string\
    \ => {\n                                                            music_string.split(\"\
    \\\\o\").map(music_string => {\n                                             \
    \                   music_string.split(\"\\\\.\").map(music_string => {\n    \
    \                                                                music_string.split(\"\
    \\\\|\").map(music_string => {\n                                             \
    \                           music_string.split(\"\\\\o\").map(music_string =>\
    \ {\n                                                                        \
    \    music_string.split(\"\\\\.\").map(music_string => {\n                   \
    \                                                             music_string.split(\"\
    \\\\|\").map(music_string => {\n                                             \
    \                                       music_string.split(\"\\\\o\").map(music_string\
    \ => {\n                                                                     \
    \                   music_string.split(\"\\\\.\").map(music_string => {\n    \
    \                                                                            \
    \            music_string.split(\"\\\\|\").map(music_string => {\n           \
    \                                                                            \
    \         music_string.split(\"\\\\o\").map(music_string => {\n              \
    \                                                                            \
    \          music_string.split(\"\\\\.\").map(music_string => {\n             \
    \                                                                            \
    \               music_string.split(\"\\\\|\").map(music_string => {\n        \
    \                                                                            \
    \                        music_string.split(\"\\\\o\").map(music_string => {\n\
    \                                                                            \
    \                                    music_string.split(\"\\\\.\").map(music_string\
    \ => {\n                                                                     \
    \                                               music_string.split(\"\\\\|\").map(music_string\
    \ => {\n                                                                     \
    \                                                   music_string.split(\"\\\\\
    o\").map(music_string => {\n                                                 \
    \                                                                           music_string.split(\"\
    \\\\.\").map(music_string => {\n                                             \
    \                                                                            \
    \       music_string.split(\"\\\\|\").map(music_string => {\n                \
    \                                                                            \
    \                                        music_string.split(\"\\\\o\").map(music_string\
    \ => {\n                                                                     \
    \                                                                   music_string.split(\"\
    \\\\.\").map(music_string => {\n                                             \
    \                                                                            \
    \                   music_string.split(\"\\\\|\").map(music_string => {\n    \
    \                                                                            \
    \                                                                music_string.split(\"\
    \\\\o\").map(music_string => {\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpttziwy5f.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpttziwy5f.scala:60:0 ----------------------------\e[0m\e[0m\n\e[31m60\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800017
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val beats = rest.length / 4\n            val\
    \ rest2 = rest.substring(0, rest.length / 2)\n            val rest3 = rest.substring(rest.length\
    \ / 2)\n            val rest4 = rest.substring(rest.length / 2, rest.length)\n\
    \            val rest5 = rest.substring(rest.length)\n            val rest6 =\
    \ rest.substring(0, rest.length / 2)\n            val rest7 = rest.substring(rest.length\
    \ / 2)\n            val rest8 = rest.substring(rest.length / 2, rest.length)\n\
    \            val rest9 = rest.substring(rest.length)\n            val rest10 =\
    \ rest.substring(0, rest.length / 2)\n            val rest11 = rest.substring(rest.length\
    \ / 2)\n            val rest12 = rest.substring(rest.length / 2, rest.length)\n\
    \            val rest13 = rest.substring(rest.length)\n            val rest14\
    \ = rest.substring(0, rest.length / 2)\n            val rest15 = rest.substring(rest.length\
    \ / 2)\n            val rest16 = rest.substring(rest.length / 2, rest.length)\n\
    \            val rest17 = rest.substring(rest.length)\n            val rest18\
    \ = rest.substring(0, rest.length / 2)\n            val rest19 = rest.substring(rest.length\
    \ / 2)\n            val rest20 = rest.substring(rest.length / 2, rest.length)\n\
    \            val rest21 = rest.substring(rest.length)\n            val rest22\
    \ = rest.substring(0, rest.length / 2)\n            val rest23 = rest.substring(rest.length\
    \ / 2)\n            val rest24 = rest.substring(rest.length / 2, rest.length)\n\
    \            val rest25 = rest.substring(rest.length)\n            val rest26\
    \ = rest.substring(0, rest.length / 2)\n            val rest27 = rest.substring(rest.length\
    \ / 2)\n            val rest28 = rest.substring(rest.length / 2, rest.length)\n\
    \            val rest29 = rest.substring(rest.length)\n            val rest30\
    \ = rest.substring(0, rest.length / 2)\n            val rest31 = rest.substring(rest.length\
    \ / 2)\n            val rest32 = rest.substring(rest.length / 2, rest.length)\n\
    \            val rest33 = rest.substring(rest.length)\n            val rest34\
    \ = rest.substring(0, rest.length / 2)\n            val rest35 = rest.substring(rest.length\
    \ / 2)\n            val rest36 = rest.substring(rest.length / 2, rest.length)\n\
    \            val rest37 = rest.substring\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq0xcih2d.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpq0xcih2d.scala:64:0 ----------------------------\e[0m\e[0m\n\e[31m64\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E051] Reference Error: /tmp/tmpq0xcih2d.scala:53:30 ------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m            \e[33mval\e[0m \e[36mrest37\e[0m = rest.substring\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mAmbiguous overload. The overloaded alternatives of \e[33mmethod\e[0m \e[35msubstring\e\
    [0m in \e[33mclass\e[0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: Int,\
    \ x$1: Int): String\n\e[31m   |\e[0m (x$0: Int): String\n\e[31m   |\e[0mboth match\
    \ expected type <?>\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.charAt(0)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.charAt(0)\n\
    \                val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                    val rest = music_string.charAt(0)\n              \
    \      val rest = music_string.substring(1).split(\"|\").map(music_string => {\n\
    \                        val rest = music_string.charAt(0)\n                 \
    \       val rest = music_string.substring(1).split(\"o\").map(music_string =>\
    \ {\n                            val rest = music_string.charAt(0)\n         \
    \                   val rest = music_string.substring(1).split(\"|\").map(music_string\
    \ => {\n                                val rest = music_string.charAt(0)\n  \
    \                              val rest = music_string.substring(1).split(\"o\"\
    ).map(music_string => {\n                                    val rest = music_string.charAt(0)\n\
    \                                    val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                        val rest =\
    \ music_string.charAt(0)\n                                        val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                            val rest\
    \ = music_string.charAt(0)\n                                            val rest\
    \ = music_string.substring(1).split(\"|\").map(music_string => {\n           \
    \                                     val rest = music_string.charAt(0)\n    \
    \                                            val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \   val rest = music_string.charAt(0)\n                                      \
    \              val rest = music_string.substring(1).split(\"|\").map(music_string\
    \ => {\n                                                        val rest = music_string.charAt(0)\n\
    \                                                        val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \           val rest = music_string.charAt(0)\n                              \
    \                              val rest = music_string.substring(1).split(\"|\"\
    ).map(music_string => {\n                                                    \
    \            val rest = music_string.charAt(0)\n                             \
    \                                   val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                   val rest = music_string.charAt(0)\n                      \
    \                                              val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \                       val rest = music_string.charAt(0)\n                  \
    \                                                      val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                           val rest = music_string.charAt(0)\n              \
    \                                                              val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \                               val rest = music_string.charAt(0)\n          \
    \                                                                      val rest\
    \ = musi\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkv2z_f4_.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpkv2z_f4_.scala:61:0 ----------------------------\e[0m\e[0m\n\e[31m61\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkv2z_f4_.scala:50:84 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m                                                    \
    \                            \e[33mval\e[0m \e[36mrest\e[0m = musi\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mrest is already defined as\
    \ \e[33mvalue\e[0m \e[35mrest\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800017
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \").map(_.toUpperCase).filter(_.nonEmpty)\n\
    \        val music_list_size = music_list.size\n        val music_list_size_half\
    \ = music_list_size / 2\n        val music_list_size_quarter = music_list_size\
    \ / 4\n        val music_list_size_whole = music_list_size % 4\n        val music_list_size_whole_half\
    \ = music_list_size_whole / 2\n        val music_list_size_whole_quarter = music_list_size_whole\
    \ / 4\n        val music_list_size_whole_whole = music_list_size_whole % 4\n \
    \       val music_list_size_whole_whole_half = music_list_size_whole_whole / 2\n\
    \        val music_list_size_whole_whole_quarter = music_list_size_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole = music_list_size_whole_whole\
    \ % 4\n        val music_list_size_whole_whole_whole_half = music_list_size_whole_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_whole_quarter = music_list_size_whole_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole_whole = music_list_size_whole_whole_whole\
    \ % 4\n        val music_list_size_whole_whole_whole_half = music_list_size_whole_whole_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_whole_quarter = music_list_size_whole_whole_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole_whole = music_list_size_whole_whole_whole_whole\
    \ % 4\n        val music_list_size_whole_whole_whole_half = music_list_size_whole_whole_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_whole_quarter = music_list_size_whole_whole_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole_whole = music_list_size_whole_whole_whole_whole\
    \ % 4\n        val music_list_size_whole_whole_whole_half = music_list_size_whole_whole_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_whole_quarter = music_list_size_whole_whole_whole_whole\
    \ / 4\n        val music_list_size_whole_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmxbo5uyw.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmxbo5uyw.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_size_whole_whole_whole_half\e[0m = music_list_size_whole_whole_whole_whole\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_whole_whole_whole_half is already defined\
    \ as \e[33mvalue\e[0m \e[35mmusic_list_size_whole_whole_whole_half\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmxbo5uyw.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_whole_whole_whole_quarter\e\
    [0m = music_list_size_whole_whole_whole_whole / \e[31m4\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_whole_whole_whole_quarter is already defined\
    \ as \e[33mvalue\e[0m \e[35mmusic_list_size_whole_whole_whole_quarter\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmxbo5uyw.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_whole_whole_whole_whole\e\
    [0m = music_list_size_whole_whole_whole_whole % \e[31m4\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_whole_whole_whole_whole is already defined\
    \ as \e[33mvalue\e[0m \e[35mmusic_list_size_whole_whole_whole_whole\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-"
  stdout: ''
  timestamp: 1659800019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ notes = music_string.split(\"|\")\n            val notes_length = notes.length\n\
    \            val notes_beats = notes.map(note => {\n                val note =\
    \ note.trim()\n                val note = note.charAt(0)\n                val\
    \ note = note.charAt(1)\n                val note = note.charAt(2)\n         \
    \       val note = note.charAt(3)\n                val note = note.charAt(4)\n\
    \                val note = note.charAt(5)\n                val note = note.charAt(6)\n\
    \                val note = note.charAt(7)\n                val note = note.charAt(8)\n\
    \                val note = note.charAt(9)\n                val note = note.charAt(10)\n\
    \                val note = note.charAt(11)\n                val note = note.charAt(12)\n\
    \                val note = note.charAt(13)\n                val note = note.charAt(14)\n\
    \                val note = note.charAt(15)\n                val note = note.charAt(16)\n\
    \                val note = note.charAt(17)\n                val note = note.charAt(18)\n\
    \                val note = note.charAt(19)\n                val note = note.charAt(20)\n\
    \                val note = note.charAt(21)\n                val note = note.charAt(22)\n\
    \                val note = note.charAt(23)\n                val note = note.charAt(24)\n\
    \                val note = note.charAt(25)\n                val note = note.charAt(26)\n\
    \                val note = note.charAt(27)\n                val note = note.charAt(28)\n\
    \                val note = note.charAt(29)\n                val note = note.charAt(30)\n\
    \                val note = note.charAt(31)\n                val note = note.charAt(32)\n\
    \                val note = note.charAt(33)\n                val note = note.charAt(34)\n\
    \                val note = note.charAt(35)\n                val note = note.charAt(36)\n\
    \                val note = note.charAt(37)\n                val note = note.charAt(38)\n\
    \                val note = note.charAt(39)\n                val note = note.charAt(40)\n\
    \                val note = note.charAt(41)\n                val note = note.charAt(42)\n\
    \                val note = note.charAt(43)\n                val note = note.charAt(44)\n\
    \                val note = note.charAt(45)\n                val note = note.charAt(46)\n\
    \                val note = note.charAt(47)\n                val note = note.charAt(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpamnnlp2s.scala:67:39 ---------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m                \e[33mval\e[0m \e[36mnote\e[0m = note.charAt(\n\
    \e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m   |\e\
    [0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpamnnlp2s.scala:69:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m69 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpamnnlp2s.scala:78:0 ----------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n3 errors found\n"
  stdout: ''
  timestamp: 1659800017
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(' ').map(music_string => music_string.charAt(0).toInt)\n\
    \        val music_list_size = music_list.size\n        val music_list_length\
    \ = music_list_size / 4\n        val music_list_remainder = music_list_size %\
    \ 4\n        val music_list_last_beat = music_list_length - music_list_remainder\n\
    \        val music_list_last_beats = music_list_last_beat * 4\n        val music_list_last_beats_array\
    \ = Array.fill(music_list_last_beats)(0)\n        val music_list_last_beats_array_size\
    \ = music_list_last_beats_array.length\n        val music_list_last_beats_array_remainder\
    \ = music_list_last_beats_array_size - music_list_last_beats_array_remainder\n\
    \        val music_list_last_beats_array_remainder_array = Array.fill(music_list_last_beats_array_remainder)(0)\n\
    \        val music_list_last_beats_array_remainder_array_size = music_list_last_beats_array_remainder_array.length\n\
    \        val music_list_last_beats_array_remainder_array_remainder = music_list_last_beats_array_remainder_array_size\
    \ - music_list_last_beats_array_remainder_array_remainder\n        val music_list_last_beats_array_remainder_array_remainder_array\
    \ = Array.fill(music_list_last_beats_array_remainder_array_remainder)(0)\n   \
    \     val music_list_last_beats_array_remainder_array_remainder_array_size = music_list_last_beats_array_remainder_array_remainder_array.length\n\
    \        val music_list_last_beats_array_remainder_array_remainder_array_remainder\
    \ = music_list_last_beats_array_remainder_array_remainder_array_size - music_list_last_beats_array_remainder_array_remainder_array_remainder\n\
    \        val music_list_last_beats_array_remainder_array_remainder_array_remainder_array\
    \ = Array.fill(music_list_last_beats_array_remainder_array_remainder_array_remainder)(0)\n\
    \        val music_list_last_beats_array_remainder_array_remainder_array_remainder_array_size\
    \ = music_list_last_beats_array_remainder_array_remainder_array_remainder_array.length\n\
    \        val music_list_last_beats_array_remainder_array_remainder_array_remainder_array_remainder\
    \ = music_list_last_beats_array_remainder_array_remainder_array_remainder_array_size\
    \ - music_list_last_beats_array_remainder_array_remainder_array_remainder_array_remainder\n\
    \        val music_list_last_beats_array_remainder_array_remainder_array_remainder_array_remain\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0wufo0wo.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0wufo0wo.scala:22:87\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_last_beats_array_remainder\e[0m = music_list_last_beats_array_size\
    \ - music_list_last_beats_array_remainder\n\e[31m\e[31m   |\e[0m             \
    \                                                                          ^\e\
    [0m\n\e[31m   |\e[0m        Recursive \e[33mvalue\e[0m \e[35mmusic_list_last_beats_array_remainder\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0wufo0wo.scala:25:119\
    \ --------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_last_beats_array_remainder_array_remainder\e[0m = music_list_last_beats_array_remainder_array_size\
    \ - music_list_last_beats_array_remainder_array_remainder\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                             ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35mmusic_list_last_beats_array_remainder_array_remainder\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0wufo0wo.scala:28:151\
    \ --------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_last_beats_array_remainder_array_remainder_array_remainder\e\
    [0m = music_list_last_beats_array_remainder_array_remainder_array_size - music_list_last_beats_array_remainder_array_remainder_array_remainder\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                   ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mmusic_list_last_beats_array_remainder_array_remainder_array_remainder\e\
    [0m needs type"
  stdout: ''
  timestamp: 1659800019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \").map(_.toUpperCase())\n\
    \        val music_list_size = music_list.size\n        val music_list_size_half\
    \ = music_list_size / 2\n        val music_list_size_quarter = music_list_size\
    \ / 4\n        val music_list_size_whole = music_list_size\n        val music_list_size_whole_half\
    \ = music_list_size_whole / 2\n        val music_list_size_whole_quarter = music_list_size_whole\
    \ / 4\n        val music_list_size_whole_whole = music_list_size_whole / 8\n \
    \       val music_list_size_whole_whole_half = music_list_size_whole_whole / 2\n\
    \        val music_list_size_whole_whole_quarter = music_list_size_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole = music_list_size_whole_whole\
    \ / 8\n        val music_list_size_whole_whole_whole_half = music_list_size_whole_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_whole_quarter = music_list_size_whole_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole_whole = music_list_size_whole_whole_whole\
    \ / 8\n        val music_list_size_whole_whole_whole_half = music_list_size_whole_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_whole_quarter = music_list_size_whole_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole_whole = music_list_size_whole_whole_whole\
    \ / 8\n        val music_list_size_whole_whole_whole_half = music_list_size_whole_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_whole_quarter = music_list_size_whole_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole_whole = music_list_size_whole_whole_whole\
    \ / 8\n        val music_list_size_whole_whole_whole_half = music_list_size_whole_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_whole_quarter = music_list_size_whole_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole_whole = music_list_size_whole_whole_whole\
    \ / 8\n        val music_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4ppgv7em.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4ppgv7em.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_size_whole_whole_whole_half\e[0m = music_list_size_whole_whole_whole\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_whole_whole_whole_half is already defined\
    \ as \e[33mvalue\e[0m \e[35mmusic_list_size_whole_whole_whole_half\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4ppgv7em.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_whole_whole_whole_quarter\e\
    [0m = music_list_size_whole_whole_whole / \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_whole_whole_whole_quarter is already defined\
    \ as \e[33mvalue\e[0m \e[35mmusic_list_size_whole_whole_whole_quarter\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4ppgv7em.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_whole_whole_whole_whole\e\
    [0m = music_list_size_whole_whole_whole / \e[31m8\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_whole_whole_whole_whole is already defined\
    \ as \e[33mvalue\e[0m \e[35mmusic_list_size_whole_whole_whole_whole\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4ppgv"
  stdout: ''
  timestamp: 1659800020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(' ').map(music_string => {\n            val note\
    \ = music_string.charAt(0)\n            val rest = music_string.substring(1).trim\n\
    \            val beats = rest.length / 4\n            val rest = rest.length %\
    \ 4\n            val rest = if (rest == 0) 0 else rest\n            val rest =\
    \ if (rest == 0) 0 else rest\n            val rest = if (rest == 0) 0 else rest\n\
    \            val rest = if (rest == 0) 0 else rest\n            val rest = if\
    \ (rest == 0) 0 else rest\n            val rest = if (rest == 0) 0 else rest\n\
    \            val rest = if (rest == 0) 0 else rest\n            val rest = if\
    \ (rest == 0) 0 else rest\n            val rest = if (rest == 0) 0 else rest\n\
    \            val rest = if (rest == 0) 0 else rest\n            val rest = if\
    \ (rest == 0) 0 else rest\n            val rest = if (rest == 0) 0 else rest\n\
    \            val rest = if (rest == 0) 0 else rest\n            val rest = if\
    \ (rest == 0) 0 else rest\n            val rest = if (rest == 0) 0 else rest\n\
    \            val rest = if (rest == 0) 0 else rest\n            val rest = if\
    \ (rest == 0) 0 else rest\n            val rest = if (rest == 0) 0 else rest\n\
    \            val rest = if (rest == 0) 0 else rest\n            val rest = if\
    \ (rest == 0) 0 else rest\n            val rest = if (rest == 0) 0 else rest\n\
    \            val rest = if (rest == 0) 0 else rest\n            val rest = if\
    \ (rest == 0) 0 else rest\n            val rest = if (rest == 0) 0 else rest\n\
    \            val rest = if (rest == 0) 0 else rest\n            val rest = if\
    \ (rest == 0) 0 else rest\n            val rest = if (rest == 0) 0 else rest\n\
    \            val rest = if (rest == 0) 0 else rest\n            val rest = if\
    \ (rest == 0) 0 else rest\n            val rest = if (rest == 0) 0 else rest\n\
    \            val rest = if (rest == 0) 0 else rest\n            val rest = if\
    \ (rest == 0) 0 else rest\n            val rest = if (rest == 0) 0 else rest\n\
    \            val rest = if (rest == 0) 0 else rest\n            val rest = if\
    \ (rest == 0) 0 else rest\n            val rest = if (rest == 0) 0 else rest\n\
    \            val rest = if (rest == 0) 0 else rest\n            val rest = if\
    \ (rest == 0) 0 else rest\n            val rest = if (rest == 0) 0 else rest\n\
    \            val rest = if (rest == 0) 0 else rest\n            val rest = if\
    \ (rest == 0) 0 else rest\n            val rest = if (rest == 0) 0 else \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfck8i1y9.scala:60:44 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m            \e[33mval\e[0m \e[36mrest\e[0m = \e[33mif\e\
    [0m (rest == \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m \n\e[31m\e[31m   |\e[0m\
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                              expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfck8i1y9.scala:62:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m62 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpfck8i1y9.scala:71:0 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfck8i1y9.scala:18:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e\
    [0m \e[36mrest\e[0m = rest.length % \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mrest is already defined\
    \ as \e[33mvalue\e[0m \e[35mrest\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfck8i1y9.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mrest\e[0m = \e[33mif\e\
    [0m (rest == \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m rest\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mrest\
    \ is already defined as \e[33mvalue\e[0m \e[35mrest\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfck8i1y9.scala:20:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e\
    [0m \e[36mrest\e[0m = \e[33mif\e[0m (rest == \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e\
    [0m rest\n\e[31m\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659800022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_length\
    \ = music_list.length\n        val music_beats = music_list.map(music_string =>\
    \ {\n            val music_note = music_string.substring(0, 1)\n            val\
    \ music_length = music_string.length\n            val music_beats = music_string.substring(music_length-1,\
    \ music_length).split(\"\\\\o\")\n            val music_beats_length = music_beats.length\n\
    \            val music_beats_sum = music_beats.map(music_beat => {\n         \
    \       val music_beat = music_beat.substring(0, 1)\n                val music_beat_length\
    \ = music_beat.length\n                val music_beat_sum = music_beat.substring(music_beat_length-1,\
    \ music_beat_length).toLong\n                music_beat_sum\n            })\n\
    \            music_beats_sum\n        })\n        music_beats.map(music_beat =>\
    \ {\n            music_beat.foldLeft(0)((sum, music_beat) => sum + music_beat)\n\
    \        })\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwselt8bk.scala:22:33 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36mmusic_beat\e[0m\
    \ = music_beat.substring(\e[31m0\e[0m, \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \           Recursive \e[33mvalue\e[0m \e[35mmusic_beat\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpwselt8bk.scala:26:14 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            })\n\e[31m\e[31m   |\e[0m              ^\e\
    [0m\n\e[31m   |\e[0m              No ClassTag available for B\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m              where:    B is a type variable\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpwselt8bk.scala:28:10 -----------------------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m        })\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e[31m\
    \   |\e[0m          No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m          where:    B is a type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1659800021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_length\
    \ = music_list.length\n        val music_beats = music_list.length / 4\n     \
    \   val music_notes = music_list.length % 4\n        val music_notes_array = Array.fill(music_notes)(0)\n\
    \        val music_notes_array_length = music_notes_array.length\n        val\
    \ music_notes_array_length = music_notes_array.length\n        val music_notes_array_length\
    \ = music_notes_array.length\n        val music_notes_array_length = music_notes_array.length\n\
    \        val music_notes_array_length = music_notes_array.length\n        val\
    \ music_notes_array_length = music_notes_array.length\n        val music_notes_array_length\
    \ = music_notes_array.length\n        val music_notes_array_length = music_notes_array.length\n\
    \        val music_notes_array_length = music_notes_array.length\n        val\
    \ music_notes_array_length = music_notes_array.length\n        val music_notes_array_length\
    \ = music_notes_array.length\n        val music_notes_array_length = music_notes_array.length\n\
    \        val music_notes_array_length = music_notes_array.length\n        val\
    \ music_notes_array_length = music_notes_array.length\n        val music_notes_array_length\
    \ = music_notes_array.length\n        val music_notes_array_length = music_notes_array.length\n\
    \        val music_notes_array_length = music_notes_array.length\n        val\
    \ music_notes_array_length = music_notes_array.length\n        val music_notes_array_length\
    \ = music_notes_array.length\n        val music_notes_array_length = music_notes_array.length\n\
    \        val music_notes_array_length = music_notes_array.length\n        val\
    \ music_notes_array_length = music_notes_array.length\n        val music_notes_array_length\
    \ = music_notes_array.length\n        val music_notes_array_length = music_notes_array.length\n\
    \        val music_notes_array_length = music_notes_array.length\n        val\
    \ music_notes_array_length = music_notes_array.length\n        val music_notes_array_length\
    \ = music_notes_array.length\n        val music_notes_array_length = music_notes_array.length\n\
    \        val music_notes_array_length = music_notes_array.length\n        val\
    \ music_notes_array_length = music_notes_array\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa68a111d.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_array_length\e\
    [0m = music_notes_array.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_array_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_notes_array_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa68a111d.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_array_length\e\
    [0m = music_notes_array.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_array_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_notes_array_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa68a111d.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_array_length\e\
    [0m = music_notes_array.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_array_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_notes_array_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa68a111d.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_array_length\e\
    [0m = music_notes_array.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_array_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_notes_array_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] "
  stdout: ''
  timestamp: 1659800021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(' ').map(music_note => {\n            val note\
    \ = music_note.charAt(0)\n            val beats = music_note.substring(1).split('|').map(_.toInt)\n\
    \            val last_beat = beats.last\n            beats.take(last_beat).sum\n\
    \        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz4k6uvmt.scala:19:11\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m' '\e[0m).map(\e[36mmusic_note\e[0m => {\n\e[31m15 |\e[0m            \e[33mval\e\
    [0m \e[36mnote\e[0m = music_note.charAt(\e[31m0\e[0m)\n\e[31m16 |\e[0m       \
    \     \e[33mval\e[0m \e[36mbeats\e[0m = music_note.substring(\e[31m1\e[0m).split(\e\
    [31m'|'\e[0m).map(_.toInt)\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mlast_beat\e\
    [0m = beats.last\n\e[31m18 |\e[0m            beats.take(last_beat).sum\n\e[31m19\
    \ |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m\
    \        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required:\
    \ List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.charAt(0)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.charAt(0)\n\
    \                val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                    val rest = music_string.charAt(0)\n              \
    \      val rest = music_string.substring(1).split(\".\").map(music_string => {\n\
    \                        val rest = music_string.charAt(0)\n                 \
    \       val rest = music_string.substring(1).split(\"|\").map(music_string =>\
    \ {\n                            val rest = music_string.charAt(0)\n         \
    \                   val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                                val rest = music_string.charAt(0)\n  \
    \                              val rest = music_string.substring(1).split(\".\"\
    ).map(music_string => {\n                                    val rest = music_string.charAt(0)\n\
    \                                    val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                        val rest =\
    \ music_string.charAt(0)\n                                        val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                            val rest\
    \ = music_string.charAt(0)\n                                            val rest\
    \ = music_string.substring(1).split(\".\").map(music_string => {\n           \
    \                                     val rest = music_string.charAt(0)\n    \
    \                                            val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \   val rest = music_string.charAt(0)\n                                      \
    \              val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                                                        val rest = music_string.charAt(0)\n\
    \                                                        val rest = music_string.substring(1).split(\"\
    .\").map(music_string => {\n                                                 \
    \           val rest = music_string.charAt(0)\n                              \
    \                              val rest = music_string.substring(1).split(\"|\"\
    ).map(music_string => {\n                                                    \
    \            val rest = music_string.charAt(0)\n                             \
    \                                   val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                   val rest = music_string.charAt(0)\n                      \
    \                                              val rest = music_string.substring(1).split(\"\
    .\").map(music_string => {\n                                                 \
    \                       val rest = music_string.charAt(0)\n                  \
    \                                                      val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \                           val rest = music_string.charAt(0)\n              \
    \                                                              val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                               val rest = music_string.charAt(0)\n          \
    \                                                                      val rest\
    \ = musi\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprs56wkk9.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmprs56wkk9.scala:61:0 ----------------------------\e[0m\e[0m\n\e[31m61\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprs56wkk9.scala:50:84 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m                                                    \
    \                            \e[33mval\e[0m \e[36mrest\e[0m = musi\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mrest is already defined as\
    \ \e[33mvalue\e[0m \e[35mrest\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_list_size\
    \ = music_list.size\n        val music_list_length = music_list_size / 4\n   \
    \     val music_list_remainder = music_list_size % 4\n        val music_list_last_beat\
    \ = music_list_length - music_list_remainder\n        val music_list_last_beats\
    \ = music_list_last_beat * 4\n        val music_list_last_beats_array = Array[Long](music_list_last_beats)\n\
    \        val music_list_last_beats_array_size = music_list_last_beats_array.size\n\
    \        val music_list_last_beats_array_length = music_list_last_beats_array_size\
    \ / 4\n        val music_list_last_beats_array_remainder = music_list_last_beats_array_size\
    \ % 4\n        val music_list_last_beats_array_last_beat = music_list_last_beats_array_length\
    \ - music_list_last_beats_array_remainder\n        val music_list_last_beats_array_last_beats\
    \ = music_list_last_beats_array_last_beat * 4\n        val music_list_last_beats_array_last_beats_array\
    \ = Array[Long](music_list_last_beats_array_last_beats)\n        val music_list_last_beats_array_last_beats_array_size\
    \ = music_list_last_beats_array_last_beats_array.size\n        val music_list_last_beats_array_last_beats_array_length\
    \ = music_list_last_beats_array_last_beats_array_size / 4\n        val music_list_last_beats_array_last_beats_array_remainder\
    \ = music_list_last_beats_array_last_beats_array_size % 4\n        val music_list_last_beats_array_last_beats_array_last_beat\
    \ = music_list_last_beats_array_last_beats_array_length - music_list_last_beats_array_last_beats_array_remainder\n\
    \        val music_list_last_beats_array_last_beats_array_last_beats = music_list_last_beats_array_last_beats_array_last_beat\
    \ * 4\n        val music_list_last_beats_array_last_beats_array_last_beats_array\
    \ = Array[Long](music_list_last_beats_array_last_beats_array_last_beats)\n   \
    \     val music_list_last_beats_array_last_beats_array_last_beats_array_size =\
    \ music_list_last_beats_array_last_beats_array_last_beats_array.size\n       \
    \ val music_list_last_beats_array_last_beats_array_last_beats_array_length = music_list_last_beats_array_last_beats_array_last_beats_array_size\
    \ / 4\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5e9xfs04.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_length\
    \ = notes.length\n        val notes_beats = notes.map(_.length.toLong)\n     \
    \   val notes_beats_length = notes_beats.sum\n        val notes_beats_length =\
    \ notes_beats_length / 4\n        val notes_beats_length = notes_beats_length.toInt\n\
    \        val notes_beats_length = notes_beats_length * 4\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length.toInt\n        val\
    \ notes_beats_length = notes_beats_length * 4\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length.toInt\n        val\
    \ notes_beats_length = notes_beats_length * 4\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length.toInt\n        val\
    \ notes_beats_length = notes_beats_length * 4\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length.toInt\n        val\
    \ notes_beats_length = notes_beats_length * 4\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length.toInt\n        val\
    \ notes_beats_length = notes_beats_length * 4\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length.toInt\n        val\
    \ notes_beats_length = notes_beats_length * 4\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length.toInt\n        val\
    \ notes_beats_length = notes_beats_length * 4\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2s_1l3q2.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length / \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2s_1l3q2.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2s_1l3q2.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2s_1l3q2.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2s_1l3q2.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659800022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\"\\\\|\").map(music_string => {\n           \
    \ val notes = music_string.split(\"o\").map(music_string => {\n              \
    \  val note = music_string.split(\"|\").map(music_string => {\n              \
    \      val beats = music_string.split(\".\").map(music_string => {\n         \
    \               music_string.toLong\n                    }).sum\n            \
    \        beats\n                }).sum\n                note\n            }).sum\n\
    \            notes\n        }).sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv4xk_4al.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m  \
    \      ^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m15 |\e[0m\
    \            \e[33mval\e[0m \e[36mnotes\e[0m = music_string.split(\e[31m\"o\"\e\
    [0m).map(\e[36mmusic_string\e[0m => {\n\e[31m16 |\e[0m                \e[33mval\e\
    [0m \e[36mnote\e[0m = music_string.split(\e[31m\"|\"\e[0m).map(\e[36mmusic_string\e\
    [0m => {\n\e[31m17 |\e[0m                    \e[33mval\e[0m \e[36mbeats\e[0m =\
    \ music_string.split(\e[31m\".\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m18\
    \ |\e[0m                        music_string.toLong\n\e[31m19 |\e[0m         \
    \           }).sum\n\e[31m20 |\e[0m                    beats\n\e[31m21 |\e[0m\
    \                }).sum\n\e[31m22 |\e[0m                note\n\e[31m23 |\e[0m\
    \            }).sum\n\e[31m24 |\e[0m            notes\n\e[31m25 |\e[0m       \
    \ }).sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_list_size\
    \ = music_list.size\n        val music_list_size_2 = music_list_size / 2\n   \
    \     val music_list_size_3 = music_list_size_2 / 2\n        val music_list_size_4\
    \ = music_list_size_3 / 2\n        val music_list_size_5 = music_list_size_4 /\
    \ 2\n        val music_list_size_6 = music_list_size_5 / 2\n        val music_list_size_7\
    \ = music_list_size_6 / 2\n        val music_list_size_8 = music_list_list_size_7\
    \ / 2\n        val music_list_size_9 = music_list_size_8 / 2\n        val music_list_size_10\
    \ = music_list_size_9 / 2\n        val music_list_size_11 = music_list_size_10\
    \ / 2\n        val music_list_size_12 = music_list_size_11 / 2\n        val music_list_size_13\
    \ = music_list_size_12 / 2\n        val music_list_size_14 = music_list_size_13\
    \ / 2\n        val music_list_size_15 = music_list_size_14 / 2\n        val music_list_size_16\
    \ = music_list_size_15 / 2\n        val music_list_size_17 = music_list_size_16\
    \ / 2\n        val music_list_size_18 = music_list_size_17 / 2\n        val music_list_size_19\
    \ = music_list_size_18 / 2\n        val music_list_size_20 = music_list_size_19\
    \ / 2\n        val music_list_size_21 = music_list_size_20 / 2\n        val music_list_size_22\
    \ = music_list_size_21 / 2\n        val music_list_size_23 = music_list_size_22\
    \ / 2\n        val music_list_size_24 = music_list_size_23 / 2\n        val music_list_size_25\
    \ = music_list_size_24 / 2\n        val music_list_size_26 = music_list_size_25\
    \ / 2\n        val music_list_size_27 = music_list_size_26 / 2\n        val music_list_size_28\
    \ = music_list_size_27 / 2\n        val music_list_size_29 = music_list_size_28\
    \ / 2\n        val music_list_size_30 = music_list_size_29 / 2\n        val music_list_size_31\
    \ = music_list_size_30 / 2\n        val music_list_size_32 = music_list_size_31\
    \ / 2\n        val music_list_\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn9smdvce.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn9smdvce.scala:22:32\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn9smdvce.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(' ').toList\n        val music_length\
    \ = music_list.length\n        val music_beats = music_list.map(music_string =>\
    \ {\n            val music_note = music_string.charAt(0)\n            val music_length\
    \ = music_string.length\n            val music_beats = music_string.substring(1).split('|').map(music_string\
    \ => {\n                val music_note = music_string.charAt(0)\n            \
    \    val music_length = music_string.length\n                val music_beats =\
    \ music_string.substring(1).split('|').map(music_string => {\n               \
    \     val music_note = music_string.charAt(0)\n                    val music_length\
    \ = music_string.length\n                    val music_beats = music_string.substring(1).split('|').map(music_string\
    \ => {\n                        val music_note = music_string.charAt(0)\n    \
    \                    val music_length = music_string.length\n                \
    \        val music_beats = music_string.substring(1).split('|').map(music_string\
    \ => {\n                            val music_note = music_string.charAt(0)\n\
    \                            val music_length = music_string.length\n        \
    \                    val music_beats = music_string.substring(1).split('|').map(music_string\
    \ => {\n                                val music_note = music_string.charAt(0)\n\
    \                                val music_length = music_string.length\n    \
    \                            val music_beats = music_string.substring(1).split('|').map(music_string\
    \ => {\n                                    val music_note = music_string.charAt(0)\n\
    \                                    val music_length = music_string.length\n\
    \                                    val music_beats = music_string.substring(1).split('|').map(music_string\
    \ => {\n                                        val music_note = music_string.charAt(0)\n\
    \                                        val music_length = music_string.length\n\
    \                                        val music_beats = music_string.substring(1).split('|').map(music_string\
    \ => {\n                                            val music_note = music_string.charAt(0)\n\
    \                                            val music_length = music_string.length\n\
    \                                            val music_beats = music_string.substring(1).split('|').map(music_string\
    \ => {\n                                                val music_note = music_string.charAt(0)\n\
    \                                                val music_length = music_string.length\n\
    \                                                val music_beats = music_string.substring(1).split('|').map(music_string\
    \ => {\n                                                    val music_note = music_string.charAt(0)\n\
    \                                                    val music_length = music_string.length\n\
    \                                                    val music_beats = music_string.substring(1).split('|').map(music_string\
    \ => {\n                                                        val music_note\
    \ = music_string.charAt(0)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpspx7fulb.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpspx7fulb.scala:61:0 ----------------------------\e[0m\e[0m\n\e[31m61\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpspx7fulb.scala:60:1 ---------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_length\
    \ = notes.length\n        val notes_beats = notes.map(_.length.toLong)\n     \
    \   val notes_beats_length = notes_beats.sum\n        val notes_beats_sum = notes_beats.sum\n\
    \        val notes_beats_length_sum = notes_beats_length * notes_beats_sum\n \
    \       val notes_beats_length_sum_length = notes_beats_length_sum.toLong\n  \
    \      val notes_beats_length_sum_length_length = notes_beats_length_sum_length.toLong\n\
    \        val notes_beats_length_sum_length_length_length = notes_beats_length_sum_length_length.toLong\n\
    \        val notes_beats_length_sum_length_length_length_length_length = notes_beats_length_sum_length_length_length_length.toLong\n\
    \        val notes_beats_length_sum_length_length_length_length_length_length_length\
    \ = notes_beats_length_sum_length_length_length_length_length_length.toLong\n\
    \        val notes_beats_length_sum_length_length_length_length_length_length_length_length_length\
    \ = notes_beats_length_sum_length_length_length_length_length_length_length_length.toLong\n\
    \        val notes_beats_length_sum_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = notes_beats_length_sum_length_length_length_length_length_length_length_length_length_length_length.toLong\n\
    \        val notes_beats_length_sum_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = notes_beats_length_sum_length_length_length_length_length_length_length_length_length_length_length_length_length_length.toLong\n\
    \        val notes_beats_length_sum_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = notes_beats_length_sum_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length.toLong\n\
    \        val notes_beats_length_sum_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl1905d_i.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl1905d_i.scala:23:72\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mnotes_beats_length_sum_length_length_length_length_length\e[0m = notes_beats_length_sum_length_length_length_length.toLong\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m           Not found: notes_beats_length_sum_length_length_length_length\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl1905d_i.scala:24:86\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mnotes_beats_length_sum_length_length_length_length_length_length_length\e\
    [0m = notes_beats_length_sum_length_length_length_length_length_length.toLong\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: notes_beats_length_sum_length_length_length_length_length_length\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl1905d_i.scala:25:100\
    \ -----------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mnotes_beats_length_sum_length_length_length_length_length_length_length_length_length\e\
    [0m = notes_beats_length_sum_length_length_length_length_length_length_length_length.toLong\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: notes_beats_length_sum_length_length_length_length_length_length_length_length\n\
    \e[31m   |\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1659800022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(' ').toList\n        val notes\
    \ = music_list.map(music_string => {\n            val note = music_string.charAt(0)\n\
    \            val rest = music_string.substring(1).trim\n            val beats\
    \ = rest.split('|').map(music_string => {\n                val beat = music_string.charAt(0)\n\
    \                val rest = music_string.substring(1).trim\n                val\
    \ rest2 = rest.split('|').map(music_string => {\n                    val rest3\
    \ = music_string.charAt(0)\n                    val rest4 = music_string.substring(1).trim\n\
    \                    val rest5 = rest4.split('|').map(music_string => {\n    \
    \                    val rest6 = music_string.charAt(0)\n                    \
    \    val rest7 = music_string.substring(1).trim\n                        val rest8\
    \ = rest7.split('|').map(music_string => {\n                            val rest9\
    \ = music_string.charAt(0)\n                            val rest10 = music_string.substring(1).trim\n\
    \                            val rest11 = rest10.split('|').map(music_string =>\
    \ {\n                                val rest12 = music_string.charAt(0)\n   \
    \                             val rest13 = music_string.substring(1).trim\n  \
    \                              val rest14 = rest13.split('|').map(music_string\
    \ => {\n                                    val rest15 = music_string.charAt(0)\n\
    \                                    val rest16 = music_string.substring(1).trim\n\
    \                                    val rest17 = rest16.split('|').map(music_string\
    \ => {\n                                        val rest18 = music_string.charAt(0)\n\
    \                                        val rest19 = music_string.substring(1).trim\n\
    \                                        val rest20 = rest19.split('|').map(music_string\
    \ => {\n                                            val rest21 = music_string.charAt(0)\n\
    \                                            val rest22 = music_string.substring(1).trim\n\
    \                                            val rest23 = rest22.split('|').map(music_string\
    \ => {\n                                                val rest24 = music_string.charAt(0)\n\
    \                                                val rest25 = music_string.substring(1).trim\n\
    \                                                val rest26 = rest25.split('|').map(music_string\
    \ => {\n                                                    val rest27 = music_string.charAt(0)\n\
    \                                                    val rest28 = music_string.substring(1).trim\n\
    \                                                    val rest29 = rest28.split(\"\
    |\").map(music_string => {\n                                                 \
    \       val rest30 = music_string.charAt(0)\n                                \
    \                        val rest31 = music_string.substring(1).trim\n       \
    \                                                 val rest32 = rest31.split('|').map(music_string\
    \ => {\n                                                            val rest33\
    \ = music_string.charAt(0)\n                                                 \
    \           val rest34 = music_string.substring(1).trim\n                    \
    \                                        val rest35 = rest34.split(\"|\").map(musi\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpohguqhfx.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpohguqhfx.scala:56:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m56 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpohguqhfx.scala:65:0 ----------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpohguqhfx.scala:54:95\
    \ ------------------------\e[0m\e[0m\n\e[31m54 |\e[0m                        \
    \                                    \e[33mval\e[0m \e[36mrest35\e[0m = rest34.split(\e\
    [31m\"|\"\e[0m).map(musi\n\e[31m\e[31m   |\e[0m                              \
    \                                                                 ^^^^\e[0m\n\e\
    [31m   |\e[0m                                                         Not found:\
    \ musi\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpohguqhfx.scala:64:1\
    \ ---------------------\e[0m\e[0m\n\e[31m64 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659800022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split(' ').map(_.toUpperCase()).filter(_.length\
    \ != 0).map(n => n.charAt(0).toInt)\n        val beats = notes.map(n => n % 12).sum\n\
    \        val notes_count = notes.map(n => n % 12).sum\n        val notes_count_2\
    \ = notes.map(n => n % 12).sum\n        val notes_count_3 = notes.map(n => n %\
    \ 12).sum\n        val notes_count_4 = notes.map(n => n % 12).sum\n        val\
    \ notes_count_5 = notes.map(n => n % 12).sum\n        val notes_count_6 = notes.map(n\
    \ => n % 12).sum\n        val notes_count_7 = notes.map(n => n % 12).sum\n   \
    \     val notes_count_8 = notes.map(n => n % 12).sum\n        val notes_count_9\
    \ = notes.map(n => n % 12).sum\n        val notes_count_10 = notes.map(n => n\
    \ % 12).sum\n        val notes_count_11 = notes.map(n => n % 12).sum\n       \
    \ val notes_count_12 = notes.map(n => n % 12).sum\n        val notes_count_13\
    \ = notes.map(n => n % 12).sum\n        val notes_count_14 = notes.map(n => n\
    \ % 12).sum\n        val notes_count_15 = notes.map(n => n % 12).sum\n       \
    \ val notes_count_16 = notes.map(n => n % 12).sum\n        val notes_count_17\
    \ = notes.map(n => n % 12).sum\n        val notes_count_18 = notes.map(n => n\
    \ % 12).sum\n        val notes_count_19 = notes.map(n => n % 12).sum\n       \
    \ val notes_count_20 = notes.map(n => n % 12).sum\n        val notes_count_21\
    \ = notes.map(n => n % 12).sum\n        val notes_count_22 = notes.map(n => n\
    \ % 12).sum\n        val notes_count_23 = notes.map(n => n % 12).sum\n       \
    \ val notes_count_24 = notes.map(n => n % 12).sum\n        val notes_count_25\
    \ = notes.map(n => n % 12).sum\n        val notes_count_26 = notes.map(n => n\
    \ % 12).sum\n        val notes_count_27 = notes.map(n => n % 12).sum\n       \
    \ val notes_count_28 = notes.map(n => n % 12).sum\n        val notes_count_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg91kl9c9.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpg91kl9c9.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \").map(_.toUpperCase()).filter(_.nonEmpty)\n\
    \        val notes = music_list.map(music_note => {\n            val note = music_note.split(\"\
    |\").head\n            val beats = music_note.split(\"|\").last.split(\"o\").last.toInt\n\
    \            beats\n        })\n        val notes_count = notes.map(n => n.toLong)\n\
    \        notes_count.sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprciftsj5.scala:21:8\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m        notes_count.sum\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Long\n\e[31m   |\e[0m        Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e\
    [0mLong\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.charAt(0).toLowerCase\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.charAt(0).toLowerCase\n\
    \                val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                    val rest = music_string.charAt(0).toLowerCase\n  \
    \                  val rest = music_string.substring(1).split(\"|\").map(music_string\
    \ => {\n                        val rest = music_string.charAt(0).toLowerCase\n\
    \                        val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                            val rest = music_string.charAt(0).toLowerCase\n\
    \                            val rest = music_string.substring(1).split(\"|\"\
    ).map(music_string => {\n                                val rest = music_string.charAt(0).toLowerCase\n\
    \                                val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                    val rest = music_string.charAt(0).toLowerCase\n\
    \                                    val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                        val rest =\
    \ music_string.charAt(0).toLowerCase\n                                       \
    \ val rest = music_string.substring(1).split(\"o\").map(music_string => {\n  \
    \                                          val rest = music_string.charAt(0).toLowerCase\n\
    \                                            val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                val\
    \ rest = music_string.charAt(0).toLowerCase\n                                \
    \                val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                                                    val rest = music_string.charAt(0).toLowerCase\n\
    \                                                    val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \       val rest = music_string.charAt(0).toLowerCase\n                      \
    \                                  val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \           val rest = music_string.charAt(0).toLowerCase\n                  \
    \                                          val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \               val rest = music_string.charAt(0).toLowerCase\n              \
    \                                                  val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                   val rest = music_string.charAt(0).toLowerCase\n          \
    \                                                          val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \                       val rest = music_string.charAt(0).toLowerCase\n      \
    \                                                                  val rest =\
    \ music_string.substring(1).split(\"o\").map(music_string => {\n             \
    \                                                               val rest = music_string.charAt(0).toLowerCase\n\
    \                                                                            \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnrr_r5v7.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpnrr_r5v7.scala:59:0 ----------------------------\e[0m\e[0m\n\e[31m59\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnrr_r5v7.scala:15:46 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mnote\e[0m = music_string.charAt(\e\
    [31m0\e[0m).toLowerCase\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       value toLowerCase is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnrr_r5v7.scala:17:50 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mbeat\e[0m = music_string.charAt(\e\
    [31m0\e[0m).toLowerCase\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           value toLowerCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnrr_r5v7.scala:19:54\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                    \e[33mval\e\
    [0m \e[36mrest\e[0m = music_string.charAt(\e[31m0\e[0m).toLowerCase\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnrr_r5v7.scala:21:58\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                        \e\
    [33mval\e[0m \e[36mrest\e[0m = music_string.charAt(\e[31m0\e[0m).toLowerCase\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnrr_r5v7.scala:23:62\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e["
  stdout: ''
  timestamp: 1659800000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \")\n        val music_list_length\
    \ = music_list.length\n        val music_list_without_notes = music_list.filterNot(music_list.contains(\"\
    o\"))\n        val music_list_without_notes_length = music_list_without_notes.length\n\
    \        val music_list_without_notes_without_dots = music_list_without_notes.filterNot(music_list_without_notes.contains(\"\
    .\"))\n        val music_list_without_notes_without_dots_length = music_list_without_notes_without_dots.length\n\
    \        val music_list_without_notes_without_dots_without_os = music_list_without_notes_without_dots.filterNot(music_list_without_notes_without_dots.contains(\"\
    o\"))\n        val music_list_without_notes_without_dots_without_os_length = music_list_without_notes_without_dots_without_os.length\n\
    \        val music_list_without_notes_without_dots_without_os_without_dots = music_list_without_notes_without_dots_without_os.filterNot(music_list_without_notes_without_dots_without_os.contains(\"\
    .\"))\n        val music_list_without_notes_without_dots_without_os_without_dots_length\
    \ = music_list_without_notes_without_dots_without_os_without_dots.length\n   \
    \     val music_list_without_notes_without_dots_without_os_without_dots_without_os\
    \ = music_list_without_notes_without_dots_without_os_without_dots.filterNot(music_list_without_notes_without_dots_without_os_without_dots.contains(\"\
    o\"))\n        val music_list_without_notes_without_dots_without_os_without_dots_without_os_length\
    \ = music_list_without_notes_without_dots_without_os_without_dots_without_os.length\n\
    \        val music_list_without_notes_without_dots_without_os_without_dots_without_os_without_dots\
    \ = music_list_without_notes_without_dots_without_os_without_dots_without_os.filterNot(music_list_without_notes_without_dots_without_os_without_dots_without_os.contains(\"\
    .\"))\n        val music_list_without_notes_without_dots_without_os_without_dots_without_os_without_dots_length\
    \ = music_list_without_notes_without_dots_without_os_without_dots_without_os_without_dots.length\n\
    \        val music_list_without_notes_without_dots_without_os_without_dots_without_os_without_dots_without_os\
    \ = music_list_without_notes_without_dots_without_os_without_dots_without_os_without_dots_without_os.filterNot(music_list_without_notes_without_dots_without_os_without_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjkcy_wdb.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpjkcy_wdb.scala:16:79 --------------------\e[0m\e[0m\n\e[31m16 |\e[0m\
    \        \e[33mval\e[0m \e[36mmusic_list_without_notes\e[0m = music_list.filterNot(music_list.contains(\e\
    [31m\"o\"\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                     Found:    Boolean\n\e[31m   |\e[0m     \
    \                                        Required: \e[1m\e[32mString\e[0m\e[1m\e\
    [32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e[0mBoolean\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjkcy_wdb.scala:18:120 -------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_without_notes_without_dots\e\
    [0m = music_list_without_notes.filterNot(music_list_without_notes.contains(\e\
    [31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                             Found:    Boolean\n\
    \e[31m   |\e[0m                                             Required: \e[1m\e\
    [32mString\e[0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m\
    \ \e[0mBoolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjkcy_wdb.scala:20:157\
    \ -------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_without_notes_without_dots_without_os\e\
    [0m = music_list_without_notes_without_dots.filterNot(music_list_without_notes_without_dots.contains(\e\
    [31m\"o\"\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659800030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_length\
    \ = notes.length\n        val notes_array = notes.map(_.toInt).toArray\n     \
    \   val notes_length = notes_array.length\n        val notes_array = notes_array.zipWithIndex.map\
    \ { case (note, index) => (note, index) }.toArray\n        val notes_length =\
    \ notes_array.length\n        val notes_array = notes_array.zipWithIndex.map {\
    \ case (note, index) => (note, index) }.toArray\n        val notes_length = notes_array.length\n\
    \        val notes_array = notes_array.zipWithIndex.map { case (note, index) =>\
    \ (note, index) }.toArray\n        val notes_length = notes_array.length\n   \
    \     val notes_array = notes_array.zipWithIndex.map { case (note, index) => (note,\
    \ index) }.toArray\n        val notes_length = notes_array.length\n        val\
    \ notes_array = notes_array.zipWithIndex.map { case (note, index) => (note, index)\
    \ }.toArray\n        val notes_length = notes_array.length\n        val notes_array\
    \ = notes_array.zipWithIndex.map { case (note, index) => (note, index) }.toArray\n\
    \        val notes_length = notes_array.length\n        val notes_array = notes_array.zipWithIndex.map\
    \ { case (note, index) => (note, index) }.toArray\n        val notes_length =\
    \ notes_array.length\n        val notes_array = notes_array.zipWithIndex.map {\
    \ case (note, index) => (note, index) }.toArray\n        val notes_length = notes_array.length\n\
    \        val notes_array = notes_array.zipWithIndex.map { case (note, index) =>\
    \ (note, index) }.toArray\n        val notes_length = notes_array.length\n   \
    \     val notes_array = notes_array.zipWithIndex.map { case (note, index) => (note,\
    \ index) }.toArray\n        val notes_length = notes_array.length\n        val\
    \ notes_array = notes_array.zipWithIndex.map { case (note, index) => (note, index)\
    \ }.toArray\n        val notes_length = notes_array.length\n        val notes_array\
    \ = notes_array.zipWithIndex.map { case (note, index) => (note, index) }.toArray\n\
    \        val notes_length = notes_array.length\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2ka5sg2y.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnotes_length\e[0m = notes_array.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnotes_length is already defined as \e[33mvalue\e[0m \e[35mnotes_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ka5sg2y.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.zipWithIndex.map\
    \ { \e[33mcase\e[0m (note, index) => (note, index) }.toArray\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ka5sg2y.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_length\e[0m = notes_array.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnotes_length is already defined as \e[33mvalue\e[0m \e[35mnotes_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ka5sg2y.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.zipWithIndex.map\
    \ { \e[33mcase\e[0m (note, index) => (note, index) }.toArray\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161"
  stdout: ''
  timestamp: 1659800031
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_count\
    \ = notes.length\n        val notes_array = notes.map(_.toInt).toArray\n     \
    \   val notes_array = notes_array.map(n => n % 12).toArray\n        val notes_array\
    \ = notes_array.map(n => n % 12).toArray\n        val notes_array = notes_array.map(n\
    \ => n % 12).toArray\n        val notes_array = notes_array.map(n => n % 12).toArray\n\
    \        val notes_array = notes_array.map(n => n % 12).toArray\n        val notes_array\
    \ = notes_array.map(n => n % 12).toArray\n        val notes_array = notes_array.map(n\
    \ => n % 12).toArray\n        val notes_array = notes_array.map(n => n % 12).toArray\n\
    \        val notes_array = notes_array.map(n => n % 12).toArray\n        val notes_array\
    \ = notes_array.map(n => n % 12).toArray\n        val notes_array = notes_array.map(n\
    \ => n % 12).toArray\n        val notes_array = notes_array.map(n => n % 12).toArray\n\
    \        val notes_array = notes_array.map(n => n % 12).toArray\n        val notes_array\
    \ = notes_array.map(n => n % 12).toArray\n        val notes_array = notes_array.map(n\
    \ => n % 12).toArray\n        val notes_array = notes_array.map(n => n % 12).toArray\n\
    \        val notes_array = notes_array.map(n => n % 12).toArray\n        val notes_array\
    \ = notes_array.map(n => n % 12).toArray\n        val notes_array = notes_array.map(n\
    \ => n % 12).toArray\n        val notes_array = notes_array.map(n => n % 12).toArray\n\
    \        val notes_array = notes_array.map(n => n % 12).toArray\n        val notes_array\
    \ = notes_array.map(n => n % 12).toArray\n        val notes_array = notes_array.map(n\
    \ => n % 12).toArray\n        val notes_array = notes_array.map(n => n % 12).toArray\n\
    \        val notes_array = notes_array.map(n => n % 12).toArray\n        val notes_array\
    \ = notes_array.map(n => n % 12).toArray\n        val notes_array = notes_array.map(n\
    \ => n % 12).toArray\n        val notes_array = notes_array.map(n => n % 12).toArray\n\
    \        val notes_array = notes_array.map(n => n % 12).toArray\n        val notes_array\
    \ = notes_array.map(n => n % 12).to\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphaim9bex.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mn\e[0m => n % \e[31m12\e[0m).toArray\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphaim9bex.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mn\e[0m => n % \e[31m12\e[0m).toArray\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphaim9bex.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mn\e[0m => n % \e[31m12\e[0m).toArray\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphaim9bex.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mn\e[0m => n % \e[31m12\e[0m).toArray\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphaim9bex.scala:21:"
  stdout: ''
  timestamp: 1659800032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \").map(_.toUpperCase()).filter(_.nonEmpty)\n\
    \        val beats = music_list.map(music_string => {\n            val note =\
    \ music_string.substring(0, 1)\n            val rest = music_string.substring(1)\n\
    \            val beat = rest match {\n                case \".\" => 0\n      \
    \          case \".|\" => 1\n                case \"o|\" => 2\n              \
    \  case \"o\" => 4\n                case _ => 0\n            }\n            note\
    \ match {\n                case \"o\" => beat\n                case \"O\" => beat\n\
    \                case _ => beat\n            }\n        }).sum\n        beats\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6ririqyr.scala:31:8\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m        beats\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (beats : Int)\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split('|')\n        val notes_length = notes.length\n\
    \        val notes_array = notes.map(_.toInt).toArray\n        val notes_length\
    \ = notes_array.length\n        val notes_array = notes_array.map(x => if (x ==\
    \ 0) 1 else x)\n        val notes_length = notes_array.length\n        val notes_array\
    \ = notes_array.map(x => if (x == 0) 1 else x)\n        val notes_length = notes_array.length\n\
    \        val notes_array = notes_array.map(x => if (x == 0) 1 else x)\n      \
    \  val notes_length = notes_array.length\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 1 else x)\n        val notes_length = notes_array.length\n  \
    \      val notes_array = notes_array.map(x => if (x == 0) 1 else x)\n        val\
    \ notes_length = notes_array.length\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 1 else x)\n        val notes_length = notes_array.length\n  \
    \      val notes_array = notes_array.map(x => if (x == 0) 1 else x)\n        val\
    \ notes_length = notes_array.length\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 1 else x)\n        val notes_length = notes_array.length\n  \
    \      val notes_array = notes_array.map(x => if (x == 0) 1 else x)\n        val\
    \ notes_length = notes_array.length\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 1 else x)\n        val notes_length = notes_array.length\n  \
    \      val notes_array = notes_array.map(x => if (x == 0) 1 else x)\n        val\
    \ notes_length = notes_array.length\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 1 else x)\n        val notes_length = notes_array.length\n  \
    \      val notes_array = notes_array.map(x => if (x == 0) 1 else x)\n        val\
    \ notes_length = notes_array.length\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 1 else x)\n        val notes_length = notes_array.length\n  \
    \      val notes_array = notes_array.map(x => if (x == 0) 1 else x)\n        val\
    \ notes_length = notes_array.length\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 1 else x)\n        val notes_length = notes_array.length\n  \
    \      val notes_array = notes_array.map(x => if (x == 0) 1 else x)\n        val\
    \ notes_length = notes_array.length\n        val notes_array = notes_array.map(x\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\"\
    )).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphbk6tawo.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphbk6tawo.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotes_length\e[0m = notes_array.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_length is already defined as \e[33mvalue\e[0m \e[35mnotes_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphbk6tawo.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x == \e[31m0\e[0m) \e[31m1\e[0m \e[33melse\e[0m x)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphbk6tawo.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_length\e[0m = notes_array.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnotes_length is already defined as \e[33mvalue\e[0m \e[35mnotes_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphbk6tawo.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x == \e[31m0\e[0m) \e[31m1\e[0m \e[33melse\e[0m x)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |"
  stdout: ''
  timestamp: 1659800032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_length\
    \ = notes.length\n        val notes_beats = notes.map(x => x.split(\"o\"))\n \
    \       val notes_beats_length = notes_beats.length\n        val notes_beats_length\
    \ = notes_beats_length / 4\n        val notes_beats_length = notes_beats_length.toInt\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toInt\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toInt\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toInt\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toInt\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfm9pzka1.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length / \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfm9pzka1.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfm9pzka1.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfm9pzka1.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfm9pzka1.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e"
  stdout: ''
  timestamp: 1659800030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(' ').map(music_string => {\n            val note\
    \ = music_string.charAt(0)\n            val beats = music_string.substring(1).split('|').map(music_string\
    \ => {\n                val beat = music_string.charAt(0)\n                val\
    \ rest = music_string.substring(1).split('o').map(music_string => {\n        \
    \            val rest = music_string.charAt(0)\n                    val rest =\
    \ music_string.substring(1).split('|').map(music_string => {\n               \
    \         val rest = music_string.charAt(0)\n                        val rest\
    \ = music_string.substring(1).split('o').map(music_string => {\n             \
    \               val rest = music_string.charAt(0)\n                          \
    \  val rest = music_string.substring(1).split('|').map(music_string => {\n   \
    \                             val rest = music_string.charAt(0)\n            \
    \                    val rest = music_string.substring(1).split('o').map(music_string\
    \ => {\n                                    val rest = music_string.charAt(0)\n\
    \                                    val rest = music_string.substring(1).split('|').map(music_string\
    \ => {\n                                        val rest = music_string.charAt(0)\n\
    \                                        val rest = music_string.substring(1).split('o').map(music_string\
    \ => {\n                                            val rest = music_string.charAt(0)\n\
    \                                            val rest = music_string.substring(1).split('|').map(music_string\
    \ => {\n                                                val rest = music_string.charAt(0)\n\
    \                                                val rest = music_string.substring(1).split('o').map(music_string\
    \ => {\n                                                    val rest = music_string.charAt(0)\n\
    \                                                    val rest = music_string.substring(1).split('|').map(music_string\
    \ => {\n                                                        val rest = music_string.charAt(0)\n\
    \                                                        val rest = music_string.substring(1).split('o').map(music_string\
    \ => {\n                                                            val rest =\
    \ music_string.charAt(0)\n                                                   \
    \         val rest = music_string.substring(1).split('|').map(music_string =>\
    \ {\n                                                                val rest\
    \ = music_string.charAt(0)\n                                                 \
    \               val rest = music_string.substring(1).split('o').map(music_string\
    \ => {\n                                                                    val\
    \ rest = music_string.charAt(0)\n                                            \
    \                        val rest = music_string.substring(1).split('|').map(music_string\
    \ => {\n                                                                     \
    \   val rest = music_string.charAt(0)\n                                      \
    \                                  val rest = music_string.substring(1).split('o').map(music_string\
    \ => {\n                                                                     \
    \       val rest = music_string.charAt(0)\n                                  \
    \                                          val rest = music_string.substring(1).split('|').map(music_string\
    \ => {\n                                                                     \
    \           val rest = music_string.charAt(0)\n                              \
    \                                                  val rest = musi\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe4ir8tw7.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpe4ir8tw7.scala:61:0 ----------------------------\e[0m\e[0m\n\e[31m61\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe4ir8tw7.scala:50:84 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m                                                    \
    \                            \e[33mval\e[0m \e[36mrest\e[0m = musi\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mrest is already defined as\
    \ \e[33mvalue\e[0m \e[35mrest\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(' ').toList\n        val music_list_size\
    \ = music_list.size\n        val music_list_size_half = music_list_size / 2\n\
    \        val music_list_size_quarter = music_list_size / 4\n        val music_list_size_whole\
    \ = music_list_size - music_list_size_half - music_list_size_quarter\n       \
    \ val music_list_size_whole_to_beat = music_list_size_whole / 4\n        val music_list_size_whole_to_beat2\
    \ = music_list_size_whole / 2\n        val music_list_size_whole_to_beat3 = music_list_size_whole\
    \ / 3\n        val music_list_size_whole_to_beat4 = music_list_size_whole / 4\n\
    \        val music_list_size_whole_to_beat5 = music_list_size_whole / 5\n    \
    \    val music_list_size_whole_to_beat6 = music_list_size_whole / 6\n        val\
    \ music_list_size_whole_to_beat7 = music_list_size_whole / 7\n        val music_list_size_whole_to_beat8\
    \ = music_list_size_whole / 8\n        val music_list_size_whole_to_beat9 = music_list_size_whole\
    \ / 9\n        val music_list_size_whole_to_beat10 = music_list_size_whole / 10\n\
    \        val music_list_size_whole_to_beat11 = music_list_size_whole / 11\n  \
    \      val music_list_size_whole_to_beat12 = music_list_size_whole / 12\n    \
    \    val music_list_size_whole_to_beat13 = music_list_size_whole / 13\n      \
    \  val music_list_size_whole_to_beat14 = music_list_size_whole / 14\n        val\
    \ music_list_size_whole_to_beat15 = music_list_size_whole / 15\n        val music_list_size_whole_to_beat16\
    \ = music_list_size_whole / 16\n        val music_list_size_whole_to_beat17 =\
    \ music_list_size_whole / 17\n        val music_list_size_whole_to_beat18 = music_list_size_whole\
    \ / 18\n        val music_list_size_whole_to_beat19 = music_list_size_whole /\
    \ 19\n        val music_list_size_whole_to_beat20 = music_list_size_whole / 20\n\
    \        val music_list_size_whole_to_beat21 = music_list_size_whole / 21\n  \
    \      val music_list_size_whole_to_beat22 = music_list_size_whole / 22\n    \
    \    val music_list_size_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxg1nw7ip.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpxg1nw7ip.scala:42:5 ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_length\
    \ = notes.length\n        val notes_length_in_beats = notes_length / 4\n     \
    \   val notes_length_in_beats_without_last = notes_length_in_beats - 1\n     \
    \   val notes_length_in_beats_without_last_and_rest = notes_length_in_beats -\
    \ 2\n        val notes_length_in_beats_without_last_and_rest_and_rest = notes_length_in_beats\
    \ - 3\n        val notes_length_in_beats_without_last_and_rest_and_rest_and_rest\
    \ = notes_length_in_beats - 4\n        val notes_length_in_beats_without_last_and_rest_and_rest_and_rest_and_rest\
    \ = notes_length_in_beats - 5\n        val notes_length_in_beats_without_last_and_rest_and_rest_and_rest_and_rest_and_rest\
    \ = notes_length_in_beats - 6\n        val notes_length_in_beats_without_last_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest\
    \ = notes_length_in_beats - 7\n        val notes_length_in_beats_without_last_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest\
    \ = notes_length_in_beats - 8\n        val notes_length_in_beats_without_last_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest\
    \ = notes_length_in_beats - 9\n        val notes_length_in_beats_without_last_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest\
    \ = notes_length_in_beats - 10\n        val notes_length_in_beats_without_last_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest\
    \ = notes_length_in_beats - 11\n        val notes_length_in_beats_without_last_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest\
    \ = notes_length_in_beats - 12\n        val notes_length_in_beats_without_last_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest\
    \ = notes_length_in_beats - 13\n        val notes_length_in_beats_without_last_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest\
    \ = notes_length_in_beats - 14\n        val notes_length_in_beats_without_last_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest\
    \ = notes_length_in_beats - 15\n        val notes_length_in_beats_without_last_and_rest_and_rest_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmd8gz_2e.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmd8gz_2e.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotes_length_in_beats_without_last_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest\e\
    [0m = notes_length_in_beats - \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_length_in_beats_without_last_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  notes_length_in_beats_without_last_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpmd8gz_2e.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnotes_length_in_beats_without_last_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest\e\
    [0m = notes_length_in_beats - \e[31m12\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_length_in_beats_without_last_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  notes_length_in_beats_without_last_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest_and_rest\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpmd8gz_2e.scala:29:12 --"
  stdout: ''
  timestamp: 1659800030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \").map(_.toUpperCase)\n \
    \       val music_list = music_list.filter(x => x != \"O\" && x != \"|\" && x\
    \ != \".\")\n        val music_list = music_list.map(x => if (x == \"O\") 4 else\
    \ if (x == \"|\") 2 else 1)\n        val music_list = music_list.map(x => x *\
    \ 4)\n        val music_list = music_list.map(x => x * 4)\n        val music_list\
    \ = music_list.map(x => x * 4)\n        val music_list = music_list.map(x => x\
    \ * 4)\n        val music_list = music_list.map(x => x * 4)\n        val music_list\
    \ = music_list.map(x => x * 4)\n        val music_list = music_list.map(x => x\
    \ * 4)\n        val music_list = music_list.map(x => x * 4)\n        val music_list\
    \ = music_list.map(x => x * 4)\n        val music_list = music_list.map(x => x\
    \ * 4)\n        val music_list = music_list.map(x => x * 4)\n        val music_list\
    \ = music_list.map(x => x * 4)\n        val music_list = music_list.map(x => x\
    \ * 4)\n        val music_list = music_list.map(x => x * 4)\n        val music_list\
    \ = music_list.map(x => x * 4)\n        val music_list = music_list.map(x => x\
    \ * 4)\n        val music_list = music_list.map(x => x * 4)\n        val music_list\
    \ = music_list.map(x => x * 4)\n        val music_list = music_list.map(x => x\
    \ * 4)\n        val music_list = music_list.map(x => x * 4)\n        val music_list\
    \ = music_list.map(x => x * 4)\n        val music_list = music_list.map(x => x\
    \ * 4)\n        val music_list = music_list.map(x => x * 4)\n        val music_list\
    \ = music_list.map(x => x * 4)\n        val music_list = music_list.map(x => x\
    \ * 4)\n        val music_list = music_list.map(x => x * 4)\n        val music_list\
    \ = music_list.map(x => x * 4)\n        val music_list = music_list.map(x => x\
    \ * 4)\n        val music_list = music_list.map(x => x * 4)\n        val music_list\
    \ = music_list.map(x => x * 4)\n        val music_list = music_list.map(x => x\
    \ * 4)\n        val music_list = music_list.map(x => x * \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp62pvrjne.scala:48:48 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mmusic_list\e[0m = music_list.map(\e\
    [36mx\e[0m => x * \n\e[31m\e[31m   |\e[0m                                    \
    \            ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp62pvrjne.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mmusic_list\e[0m = music_list.filter(\e[36mx\e\
    [0m => x != \e[31m\"O\"\e[0m && x != \e[31m\"|\"\e[0m && x != \e[31m\".\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list is already defined as \e[33mvalue\e[0m \e[35mmusic_list\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp62pvrjne.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mmusic_list\e[0m = music_list.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x == \e[31m\"O\"\e[0m) \e[31m4\e[0m \e[33melse\e\
    [0m \e[33mif\e[0m (x == \e[31m\"|\"\e[0m) \e[31m2\e[0m \e[33melse\e[0m \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list is already defined as \e[33mvalue\e[0m \e[35mmusic_list\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp62pvrjne.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mmusic_list\e[0m = music_list.map(\e\
    [36mx\e[0m => x * \e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list is already defined as \e[33mvalue\e[0m \e[35mmusic_list\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined i"
  stdout: ''
  timestamp: 1659800033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.charAt(0)\n            val rest = music_string.substring(1).trim\n\
    \            val beats = rest.split(\"|\").map(rest => {\n                val\
    \ beat = rest.charAt(0)\n                val rest = rest.substring(1)\n      \
    \          val beats = rest.split(\"o\").map(rest => {\n                    val\
    \ beat = rest.charAt(0)\n                    val rest = rest.substring(1)\n  \
    \                  val beats = rest.split(\"|\").map(rest => {\n             \
    \           val beat = rest.charAt(0)\n                        val rest = rest.substring(1)\n\
    \                        val beats = rest.split(\"o\").map(rest => {\n       \
    \                     val beat = rest.charAt(0)\n                            val\
    \ rest = rest.substring(1)\n                            val beats = rest.split(\"\
    |\").map(rest => {\n                                val beat = rest.charAt(0)\n\
    \                                val rest = rest.substring(1)\n              \
    \                  val beats = rest.split(\"o\").map(rest => {\n             \
    \                       val beat = rest.charAt(0)\n                          \
    \          val rest = rest.substring(1)\n                                    val\
    \ beats = rest.split(\"|\").map(rest => {\n                                  \
    \      val beat = rest.charAt(0)\n                                        val\
    \ rest = rest.substring(1)\n                                        val beats\
    \ = rest.split(\"o\").map(rest => {\n                                        \
    \    val beat = rest.charAt(0)\n                                            val\
    \ rest = rest.substring(1)\n                                            val beats\
    \ = rest.split(\"|\").map(rest => {\n                                        \
    \        val beat = rest.charAt(0)\n                                         \
    \       val rest = rest.substring(1)\n                                       \
    \         val beats = rest.split(\"o\").map(rest => {\n                      \
    \                              val beat = rest.charAt(0)\n                   \
    \                                 val rest = rest.substring(1)\n             \
    \                                       val beats = rest.split(\"|\").map(rest\
    \ => {\n                                                        val beat = rest.charAt(0)\n\
    \                                                        val rest = rest.substring(1)\n\
    \                                                        val beats = rest.split(\"\
    o\").map(rest => {\n                                                         \
    \   val beat = rest.charAt(0)\n                                              \
    \              val rest = rest.substring(1)\n                                \
    \                            val beats = rest.split(\"|\").map(rest => {\n   \
    \                                                             val beat = rest.charAt(0)\n\
    \                                                                val rest = rest.substring(1)\n\
    \                                                                val beats = rest.split(\"\
    o\").map(rest => {\n                                                         \
    \           val beat = rest.charAt(0)\n                                      \
    \                              val rest = rest.substring(1)\n                \
    \                                                    val beats = rest.split(\"\
    |\").map(rest => {\n                                                         \
    \               val beat = rest.charAt(0)\n                                  \
    \                                      val rest = rest.substring(1)\n        \
    \                                                                val beats = rest.split(\"\
    o\").map(rest => {\n                                                         \
    \                   val beat = rest.charAt(0)\n                              \
    \                                              val rest = rest.substring(1)\n\
    \                                                                            val\
    \ beats = rest.split(\"|\").map(rest => {\n                                  \
    \                                              val beat = rest.charAt(0)\n\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnbgj2xwi.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpnbgj2xwi.scala:78:0 ----------------------------\e[0m\e[0m\n\e[31m78\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \").map(_.toInt).toList\n\
    \        val notes = music_list.takeRight(music_list.length).map(music_list =>\
    \ music_list.takeRight(music_list.length).map(music_list => music_list.takeRight(music_list.length).map(music_list\
    \ => music_list.takeRight(music_list.length).map(music_list => music_list.takeRight(music_list.length).map(music_list\
    \ => music_list.takeRight(music_list.length).map(music_list => music_list.takeRight(music_list.length).map(music_list\
    \ => music_list.takeRight(music_list.length).map(music_list => music_list.takeRight(music_list.length).map(music_list\
    \ => music_list.takeRight(music_list.length).map(music_list => music_list.takeRight(music_list.length).map(music_list\
    \ => music_list.takeRight(music_list.length).map(music_list => music_list.takeRight(music_list.length).map(music_list\
    \ => music_list.takeRight(music_list.length).map(music_list => music_list.takeRight(music_list.length).map(music_list\
    \ => music_list.takeRight(music_list.length).map(music_list => music_list.takeRight(music_list.length).map(music_list\
    \ => music_list.takeRight(music_list.length).map(music_list => music_list.takeRight(music_list.length).map(music_list\
    \ => music_list.takeRight(music_list.length).map(music_list => music_list.takeRight(music_list.length).map(music_list\
    \ => music_list.takeRight(music_list.length).map(music_list => music_list.takeRight(music_list.length).map(music_list\
    \ => music_list.takeRight(music_list.length).map(music_list => music_list.takeRight(music_list.length).map(music_list\
    \ => music_list.takeRight(music_list.length).map(music_list => music_list.takeRight(music_list.length).map(music_list\
    \ => music_list.takeRight(music_list.length).map(music_list => music_list.takeRight(music_list.length).map(music_list\
    \ => music_list.takeRight(music_list.length).map(music_list => music_list.takeRight(music_list.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt_tvr43x.scala:16:4 ----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt_tvr43x.scala:15:89\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mnotes\e[0m = music_list.takeRight(music_list.length).map(\e[36mmusic_list\e\
    [0m => music_list.takeRight(music_list.length).map(\e[36mmusic_list\e[0m => music_list.takeRight(music_list.length).map(\e\
    [36mmusic_list\e[0m => music_list.takeRight(music_list.length).map(\e[36mmusic_list\e\
    [0m => music_list.takeRight(music_list.length).map(\e[36mmusic_list\e[0m => music_list.takeRight(music_list.length).map(\e\
    [36mmusic_list\e[0m => music_list.takeRight(music_list.length).map(\e[36mmusic_list\e\
    [0m => music_list.takeRight(music_list.length).map(\e[36mmusic_list\e[0m => music_list.takeRight(music_list.length).map(\e\
    [36mmusic_list\e[0m => music_list.takeRight(music_list.length).map(\e[36mmusic_list\e\
    [0m => music_list.takeRight(music_list.length).map(\e[36mmusic_list\e[0m => music_list.takeRight(music_list.length).map(\e\
    [36mmusic_list\e[0m => music_list.takeRight(music_list.length).map(\e[36mmusic_list\e\
    [0m => music_list.takeRight(music_list.length).map(\e[36mmusic_list\e[0m => music_list.takeRight(music_list.length).map(\e\
    [36mmusic_list\e[0m => music_list.takeRight(music_list.length).map(\e[36mmusic_list\e\
    [0m => music_list.takeRight(music_list.length).map(\e[36mmusic_list\e[0m => music_list.takeRight(music_list.length).map(\e\
    [36mmusic_list\e[0m => music_list.takeRight(music_list.length).map(\e[36mmusic_list\e\
    [0m => music_list.takeRight(music_list.length).map(\e[36mmusic_list\e[0m => music_list.takeRight(music_list.length).map(\e\
    [36mmusic_list\e[0m => music_list.takeRight(music_list.length).map(\e[36mmusic_list\e\
    [0m => music_list.takeRight(music_list.length).map(\e[36mmusic_list\e[0m => music_list.takeRight(music_list.length).map(\e\
    [36mmusic_list\e[0m => music_list.takeRight(music_list.length).map(\e[36mmusic_list\e\
    [0m => music_list.takeRight(music_list."
  stdout: ''
  timestamp: 1659800034
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(' ').map(music_string => {\n            val notes\
    \ = music_string.split('|').map(music_string => {\n                val note =\
    \ music_string.split('o').head\n                val beats = music_string.split('o|').map(music_string\
    \ => {\n                    val beat = music_string.split('.').head\n        \
    \            beat.toLong\n                }).sum\n                note.toLong\
    \ * beats\n            }).sum\n            notes\n        }).sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpk_x9_w5r.scala:17:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mbeats\e[0m = music_string.split(\e\
    [31m'o\e[0m|').map(music_string => {\n\e[31m\e[31m   |\e[0m                  \
    \                             ^\e[0m\n\e[31m   |\e[0msymbol literal 'o is no longer\
    \ supported,\n\e[31m   |\e[0muse a string literal \"o\" or an application Symbol(\"\
    o\") instead,\n\e[31m   |\e[0mor enclose in braces '{o} if you want a quoted expression.\n\
    \e[31m   |\e[0mFor now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0mthe idiom, but this possibility might no longer be\
    \ available in the future.\n\e[31m\e[31m-- Error: /tmp/tmpk_x9_w5r.scala:17:50\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \         \e[33mval\e[0m \e[36mbeats\e[0m = music_string.split(\e[31m'o\e[0m|').map(music_string\
    \ => {\n\e[31m\e[31m   |\e[0m                                                \
    \  ^\e[0m\n\e[31m   |\e[0m                                              unclosed\
    \ character literal\n\e[31m\e[31m-- Error: /tmp/tmpk_x9_w5r.scala:22:18 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            }).sum\n\e[31m\e[31m   |\e[0m           \
    \       ^\e[0m\n\e[31m   |\e[0m                  No implicit Ordering defined\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                  where:    B is a type\
    \ variable with constraint >: Unit\n\e[31m   |\e[0m                  .\n\e[31m\e\
    [31m-- Error: /tmp/tmpk_x9_w5r.scala:24:10 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        }).sum\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\
    \e[31m   |\e[0m          No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m          where:    B is a type variable\n4 errors found\n"
  stdout: ''
  timestamp: 1659800033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.charAt(0)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.charAt(0)\n\
    \                val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                    val rest = music_string.charAt(0)\n              \
    \      val rest = music_string.substring(1).split(\"|\").map(music_string => {\n\
    \                        val rest = music_string.charAt(0)\n                 \
    \       val rest = music_string.substring(1).split(\"o\").map(music_string =>\
    \ {\n                            val rest = music_string.charAt(0)\n         \
    \                   val rest = music_string.substring(1).split(\"|\").map(music_string\
    \ => {\n                                val rest = music_string.charAt(0)\n  \
    \                              val rest = music_string.substring(1).split(\"o\"\
    ).map(music_string => {\n                                    val rest = music_string.charAt(0)\n\
    \                                    val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                        val rest =\
    \ music_string.charAt(0)\n                                        val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                            val rest\
    \ = music_string.charAt(0)\n                                            val rest\
    \ = music_string.substring(1).split(\"|\").map(music_string => {\n           \
    \                                     val rest = music_string.charAt(0)\n    \
    \                                            val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \   val rest = music_string.charAt(0)\n                                      \
    \              val rest = music_string.substring(1).split(\"|\").map(music_string\
    \ => {\n                                                        val rest = music_string.charAt(0)\n\
    \                                                        val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \           val rest = music_string.charAt(0)\n                              \
    \                              val rest = music_string.substring(1).split(\"|\"\
    ).map(music_string => {\n                                                    \
    \            val rest = music_string.charAt(0)\n                             \
    \                                   val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                   val rest = music_string.charAt(0)\n                      \
    \                                              val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \                       val rest = music_string.charAt(0)\n                  \
    \                                                      val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                           val rest = music_string.charAt(0)\n              \
    \                                                              val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \                               val rest = music_string.charAt(0)\n          \
    \                                                                      val rest\
    \ = musi\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkv2z_f4_.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpkv2z_f4_.scala:61:0 ----------------------------\e[0m\e[0m\n\e[31m61\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkv2z_f4_.scala:50:84 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m                                                    \
    \                            \e[33mval\e[0m \e[36mrest\e[0m = musi\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mrest is already defined as\
    \ \e[33mvalue\e[0m \e[35mrest\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800017
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_length\
    \ = notes.length\n        val notes_array = notes.map(_.toInt)\n        val notes_length\
    \ = notes_array.length\n        val notes_array = notes_array.zipWithIndex.map\
    \ { case (note, index) => index % notes_length + note }\n        val notes_length\
    \ = notes_array.length\n        val notes_array = notes_array.zipWithIndex.map\
    \ { case (note, index) => index % notes_length + note }\n        val notes_length\
    \ = notes_array.length\n        val notes_array = notes_array.zipWithIndex.map\
    \ { case (note, index) => index % notes_length + note }\n        val notes_length\
    \ = notes_array.length\n        val notes_array = notes_array.zipWithIndex.map\
    \ { case (note, index) => index % notes_length + note }\n        val notes_length\
    \ = notes_array.length\n        val notes_array = notes_array.zipWithIndex.map\
    \ { case (note, index) => index % notes_length + note }\n        val notes_length\
    \ = notes_array.length\n        val notes_array = notes_array.zipWithIndex.map\
    \ { case (note, index) => index % notes_length + note }\n        val notes_length\
    \ = notes_array.length\n        val notes_array = notes_array.zipWithIndex.map\
    \ { case (note, index) => index % notes_length + note }\n        val notes_length\
    \ = notes_array.length\n        val notes_array = notes_array.zipWithIndex.map\
    \ { case (note, index) => index % notes_length + note }\n        val notes_length\
    \ = notes_array.length\n        val notes_array = notes_array.zipWithIndex.map\
    \ { case (note, index) => index % notes_length + note }\n        val notes_length\
    \ = notes_array.length\n        val notes_array = notes_array.zipWithIndex.map\
    \ { case (note, index) => index % notes_length + note }\n        val notes_length\
    \ = notes_array.length\n        val notes_array = notes_array.zipWithIndex.map\
    \ { case (note, index) => index % notes_length + note }\n        val notes_length\
    \ = notes_array.length\n        val notes_array = notes_array.zipWithIndex.map\
    \ { case (note, index) => index % notes_length + note }\n        val notes_length\
    \ = notes_array.length\n        \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf5wfflq6.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnotes_length\e[0m = notes_array.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnotes_length is already defined as \e[33mvalue\e[0m \e[35mnotes_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf5wfflq6.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.zipWithIndex.map\
    \ { \e[33mcase\e[0m (note, index) => index % notes_length + note }\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf5wfflq6.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_length\e[0m = notes_array.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnotes_length is already defined as \e[33mvalue\e[0m \e[35mnotes_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf5wfflq6.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.zipWithIndex.map\
    \ { \e[33mcase\e[0m (note, index) => index % notes_length + note }\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel defini"
  stdout: ''
  timestamp: 1659800034
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(' ').toList\n        val music_list_size\
    \ = music_list.size\n        val music_list_size_2 = music_list_size / 2\n   \
    \     val music_list_size_3 = music_list_size_2 / 2\n        val music_list_size_4\
    \ = music_list_size_3 / 2\n        val music_list_size_5 = music_list_size_4 /\
    \ 2\n        val music_list_size_6 = music_list_size_5 / 2\n        val music_list_size_7\
    \ = music_list_size_6 / 2\n        val music_list_size_8 = music_list_list_size_7\
    \ / 2\n        val music_list_size_9 = music_list_size_8 / 2\n        val music_list_size_10\
    \ = music_list_size_9 / 2\n        val music_list_size_11 = music_list_size_10\
    \ / 2\n        val music_list_size_12 = music_list_size_11 / 2\n        val music_list_size_13\
    \ = music_list_size_12 / 2\n        val music_list_size_14 = music_list_size_13\
    \ / 2\n        val music_list_size_15 = music_list_size_14 / 2\n        val music_list_size_16\
    \ = music_list_size_15 / 2\n        val music_list_size_17 = music_list_size_16\
    \ / 2\n        val music_list_size_18 = music_list_size_17 / 2\n        val music_list_size_19\
    \ = music_list_size_18 / 2\n        val music_list_size_20 = music_list_size_19\
    \ / 2\n        val music_list_size_21 = music_list_size_20 / 2\n        val music_list_size_22\
    \ = music_list_size_21 / 2\n        val music_list_size_23 = music_list_size_22\
    \ / 2\n        val music_list_size_24 = music_list_size_23 / 2\n        val music_list_size_25\
    \ = music_list_size_24 / 2\n        val music_list_size_26 = music_list_size_25\
    \ / 2\n        val music_list_size_27 = music_list_size_26 / 2\n        val music_list_size_28\
    \ = music_list_size_27 / 2\n        val music_list_size_29 = music_list_size_28\
    \ / 2\n        val music_list_size_30 = music_list_size_29 / 2\n        val music_list_size_31\
    \ = music_list_size_30 / 2\n        val music_list_size_32 = music_list_size_31\
    \ / 2\n        val music_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd9ca08ft.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd9ca08ft.scala:22:32\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd9ca08ft.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_length\
    \ = notes.length\n        val notes_beats = notes.map(_.length.toLong)\n     \
    \   val notes_beats_length = notes_beats.sum\n        val notes_beats_length =\
    \ notes_beats_length / 4\n        val notes_beats_length = notes_beats_length.toInt\n\
    \        val notes_beats_length = notes_beats_length * 4\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length.toInt\n        val\
    \ notes_beats_length = notes_beats_length * 4\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length.toInt\n        val\
    \ notes_beats_length = notes_beats_length * 4\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length.toInt\n        val\
    \ notes_beats_length = notes_beats_length * 4\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length.toInt\n        val\
    \ notes_beats_length = notes_beats_length * 4\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length.toInt\n        val\
    \ notes_beats_length = notes_beats_length * 4\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length.toInt\n        val\
    \ notes_beats_length = notes_beats_length * 4\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length.toInt\n        val\
    \ notes_beats_length = notes_beats_length * 4\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2s_1l3q2.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length / \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2s_1l3q2.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2s_1l3q2.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2s_1l3q2.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2s_1l3q2.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659800022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \")\n        val music_list_size\
    \ = music_list.size\n        val music_list_size_2 = music_list_size / 2\n   \
    \     val music_list_size_3 = music_list_size_2 / 2\n        val music_list_size_4\
    \ = music_list_size_3 / 2\n        val music_list_size_5 = music_list_size_4 /\
    \ 2\n        val music_list_size_6 = music_list_size_5 / 2\n        val music_list_size_7\
    \ = music_list_size_6 / 2\n        val music_list_size_8 = music_list_list_size_7\
    \ / 2\n        val music_list_size_9 = music_list_size_8 / 2\n        val music_list_size_10\
    \ = music_list_size_9 / 2\n        val music_list_size_11 = music_list_size_10\
    \ / 2\n        val music_list_size_12 = music_list_size_11 / 2\n        val music_list_size_13\
    \ = music_list_size_12 / 2\n        val music_list_size_14 = music_list_size_13\
    \ / 2\n        val music_list_size_15 = music_list_size_14 / 2\n        val music_list_size_16\
    \ = music_list_size_15 / 2\n        val music_list_size_17 = music_list_size_16\
    \ / 2\n        val music_list_size_18 = music_list_size_17 / 2\n        val music_list_size_19\
    \ = music_list_size_18 / 2\n        val music_list_size_20 = music_list_size_19\
    \ / 2\n        val music_list_size_21 = music_list_size_20 / 2\n        val music_list_size_22\
    \ = music_list_size_21 / 2\n        val music_list_size_23 = music_list_size_22\
    \ / 2\n        val music_list_size_24 = music_list_size_23 / 2\n        val music_list_size_25\
    \ = music_list_size_24 / 2\n        val music_list_size_26 = music_list_size_25\
    \ / 2\n        val music_list_size_27 = music_list_size_26 / 2\n        val music_list_size_28\
    \ = music_list_size_27 / 2\n        val music_list_size_29 = music_list_size_28\
    \ / 2\n        val music_list_size_30 = music_list_size_29 / 2\n        val music_list_size_31\
    \ = music_list_size_30 / 2\n        val music_list_size_32 = music_list_size_31\
    \ / 2\n        val music_list_size_33 = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpg5ceu5i2.scala:47:32 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_33\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e\
    [0m                                expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg5ceu5i2.scala:22:32\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg5ceu5i2.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799997
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.charAt(0)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.charAt(0)\n\
    \                val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                    val rest = music_string.charAt(0)\n              \
    \      val rest = music_string.substring(1).split(\"|\").map(music_string => {\n\
    \                        val rest = music_string.charAt(0)\n                 \
    \       val rest = music_string.substring(1).split(\"o\").map(music_string =>\
    \ {\n                            val rest = music_string.charAt(0)\n         \
    \                   val rest = music_string.substring(1).split(\"|\").map(music_string\
    \ => {\n                                val rest = music_string.charAt(0)\n  \
    \                              val rest = music_string.substring(1).split(\"o\"\
    ).map(music_string => {\n                                    val rest = music_string.charAt(0)\n\
    \                                    val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                        val rest =\
    \ music_string.charAt(0)\n                                        val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                            val rest\
    \ = music_string.charAt(0)\n                                            val rest\
    \ = music_string.substring(1).split(\"|\").map(music_string => {\n           \
    \                                     val rest = music_string.charAt(0)\n    \
    \                                            val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \   val rest = music_string.charAt(0)\n                                      \
    \              val rest = music_string.substring(1).split(\"|\").map(music_string\
    \ => {\n                                                        val rest = music_string.charAt(0)\n\
    \                                                        val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \           val rest = music_string.charAt(0)\n                              \
    \                              val rest = music_string.substring(1).split(\"|\"\
    ).map(music_string => {\n                                                    \
    \            val rest = music_string.charAt(0)\n                             \
    \                                   val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                   val rest = music_string.charAt(0)\n                      \
    \                                              val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \                       val rest = music_string.charAt(0)\n                  \
    \                                                      val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                           val rest = music_string.charAt(0)\n              \
    \                                                              val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \                               val rest = music_string.charAt(0)\n          \
    \                                                                      val rest\
    \ = musi\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkv2z_f4_.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpkv2z_f4_.scala:61:0 ----------------------------\e[0m\e[0m\n\e[31m61\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkv2z_f4_.scala:50:84 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m                                                    \
    \                            \e[33mval\e[0m \e[36mrest\e[0m = musi\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mrest is already defined as\
    \ \e[33mvalue\e[0m \e[35mrest\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800017
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(' ').map(music_string => {\n            val note\
    \ = music_string.charAt(0)\n            val beats = music_string.substring(1).split('|').map(music_string\
    \ => {\n                val beat = music_string.charAt(0)\n                val\
    \ rest = music_string.substring(1).split('o').map(music_string => {\n        \
    \            val rest = music_string.charAt(0)\n                    val rest =\
    \ music_string.substring(1).split('|').map(music_string => {\n               \
    \         val rest = music_string.charAt(0)\n                        val rest\
    \ = music_string.substring(1).split('o').map(music_string => {\n             \
    \               val rest = music_string.charAt(0)\n                          \
    \  val rest = music_string.substring(1).split('|').map(music_string => {\n   \
    \                             val rest = music_string.charAt(0)\n            \
    \                    val rest = music_string.substring(1).split('o').map(music_string\
    \ => {\n                                    val rest = music_string.charAt(0)\n\
    \                                    val rest = music_string.substring(1).split('|').map(music_string\
    \ => {\n                                        val rest = music_string.charAt(0)\n\
    \                                        val rest = music_string.substring(1).split('o').map(music_string\
    \ => {\n                                            val rest = music_string.charAt(0)\n\
    \                                            val rest = music_string.substring(1).split('|').map(music_string\
    \ => {\n                                                val rest = music_string.charAt(0)\n\
    \                                                val rest = music_string.substring(1).split('o').map(music_string\
    \ => {\n                                                    val rest = music_string.charAt(0)\n\
    \                                                    val rest = music_string.substring(1).split('|').map(music_string\
    \ => {\n                                                        val rest = music_string.charAt(0)\n\
    \                                                        val rest = music_string.substring(1).split('o').map(music_string\
    \ => {\n                                                            val rest =\
    \ music_string.charAt(0)\n                                                   \
    \         val rest = music_string.substring(1).split('|').map(music_string =>\
    \ {\n                                                                val rest\
    \ = music_string.charAt(0)\n                                                 \
    \               val rest = music_string.substring(1).split('o').map(music_string\
    \ => {\n                                                                    val\
    \ rest = music_string.charAt(0)\n                                            \
    \                        val rest = music_string.substring(1).split('|').map(music_string\
    \ => {\n                                                                     \
    \   val rest = music_string.charAt(0)\n                                      \
    \                                  val rest = music_string.substring(1).split('o').map(music_string\
    \ => {\n                                                                     \
    \       val rest = music_string.charAt(0)\n                                  \
    \                                          val rest = music_string.substring(1).split('|').map(music_string\
    \ => {\n                                                                     \
    \           val rest = music_string.charAt(0)\n                              \
    \                                                  val rest = musi\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe4ir8tw7.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpe4ir8tw7.scala:61:0 ----------------------------\e[0m\e[0m\n\e[31m61\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe4ir8tw7.scala:50:84 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m                                                    \
    \                            \e[33mval\e[0m \e[36mrest\e[0m = musi\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mrest is already defined as\
    \ \e[33mvalue\e[0m \e[35mrest\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split('|')\n        val music_list_size\
    \ = music_list.length\n        val music_list_size_half = music_list_size / 2\n\
    \        val music_list_size_quarter = music_list_size / 4\n        val music_list_size_whole\
    \ = music_list_size - music_list_size_half - music_list_size_quarter\n       \
    \ val music_list_size_whole_plus_1 = music_list_size_whole + 1\n        val music_list_size_whole_plus_2\
    \ = music_list_size_whole + 2\n        val music_list_size_whole_plus_3 = music_list_size_whole\
    \ + 3\n        val music_list_size_whole_plus_4 = music_list_size_whole + 4\n\
    \        val music_list_size_whole_plus_5 = music_list_size_whole + 5\n      \
    \  val music_list_size_whole_plus_6 = music_list_size_whole + 6\n        val music_list_size_whole_plus_7\
    \ = music_list_size_whole + 7\n        val music_list_size_whole_plus_8 = music_list_size_whole\
    \ + 8\n        val music_list_size_whole_plus_9 = music_list_size_whole + 9\n\
    \        val music_list_size_whole_plus_10 = music_list_size_whole + 10\n    \
    \    val music_list_size_whole_plus_11 = music_list_size_whole + 11\n        val\
    \ music_list_size_whole_plus_12 = music_list_size_whole + 12\n        val music_list_size_whole_plus_13\
    \ = music_list_size_whole + 13\n        val music_list_size_whole_plus_14 = music_list_size_whole\
    \ + 14\n        val music_list_size_whole_plus_15 = music_list_size_whole + 15\n\
    \        val music_list_size_whole_plus_16 = music_list_size_whole + 16\n    \
    \    val music_list_size_whole_plus_17 = music_list_size_whole + 17\n        val\
    \ music_list_size_whole_plus_18 = music_list_size_whole + 18\n        val music_list_size_whole_plus_19\
    \ = music_list_size_whole + 19\n        val music_list_size_whole_plus_20 = music_list_size_whole\
    \ + 20\n        val music_list_size_whole_plus_21 = music_list_size_whole + 21\n\
    \        val music_list_size_whole_plus_22 = music_list_size_whole + 22\n    \
    \    val music_list_size_whole_plus_23 = music_list_size_whole + 23\n        val\
    \ music_list_size_whole_plus_24 = musi\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxlfd0my_.scala:42:44 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_whole_plus_24\e\
    [0m = musi\n\e[31m\e[31m   |\e[0m                                            ^^^^\e\
    [0m\n\e[31m   |\e[0m                                            Not found: musi\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxlfd0my_.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split('|')\n        val notes_count = notes.length\n\
    \        val notes_beats = notes.map(_.length.toLong).sum\n        val notes_beats_count\
    \ = notes_beats / notes_count\n        val notes_beats_count_floor = math.floor(notes_beats_count)\n\
    \        val notes_beats_count_ceil = math.ceil(notes_beats_count)\n        val\
    \ notes_beats_count_diff = notes_beats_count_ceil - notes_beats_count_floor\n\
    \        val notes_beats_count_diff_floor = math.floor(notes_beats_count_diff)\n\
    \        val notes_beats_count_diff_ceil = math.ceil(notes_beats_count_diff)\n\
    \        val notes_beats_count_diff_diff = notes_beats_count_diff_ceil - notes_beats_count_diff_floor\n\
    \        val notes_beats_count_diff_diff_floor = math.floor(notes_beats_count_diff_diff)\n\
    \        val notes_beats_count_diff_diff_ceil = math.ceil(notes_beats_count_diff_diff)\n\
    \        val notes_beats_count_diff_diff_diff = notes_beats_count_diff_diff_ceil\
    \ - notes_beats_count_diff_diff_floor\n        val notes_beats_count_diff_diff_diff_floor\
    \ = math.floor(notes_beats_count_diff_diff_diff)\n        val notes_beats_count_diff_diff_diff_ceil\
    \ = math.ceil(notes_beats_count_diff_diff_diff)\n        val notes_beats_count_diff_diff_diff_diff\
    \ = notes_beats_count_diff_diff_diff_ceil - notes_beats_count_diff_diff_diff_floor\n\
    \        val notes_beats_count_diff_diff_diff_diff_floor = math.floor(notes_beats_count_diff_diff_diff_diff)\n\
    \        val notes_beats_count_diff_diff_diff_diff_ceil = math.ceil(notes_beats_count_diff_diff_diff_diff)\n\
    \        val notes_beats_count_diff_diff_diff_diff_diff = notes_beats_count_diff_diff_diff_diff_ceil\
    \ - notes_beats_count_diff_diff_diff_diff_floor\n        val notes_beats_count_diff_diff_diff_diff_diff_floor\
    \ = math.floor(notes_beats_count_diff_diff_diff_diff_diff)\n        val notes_beats_count_diff_diff_diff_diff_diff_ceil\
    \ = math.ceil(notes_beats_count_diff_diff_diff_diff_diff)\n        val notes_beats_count_diff_diff_diff_diff_diff_diff\
    \ = notes_beats_count_diff_diff_diff_diff_diff_diff_ceil - notes_beats_count_diff_diff_diff_diff_diff_diff_floor\n\
    \        val notes_beats_count_diff_diff_diff_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr73xm39w.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr73xm39w.scala:35:62\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e\
    [36mnotes_beats_count_diff_diff_diff_diff_diff_diff\e[0m = notes_beats_count_diff_diff_diff_diff_diff_diff_ceil\
    \ - notes_beats_count_diff_diff_diff_diff_diff_diff_floor\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Not found: notes_beats_count_diff_diff_diff_diff_diff_diff_ceil\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr73xm39w.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.charAt(0)\n            val rest = music_string.substring(1).trim\n\
    \            val beats = rest.split(\"|\").map(music_string => {\n           \
    \     val beat = music_string.charAt(0)\n                val rest = music_string.substring(1).trim\n\
    \                val rest2 = rest.split(\"|\").map(music_string => {\n       \
    \             val beat = music_string.charAt(0)\n                    val rest\
    \ = music_string.substring(1).trim\n                    val rest3 = rest.split(\"\
    |\").map(music_string => {\n                        val beat = music_string.charAt(0)\n\
    \                        val rest = music_string.substring(1).trim\n         \
    \               val rest4 = rest.split(\"|\").map(music_string => {\n        \
    \                    val beat = music_string.charAt(0)\n                     \
    \       val rest = music_string.substring(1).trim\n                          \
    \  val rest5 = rest.split(\"|\").map(music_string => {\n                     \
    \           val beat = music_string.charAt(0)\n                              \
    \  val rest = music_string.substring(1).trim\n                               \
    \ val rest6 = rest.split(\"|\").map(music_string => {\n                      \
    \              val beat = music_string.charAt(0)\n                           \
    \         val rest = music_string.substring(1).trim\n                        \
    \            val rest7 = rest.split(\"|\").map(music_string => {\n           \
    \                             val beat = music_string.charAt(0)\n            \
    \                            val rest = music_string.substring(1).trim\n     \
    \                                   val rest8 = rest.split(\"|\").map(music_string\
    \ => {\n                                            val beat = music_string.charAt(0)\n\
    \                                            val rest = music_string.substring(1).trim\n\
    \                                            val rest9 = rest.split(\"|\").map(music_string\
    \ => {\n                                                val beat = music_string.charAt(0)\n\
    \                                                val rest = music_string.substring(1).trim\n\
    \                                                val rest10 = rest.split(\"|\"\
    ).map(music_string => {\n                                                    val\
    \ beat = music_string.charAt(0)\n                                            \
    \        val rest = music_string.substring(1).trim\n                         \
    \                           val rest11 = rest.split(\"|\").map(music_string =>\
    \ {\n                                                        val beat = music_string.charAt(0)\n\
    \                                                        val rest = music_string.substring(1).trim\n\
    \                                                        val rest12 = rest.split(\"\
    |\").map(music_string => {\n                                                 \
    \           val beat = music_string.charAt(0)\n                              \
    \                              val rest = music_string.substring(1).trim\n   \
    \                                                         val rest13 = rest.split(\"\
    |\").map(music_string => {\n                                                 \
    \               val beat = music_string.charAt(0)\n                          \
    \                                      val rest = music_string.substring(1).trim\n\
    \                                                                val rest14 =\
    \ rest.split(\"|\").map(music_string => {\n                                  \
    \                                  val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpi04719hl.scala:57:71 ---------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m                                                    \
    \                \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m                      \
    \                                                 ^\e[0m\n\e[31m   |\e[0m    \
    \                                                    pattern expected\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi04719hl.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpi04719hl.scala:68:0 ----------------------------\e[0m\e[0m\n\e[31m68\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800031
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_length\
    \ = notes.length\n        val beats_length = notes_length / 4\n        val beats_count\
    \ = beats_length.toLong\n        val notes_count = beats_count / 4\n        val\
    \ notes_beats = notes_count.toLong\n        val notes_beats_length = notes_beats\
    \ * 4\n        val notes_beats_count = notes_beats_length.toLong\n        val\
    \ notes_beats_count_length = notes_beats_count.toLong\n        val notes_beats_count_count_length\
    \ = notes_beats_count_length.toLong\n        val notes_beats_count_count_count_length\
    \ = notes_beats_count_count_length.toLong\n        val notes_beats_count_count_count_count_length\
    \ = notes_beats_count_count_count_length.toLong\n        val notes_beats_count_count_count_count_count_length\
    \ = notes_beats_count_count_count_count_length.toLong\n        val notes_beats_count_count_count_count_count_count_length\
    \ = notes_beats_count_count_count_count_count_length.toLong\n        val notes_beats_count_count_count_count_count_count_count_length\
    \ = notes_beats_count_count_count_count_count_count_length.toLong\n        val\
    \ notes_beats_count_count_count_count_count_count_count_count_length = notes_beats_count_count_count_count_count_count_count_length.toLong\n\
    \        val notes_beats_count_count_count_count_count_count_count_count_count_length\
    \ = notes_beats_count_count_count_count_count_count_count_count_length.toLong\n\
    \        val notes_beats_count_count_count_count_count_count_count_count_count_count_length\
    \ = notes_beats_count_count_count_count_count_count_count_count_count_count_length.toLong\n\
    \        val notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = notes_beats_count_count_count_count_count_count_count_count_count_count_length.toLong\n\
    \        val notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = notes_beats_count_count_count_count_count_count_count_count_count_count_count_length.toLong\n\
    \        val notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_length.toLong\n\
    \        val notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_length.toLong\n\
    \        val notes_beats_count_count_count_count_count_count_\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk3dd6cnp.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk3dd6cnp.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotes_beats_count_count_count_count_count_count_count_count_count_count_count_count_length\e\
    [0m = notes_beats_count_count_count_count_count_count_count_count_count_count_count_length.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_length\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpk3dd6cnp.scala:31:93 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_count_count_count_count_count_count_count_count_count_count_length\e\
    [0m = notes_beats_count_count_count_count_count_count_count_count_count_count_length.toLong\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                     ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  notes_beats_count_count_count_count_count_count_count_count_count_count_length\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpk3dd6cnp.scala:37:5 ---------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   "
  stdout: ''
  timestamp: 1659800032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(' ').map(music_note => {\n            val note\
    \ = music_note.charAt(0)\n            val beats = music_note.substring(1).split('|').map(_.toInt).sum\n\
    \            beats match {\n                case 4 => 1\n                case\
    \ 2 => 2\n                case 1 => 4\n                case _ => 0\n         \
    \   }\n        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp72r2hctg.scala:23:11\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m' '\e[0m).map(\e[36mmusic_note\e[0m => {\n\e[31m15 |\e[0m            \e[33mval\e\
    [0m \e[36mnote\e[0m = music_note.charAt(\e[31m0\e[0m)\n\e[31m16 |\e[0m       \
    \     \e[33mval\e[0m \e[36mbeats\e[0m = music_note.substring(\e[31m1\e[0m).split(\e\
    [31m'|'\e[0m).map(_.toInt).sum\n\e[31m17 |\e[0m            beats \e[33mmatch\e\
    [0m {\n\e[31m18 |\e[0m                \e[33mcase\e[0m \e[31m4\e[0m => \e[31m1\e\
    [0m\n\e[31m19 |\e[0m                \e[33mcase\e[0m \e[31m2\e[0m => \e[31m2\e\
    [0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m \e[31m1\e[0m => \e[31m4\e\
    [0m\n\e[31m21 |\e[0m                \e[33mcase\e[0m _ => \e[31m0\e[0m\n\e[31m22\
    \ |\e[0m            }\n\e[31m23 |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e\
    [31m   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800034
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_notes = music_string.split(\" \").map(_.toChar).toList\n\
    \        val music_notes_count = music_notes.size\n        val music_notes_beats\
    \ = music_notes.map(music_note => music_note.count(_ == 'o'))\n        val music_notes_beats_count\
    \ = music_notes_beats.sum\n        val music_notes_beats_count_rounded = music_notes_beats_count.toDouble\
    \ / 4\n        val music_notes_beats_count_rounded_rounded = math.round(music_notes_beats_count_rounded)\n\
    \        val music_notes_beats_count_rounded_rounded_rounded = math.round(music_notes_beats_count_rounded_rounded)\n\
    \        val music_notes_beats_count_rounded_rounded_rounded_rounded = math.round(music_notes_beats_count_rounded_rounded_rounded)\n\
    \        val music_notes_beats_count_rounded_rounded_rounded_rounded_rounded =\
    \ math.round(music_notes_beats_count_rounded_rounded_rounded_rounded)\n      \
    \  val music_notes_beats_count_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = math.round(music_notes_beats_count_rounded_rounded_rounded_rounded_rounded)\n\
    \        val music_notes_beats_count_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = math.round(music_notes_beats_count_rounded_rounded_rounded_rounded_rounded_rounded_rounded)\n\
    \        val music_notes_beats_count_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = math.round(music_notes_beats_count_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded)\n\
    \        val music_notes_beats_count_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = math.round(music_notes_beats_count_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded)\n\
    \        val music_notes_beats_count_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = math.round(music_notes_beats_count_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded)\n\
    \        val music_notes_beats_count_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjy2oyehf.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjy2oyehf.scala:14:56\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_notes\e[0m = music_string.split(\e[31m\" \"\e[0m).map(_.toChar).toList\n\
    \e[31m\e[31m   |\e[0m                                                      ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value toChar is not a member\
    \ of String\n\e[31m\e[31m-- Error: /tmp/tmpjy2oyehf.scala:14:63 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes\e[0m = music_string.split(\e\
    [31m\" \"\e[0m).map(_.toChar).toList\n\e[31m\e[31m   |\e[0m                  \
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                                  No ClassTag available for B\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m                                          where:    B is a type\
    \ variable\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjy2oyehf.scala:24:105\
    \ --------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_notes_beats_count_rounded_rounded_rounded_rounded_rounded_rounded_rounded\e\
    [0m = math.round(music_notes_beats_count_rounded_rounded_rounded_rounded_rounded_rounded_rounded)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                 ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  music_notes_beats_count_rounded_rounded_rounded_rounded_rounded_rounded_rounded\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpjy2oyehf.scala:25:113 --------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_beats_count_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\e\
    [0m = math.round(music_notes_beats_count_rounded_rounded_rounded_roun"
  stdout: ''
  timestamp: 1659800035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \")\n        val music_list_size\
    \ = music_list.size\n        val music_list_str = music_list.mkString(\" \")\n\
    \        val music_list_str = music_list_str.split(\"\\\\|\")\n        val music_list_str\
    \ = music_list_str.map(music_list_str => {\n            val music_list_str_size\
    \ = music_list_str.size\n            val music_list_str_str = music_list_str.mkString(\"\
    \ \")\n            val music_list_str_str = music_list_str_str.split(\"\\\\o\"\
    )\n            val music_list_str_str = music_list_str_str.map(music_list_str_str\
    \ => {\n                val music_list_str_str_size = music_list_str_str.size\n\
    \                val music_list_str_str_str = music_list_str_str.mkString(\" \"\
    )\n                val music_list_str_str_str = music_list_str_str_str.split(\"\
    \\\\.|\\\\.\")\n                val music_list_str_str_str = music_list_str_str_str.map(music_list_str_str_str\
    \ => {\n                    val music_list_str_str_str_size = music_list_str_str_str.size\n\
    \                    val music_list_str_str_str_str = music_list_str_str_str.mkString(\"\
    \ \")\n                    val music_list_str_str_str_str = music_list_str_str_str_str.split(\"\
    \\\\o\")\n                    val music_list_str_str_str_str = music_list_str_str_str_str.map(music_list_str_str_str_str\
    \ => {\n                        val music_list_str_str_str_str_size = music_list_str_str_str_str.size\n\
    \                        val music_list_str_str_str_str_str = music_list_str_str_str_str_str.mkString(\"\
    \ \")\n                        val music_list_str_str_str_str_str = music_list_str_str_str_str_str.split(\"\
    \\\\.|\\\\.\")\n                        val music_list_str_str_str_str_str = music_list_str_str_str_str_str.map(music_list_str_str_str_str_str\
    \ => {\n                            val music_list_str_str_str_str_str_size =\
    \ music_list_str_str_str_str_str.size\n                            val music_list_str_str_str_str_str_str\
    \ = music_list_str_str_str_str_str_str.mkString(\" \")\n                     \
    \       val music_list_str_str_str_str_str_str = music_list_str_str_str_str_str_str.split(\"\
    \\\\o\")\n                            val music_list_str_str_str_str_str_str =\
    \ music_list_str_str_str_str_str_str.map(music_list_str_str_str_str_str_str =>\
    \ {\n                                val music_list_str_str_str_str_str_str_size\
    \ = music_list_str_str_str_str_str_str.size\n                                val\
    \ music_list_str_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8rj_2s4k.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8rj_2s4k.scala:42:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m42 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp8rj_2s4k.scala:51:0 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8rj_2s4k.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_str\e[0m = music_list_str.split(\e[31m\"\\\\|\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmusic_list_str is already defined as \e[33mvalue\e[0m \e[35mmusic_list_str\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8rj_2s4k.scala:21:16 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m            \e[33mval\e[0m \e[36mmusic_list_str_str\e[0m = music_list_str_str.split(\e\
    [31m\"\\\\o\"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_str_str is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_list_str_str\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp8rj_2s4k.scala:19:53 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mmusic_list_str_size\e\
    [0m = music_list_str.size\n\e[31m\e[31m   |\e[0m                             \
    \         ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \            value size is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp8rj_2s4k.sca"
  stdout: ''
  timestamp: 1659800035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split('|').toList\n        val music_beats\
    \ = music_list.map(music_string => {\n            val music_notes = music_string.split('o').toList\n\
    \            val music_beats = music_notes.map(music_note => {\n             \
    \   val music_note = music_note.trim\n                val music_note_length =\
    \ music_note.length\n                val music_note_length = music_note_length.toInt\n\
    \                val music_note_length = music_note_length / 4\n             \
    \   val music_note_length = music_note_length.toLong\n                music_note_length\n\
    \            })\n            music_beats.sum\n        })\n        music_beats.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq0ss8db1.scala:20:20 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mval\e[0m \e[36mmusic_note_length\e\
    [0m = music_note_length.toInt\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_note_length is already defined as \e[33mvalue\e[0m \e\
    [35mmusic_note_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- Error: /tmp/tmpq0ss8db1.scala:25:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            music_beats.sum\n\e[31m\e[31m   |\e[0m  \
    \                         ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both\
    \ \e[33mobject\e[0m \e[35mDoubleIsFractional\e[0m in \e[33mobject\e[0m \e[35mNumeric\e\
    [0m and \e[33mobject\e[0m \e[35mByteIsIntegral\e[0m in \e[33mobject\e[0m \e[35mNumeric\e\
    [0m match type Numeric[B] of parameter num of \e[33mmethod\e[0m \e[35msum\e[0m\
    \ in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n\e[31m\e[31m-- Error: /tmp/tmpq0ss8db1.scala:27:23\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ music_beats.sum\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m\
    \   |\e[0m            No implicit Ordering defined for B\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m            where:    B is a type variable with constraint <: List[Long]\n\
    \e[31m   |\e[0m            .\n3 errors found\n"
  stdout: ''
  timestamp: 1659800036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.charAt(0)\n            val rest = music_string.substring(1).trim\n\
    \            val beats = rest.split(\"|\").map(music_string => {\n           \
    \     val beat = music_string.charAt(0)\n                val rest = music_string.substring(1).trim\n\
    \                val rest = rest.toInt\n                beat * rest\n        \
    \    }).sum\n            note match {\n                case 'o' => beats\n   \
    \             case 'o|' => beats / 2\n                case '.|' => beats\n   \
    \             case _ => throw new Exception(\"Invalid music string: \" + music_string)\n\
    \            }\n        }).sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpdk91028i.scala:25:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mcase\e[0m \e[31m'o\e[0m|' => beats\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e\
    [0msymbol literal 'o is no longer supported,\n\e[31m   |\e[0muse a string literal\
    \ \"o\" or an application Symbol(\"o\") instead,\n\e[31m   |\e[0mor enclose in\
    \ braces '{o} if you want a quoted expression.\n\e[31m   |\e[0mFor now, you can\
    \ also `import language.deprecated.symbolLiterals` to accept\n\e[31m   |\e[0mthe\
    \ idiom, but this possibility might no longer be available in the future.\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpdk91028i.scala:25:26 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mcase\e[0m \e[31m'o\e[0m|' => beats\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                          ^^\e[0m\n\e[31m\
    \   |\e[0m                          '{' expected, but '=>' found\n\e[31m\e[31m--\
    \ Error: /tmp/tmpdk91028i.scala:26:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mcase\e[0m '.|' => beats\n\e[31m\e\
    [31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                    \
    \ unclosed character literal\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdk91028i.scala:29:8\
    \ ----------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        }).sum\n\e[31m\e\
    [31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        '=>' expected, but '}' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdk91028i.scala:29:9 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        }).sum\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\
    \e[31m   |\e[0m         '}' expected, but ')' found\n\e[31m\e[31m-- Error: /tmp/tmpdk91028i.scala:31:4\
    \ ------------------------------------------\e[0m\e[0m\n\e[31m31 |\e[0m    \e\
    [33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e\
    [0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    end of statement\
    \ expected but 'def' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdk91028i.scala:20:20\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                \e[33mval\e\
    [0m \e[36mrest\e[0m = rest.toInt\n\e[31m\e[31m   "
  stdout: ''
  timestamp: 1659800043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.substring(0,\
    \ 1)\n                val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                    val rest = music_string.substring(0, 1)\n        \
    \            val rest = music_string.substring(1).split(\"|\").map(music_string\
    \ => {\n                        val rest = music_string.substring(0, 1)\n    \
    \                    val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                            val rest = music_string.substring(0, 1)\n\
    \                            val rest = music_string.substring(1).split(\"|\"\
    ).map(music_string => {\n                                val rest = music_string.substring(0,\
    \ 1)\n                                val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                    val rest = music_string.substring(0,\
    \ 1)\n                                    val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                        val rest =\
    \ music_string.substring(0, 1)\n                                        val rest\
    \ = music_string.substring(1).split(\"o\").map(music_string => {\n           \
    \                                 val rest = music_string.substring(0, 1)\n  \
    \                                          val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                val\
    \ rest = music_string.substring(0, 1)\n                                      \
    \          val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                                                    val rest = music_string.substring(0,\
    \ 1)\n                                                    val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \       val rest = music_string.substring(0, 1)\n                            \
    \                            val rest = music_string.substring(1).split(\"o\"\
    ).map(music_string => {\n                                                    \
    \        val rest = music_string.substring(0, 1)\n                           \
    \                                 val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \               val rest = music_string.substring(0, 1)\n                    \
    \                                            val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                   val rest = music_string.substring(0, 1)\n                \
    \                                                    val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \                       val rest = music_string.substring(0, 1)\n            \
    \                                                            val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                           val rest = music_string.substring(0, 1)\n        \
    \                                                                    val rest\
    \ = music_string.substring(1).split(\"|\").map(music_string => {\n           \
    \                                                                     val rest\
    \ = music_string.substring(0, 1)\n                                           \
    \                                     val rest = musi\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpimfgyh44.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpimfgyh44.scala:61:0 ----------------------------\e[0m\e[0m\n\e[31m61\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpimfgyh44.scala:50:84 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m                                                    \
    \                            \e[33mval\e[0m \e[36mrest\e[0m = musi\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mrest is already defined as\
    \ \e[33mvalue\e[0m \e[35mrest\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.substring(0,\
    \ 1)\n                val rest = music_string.substring(1)\n                val\
    \ beats = rest.split(\"o\").map(music_string => {\n                    val beat\
    \ = music_string.substring(0, 1)\n                    val rest = music_string.substring(1)\n\
    \                    val beats = rest.split(\"|\").map(music_string => {\n   \
    \                     val beat = music_string.substring(0, 1)\n              \
    \          val rest = music_string.substring(1)\n                        val beats\
    \ = rest.split(\"o\").map(music_string => {\n                            val beat\
    \ = music_string.substring(0, 1)\n                            val rest = music_string.substring(1)\n\
    \                            val beats = rest.split(\"|\").map(music_string =>\
    \ {\n                                val beat = music_string.substring(0, 1)\n\
    \                                val rest = music_string.substring(1)\n      \
    \                          val beats = rest.split(\"o\").map(music_string => {\n\
    \                                    val beat = music_string.substring(0, 1)\n\
    \                                    val rest = music_string.substring(1)\n  \
    \                                  val beats = rest.split(\"|\").map(music_string\
    \ => {\n                                        val beat = music_string.substring(0,\
    \ 1)\n                                        val rest = music_string.substring(1)\n\
    \                                        val beats = rest.split(\"o\").map(music_string\
    \ => {\n                                            val beat = music_string.substring(0,\
    \ 1)\n                                            val rest = music_string.substring(1)\n\
    \                                            val beats = rest.split(\"|\").map(music_string\
    \ => {\n                                                val beat = music_string.substring(0,\
    \ 1)\n                                                val rest = music_string.substring(1)\n\
    \                                                val beats = rest.split(\"o\"\
    ).map(music_string => {\n                                                    val\
    \ beat = music_string.substring(0, 1)\n                                      \
    \              val rest = music_string.substring(1)\n                        \
    \                            val beats = rest.split(\"|\").map(music_string =>\
    \ {\n                                                        val beat = music_string.substring(0,\
    \ 1)\n                                                        val rest = music_string.substring(1)\n\
    \                                                        val beats = rest.split(\"\
    o\").map(music_string => {\n                                                 \
    \           val beat = music_string.substring(0, 1)\n                        \
    \                                    val rest = music_string.substring(1)\n  \
    \                                                          val beats = rest.split(\"\
    |\").map(music_string => {\n                                                 \
    \               val beat = music_string.substring(0, 1)\n                    \
    \                                            val rest = music_string.substring(1)\n\
    \                                                                val beats = rest.split(\"\
    o\").map(music_string => {\n                                                 \
    \                   val beat = music_string.substring(0, 1)\n                \
    \                                                    val rest = music_string.substring(1)\n\
    \                                                                    val beats\
    \ = rest.split(\"\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpa9ls87o5.scala:58:91 -----------------------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m                                                    \
    \                \e[33mval\e[0m \e[36mbeats\e[0m = rest.split(\"\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \                    unclosed string literal\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpa9ls87o5.scala:60:4 ----------------------------\e[0m\e[0m\n\e[31m60\
    \ |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e\
    [35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')'\
    \ expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa9ls87o5.scala:69:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n3 errors found\n"
  stdout: ''
  timestamp: 1659799995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.substring(0,\
    \ 1)\n                val rest = music_string.substring(1)\n                beat.toLong\
    \ * rest.length\n            }).sum\n            note.toLong * beats\n       \
    \ }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppvpo2bv1.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m15 |\e[0m\
    \            \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e\
    [0m, \e[31m1\e[0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m\
    \ = music_string.substring(\e[31m1\e[0m).split(\e[31m\"|\"\e[0m).map(\e[36mmusic_string\e\
    [0m => {\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mbeat\e[0m = music_string.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mrest\e\
    [0m = music_string.substring(\e[31m1\e[0m)\n\e[31m19 |\e[0m                beat.toLong\
    \ * rest.length\n\e[31m20 |\e[0m            }).sum\n\e[31m21 |\e[0m          \
    \  note.toLong * beats\n\e[31m22 |\e[0m        }).sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799997
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val beats = rest.split(\"|\").map(_.length).sum\n\
    \            beats * note.toLong\n        }).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.parseMusic$$anonfun$1(tmp4_bz7krk.scala:15)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\
    \tat Problem$.parseMusic(tmp4_bz7krk.scala:19)\n\tat Problem$.main(tmp4_bz7krk.scala:22)\n\
    \tat Problem.main(tmp4_bz7krk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800044
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.charAt(0)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.charAt(0)\n\
    \                val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                    val rest = music_string.charAt(0)\n              \
    \      val rest = music_string.substring(1).split(\"|\").map(music_string => {\n\
    \                        val rest = music_string.charAt(0)\n                 \
    \       val rest = music_string.substring(1).split(\"o\").map(music_string =>\
    \ {\n                            val rest = music_string.charAt(0)\n         \
    \                   val rest = music_string.substring(1).split(\"|\").map(music_string\
    \ => {\n                                val rest = music_string.charAt(0)\n  \
    \                              val rest = music_string.substring(1).split(\"o\"\
    ).map(music_string => {\n                                    val rest = music_string.charAt(0)\n\
    \                                    val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                        val rest =\
    \ music_string.charAt(0)\n                                        val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                            val rest\
    \ = music_string.charAt(0)\n                                            val rest\
    \ = music_string.substring(1).split(\"|\").map(music_string => {\n           \
    \                                     val rest = music_string.charAt(0)\n    \
    \                                            val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \   val rest = music_string.charAt(0)\n                                      \
    \              val rest = music_string.substring(1).split(\"|\").map(music_string\
    \ => {\n                                                        val rest = music_string.charAt(0)\n\
    \                                                        val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \           val rest = music_string.charAt(0)\n                              \
    \                              val rest = music_string.substring(1).split(\"|\"\
    ).map(music_string => {\n                                                    \
    \            val rest = music_string.charAt(0)\n                             \
    \                                   val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                   val rest = music_string.charAt(0)\n                      \
    \                                              val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \                       val rest = music_string.charAt(0)\n                  \
    \                                                      val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                           val rest = music_string.charAt(0)\n              \
    \                                                              val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \                               val rest = music_string.charAt(0)\n          \
    \                                                                      val rest\
    \ = musi\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkv2z_f4_.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpkv2z_f4_.scala:61:0 ----------------------------\e[0m\e[0m\n\e[31m61\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkv2z_f4_.scala:50:84 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m                                                    \
    \                            \e[33mval\e[0m \e[36mrest\e[0m = musi\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mrest is already defined as\
    \ \e[33mvalue\e[0m \e[35mrest\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(' ').map(_.toInt).toList\n  \
    \      val beats = music_list.foldLeft(List[Long]())((acc, note) => {\n      \
    \      if (note == 0) acc else acc :+ acc.last\n        })\n        beats\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp5xnck_sb.scala:14)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.parseMusic(tmp5xnck_sb.scala:14)\n\
    \tat Problem$.main(tmp5xnck_sb.scala:21)\n\tat Problem.main(tmp5xnck_sb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800044
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(' ').map(music_string => {\n            val note\
    \ = music_string.charAt(0)\n            val beats = music_string.substring(1).split('|').map(music_string\
    \ => {\n                val beat = music_string.charAt(0)\n                val\
    \ rest = music_string.substring(1).split('o').map(music_string => {\n        \
    \            val rest = music_string.charAt(0)\n                    val rest =\
    \ music_string.substring(1).split('|').map(music_string => {\n               \
    \         val rest = music_string.charAt(0)\n                        val rest\
    \ = music_string.substring(1).split('o').map(music_string => {\n             \
    \               val rest = music_string.charAt(0)\n                          \
    \  val rest = music_string.substring(1).split('|').map(music_string => {\n   \
    \                             val rest = music_string.charAt(0)\n            \
    \                    val rest = music_string.substring(1).split('o').map(music_string\
    \ => {\n                                    val rest = music_string.charAt(0)\n\
    \                                    val rest = music_string.substring(1).split('|').map(music_string\
    \ => {\n                                        val rest = music_string.charAt(0)\n\
    \                                        val rest = music_string.substring(1).split('o').map(music_string\
    \ => {\n                                            val rest = music_string.charAt(0)\n\
    \                                            val rest = music_string.substring(1).split('|').map(music_string\
    \ => {\n                                                val rest = music_string.charAt(0)\n\
    \                                                val rest = music_string.substring(1).split('o').map(music_string\
    \ => {\n                                                    val rest = music_string.charAt(0)\n\
    \                                                    val rest = music_string.substring(1).split('|').map(music_string\
    \ => {\n                                                        val rest = music_string.charAt(0)\n\
    \                                                        val rest = music_string.substring(1).split('o').map(music_string\
    \ => {\n                                                            val rest =\
    \ music_string.charAt(0)\n                                                   \
    \         val rest = music_string.substring(1).split('|').map(music_string =>\
    \ {\n                                                                val rest\
    \ = music_string.charAt(0)\n                                                 \
    \               val rest = music_string.substring(1).split('o').map(music_string\
    \ => {\n                                                                    val\
    \ rest = music_string.charAt(0)\n                                            \
    \                        val rest = music_string.substring(1).split('|').map(music_string\
    \ => {\n                                                                     \
    \   val rest = music_string.charAt(0)\n                                      \
    \                                  val rest = music_string.substring(1).split('o').map(music_string\
    \ => {\n                                                                     \
    \       val rest = music_string.charAt(0)\n                                  \
    \                                          val rest = music_string.substring(1).split('|').map(music_string\
    \ => {\n                                                                     \
    \           val rest = music_string.charAt(0)\n                              \
    \                                                  val rest = musi\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe4ir8tw7.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpe4ir8tw7.scala:61:0 ----------------------------\e[0m\e[0m\n\e[31m61\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe4ir8tw7.scala:50:84 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m                                                    \
    \                            \e[33mval\e[0m \e[36mrest\e[0m = musi\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mrest is already defined as\
    \ \e[33mvalue\e[0m \e[35mrest\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.substring(0,\
    \ 1)\n                val rest = music_string.substring(1)\n                val\
    \ beats = rest.split(\"o\").map(music_string => {\n                    val beat\
    \ = music_string.substring(0, 1)\n                    val rest = music_string.substring(1)\n\
    \                    val beats = rest.split(\"|\").map(music_string => {\n   \
    \                     val beat = music_string.substring(0, 1)\n              \
    \          val rest = music_string.substring(1)\n                        val beats\
    \ = rest.split(\"|\").map(music_string => {\n                            val beat\
    \ = music_string.substring(0, 1)\n                            val rest = music_string.substring(1)\n\
    \                            val beats = rest.split(\"|\").map(music_string =>\
    \ {\n                                val beat = music_string.substring(0, 1)\n\
    \                                val rest = music_string.substring(1)\n      \
    \                          val beats = rest.split(\"|\").map(music_string => {\n\
    \                                    val beat = music_string.substring(0, 1)\n\
    \                                    val rest = music_string.substring(1)\n  \
    \                                  val beats = rest.split(\"|\").map(music_string\
    \ => {\n                                        val beat = music_string.substring(0,\
    \ 1)\n                                        val rest = music_string.substring(1)\n\
    \                                        val beats = rest.split(\"|\").map(music_string\
    \ => {\n                                            val beat = music_string.substring(0,\
    \ 1)\n                                            val rest = music_string.substring(1)\n\
    \                                            val beats = rest.split(\"|\").map(music_string\
    \ => {\n                                                val beat = music_string.substring(0,\
    \ 1)\n                                                val rest = music_string.substring(1)\n\
    \                                                val beats = rest.split(\"|\"\
    ).map(music_string => {\n                                                    val\
    \ beat = music_string.substring(0, 1)\n                                      \
    \              val rest = music_string.substring(1)\n                        \
    \                            val beats = rest.split(\"|\").map(music_string =>\
    \ {\n                                                        val beat = music_string.substring(0,\
    \ 1)\n                                                        val rest = music_string.substring(1)\n\
    \                                                        val beats = rest.split(\"\
    |\").map(music_string => {\n                                                 \
    \           val beat = music_string.substring(0, 1)\n                        \
    \                                    val rest = music_string.substring(1)\n  \
    \                                                          val beats = rest.split(\"\
    |\").map(music_string => {\n                                                 \
    \               val beat = music_string.substring(0, 1)\n                    \
    \                                            val rest = music_string.substring(1)\n\
    \                                                                val beats = rest.split(\"\
    |\").map(music_string => {\n                                                 \
    \                   val beat = music_string.substring(0, 1)\n                \
    \                                                    val rest = music_string.substring(1)\n\
    \                                                                    val beats\
    \ = rest.split(\"\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp51k_7cll.scala:58:91 -----------------------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m                                                    \
    \                \e[33mval\e[0m \e[36mbeats\e[0m = rest.split(\"\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \                    unclosed string literal\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp51k_7cll.scala:60:4 ----------------------------\e[0m\e[0m\n\e[31m60\
    \ |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e\
    [35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')'\
    \ expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp51k_7cll.scala:69:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n3 errors found\n"
  stdout: ''
  timestamp: 1659799994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split('|')\n        val notes_length = notes.length\n\
    \        val notes_array = notes.map(_.toInt)\n        val notes_length = notes_array.length\n\
    \        val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n      \
    \  val notes_length = notes_array.length\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 0 else x)\n        val notes_length = notes_array.length\n  \
    \      val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n        val\
    \ notes_length = notes_array.length\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 0 else x)\n        val notes_length = notes_array.length\n  \
    \      val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n        val\
    \ notes_length = notes_array.length\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 0 else x)\n        val notes_length = notes_array.length\n  \
    \      val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n        val\
    \ notes_length = notes_array.length\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 0 else x)\n        val notes_length = notes_array.length\n  \
    \      val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n        val\
    \ notes_length = notes_array.length\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 0 else x)\n        val notes_length = notes_array.length\n  \
    \      val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n        val\
    \ notes_length = notes_array.length\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 0 else x)\n        val notes_length = notes_array.length\n  \
    \      val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n        val\
    \ notes_length = notes_array.length\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 0 else x)\n        val notes_length = notes_array.length\n  \
    \      val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n        val\
    \ notes_length = notes_array.length\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 0 else x)\n        val notes_length = notes_array.length\n  \
    \      val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n        val\
    \ notes_length = notes_array.length\n        val notes_array = notes_array.map(x\
    \ => \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpomwr3myi.scala:52:46 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mx\e[0m => \n\e[31m\e[31m   |\e[0m                                        \
    \      ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpomwr3myi.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mnotes_length\e[0m = notes_array.length\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnotes_length is already defined as \e[33mvalue\e[0m \e[35mnotes_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpomwr3myi.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x == \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m x)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpomwr3myi.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_length\e[0m = notes_array.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnotes_length is already defined as \e[33mvalue\e[0m \e[35mnotes_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpomwr3myi.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mx"
  stdout: ''
  timestamp: 1659800044
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\"\\\\|\").map(music_string => {\n           \
    \ val notes = music_string.split(\"o\").map(music_string => {\n              \
    \  val note = music_string.split(\"|\").map(music_string => {\n              \
    \      val beats = music_string.split(\".\").map(music_string => {\n         \
    \               music_string.toLong\n                    }).sum\n            \
    \        beats\n                }).sum\n                note\n            }).sum\n\
    \            notes\n        }).sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv4xk_4al.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m  \
    \      ^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m15 |\e[0m\
    \            \e[33mval\e[0m \e[36mnotes\e[0m = music_string.split(\e[31m\"o\"\e\
    [0m).map(\e[36mmusic_string\e[0m => {\n\e[31m16 |\e[0m                \e[33mval\e\
    [0m \e[36mnote\e[0m = music_string.split(\e[31m\"|\"\e[0m).map(\e[36mmusic_string\e\
    [0m => {\n\e[31m17 |\e[0m                    \e[33mval\e[0m \e[36mbeats\e[0m =\
    \ music_string.split(\e[31m\".\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m18\
    \ |\e[0m                        music_string.toLong\n\e[31m19 |\e[0m         \
    \           }).sum\n\e[31m20 |\e[0m                    beats\n\e[31m21 |\e[0m\
    \                }).sum\n\e[31m22 |\e[0m                note\n\e[31m23 |\e[0m\
    \            }).sum\n\e[31m24 |\e[0m            notes\n\e[31m25 |\e[0m       \
    \ }).sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_count\
    \ = notes.length\n        val notes_array = Array(notes.toList)\n        val notes_array\
    \ = notes_array.map(x => x.toInt)\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 0 else x)\n        val notes_array = notes_array.map(x => if\
    \ (x == 0) 0 else x)\n        val notes_array = notes_array.map(x => if (x ==\
    \ 0) 0 else x)\n        val notes_array = notes_array.map(x => if (x == 0) 0 else\
    \ x)\n        val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n \
    \       val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n       \
    \ val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n        val notes_array\
    \ = notes_array.map(x => if (x == 0) 0 else x)\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 0 else x)\n        val notes_array = notes_array.map(x => if\
    \ (x == 0) 0 else x)\n        val notes_array = notes_array.map(x => if (x ==\
    \ 0) 0 else x)\n        val notes_array = notes_array.map(x => if (x == 0) 0 else\
    \ x)\n        val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n \
    \       val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n       \
    \ val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n        val notes_array\
    \ = notes_array.map(x => if (x == 0) 0 else x)\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 0 else x)\n        val notes_array = notes_array.map(x => if\
    \ (x == 0) 0 else x)\n        val notes_array = notes_array.map(x => if (x ==\
    \ 0) 0 else x)\n        val notes_array = notes_array.map(x => if (x == 0) 0 else\
    \ x)\n        val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n \
    \       val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n       \
    \ val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n        val notes_array\
    \ = notes_array.map(x => if (x == 0) 0 else x)\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 0 else x)\n        val notes_array = notes_array.map(x => if\
    \ (x == 0) 0 else x)\n        val notes_array = notes_array.map(x => if (x ==\
    \ 0) 0 else x)\n        val notes_array = note\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9fk4b_yn.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mx\e[0m => x.toInt)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9fk4b_yn.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x == \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m x)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9fk4b_yn.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x == \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m x)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9fk4b_yn.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x == \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m x)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the s"
  stdout: ''
  timestamp: 1659800044
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split('|')\n        val music_list_size\
    \ = music_list.size\n        val music_list_size_half = music_list_size / 2\n\
    \        val music_list_size_quarter = music_list_size / 4\n        val music_list_size_whole\
    \ = music_list_size - music_list_size_half - music_list_size_quarter\n       \
    \ val music_list_size_whole_long = music_list_size_whole * 4\n        val music_list_size_whole_long_long\
    \ = music_list_size_whole_long * 4\n        val music_list_size_whole_long_long_long\
    \ = music_list_size_whole_long_long * 4\n        val music_list_size_whole_long_long_long_long\
    \ = music_list_size_whole_long_long_long * 4\n        val music_list_size_whole_long_long_long_long_long\
    \ = music_list_size_whole_long_long_long_long * 4\n        val music_list_size_whole_long_long_long_long_long_long\
    \ = music_list_size_whole_long_long_long_long_long * 4\n        val music_list_size_whole_long_long_long_long_long_long_long\
    \ = music_list_size_whole_long_long_long_long_long_long * 4\n        val music_list_size_whole_long_long_long_long_long_long_long_long\
    \ = music_list_size_whole_long_long_long_long_long_long_long * 4\n        val\
    \ music_list_size_whole_long_long_long_long_long_long_long_long_long = music_list_size_whole_long_long_long_long_long_long_long_long\
    \ * 4\n        val music_list_size_whole_long_long_long_long_long_long_long_long_long_long\
    \ = music_list_size_whole_long_long_long_long_long_long_long_long_long * 4\n \
    \       val music_list_size_whole_long_long_long_long_long_long_long_long_long_long\
    \ = music_list_size_whole_long_long_long_long_long_long_long_long_long_long *\
    \ 4\n        val music_list_size_whole_long_long_long_long_long_long_long_long_long_long_long\
    \ = music_list_size_whole_long_long_long_long_long_long_long_long_long_long_long\
    \ * 4\n        val music_list_size_whole_long_long_long_long_long_long_long_long_long_long_long_long\
    \ = music_list_size_whole_long_long_long_long_long_long_long_long_long_long_long_long_long\
    \ * 4\n        val music_list_size_whole_long_long_long_long_long_long_long_long_long_long_long_long\
    \ = music_list_size_whole_long_long_long_long_long_long_long_long_long_\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp73gjzzw7.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_whole_long_long_long_long_long_long_long_long_long_long\e\
    [0m = music_list_size_whole_long_long_long_long_long_long_long_long_long_long\
    \ * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_whole_long_long_long_long_long_long_long_long_long_long\
    \ is already defined as \e[33mvalue\e[0m \e[35mmusic_list_size_whole_long_long_long_long_long_long_long_long_long_long\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp73gjzzw7.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_whole_long_long_long_long_long_long_long_long_long_long_long_long\e\
    [0m = music_list_size_whole_long_long_long_long_long_long_long_long_long_\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_whole_long_long_long_long_long_long_long_long_long_long_long_long\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  music_list_size_whole_long_long_long_long_long_long_long_long_long_long_long_long\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp73gjzzw7.scala:30:91 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_whole_long_long_long_long_long_long_long_long_long_long_long\e\
    [0m = music_list_size_whole_long_long_long_long_long_long_long_long_long_long_long\
    \ * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                        "
  stdout: ''
  timestamp: 1659800043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \").map(_.toUpperCase).filter(_.nonEmpty)\n\
    \        val notes = music_list.map(music_note => music_note.split(\"|\").map(_.toUpperCase).filter(_.nonEmpty))\n\
    \        val notes_count = notes.map(music_note => music_note.size)\n        val\
    \ notes_count_sum = notes_count.sum\n        val notes_count_count_sum = notes_count.map(music_note\
    \ => music_note.size)\n        val notes_count_count_count_sum = notes_count.map(music_note\
    \ => music_note.map(music_note => music_note.size).sum)\n        val notes_count_count_count_count_sum\
    \ = notes_count.map(music_note => music_note.map(music_note => music_note.size).map(music_note\
    \ => music_note.map(music_note => music_note.size).sum))\n        val notes_count_count_count_count_count_sum\
    \ = notes_count.map(music_note => music_note.map(music_note => music_note.size).map(music_note\
    \ => music_note.map(music_note => music_note.size).map(music_note => music_note.map(music_note\
    \ => music_note.size).sum)))\n        val notes_count_count_count_count_count_count_sum\
    \ = notes_count.map(music_note => music_note.map(music_note => music_note.size).map(music_note\
    \ => music_note.map(music_note => music_note.size).map(music_note => music_note.map(music_note\
    \ => music_note.size).map(music_note => music_note.map(music_note => music_note.size).sum))))\n\
    \        val notes_count_count_count_count_count_count_count_sum = notes_count.map(music_note\
    \ => music_note.map(music_note => music_note.size).map(music_note => music_note.map(music_note\
    \ => music_note.size).map(music_note => music_note.map(music_note => music_note.size).map(music_note\
    \ => music_note.map(music_note => music_note.size).map(music_note => music_note.map(music_note\
    \ => music_note.size).sum))))\n        val notes_count_count_count_count_count_count_count_sum\
    \ = notes_count.map(music_note => music_note.map(music_note => music_note.size).map(music_note\
    \ => music_note.map(musi\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_s12hfx3.scala:24:8 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnotes_count_count_count_count_count_count_count_sum\e\
    [0m = notes_count.map(\e[36mmusic_note\e[0m => music_note.map(\e[36mmusic_note\e\
    [0m => music_note.size).map(\e[36mmusic_note\e[0m => music_note.map(musi\n\e[31m\e\
    [31m   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        ')' expected, but 'val'\
    \ found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_s12hfx3.scala:18:77 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnotes_count_count_sum\e\
    [0m = notes_count.map(\e[36mmusic_note\e[0m => music_note.size)\n\e[31m\e[31m\
    \   |\e[0m                                                                  ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       value size is not a\
    \ member of Int\n\e[31m\e[31m-- Error: /tmp/tmp_s12hfx3.scala:18:82 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnotes_count_count_sum\e\
    [0m = notes_count.map(\e[36mmusic_note\e[0m => music_note.size)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \               ^\e[0m\n\e[31m   |\e[0m                                      \
    \    No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m           \
    \                               where:    B is a type variable\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp_s12hfx3.scala:19:83 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_count_count_count_sum\e\
    [0m = notes_count.map(\e[36mmusic_note\e[0m => music_note.map(\e[36mmusic_note\e\
    [0m => music_note.size).sum)\n\e[31m\e[31m   |\e[0m                          \
    \                                              ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                        value map is not a member of Int\n\e\
    [31m\e[31m-- Error: /tmp/tmp_s12hfx3.scala:19:122 ----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_count_count_count_sum\e\
    [0m = notes_count.map(\e[36mmusic_note\e[0m => music_note.map(\e[36mmusic_"
  stdout: ''
  timestamp: 1659800047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.charAt(0)\n            val rest = music_string.substring(1).trim\n\
    \            val beats = rest.split(\"|\").map(music_string => {\n           \
    \     val beat = music_string.charAt(0)\n                val rest = music_string.substring(1).trim\n\
    \                val restLength = rest.length\n                val restLength\
    \ = if (restLength == 0) 4 else restLength\n                val restLength = if\
    \ (restLength == 1) 2 else restLength\n                val restLength = if (restLength\
    \ == 2) 1 else restLength\n                val restLength = if (restLength ==\
    \ 3) 0 else restLength\n                val restLength = if (restLength == 4)\
    \ 0 else restLength\n                val restLength = if (restLength == 5) 1 else\
    \ restLength\n                val restLength = if (restLength == 6) 2 else restLength\n\
    \                val restLength = if (restLength == 7) 1 else restLength\n   \
    \             val restLength = if (restLength == 8) 0 else restLength\n      \
    \          val restLength = if (restLength == 9) 1 else restLength\n         \
    \       val restLength = if (restLength == 10) 2 else restLength\n           \
    \     val restLength = if (restLength == 11) 1 else restLength\n             \
    \   val restLength = if (restLength == 12) 2 else restLength\n               \
    \ val restLength = if (restLength == 13) 1 else restLength\n                val\
    \ restLength = if (restLength == 14) 2 else restLength\n                val restLength\
    \ = if (restLength == 15) 1 else restLength\n                val restLength =\
    \ if (restLength == 16) 2 else restLength\n                val restLength = if\
    \ (restLength == 17) 1 else restLength\n                val restLength = if (restLength\
    \ == 18) 2 else restLength\n                val restLength = if (restLength ==\
    \ 19) 1 else restLength\n                val restLength = if (restLength == 20)\
    \ 2 else restLength\n                val restLength = if (restLength == 21) 1\
    \ else restLength\n                val restLength = if (restLength == 22) 2 else\
    \ restLength\n                val restLength = if (restLength == 23) 1 else restLength\n\
    \                val restLength = if (restLength == 24) 2 else restLength\n  \
    \              val restLength = if (restLength == 25) 1 else restLength\n    \
    \            val restLength = if (restLength == 26) 2 else restLength\n      \
    \          val restLength = if (restLength == 27) 1 else restLength\n        \
    \        val restLength = if (restLength == 28) 2 else restLength\n          \
    \      val restLength = if (restLength == 29) 1 else restLength\n            \
    \    val restLength = if (restLength == 30) 2 else restLength\n              \
    \  val restLength = if (restLength == 31) 1 else restLength\n                \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2si8l0hj.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp2si8l0hj.scala:64:0 ----------------------------\e[0m\e[0m\n\e[31m64\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2si8l0hj.scala:21:20 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e[0m \e[36mrestLength\e[0m\
    \ = \e[33mif\e[0m (restLength == \e[31m0\e[0m) \e[31m4\e[0m \e[33melse\e[0m restLength\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrestLength is already defined as \e[33mvalue\e[0m \e[35mrestLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2si8l0hj.scala:22:20 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m                \e[33mval\e[0m \e[36mrestLength\e[0m = \e[33mif\e\
    [0m (restLength == \e[31m1\e[0m) \e[31m2\e[0m \e[33melse\e[0m restLength\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrestLength is already defined as \e[33mvalue\e[0m \e[35mrestLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2si8l0hj.scala:23:20 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m                \e[33mval\e[0m \e[36mrestLength\e[0m = \e[33mif\e\
    [0m (restLength == \e[31m2\e[0m) \e[31m1\e[0m \e[33melse\e[0m restLength\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrestLength is already defined as \e[33mvalue\e[0m \e[35mrestLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m"
  stdout: ''
  timestamp: 1659800041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_count\
    \ = notes.length\n        val beats_count = notes_count / 4\n        val notes_array\
    \ = notes.map(x => x.toInt)\n        val notes_array = notes_array.take(beats_count)\n\
    \        val notes_array = notes_array.map(x => x * 4)\n        val notes_array\
    \ = notes_array.take(notes_count)\n        val notes_array = notes_array.map(x\
    \ => x * 4)\n        val notes_array = notes_array.take(notes_count)\n       \
    \ val notes_array = notes_array.map(x => x * 4)\n        val notes_array = notes_array.take(notes_count)\n\
    \        val notes_array = notes_array.map(x => x * 4)\n        val notes_array\
    \ = notes_array.take(notes_count)\n        val notes_array = notes_array.map(x\
    \ => x * 4)\n        val notes_array = notes_array.take(notes_count)\n       \
    \ val notes_array = notes_array.map(x => x * 4)\n        val notes_array = notes_array.take(notes_count)\n\
    \        val notes_array = notes_array.map(x => x * 4)\n        val notes_array\
    \ = notes_array.take(notes_count)\n        val notes_array = notes_array.map(x\
    \ => x * 4)\n        val notes_array = notes_array.take(notes_count)\n       \
    \ val notes_array = notes_array.map(x => x * 4)\n        val notes_array = notes_array.take(notes_count)\n\
    \        val notes_array = notes_array.map(x => x * 4)\n        val notes_array\
    \ = notes_array.take(notes_count)\n        val notes_array = notes_array.map(x\
    \ => x * 4)\n        val notes_array = notes_array.take(notes_count)\n       \
    \ val notes_array = notes_array.map(x => x * 4)\n        val notes_array = notes_array.take(notes_count)\n\
    \        val notes_array = notes_array.map(x => x * 4)\n        val notes_array\
    \ = notes_array.take(notes_count)\n        val notes_array = notes_array.map(x\
    \ => x * 4)\n        val notes_array = notes_array.take(notes_count)\n       \
    \ val notes_array = notes_array.map(x => x * 4)\n        val notes_array = notes_array.take(notes_count)\n\
    \        val notes_array = notes_array.map(x => x * 4)\n        val notes_array\
    \ = notes_array.take(notes_count)\n        val notes_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpro5tny9r.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpro5tny9r.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotes_array\e[0m = notes_array.take(beats_count)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnotes_array\
    \ is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpro5tny9r.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotes_array\e[0m = notes_array.map(\e[36mx\e[0m => x * \e[31m4\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpro5tny9r.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.take(notes_count)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpro5tny9r.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mx\e[0m => x * \e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same"
  stdout: ''
  timestamp: 1659800046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_list_length\
    \ = music_list.length\n        val music_list_beats = music_list.map(music_string\
    \ => {\n            val music_string_length = music_string.length\n          \
    \  val music_string_beats = music_string.split(\"o\").length - 1\n           \
    \ music_string_beats * music_string_length\n        }).toList\n        val music_list_beats_sum\
    \ = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n\
    \        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length\
    \ = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n\
    \        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum\
    \ = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n\
    \        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length\
    \ = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n\
    \        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum\
    \ = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n\
    \        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length\
    \ = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n\
    \        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum\
    \ = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n\
    \        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length\
    \ = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n\
    \        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum\
    \ = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n\
    \        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length\
    \ = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n\
    \        val music_list_beats_length = musi\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpof0amr24.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_sum\e[0m\
    \ = music_list_beats.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_sum is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_list_beats_sum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpof0amr24.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpof0amr24.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_sum\e[0m\
    \ = music_list_beats.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_sum is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_list_beats_sum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpof0amr24.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpof0amr24.scala:27:12 -----------------"
  stdout: ''
  timestamp: 1659800045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.charAt(0)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.charAt(0)\n\
    \                val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                    val rest = music_string.charAt(0)\n              \
    \      val rest = music_string.substring(1).split(\".\").map(music_string => {\n\
    \                        val rest = music_string.charAt(0)\n                 \
    \       val rest = music_string.substring(1).split(\"|\").map(music_string =>\
    \ {\n                            val rest = music_string.charAt(0)\n         \
    \                   val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                                val rest = music_string.charAt(0)\n  \
    \                              val rest = music_string.substring(1).split(\".\"\
    ).map(music_string => {\n                                    val rest = music_string.charAt(0)\n\
    \                                    val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                        val rest =\
    \ music_string.charAt(0)\n                                        val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                            val rest\
    \ = music_string.charAt(0)\n                                            val rest\
    \ = music_string.substring(1).split(\".\").map(music_string => {\n           \
    \                                     val rest = music_string.charAt(0)\n    \
    \                                            val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \   val rest = music_string.charAt(0)\n                                      \
    \              val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                                                        val rest = music_string.charAt(0)\n\
    \                                                        val rest = music_string.substring(1).split(\"\
    .\").map(music_string => {\n                                                 \
    \           val rest = music_string.charAt(0)\n                              \
    \                              val rest = music_string.substring(1).split(\"|\"\
    ).map(music_string => {\n                                                    \
    \            val rest = music_string.charAt(0)\n                             \
    \                                   val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                   val rest = music_string.charAt(0)\n                      \
    \                                              val rest = music_string.substring(1).split(\"\
    .\").map(music_string => {\n                                                 \
    \                       val rest = music_string.charAt(0)\n                  \
    \                                                      val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \                           val rest = music_string.charAt(0)\n              \
    \                                                              val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                               val rest = music_string.charAt(0)\n          \
    \                                                                      val rest\
    \ = musi\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprs56wkk9.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmprs56wkk9.scala:61:0 ----------------------------\e[0m\e[0m\n\e[31m61\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprs56wkk9.scala:50:84 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m                                                    \
    \                            \e[33mval\e[0m \e[36mrest\e[0m = musi\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mrest is already defined as\
    \ \e[33mvalue\e[0m \e[35mrest\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_list_size\
    \ = music_list.size\n        val music_list_size_2 = music_list_size / 2\n   \
    \     val music_list_size_3 = music_list_size_2 / 2\n        val music_list_size_4\
    \ = music_list_size_3 / 2\n        val music_list_size_5 = music_list_size_4 /\
    \ 2\n        val music_list_size_6 = music_list_size_5 / 2\n        val music_list_size_7\
    \ = music_list_size_6 / 2\n        val music_list_size_8 = music_list_size_7 /\
    \ 2\n        val music_list_size_9 = music_list_size_8 / 2\n        val music_list_size_10\
    \ = music_list_size_9 / 2\n        val music_list_size_11 = music_list_size_10\
    \ / 2\n        val music_list_size_12 = music_list_size_11 / 2\n        val music_list_size_13\
    \ = music_list_size_12 / 2\n        val music_list_size_14 = music_list_size_13\
    \ / 2\n        val music_list_size_15 = music_list_size_14 / 2\n        val music_list_size_16\
    \ = music_list_size_15 / 2\n        val music_list_size_17 = music_list_size_16\
    \ / 2\n        val music_list_size_18 = music_list_size_17 / 2\n        val music_list_size_19\
    \ = music_list_size_18 / 2\n        val music_list_size_20 = music_list_size_19\
    \ / 2\n        val music_list_size_21 = music_list_size_20 / 2\n        val music_list_size_22\
    \ = music_list_size_21 / 2\n        val music_list_size_23 = music_list_size_22\
    \ / 2\n        val music_list_size_24 = music_list_size_23 / 2\n        val music_list_size_25\
    \ = music_list_size_24 / 2\n        val music_list_size_26 = music_list_size_25\
    \ / 2\n        val music_list_size_27 = music_list_size_26 / 2\n        val music_list_size_28\
    \ = music_list_size_27 / 2\n        val music_list_size_29 = music_list_size_28\
    \ / 2\n        val music_list_size_30 = music_list_size_29 / 2\n        val music_list_size_31\
    \ = music_list_size_30 / 2\n        val music_list_size_32 = music_list_size_31\
    \ / 2\n        val music_list_size_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_47dpr8t.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_47dpr8t.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split('|')\n        val music_length\
    \ = music_list.length\n        val music_beats = music_list.map(music_string =>\
    \ {\n            val music_note = music_string.substring(0, 1)\n            val\
    \ music_length = music_string.substring(1, music_string.length)\n            val\
    \ music_beats = music_string.substring(music_string.length)\n            val music_beats_array\
    \ = music_beats.toCharArray\n            val music_beats_length = music_beats_array.length\n\
    \            val music_beats_array = music_beats_array.map(music_beat => {\n \
    \               val music_beat_array = music_beat.toCharArray\n              \
    \  val music_beat_length = music_beat_array.length\n                val music_beat_array\
    \ = music_beat_array.map(music_beat_char => {\n                    val music_beat_char_array\
    \ = music_beat_char.toCharArray\n                    val music_beat_char_length\
    \ = music_beat_char_array.length\n                    val music_beat_char_array\
    \ = music_beat_char_array.map(music_beat_char_char => {\n                    \
    \    val music_beat_char_char_array = music_beat_char_char.toCharArray\n     \
    \                   val music_beat_char_char_length = music_beat_char_char_array.length\n\
    \                        val music_beat_char_char_array = music_beat_char_char_array.map(music_beat_char_char_char\
    \ => {\n                            val music_beat_char_char_char_array = music_beat_char_char_char.toCharArray\n\
    \                            val music_beat_char_char_char_length = music_beat_char_char_char_array.length\n\
    \                            val music_beat_char_char_char_array = music_beat_char_char_char_array.map(music_beat_char_char_char_char\
    \ => {\n                                val music_beat_char_char_char_char_array\
    \ = music_beat_char_char_char_char_array.toCharArray\n                       \
    \         val music_beat_char_char_char_char_length = music_beat_char_char_char_char_array.length\n\
    \                                val music_beat_char_char_char_char_array = music_beat_char_char_char_char_array.map(music_beat_char_char_char_char_char\
    \ => {\n                                    val music_beat_char_char_char_char_char_array\
    \ = music_beat_char_char_char_char_char_array.toCharArray\n                  \
    \                  val music_beat_char_char_char_char_char_length = music_beat_char_char_char_char_char_array.length\n\
    \                                    val music_beat_char_char_char_char_char_array\
    \ = music_beat_char_char_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvdxp5oj4.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpvdxp5oj4.scala:51:0 ----------------------------\e[0m\e[0m\n\e[31m51\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvdxp5oj4.scala:23:50 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mval\e[0m \e[36mmusic_beat_array\e\
    [0m = music_beat.toCharArray\n\e[31m\e[31m   |\e[0m                          \
    \             ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \            value toCharArray is not a member of Char\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpvdxp5oj4.scala:50:1 ---------------------\e[0m\e\
    [0m\n\e[31m50 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:  \
    \  Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659800044
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\"\\\\|\").map(music_string => {\n           \
    \ val notes = music_string.split(\"o\").map(music_string => {\n              \
    \  val note = music_string.charAt(0).toChar\n                val beats = music_string.substring(1).toInt\n\
    \                beats\n            })\n            notes.sum\n        }).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6t17ualo.scala:21:11\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m15 |\e[0m        \
    \    \e[33mval\e[0m \e[36mnotes\e[0m = music_string.split(\e[31m\"o\"\e[0m).map(\e\
    [36mmusic_string\e[0m => {\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36mnote\e\
    [0m = music_string.charAt(\e[31m0\e[0m).toChar\n\e[31m17 |\e[0m              \
    \  \e[33mval\e[0m \e[36mbeats\e[0m = music_string.substring(\e[31m1\e[0m).toInt\n\
    \e[31m18 |\e[0m                beats\n\e[31m19 |\e[0m            })\n\e[31m20\
    \ |\e[0m            notes.sum\n\e[31m21 |\e[0m        }).toList\n\e[31m\e[31m\
    \   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e\
    [0m]\n\e[31m   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800044
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.charAt(0)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.charAt(0)\n\
    \                val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                    val rest = music_string.charAt(0)\n              \
    \      val rest = music_string.substring(1).split(\"|\").map(music_string => {\n\
    \                        val rest = music_string.charAt(0)\n                 \
    \       val rest = music_string.substring(1).split(\"o\").map(music_string =>\
    \ {\n                            val rest = music_string.charAt(0)\n         \
    \                   val rest = music_string.substring(1).split(\"|\").map(music_string\
    \ => {\n                                val rest = music_string.charAt(0)\n  \
    \                              val rest = music_string.substring(1).split(\"o\"\
    ).map(music_string => {\n                                    val rest = music_string.charAt(0)\n\
    \                                    val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                        val rest =\
    \ music_string.charAt(0)\n                                        val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                            val rest\
    \ = music_string.charAt(0)\n                                            val rest\
    \ = music_string.substring(1).split(\"|\").map(music_string => {\n           \
    \                                     val rest = music_string.charAt(0)\n    \
    \                                            val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \   val rest = music_string.charAt(0)\n                                      \
    \              val rest = music_string.substring(1).split(\"|\").map(music_string\
    \ => {\n                                                        val rest = music_string.charAt(0)\n\
    \                                                        val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \           val rest = music_string.charAt(0)\n                              \
    \                              val rest = music_string.substring(1).split(\"|\"\
    ).map(music_string => {\n                                                    \
    \            val rest = music_string.charAt(0)\n                             \
    \                                   val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                   val rest = music_string.charAt(0)\n                      \
    \                                              val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \                       val rest = music_string.charAt(0)\n                  \
    \                                                      val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                           val rest = music_string.charAt(0)\n              \
    \                                                              val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \                               val rest = music_string.charAt(0)\n          \
    \                                                                      val rest\
    \ = musi\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkv2z_f4_.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpkv2z_f4_.scala:61:0 ----------------------------\e[0m\e[0m\n\e[31m61\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkv2z_f4_.scala:50:84 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m                                                    \
    \                            \e[33mval\e[0m \e[36mrest\e[0m = musi\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mrest is already defined as\
    \ \e[33mvalue\e[0m \e[35mrest\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800017
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.charAt(0)\n            val rest = music_string.substring(1).trim\n\
    \            val beats = rest.split(\"|\").map(rest => {\n                val\
    \ beat = rest.charAt(0)\n                val rest = rest.substring(1)\n      \
    \          val rest = rest.toLong\n                beat * rest\n            }).sum\n\
    \            note match {\n                case 'o' => beats * 4\n           \
    \     case 'o|' => beats * 2\n                case '.|' => beats\n           \
    \     case _ => 0\n            }\n        }).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp20ljt5nb.scala:25:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mcase\e[0m \e[31m'o\e[0m|' => beats\
    \ * \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e\
    [0msymbol literal 'o is no longer supported,\n\e[31m   |\e[0muse a string literal\
    \ \"o\" or an application Symbol(\"o\") instead,\n\e[31m   |\e[0mor enclose in\
    \ braces '{o} if you want a quoted expression.\n\e[31m   |\e[0mFor now, you can\
    \ also `import language.deprecated.symbolLiterals` to accept\n\e[31m   |\e[0mthe\
    \ idiom, but this possibility might no longer be available in the future.\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp20ljt5nb.scala:25:26 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mcase\e[0m \e[31m'o\e[0m|' => beats\
    \ * \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                          ^^\e[0m\n\e[31m\
    \   |\e[0m                          '{' expected, but '=>' found\n\e[31m\e[31m--\
    \ Error: /tmp/tmp20ljt5nb.scala:26:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mcase\e[0m '.|' => beats\n\e[31m\e\
    [31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                    \
    \ unclosed character literal\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp20ljt5nb.scala:29:8\
    \ ----------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        }).sum\n\e[31m\e\
    [31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        '=>' expected, but '}' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp20ljt5nb.scala:29:9 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        }).sum\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\
    \e[31m   |\e[0m         '}' expected, but ')' found\n\e[31m\e[31m-- Error: /tmp/tmp20ljt5nb.scala:31:4\
    \ ------------------------------------------\e[0m\e[0m\n\e[31m31 |\e[0m    \e\
    [33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e\
    [0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    end of statement\
    \ expected but 'def' found\n\e[31m\e[31m-- Error: /tmp/tmp20ljt5nb.scala:22:14\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \     }).sum\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1659800046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.charAt(0)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.charAt(0)\n\
    \                val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                    val rest = music_string.charAt(0)\n              \
    \      val rest = music_string.substring(1).split(\".\").map(music_string => {\n\
    \                        val rest = music_string.charAt(0)\n                 \
    \       val rest = music_string.substring(1).split(\"|\").map(music_string =>\
    \ {\n                            val rest = music_string.charAt(0)\n         \
    \                   val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                                val rest = music_string.charAt(0)\n  \
    \                              val rest = music_string.substring(1).split(\".\"\
    ).map(music_string => {\n                                    val rest = music_string.charAt(0)\n\
    \                                    val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                        val rest =\
    \ music_string.charAt(0)\n                                        val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                            val rest\
    \ = music_string.charAt(0)\n                                            val rest\
    \ = music_string.substring(1).split(\".\").map(music_string => {\n           \
    \                                     val rest = music_string.charAt(0)\n    \
    \                                            val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \   val rest = music_string.charAt(0)\n                                      \
    \              val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                                                        val rest = music_string.charAt(0)\n\
    \                                                        val rest = music_string.substring(1).split(\"\
    .\").map(music_string => {\n                                                 \
    \           val rest = music_string.charAt(0)\n                              \
    \                              val rest = music_string.substring(1).split(\"|\"\
    ).map(music_string => {\n                                                    \
    \            val rest = music_string.charAt(0)\n                             \
    \                                   val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                   val rest = music_string.charAt(0)\n                      \
    \                                              val rest = music_string.substring(1).split(\"\
    .\").map(music_string => {\n                                                 \
    \                       val rest = music_string.charAt(0)\n                  \
    \                                                      val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \                           val rest = music_string.charAt(0)\n              \
    \                                                              val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                               val rest = music_string.charAt(0)\n          \
    \                                                                      val rest\
    \ = musi\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprs56wkk9.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmprs56wkk9.scala:61:0 ----------------------------\e[0m\e[0m\n\e[31m61\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprs56wkk9.scala:50:84 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m                                                    \
    \                            \e[33mval\e[0m \e[36mrest\e[0m = musi\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mrest is already defined as\
    \ \e[33mvalue\e[0m \e[35mrest\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\"\\\\|\").map(music_string => {\n           \
    \ val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val rests = rest.split(\"o\").map(rest =>\
    \ {\n                val rest = rest.toInt\n                rest + 4\n       \
    \     })\n            val rests = rest.split(\"o|\").map(rest => {\n         \
    \       val rest = rest.toInt\n                rest + 2\n            })\n    \
    \        val rests = rest.split(\"\\\\.|\").map(rest => {\n                val\
    \ rest = rest.toInt\n                rest + 1\n            })\n            note\
    \ :: rests\n        }).reduce((a, b) => a ++ b).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptm4ym80d.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mrests\e[0m = rest.split(\e\
    [31m\"o|\"\e[0m).map(\e[36mrest\e[0m => {\n\e[31m\e[31m   |\e[0m            ^\e\
    [0m\n\e[31m   |\e[0mrests is already defined as \e[33mvalue\e[0m \e[35mrests\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m22 |\e[0m         \
    \       \e[33mval\e[0m \e[36mrest\e[0m = rest.toInt\n\e[31m23 |\e[0m         \
    \       rest + \e[31m2\e[0m\n\e[31m24 |\e[0m            })\n\e[31m\e[31m-- Error:\
    \ /tmp/tmptm4ym80d.scala:20:14 -----------------------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            })\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\
    \e[31m   |\e[0m              No ClassTag available for B\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m              where:    B is a type variable\n\e[31m\e[31m-- Error:\
    \ /tmp/tmptm4ym80d.scala:28:14 -----------------------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m            })\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\
    \e[31m   |\e[0m              No ClassTag available for B\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m              where:    B is a type variable\n\e[31m\e[31m-- Error:\
    \ /tmp/tmptm4ym80d.scala:30:10 -----------------------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m        }).reduce((a, b) => a ++ b).toList\n\e[31m\e[31m \
    \  |\e[0m          ^\e[0m\n\e[31m   |\e[0m          No ClassTag available for\
    \ B\n\e[31m   |\e[0m\n\e[31m   |\e[0m          where:    B is a type variable\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659800046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split(' ').map(_.toUpperCase())\n      \
    \  val notes_count = notes.map(n => n.length).sum\n        val notes_last_beat\
    \ = notes.map(n => n.last).sum\n        val notes_last_beat_count = notes.map(n\
    \ => n.last.length).sum\n        val notes_last_beat_count_with_note = notes.map(n\
    \ => n.last + n.length).sum\n        val notes_last_beat_count_with_note_length\
    \ = notes.map(n => n.last + n.length + 1).sum\n        val notes_last_beat_count_with_note_length_2\
    \ = notes.map(n => n.last + n.length + 2).sum\n        val notes_last_beat_count_with_note_length_3\
    \ = notes.map(n => n.last + n.length + 3).sum\n        val notes_last_beat_count_with_note_length_4\
    \ = notes.map(n => n.last + n.length + 4).sum\n        val notes_last_beat_count_with_note_length_5\
    \ = notes.map(n => n.last + n.length + 5).sum\n        val notes_last_beat_count_with_note_length_6\
    \ = notes.map(n => n.last + n.length + 6).sum\n        val notes_last_beat_count_with_note_length_7\
    \ = notes.map(n => n.last + n.length + 7).sum\n        val notes_last_beat_count_with_note_length_8\
    \ = notes.map(n => n.last + n.length + 8).sum\n        val notes_last_beat_count_with_note_length_9\
    \ = notes.map(n => n.last + n.length + 9).sum\n        val notes_last_beat_count_with_note_length_10\
    \ = notes.map(n => n.last + n.length + 10).sum\n        val notes_last_beat_count_with_note_length_11\
    \ = notes.map(n => n.last + n.length + 11).sum\n        val notes_last_beat_count_with_note_length_12\
    \ = notes.map(n => n.last + n.length + 12).sum\n        val notes_last_beat_count_with_note_length_13\
    \ = notes.map(n => n.last + n.length + 13).sum\n        val notes_last_beat_count_with_note_length_14\
    \ = notes.map(n => n.last + n.length + 14).sum\n        val notes_last_beat_count_with_note_length_15\
    \ = notes.map(n => n.last + n.length + 15).sum\n        val notes_last_beat_count_with_note_length_16\
    \ = notes.map(n \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjyzwbwpu.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjyzwbwpu.scala:17:58\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mnotes_last_beat_count\e[0m = notes.map(\e[36mn\e[0m => n.last.length).sum\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value length is not a\
    \ member of Char\n\e[31m\e[31m-- Error: /tmp/tmpjyzwbwpu.scala:17:65 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnotes_last_beat_count\e\
    [0m = notes.map(\e[36mn\e[0m => n.last.length).sum\n\e[31m\e[31m   |\e[0m    \
    \                                                             ^\e[0m\n\e[31m \
    \  |\e[0m                                          No ClassTag available for B\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m                                          where:\
    \    B is a type variable\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjyzwbwpu.scala:34:66\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e\
    [36mnotes_last_beat_count_with_note_length_16\e[0m = notes.map(n \n\e[31m\e[31m\
    \   |\e[0m                                                                  ^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \   Not found: n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjyzwbwpu.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659800048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\"\\\\|\").map(music_string => {\n           \
    \ val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1)\n\
    \            val beats = rest.split(\"o\").map(rest => {\n                val\
    \ beat = rest.substring(0, 1)\n                val rest = rest.substring(1)\n\
    \                val notes = rest.split(\"|\").map(rest => {\n               \
    \     val note = note.substring(0, 1)\n                    val rest = note.substring(1)\n\
    \                    val beats = rest.split(\".\").map(rest => {\n           \
    \             val beat = beat.substring(0, 1)\n                        val rest\
    \ = beat.substring(1)\n                        val beats = rest.split(\"|\").map(rest\
    \ => {\n                            val beat = beat.substring(0, 1)\n        \
    \                    val rest = beat.substring(1)\n                          \
    \  val beats = rest.split(\".\").map(rest => {\n                             \
    \   val beat = beat.substring(0, 1)\n                                val rest\
    \ = beat.substring(1)\n                                val beats = rest.split(\"\
    |\").map(rest => {\n                                    val beat = beat.substring(0,\
    \ 1)\n                                    val rest = beat.substring(1)\n     \
    \                               val beats = rest.split(\".\").map(rest => {\n\
    \                                        val beat = beat.substring(0, 1)\n   \
    \                                     val rest = beat.substring(1)\n         \
    \                               val beats = rest.split(\"|\").map(rest => {\n\
    \                                            val beat = beat.substring(0, 1)\n\
    \                                            val rest = beat.substring(1)\n  \
    \                                          val beats = rest.split(\".\").map(rest\
    \ => {\n                                                val beat = beat.substring(0,\
    \ 1)\n                                                val rest = beat.substring(1)\n\
    \                                                val beats = rest.split(\"|\"\
    ).map(rest => {\n                                                    val beat\
    \ = beat.substring(0, 1)\n                                                   \
    \ val rest = beat.substring(1)\n                                             \
    \       val beats = rest.split(\".\").map(rest => {\n                        \
    \                                val beat = beat.substring(0, 1)\n           \
    \                                             val rest = beat.substring(1)\n \
    \                                                       val beats = rest.split(\"\
    |\").map(rest => {\n                                                         \
    \   val beat = beat.substring(0, 1)\n                                        \
    \                    val rest = beat.substring(1)\n                          \
    \                                  val beats = rest.split(\".\").map(rest => {\n\
    \                                                                val beat = beat.substring(0,\
    \ 1)\n                                                                val rest\
    \ = beat.substring(1)\n                                                      \
    \          val beats = rest.split(\"|\").map(rest => {\n                     \
    \                                               val beat = beat.substring(0, 1)\n\
    \                                                                    val rest\
    \ = beat.substring(1)\n                                                      \
    \              val beats = rest.split(\".\").map(rest => {\n                 \
    \                                                       val beat = beat.substring(0,\
    \ 1)\n                                                                       \
    \ val rest = beat.substring(1)\n                                             \
    \                           val beats = rest.split(\"|\").map(rest => {\n    \
    \                                                                        val beat\
    \ = beat.substring(0, 1)\n                                                   \
    \                         \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmput5624ww.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmput5624ww.scala:75:0 ----------------------------\e[0m\e[0m\n\e[31m75\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(' ').map(music_string => {\n            val note\
    \ = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val beats = rest.split('|').map(rest => {\n\
    \                val beat = rest.substring(0, 1)\n                val rest = rest.substring(1,\
    \ rest.length)\n                val rest = rest.toLong\n                beat *\
    \ rest\n            }).sum\n            note -> beats\n        }).map(music_string\
    \ => {\n            music_string._1 -> music_string._2\n        }).map(music_string\
    \ => {\n            music_string._1 -> music_string._2\n        }).map(music_string\
    \ => {\n            music_string._1 -> music_string._2\n        }).map(music_string\
    \ => {\n            music_string._1 -> music_string._2\n        }).map(music_string\
    \ => {\n            music_string._1 -> music_string._2\n        }).map(music_string\
    \ => {\n            music_string._1 -> music_string._2\n        }).map(music_string\
    \ => {\n            music_string._1 -> music_string._2\n        }).map(music_string\
    \ => {\n            music_string._1 -> music_string._2\n        }).map(music_string\
    \ => {\n            music_string._1 -> music_string._2\n        }).map(music_string\
    \ => {\n            music_string._1 -> music_string._2\n        }).map(music_string\
    \ => {\n            music_string._1 -> music_string._2\n        }).map(music_string\
    \ => {\n            music_string._1 -> music_string._2\n        }).map(music_string\
    \ => {\n            music_string._1 -> music_string._2\n        }).map(music_string\
    \ => {\n            music_string._1 -> music_string._2\n        }).map(music_string\
    \ => {\n            music_string._1 -> music_string._2\n        }).map(music_string\
    \ => {\n            music_string._1 -> music_string._2\n        }).map(music_string\
    \ => {\n            music_string._1 -> music_string._2\n        }).map(music_string\
    \ => {\n            music_string._1 -> music_string._2\n        }).map(music_string\
    \ => {\n            music_string._1 -> music_string._2\n        }).map(music_string\
    \ => {\n            music_string._1 -> music_string._2\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzwjs0nk6.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpzwjs0nk6.scala:75:0 ----------------------------\e[0m\e[0m\n\e[31m75\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- Error: /tmp/tmpzwjs0nk6.scala:22:14 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            }).sum\n\e[31m\e[31m   |\e[0m           \
    \   ^\e[0m\n\e[31m   |\e[0m              No ClassTag available for B\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m              where:    B is a type variable\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_count\
    \ = notes.length\n        val beats_count = notes_count / 4\n        val notes_array\
    \ = notes.map(_.toInt)\n        val notes_array = notes_array.take(notes_count)\n\
    \        val notes_array = notes_array.toList\n        val notes_array = notes_array.map(x\
    \ => x * beats_count)\n        val notes_array = notes_array.toList\n        notes_array\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_ylx79lm.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.take(notes_count)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_ylx79lm.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_ylx79lm.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mx\e[0m => x * beats_count)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_ylx79lm.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp_ylx79lm.scala:22:8 ---------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m        notes_array\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (n"
  stdout: ''
  timestamp: 1659800047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_length\
    \ = notes.length\n        val notes_array = notes.map(_.toInt).toArray\n     \
    \   val notes_array = notes_array.sortWith(_ < _)\n        val notes_array = notes_array.map(x\
    \ => (x % 12).toInt)\n        val notes_array = notes_array.sortWith(_ < _)\n\
    \        val notes_array = notes_array.map(x => (x % 12).toInt)\n        val notes_array\
    \ = notes_array.sortWith(_ < _)\n        val notes_array = notes_array.map(x =>\
    \ (x % 12).toInt)\n        val notes_array = notes_array.sortWith(_ < _)\n   \
    \     val notes_array = notes_array.map(x => (x % 12).toInt)\n        val notes_array\
    \ = notes_array.sortWith(_ < _)\n        val notes_array = notes_array.map(x =>\
    \ (x % 12).toInt)\n        val notes_array = notes_array.sortWith(_ < _)\n   \
    \     val notes_array = notes_array.map(x => (x % 12).toInt)\n        val notes_array\
    \ = notes_array.sortWith(_ < _)\n        val notes_array = notes_array.map(x =>\
    \ (x % 12).toInt)\n        val notes_array = notes_array.sortWith(_ < _)\n   \
    \     val notes_array = notes_array.map(x => (x % 12).toInt)\n        val notes_array\
    \ = notes_array.sortWith(_ < _)\n        val notes_array = notes_array.map(x =>\
    \ (x % 12).toInt)\n        val notes_array = notes_array.sortWith(_ < _)\n   \
    \     val notes_array = notes_array.map(x => (x % 12).toInt)\n        val notes_array\
    \ = notes_array.sortWith(_ < _)\n        val notes_array = notes_array.map(x =>\
    \ (x % 12).toInt)\n        val notes_array = notes_array.sortWith(_ < _)\n   \
    \     val notes_array = notes_array.map(x => (x % 12).toInt)\n        val notes_array\
    \ = notes_array.sortWith(_ < _)\n        val notes_array = notes_array.map(x =>\
    \ (x % 12).toInt)\n        val notes_array = notes_array.sortWith(_ < _)\n   \
    \     val notes_array = notes_array.map(x => (x % 12).toInt)\n        val notes_array\
    \ = notes_array.sortWith(_ < _)\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpem_3eqh3.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpem_3eqh3.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mx\e[0m => (x % \e[31m12\e[0m).toInt)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpem_3eqh3.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpem_3eqh3.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mx\e[0m => (x % \e[31m12\e[0m).toInt)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpem_3eqh3.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m"
  stdout: ''
  timestamp: 1659800047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \").map(x => x.toUpperCase()).filter(x\
    \ => x != \"O\" && x != \"O|\" && x != \".|\")\n        val music_list_size =\
    \ music_list.size\n        val music_list_size_half = music_list_size / 2\n  \
    \      val music_list_size_quater = music_list_size / 4\n        val music_list_size_whole\
    \ = music_list_size - music_list_size_half - music_list_size_quater\n        val\
    \ music_list_size_whole_long = music_list_size_whole * 4\n        val music_list_size_whole_long_long\
    \ = music_list_size_whole_long * 4\n        val music_list_size_whole_long_long_long\
    \ = music_list_size_whole_long_long * 4\n        val music_list_size_whole_long_long_long_long\
    \ = music_list_size_whole_long_long_long * 4\n        val music_list_size_whole_long_long_long_long_long\
    \ = music_list_size_whole_long_long_long_long * 4\n        val music_list_size_whole_long_long_long_long_long_long\
    \ = music_list_size_whole_long_long_long_long_long * 4\n        val music_list_size_whole_long_long_long_long_long_long_long\
    \ = music_list_size_whole_long_long_long_long_long_long * 4\n        val music_list_size_whole_long_long_long_long_long_long_long_long\
    \ = music_list_size_whole_long_long_long_long_long_long_long * 4\n        val\
    \ music_list_size_whole_long_long_long_long_long_long_long_long_long = music_list_size_whole_long_long_long_long_long_long_long_long_long\
    \ * 4\n        val music_list_size_whole_long_long_long_long_long_long_long_long_long\
    \ = music_list_size_whole_long_long_long_long_long_long_long_long_long * 4\n \
    \       val music_list_size_whole_long_long_long_long_long_long_long_long_long_long\
    \ = music_list_size_whole_long_long_long_long_long_long_long_long_long_long_long\
    \ * 4\n        val music_list_size_whole_long_long_long_long_long_long_long_long_long_long_long\
    \ = music_list_size_whole_long_long_long_long_long_long_long_long_long_long_long_long\
    \ * 4\n        val music_list_size_whole_long_long_long_long_long_long_long_long_long_long_long_long\
    \ = music_list_size_whole_long_long_long_long_long_long_long_long_long_long_long_long\
    \ * 4\n        val music_list_size_whole_long_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgbqk8llp.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgbqk8llp.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_size_whole_long_long_long_long_long_long_long_long_long\e[0m\
    \ = music_list_size_whole_long_long_long_long_long_long_long_long_long * \e[31m4\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_whole_long_long_long_long_long_long_long_long_long\
    \ is already defined as \e[33mvalue\e[0m \e[35mmusic_list_size_whole_long_long_long_long_long_long_long_long_long\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpgbqk8llp.scala:27:81 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_whole_long_long_long_long_long_long_long_long_long\e\
    [0m = music_list_size_whole_long_long_long_long_long_long_long_long_long * \e\
    [31m4\e[0m\n\e[31m\e[31m   |\e[0m                                            \
    \                                     ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35mmusic_list_size_whole_long_long_long_long_long_long_long_long_long\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgbqk8llp.scala:31:96\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_size_whole_long_long_long_long_long_long_long_long_long_long_long_long\e\
    [0m = music_list_size_whole_long_long_long_long_long_long_long_long_long_long_long_long\
    \ * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0mRecursive \e[33mval"
  stdout: ''
  timestamp: 1659800048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split('|').map(_.toInt)\n        val beats\
    \ = notes.map(n => math.ceil(n/4))\n        val notes_count = notes.map(n => math.ceil(n/4))\n\
    \        val notes_count_2 = notes.map(n => math.ceil(n/2))\n        val notes_count_3\
    \ = notes.map(n => math.ceil(n/3))\n        val notes_count_4 = notes.map(n =>\
    \ math.ceil(n/4))\n        val notes_count_5 = notes.map(n => math.ceil(n/5))\n\
    \        val notes_count_6 = notes.map(n => math.ceil(n/6))\n        val notes_count_7\
    \ = notes.map(n => math.ceil(n/7))\n        val notes_count_8 = notes.map(n =>\
    \ math.ceil(n/8))\n        val notes_count_9 = notes.map(n => math.ceil(n/9))\n\
    \        val notes_count_10 = notes.map(n => math.ceil(n/10))\n        val notes_count_11\
    \ = notes.map(n => math.ceil(n/11))\n        val notes_count_12 = notes.map(n\
    \ => math.ceil(n/12))\n        val notes_count_13 = notes.map(n => math.ceil(n/13))\n\
    \        val notes_count_14 = notes.map(n => math.ceil(n/14))\n        val notes_count_15\
    \ = notes.map(n => math.ceil(n/15))\n        val notes_count_16 = notes.map(n\
    \ => math.ceil(n/16))\n        val notes_count_17 = notes.map(n => math.ceil(n/17))\n\
    \        val notes_count_18 = notes.map(n => math.ceil(n/18))\n        val notes_count_19\
    \ = notes.map(n => math.ceil(n/19))\n        val notes_count_20 = notes.map(n\
    \ => math.ceil(n/20))\n        val notes_count_21 = notes.map(n => math.ceil(n/21))\n\
    \        val notes_count_22 = notes.map(n => math.ceil(n/22))\n        val notes_count_23\
    \ = notes.map(n => math.ceil(n/23))\n        val notes_count_24 = notes.map(n\
    \ => math.ceil(n/24))\n        val notes_count_25 = notes.map(n => math.ceil(n/25))\n\
    \        val notes_count_26 = notes.map(n => math.ceil(n/26))\n        val notes_count_27\
    \ = notes.map(n \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0bo_10ze.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0bo_10ze.scala:42:39\
    \ ------------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e\
    [36mnotes_count_27\e[0m = notes.map(n \n\e[31m\e[31m   |\e[0m                \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \         Not found: n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0bo_10ze.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.charAt(0)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.charAt(0)\n\
    \                val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                    val rest = music_string.charAt(0)\n              \
    \      val rest = music_string.substring(1).split(\".\").map(music_string => {\n\
    \                        val rest = music_string.charAt(0)\n                 \
    \       val rest = music_string.substring(1).split(\"|\").map(music_string =>\
    \ {\n                            val rest = music_string.charAt(0)\n         \
    \                   val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                                val rest = music_string.charAt(0)\n  \
    \                              val rest = music_string.substring(1).split(\".\"\
    ).map(music_string => {\n                                    val rest = music_string.charAt(0)\n\
    \                                    val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                        val rest =\
    \ music_string.charAt(0)\n                                        val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                            val rest\
    \ = music_string.charAt(0)\n                                            val rest\
    \ = music_string.substring(1).split(\".\").map(music_string => {\n           \
    \                                     val rest = music_string.charAt(0)\n    \
    \                                            val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \   val rest = music_string.charAt(0)\n                                      \
    \              val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                                                        val rest = music_string.charAt(0)\n\
    \                                                        val rest = music_string.substring(1).split(\"\
    .\").map(music_string => {\n                                                 \
    \           val rest = music_string.charAt(0)\n                              \
    \                              val rest = music_string.substring(1).split(\"|\"\
    ).map(music_string => {\n                                                    \
    \            val rest = music_string.charAt(0)\n                             \
    \                                   val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                   val rest = music_string.charAt(0)\n                      \
    \                                              val rest = music_string.substring(1).split(\"\
    .\").map(music_string => {\n                                                 \
    \                       val rest = music_string.charAt(0)\n                  \
    \                                                      val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \                           val rest = music_string.charAt(0)\n              \
    \                                                              val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                               val rest = music_string.charAt(0)\n          \
    \                                                                      val rest\
    \ = musi\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprs56wkk9.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmprs56wkk9.scala:61:0 ----------------------------\e[0m\e[0m\n\e[31m61\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprs56wkk9.scala:50:84 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m                                                    \
    \                            \e[33mval\e[0m \e[36mrest\e[0m = musi\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mrest is already defined as\
    \ \e[33mvalue\e[0m \e[35mrest\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(' ').toList\n        val music_notes\
    \ = music_list.map(music_note => {\n            val music_note_length = music_note.split(\"\
    |\").length\n            val music_note_length = music_note_length.toLong\n  \
    \          val music_note_length = music_note_length / 4\n            val music_note_length\
    \ = music_note_length.toInt\n            val music_note_length = music_note_length\
    \ * 4\n            val music_note_length = music_note_length.toLong\n        \
    \    val music_note_length = music_note_length / 4\n            val music_note_length\
    \ = music_note_length.toInt\n            val music_note_length = music_note_length\
    \ * 4\n            val music_note_length = music_note_length.toLong\n        \
    \    val music_note_length = music_note_length / 4\n            val music_note_length\
    \ = music_note_length.toInt\n            val music_note_length = music_note_length\
    \ * 4\n            val music_note_length = music_note_length.toLong\n        \
    \    val music_note_length = music_note_length / 4\n            val music_note_length\
    \ = music_note_length.toInt\n            val music_note_length = music_note_length\
    \ * 4\n            val music_note_length = music_note_length.toLong\n        \
    \    val music_note_length = music_note_length / 4\n            val music_note_length\
    \ = music_note_length.toInt\n            val music_note_length = music_note_length\
    \ * 4\n            val music_note_length = music_note_length.toLong\n        \
    \    val music_note_length = music_note_length / 4\n            val music_note_length\
    \ = music_note_length.toInt\n            val music_note_length = music_note_length\
    \ * 4\n            val music_note_length = music_note_length.toLong\n        \
    \    val music_note_length = music_note_length / 4\n            val music_note_length\
    \ = music_note_length.toInt\n            val music_note_length = music_note_length\
    \ * 4\n            val music_note_length = music_note_length.toLong\n        \
    \    val music_note_length = music_note_length / 4\n            val music_note_length\
    \ = music_note_length.toInt\n            val music_note_length = music_note_length\
    \ * 4\n            val music_note_length = music_note_length.toLong\n        \
    \    val music_note_length = music_note_length / 4\n            val music_note_length\
    \ = music_note_length.toInt\n            val music_note_length = music_note_length\
    \ * 4\n\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1m__yw3c.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp1m__yw3c.scala:64:0 ----------------------------\e[0m\e[0m\n\e[31m64\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1m__yw3c.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mmusic_note_length\e\
    [0m = music_note_length.toLong\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_note_length is already defined as \e[33mvalue\e[0m \e\
    [35mmusic_note_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp1m__yw3c.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mmusic_note_length\e\
    [0m = music_note_length / \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_note_length is already defined as \e[33mvalue\e[0m \e\
    [35mmusic_note_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp1m__yw3c.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mmusic_note_length\e\
    [0m = music_note_length.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_note_length is already defined as \e[33mvalue\e[0m \e\
    [35mmusic_note_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp1m__yw3c.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m"
  stdout: ''
  timestamp: 1659800048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\"\\\\|\").map(music_string => {\n           \
    \ val notes = music_string.split(\"o\").map(music_string => {\n              \
    \  val note = music_string.trim\n                note.charAt(0) - 'a'.toInt\n\
    \            }).toList\n            val beats = notes.takeRight(notes.length).map(note\
    \ => note * 4)\n            beats.sum\n        }).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp07b3zm8t.scala:21:11\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m15 |\e[0m        \
    \    \e[33mval\e[0m \e[36mnotes\e[0m = music_string.split(\e[31m\"o\"\e[0m).map(\e\
    [36mmusic_string\e[0m => {\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36mnote\e\
    [0m = music_string.trim\n\e[31m17 |\e[0m                note.charAt(\e[31m0\e\
    [0m) - \e[31m'a'\e[0m.toInt\n\e[31m18 |\e[0m            }).toList\n\e[31m19 |\e\
    [0m            \e[33mval\e[0m \e[36mbeats\e[0m = notes.takeRight(notes.length).map(\e\
    [36mnote\e[0m => note * \e[31m4\e[0m)\n\e[31m20 |\e[0m            beats.sum\n\e\
    [31m21 |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m  \
    \ |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required:\
    \ List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_notes = music_string.split(\"\\\\|\")\n        val music_notes_length\
    \ = music_notes.length\n        val music_notes_beats = music_notes.map(music_note\
    \ => music_note.split(\"o\"))\n        val music_notes_beats_length = music_notes_beats.length\n\
    \        val music_notes_beats_length = music_notes_beats_length / 4\n       \
    \ val music_notes_beats_length = music_notes_beats_length * 4\n        val music_notes_beats_length\
    \ = music_notes_beats_length + music_notes_beats_length\n        val music_notes_beats_length\
    \ = music_notes_beats_length / 4\n        val music_notes_beats_length = music_notes_beats_length\
    \ * 4\n        val music_notes_beats_length = music_notes_beats_length + music_notes_beats_length\n\
    \        val music_notes_beats_length = music_notes_beats_length / 4\n       \
    \ val music_notes_beats_length = music_notes_beats_length * 4\n        val music_notes_beats_length\
    \ = music_notes_beats_length + music_notes_beats_length\n        val music_notes_beats_length\
    \ = music_notes_beats_length / 4\n        val music_notes_beats_length = music_notes_beats_length\
    \ * 4\n        val music_notes_beats_length = music_notes_beats_length + music_notes_beats_length\n\
    \        val music_notes_beats_length = music_notes_beats_length / 4\n       \
    \ val music_notes_beats_length = music_notes_beats_length * 4\n        val music_notes_beats_length\
    \ = music_notes_beats_length + music_notes_beats_length\n        val music_notes_beats_length\
    \ = music_notes_beats_length / 4\n        val music_notes_beats_length = music_notes_beats_length\
    \ * 4\n        val music_notes_beats_length = music_notes_beats_length + music_notes_beats_length\n\
    \        val music_notes_beats_length = music_notes_beats_length / 4\n       \
    \ val music_notes_beats_length = music_notes_beats_length * 4\n        val music_notes_beats_length\
    \ = music_notes_beats_length + music_notes_beats_length\n        val music_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjxruc3y7.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjxruc3y7.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_notes_beats_length\e[0m = music_notes_beats_length / \e[31m4\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_notes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjxruc3y7.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_beats_length\e\
    [0m = music_notes_beats_length * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_notes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjxruc3y7.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_beats_length\e\
    [0m = music_notes_beats_length + music_notes_beats_length\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_notes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjxruc3y7.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_beats_length\e\
    [0m = music_notes_beats_length / \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659800053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.charAt(0)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.charAt(0)\n\
    \                val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                    val rest = music_string.charAt(0)\n              \
    \      val rest2 = music_string.substring(1).split(\"|\").map(music_string =>\
    \ {\n                        val rest3 = music_string.charAt(0)\n            \
    \            val rest4 = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                            val rest5 = music_string.charAt(0)\n     \
    \                       val rest6 = music_string.substring(1).split(\"|\").map(music_string\
    \ => {\n                                val rest7 = music_string.charAt(0)\n \
    \                               val rest8 = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                    val rest9 = music_string.charAt(0)\n\
    \                                    val rest10 = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                        val rest11\
    \ = music_string.charAt(0)\n                                        val rest12\
    \ = music_string.substring(1).split(\"o\").map(music_string => {\n           \
    \                                 val rest13 = music_string.charAt(0)\n      \
    \                                      val rest14 = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                val\
    \ rest15 = music_string.charAt(0)\n                                          \
    \      val rest16 = music_string.substring(1).split(\"o\").map(music_string =>\
    \ {\n                                                    val rest17 = music_string.charAt(0)\n\
    \                                                    val rest18 = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \       val rest19 = music_string.charAt(0)\n                                \
    \                        val rest20 = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                                                            val rest21\
    \ = music_string.charAt(0)\n                                                 \
    \           val rest22 = music_string.substring(1).split(\"|\").map(music_string\
    \ => {\n                                                                val rest23\
    \ = music_string.charAt(0)\n                                                 \
    \               val rest24 = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                                                                    val\
    \ rest25 = music_string.charAt(0)\n                                          \
    \                          val rest26 = music_string.substring(1).split(\"|\"\
    ).map(music_string => {\n                                                    \
    \                    val rest27 = music_string.charAt(0)\n                   \
    \                                                     val rest28 = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                           val rest29 = music_string.charAt(0)\n            \
    \                                                                val rest30 =\
    \ music_string.substring(1).split(\"|\").map(music_string => {\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz2szmp77.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpz2szmp77.scala:59:0 ----------------------------\e[0m\e[0m\n\e[31m59\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(' ').toList\n        val music_list_size\
    \ = music_list.size\n        val music_list_size_half = music_list_size / 2\n\
    \        val music_list_size_quarter = music_list_size / 4\n        val music_list_size_whole\
    \ = music_list_size % 4\n        val music_list_size_last_four = music_list_size_whole\
    \ - 4\n        val music_list_size_last_two = music_list_size_last_four - 2\n\
    \        val music_list_size_last_one = music_list_size_last_two - 1\n       \
    \ val music_list_size_last_quarter = music_list_size_last_one / 4\n        val\
    \ music_list_size_last_whole = music_list_size_last_quarter % 4\n        val music_list_size_last_last_four\
    \ = music_list_size_last_whole - 4\n        val music_list_size_last_last_two\
    \ = music_list_size_last_last_four - 2\n        val music_list_size_last_last_one\
    \ = music_list_size_last_last_two - 1\n        val music_list_size_last_last_quarter\
    \ = music_list_size_last_last_one / 4\n        val music_list_size_last_last_whole\
    \ = music_list_size_last_last_quarter % 4\n        val music_list_size_last_last_last_four\
    \ = music_list_size_last_last_whole - 4\n        val music_list_size_last_last_last_two\
    \ = music_list_size_last_last_last_four - 2\n        val music_list_size_last_last_last_one\
    \ = music_list_size_last_last_last_two - 1\n        val music_list_size_last_last_last_quarter\
    \ = music_list_size_last_last_last_one / 4\n        val music_list_size_last_last_last_whole\
    \ = music_list_size_last_last_last_quarter % 4\n        val music_list_size_last_last_last_last_four\
    \ = music_list_size_last_last_last_whole - 4\n        val music_list_size_last_last_last_last_two\
    \ = music_list_size_last_last_last_last_four - 2\n        val music_list_size_last_last_last_last_one\
    \ = music_list_size_last_last_last_last_two - 1\n        val music_list_size_last_last_last_last_quarter\
    \ = music_list_size_last_last_last_last_one / 4\n        val music_list_size_last_last_last_last_whole\
    \ = music_list_size_last_last_last_last_quarter % 4\n        val music_list_size_last_last_last_last_last_four\
    \ = music_list_size_last_last_last_last_whole - \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpj3vtj6cx.scala:39:103 --------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_last_last_last_last_last_four\e\
    [0m = music_list_size_last_last_last_last_whole - \n\e[31m\e[31m   |\e[0m    \
    \                                                                            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \         expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpj3vtj6cx.scala:40:5 ---------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800055
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(' ').map(music_string => {\n            val note\
    \ = music_string.charAt(0)\n            val beats = music_string.substring(1).split('|').map(music_string\
    \ => {\n                val beat = music_string.charAt(0)\n                val\
    \ rest = music_string.substring(1).split('o').map(music_string => {\n        \
    \            val rest = music_string.charAt(0)\n                    val rest =\
    \ music_string.substring(1).split('|').map(music_string => {\n               \
    \         val rest = music_string.charAt(0)\n                        val rest\
    \ = music_string.substring(1).split('o').map(music_string => {\n             \
    \               val rest = music_string.charAt(0)\n                          \
    \  val rest = music_string.substring(1).split('|').map(music_string => {\n   \
    \                             val rest = music_string.charAt(0)\n            \
    \                    val rest = music_string.substring(1).split('o').map(music_string\
    \ => {\n                                    val rest = music_string.charAt(0)\n\
    \                                    val rest = music_string.substring(1).split('|').map(music_string\
    \ => {\n                                        val rest = music_string.charAt(0)\n\
    \                                        val rest = music_string.substring(1).split('o').map(music_string\
    \ => {\n                                            val rest = music_string.charAt(0)\n\
    \                                            val rest = music_string.substring(1).split('|').map(music_string\
    \ => {\n                                                val rest = music_string.charAt(0)\n\
    \                                                val rest = music_string.substring(1).split('o').map(music_string\
    \ => {\n                                                    val rest = music_string.charAt(0)\n\
    \                                                    val rest = music_string.substring(1).split('|').map(music_string\
    \ => {\n                                                        val rest = music_string.charAt(0)\n\
    \                                                        val rest = music_string.substring(1).split('o').map(music_string\
    \ => {\n                                                            val rest =\
    \ music_string.charAt(0)\n                                                   \
    \         val rest = music_string.substring(1).split('|').map(music_string =>\
    \ {\n                                                                val rest\
    \ = music_string.charAt(0)\n                                                 \
    \               val rest = music_string.substring(1).split('o').map(music_string\
    \ => {\n                                                                    val\
    \ rest = music_string.charAt(0)\n                                            \
    \                        val rest = music_string.substring(1).split('|').map(music_string\
    \ => {\n                                                                     \
    \   val rest = music_string.charAt(0)\n                                      \
    \                                  val rest = music_string.substring(1).split('o').map(music_string\
    \ => {\n                                                                     \
    \       val rest = music_string.charAt(0)\n                                  \
    \                                          val rest = music_string.substring(1).split('|').map(music_string\
    \ => {\n                                                                     \
    \           val rest = music_string.charAt(0)\n                              \
    \                                                  val rest = musi\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe4ir8tw7.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpe4ir8tw7.scala:61:0 ----------------------------\e[0m\e[0m\n\e[31m61\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe4ir8tw7.scala:50:84 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m                                                    \
    \                            \e[33mval\e[0m \e[36mrest\e[0m = musi\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mrest is already defined as\
    \ \e[33mvalue\e[0m \e[35mrest\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\"\\\\|\").map(music_string => {\n           \
    \ val notes = music_string.split(\"o\").map(music_string => {\n              \
    \  val note = music_string.trim\n                val beats = note.length / 4\n\
    \                beats\n            }).toList\n            notes.sum\n       \
    \ }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnzcvn5o4.scala:21:11\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m15 |\e[0m        \
    \    \e[33mval\e[0m \e[36mnotes\e[0m = music_string.split(\e[31m\"o\"\e[0m).map(\e\
    [36mmusic_string\e[0m => {\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36mnote\e\
    [0m = music_string.trim\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mbeats\e\
    [0m = note.length / \e[31m4\e[0m\n\e[31m18 |\e[0m                beats\n\e[31m19\
    \ |\e[0m            }).toList\n\e[31m20 |\e[0m            notes.sum\n\e[31m21\
    \ |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m\
    \        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required:\
    \ List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.substring(0,\
    \ 1)\n                val rest = music_string.substring(1)\n                val\
    \ beats = rest.split(\"o\").map(music_string => {\n                    val beat\
    \ = music_string.substring(0, 1)\n                    val rest = music_string.substring(1)\n\
    \                    val beats = rest.split(\"|\").map(music_string => {\n   \
    \                     val beat = music_string.substring(0, 1)\n              \
    \          val rest = music_string.substring(1)\n                        val beats\
    \ = rest.split(\"o\").map(music_string => {\n                            val beat\
    \ = music_string.substring(0, 1)\n                            val rest = music_string.substring(1)\n\
    \                            val beats = rest.split(\"|\").map(music_string =>\
    \ {\n                                val beat = music_string.substring(0, 1)\n\
    \                                val rest = music_string.substring(1)\n      \
    \                          val beats = rest.split(\"o\").map(music_string => {\n\
    \                                    val beat = music_string.substring(0, 1)\n\
    \                                    val rest = music_string.substring(1)\n  \
    \                                  val beats = rest.split(\"|\").map(music_string\
    \ => {\n                                        val beat = music_string.substring(0,\
    \ 1)\n                                        val rest = music_string.substring(1)\n\
    \                                        val beats = rest.split(\"o\").map(music_string\
    \ => {\n                                            val beat = music_string.substring(0,\
    \ 1)\n                                            val rest = music_string.substring(1)\n\
    \                                            val beats = rest.split(\"|\").map(music_string\
    \ => {\n                                                val beat = music_string.substring(0,\
    \ 1)\n                                                val rest = music_string.substring(1)\n\
    \                                                val beats = rest.split(\"o\"\
    ).map(music_string => {\n                                                    val\
    \ beat = music_string.substring(0, 1)\n                                      \
    \              val rest = music_string.substring(1)\n                        \
    \                            val beats = rest.split(\"|\").map(music_string =>\
    \ {\n                                                        val beat = music_string.substring(0,\
    \ 1)\n                                                        val rest = music_string.substring(1)\n\
    \                                                        val beats = rest.split(\"\
    o\").map(music_string => {\n                                                 \
    \           val beat = music_string.substring(0, 1)\n                        \
    \                                    val rest = music_string.substring(1)\n  \
    \                                                          val beats = rest.split(\"\
    |\").map(music_string => {\n                                                 \
    \               val beat = music_string.substring(0, 1)\n                    \
    \                                            val rest = music_string.substring(1)\n\
    \                                                                val beats = rest.split(\"\
    o\").map(music_string => {\n                                                 \
    \                   val beat = music_string.substring(0, 1)\n                \
    \                                                    val rest = music_string.substring(1)\n\
    \                                                                    val beats\
    \ = rest.split(\"\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpa9ls87o5.scala:58:91 -----------------------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m                                                    \
    \                \e[33mval\e[0m \e[36mbeats\e[0m = rest.split(\"\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \                    unclosed string literal\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpa9ls87o5.scala:60:4 ----------------------------\e[0m\e[0m\n\e[31m60\
    \ |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e\
    [35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')'\
    \ expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa9ls87o5.scala:69:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n3 errors found\n"
  stdout: ''
  timestamp: 1659799995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(' ').map(music_string => {\n            val note\
    \ = music_string.charAt(0)\n            val rest = music_string.substring(1).trim\n\
    \            val beats = rest.split('|').map(rest => {\n                val beat\
    \ = rest.charAt(0)\n                val rest = rest.substring(1).trim\n      \
    \          val notes = rest.split('o').map(rest => {\n                    val\
    \ note = note.charAt(0)\n                    val rest = rest.substring(1).trim\n\
    \                    val beats = rest.split('|').map(rest => {\n             \
    \           val beat = beat.charAt(0)\n                        val rest = rest.substring(1).trim\n\
    \                        val notes = rest.split('|').map(rest => {\n         \
    \                   val note = note.charAt(0)\n                            val\
    \ rest = rest.substring(1).trim\n                            val beats = rest.split('|').map(rest\
    \ => {\n                                val beat = beat.charAt(0)\n          \
    \                      val rest = rest.substring(1).trim\n                   \
    \             val notes = rest.split('|').map(rest => {\n                    \
    \                val note = note.charAt(0)\n                                 \
    \   val rest = rest.substring(1).trim\n                                    val\
    \ beats = rest.split('|').map(rest => {\n                                    \
    \    val beat = beat.charAt(0)\n                                        val rest\
    \ = rest.substring(1).trim\n                                        val notes\
    \ = rest.split('|').map(rest => {\n                                          \
    \  val note = note.charAt(0)\n                                            val\
    \ rest = rest.substring(1).trim\n                                            val\
    \ beats = rest.split('|').map(rest => {\n                                    \
    \            val beat = beat.charAt(0)\n                                     \
    \           val rest = rest.substring(1).trim\n                              \
    \                  val notes = rest.split('|').map(rest => {\n               \
    \                                     val note = note.charAt(0)\n            \
    \                                        val rest = rest.substring(1).trim\n \
    \                                                   val beats = rest.split('|').map(rest\
    \ => {\n                                                        val beat = beat.charAt(0)\n\
    \                                                        val rest = rest.substring(1).trim\n\
    \                                                        val notes = rest.split('|').map(rest\
    \ => {\n                                                            val note =\
    \ note.charAt(0)\n                                                           \
    \ val rest = rest.substring(1).trim\n                                        \
    \                    val beats = rest.split('|').map(rest => {\n             \
    \                                                   val beat = beat.charAt(0)\n\
    \                                                                val rest = rest.substring(1).trim\n\
    \                                                                val notes = rest.split('|').map(rest\
    \ => {\n                                                                    val\
    \ note = note.charAt(0)\n                                                    \
    \                val rest = rest.substring(1).trim\n                         \
    \                                           val beats = rest.split('|').map(rest\
    \ => {\n                                                                     \
    \   val beat = beat.charAt(0)\n                                              \
    \                          val rest = rest.substring(1).trim\n               \
    \                                                         val notes = rest.split('|').map(rest\
    \ => {\n                                                                     \
    \       val note = note.charAt(0)\n                                          \
    \                      \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp52gsb__.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpp52gsb__.scala:75:0 ----------------------------\e[0m\e[0m\n\e[31m75\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800052
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(' ').map(music_string => {\n            val note\
    \ = music_string.charAt(0)\n            val beats = music_string.substring(1).split('|').map(music_string\
    \ => {\n                val beat = music_string.charAt(0)\n                val\
    \ rest = music_string.substring(1).split('o').map(music_string => {\n        \
    \            val rest = music_string.charAt(0)\n                    val rest =\
    \ music_string.substring(1).split('|').map(music_string => {\n               \
    \         val rest = music_string.charAt(0)\n                        val rest\
    \ = music_string.substring(1).split('o').map(music_string => {\n             \
    \               val rest = music_string.charAt(0)\n                          \
    \  val rest = music_string.substring(1).split('|').map(music_string => {\n   \
    \                             val rest = music_string.charAt(0)\n            \
    \                    val rest = music_string.substring(1).split('o').map(music_string\
    \ => {\n                                    val rest = music_string.charAt(0)\n\
    \                                    val rest = music_string.substring(1).split('|').map(music_string\
    \ => {\n                                        val rest = music_string.charAt(0)\n\
    \                                        val rest = music_string.substring(1).split('o').map(music_string\
    \ => {\n                                            val rest = music_string.charAt(0)\n\
    \                                            val rest = music_string.substring(1).split('|').map(music_string\
    \ => {\n                                                val rest = music_string.charAt(0)\n\
    \                                                val rest = music_string.substring(1).split('o').map(music_string\
    \ => {\n                                                    val rest = music_string.charAt(0)\n\
    \                                                    val rest = music_string.substring(1).split('|').map(music_string\
    \ => {\n                                                        val rest = music_string.charAt(0)\n\
    \                                                        val rest = music_string.substring(1).split('o').map(music_string\
    \ => {\n                                                            val rest =\
    \ music_string.charAt(0)\n                                                   \
    \         val rest = music_string.substring(1).split('|').map(music_string =>\
    \ {\n                                                                val rest\
    \ = music_string.charAt(0)\n                                                 \
    \               val rest = music_string.substring(1).split('o').map(music_string\
    \ => {\n                                                                    val\
    \ rest = music_string.charAt(0)\n                                            \
    \                        val rest = music_string.substring(1).split('|').map(music_string\
    \ => {\n                                                                     \
    \   val rest = music_string.charAt(0)\n                                      \
    \                                  val rest = music_string.substring(1).split('o').map(music_string\
    \ => {\n                                                                     \
    \       val rest = music_string.charAt(0)\n                                  \
    \                                          val rest = music_string.substring(1).split('|').map(music_string\
    \ => {\n                                                                     \
    \           val rest = music_string.charAt(0)\n                              \
    \                                                  val rest = musi\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe4ir8tw7.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpe4ir8tw7.scala:61:0 ----------------------------\e[0m\e[0m\n\e[31m61\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe4ir8tw7.scala:50:84 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m                                                    \
    \                            \e[33mval\e[0m \e[36mrest\e[0m = musi\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mrest is already defined as\
    \ \e[33mvalue\e[0m \e[35mrest\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beats = music_string.substring(0,\
    \ 1)\n                beats.toLong\n            }).toList\n            note match\
    \ {\n                case \"o\" => beats.toLong\n                case \"o|\" =>\
    \ beats.toLong * 2\n                case \".|\" => beats.toLong\n            \
    \    case _ => throw new Exception(\"Invalid music string: \" + music_string)\n\
    \            }\n        }).toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbe6xowzl.scala:21:34 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mcase\e[0m \e[31m\"o\"\e[0m => beats.toLong\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue toLong is not a member of List[Long], but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbe6xowzl.scala:22:35\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                \e[33mcase\e\
    [0m \e[31m\"o|\"\e[0m => beats.toLong * \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m  \
    \                           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is\
    \ not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpbe6xowzl.scala:23:35 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mcase\e[0m \e[31m\".|\"\e[0m =>\
    \ beats.toLong\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toLong is not a member of List[Long], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- Error: /tmp/tmpbe6xo"
  stdout: ''
  timestamp: 1659800057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(' ').map(music_string => {\n            val notes\
    \ = music_string.split('|').map(music_string => {\n                val note =\
    \ music_string.split('o').head\n                val beats = music_string.split('o|').head.split('.').head.toInt\n\
    \                beats\n            }).toList\n            notes.sum\n       \
    \ }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptcz3q9fm.scala:17:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mbeats\e[0m = music_string.split(\e\
    [31m'o\e[0m|').head.split(\e[31m'.'\e[0m).head.toInt\n\e[31m\e[31m   |\e[0m  \
    \                                             ^\e[0m\n\e[31m   |\e[0msymbol literal\
    \ 'o is no longer supported,\n\e[31m   |\e[0muse a string literal \"o\" or an\
    \ application Symbol(\"o\") instead,\n\e[31m   |\e[0mor enclose in braces '{o}\
    \ if you want a quoted expression.\n\e[31m   |\e[0mFor now, you can also `import\
    \ language.deprecated.symbolLiterals` to accept\n\e[31m   |\e[0mthe idiom, but\
    \ this possibility might no longer be available in the future.\n\e[31m\e[31m--\
    \ Error: /tmp/tmptcz3q9fm.scala:17:50 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mbeats\e[0m = music_string.split(\e\
    [31m'o\e[0m|').head.split(\e[31m'.'\e[0m).head.toInt\n\e[31m\e[31m   |\e[0m  \
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                                         unclosed character literal\n\e[31m\e\
    [31m-- Error: /tmp/tmptcz3q9fm.scala:20:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            notes.sum\n\e[31m\e[31m   |\e[0m        \
    \             ^\e[0m\n\e[31m   |\e[0m                  No implicit Ordering defined\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                  where:    B is a type\
    \ variable with constraint >: Unit\n\e[31m   |\e[0m                  .\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_notes = music_string.split('|')\n        val music_notes_length\
    \ = music_notes.length\n        val music_notes_beats = music_notes.map(_.length.toLong)\n\
    \        val music_notes_beats_length = music_notes_beats.length\n        val\
    \ music_notes_beats_sum = music_notes_beats.sum\n        val music_notes_beats_sum_length\
    \ = music_notes_beats_sum.length\n        val music_notes_beats_sum_length = music_notes_beats_sum_length.toLong\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toInt\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toInt\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toInt\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toInt\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toInt\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toInt\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toInt\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toInt\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toInt\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toInt\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toInt\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toInt\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toInt\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toInt\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toInt\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toInt\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toInt\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toInt\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4au92g0r.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_beats_sum_length\e\
    [0m = music_notes_beats_sum_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_beats_sum_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_notes_beats_sum_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4au92g0r.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_beats_sum_length\e\
    [0m = music_notes_beats_sum_length.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_beats_sum_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_notes_beats_sum_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4au92g0r.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_beats_sum_length\e\
    [0m = music_notes_beats_sum_length.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_beats_sum_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_notes_beats_sum_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4au92g0r.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_beats_sum_length\e\
    [0m = music_notes_beats_sum_length.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_beats_sum_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_notes_beats_sum_len"
  stdout: ''
  timestamp: 1659800058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \").map(_.toInt).toList\n\
    \        val notes = music_list.sliding(2).map(_.toInt)\n        val beats = music_list.sliding(3).map(_.toInt)\n\
    \        val notes_beats = notes.zip(beats)\n        val notes_beats_sum = notes_beats.map(x\
    \ => x._1 + x._2)\n        val notes_beats_count = notes_beats_sum.distinct\n\
    \        val notes_beats_count_sorted = notes_beats_count.sortBy(x => x)\n   \
    \     val notes_beats_count_sorted_count = notes_beats_count_sorted.map(x => x._1)\n\
    \        val notes_beats_count_sorted_count_sorted = notes_beats_count_sorted_count.sortBy(x\
    \ => x)\n        val notes_beats_count_sorted_count_sorted_count = notes_beats_count_sorted_count_sorted.map(x\
    \ => x._1)\n        val notes_beats_count_sorted_count_sorted_count_sorted = notes_beats_count_sorted_count_sorted_count.sortBy(x\
    \ => x)\n        val notes_beats_count_sorted_count_sorted_count_sorted_count\
    \ = notes_beats_count_sorted_count_sorted_count_sorted.map(x => x._1)\n      \
    \  val notes_beats_count_sorted_count_sorted_count_sorted_count_sorted = notes_beats_count_sorted_count_sorted_count_sorted_count.sortBy(x\
    \ => x)\n        val notes_beats_count_sorted_count_sorted_count_sorted_count_sorted_count\
    \ = notes_beats_count_sorted_count_sorted_count_sorted_count_sorted.map(x => x._1)\n\
    \        val notes_beats_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted\
    \ = notes_beats_count_sorted_count_sorted_count_sorted_count_sorted_count.sortBy(x\
    \ => x)\n        val notes_beats_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted\
    \ = notes_beats_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted.map(x\
    \ => x._1)\n        val notes_beats_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted_count\
    \ = notes_beats_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted.map(x\
    \ => x._1)\n        val notes_beats_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted\
    \ = notes_beats_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted.map(x\
    \ => x._1)\n        val notes_beats_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted_count\
    \ = notes_beats_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdggcfqqd.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted\e\
    [0m = notes_beats_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted.map(\e\
    [36mx\e[0m => x._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  notes_beats_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpdggcfqqd.scala:15:48 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnotes\e[0m = music_list.sliding(\e\
    [31m2\e[0m).map(_.toInt)\n\e[31m\e[31m   |\e[0m                              \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toInt is not a member of List[Int],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpdggcfqqd.scala:16:48 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbeats\e[0m = music_list.sliding(\e\
    [31m3\e[0m).map(_.toInt)\n\e[31m\e[31m   |\e[0m                              \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toInt is not a member of List[Int],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards"
  stdout: ''
  timestamp: 1659800061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split('|')\n        val notes_length = notes.length\n\
    \        val notes_array = notes.map(_.toInt).toArray\n        val notes_length\
    \ = notes.length\n        val notes_array = notes.map(_.toInt).toArray\n     \
    \   val notes_length = notes.length\n        val notes_array = notes.map(_.toInt).toArray\n\
    \        val notes_length = notes.length\n        val notes_array = notes.map(_.toInt).toArray\n\
    \        val notes_length = notes.length\n        val notes_array = notes.map(_.toInt).toArray\n\
    \        val notes_length = notes.length\n        val notes_array = notes.map(_.toInt).toArray\n\
    \        val notes_length = notes.length\n        val notes_array = notes.map(_.toInt).toArray\n\
    \        val notes_length = notes.length\n        val notes_array = notes.map(_.toInt).toArray\n\
    \        val notes_length = notes.length\n        val notes_array = notes.map(_.toInt).toArray\n\
    \        val notes_length = notes.length\n        val notes_array = notes.map(_.toInt).toArray\n\
    \        val notes_length = notes.length\n        val notes_array = notes.map(_.toInt).toArray\n\
    \        val notes_length = notes.length\n        val notes_array = notes.map(_.toInt).toArray\n\
    \        val notes_length = notes.length\n        val notes_array = notes.map(_.toInt).toArray\n\
    \        val notes_length = notes.length\n        val notes_array = notes.map(_.toInt).toArray\n\
    \        val notes_length = notes.length\n        val notes_array = notes.map(_.toInt).toArray\n\
    \        val notes_length = notes.length\n        val notes_array = notes.map(_.toInt).toArray\n\
    \        val notes_length = notes.length\n        val notes_array = notes.map(_.toInt).toArray\n\
    \        val notes_length = notes.length\n        val notes_array = notes.map(_.toInt).toArray\n\
    \        val notes_length = notes.length\n        val notes_array = notes.map(_.toInt).toArray\n\
    \        val notes_length = notes.length\n        val notes_array = notes.map(_.toInt).toArray\n\
    \        val notes_length = notes.length\n        val notes_array = notes.map(_.toInt).toArray\n\
    \        val notes_length = notes.length\n        val notes_array = notes.map(_.toInt).toArray\n\
    \        val notes_length = notes.length\n        val notes_array = notes.map(_.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj1v90j2v.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpj1v90j2v.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mnotes_length\e[0m = notes.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnotes_length\
    \ is already defined as \e[33mvalue\e[0m \e[35mnotes_length\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj1v90j2v.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotes_array\e[0m = notes.map(_.toInt).toArray\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnotes_array\
    \ is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj1v90j2v.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotes_length\e[0m = notes.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_length is already defined as \e[33mvalue\e[0m \e[35mnotes_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpj1v90j2v.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes.map(_.toInt).toArray\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpj1v90j2v.scala:21"
  stdout: ''
  timestamp: 1659800059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.substring(0,\
    \ 1)\n                val rest = music_string.substring(1)\n                val\
    \ beats = rest.split(\"o\").map(music_string => {\n                    val beat\
    \ = music_string.substring(0, 1)\n                    val rest = music_string.substring(1)\n\
    \                    val beats = rest.split(\"|\").map(music_string => {\n   \
    \                     val beat = music_string.substring(0, 1)\n              \
    \          val rest = music_string.substring(1)\n                        val beats\
    \ = rest.split(\"o\").map(music_string => {\n                            val beat\
    \ = music_string.substring(0, 1)\n                            val rest = music_string.substring(1)\n\
    \                            val beats = rest.split(\"|\").map(music_string =>\
    \ {\n                                val beat = music_string.substring(0, 1)\n\
    \                                val rest = music_string.substring(1)\n      \
    \                          val beats = rest.split(\"o\").map(music_string => {\n\
    \                                    val beat = music_string.substring(0, 1)\n\
    \                                    val rest = music_string.substring(1)\n  \
    \                                  val beats = rest.split(\"|\").map(music_string\
    \ => {\n                                        val beat = music_string.substring(0,\
    \ 1)\n                                        val rest = music_string.substring(1)\n\
    \                                        val beats = rest.split(\"o\").map(music_string\
    \ => {\n                                            val beat = music_string.substring(0,\
    \ 1)\n                                            val rest = music_string.substring(1)\n\
    \                                            val beats = rest.split(\"|\").map(music_string\
    \ => {\n                                                val beat = music_string.substring(0,\
    \ 1)\n                                                val rest = music_string.substring(1)\n\
    \                                                val beats = rest.split(\"o\"\
    ).map(music_string => {\n                                                    val\
    \ beat = music_string.substring(0, 1)\n                                      \
    \              val rest = music_string.substring(1)\n                        \
    \                            val beats = rest.split(\"|\").map(music_string =>\
    \ {\n                                                        val beat = music_string.substring(0,\
    \ 1)\n                                                        val rest = music_string.substring(1)\n\
    \                                                        val beats = rest.split(\"\
    o\").map(music_string => {\n                                                 \
    \           val beat = music_string.substring(0, 1)\n                        \
    \                                    val rest = music_string.substring(1)\n  \
    \                                                          val beats = rest.split(\"\
    |\").map(music_string => {\n                                                 \
    \               val beat = music_string.substring(0, 1)\n                    \
    \                                            val rest = music_string.substring(1)\n\
    \                                                                val beats = rest.split(\"\
    o\").map(music_string => {\n                                                 \
    \                   val beat = music_string.substring(0, 1)\n                \
    \                                                    val rest = music_string.substring(1)\n\
    \                                                                    val beats\
    \ = rest.split(\"\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpa9ls87o5.scala:58:91 -----------------------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m                                                    \
    \                \e[33mval\e[0m \e[36mbeats\e[0m = rest.split(\"\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \                    unclosed string literal\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpa9ls87o5.scala:60:4 ----------------------------\e[0m\e[0m\n\e[31m60\
    \ |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e\
    [35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')'\
    \ expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa9ls87o5.scala:69:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n3 errors found\n"
  stdout: ''
  timestamp: 1659799995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.charAt(0)\n            val rest = music_string.substring(1).trim\n\
    \            val beats = rest.split(\"|\").map(rest => {\n                val\
    \ beat = rest.charAt(0)\n                val rest = rest.substring(1).trim\n \
    \               val rests = rest.split(\"o\").map(rest => {\n                \
    \    val rest = rest.charAt(0)\n                    val rest = rest.substring(1).trim\n\
    \                    val rests = rest.split(\"|\").map(rest => {\n           \
    \             val rest = rest.charAt(0)\n                        val rest = rest.substring(1).trim\n\
    \                        val rests = rest.split(\"o\").map(rest => {\n       \
    \                     val rest = rest.charAt(0)\n                            val\
    \ rest = rest.substring(1).trim\n                            val rests = rest.split(\"\
    |\").map(rest => {\n                                val rest = rest.charAt(0)\n\
    \                                val rest = rest.substring(1).trim\n         \
    \                       val rests = rest.split(\"o\").map(rest => {\n        \
    \                            val rest = rest.charAt(0)\n                     \
    \               val rest = rest.substring(1).trim\n                          \
    \          val rests = rest.split(\"|\").map(rest => {\n                     \
    \                   val rest = rest.charAt(0)\n                              \
    \          val rest = rest.substring(1).trim\n                               \
    \         val rests = rest.split(\"o\").map(rest => {\n                      \
    \                      val rest = rest.charAt(0)\n                           \
    \                 val rest = rest.substring(1).trim\n                        \
    \                    val rests = rest.split(\"|\").map(rest => {\n           \
    \                                     val rest = rest.charAt(0)\n            \
    \                                    val rest = rest.substring(1).trim\n     \
    \                                           val rests = rest.split(\"o\").map(rest\
    \ => {\n                                                    val rest = rest.charAt(0)\n\
    \                                                    val rest = rest.substring(1).trim\n\
    \                                                    val rests = rest.split(\"\
    |\").map(rest => {\n                                                        val\
    \ rest = rest.charAt(0)\n                                                    \
    \    val rest = rest.substring(1).trim\n                                     \
    \                   val rests = rest.split(\"o\").map(rest => {\n            \
    \                                                val rest = rest.charAt(0)\n \
    \                                                           val rest = rest.substring(1).trim\n\
    \                                                            val rests = rest.split(\"\
    |\").map(rest => {\n                                                         \
    \       val rest = rest.charAt(0)\n                                          \
    \                      val rest = rest.substring(1).trim\n                   \
    \                                             val rests = rest.split(\"o\").map(rest\
    \ => {\n                                                                    val\
    \ rest = rest.charAt(0)\n                                                    \
    \                val rest = rest.substring(1).trim\n                         \
    \                                           val rests = rest.split(\"|\").map(rest\
    \ => {\n                                                                     \
    \   val rest = rest.charAt(0)\n                                              \
    \                          val rest = rest.substring(1).trim\n               \
    \                                                         val rests = rest.split(\"\
    o\").map(rest => {\n                                                         \
    \                   val rest = rest.charAt(0)\n                              \
    \                                              val rest = rest.substring(1).trim\n\
    \                                                                            val\
    \ rests = rest.\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmporu9ehzm.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmporu9ehzm.scala:67:4 ----------------------------\e[0m\e[0m\n\e[31m67\
    \ |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e\
    [35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')'\
    \ expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmporu9ehzm.scala:76:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m76 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n3 errors found\n"
  stdout: ''
  timestamp: 1659800053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split(\" \").map(_.toUpperCase())\n    \
    \    val notes_count = notes.count\n        val beats_count = notes_count / 4\n\
    \        val notes_last_beat = notes_count % 4\n        val notes_last_beat =\
    \ if (notes_last_beat == 0) beats_count else beats_count - 1\n        val notes_last_beats\
    \ = notes_last_beat * 4\n        val notes_last_beats_count = notes_last_beats\
    \ * 4\n        val notes_last_beats_count_2 = notes_last_beats_count * 4\n   \
    \     val notes_last_beats_count_3 = notes_last_beats_count_2 * 4\n        val\
    \ notes_last_beats_count_4 = notes_last_beats_count_3 * 4\n        val notes_last_beats_count_5\
    \ = notes_last_beats_count_4 * 4\n        val notes_last_beats_count_6 = notes_last_beats_count_5\
    \ * 4\n        val notes_last_beats_count_7 = notes_last_beats_count_6 * 4\n \
    \       val notes_last_beats_count_8 = notes_last_beats_count_7 * 4\n        val\
    \ notes_last_beats_count_9 = notes_last_beats_count_8 * 4\n        val notes_last_beats_count_10\
    \ = notes_last_beats_count_9 * 4\n        val notes_last_beats_count_11 = notes_last_beats_count_10\
    \ * 4\n        val notes_last_beats_count_12 = notes_last_beats_count_11 * 4\n\
    \        val notes_last_beats_count_13 = notes_last_beats_count_12 * 4\n     \
    \   val notes_last_beats_count_14 = notes_last_beats_count_13 * 4\n        val\
    \ notes_last_beats_count_15 = notes_last_beats_count_14 * 4\n        val notes_last_beats_count_16\
    \ = notes_last_beats_count_15 * 4\n        val notes_last_beats_count_17 = notes_last_beats_count_16\
    \ * 4\n        val notes_last_beats_count_18 = notes_last_beats_count_17 * 4\n\
    \        val notes_last_beats_count_19 = notes_last_beats_count_18 * 4\n     \
    \   val notes_last_beats_count_20 = notes_last_beats_count_19 * 4\n        val\
    \ notes_last_beats_count_21 = notes_last_beats_count_20 * 4\n        val notes_last_beats_count_22\
    \ = notes_last_beats_count_21 * 4\n        val notes_last_beats_count_\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwdlr4jo3.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwdlr4jo3.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotes_last_beat\e[0m = \e[33mif\e[0m (notes_last_beat == \e[31m0\e[0m)\
    \ beats_count \e[33melse\e[0m beats_count - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_last_beat is already defined as \e[33mvalue\e[0m \e\
    [35mnotes_last_beat\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpwdlr4jo3.scala:16:38 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbeats_count\e[0m = notes_count\
    \ / \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue / is not a member of (String => Boolean) => Int, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwdlr4jo3.scala:17:42 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnotes_last_beat\e[0m = notes_count\
    \ % \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue % is not a member of (String => Boolean) => Int, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mThe following import might make progress towards fixing the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwdlr4jo3.scala:43:5\
    \ ---------------------\e[0m\e[0m\n"
  stdout: ''
  timestamp: 1659800059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \").map(_.toUpperCase()).filter(_.nonEmpty)\n\
    \        val notes = music_list.map(music_note => music_note.split(\"|\").map(_.toUpperCase()).filter(_.nonEmpty))\n\
    \        val notes_count = notes.map(music_note => music_note.size)\n        val\
    \ notes_count_sum = notes_count.sum\n        val notes_count_average = notes_count_sum\
    \ / notes_count.size\n        val notes_count_average_list = notes_count.map(x\
    \ => x / notes_count_average).toList\n        notes_count_average_list\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu0bag4m3.scala:20:8\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m        notes_count_average_list\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    (notes_count_average_list : List[Int])\n\e[31m   |\e[0m     \
    \   Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \").map(music_char => music_char.toInt)\n\
    \        val music_list_size = music_list.size\n        val music_list_length\
    \ = music_list_size / 4\n        val music_list_remainder = music_list_size %\
    \ 4\n        val music_list_last_beat = music_list_length - music_list_remainder\n\
    \        val music_list_last_beat_length = music_list_last_beat * 4\n        val\
    \ music_list_last_beat_length = music_list_last_beat_length.toLong\n        val\
    \ music_list_last_beat_length = music_list_last_beat_length.toInt\n        val\
    \ music_list_last_beat_length = music_list_last_beat_length.toInt\n        val\
    \ music_list_last_beat_length = music_list_last_beat_length.toInt\n        val\
    \ music_list_last_beat_length = music_list_last_beat_length.toInt\n        val\
    \ music_list_last_beat_length = music_list_last_beat_length.toInt\n        val\
    \ music_list_last_beat_length = music_list_last_beat_length.toInt\n        val\
    \ music_list_last_beat_length = music_list_last_beat_length.toInt\n        val\
    \ music_list_last_beat_length = music_list_last_beat_length.toInt\n        val\
    \ music_list_last_beat_length = music_list_last_beat_length.toInt\n        val\
    \ music_list_last_beat_length = music_list_last_beat_length.toInt\n        val\
    \ music_list_last_beat_length = music_list_last_beat_length.toInt\n        val\
    \ music_list_last_beat_length = music_list_last_beat_length.toInt\n        val\
    \ music_list_last_beat_length = music_list_last_beat_length.toInt\n        val\
    \ music_list_last_beat_length = music_list_last_beat_length.toInt\n        val\
    \ music_list_last_beat_length = music_list_last_beat_length.toInt\n        val\
    \ music_list_last_beat_length = music_list_last_beat_length.toInt\n        val\
    \ music_list_last_beat_length = music_list_last_beat_length.toInt\n        val\
    \ music_list_last_beat_length = music_list_last_beat_length.toInt\n        val\
    \ music_list_last_beat_length = music_list_last_beat_length.toInt\n        val\
    \ music_list_last_beat_length = music_list_last_beat_length.toInt\n        val\
    \ music_list_last_beat_length = music_list_last_beat_length.toInt\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmrzmlbuc.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_last_beat_length\e\
    [0m = music_list_last_beat_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_last_beat_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_last_beat_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmrzmlbuc.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_last_beat_length\e\
    [0m = music_list_last_beat_length.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_last_beat_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_last_beat_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmrzmlbuc.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_last_beat_length\e\
    [0m = music_list_last_beat_length.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_last_beat_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_last_beat_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmrzmlbuc.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_last_beat_length\e\
    [0m = music_list_last_beat_length.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_last_beat_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_last_beat_length\e[0m\n\e[31m   |\e[0m\n\e["
  stdout: ''
  timestamp: 1659800057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split('|')\n        val music_list_size\
    \ = music_list.size\n        val music_list_size_2 = music_list_size / 2\n   \
    \     val music_list_size_3 = music_list_size_2 / 2\n        val music_list_size_4\
    \ = music_list_size_3 / 2\n        val music_list_size_5 = music_list_size_4 /\
    \ 2\n        val music_list_size_6 = music_list_size_5 / 2\n        val music_list_size_7\
    \ = music_list_size_6 / 2\n        val music_list_size_8 = music_list_size_7 /\
    \ 2\n        val music_list_size_9 = music_list_size_8 / 2\n        val music_list_size_10\
    \ = music_list_size_9 / 2\n        val music_list_size_11 = music_list_size_10\
    \ / 2\n        val music_list_size_12 = music_list_size_11 / 2\n        val music_list_size_13\
    \ = music_list_size_12 / 2\n        val music_list_size_14 = music_list_size_13\
    \ / 2\n        val music_list_size_15 = music_list_size_14 / 2\n        val music_list_size_16\
    \ = music_list_size_15 / 2\n        val music_list_size_17 = music_list_size_16\
    \ / 2\n        val music_list_size_18 = music_list_size_17 / 2\n        val music_list_size_19\
    \ = music_list_size_18 / 2\n        val music_list_size_20 = music_list_size_19\
    \ / 2\n        val music_list_size_21 = music_list_size_20 / 2\n        val music_list_size_22\
    \ = music_list_size_21 / 2\n        val music_list_size_23 = music_list_size_22\
    \ / 2\n        val music_list_size_24 = music_list_size_23 / 2\n        val music_list_size_25\
    \ = music_list_size_24 / 2\n        val music_list_size_26 = music_list_size_25\
    \ / 2\n        val music_list_size_27 = music_list_size_26 / 2\n        val music_list_size_28\
    \ = music_list_size_27 / 2\n        val music_list_size_29 = music_list_size_28\
    \ / 2\n        val music_list_size_30 = music_list_size_29 / 2\n        val music_list_size_31\
    \ = music_list_size_30 / 2\n        val music_list_size_32 = music_list_size_31\
    \ / 2\n        val music_list_size_33\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0_gync9n.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0_gync9n.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_length\
    \ = notes.length\n        val beats_length = notes_length / 4\n        val beats\
    \ = notes.grouped(beats_length).toList\n        val notes_length = beats.length\n\
    \        val notes_beats = beats.grouped(notes_length).toList\n        val notes_beats_length\
    \ = notes_beats.length\n        val notes_beats_length = notes_beats_length /\
    \ 4\n        val notes_beats_length = notes_beats_length / 4\n        val notes_beats_length\
    \ = notes_beats_length / 4\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length / 4\n        val notes_beats_length\
    \ = notes_beats_length / 4\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length / 4\n        val notes_beats_length\
    \ = notes_beats_length / 4\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length / 4\n        val notes_beats_length\
    \ = notes_beats_length / 4\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length / 4\n        val notes_beats_length\
    \ = notes_beats_length / 4\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length / 4\n        val notes_beats_length\
    \ = notes_beats_length / 4\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length / 4\n        val notes_beats_length\
    \ = notes_beats_length / 4\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length / 4\n        val notes_beats_length\
    \ = notes_beats_length / 4\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length / 4\n        val notes_beats_length\
    \ = notes_beats_length / 4\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_z6v7upo.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnotes_length\e[0m = beats.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mnotes_length is already defined as \e[33mvalue\e[0m \e[35mnotes_length\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp_z6v7upo.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m = notes_beats_length\
    \ / \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_z6v7upo.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length / \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_z6v7upo.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length / \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_z6v7upo.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats"
  stdout: ''
  timestamp: 1659800060
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split(\" \").map(_.toChar).toList\n    \
    \    val notes_count = notes.count(_ == 'o')\n        val notes_count_half = notes.count(_\
    \ == 'o|')\n        val notes_count_quarter = notes.count(_ == '.|')\n       \
    \ val notes_count_whole_note = notes_count + notes_count_half + notes_count_quarter\n\
    \        val notes_count_whole_note = notes_count_whole_note / 4\n        val\
    \ notes_count_whole_note = notes_count_whole_note * 4\n        val notes_count_whole_note\
    \ = notes_count_whole_note / 2\n        val notes_count_whole_note = notes_count_whole_note\
    \ * 2\n        val notes_count_whole_note = notes_count_whole_note + 1\n     \
    \   val notes_count_whole_note = notes_count_whole_note / 4\n        val notes_count_whole_note\
    \ = notes_count_whole_note * 4\n        val notes_count_whole_note = notes_count_whole_note\
    \ / 2\n        val notes_count_whole_note = notes_count_whole_note * 2\n     \
    \   val notes_count_whole_note = notes_count_whole_note + 1\n        val notes_count_whole_note\
    \ = notes_count_whole_note / 4\n        val notes_count_whole_note = notes_count_whole_note\
    \ * 4\n        val notes_count_whole_note = notes_count_whole_note / 2\n     \
    \   val notes_count_whole_note = notes_count_whole_note * 2\n        val notes_count_whole_note\
    \ = notes_count_whole_note + 1\n        val notes_count_whole_note = notes_count_whole_note\
    \ / 4\n        val notes_count_whole_note = notes_count_whole_note * 4\n     \
    \   val notes_count_whole_note = notes_count_whole_note / 2\n        val notes_count_whole_note\
    \ = notes_count_whole_note * 2\n        val notes_count_whole_note = notes_count_whole_note\
    \ + 1\n        val notes_count_whole_note = notes_count_whole_note / 4\n     \
    \   val notes_count_whole_note = notes_count_whole_note * 4\n        val notes_count_whole_note\
    \ = notes_count_whole_note / 2\n        val notes_count_whole_note = notes_count_whole_note\
    \ * 2\n\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpuf54rdw1.scala:16:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnotes_count_half\e[0m =\
    \ notes.count(_ == \e[31m'o\e[0m|')\n\e[31m\e[31m   |\e[0m                   \
    \                             ^\e[0m\n\e[31m   |\e[0msymbol literal 'o is no longer\
    \ supported,\n\e[31m   |\e[0muse a string literal \"o\" or an application Symbol(\"\
    o\") instead,\n\e[31m   |\e[0mor enclose in braces '{o} if you want a quoted expression.\n\
    \e[31m   |\e[0mFor now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0mthe idiom, but this possibility might no longer be\
    \ available in the future.\n\e[31m\e[31m-- Error: /tmp/tmpuf54rdw1.scala:16:51\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m16 |\e[0m       \
    \ \e[33mval\e[0m \e[36mnotes_count_half\e[0m = notes.count(_ == \e[31m'o\e[0m|')\n\
    \e[31m\e[31m   |\e[0m                                                   ^\e[0m\n\
    \e[31m   |\e[0m                                              unclosed character\
    \ literal\n\e[31m\e[31m-- Error: /tmp/tmpuf54rdw1.scala:17:51 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnotes_count_quarter\e[0m\
    \ = notes.count(_ == '.|')\n\e[31m\e[31m   |\e[0m                            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \                unclosed character literal\n\e[31m\e[31m-- Error: /tmp/tmpuf54rdw1.scala:17:54\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \ \e[33mval\e[0m \e[36mnotes_count_quarter\e[0m = notes.count(_ == '.|')\n\e[31m\e\
    [31m   |\e[0m                                                      ^\e[0m\n\e\
    [31m   |\e[0m                                              unclosed character\
    \ literal\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuf54rdw1.scala:14:50\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mnotes\e[0m = music_string.split(\e[31m\" \"\e[0m).map(_.toChar).toList\n\e\
    [31m\e[31m   |\e[0m                                                ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value toChar is no"
  stdout: ''
  timestamp: 1659800060
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \")\n        val music_list_size\
    \ = music_list.size\n        val music_list_size_2 = music_list_size / 2\n   \
    \     val music_list_size_3 = music_list_size_2 / 2\n        val music_list_size_4\
    \ = music_list_size_3 / 2\n        val music_list_size_5 = music_list_size_4 /\
    \ 2\n        val music_list_size_6 = music_list_size_5 / 2\n        val music_list_size_7\
    \ = music_list_size_6 / 2\n        val music_list_size_8 = music_list_list_size_7\
    \ / 2\n        val music_list_size_9 = music_list_size_8 / 2\n        val music_list_size_10\
    \ = music_list_size_9 / 2\n        val music_list_size_11 = music_list_size_10\
    \ / 2\n        val music_list_size_12 = music_list_size_11 / 2\n        val music_list_size_13\
    \ = music_list_size_12 / 2\n        val music_list_size_14 = music_list_size_13\
    \ / 2\n        val music_list_size_15 = music_list_size_14 / 2\n        val music_list_size_16\
    \ = music_list_size_15 / 2\n        val music_list_size_17 = music_list_size_16\
    \ / 2\n        val music_list_size_18 = music_list_size_17 / 2\n        val music_list_size_19\
    \ = music_list_size_18 / 2\n        val music_list_size_20 = music_list_size_19\
    \ / 2\n        val music_list_size_21 = music_list_size_20 / 2\n        val music_list_size_22\
    \ = music_list_size_21 / 2\n        val music_list_size_23 = music_list_size_22\
    \ / 2\n        val music_list_size_24 = music_list_size_23 / 2\n        val music_list_size_25\
    \ = music_list_size_24 / 2\n        val music_list_size_26 = music_list_size_25\
    \ / 2\n        val music_list_size_27 = music_list_size_26 / 2\n        val music_list_size_28\
    \ = music_list_size_27 / 2\n        val music_list_size_29 = music_list_size_28\
    \ / 2\n        val music_list_size_30 = music_list_size_29 / 2\n        val music_list_size_31\
    \ = music_list_size_30 / 2\n        val music_list_size_32 = music_list_size_31\
    \ / 2\n        val music_list_size_33 = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpg5ceu5i2.scala:47:32 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_33\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e\
    [0m                                expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg5ceu5i2.scala:22:32\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg5ceu5i2.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799997
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_count\
    \ = notes.length\n        val beats_count = notes_count / 4\n        val beats_array\
    \ = Array.ofDim[Long](beats_count)\n        var i = 0\n        while (i < beats_count)\
    \ {\n            beats_array(i) = notes_count - i\n            i += 1\n      \
    \  }\n        beats_array\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6v55j81l.scala:23:8\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m        beats_array\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (beats_array\
    \ : Array[Long])\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800060
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(' ').map(music_string => {\n            val note\
    \ = music_string.substring(0, 1)\n            val rest = music_string.substring(1)\n\
    \            val beats = rest.split('|').map(_.toInt).sum\n            beats\n\
    \        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsj0mw0t3.scala:19:11\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m' '\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m15 |\e[0m            \e\
    [33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e[0m, \e[31m1\e\
    [0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mrest\e[0m = music_string.substring(\e\
    [31m1\e[0m)\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m = rest.split(\e\
    [31m'|'\e[0m).map(_.toInt).sum\n\e[31m18 |\e[0m            beats\n\e[31m19 |\e\
    [0m        }).toList\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required: List[\e\
    [1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800060
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_length\
    \ = notes.length\n        val notes_beats = notes.map(x => x.split(\"o\")).map(x\
    \ => x.length)\n        val notes_beats_sum = notes_beats.sum\n        val notes_beats_average\
    \ = notes_beats_sum / notes_length\n        val notes_beats_average_list = notes_beats_average.toList\n\
    \        notes_beats_average_list.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbbu3a1e7.scala:19:59 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_average_list\e\
    [0m = notes_beats_average.toList\n\e[31m\e[31m   |\e[0m                      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toList\
    \ is not a member of Int - did you mean notes_beats_average.toInt?\n1 error found\n"
  stdout: ''
  timestamp: 1659800060
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(' ').map(music_string => {\n            val note\
    \ = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split('|').map(music_string\
    \ => {\n                val beat = music_string.substring(0, 1)\n            \
    \    val rest = music_string.substring(1)\n                val beats = rest.split('o').map(music_string\
    \ => {\n                    val beat = music_string.substring(0, 1)\n        \
    \            val rest = music_string.substring(1)\n                    val beats\
    \ = rest.split('|').map(music_string => {\n                        val beat =\
    \ music_string.substring(0, 1)\n                        val rest = music_string.substring(1)\n\
    \                        val beats = rest.split('|').map(music_string => {\n \
    \                           val beat = music_string.substring(0, 1)\n        \
    \                    val rest = music_string.substring(1)\n                  \
    \          val beats = rest.split('|').map(music_string => {\n               \
    \                 val beat = music_string.substring(0, 1)\n                  \
    \              val rest = music_string.substring(1)\n                        \
    \        val beats = rest.split('|').map(music_string => {\n                 \
    \                   val beat = music_string.substring(0, 1)\n                \
    \                    val rest = music_string.substring(1)\n                  \
    \                  val beats = rest.split('|').map(music_string => {\n       \
    \                                 val beat = music_string.substring(0, 1)\n  \
    \                                      val rest = music_string.substring(1)\n\
    \                                        val beats = rest.split('|').map(music_string\
    \ => {\n                                            val beat = music_string.substring(0,\
    \ 1)\n                                            val rest = music_string.substring(1)\n\
    \                                            val beats = rest.split('|').map(music_string\
    \ => {\n                                                val beat = music_string.substring(0,\
    \ 1)\n                                                val rest = music_string.substring(1)\n\
    \                                                val beats = rest.split('|').map(music_string\
    \ => {\n                                                    val beat = music_string.substring(0,\
    \ 1)\n                                                    val rest = music_string.substring(1)\n\
    \                                                    val beats = rest.split('|').map(music_string\
    \ => {\n                                                        val beat = music_string.substring(0,\
    \ 1)\n                                                        val rest = music_string.substring(1)\n\
    \                                                        val beats = rest.split('|').map(music_string\
    \ => {\n                                                            val beat =\
    \ music_string.substring(0, 1)\n                                             \
    \               val rest = music_string.substring(1)\n                       \
    \                                     val beats = rest.split('|').map(music_string\
    \ => {\n                                                                val beat\
    \ = music_string.substring(0, 1)\n                                           \
    \                     val rest = music_string.substring(1)\n                 \
    \                                               val beats = rest.split('|').map(music_string\
    \ => {\n                                                                    val\
    \ beat = music_string.substring(0, 1)\n                                      \
    \                              val rest = music_string.substring(1)\n        \
    \                                                            val beats = rest.split('\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpnewq150i.scala:58:91 -----------------------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m                                                    \
    \                \e[33mval\e[0m \e[36mbeats\e[0m = rest.split('\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \                 unclosed character literal\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpnewq150i.scala:60:4 ----------------------------\e[0m\e[0m\n\e[31m60\
    \ |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e\
    [35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')'\
    \ expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnewq150i.scala:69:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n3 errors found\n"
  stdout: ''
  timestamp: 1659800059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \")\n        val music_list_size\
    \ = music_list.size\n        val music_list_size_2 = music_list_size / 2\n   \
    \     val music_list_size_3 = music_list_size_2 / 2\n        val music_list_size_4\
    \ = music_list_size_3 / 2\n        val music_list_size_5 = music_list_size_4 /\
    \ 2\n        val music_list_size_6 = music_list_size_5 / 2\n        val music_list_size_7\
    \ = music_list_size_6 / 2\n        val music_list_size_8 = music_list_list_size_7\
    \ / 2\n        val music_list_size_9 = music_list_size_8 / 2\n        val music_list_size_10\
    \ = music_list_size_9 / 2\n        val music_list_size_11 = music_list_size_10\
    \ / 2\n        val music_list_size_12 = music_list_size_11 / 2\n        val music_list_size_13\
    \ = music_list_size_12 / 2\n        val music_list_size_14 = music_list_size_13\
    \ / 2\n        val music_list_size_15 = music_list_size_14 / 2\n        val music_list_size_16\
    \ = music_list_size_15 / 2\n        val music_list_size_17 = music_list_size_16\
    \ / 2\n        val music_list_size_18 = music_list_size_17 / 2\n        val music_list_size_19\
    \ = music_list_size_18 / 2\n        val music_list_size_20 = music_list_size_19\
    \ / 2\n        val music_list_size_21 = music_list_size_20 / 2\n        val music_list_size_22\
    \ = music_list_size_21 / 2\n        val music_list_size_23 = music_list_size_22\
    \ / 2\n        val music_list_size_24 = music_list_size_23 / 2\n        val music_list_size_25\
    \ = music_list_size_24 / 2\n        val music_list_size_26 = music_list_size_25\
    \ / 2\n        val music_list_size_27 = music_list_size_26 / 2\n        val music_list_size_28\
    \ = music_list_size_27 / 2\n        val music_list_size_29 = music_list_size_28\
    \ / 2\n        val music_list_size_30 = music_list_size_29 / 2\n        val music_list_size_31\
    \ = music_list_size_30 / 2\n        val music_list_size_32 = music_list_size_31\
    \ / 2\n        val music_list_size_33 = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpg5ceu5i2.scala:47:32 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_33\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e\
    [0m                                expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg5ceu5i2.scala:22:32\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg5ceu5i2.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799997
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.substring(0, 1)\n            val rest = music_string.substring(1).trim\n\
    \            val beats = rest.split(\"|\").map(_.toInt).sum\n            val whole_note\
    \ = if (note == \"o\") 4 else 2\n            val half_note = if (note == \"o\"\
    ) 2 else 1\n            val quater_note = if (note == \".\") 1 else 0\n      \
    \      beats * whole_note + beats * half_note + beats * quater_note\n        }).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjip180tu.scala:22:11\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m15 |\e[0m            \e\
    [33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e[0m, \e[31m1\e\
    [0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mrest\e[0m = music_string.substring(\e\
    [31m1\e[0m).trim\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m =\
    \ rest.split(\e[31m\"|\"\e[0m).map(_.toInt).sum\n\e[31m18 |\e[0m            \e\
    [33mval\e[0m \e[36mwhole_note\e[0m = \e[33mif\e[0m (note == \e[31m\"o\"\e[0m)\
    \ \e[31m4\e[0m \e[33melse\e[0m \e[31m2\e[0m\n\e[31m19 |\e[0m            \e[33mval\e\
    [0m \e[36mhalf_note\e[0m = \e[33mif\e[0m (note == \e[31m\"o\"\e[0m) \e[31m2\e\
    [0m \e[33melse\e[0m \e[31m1\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e\
    [36mquater_note\e[0m = \e[33mif\e[0m (note == \e[31m\".\"\e[0m) \e[31m1\e[0m \e\
    [33melse\e[0m \e[31m0\e[0m\n\e[31m21 |\e[0m            beats * whole_note + beats\
    \ * half_note + beats * quater_note\n\e[31m22 |\e[0m        }).toList\n\e[31m\e\
    [31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e\
    [0m]\n\e[31m   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800060
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\"\\\\|\").map(music_string => {\n           \
    \ val notes = music_string.split(\"o\").map(music_string => {\n              \
    \  val note = music_string.trim\n                val beats = note.length / 4\n\
    \                beats\n            }).toList\n            notes.sum\n       \
    \ }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnzcvn5o4.scala:21:11\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m15 |\e[0m        \
    \    \e[33mval\e[0m \e[36mnotes\e[0m = music_string.split(\e[31m\"o\"\e[0m).map(\e\
    [36mmusic_string\e[0m => {\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36mnote\e\
    [0m = music_string.trim\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mbeats\e\
    [0m = note.length / \e[31m4\e[0m\n\e[31m18 |\e[0m                beats\n\e[31m19\
    \ |\e[0m            }).toList\n\e[31m20 |\e[0m            notes.sum\n\e[31m21\
    \ |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m\
    \        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required:\
    \ List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_length\
    \ = notes.length\n        val notes_array = notes.map(_.toInt).toArray\n     \
    \   val notes_array = notes_array.map(x => if (x == 0) 1 else x)\n        val\
    \ notes_array = notes_array.map(x => if (x == 0) 0 else x)\n        val notes_array\
    \ = notes_array.map(x => if (x == 0) 0 else x)\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 0 else x)\n        val notes_array = notes_array.map(x => if\
    \ (x == 0) 0 else x)\n        val notes_array = notes_array.map(x => if (x ==\
    \ 0) 0 else x)\n        val notes_array = notes_array.map(x => if (x == 0) 0 else\
    \ x)\n        val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n \
    \       val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n       \
    \ val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n        val notes_array\
    \ = notes_array.map(x => if (x == 0) 0 else x)\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 0 else x)\n        val notes_array = notes_array.map(x => if\
    \ (x == 0) 0 else x)\n        val notes_array = notes_array.map(x => if (x ==\
    \ 0) 0 else x)\n        val notes_array = notes_array.map(x => if (x == 0) 0 else\
    \ x)\n        val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n \
    \       val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n       \
    \ val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n        val notes_array\
    \ = notes_array.map(x => if (x == 0) 0 else x)\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 0 else x)\n        val notes_array = notes_array.map(x => if\
    \ (x == 0) 0 else x)\n        val notes_array = notes_array.map(x => if (x ==\
    \ 0) 0 else x)\n        val notes_array = notes_array.map(x => if (x == 0) 0 else\
    \ x)\n        val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n \
    \       val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n       \
    \ val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n        val notes_array\
    \ = notes_array.map(x => if (x == 0) 0 else x)\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 0 else x)\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpt7ah8eg7.scala:45:11 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpt7ah8eg7.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x == \e[31m0\e[0m) \e[31m1\e[0m \e[33melse\e[0m x)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt7ah8eg7.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x == \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m x)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt7ah8eg7.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x == \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m x)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt7ah8eg7.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnote"
  stdout: ''
  timestamp: 1659800064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_length\
    \ = notes.length\n        val notes_array = notes.map(_.toInt)\n        val notes_length\
    \ = notes_array.length\n        val notes_array = notes_array.map(x => if (x ==\
    \ 0) 0 else x)\n        val notes_length = notes_array.length\n        val notes_array\
    \ = notes_array.map(x => if (x == 0) 0 else x)\n        val notes_length = notes_array.length\n\
    \        val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n      \
    \  val notes_length = notes_array.length\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 0 else x)\n        val notes_length = notes_array.length\n  \
    \      val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n        val\
    \ notes_length = notes_array.length\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 0 else x)\n        val notes_length = notes_array.length\n  \
    \      val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n        val\
    \ notes_length = notes_array.length\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 0 else x)\n        val notes_length = notes_array.length\n  \
    \      val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n        val\
    \ notes_length = notes_array.length\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 0 else x)\n        val notes_length = notes_array.length\n  \
    \      val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n        val\
    \ notes_length = notes_array.length\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 0 else x)\n        val notes_length = notes_array.length\n  \
    \      val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n        val\
    \ notes_length = notes_array.length\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 0 else x)\n        val notes_length = notes_array.length\n  \
    \      val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n        val\
    \ notes_length = notes_array.length\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 0 else x)\n        val notes_length = notes_array.length\n  \
    \      val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n        val\
    \ notes_length = notes_array.length\n        val notes_array = notes_array.map(x\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\"\
    )).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmox6_ecl.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmox6_ecl.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotes_length\e[0m = notes_array.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_length is already defined as \e[33mvalue\e[0m \e[35mnotes_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmox6_ecl.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x == \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m x)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmox6_ecl.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_length\e[0m = notes_array.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnotes_length is already defined as \e[33mvalue\e[0m \e[35mnotes_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmox6_ecl.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x == \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m x)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |"
  stdout: ''
  timestamp: 1659800018
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \")\n        val music_list_length\
    \ = music_list.length\n        val music_list_beats = music_list.toList.map(x\
    \ => x.toInt)\n        val music_list_beats_length = music_list_beats.length\n\
    \        val music_list_beats_last_beat = music_list_beats.last\n        val music_list_beats_last_beat_length\
    \ = music_list_beats_last_beat.length\n        val music_list_beats_last_beat_length\
    \ = music_list_beats_last_beat_length / 4\n        val music_list_beats_last_beat_length\
    \ = music_list_beats_last_beat_length * 4\n        val music_list_beats_last_beat_length\
    \ = music_list_beats_last_beat_length / 4\n        val music_list_beats_last_beat_length\
    \ = music_list_beats_last_beat_length * 4\n        val music_list_beats_last_beat_length\
    \ = music_list_beats_last_beat_length / 4\n        val music_list_beats_last_beat_length\
    \ = music_list_beats_last_beat_length * 4\n        val music_list_beats_last_beat_length\
    \ = music_list_beats_last_beat_length / 4\n        val music_list_beats_last_beat_length\
    \ = music_list_beats_last_beat_length * 4\n        val music_list_beats_last_beat_length\
    \ = music_list_beats_last_beat_length / 4\n        val music_list_beats_last_beat_length\
    \ = music_list_beats_last_beat_length * 4\n        val music_list_beats_last_beat_length\
    \ = music_list_beats_last_beat_length / 4\n        val music_list_beats_last_beat_length\
    \ = music_list_beats_last_beat_length * 4\n        val music_list_beats_last_beat_length\
    \ = music_list_beats_last_beat_length / 4\n        val music_list_beats_last_beat_length\
    \ = music_list_beats_last_beat_length * 4\n        val music_list_beats_last_beat_length\
    \ = music_list_beats_last_beat_length / 4\n        val music_list_beats_last_beat_length\
    \ = music_list_beats_last_beat_length * 4\n        val music_list_beats_last_beat_length\
    \ = music_list_beats_last_beat_length / 4\n        val music_list_beats_last_beat_length\
    \ = music_list_beats_last_beat_length * 4\n        val music_list_beat\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw1orkydg.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw1orkydg.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_beats_last_beat_length\e[0m = music_list_beats_last_beat_length\
    \ / \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_last_beat_length is already defined as \e\
    [33mvalue\e[0m \e[35mmusic_list_beats_last_beat_length\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw1orkydg.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_beats_last_beat_length\e[0m = music_list_beats_last_beat_length\
    \ * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_last_beat_length is already defined as \e\
    [33mvalue\e[0m \e[35mmusic_list_beats_last_beat_length\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw1orkydg.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_beats_last_beat_length\e[0m = music_list_beats_last_beat_length\
    \ / \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_last_beat_length is already defined as \e\
    [33mvalue\e[0m \e[35mmusic_list_beats_last_beat_length\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw1orkydg.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[3"
  stdout: ''
  timestamp: 1659800065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \")\n        val music_list_size\
    \ = music_list.size\n        val music_list_size_2 = music_list_size / 2\n   \
    \     val music_list_size_3 = music_list_size_2 / 2\n        val music_list_size_4\
    \ = music_list_size_3 / 2\n        val music_list_size_5 = music_list_size_4 /\
    \ 2\n        val music_list_size_6 = music_list_size_5 / 2\n        val music_list_size_7\
    \ = music_list_size_6 / 2\n        val music_list_size_8 = music_list_list_size_7\
    \ / 2\n        val music_list_size_9 = music_list_size_8 / 2\n        val music_list_size_10\
    \ = music_list_size_9 / 2\n        val music_list_size_11 = music_list_size_10\
    \ / 2\n        val music_list_size_12 = music_list_size_11 / 2\n        val music_list_size_13\
    \ = music_list_size_12 / 2\n        val music_list_size_14 = music_list_size_13\
    \ / 2\n        val music_list_size_15 = music_list_size_14 / 2\n        val music_list_size_16\
    \ = music_list_size_15 / 2\n        val music_list_size_17 = music_list_size_16\
    \ / 2\n        val music_list_size_18 = music_list_size_17 / 2\n        val music_list_size_19\
    \ = music_list_size_18 / 2\n        val music_list_size_20 = music_list_size_19\
    \ / 2\n        val music_list_size_21 = music_list_size_20 / 2\n        val music_list_size_22\
    \ = music_list_size_21 / 2\n        val music_list_size_23 = music_list_size_22\
    \ / 2\n        val music_list_size_24 = music_list_size_23 / 2\n        val music_list_size_25\
    \ = music_list_size_24 / 2\n        val music_list_size_26 = music_list_size_25\
    \ / 2\n        val music_list_size_27 = music_list_size_26 / 2\n        val music_list_size_28\
    \ = music_list_size_27 / 2\n        val music_list_size_29 = music_list_size_28\
    \ / 2\n        val music_list_size_30 = music_list_size_29 / 2\n        val music_list_size_31\
    \ = music_list_size_30 / 2\n        val music_list_size_32 = music_list_size_31\
    \ / 2\n        val music_list_size_33 = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpg5ceu5i2.scala:47:32 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_33\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e\
    [0m                                expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg5ceu5i2.scala:22:32\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg5ceu5i2.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799997
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_length\
    \ = music_list.length\n        val music_beats = music_list.map(music_string =>\
    \ {\n            val music_notes = music_string.split(\"o\")\n            val\
    \ music_note_length = music_notes.length\n            val music_note_beats = music_notes.map(music_note\
    \ => {\n                val music_note_length = music_note.length\n          \
    \      val music_note_beats = music_note.split(\"|\").map(music_note => {\n  \
    \                  val music_note_length = music_note.length\n               \
    \     val music_note_beats = music_note.split(\".\").map(music_note => {\n   \
    \                     val music_note_length = music_note.length\n            \
    \            val music_note_beats = music_note.split(\"o\").map(music_note =>\
    \ {\n                            val music_note_length = music_note.length\n \
    \                           val music_note_beats = music_note.split(\".\").map(music_note\
    \ => {\n                                val music_note_length = music_note.length\n\
    \                                val music_note_beats = music_note.split(\"o\"\
    ).map(music_note => {\n                                    val music_note_length\
    \ = music_note.length\n                                    val music_note_beats\
    \ = music_note.split(\".\").map(music_note => {\n                            \
    \            val music_note_length = music_note.length\n                     \
    \                   val music_note_beats = music_note.split(\"o\").map(music_note\
    \ => {\n                                            val music_note_length = music_note.length\n\
    \                                            val music_note_beats = music_note.split(\"\
    .\").map(music_note => {\n                                                val\
    \ music_note_length = music_note.length\n                                    \
    \            val music_note_beats = music_note.split(\"o\").map(music_note =>\
    \ {\n                                                    val music_note_length\
    \ = music_note.length\n                                                    val\
    \ music_note_beats = music_note.split(\".\").map(music_note => {\n           \
    \                                             val music_note_length = music_note.length\n\
    \                                                        val music_note_beats\
    \ = music_note.split(\"o\").map(music_note => {\n                            \
    \                                val music_note_length = music_note.length\n \
    \                                                           val music_note_beats\
    \ = music_note.split(\".\").map(music_note => {\n                            \
    \                                    val music_note_length = music_note.length\n\
    \                                                                val music_note_beats\
    \ = music_note.split(\"o\").map(music_note => {\n                            \
    \                                        val music_note_length = music_note.length\n\
    \                                                                    val music_note_beats\
    \ = music_note.split(\".\").map(music_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptr_fnafk.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptr_fnafk.scala:49:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m49 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmptr_fnafk.scala:58:0 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptr_fnafk.scala:47:117\
    \ -----------------------\e[0m\e[0m\n\e[31m47 |\e[0m                         \
    \                                           \e[33mval\e[0m \e[36mmusic_note_beats\e\
    [0m = music_note.split(\e[31m\".\"\e[0m).map(music_\n\e[31m\e[31m   |\e[0m   \
    \                                                                            \
    \                                      ^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                                             Not found: music_\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptr_fnafk.scala:57:1 ---------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659800065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \").map(_.toChar).toList\n\
    \        val beats = music_list.foldLeft(List[Long]())((acc, note) => {\n    \
    \        val note_to_beat = note.charAt(0).toInt\n            val note_to_rest\
    \ = note.charAt(1).toInt\n            acc :+ note_to_beat * 4\n            acc\
    \ :+ note_to_beat * 2\n            acc :+ note_to_beat\n            acc :+ note_to_rest\n\
    \            acc :+ note_to_rest * 2\n            acc :+ note_to_rest * 4\n  \
    \          acc :+ note_to_rest * 8\n            acc :+ note_to_rest * 16\n   \
    \         acc :+ note_to_rest * 32\n            acc :+ note_to_rest * 64\n   \
    \         acc :+ note_to_rest * 128\n            acc :+ note_to_rest * 256\n \
    \           acc :+ note_to_rest * 512\n            acc :+ note_to_rest * 1024\n\
    \            acc :+ note_to_rest * 2048\n            acc :+ note_to_rest * 4096\n\
    \            acc :+ note_to_rest * 8192\n            acc :+ note_to_rest * 16384\n\
    \            acc :+ note_to_rest * 32768\n            acc :+ note_to_rest * 65536\n\
    \            acc :+ note_to_rest * 131072\n            acc :+ note_to_rest * 262144\n\
    \            acc :+ note_to_rest * 524288\n            acc :+ note_to_rest * 1048576\n\
    \            acc :+ note_to_rest * 2097152\n            acc :+ note_to_rest *\
    \ 4194304\n            acc :+ note_to_rest * 8388608\n            acc :+ note_to_rest\
    \ * 16777216\n            acc :+ note_to_rest * 33554432\n            acc :+ note_to_rest\
    \ * 67108864\n            acc :+ note_to_rest * 134217728\n            acc :+\
    \ note_to_rest * 268435456\n            acc :+ note_to_rest * 536870912\n    \
    \        acc :+ note_to_rest * 1073741824\n            acc :+ note_to_rest * 2147483648\n\
    \            acc :+ note_to_rest * 4294967296\n            acc :+ note_to_rest\
    \ * 8589934592\n            acc :+ note_to_rest * 17179869184\n            acc\
    \ :+ note_to_rest * 34359738368\n            acc :+ note_to_rest * \n    }\n \
    \   def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1l3iag37.scala:57:33 ---------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m            acc :+ note_to_rest * \n\e[31m\e[31m   |\e\
    [0m                                 ^\e[0m\n\e[31m   |\e[0m                  \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp1l3iag37.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp1l3iag37.scala:68:0 ----------------------------\e[0m\e[0m\n\e[31m68\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1l3iag37.scala:14:55 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmusic_list\e[0m = music_string.split(\e\
    [31m\" \"\e[0m).map(_.toChar).toList\n\e[31m\e[31m   |\e[0m                  \
    \                                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                       value toChar is not a member of String\n\e[31m\e[31m--\
    \ Error: /tmp/tmp1l3iag37.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmusic_list\e[0m = music_string.split(\e\
    [31m\" \"\e[0m).map(_.toChar).toList\n\e[31m\e[31m   |\e[0m                  \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                 No ClassTag available for B\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m                                          where:    B is a type\
    \ variable\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1l3iag37.scala:67:1\
    \ ---------------------\e[0m\e[0m\n\e[31m67 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1659800065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val beats = rest.split(\"|\").map(music_string\
    \ => {\n                val beat = music_string.substring(0, 1)\n            \
    \    val rest = music_string.substring(1, music_string.length)\n             \
    \   val rest2 = rest.split(\"|\").map(music_string => {\n                    val\
    \ rest = music_string.substring(0, 1)\n                    val rest2 = music_string.substring(1,\
    \ music_string.length)\n                    val rest3 = rest.split(\"|\").map(music_string\
    \ => {\n                        val rest = music_string.substring(0, 1)\n    \
    \                    val rest2 = music_string.substring(1, music_string.length)\n\
    \                        val rest3 = music_string.substring(1, music_string.length)\n\
    \                        val rest4 = rest.split(\"|\").map(music_string => {\n\
    \                            val rest = music_string.substring(0, 1)\n       \
    \                     val rest2 = music_string.substring(1, music_string.length)\n\
    \                            val rest3 = music_string.substring(1, music_string.length)\n\
    \                            val rest4 = music_string.substring(1, music_string.length)\n\
    \                            val rest5 = rest.split(\"|\").map(music_string =>\
    \ {\n                                val rest = music_string.substring(0, 1)\n\
    \                                val rest2 = music_string.substring(1, music_string.length)\n\
    \                                val rest3 = music_string.substring(1, music_string.length)\n\
    \                                val rest4 = music_string.substring(1, music_string.length)\n\
    \                                val rest5 = music_string.substring(1, music_string.length)\n\
    \                                val rest6 = rest.split(\"|\").map(music_string\
    \ => {\n                                    val rest = music_string.substring(0,\
    \ 1)\n                                    val rest2 = music_string.substring(1,\
    \ music_string.length)\n                                    val rest3 = music_string.substring(1,\
    \ music_string.length)\n                                    val rest4 = music_string.substring(1,\
    \ music_string.length)\n                                    val rest5 = music_string.substring(1,\
    \ music_string.length)\n                                    val rest6 = music_string.substring(1,\
    \ music_string.length)\n                                    val rest7 = rest.split(\"\
    |\").map(music_string => {\n                                        val rest =\
    \ music_string.substring(0, 1)\n                                        val rest2\
    \ = music_string.substring(1, music_string.length)\n                         \
    \               val rest3 = music_string.substring(1, music_string.length)\n \
    \                                       val rest4 = music_string.substring(1,\
    \ music_string.length)\n                                        val rest5 = music_string.substring(1,\
    \ music_string.length)\n                                        val rest6 = music_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpitwrmq02.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpitwrmq02.scala:62:0 ----------------------------\e[0m\e[0m\n\e[31m62\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpitwrmq02.scala:51:52 ------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m                                        \e[33mval\e[0m\
    \ \e[36mrest6\e[0m = music_\n\e[31m\e[31m   |\e[0m                           \
    \                         ^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \                             Not found: music_\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.charAt(0)\n            val rest = music_string.substring(1).trim\n\
    \            val beats = rest match {\n                case \"o\" => 4\n     \
    \           case \"o|\" => 2\n                case \".|\" => 1\n             \
    \   case _ => 0\n            }\n            beats * scala.math.pow(2.0, note.toInt)\n\
    \        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp929_9291.scala:24:11\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m15 |\e[0m            \e\
    [33mval\e[0m \e[36mnote\e[0m = music_string.charAt(\e[31m0\e[0m)\n\e[31m16 |\e\
    [0m            \e[33mval\e[0m \e[36mrest\e[0m = music_string.substring(\e[31m1\e\
    [0m).trim\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m = rest \e\
    [33mmatch\e[0m {\n\e[31m18 |\e[0m                \e[33mcase\e[0m \e[31m\"o\"\e\
    [0m => \e[31m4\e[0m\n\e[31m19 |\e[0m                \e[33mcase\e[0m \e[31m\"o|\"\
    \e[0m => \e[31m2\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m \e[31m\"\
    .|\"\e[0m => \e[31m1\e[0m\n\e[31m21 |\e[0m                \e[33mcase\e[0m _ =>\
    \ \e[31m0\e[0m\n\e[31m22 |\e[0m            }\n\e[31m23 |\e[0m            beats\
    \ * scala.math.pow(\e[31m2.0\e[0m, note.toInt)\n\e[31m24 |\e[0m        }).toList\n\
    \e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e\
    [1m\e[31mDouble\e[0m]\n\e[31m   |\e[0m        Required: List[\e[1m\e[32mLong\e\
    [0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split('|').map(_.toInt).toList\n       \
    \ val beats = notes.map(n => math.ceil(n/4)).toList\n        val notes_not_last\
    \ = notes.filterNot(_ == notes.last)\n        val notes_not_last_beats = notes_not_last.map(n\
    \ => math.ceil(n/4))\n        val notes_not_last_beats_not_last = notes_not_last_beats.filterNot(_\
    \ == notes_not_last_beats.last)\n        val notes_not_last_beats_not_last_beats\
    \ = notes_not_last_beats_not_last.map(n => math.ceil(n/2))\n        val notes_not_last_beats_not_last_beats_not_last\
    \ = notes_not_last_beats_not_last_beats.filterNot(_ == notes_not_last_beats_not_last_beats.last)\n\
    \        val notes_not_last_beats_not_last_beats_not_last_beats = notes_not_last_beats_not_last_beats_not_last.map(n\
    \ => math.ceil(n/1))\n        val notes_not_last_beats_not_last_beats_not_last_beats_not_last\
    \ = notes_not_last_beats_not_last_beats_not_last_beats.filterNot(_ == notes_not_last_beats_not_last_beats_not_last_beats.last)\n\
    \        val notes_not_last_beats_not_last_beats_not_last_beats_not_last_beats\
    \ = notes_not_last_beats_not_last_beats_not_last_beats_not_last.map(n => math.ceil(n/4))\n\
    \        val notes_not_last_beats_not_last_beats_not_last_beats_not_last_beats_not_last\
    \ = notes_not_last_beats_not_last_beats_not_last_beats_not_last_beats.filterNot(_\
    \ == notes_not_last_beats_not_last_beats_not_last_beats_not_last_beats.last)\n\
    \        val notes_not_last_beats_not_last_beats_not_last_beats_not_last_beats_not_last_beats\
    \ = notes_not_last_beats_not_last_beats_not_last_beats_not_last_beats_not_last_beats.map(n\
    \ => math.ceil(n/2))\n        val notes_not_last_beats_not_last_beats_not_last_beats_not_last_beats_not_last_beats_not_last\
    \ = notes_not_last_beats_not_last_beats_not_last_beats_not_last_beats_not_last_beats_not_last.filterNot(_\
    \ == notes_not_last_beats_not_last_beats_not_last_beats_not_last_beats_not_last_beat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5hj83hpt.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5hj83hpt.scala:25:95\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotes_not_last_beats_not_last_beats_not_last_beats_not_last_beats_not_last_beats\e\
    [0m = notes_not_last_beats_not_last_beats_not_last_beats_not_last_beats_not_last_beats.map(\e\
    [36mn\e[0m => math.ceil(n/\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m              \
    \                                                                            \
    \     ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m\
    \  notes_not_last_beats_not_last_beats_not_last_beats_not_last_beats_not_last_beats\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp5hj83hpt.scala:26:104 --------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mnotes_not_last_beats_not_last_beats_not_last_beats_not_last_beats_not_last_beats_not_last\e\
    [0m = notes_not_last_beats_not_last_beats_not_last_beats_not_last_beats_not_last_beats_not_last.filterNot(_\
    \ == notes_not_last_beats_not_last_beats_not_last_beats_not_last_beats_not_last_beat\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  notes_not_last_beats_not_last_beats_not_last_beats_not_last_beats_not_last_beats_not_last\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp5hj83hpt.scala:27:5 ---------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors fou"
  stdout: ''
  timestamp: 1659800067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\"\\\\|\").map(music_string => {\n           \
    \ val notes = music_string.split(\"o\").map(music_string => {\n              \
    \  val note = music_string.trim\n                val beats = note.length / 4\n\
    \                beats\n            }).toList\n            notes.sum\n       \
    \ }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnzcvn5o4.scala:21:11\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m15 |\e[0m        \
    \    \e[33mval\e[0m \e[36mnotes\e[0m = music_string.split(\e[31m\"o\"\e[0m).map(\e\
    [36mmusic_string\e[0m => {\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36mnote\e\
    [0m = music_string.trim\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mbeats\e\
    [0m = note.length / \e[31m4\e[0m\n\e[31m18 |\e[0m                beats\n\e[31m19\
    \ |\e[0m            }).toList\n\e[31m20 |\e[0m            notes.sum\n\e[31m21\
    \ |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m\
    \        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required:\
    \ List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_list_size\
    \ = music_list.size\n        val music_list_size_long = music_list_size.asInstanceOf[Long]\n\
    \        val music_list_size_long2 = music_list_size_long.asInstanceOf[Long]\n\
    \        val music_list_size_long3 = music_list_size_long2.asInstanceOf[Long]\n\
    \        val music_list_size_long4 = music_list_size_long3.asInstanceOf[Long]\n\
    \        val music_list_size_long5 = music_list_size_long4.asInstanceOf[Long]\n\
    \        val music_list_size_long6 = music_list_size_long5.asInstanceOf[Long]\n\
    \        val music_list_size_long7 = music_list_size_long6.asInstanceOf[Long]\n\
    \        val music_list_size_long8 = music_list_size_long7.asInstanceOf[Long]\n\
    \        val music_list_size_long9 = music_list_size_long8.asInstanceOf[Long]\n\
    \        val music_list_size_long10 = music_list_size_long9.asInstanceOf[Long]\n\
    \        val music_list_size_long11 = music_list_size_long10.asInstanceOf[Long]\n\
    \        val music_list_size_long12 = music_list_size_long11.asInstanceOf[Long]\n\
    \        val music_list_size_long13 = music_list_size_long12.asInstanceOf[Long]\n\
    \        val music_list_size_long14 = music_list_size_long13.asInstanceOf[Long]\n\
    \        val music_list_size_long15 = music_list_size_long14.asInstanceOf[Long]\n\
    \        val music_list_size_long16 = music_list_size_long15.asInstanceOf[Long]\n\
    \        val music_list_size_long17 = music_list_size_long16.asInstanceOf[Long]\n\
    \        val music_list_size_long18 = music_list_size_long17.asInstanceOf[Long]\n\
    \        val music_list_size_long19 = music_list_size_long18.asInstanceOf[Long]\n\
    \        val music_list_size_long20 = music_list_size_long19.asInstanceOf[Long]\n\
    \        val music_list_size_long21 = music_list_size_long20.asInstanceOf[Long]\n\
    \        val music_list_size_long22 = music_list_size_long21.asInstanceOf[Long]\n\
    \        val music_list_size_long23 = music_list_size_long22.asInstanceOf\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpibjm_7pc.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.charAt(0)\n            val rest = music_string.substring(1).trim\n\
    \            val beats = rest.split(\"|\").map(rest => {\n                val\
    \ beat = rest.charAt(0)\n                val rest = rest.substring(1)\n      \
    \          val rest = rest.replaceAll(\"o\", \"\").replaceAll(\"|\", \"\").trim\n\
    \                val rest = rest.replaceAll(\"o\", \"\").replaceAll(\"|\", \"\"\
    ).trim\n                val rest = rest.replaceAll(\"o\", \"\").replaceAll(\"\
    |\", \"\").trim\n                val rest = rest.replaceAll(\"o\", \"\").replaceAll(\"\
    |\", \"\").trim\n                val rest = rest.replaceAll(\"o\", \"\").replaceAll(\"\
    |\", \"\").trim\n                val rest = rest.replaceAll(\"o\", \"\").replaceAll(\"\
    |\", \"\").trim\n                val rest = rest.replaceAll(\"o\", \"\").replaceAll(\"\
    |\", \"\").trim\n                val rest = rest.replaceAll(\"o\", \"\").replaceAll(\"\
    |\", \"\").trim\n                val rest = rest.replaceAll(\"o\", \"\").replaceAll(\"\
    |\", \"\").trim\n                val rest = rest.replaceAll(\"o\", \"\").replaceAll(\"\
    |\", \"\").trim\n                val rest = rest.replaceAll(\"o\", \"\").replaceAll(\"\
    |\", \"\").trim\n                val rest = rest.replaceAll(\"o\", \"\").replaceAll(\"\
    |\", \"\").trim\n                val rest = rest.replaceAll(\"o\", \"\").replaceAll(\"\
    |\", \"\").trim\n                val rest = rest.replaceAll(\"o\", \"\").replaceAll(\"\
    |\", \"\").trim\n                val rest = rest.replaceAll(\"o\", \"\").replaceAll(\"\
    |\", \"\").trim\n                val rest = rest.replaceAll(\"o\", \"\").replaceAll(\"\
    |\", \"\").trim\n                val rest = rest.replaceAll(\"o\", \"\").replaceAll(\"\
    |\", \"\").trim\n                val rest = rest.replaceAll(\"o\", \"\").replaceAll(\"\
    |\", \"\").trim\n                val rest = rest.replaceAll(\"o\", \"\").replaceAll(\"\
    |\", \"\").trim\n                val rest = rest.replaceAll(\"o\", \"\").replaceAll(\"\
    |\", \"\").trim\n                val rest = rest.replaceAll(\"o\", \"\").replaceAll(\"\
    |\", \"\").trim\n                val rest = rest.replaceAll(\"o\", \"\").replaceAll(\"\
    |\", \"\").trim\n                val rest = rest.replaceAll(\"o\", \"\").replaceAll(\"\
    |\", \"\").trim\n                val rest = rest.replaceAll(\"o\", \"\").replaceAll\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyv4jdd2d.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpyv4jdd2d.scala:54:0 ----------------------------\e[0m\e[0m\n\e[31m54\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_length\
    \ = notes.length\n        val notes_beats = notes.map(n => n.length.toLong)\n\
    \        val notes_beats_sum = notes_beats.sum\n        val notes_beats_length\
    \ = notes_beats.length\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_sum = notes_beats_sum.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_sum = notes_beats_sum.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_sum\
    \ = notes_beats_sum.toLong\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_sum = notes_beats_sum.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_sum = notes_beats_sum.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_sum\
    \ = notes_beats_sum.toLong\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_sum = notes_beats_sum.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_sum = notes_beats_sum.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_sum\
    \ = notes_beats_sum.toLong\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_sum = notes_beats_sum.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_sum = notes_beats_sum.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_sum\
    \ = notes_beats_sum.toLong\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_sum = notes_beats_sum.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_sum = notes_beats_sum.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_sum\
    \ = notes_beats_sum.toLong\n\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxv1n6n6u.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpxv1n6n6u.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_sum\e[0m = notes_beats_sum.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnotes_beats_sum is already defined as \e[33mvalue\e[0m \e[35mnotes_beats_sum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxv1n6n6u.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m = notes_beats_length.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpxv1n6n6u.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_sum\e[0m = notes_beats_sum.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnotes_beats_sum is already defined as \e[33mvalue\e[0m \e[35mnotes_beats_sum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxv1n6n6u.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mnotes_"
  stdout: ''
  timestamp: 1659800068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(' ').map(_.toInt).toList\n  \
    \      val beats_per_note = music_list.last.asInstanceOf[Int]\n        val notes_per_beat\
    \ = music_list.takeRight(music_list.last).map(_.asInstanceOf[Int]).sum\n     \
    \   val notes = music_list.takeRight(music_list.last).map(_.toInt)\n        val\
    \ notes_not_last = notes.filterNot(_ == music_list.last)\n        val notes_not_last_beats\
    \ = notes_not_last.map(x => beats_per_note - x)\n        val notes_not_last_beats_sum\
    \ = notes_not_last_beats.sum\n        val notes_not_last_beats_product = notes_not_last_beats.product\n\
    \        val notes_not_last_beats_product2 = notes_not_last_beats_product.map(x\
    \ => x * notes_per_beat)\n        val notes_not_last_beats_product3 = notes_not_last_beats_product2.map(x\
    \ => x * beats_per_note)\n        val notes_not_last_beats_product4 = notes_not_last_beats_product3.map(x\
    \ => x * notes_per_beat)\n        val notes_not_last_beats_product5 = notes_not_last_beats_product4.map(x\
    \ => x * beats_per_note)\n        val notes_not_last_beats_product6 = notes_not_last_beats_product5.map(x\
    \ => x * notes_per_beat)\n        val notes_not_last_beats_product7 = notes_not_last_beats_product6.map(x\
    \ => x * beats_per_note)\n        val notes_not_last_beats_product8 = notes_not_last_beats_product7.map(x\
    \ => x * notes_per_beat)\n        val notes_not_last_beats_product9 = notes_not_last_beats_product8.map(x\
    \ => x * beats_per_note)\n        val notes_not_last_beats_product10 = notes_not_last_beats_product9.map(x\
    \ => x * notes_per_beat)\n        val notes_not_last_beats_product11 = notes_not_last_beats_product10.map(x\
    \ => x * beats_per_note)\n        val notes_not_last_beats_product12 = notes_not_last_beats_product11.map(x\
    \ => x * notes_per_beat)\n        val notes_not_last_beats_product13 = notes_not_last_beats_product12.map(x\
    \ => x * beats_per_note)\n        val notes_not_last_beats_product14 = notes_not_last_beats_product13.map(x\
    \ => x * notes_per_beat)\n\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphn6w5her.scala:22:73 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnotes_not_last_beats_product2\e\
    [0m = notes_not_last_beats_product.map(\e[36mx\e[0m => x * notes_per_beat)\n\e\
    [31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        value map is not a\
    \ member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphn6w5her.scala:36:5\
    \ ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_notes = music_string.split('|')\n        val music_notes_length\
    \ = music_notes.length\n        val music_notes_length = music_notes_length.toInt\n\
    \        val music_notes_length = music_notes_length.toLong\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_notes_length = music_notes_length.toInt\n\
    \        val music_notes_length = music_notes_length.toInt\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_notes_length = music_notes_length.toInt\n\
    \        val music_notes_length = music_notes_length.toInt\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_notes_length = music_notes_length.toInt\n\
    \        val music_notes_length = music_notes_length.toInt\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_notes_length = music_notes_length.toInt\n\
    \        val music_notes_length = music_notes_length.toInt\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_notes_length = music_notes_length.toInt\n\
    \        val music_notes_length = music_notes_length.toInt\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_notes_length = music_notes_length.toInt\n\
    \        val music_notes_length = music_notes_length.toInt\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_notes_length = music_notes_length.toInt\n\
    \        val music_notes_length = music_notes_length.toInt\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_notes_length = music_notes_length.toInt\n\
    \        val music_notes_length = music_notes_length.toInt\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_notes_length = music_notes_length.toInt\n\
    \        val music_notes_length = music_notes_length.toInt\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_notes_length = music_notes_length.toInt\n\
    \        val music_notes_length = music_notes_length.toInt\n        val music_notes_length\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\"\
    )).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2dht8ayc.scala:48:32 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_length\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e\
    [0m                                expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2dht8ayc.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_notes_length\e[0m = music_notes_length.toInt\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmusic_notes_length is already defined as \e[33mvalue\e[0m \e[35mmusic_notes_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2dht8ayc.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_length\e[0m = music_notes_length.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_notes_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2dht8ayc.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_length\e[0m\
    \ = music_notes_length.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_notes_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2dht8ayc.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_length\e[0m\
    \ = music_notes_length.toInt\n\e[31m\e[31m   "
  stdout: ''
  timestamp: 1659800069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\"\\\\|\").map(music_string => {\n           \
    \ val notes = music_string.split(\"o\").map(music_string => {\n              \
    \  val note = music_string.charAt(0).toChar\n                val beats = music_string.substring(1).toInt\n\
    \                beats\n            }).toList\n            notes.sum\n       \
    \ }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyidzs9ei.scala:21:11\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m15 |\e[0m        \
    \    \e[33mval\e[0m \e[36mnotes\e[0m = music_string.split(\e[31m\"o\"\e[0m).map(\e\
    [36mmusic_string\e[0m => {\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36mnote\e\
    [0m = music_string.charAt(\e[31m0\e[0m).toChar\n\e[31m17 |\e[0m              \
    \  \e[33mval\e[0m \e[36mbeats\e[0m = music_string.substring(\e[31m1\e[0m).toInt\n\
    \e[31m18 |\e[0m                beats\n\e[31m19 |\e[0m            }).toList\n\e\
    [31m20 |\e[0m            notes.sum\n\e[31m21 |\e[0m        }).toList\n\e[31m\e\
    [31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e\
    [0m]\n\e[31m   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.substring(0,\
    \ 1)\n                val rest = music_string.substring(1)\n                val\
    \ beats = rest.split(\"o\").map(music_string => {\n                    val beat\
    \ = music_string.substring(0, 1)\n                    val rest = music_string.substring(1)\n\
    \                    val beats = rest.split(\"|\").map(music_string => {\n   \
    \                     val beat = music_string.substring(0, 1)\n              \
    \          val rest = music_string.substring(1)\n                        val beats\
    \ = rest.split(\"o\").map(music_string => {\n                            val beat\
    \ = music_string.substring(0, 1)\n                            val rest = music_string.substring(1)\n\
    \                            val beats = rest.split(\"|\").map(music_string =>\
    \ {\n                                val beat = music_string.substring(0, 1)\n\
    \                                val rest = music_string.substring(1)\n      \
    \                          val beats = rest.split(\"o\").map(music_string => {\n\
    \                                    val beat = music_string.substring(0, 1)\n\
    \                                    val rest = music_string.substring(1)\n  \
    \                                  val beats = rest.split(\"|\").map(music_string\
    \ => {\n                                        val beat = music_string.substring(0,\
    \ 1)\n                                        val rest = music_string.substring(1)\n\
    \                                        val beats = rest.split(\"o\").map(music_string\
    \ => {\n                                            val beat = music_string.substring(0,\
    \ 1)\n                                            val rest = music_string.substring(1)\n\
    \                                            val beats = rest.split(\"|\").map(music_string\
    \ => {\n                                                val beat = music_string.substring(0,\
    \ 1)\n                                                val rest = music_string.substring(1)\n\
    \                                                val beats = rest.split(\"o\"\
    ).map(music_string => {\n                                                    val\
    \ beat = music_string.substring(0, 1)\n                                      \
    \              val rest = music_string.substring(1)\n                        \
    \                            val beats = rest.split(\"|\").map(music_string =>\
    \ {\n                                                        val beat = music_string.substring(0,\
    \ 1)\n                                                        val rest = music_string.substring(1)\n\
    \                                                        val beats = rest.split(\"\
    o\").map(music_string => {\n                                                 \
    \           val beat = music_string.substring(0, 1)\n                        \
    \                                    val rest = music_string.substring(1)\n  \
    \                                                          val beats = rest.split(\"\
    |\").map(music_string => {\n                                                 \
    \               val beat = music_string.substring(0, 1)\n                    \
    \                                            val rest = music_string.substring(1)\n\
    \                                                                val beats = rest.split(\"\
    o\").map(music_string => {\n                                                 \
    \                   val beat = music_string.substring(0, 1)\n                \
    \                                                    val rest = music_string.substring(1)\n\
    \                                                                    val beats\
    \ = rest.split(\"\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpa9ls87o5.scala:58:91 -----------------------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m                                                    \
    \                \e[33mval\e[0m \e[36mbeats\e[0m = rest.split(\"\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \                    unclosed string literal\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpa9ls87o5.scala:60:4 ----------------------------\e[0m\e[0m\n\e[31m60\
    \ |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e\
    [35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')'\
    \ expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa9ls87o5.scala:69:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n3 errors found\n"
  stdout: ''
  timestamp: 1659799995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split('|')\n        val music_list_length\
    \ = music_list.length\n        val music_list_beats = music_list.map(music_string\
    \ => music_string.split('o').length)\n        val music_list_beats_sum = music_list_beats.sum\n\
    \        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_length\
    \ = music_list_beats_length / 4\n        val music_list_beats_length = music_list_beats_length\
    \ * 4\n        val music_list_beats_length = music_list_beats_length + music_list_beats_sum\n\
    \        val music_list_beats_length = music_list_beats_length / 4\n        val\
    \ music_list_beats_length = music_list_beats_length * 4\n        val music_list_beats_length\
    \ = music_list_beats_length + music_list_beats_sum\n        val music_list_beats_length\
    \ = music_list_beats_length / 4\n        val music_list_beats_length = music_list_beats_length\
    \ * 4\n        val music_list_beats_length = music_list_beats_length + music_list_beats_sum\n\
    \        val music_list_beats_length = music_list_beats_length / 4\n        val\
    \ music_list_beats_length = music_list_beats_length * 4\n        val music_list_beats_length\
    \ = music_list_beats_length + music_list_beats_sum\n        val music_list_beats_length\
    \ = music_list_beats_length / 4\n        val music_list_beats_length = music_list_beats_length\
    \ * 4\n        val music_list_beats_length = music_list_beats_length + music_list_beats_sum\n\
    \        val music_list_beats_length = music_list_beats_length / 4\n        val\
    \ music_list_beats_length = music_list_beats_length * 4\n        val music_list_beats_length\
    \ = music_list_beats_length + music_list_beats_sum\n        val music_list_beats_length\
    \ = music_list_beats_length / 4\n        val music_list_beats_length = music_list_beats_length\
    \ * 4\n        val music_list_beats_length = music_list_beats_length + music_list_beats_sum\n\
    \        val music_list_beats_length = music_list_beats_length / 4\n        val\
    \ music_list_beats_length = music_list_beats_length * 4\n        val music_list_beats_length\
    \ = music_list_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp3i9otdc.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length / \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp3i9otdc.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp3i9otdc.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length + music_list_beats_sum\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp3i9otdc.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length / \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all "
  stdout: ''
  timestamp: 1659800069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(' ').map(music_note => {\n            val note\
    \ = music_note.charAt(0)\n            val beats = music_note.substring(1).split('|').map(_.toInt)\n\
    \            val last_beat = beats.last\n            beats.take(last_beat).sum\n\
    \        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz4k6uvmt.scala:19:11\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m' '\e[0m).map(\e[36mmusic_note\e[0m => {\n\e[31m15 |\e[0m            \e[33mval\e\
    [0m \e[36mnote\e[0m = music_note.charAt(\e[31m0\e[0m)\n\e[31m16 |\e[0m       \
    \     \e[33mval\e[0m \e[36mbeats\e[0m = music_note.substring(\e[31m1\e[0m).split(\e\
    [31m'|'\e[0m).map(_.toInt)\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mlast_beat\e\
    [0m = beats.last\n\e[31m18 |\e[0m            beats.take(last_beat).sum\n\e[31m19\
    \ |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m\
    \        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required:\
    \ List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_list_size\
    \ = music_list.size\n        val music_list_size_2 = music_list_size / 2\n   \
    \     val music_list_size_3 = music_list_size_2 / 2\n        val music_list_size_4\
    \ = music_list_size_3 / 2\n        val music_list_size_5 = music_list_size_4 /\
    \ 2\n        val music_list_size_6 = music_list_size_5 / 2\n        val music_list_size_7\
    \ = music_list_size_6 / 2\n        val music_list_size_8 = music_list_size_7 /\
    \ 2\n        val music_list_size_9 = music_list_size_8 / 2\n        val music_list_size_10\
    \ = music_list_size_9 / 2\n        val music_list_size_11 = music_list_size_10\
    \ / 2\n        val music_list_size_12 = music_list_size_11 / 2\n        val music_list_size_13\
    \ = music_list_size_12 / 2\n        val music_list_size_14 = music_list_size_13\
    \ / 2\n        val music_list_size_15 = music_list_size_14 / 2\n        val music_list_size_16\
    \ = music_list_size_15 / 2\n        val music_list_size_17 = music_list_size_16\
    \ / 2\n        val music_list_size_18 = music_list_size_17 / 2\n        val music_list_size_19\
    \ = music_list_size_18 / 2\n        val music_list_size_20 = music_list_size_19\
    \ / 2\n        val music_list_size_21 = music_list_size_20 / 2\n        val music_list_size_22\
    \ = music_list_size_21 / 2\n        val music_list_size_23 = music_list_size_22\
    \ / 2\n        val music_list_size_24 = music_list_size_23 / 2\n        val music_list_size_25\
    \ = music_list_size_24 / 2\n        val music_list_size_26 = music_list_size_25\
    \ / 2\n        val music_list_size_27 = music_list_size_26 / 2\n        val music_list_size_28\
    \ = music_list_size_27 / 2\n        val music_list_size_29 = music_list_size_28\
    \ / 2\n        val music_list_size_30 = music_list_size_29 / 2\n        val music_list_size_31\
    \ = music_list_size_30 / 2\n        val music_list_size_32 = music_list_size_31\
    \ / 2\n        val music_list_\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7pcuy2n4.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp7pcuy2n4.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\"\\\\|\").map(music_string => {\n           \
    \ val notes = music_string.split(\"o\").map(music_string => {\n              \
    \  val note = music_string.trim\n                val beats = note.length / 4\n\
    \                beats\n            })\n            notes.sum\n        }).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp29rto6de.scala:21:11\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m15 |\e[0m        \
    \    \e[33mval\e[0m \e[36mnotes\e[0m = music_string.split(\e[31m\"o\"\e[0m).map(\e\
    [36mmusic_string\e[0m => {\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36mnote\e\
    [0m = music_string.trim\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mbeats\e\
    [0m = note.length / \e[31m4\e[0m\n\e[31m18 |\e[0m                beats\n\e[31m19\
    \ |\e[0m            })\n\e[31m20 |\e[0m            notes.sum\n\e[31m21 |\e[0m\
    \        }).toList\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m     \
    \   Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required: List[\e\
    [1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \")\n        val music_list_size\
    \ = music_list.size\n        val music_list_size_long = music_list_size.asInstanceOf[Long]\n\
    \        val music_list_size_long2 = music_list_size_long * music_list_size_long\n\
    \        val music_list_size_long3 = music_list_size_long2 * music_list_size_long\n\
    \        val music_list_size_long4 = music_list_size_long3 * music_list_size_long\n\
    \        val music_list_size_long5 = music_list_size_long4 * music_list_size_long\n\
    \        val music_list_size_long6 = music_list_size_long5 * music_list_size_long\n\
    \        val music_list_size_long7 = music_list_size_long6 * music_list_size_long\n\
    \        val music_list_size_long8 = music_list_size_long7 * music_list_size_long\n\
    \        val music_list_size_long9 = music_list_size_long8 * music_list_size_long\n\
    \        val music_list_size_long10 = music_list_size_long9 * music_list_size_long\n\
    \        val music_list_size_long11 = music_list_size_long10 * music_list_size_long\n\
    \        val music_list_size_long12 = music_list_size_long11 * music_list_size_long\n\
    \        val music_list_size_long13 = music_list_size_long12 * music_list_size_long\n\
    \        val music_list_size_long14 = music_list_size_long13 * music_list_size_long\n\
    \        val music_list_size_long15 = music_list_size_long14 * music_list_size_long\n\
    \        val music_list_size_long16 = music_list_size_long15 * music_list_size_long\n\
    \        val music_list_size_long17 = music_list_size_long16 * music_list_size_long\n\
    \        val music_list_size_long18 = music_list_size_long17 * music_list_size_long\n\
    \        val music_list_size_long19 = music_list_size_long18 * music_list_size_long\n\
    \        val music_list_size_long20 = music_list_size_long19 * music_list_size_long\n\
    \        val music_list_size_long21 = music_list_size_long20 * music_list_size_long\n\
    \        val music_list_size_long22 = music_list_size_long21 * music_list_size_long\n\
    \        val music_list_size_long23 = music_list_size_long22 * music_list_size_long\n\
    \        val music_list_size_\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqi4xsmyt.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpqi4xsmyt.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_list_size\
    \ = music_list.size\n        val music_list_size_2 = music_list_size / 2\n   \
    \     val music_list_size_3 = music_list_size_2 / 2\n        val music_list_size_4\
    \ = music_list_size_3 / 2\n        val music_list_size_5 = music_list_size_4 /\
    \ 2\n        val music_list_size_6 = music_list_size_5 / 2\n        val music_list_size_7\
    \ = music_list_size_6 / 2\n        val music_list_size_8 = music_list_size_7 /\
    \ 2\n        val music_list_size_9 = music_list_size_8 / 2\n        val music_list_size_10\
    \ = music_list_size_9 / 2\n        val music_list_size_11 = music_list_size_10\
    \ / 2\n        val music_list_size_12 = music_list_size_11 / 2\n        val music_list_size_13\
    \ = music_list_size_12 / 2\n        val music_list_size_14 = music_list_size_13\
    \ / 2\n        val music_list_size_15 = music_list_size_14 / 2\n        val music_list_size_16\
    \ = music_list_size_15 / 2\n        val music_list_size_17 = music_list_size_16\
    \ / 2\n        val music_list_size_18 = music_list_size_17 / 2\n        val music_list_size_19\
    \ = music_list_size_18 / 2\n        val music_list_size_20 = music_list_size_19\
    \ / 2\n        val music_list_size_21 = music_list_size_20 / 2\n        val music_list_size_22\
    \ = music_list_size_21 / 2\n        val music_list_size_23 = music_list_size_22\
    \ / 2\n        val music_list_size_24 = music_list_size_23 / 2\n        val music_list_size_25\
    \ = music_list_size_24 / 2\n        val music_list_size_26 = music_list_size_25\
    \ / 2\n        val music_list_size_27 = music_list_size_26 / 2\n        val music_list_size_28\
    \ = music_list_size_27 / 2\n        val music_list_size_29 = music_list_size_28\
    \ / 2\n        val music_list_size_30 = music_list_size_29 / 2\n        val music_list_size_31\
    \ = music_list_size_30 / 2\n        val music_list_size_32 = music_list_size_31\
    \ / 2\n        val music_list_size_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_47dpr8t.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_47dpr8t.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.substring(0,\
    \ 1)\n                val rest = music_string.substring(1)\n                val\
    \ beats = rest.split(\"o\").map(music_string => {\n                    val beat\
    \ = music_string.substring(0, 1)\n                    val rest = music_string.substring(1)\n\
    \                    val beats = rest.split(\"|\").map(music_string => {\n   \
    \                     val beat = music_string.substring(0, 1)\n              \
    \          val rest = music_string.substring(1)\n                        val beats\
    \ = rest.split(\"o\").map(music_string => {\n                            val beat\
    \ = music_string.substring(0, 1)\n                            val rest = music_string.substring(1)\n\
    \                            val beats = rest.split(\"|\").map(music_string =>\
    \ {\n                                val beat = music_string.substring(0, 1)\n\
    \                                val rest = music_string.substring(1)\n      \
    \                          val beats = rest.split(\"o\").map(music_string => {\n\
    \                                    val beat = music_string.substring(0, 1)\n\
    \                                    val rest = music_string.substring(1)\n  \
    \                                  val beats = rest.split(\"|\").map(music_string\
    \ => {\n                                        val beat = music_string.substring(0,\
    \ 1)\n                                        val rest = music_string.substring(1)\n\
    \                                        val beats = rest.split(\"o\").map(music_string\
    \ => {\n                                            val beat = music_string.substring(0,\
    \ 1)\n                                            val rest = music_string.substring(1)\n\
    \                                            val beats = rest.split(\"|\").map(music_string\
    \ => {\n                                                val beat = music_string.substring(0,\
    \ 1)\n                                                val rest = music_string.substring(1)\n\
    \                                                val beats = rest.split(\"o\"\
    ).map(music_string => {\n                                                    val\
    \ beat = music_string.substring(0, 1)\n                                      \
    \              val rest = music_string.substring(1)\n                        \
    \                            val beats = rest.split(\"|\").map(music_string =>\
    \ {\n                                                        val beat = music_string.substring(0,\
    \ 1)\n                                                        val rest = music_string.substring(1)\n\
    \                                                        val beats = rest.split(\"\
    o\").map(music_string => {\n                                                 \
    \           val beat = music_string.substring(0, 1)\n                        \
    \                                    val rest = music_string.substring(1)\n  \
    \                                                          val beats = rest.split(\"\
    |\").map(music_string => {\n                                                 \
    \               val beat = music_string.substring(0, 1)\n                    \
    \                                            val rest = music_string.substring(1)\n\
    \                                                                val beats = rest.split(\"\
    o\").map(music_string => {\n                                                 \
    \                   val beat = music_string.substring(0, 1)\n                \
    \                                                    val rest = music_string.substring(1)\n\
    \                                                                    val beats\
    \ = rest.split(\"\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpa9ls87o5.scala:58:91 -----------------------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m                                                    \
    \                \e[33mval\e[0m \e[36mbeats\e[0m = rest.split(\"\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \                    unclosed string literal\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpa9ls87o5.scala:60:4 ----------------------------\e[0m\e[0m\n\e[31m60\
    \ |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e\
    [35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')'\
    \ expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa9ls87o5.scala:69:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n3 errors found\n"
  stdout: ''
  timestamp: 1659799995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\"\\\\|\").map(music_string => {\n           \
    \ val notes = music_string.split(\"o\").map(music_string => {\n              \
    \  val note = music_string.split(\"|\").map(music_string => {\n              \
    \      val beats = music_string.split(\".\").map(music_string => {\n         \
    \               music_string.toLong\n                    }).sum\n            \
    \        beats\n                }).sum\n                note\n            }).sum\n\
    \            notes\n        }).sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv4xk_4al.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m  \
    \      ^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m15 |\e[0m\
    \            \e[33mval\e[0m \e[36mnotes\e[0m = music_string.split(\e[31m\"o\"\e\
    [0m).map(\e[36mmusic_string\e[0m => {\n\e[31m16 |\e[0m                \e[33mval\e\
    [0m \e[36mnote\e[0m = music_string.split(\e[31m\"|\"\e[0m).map(\e[36mmusic_string\e\
    [0m => {\n\e[31m17 |\e[0m                    \e[33mval\e[0m \e[36mbeats\e[0m =\
    \ music_string.split(\e[31m\".\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m18\
    \ |\e[0m                        music_string.toLong\n\e[31m19 |\e[0m         \
    \           }).sum\n\e[31m20 |\e[0m                    beats\n\e[31m21 |\e[0m\
    \                }).sum\n\e[31m22 |\e[0m                note\n\e[31m23 |\e[0m\
    \            }).sum\n\e[31m24 |\e[0m            notes\n\e[31m25 |\e[0m       \
    \ }).sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split('|').toList\n        val beats = notes.map(_.length.toLong)\n\
    \        val notes_count = notes.map(_.length).sum\n        val beats_count =\
    \ beats.sum\n        val notes_last_beat = notes_count - beats_count\n       \
    \ val notes_last_beats = notes_last_beat.toLong\n        val beats_last_beat =\
    \ beats_count - notes_last_beats\n        val beats_last_beats = beats_last_beat.toLong\n\
    \        val notes_last_beats_count = notes_last_beats.toLong\n        val beats_last_beats_count\
    \ = beats_last_beats_count.toLong\n        val notes_last_beats_count_in_beats\
    \ = notes_last_beats_count / beats_count\n        val beats_last_beats_count_in_beats\
    \ = beats_last_beats_count / beats_count\n        val notes_last_beats_count_in_beats_count\
    \ = notes_last_beats_count_in_beats.toLong\n        val beats_last_beats_count_in_beats_count\
    \ = beats_last_beats_count_in_beats.toLong\n        val notes_last_beats_count_in_beats_count_in_beats\
    \ = notes_last_beats_count_in_beats / beats_count_in_beats\n        val beats_last_beats_count_in_beats_count_in_beats\
    \ = beats_last_beats_count_in_beats / beats_count_in_beats\n        val notes_last_beats_count_in_beats_count_in_beats_count\
    \ = notes_last_beats_count_in_beats_count / beats_count_in_beats_count\n     \
    \   val beats_last_beats_count_in_beats_count_in_beats_count = beats_last_beats_count_in_beats_count\
    \ / beats_count_in_beats_count\n        val notes_last_beats_count_in_beats_count_in_beats_count_in_beats\
    \ = notes_last_beats_count_in_beats_count_in_beats / beats_count_in_beats_count_in_beats\n\
    \        val beats_last_beats_count_in_beats_count_in_beats_count_in_beats = beats_last_beats_count_in_beats_count_in_beats\
    \ / beats_count_in_beats_count_in_beats\n        val notes_last_beats_count_in_beats_count_in_beats_count_in_beats_count\
    \ = notes_last_beats_count_in_beats_count_in_beats_count / beats_count_in_beats_count_in_beats_count\n\
    \        val beats_last_beats_count_in_beats_count_in_beats_count_in_beats_count\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\"\
    )).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpabkew7_z.scala:35:81 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mbeats_last_beats_count_in_beats_count_in_beats_count_in_beats_count\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \                   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpabkew7_z.scala:23:37 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mbeats_last_beats_count\e\
    [0m = beats_last_beats_count.toLong\n\e[31m\e[31m   |\e[0m                   \
    \                  ^\e[0m\n\e[31m   |\e[0m                       Recursive \e\
    [33mvalue\e[0m \e[35mbeats_last_beats_count\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpabkew7_z.scala:28:95 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnotes_last_beats_count_in_beats_count_in_beats\e\
    [0m = notes_last_beats_count_in_beats / beats_count_in_beats\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                     ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                            Not found: beats_count_in_beats\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpabkew7_z.scala:30:107 -----------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnotes_last_beats_count_in_beats_count_in_beats_count\e\
    [0m = notes_last_beats_count_in_beats_count / beats_count_in_beats_count\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                   Not found: beats_count_in_beats_count\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longe"
  stdout: ''
  timestamp: 1659800070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.substring(0,\
    \ 1)\n                val rest = music_string.substring(1)\n                val\
    \ beats = rest.split(\"o\").map(music_string => {\n                    val beat\
    \ = music_string.substring(0, 1)\n                    val rest = music_string.substring(1)\n\
    \                    val beats = rest.split(\"|\").map(music_string => {\n   \
    \                     val beat = music_string.substring(0, 1)\n              \
    \          val rest = music_string.substring(1)\n                        val beats\
    \ = rest.split(\"o\").map(music_string => {\n                            val beat\
    \ = music_string.substring(0, 1)\n                            val rest = music_string.substring(1)\n\
    \                            val beats = rest.split(\"|\").map(music_string =>\
    \ {\n                                val beat = music_string.substring(0, 1)\n\
    \                                val rest = music_string.substring(1)\n      \
    \                          val beats = rest.split(\"o\").map(music_string => {\n\
    \                                    val beat = music_string.substring(0, 1)\n\
    \                                    val rest = music_string.substring(1)\n  \
    \                                  val beats = rest.split(\"|\").map(music_string\
    \ => {\n                                        val beat = music_string.substring(0,\
    \ 1)\n                                        val rest = music_string.substring(1)\n\
    \                                        val beats = rest.split(\"o\").map(music_string\
    \ => {\n                                            val beat = music_string.substring(0,\
    \ 1)\n                                            val rest = music_string.substring(1)\n\
    \                                            val beats = rest.split(\"|\").map(music_string\
    \ => {\n                                                val beat = music_string.substring(0,\
    \ 1)\n                                                val rest = music_string.substring(1)\n\
    \                                                val beats = rest.split(\"o\"\
    ).map(music_string => {\n                                                    val\
    \ beat = music_string.substring(0, 1)\n                                      \
    \              val rest = music_string.substring(1)\n                        \
    \                            val beats = rest.split(\"|\").map(music_string =>\
    \ {\n                                                        val beat = music_string.substring(0,\
    \ 1)\n                                                        val rest = music_string.substring(1)\n\
    \                                                        val beats = rest.split(\"\
    o\").map(music_string => {\n                                                 \
    \           val beat = music_string.substring(0, 1)\n                        \
    \                                    val rest = music_string.substring(1)\n  \
    \                                                          val beats = rest.split(\"\
    |\").map(music_string => {\n                                                 \
    \               val beat = music_string.substring(0, 1)\n                    \
    \                                            val rest = music_string.substring(1)\n\
    \                                                                val beats = rest.split(\"\
    o\").map(music_string => {\n                                                 \
    \                   val beat = music_string.substring(0, 1)\n                \
    \                                                    val rest = music_string.substring(1)\n\
    \                                                                    val beats\
    \ = rest.split(\"\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpa9ls87o5.scala:58:91 -----------------------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m                                                    \
    \                \e[33mval\e[0m \e[36mbeats\e[0m = rest.split(\"\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \                    unclosed string literal\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpa9ls87o5.scala:60:4 ----------------------------\e[0m\e[0m\n\e[31m60\
    \ |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e\
    [35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')'\
    \ expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa9ls87o5.scala:69:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n3 errors found\n"
  stdout: ''
  timestamp: 1659799995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.substring(0,\
    \ 1)\n                val rest = music_string.substring(1)\n                val\
    \ beats = rest.split(\"o\").map(music_string => {\n                    val beat\
    \ = music_string.substring(0, 1)\n                    val rest = music_string.substring(1)\n\
    \                    val beats = rest.split(\"|\").map(music_string => {\n   \
    \                     val beat = music_string.substring(0, 1)\n              \
    \          val rest = music_string.substring(1)\n                        val beats\
    \ = rest.split(\"o\").map(music_string => {\n                            val beat\
    \ = music_string.substring(0, 1)\n                            val rest = music_string.substring(1)\n\
    \                            val beats = rest.split(\"|\").map(music_string =>\
    \ {\n                                val beat = music_string.substring(0, 1)\n\
    \                                val rest = music_string.substring(1)\n      \
    \                          val beats = rest.split(\"o\").map(music_string => {\n\
    \                                    val beat = music_string.substring(0, 1)\n\
    \                                    val rest = music_string.substring(1)\n  \
    \                                  val beats = rest.split(\"|\").map(music_string\
    \ => {\n                                        val beat = music_string.substring(0,\
    \ 1)\n                                        val rest = music_string.substring(1)\n\
    \                                        val beats = rest.split(\"o\").map(music_string\
    \ => {\n                                            val beat = music_string.substring(0,\
    \ 1)\n                                            val rest = music_string.substring(1)\n\
    \                                            val beats = rest.split(\"|\").map(music_string\
    \ => {\n                                                val beat = music_string.substring(0,\
    \ 1)\n                                                val rest = music_string.substring(1)\n\
    \                                                val beats = rest.split(\"o\"\
    ).map(music_string => {\n                                                    val\
    \ beat = music_string.substring(0, 1)\n                                      \
    \              val rest = music_string.substring(1)\n                        \
    \                            val beats = rest.split(\"|\").map(music_string =>\
    \ {\n                                                        val beat = music_string.substring(0,\
    \ 1)\n                                                        val rest = music_string.substring(1)\n\
    \                                                        val beats = rest.split(\"\
    o\").map(music_string => {\n                                                 \
    \           val beat = music_string.substring(0, 1)\n                        \
    \                                    val rest = music_string.substring(1)\n  \
    \                                                          val beats = rest.split(\"\
    |\").map(music_string => {\n                                                 \
    \               val beat = music_string.substring(0, 1)\n                    \
    \                                            val rest = music_string.substring(1)\n\
    \                                                                val beats = rest.split(\"\
    o\").map(music_string => {\n                                                 \
    \                   val beat = music_string.substring(0, 1)\n                \
    \                                                    val rest = music_string.substring(1)\n\
    \                                                                    val beats\
    \ = rest.split(\"\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpa9ls87o5.scala:58:91 -----------------------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m                                                    \
    \                \e[33mval\e[0m \e[36mbeats\e[0m = rest.split(\"\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \                    unclosed string literal\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpa9ls87o5.scala:60:4 ----------------------------\e[0m\e[0m\n\e[31m60\
    \ |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e\
    [35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')'\
    \ expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa9ls87o5.scala:69:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n3 errors found\n"
  stdout: ''
  timestamp: 1659799995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(' ').map(music_note => {\n            val note\
    \ = music_note.charAt(0)\n            val beats = music_note.substring(1).split('|').map(_.toInt).sum\n\
    \            beats\n        }).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptlbv6yae.scala:18:11\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m' '\e[0m).map(\e[36mmusic_note\e[0m => {\n\e[31m15 |\e[0m            \e[33mval\e\
    [0m \e[36mnote\e[0m = music_note.charAt(\e[31m0\e[0m)\n\e[31m16 |\e[0m       \
    \     \e[33mval\e[0m \e[36mbeats\e[0m = music_note.substring(\e[31m1\e[0m).split(\e\
    [31m'|'\e[0m).map(_.toInt).sum\n\e[31m17 |\e[0m            beats\n\e[31m18 |\e\
    [0m        }).toList\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required: List[\e\
    [1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.charAt(0)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.charAt(0)\n\
    \                val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                    val rest = music_string.charAt(0)\n              \
    \      val rest2 = music_string.substring(1).split(\"|\").map(music_string =>\
    \ {\n                        val rest3 = music_string.charAt(0)\n            \
    \            val rest4 = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                            val rest5 = music_string.charAt(0)\n     \
    \                       val rest6 = music_string.substring(1).split(\"|\").map(music_string\
    \ => {\n                                val rest7 = music_string.charAt(0)\n \
    \                               val rest8 = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                    val rest9 = music_string.charAt(0)\n\
    \                                    val rest10 = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                        val rest11\
    \ = music_string.charAt(0)\n                                        val rest12\
    \ = music_string.substring(1).split(\"o\").map(music_string => {\n           \
    \                                 val rest13 = music_string.charAt(0)\n      \
    \                                      val rest14 = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                val\
    \ rest15 = music_string.charAt(0)\n                                          \
    \      val rest16 = music_string.substring(1).split(\"o\").map(music_string =>\
    \ {\n                                                    val rest17 = music_string.charAt(0)\n\
    \                                                    val rest18 = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \       val rest19 = music_string.charAt(0)\n                                \
    \                        val rest20 = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                                                            val rest21\
    \ = music_string.charAt(0)\n                                                 \
    \           val rest22 = music_string.substring(1).split(\"|\").map(music_string\
    \ => {\n                                                                val rest23\
    \ = music_string.charAt(0)\n                                                 \
    \               val rest24 = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                                                                    val\
    \ rest25 = music_string.charAt(0)\n                                          \
    \                          val rest26 = music_string.substring(1).split(\"|\"\
    ).map(music_string => {\n                                                    \
    \                    val rest27 = music_string.charAt(0)\n                   \
    \                                                     val rest28 = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                           val rest29 = music_string.charAt(0)\n            \
    \                                                                val rest30 =\
    \ music_string.substring(1).split(\"|\").map(music_string => {\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz2szmp77.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpz2szmp77.scala:59:0 ----------------------------\e[0m\e[0m\n\e[31m59\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val music_list = music_string.split(\" \").map(_.toUpperCase)\n \
    \       val music_list_length = music_list.length\n        val music_list_beats\
    \ = music_list.map(music_list_length % 4 != 0).sum\n        val music_list_notes\
    \ = music_list.map(music_list_length % 4 == 0).sum\n        val music_list_notes_beats\
    \ = music_list_notes / music_list_beats\n        val music_list_notes_beats_length\
    \ = music_list_notes_beats.toLong\n        val music_list_notes_beats_length =\
    \ music_list_notes_beats_length.toInt\n        val music_list_notes_beats_length\
    \ = music_list_notes_beats_length * music_list_beats\n        val music_list_notes_beats_length\
    \ = music_list_notes_beats_length.toInt\n        val music_list_notes_beats_length\
    \ = music_list_notes_beats_length * music_list_beats\n        val music_list_notes_beats_length\
    \ = music_list_notes_beats_length.toInt\n        val music_list_notes_beats_length\
    \ = music_list_notes_beats_length * music_list_beats\n        val music_list_notes_beats_length\
    \ = music_list_notes_beats_length.toInt\n        val music_list_notes_beats_length\
    \ = music_list_notes_beats_length * music_list_beats\n        val music_list_notes_beats_length\
    \ = music_list_notes_beats_length.toInt\n        val music_list_notes_beats_length\
    \ = music_list_notes_beats_length * music_list_beats\n        val music_list_notes_beats_length\
    \ = music_list_notes_beats_length.toInt\n        val music_list_notes_beats_length\
    \ = music_list_notes_beats_length * music_list_beats\n        val music_list_notes_beats_length\
    \ = music_list_notes_beats_length.toInt\n        val music_list_notes_beats_length\
    \ = music_list_notes_beats_length * music_list_beats\n        val music_list_notes_beats_length\
    \ = music_list_notes_beats_length.toInt\n        val music_list_notes_beats_length\
    \ = music_list_notes_beats_length * music_list_beats\n        val music_list_notes_beats_length\
    \ = music_list_notes_beats_length.toInt\n        val music_list_notes_beats_length\
    \ = music_list_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc46e52c3.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_notes_beats_length\e\
    [0m = music_list_notes_beats_length.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_notes_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_notes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc46e52c3.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_notes_beats_length\e\
    [0m = music_list_notes_beats_length * music_list_beats\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_notes_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_notes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc46e52c3.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_notes_beats_length\e\
    [0m = music_list_notes_beats_length.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_notes_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_notes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc46e52c3.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_notes_beats_length\e\
    [0m = music_list_notes_beats_length * music_list_beats\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_notes_beats_l"
  stdout: ''
  timestamp: 1659800070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ note = music_string.charAt(0)\n            val rest = music_string.substring(1).trim\n\
    \            val beats = rest match {\n                case \".\" => 0\n     \
    \           case \".|\" => 1\n                case _ => 2\n            }\n   \
    \         val note_to_beats = Map(\n                'o' => 4,\n              \
    \  'o|' => 2,\n                '.|' => 1\n            )\n            note_to_beats(note)\
    \ * beats\n        }).toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpxsdb_cke.scala:23:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[31m'o'\e[0m => \e[31m4\e[0m,\n\e[31m\e\
    [31m   |\e[0m                ^^^\e[0m\n\e[31m   |\e[0m                not a legal\
    \ formal parameter\n\e[31m\e[31m-- Error: /tmp/tmpxsdb_cke.scala:24:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[31m'o\e[0m|' => \e[31m2\e[0m,\n\e\
    [31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0msymbol literal 'o is\
    \ no longer supported,\n\e[31m   |\e[0muse a string literal \"o\" or an application\
    \ Symbol(\"o\") instead,\n\e[31m   |\e[0mor enclose in braces '{o} if you want\
    \ a quoted expression.\n\e[31m   |\e[0mFor now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0mthe idiom, but this possibility might no longer be\
    \ available in the future.\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxsdb_cke.scala:24:21\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                \e[31m'o\e\
    [0m|' => \e[31m2\e[0m,\n\e[31m\e[31m   |\e[0m                     ^^\e[0m\n\e\
    [31m   |\e[0m                     '{' expected, but '=>' found\n\e[31m\e[31m--\
    \ Error: /tmp/tmpxsdb_cke.scala:25:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                '.|' => \e[31m1\e[0m\n\e[31m\e[31m  \
    \ |\e[0m                ^\e[0m\n\e[31m   |\e[0m                unclosed character\
    \ literal\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxsdb_cke.scala:27:26\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            note_to_beats(note)\
    \ * beats\n\e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Found:    (note : Char)\n\e[31m   |\e[0m   \
    \                       Required: Nothing\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpxsdb_cke.scala:28:10 -----------------------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\
    \e[31m   |\e[0m          No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m          where:    B is a type variable\n6 errors"
  stdout: ''
  timestamp: 1659800070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        music_string.split(\" \").map(music_string => {\n            val\
    \ notes = music_string.split(\"|\")\n            val notes_length = notes.length\n\
    \            val notes_last_beat = notes(notes_length - 1).toInt\n           \
    \ val notes_last_beat = notes_last_beat * 4\n            notes_last_beat\n   \
    \     }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptmac_cig.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mnotes_last_beat\e[0m\
    \ = notes_last_beat * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_last_beat is already defined as \e[33mvalue\e[0m \e\
    [35mnotes_last_beat\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800068
