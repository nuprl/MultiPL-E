name: HumanEval_122_add_elements
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a non-empty array of integers arr and an integer k, return\n    //\
  \ the sum of the elements with at most two digits from the first k elements of arr.\n\
  \    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n    // Output:\
  \ 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    //\
  \ 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
  \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
  \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
  \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
  \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
  \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n \
  \   assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
  \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n  \
  \  assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
completions: ["        val arr = arr.toArray\n        val len = arr.length\n     \
    \   val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n      \
    \  var i = 0\n        while (i < k) {\n            sum += arr(i)\n           \
    \ i += 1\n        }\n        val maxTwoDigit = arr.take(k).max\n        val maxTwoDigitIndex\
    \ = arr.indexOf(maxTwoDigit)\n        val maxTwoDigitIndex2 = maxTwoDigitIndex\
    \ + 1\n        while (i < len) {\n            if (arr(i) > maxTwoDigit) {\n  \
    \              sum += arr(i)\n                i += 1\n            } else if (arr(i)\
    \ == maxTwoDigit) {\n                sum += arr(i)\n                i += 1\n \
    \           } else if (arr(i) < maxTwoDigit) {\n                sum += arr(i)\n\
    \                i += 1\n            } else if (arr(i) == maxTwoDigit) {\n   \
    \             sum += arr(i)\n                i += 1\n            } else if (arr(i)\
    \ > maxTwoDigit) {\n                sum += arr(i)\n                i += 1\n  \
    \          } else if (arr(i) == maxTwoDigit) {\n                sum += arr(i)\n\
    \                i += 1\n            } else if (arr(i) < maxTwoDigit) {\n    \
    \            sum += arr(i)\n                i += 1\n            } else if (arr(i)\
    \ == maxTwoDigit) {\n                sum += arr(i)\n                i += 1\n \
    \           } else if (arr(i) > maxTwoDigit) {\n                sum += arr(i)\n\
    \                i += 1\n            } else if (arr(i) == maxTwoDigit) {\n   \
    \             sum += arr(i)\n                i += 1\n            } else if (arr(i)\
    \ < maxTwoDigit) {\n                sum += arr(i)\n                i += 1\n  \
    \          } else if (arr(i) == maxTwoDigit) {\n                sum += arr(i)\n\
    \                i += 1\n            } else if (arr(i) > maxTwoDigit) {\n    \
    \            sum += arr(i)\n                i += 1\n            } else if (arr(i)\
    \ == maxTwoDigit) {\n                sum += arr(i)\n                i += 1\n \
    \           } else if (arr(i) < maxTwoDigit) {\n                sum += arr(i)\n\
    \                i += 1\n            } else if (arr(i) == maxTwoDigit) {\n   \
    \             sum += arr(i)\n                i += 1\n            } else if (arr(i)\
    \ > maxTwoDigit) {\n                sum += arr(i)\n                i += 1\n  \
    \          } else if (arr(i) == maxTwoDigit) {\n                sum += arr(i)\n\
    \                i += 1\n            } else if (arr(i) < maxTwoDigit) {\n    \
    \            sum += arr(i)\n                i += 1\n            } else if (arr(i)\
    \ == maxTwoDigit) {\n                sum += arr(i)\n                i += 1\n \
    \           } else if (arr(i) > maxTwoDigit) {\n                sum += arr(i)\n\
    \                i += 1\n            } else if (arr(i) == maxTwoDigit) {\n   \
    \             sum += arr(i)\n                i += 1\n            } else if (arr(i)\
    \ < maxTwoDigit) {\n                sum += arr(i)\n                i += 1\n  \
    \          } else if (arr(i) == maxTwoDigit) {\n                sum += arr(i)\n\
    \                i += 1\n            } else if (arr(i) > maxTwoDigit) {\n    \
    \            sum += arr", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val maxLength = arr.take(k).map(_.toString).map(_.length).max\n     \
    \   arr.take(k).foreach(x => {\n            val str = x.toString\n           \
    \ val length = str.length\n            val index = str.indexOf(\"0\")\n      \
    \      if (index != -1) {\n                val digit = str.substring(index + 1,\
    \ length)\n                if (digit.length <= maxLength) {\n                \
    \    result += x\n                }\n            }\n        })\n        result.sum",
  "        val result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n\
    \        val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        ", "        val arr\
    \ = arr.toList\n        val len = arr.length\n        val sum = 0\n        val\
    \ maxSum = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum2 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum3 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum4\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum5 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum6 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum7\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum8 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum9 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum10\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum11 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum12 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum13\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum14 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum15 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum16\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum17 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum18 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum19\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum20 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum21 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum22\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum23 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum24 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum25\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum26 = ", "        val sum\
    \ = 0L\n        val arr = arr.toList\n        val len = arr.length\n        val\
    \ maxLen = len - k\n        val maxLenList = arr.take(maxLen)\n        val maxLenSum\
    \ = maxLenList.foldLeft(0L)(_ + _)\n        val maxLenSumList = maxLenList.foldLeft(0L)(_\
    \ + _)\n        val maxLenSumList = maxLenList.foldLeft(0L)(_ + _)\n        val\
    \ maxLenSumList = maxLenList.foldLeft(0L)(_ + _)\n        val maxLenSumList =\
    \ maxLenList.foldLeft(0L)(_ + _)\n        val maxLenSumList = maxLenList.foldLeft(0L)(_\
    \ + _)\n        val maxLenSumList = maxLenList.foldLeft(0L)(_ + _)\n        val\
    \ maxLenSumList = maxLenList.foldLeft(0L)(_ + _)\n        val maxLenSumList =\
    \ maxLenList.foldLeft(0L)(_ + _)\n        val maxLenSumList = maxLenList.foldLeft(0L)(_\
    \ + _)\n        val maxLenSumList = maxLenList.foldLeft(0L)(_ + _)\n        val\
    \ maxLenSumList = maxLenList.foldLeft(0L)(_ + _)\n        val maxLenSumList =\
    \ maxLenList.foldLeft(0L)(_ + _)\n        val maxLenSumList = maxLenList.foldLeft(0L)(_\
    \ + _)\n        val maxLenSumList = maxLenList.foldLeft(0L)(_ + _)\n        val\
    \ maxLenSumList = maxLenList.foldLeft(0L)(_ + _)\n        val maxLenSumList =\
    \ maxLenList.foldLeft(0L)(_ + _)\n        val maxLenSumList = maxLenList.foldLeft(0L)(_\
    \ + _)\n        val maxLenSumList = maxLenList.foldLeft(0L)(_ + _)\n        val\
    \ maxLenSumList = maxLenList.foldLeft(0L)(_ + _)\n        val maxLenSumList =\
    \ maxLenList.foldLeft(0L)(_ + _)\n        val maxLenSumList = maxLenList.foldLeft(0L)(_\
    \ + _)\n        val maxLenSumList = maxLenList.foldLe", "        val result =\
    \ new mutable.ListBuffer[Long]()\n        val maxCount = arr.take(k).count(_ <\
    \ 10)\n        val maxCount2 = arr.take(k).count(_ < 100)\n        val maxCount3\
    \ = arr.take(k).count(_ < 1000)\n        val maxCount4 = arr.take(k).count(_ <\
    \ 10000)\n        val maxCount5 = arr.take(k).count(_ < 100000)\n        val maxCount6\
    \ = arr.take(k).count(_ < 1000000)\n        val maxCount7 = arr.take(k).count(_\
    \ < 10000000)\n        val maxCount8 = arr.take(k).count(_ < 100000000)\n    \
    \    val maxCount9 = arr.take(k).count(_ < 1000000000)\n        val maxCount10\
    \ = arr.take(k).count(_ < 10000000000)\n        val maxCount11 = arr.take(k).count(_\
    \ < 100000000000)\n        val maxCount12 = arr.take(k).count(_ < 1000000000000)\n\
    \        val maxCount13 = arr.take(k).count(_ < 1000000000000)\n        val maxCount14\
    \ = arr.take(k).count(_ < 10000000000000)\n        val maxCount15 = arr.take(k).count(_\
    \ < 10000000000000)\n        val maxCount16 = arr.take(k).count(_ < 100000000000000)\n\
    \        val maxCount17 = arr.take(k).count(_ < 100000000000000)\n        val\
    \ maxCount18 = arr.take(k).count(_ < 1000000000000000)\n        val maxCount19\
    \ = arr.take(k).count(_ < 1000000000000000)\n        val maxCount20 = arr.take(k).count(_\
    \ < 10000000000000000)\n        val maxCount21 = arr.take(k).count(_ < 10000000000000000)\n\
    \        val maxCount22 = arr.take(k).count(_ < 100000000000000000)\n        val\
    \ maxCount23 = arr.take(k).count(_ < 100000000000000000)\n        val maxCount24\
    \ = arr.take(k).count(_ < 1000000000000000000)\n        val maxCount25 = arr.take(k).count(_\
    \ < 1000000000000000000)\n        val maxCount26 = arr.take(k).count(_ < 10000000000000000000)\n\
    \        val maxCount27 = arr.take(k).count(_ < 10000000000000000000)\n      \
    \  val maxCount28 = arr.take(k).count(_ < 100000000000000000000)\n        val\
    \ maxCount29 = arr.take(k).count(_ < 100000000000000000000)\n        val maxCount30\
    \ = arr.take(k).count(_ < 1000000000000000000000)\n        val max", "       \
    \ val result = new mutable.ListBuffer[Long]()\n        val arr = arr.toList\n\
    \        val len = arr.size\n        val maxLen = arr.take(k).size\n        val\
    \ maxLen2 = maxLen / 2\n        val maxLen3 = maxLen - maxLen2\n        val maxLen4\
    \ = maxLen - maxLen3\n        val maxLen5 = maxLen - maxLen4\n        val maxLen6\
    \ = maxLen - maxLen5\n        val maxLen7 = maxLen - maxLen6\n        val maxLen8\
    \ = maxLen - maxLen7\n        val maxLen9 = maxLen - maxLen8\n        val maxLen10\
    \ = maxLen - maxLen9\n        val maxLen11 = maxLen - maxLen10\n        val maxLen12\
    \ = maxLen - maxLen11\n        val maxLen13 = maxLen - maxLen12\n        val maxLen14\
    \ = maxLen - maxLen13\n        val maxLen15 = maxLen - maxLen14\n        val maxLen16\
    \ = maxLen - maxLen15\n        val maxLen17 = maxLen - maxLen16\n        val maxLen18\
    \ = maxLen - maxLen17\n        val maxLen19 = maxLen - maxLen18\n        val maxLen20\
    \ = maxLen - maxLen19\n        val maxLen21 = maxLen - maxLen20\n        val maxLen22\
    \ = maxLen - maxLen21\n        val maxLen23 = maxLen - maxLen22\n        val maxLen24\
    \ = maxLen - maxLen23\n        val maxLen25 = maxLen - maxLen24\n        val maxLen26\
    \ = maxLen - maxLen25\n        val maxLen27 = maxLen - maxLen26\n        val maxLen28\
    \ = maxLen - maxLen27\n        val maxLen29 = maxLen - maxLen28\n        val maxLen30\
    \ = maxLen - maxLen29\n        val maxLen31 = maxLen - maxLen30\n        val maxLen32\
    \ = maxLen - maxLen31\n        val maxLen33 = maxLen - maxLen32\n        val maxLen34\
    \ = maxLen - maxLen33\n        val maxLen35 = maxLen - maxLen34\n        val maxLen36\
    \ = maxLen - maxLen35\n        val maxLen37 = maxLen - maxLen36\n        val maxLen38\
    \ = maxLen - maxLen37\n        val maxLen39 = max", "        val arr = arr.toList\n\
    \        val len = arr.length\n        val maxLen = arr.take(k).max\n        val\
    \ maxLen2 = maxLen / 2\n        val sum = 0L\n        for (i <- 0 until k) {\n\
    \            val curr = arr(i)\n            val next = (i + 1) % len\n       \
    \     val next2 = next / 2\n            val next3 = next / 3\n            val\
    \ next4 = next / 4\n            val next5 = next / 5\n            val next6 =\
    \ next / 6\n            val next7 = next / 7\n            val next8 = next / 8\n\
    \            val next9 = next / 9\n            val next10 = next / 10\n      \
    \      val next11 = next / 11\n            val next12 = next / 12\n          \
    \  val next13 = next / 13\n            val next14 = next / 14\n            val\
    \ next15 = next / 15\n            val next16 = next / 16\n            val next17\
    \ = next / 17\n            val next18 = next / 18\n            val next19 = next\
    \ / 19\n            val next20 = next / 20\n            val next21 = next / 21\n\
    \            val next22 = next / 22\n            val next23 = next / 23\n    \
    \        val next24 = next / 24\n            val next25 = next / 25\n        \
    \    val next26 = next / 26\n            val next27 = next / 27\n            val\
    \ next28 = next / 28\n            val next29 = next / 29\n            val next30\
    \ = next / 30\n            val next31 = next / 31\n            val next32 = next\
    \ / 32\n            val next33 = next / 33\n            val next34 = next / 34\n\
    \            val next35 = next / 35\n            val next36 = next / 36\n    \
    \        val next37 = next / 37\n            val next38 = next / 38\n        \
    \    val next39 = next / 39\n            val next40 = next / 40\n            val\
    \ next41 = next / 41\n            val next42 = next / 42\n            val next43\
    \ = next / 43\n            val next44 = next / 44\n            val next45 = next\
    \ / 45\n            val next46 = next / 46\n            val next47 = next / 47\n\
    \            val next48 = next / 48\n            val next49 = next / 49\n    \
    \        val next50 = next / 50\n            val next51 = next / 51\n        \
    \    val next52 = next / 52\n            ", "        val arr = arr.toList\n  \
    \      val result = arr.take(k).foldLeft(0)(_ + _)\n        val rest = arr.drop(k)\n\
    \        rest.foldLeft(result)(_ + _)", "        var sum = 0L\n        var i =\
    \ 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n\
    \        }\n        val maxLength = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLength2 = arr.take(k).map(_.toString).map(_.length).max\n    \
    \    val maxLength3 = arr.take(k).map(_.toString).map(_.length).max\n        val\
    \ maxLength4 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength5\
    \ = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength6 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLength7 = arr.take(k).map(_.toString).map(_.length).max\n    \
    \    val maxLength8 = arr.take(k).map(_.toString).map(_.length).max\n        val\
    \ maxLength9 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength10\
    \ = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength11 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLength12 = arr.take(k).map(_.toString).map(_.length).max\n   \
    \     val maxLength13 = arr.take(k).map(_.toString).map(_.length).max\n      \
    \  val maxLength14 = arr.take(k).map(_.toString).map(_.length).max\n        val\
    \ maxLength15 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength16\
    \ = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength17 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLength18 = arr.take(k).map(_.toString).map(_.length).max\n   \
    \     val maxLength19 = arr.take(k).map(_.toString).map(_.length).max\n      \
    \  val maxLength20 = arr.take(k).map(_.toString).map(_.length).max\n        val\
    \ maxLength21 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength22\
    \ = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength23 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLength24 = arr.take(k).map(_.toString).map(_.length).max\n   \
    \     val maxLength25 = arr.take(k).map(_.toString).map(_.length).max\n      \
    \  val ", "        val arr = arr.toList\n        val len = arr.size\n        val\
    \ maxLen = len - k\n        val maxSum = arr.take(k).sum\n        val maxSum2\
    \ = arr.take(maxLen).sum\n        val maxSum3 = arr.take(maxLen+1).sum\n     \
    \   val maxSum4 = arr.take(maxLen+2).sum\n        val maxSum5 = arr.take(maxLen+3).sum\n\
    \        val maxSum6 = arr.take(maxLen+4).sum\n        val maxSum7 = arr.take(maxLen+5).sum\n\
    \        val maxSum8 = arr.take(maxLen+6).sum\n        val maxSum9 = arr.take(maxLen+7).sum\n\
    \        val maxSum10 = arr.take(maxLen+8).sum\n        val maxSum11 = arr.take(maxLen+9).sum\n\
    \        val maxSum12 = arr.take(maxLen+10).sum\n        val maxSum13 = arr.take(maxLen+11).sum\n\
    \        val maxSum14 = arr.take(maxLen+12).sum\n        val maxSum15 = arr.take(maxLen+13).sum\n\
    \        val maxSum16 = arr.take(maxLen+14).sum\n        val maxSum17 = arr.take(maxLen+15).sum\n\
    \        val maxSum18 = arr.take(maxLen+16).sum\n        val maxSum19 = arr.take(maxLen+17).sum\n\
    \        val maxSum20 = arr.take(maxLen+18).sum\n        val maxSum21 = arr.take(maxLen+19).sum\n\
    \        val maxSum22 = arr.take(maxLen+20).sum\n        val maxSum23 = arr.take(maxLen+21).sum\n\
    \        val maxSum24 = arr.take(maxLen+22).sum\n        val maxSum25 = arr.take(maxLen+23).sum\n\
    \        val maxSum26 = arr.take(maxLen+24).sum\n        val maxSum27 = arr.take(maxLen+25).sum\n\
    \        val maxSum28 = arr.take(maxLen+26).sum\n        val maxSum29 = arr.take(maxLen+27).sum\n\
    \        val maxSum30 = arr.take(maxLen+28).sum\n        val maxSum31 = arr.take(maxLen+29).sum\n\
    \        val maxSum32 = arr.take(maxLen+30).sum\n", "        val result = new\
    \ mutable.ListBuffer[Long]()\n        var sum = 0L\n        var i = 0\n      \
    \  while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n\
    \        val maxTwoDigits = arr.take(k).map(_.toString.toInt).max\n        val\
    \ maxTwoDigitsIndex = arr.take(k).map(_.toString.toInt).indexOfMax\n        val\
    \ maxTwoDigitsSum = arr.take(k).map(_.toString.toInt).sum\n        while (i <\
    \ arr.size) {\n            val twoDigits = arr(i).toString.toInt\n           \
    \ if (twoDigits > maxTwoDigits) {\n                result += sum\n           \
    \     sum = 0L\n                i += 1\n            } else if (twoDigits == maxTwoDigits)\
    \ {\n                sum += maxTwoDigitsSum\n                i += 1\n        \
    \    } else {\n                sum += twoDigits\n                i += 1\n    \
    \        }\n        }\n        result += sum\n        result.toLong", "      \
    \  val arr = arr.toList\n        val len = arr.length\n        val maxLen = arr.take(k).max\n\
    \        val maxLen2 = arr.take(k).filter(_ % 10 == 0).max\n        val maxLen3\
    \ = arr.take(k).filter(_ % 10 == 1).max\n        val maxLen4 = arr.take(k).filter(_\
    \ % 10 == 2).max\n        val maxLen5 = arr.take(k).filter(_ % 10 == 3).max\n\
    \        val maxLen6 = arr.take(k).filter(_ % 10 == 4).max\n        val maxLen7\
    \ = arr.take(k).filter(_ % 10 == 5).max\n        val maxLen8 = arr.take(k).filter(_\
    \ % 10 == 6).max\n        val maxLen9 = arr.take(k).filter(_ % 10 == 7).max\n\
    \        val maxLen10 = arr.take(k).filter(_ % 10 == 8).max\n        val maxLen11\
    \ = arr.take(k).filter(_ % 10 == 9).max\n        val maxLen12 = arr.take(k).filter(_\
    \ % 10 == 10).max\n        val maxLen13 = arr.take(k).filter(_ % 10 == 11).max\n\
    \        val maxLen14 = arr.take(k).filter(_ % 10 == 12).max\n        val maxLen15\
    \ = arr.take(k).filter(_ % 10 == 13).max\n        val maxLen16 = arr.take(k).filter(_\
    \ % 10 == 14).max\n        val maxLen17 = arr.take(k).filter(_ % 10 == 15).max\n\
    \        val maxLen18 = arr.take(k).filter(_ % 10 == 16).max\n        val maxLen19\
    \ = arr.take(k).filter(_ % 10 == 17).max\n        val maxLen20 = arr.take(k).filter(_\
    \ % 10 == 18).max\n        val maxLen21 = arr.take(k).filter(_ % 10 == 19).max\n\
    \        val maxLen22 = arr.take(k).filter(_ % 10 == 20).max\n        val maxLen23\
    \ = arr.take(k).filter(_ % 10 == 21).max\n        val maxLen24 = arr.take(k).filter(_\
    \ % 10 == 22).max\n        val maxLen25 = arr.take(k).filter(_ % 10 == 23).max\n\
    \        val maxLen26 = arr.take(k).filter(_ % 10 == 24).max\n        val maxLen27\
    \ = arr.take(k).filter(_ % 10 == 25).max\n        val maxLen28 = arr.take(k).filter(_\
    \ % 10 == 26).max", "        val arr = arr.toArray\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val maxLength = arr.length - k\n        val maxLength2 = maxLength /\
    \ 2\n        val maxLength3 = maxLength * 2\n        val maxLength4 = maxLength\
    \ * 3\n        val maxLength5 = maxLength * 4\n        val maxLength6 = maxLength\
    \ * 5\n        val maxLength7 = maxLength * 6\n        val maxLength8 = maxLength\
    \ * 7\n        val maxLength9 = maxLength * 8\n        val maxLength10 = maxLength\
    \ * 9\n        val maxLength11 = maxLength * 10\n        val maxLength12 = maxLength\
    \ * 11\n        val maxLength13 = maxLength * 12\n        val maxLength14 = maxLength\
    \ * 13\n        val maxLength15 = maxLength * 14\n        val maxLength16 = maxLength\
    \ * 15\n        val maxLength17 = maxLength * 16\n        val maxLength18 = maxLength\
    \ * 17\n        val maxLength19 = maxLength * 18\n        val maxLength20 = maxLength\
    \ * 19\n        val maxLength21 = maxLength * 20\n        val maxLength22 = maxLength\
    \ * 21\n        val maxLength23 = maxLength * 22\n        val maxLength24 = maxLength\
    \ * 23\n        val maxLength25 = maxLength * 24\n        val maxLength26 = maxLength\
    \ * 25\n        val maxLength27 = maxLength * 26\n        val maxLength28 = maxLength\
    \ * 27\n        val maxLength29 = maxLength * 28\n        val maxLength30 = maxLength\
    \ * 29\n        val maxLength31 = maxLength * 30\n        val maxLength32 = maxLength\
    \ * 31\n        val maxLength33 = maxLength * 32\n        val maxLength34 = maxLength\
    \ * 33\n        val maxLength35 = maxLength * 34\n        val maxLength36 = maxLength\
    \ * 35\n        val maxLength37 = maxLength * 36\n        val maxLength38 = maxLength\
    \ * 37\n        val maxLength39 = maxLength * 38\n        val maxLength40 = maxLength\
    \ * 39\n        val maxLength41 = maxLength * 40\n        val maxLength42 = maxLength\
    \ * 41\n        val maxLength43 = maxLength * 42\n        val maxLength44 = maxLength\
    \ * 43\n        val maxLength45 = maxLength * 44\n        val maxLength46 = maxLength\
    \ * 45\n        ", "        val result = new mutable.ListBuffer[Long]()\n    \
    \    val arr = arr.toList\n        val len = arr.size\n        val maxLen = len\
    \ - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n  \
    \      val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val\
    \ maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8\
    \ = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen\
    \ / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n\
    \        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n    \
    \    val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val\
    \ maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19\
    \ = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen\
    \ / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n\
    \        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n    \
    \    val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val\
    \ maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30\
    \ = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen\
    \ / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n\
    \        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n    \
    \    val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val\
    \ maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41\
    \ = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen\
    \ / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n\
    \        val maxLen4", "        val arr = arr.toList\n        val len = arr.length\n\
    \        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n \
    \       var i = 0\n        while (i < len) {\n            sum += arr(i)\n    \
    \        if (sum >= 10) {\n                sum += arr(i + k)\n               \
    \ i += k\n            } else {\n                i += 1\n            }\n      \
    \      if (sum > 10) {\n                result.add(sum)\n                sum =\
    \ 0\n            }\n        }\n        if (sum > 0) {\n            result.add(sum)\n\
    \        }\n        sum = 0L\n        for (i <- result) {\n            sum +=\
    \ i\n        }\n        return sum", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        for(i <- 0 until k) {\n            sum += arr(i)\n\
    \        }\n        for(i <- 0 until k) {\n            val x = arr(i)\n      \
    \      val y = arr(i+k)\n            if(x < y) {\n                sum += x\n \
    \               result.add(x)\n            } else {\n                sum += y\n\
    \                result.add(y)\n            }\n        }\n        sum", "    \
    \    val result = new mutable.ListBuffer[Long]()\n        val arr = arr.toList\n\
    \        val len = arr.length\n        val maxTwoDigit = arr.take(k).map(_.toString.length).max\n\
    \        for(i <- 0 until len) {\n            val twoDigit = arr(i).toString.length\n\
    \            if(twoDigit <= maxTwoDigit) {\n                result += arr(i)\n\
    \            }\n        }\n        result.sum", "        var sum = 0L\n      \
    \  var i = 0\n        while (i < k) {\n            sum += arr(i)\n           \
    \ i += 1\n        }\n        val maxLength = arr.take(k).map(_.toString.length).max\n\
    \        val maxLength2 = arr.take(k).map(_.toString.length).filter(_ > 1).max\n\
    \        val maxLength3 = arr.take(k).map(_.toString.length).filter(_ > 2).max\n\
    \        val maxLength4 = arr.take(k).map(_.toString.length).filter(_ > 3).max\n\
    \        val maxLength5 = arr.take(k).map(_.toString.length).filter(_ > 4).max\n\
    \        val maxLength6 = arr.take(k).map(_.toString.length).filter(_ > 5).max\n\
    \        val maxLength7 = arr.take(k).map(_.toString.length).filter(_ > 6).max\n\
    \        val maxLength8 = arr.take(k).map(_.toString.length).filter(_ > 7).max\n\
    \        val maxLength9 = arr.take(k).map(_.toString.length).filter(_ > 8).max\n\
    \        val maxLength10 = arr.take(k).map(_.toString.length).filter(_ > 9).max\n\
    \        val maxLength11 = arr.take(k).map(_.toString.length).filter(_ > 10).max\n\
    \        val maxLength12 = arr.take(k).map(_.toString.length).filter(_ > 11).max\n\
    \        val maxLength13 = arr.take(k).map(_.toString.length).filter(_ > 12).max\n\
    \        val maxLength14 = arr.take(k).map(_.toString.length).filter(_ > 13).max\n\
    \        val maxLength15 = arr.take(k).map(_.toString.length).filter(_ > 14).max\n\
    \        val maxLength16 = arr.take(k).map(_.toString.length).filter(_ > 15).max\n\
    \        val maxLength17 = arr.take(k).map(_.toString.length).filter(_ > 16).max\n\
    \        val maxLength18 = arr.take(k).map(_.toString.length).filter(_ > 17).max\n\
    \        val maxLength19 = arr.take(k).map(_.toString.length).filter(_ > 18).max\n\
    \        val maxLength20 = arr.take(k).map(_.toString.length).filter(_ > 19).max\n\
    \        val maxLength21 = arr.take(k).map(_.toString.length).filter(_ > 20).max\n\
    \        val maxLength22 = arr.take(k).map(_.toString.length).filter(_ > 21).max\n\
    \        val maxLength", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val len = arr.length\n        val maxLen = k\n        val maxLenInd =\
    \ arr.lastIndexWhere(_ <= maxLen)\n        val maxLenIndInd = arr.lastIndexWhere(_\
    \ <= maxLenInd)\n        val maxLenIndIndInd = arr.lastIndexWhere(_ <= maxLenIndInd)\n\
    \        val maxLenIndIndIndInd = arr.lastIndexWhere(_ <= maxLenIndIndInd)\n \
    \       val maxLenIndIndIndIndInd = arr.lastIndexWhere(_ <= maxLenIndIndIndInd)\n\
    \        val maxLenIndIndIndIndIndInd = arr.lastIndexWhere(_ <= maxLenIndIndIndIndInd)\n\
    \        val maxLenIndIndIndIndIndIndInd = arr.lastIndexWhere(_ <= maxLenIndIndIndIndIndInd)\n\
    \        val maxLenIndIndIndIndIndIndIndInd = arr.lastIndexWhere(_ <= maxLenIndIndIndIndIndIndInd)\n\
    \        val maxLenIndIndIndIndIndIndIndIndInd = arr.lastIndexWhere(_ <= maxLenIndIndIndIndIndIndIndIndInd)\n\
    \        val maxLenIndIndIndIndIndIndIndIndIndInd = arr.lastIndexWhere(_ <= maxLenIndIndIndIndIndIndIndIndIndInd)\n\
    \        val maxLenIndIndIndIndIndIndIndIndIndIndIndInd = arr.lastIndexWhere(_\
    \ <= maxLenIndIndIndIndIndIndIndIndIndIndIndIndInd)\n        val maxLenIndIndIndIndIndIndIndIndIndIndIndIndIndInd\
    \ = arr.lastIndexWhere(_ <= maxLenIndIndIndIndIndIndIndIndIndIndIndIndIndIndInd)\n\
    \        val maxLenIndIndIndIndIndIndIndIndIndIndIndIndIn", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        val maxLength = arr.take(k).map(_.toString.length).max\n\
    \        arr.take(k).foreach(x => {\n            val str = x.toString.padRight(maxLength,\
    \ \"0\")\n            val sum = (str.length - 1).toLong * str.drop(str.length\
    \ - 1).toLong + str.head.toLong\n            result.add(sum)\n        })\n   \
    \     result.sum", "        val arr = arr.toList\n        val len = arr.length\n\
    \        val maxNum = arr.take(k).max\n        val maxNumIndex = arr.lastIndexWhere(x\
    \ => x == maxNum)\n        val maxNumDigit = maxNum.toString.length\n        val\
    \ maxNumDigitIndex = arr.lastIndexWhere(x => x == maxNum.toString.toLong)\n  \
    \      val maxNumDigitDiff = maxNumDigit - maxNumDigitIndex\n        val maxNumDigitDiffIndex\
    \ = arr.lastIndexWhere(x => x == maxNum.toString.toLong - maxNumDigit)\n     \
    \   val maxNumDigitDiffIndex2 = arr.lastIndexWhere(x => x == maxNum.toString.toLong\
    \ - maxNumDigit - 1)\n        val maxNumDigitDiffIndex3 = arr.lastIndexWhere(x\
    \ => x == maxNum.toString.toLong - maxNumDigit - 2)\n        val maxNumDigitDiffIndex4\
    \ = arr.lastIndexWhere(x => x == maxNum.toString.toLong - maxNumDigit - 3)\n \
    \       val maxNumDigitDiffIndex5 = arr.lastIndexWhere(x => x == maxNum.toString.toLong\
    \ - maxNumDigit - 4)\n        val maxNumDigitDiffIndex6 = arr.lastIndexWhere(x\
    \ => x == maxNum.toString.toLong - maxNumDigit - 5)\n        val maxNumDigitDiffIndex7\
    \ = arr.lastIndexWhere(x => x == maxNum.toString.toLong - maxNumDigit - 6)\n \
    \       val maxNumDigitDiffIndex8 = arr.lastIndexWhere(x => x == maxNum.toString.toLong\
    \ - maxNumDigit - 7)\n        val maxNumDigitDiffIndex9 = arr.lastIndexWhere(x\
    \ => x == maxNum.toString.toLong - maxNumDigit - 8)\n        val maxNumDigitDiffIndex10\
    \ = arr.lastIndexWhere(x => x == maxNum.toString.toLong - maxNumDigit - 9)\n \
    \       val maxNumDigitDiffIndex11 = arr.lastIndexWhere(x => x == maxNum.toString.toLong\
    \ - maxNumDigit - 10)\n        val maxNumDigitDiffIndex12 = arr.lastIndexWhere(x\
    \ => x == maxNum.toString.toLong - maxNumDigit - 11)\n        val maxNumDigitDiffIndex13\
    \ = arr.lastIndexWhere(x => x == maxNum.toString.toLong - maxNumDigit - 12)\n\
    \        val maxNumDigitDiffIndex14 = arr.lastIndexWhere(x => x == maxNum.toString.toLong\
    \ - maxNumDigit - 13)\n        val maxNumDigitDiffIndex15 = arr.lastIndexWhere(x\
    \ => x == max", "        val sum = 0L\n        val maxLength = arr.take(k).length\n\
    \        for(i <- 0 until k) {\n            sum += arr(i).toString.dropRight(maxLength)\n\
    \        }\n        sum", "        val sum = 0L\n        val arr = arr.toList\n\
    \        val len = arr.length\n        val maxLen = len - k\n        val maxLenIndex\
    \ = maxLen - 1\n        val maxLenValue = arr(maxLenIndex)\n        val maxLenValueIndex\
    \ = maxLenIndex - 1\n        val maxLenValueValue = arr(maxLenValueIndex)\n  \
    \      val maxLenValueIndexValue = maxLenValueIndex - 1\n        val maxLenValueIndexValueValue\
    \ = maxLenValueIndexValue - 1\n        for(i <- 0 until k){\n            val value\
    \ = arr(i)\n            val valueIndex = i\n            val valueValue = arr(valueIndex)\n\
    \            val valueIndexValue = valueIndex - 1\n            val valueIndexValueValue\
    \ = valueIndexValue - 1\n            val valueIndexValueValueValue = valueIndexValueValue\
    \ - 1\n            val valueIndexValueIndexValue = valueIndexValueIndexValue -\
    \ 1\n            val valueIndexValueIndexValueValue = valueIndexValueIndexValueValue\
    \ - 1\n            val valueIndexValueIndexIndexValueValue = valueIndexValueIndexIndexValueValue\
    \ - 1\n            val valueIndexValueIndexIndexValueValueValue = valueIndexValueIndexIndexValueValueValue\
    \ - 1\n            val valueIndexValueIndexIndexValueIndexValueValue = valueIndexValueIndexIndexValueIndexValueValue\
    \ - 1\n            val valueIndexValueIndexIndexValueIndexValueValueValue = valueIndexValueIndexIndexValueIndexValueValueValue\
    \ - 1\n            val valueIndexValueIndexIndexValueIndexValueIndexValueValue\
    \ = valueIndexValueIndexIndexValueIndexValueIndexValueValue - 1\n            val\
    \ valueIndexValueIndexIndexValueIndexValueIndexValueValueValue = valueIndexValueIndexValueIndexValueIndexValueIndexValueValue\
    \ - 1\n            val valueIndexValueIndexValueIndexValueIndexValueIndexValueValueValue\
    \ = valueIndexValueIndexValueIndexValueIndexValueIndexValueValueValue - 1\n  \
    \          val valueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueValueValue\
    \ = valueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueValueValue\
    \ - 1\n            val valueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueValueValue\
    \ = valueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueValueValue\
    \ - 1\n            val valueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueValueValue\
    \ = valueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueValueValue\
    \ - 1\n            val valueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueValueValue\
    \ = valueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex",
  "        var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum\
    \ += arr(i)\n            i += 1\n        }\n        val maxTwoDigits = arr.take(k).maxBy(_.toString.length)\n\
    \        sum += maxTwoDigits.toString.toLong\n        return sum", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n    \
    \    val maxLen = arr.take(k).max\n        val maxLenIndex = arr.lastIndexWhere(x\
    \ => x > maxLen)\n        val maxLenIndex2 = arr.lastIndexWhere(x => x > maxLen\
    \ && x > maxLenIndex)\n        val maxLenIndex3 = arr.lastIndexWhere(x => x >\
    \ maxLen && x > maxLenIndex && x > maxLenIndex2)\n        val maxLenIndex4 = arr.lastIndexWhere(x\
    \ => x > maxLen && x > maxLenIndex && x > maxLenIndex2 && x > maxLenIndex3)\n\
    \        val maxLenIndex5 = arr.lastIndexWhere(x => x > maxLen && x > maxLenIndex\
    \ && x > maxLenIndex2 && x > maxLenIndex3 && x > maxLenIndex4)\n        val maxLenIndex6\
    \ = arr.lastIndexWhere(x => x > maxLen && x > maxLenIndex && x > maxLenIndex2\
    \ && x > maxLenIndex3 && x > maxLenIndex4 && x > maxLenIndex5)\n        val maxLenIndex7\
    \ = arr.lastIndexWhere(x => x > maxLen && x > maxLenIndex && x > maxLenIndex2\
    \ && x > maxLenIndex3 && x > maxLenIndex4 && x > maxLenIndex5 && x > maxLenIndex6)\n\
    \        val maxLenIndex8 = arr.lastIndexWhere(x => x > maxLen && x > maxLenIndex\
    \ && x > maxLenIndex2 && x > maxLenIndex3 && x > maxLenIndex4 && x > maxLenIndex5\
    \ && x > maxLenIndex6 && x > maxLenIndex7)\n        val maxLenIndex9 = arr.lastIndexWhere(x\
    \ => x > maxLen && x > maxLenIndex && x > maxLenIndex2 && x > maxLenIndex3 &&\
    \ x > maxLenIndex4 && x > maxLenIndex5 && x > maxLenIndex6 && x > maxLenIndex7\
    \ && x > maxLenIndex8)\n        val maxLenIndex10 = arr.lastIndexWhere(x => x\
    \ > maxLen && x > maxLenIndex && x > maxLenIndex2 && x > maxLenIndex3 && x > maxLenIndex4\
    \ && x > maxLenIndex5 && x > maxLenIndex6 && x > maxLenIndex7 && x > maxLenIndex8\
    \ && x > maxLenIndex9)\n        val maxLenIndex11 = arr.lastIndexWhere(x => x\
    \ > maxLen && x > maxLenIndex && x > maxLenIndex2 && x > maxLenIndex3 && x > maxLenIndex4\
    \ && x > maxLenIndex5 && x > maxLenIndex6 && x > maxLenIndex7 && x > maxLenIndex8\
    \ && x > maxLenIndex9 && ", "        val result = mutable.ListBuffer.empty[Long]\n\
    \        val len = arr.length\n        val maxLen = arr.take(k).length\n     \
    \   val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4\
    \ = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen\
    \ / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n  \
    \      val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val\
    \ maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13\
    \ = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen\
    \ / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n\
    \        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n    \
    \    val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val\
    \ maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24\
    \ = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen\
    \ / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n\
    \        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n    \
    \    val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val\
    \ maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35\
    \ = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen\
    \ / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n\
    \        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n    \
    \    val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val\
    \ maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46\
    \ = maxLen / 46", "        val result = new mutable.ListBuffer[Long]()\n     \
    \   val len = arr.length\n        val maxDigit = arr.take(k).max\n        val\
    \ maxDigitIndex = arr.lastIndexWhere(x => x == maxDigit)\n        val maxDigitIndex2\
    \ = maxDigitIndex + 1\n        val maxDigitIndex3 = maxDigitIndex + 2\n      \
    \  val maxDigitIndex4 = maxDigitIndex + 3\n        val maxDigitIndex5 = maxDigitIndex\
    \ + 4\n        val maxDigitIndex6 = maxDigitIndex + 5\n        val maxDigitIndex7\
    \ = maxDigitIndex + 6\n        val maxDigitIndex8 = maxDigitIndex + 7\n      \
    \  val maxDigitIndex9 = maxDigitIndex + 8\n        val maxDigitIndex10 = maxDigitIndex\
    \ + 9\n        val maxDigitIndex11 = maxDigitIndex + 10\n        val maxDigitIndex12\
    \ = maxDigitIndex + 11\n        val maxDigitIndex13 = maxDigitIndex + 12\n   \
    \     val maxDigitIndex14 = maxDigitIndex + 13\n        val maxDigitIndex15 =\
    \ maxDigitIndex + 14\n        val maxDigitIndex16 = maxDigitIndex + 15\n     \
    \   val maxDigitIndex17 = maxDigitIndex + 16\n        val maxDigitIndex18 = maxDigitIndex\
    \ + 17\n        val maxDigitIndex19 = maxDigitIndex + 18\n        val maxDigitIndex20\
    \ = maxDigitIndex + 19\n        val maxDigitIndex21 = maxDigitIndex + 20\n   \
    \     val maxDigitIndex22 = maxDigitIndex + 21\n        val maxDigitIndex23 =\
    \ maxDigitIndex + 22\n        val maxDigitIndex24 = maxDigitIndex + 23\n     \
    \   val maxDigitIndex25 = maxDigitIndex + 24\n        val maxDigitIndex26 = maxDigitIndex\
    \ + 25\n        val maxDigitIndex27 = maxDigitIndex + 26\n        val maxDigitIndex28\
    \ = maxDigitIndex + 27\n        val maxDigitIndex29 = maxDigitIndex + 28\n   \
    \     val maxDigitIndex30 = maxDigitIndex + 29\n        val maxDigitIndex31 =\
    \ maxDigitIndex + 30\n        val maxDigitIndex32 = maxDigitIndex + 31\n     \
    \   val maxDigitIndex33 = maxDigitIndex + 32\n        val maxDigitIndex34 = maxDigitIndex\
    \ + 33\n        val maxDigitIndex35 = maxDigitIndex + 34\n        val maxDigitIndex36\
    \ = maxDigitIndex + 35\n        val maxDigitIndex37 = maxDigitIndex + 36\n   \
    \     val maxDigitIndex38 = maxDigitIndex", "        val result = mutable.ListBuffer.empty[Long]\n\
    \        var sum = 0\n        var i = 0\n        while (i < k) {\n           \
    \ sum += arr(i)\n            i += 1\n        }\n        arr.drop(i).foreach(x\
    \ => result += x)\n        sum += arr.take(i).sum\n        sum", "        val\
    \ result = new mutable.HashMap[Long, Long]()\n        arr.take(k).foreach(x =>\
    \ result.put(x, result.getOrElse(x, 0) + x))\n        val maxValue = result.getOrElse(arr(0),\
    \ 0L)\n        arr.drop(k).foreach(x => result.put(x, result.getOrElse(x, 0) +\
    \ x))\n        result.getOrElse(arr(0), 0L) + maxValue", "        val result =\
    \ new mutable.ListBuffer[Long]()\n        val len = arr.length\n        val maxTwoDigits\
    \ = arr.take(k).map(_.toString.length).max\n        val maxTwoDigitsSum = arr.take(k).map(_.toString).map(_.toLong).sum\n\
    \        val maxTwoDigitsSum2 = arr.take(k).map(_.toString.toLong).sum\n     \
    \   val maxTwoDigitsSum3 = arr.take(k).map(_.toString.toLong).sum\n        val\
    \ maxTwoDigitsSum4 = arr.take(k).map(_.toString.toLong).sum\n        val maxTwoDigitsSum5\
    \ = arr.take(k).map(_.toString.toLong).sum\n        val maxTwoDigitsSum6 = arr.take(k).map(_.toString.toLong).sum\n\
    \        val maxTwoDigitsSum7 = arr.take(k).map(_.toString.toLong).sum\n     \
    \   val maxTwoDigitsSum8 = arr.take(k).map(_.toString.toLong).sum\n        val\
    \ maxTwoDigitsSum9 = arr.take(k).map(_.toString.toLong).sum\n        val maxTwoDigitsSum10\
    \ = arr.take(k).map(_.toString.toLong).sum\n        val maxTwoDigitsSum11 = arr.take(k).map(_.toString.toLong).sum\n\
    \        val maxTwoDigitsSum12 = arr.take(k).map(_.toString.toLong).sum\n    \
    \    val maxTwoDigitsSum13 = arr.take(k).map(_.toString.toLong).sum\n        val\
    \ maxTwoDigitsSum14 = arr.take(k).map(_.toString.toLong).sum\n        val maxTwoDigitsSum15\
    \ = arr.take(k).map(_.toString.toLong).sum\n        val maxTwoDigitsSum16 = arr.take(k).map(_.toString.toLong).sum\n\
    \        val maxTwoDigitsSum17 = arr.take(k).map(_.toString.toLong).sum\n    \
    \    val maxTwoDigitsSum18 = arr.take(k).map(_.toString.toLong).sum\n        val\
    \ maxTwoDigitsSum19 = arr.take(k).map(_.toString.toLong).sum\n        val maxTwoDigitsSum20\
    \ = arr.take(k).map(_.toString.toLong).sum\n        val maxTwoDigitsSum21 = arr.take(k).map(_.toString.toLong).sum\n\
    \        val maxTwoDigitsSum22 = arr.take(k).map(_.toString.toLong).sum\n    \
    \    ", "        val arr = arr.toList\n        val len = arr.size\n        val\
    \ maxLen = arr.take(k).max\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen", "  \
    \      val sum = 0L\n        val arr = arr.toList\n        val len = arr.size\n\
    \        val maxTwoDigit = arr.take(k).max\n        val maxTwoDigitIndex = arr.lastIndexWhere(x\
    \ => x > maxTwoDigit)\n        val maxTwoDigitIndex = if (maxTwoDigitIndex ==\
    \ -1) k else maxTwoDigitIndex\n        val maxTwoDigitSum = arr.take(maxTwoDigitIndex).sum\n\
    \        val maxTwoDigitSumIndex = arr.lastIndexWhere(x => x > maxTwoDigitSum)\n\
    \        val maxTwoDigitSumIndex = if (maxTwoDigitSumIndex == -1) k else maxTwoDigitSumIndex\n\
    \        val maxTwoDigitSum = arr.take(maxTwoDigitSumIndex).sum\n        val maxTwoDigitSumIndex\
    \ = arr.lastIndexWhere(x => x > maxTwoDigitSum)\n        val maxTwoDigitSumIndex\
    \ = if (maxTwoDigitSumIndex == -1) k else maxTwoDigitSumIndex\n        val maxTwoDigitSum\
    \ = arr.take(maxTwoDigitSumIndex).sum\n        val maxTwoDigitSumIndex = arr.lastIndexWhere(x\
    \ => x > maxTwoDigitSum)\n        val maxTwoDigitSumIndex = if (maxTwoDigitSumIndex\
    \ == -1) k else maxTwoDigitSumIndex\n        val maxTwoDigitSum = arr.take(maxTwoDigitSumIndex).sum\n\
    \        val maxTwoDigitSumIndex = arr.lastIndexWhere(x => x > maxTwoDigitSum)\n\
    \        val maxTwoDigitSumIndex = if (maxTwoDigitSumIndex == -1) k else maxTwoDigitSumIndex\n\
    \        val maxTwoDigitSum = arr.take(maxTwoDigitSumIndex).sum\n        val maxTwoDigitSumIndex\
    \ = arr.lastIndexWhere(x => x > maxTwoDigitSum)\n        val maxTwoDigitSumIndex\
    \ = if (maxTwoDigitSumIndex == -1) k else maxTwoDigitSumIndex\n        val maxTwoDigitSum\
    \ = arr.take(maxTwoDigitSumIndex).sum\n        val maxTwoDigitSumIndex = arr.lastIndexWhere(x\
    \ => x > maxTwoDigitSum)\n        val maxTwoDigitSumIndex = if (maxTwoDigitSumIndex\
    \ == -1) k else maxTwoDigitSumIndex\n        val maxTwoDigitSum = arr.take(maxTwoDigitSumIndex).sum\n\
    \        val maxTwoDigitSumIndex = arr.lastIndexWhere(x => x > maxTwoDigitSum)\n\
    \        val maxTwoDigitSumIndex = if (maxTwoDigitSumIndex == -1) k else maxTwoDigitSumIndex\n\
    \        val maxTwoDigitSum = arr.take(maxTwoDigitSumIndex).sum", "        val\
    \ arr = arr.toList\n        val len = arr.size\n        val maxLen = len - k\n\
    \        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val\
    \ maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6\
    \ = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen\
    \ / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n\
    \        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n    \
    \    val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val\
    \ maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17\
    \ = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen\
    \ / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n\
    \        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n    \
    \    val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val\
    \ maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28\
    \ = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen\
    \ / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n\
    \        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n    \
    \    val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val\
    \ maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39\
    \ = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen\
    \ / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n\
    \        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n    \
    \    val maxLen46 = maxLen / 46\n        val maxLen47 = max", "        val result\
    \ = new mutable.HashMap[Long, Long]()\n        val arr = arr.toList\n        val\
    \ len = arr.size\n        val maxDigit = math.pow(10, len-1)\n        for(i <-\
    \ 0 until len) {\n            val digit = arr(i).asDigit\n            val sum\
    \ = digit + arr(i+1).asDigit\n            val key = sum / maxDigit\n         \
    \   val value = sum % maxDigit\n            if(result.contains(key)) {\n     \
    \           result.update(key, result(key) + value)\n            } else {\n  \
    \              result.put(key, value)\n            }\n        }\n        val sum\
    \ = result.values.sum\n        return sum", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while (i < k) {\n          \
    \  sum += arr(i)\n            i += 1\n        }\n        val max = (sum % 10).max(0)\n\
    \        val maxIndex = arr.zipWithIndex.filter(_._2 == max).map(_._1).last\n\
    \        val maxElement = arr(maxIndex)\n        val maxIndex = arr.zipWithIndex.filter(_._2\
    \ == max).map(_._1).last\n        val maxElementIndex = arr.zipWithIndex.filter(_._2\
    \ == max).map(_._1).last\n        val maxElementIndex = arr.zipWithIndex.filter(_._2\
    \ == max).map(_._1).last\n        val maxElementIndex = arr.zipWithIndex.filter(_._2\
    \ == max).map(_._1).last\n        val maxElementIndex = arr.zipWithIndex.filter(_._2\
    \ == max).map(_._1).last\n        val maxElementIndex = arr.zipWithIndex.filter(_._2\
    \ == max).map(_._1).last\n        val maxElementIndex = arr.zipWithIndex.filter(_._2\
    \ == max).map(_._1).last\n        val maxElementIndex = arr.zipWithIndex.filter(_._2\
    \ == max).map(_._1).last\n        val maxElementIndex = arr.zipWithIndex.filter(_._2\
    \ == max).map(_._1).last\n        val maxElementIndex = arr.zipWithIndex.filter(_._2\
    \ == max).map(_._1).last\n        val maxElementIndex = arr.zipWithIndex.filter(_._2\
    \ == max).map(_._1).last\n        val maxElementIndex = arr.zipWithIndex.filter(_._2\
    \ == max).map(_._1).last\n        val maxElementIndex = arr.zipWithIndex.filter(_._2\
    \ == max).map(_._1).last\n        val maxElementIndex = arr.zipWithIndex.filter(_._2\
    \ == max).map(_._1).last\n        val maxElementIndex = arr.zipWithIndex.filter(_._2\
    \ == max).map(_._1).last\n        val maxElementIndex = arr.zipWithIndex.filter(_._2\
    \ == max).map(_._1).last\n        val maxElementIndex = arr.zipWithIndex.filter(_._2\
    \ == max).map(_._1).last\n        val maxElementIndex = arr.zipWithIndex.filter(_._2\
    \ == max).map(_._1).last\n        val maxElementIndex = arr.zipWithIndex.filter(_._2\
    \ == max).map(_._1).last\n        val maxElementIndex = arr.zipWithIndex.filter(_._2\
    \ == max).map", "        val arr = arr.toList\n        val len = arr.length\n\
    \        val result = new mutable.ListBuffer[Long]()\n        val max = (arr.head\
    \ - k).toInt\n        val min = (arr.last - k).toInt\n        val max2 = max /\
    \ 2\n        val min2 = min / 2\n        for(i <- 0 until len) {\n           \
    \ if(arr(i) > max2) {\n                result.add(arr(i) - max2)\n           \
    \ }\n            if(arr(i) < min2) {\n                result.add(arr(i) - min2)\n\
    \            }\n        }\n        result.sum", "        val sum = 0L\n      \
    \  val arr = arr.toList\n        val len = arr.length\n        val maxLen = len\
    \ - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n  \
    \      val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val\
    \ maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8\
    \ = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen\
    \ / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n\
    \        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n    \
    \    val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val\
    \ maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19\
    \ = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen\
    \ / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n\
    \        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n    \
    \    val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val\
    \ maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30\
    \ = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen\
    \ / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n\
    \        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n    \
    \    val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val\
    \ maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41\
    \ = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen\
    \ / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n\
    \        val maxLen46 = maxLen / 46\n        ", "        val arr = arr.toList\n\
    \        val len = arr.length\n        val maxSum = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum2 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum3\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum4 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum5 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum6\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum7 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum8 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum9\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum10 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum11 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum12\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum13 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum14 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum15\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum16 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum17 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum18\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum19 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum20 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum21\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum22 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum23 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum24\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum25 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum26 = arr.take(k).fold", "        val arr = arr.toList\n\
    \        val len = arr.length\n        val maxLen = arr.take(k).map(_.toString.length).max\n\
    \        val maxLen2 = arr.take(k).map(_.toString.length).max\n        val maxLen3\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLen4 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLen5 = arr.take(k).map(_.toString.length).max\n        val maxLen6\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLen7 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLen8 = arr.take(k).map(_.toString.length).max\n        val maxLen9\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLen10 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLen11 = arr.take(k).map(_.toString.length).max\n        val maxLen12\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLen13 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLen14 = arr.take(k).map(_.toString.length).max\n        val maxLen15\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLen16 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLen17 = arr.take(k).map(_.toString.length).max\n        val maxLen18\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLen19 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLen20 = arr.take(k).map(_.toString.length).max\n        val maxLen21\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLen22 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLen23 = arr.take(k).map(_.toString.length).max\n        val maxLen24\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLen25 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLen26 = arr.take(k).map(_.toString.length).max\n        val maxLen27\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLen28 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLen29 = arr.", "        val arr = arr.toList\n        val len\
    \ = arr.size\n        val result = new mutable.ListBuffer[Long]()\n        var\
    \ sum = 0L\n        var i = 0\n        while (i < len) {\n            val curr\
    \ = arr(i)\n            val next = (i + 1) < len ? arr(i + 1) : 0L\n         \
    \   val nextNext = (i + 2 < len) ? arr(i + 2) : 0L\n            val nextNextNext\
    \ = (i + 3 < len) ? arr(i + 3) : 0L\n            val nextNextNextNext = (i + 4\
    \ < len) ? arr(i + 4) : 0L\n            val nextNextNextNextNext = (i + 5 < len)\
    \ ? arr(i + 5) : 0L\n            val nextNextNextNextNextNext = (i + 6 < len)\
    \ ? arr(i + 6) : 0L\n            val nextNextNextNextNextNextNext = (i + 7 < len)\
    \ ? arr(i + 7) : 0L\n            val nextNextNextNextNextNextNextNext = (i + 8\
    \ < len) ? arr(i + 8) : 0L\n            val nextNextNextNextNextNextNextNext =\
    \ (i + 9 < len) ? arr(i + 9) : 0L\n            val nextNextNextNextNextNextNextNext\
    \ = (i + 10 < len) ? arr(i + 10) : 0L\n            val nextNextNextNextNextNextNextNext\
    \ = (i + 11 < len) ? arr(i + 11) : 0L\n            val nextNextNextNextNextNextNextNext\
    \ = (i + 12 < len) ? arr(i + 12) : 0L\n            val nextNextNextNextNextNextNextNext\
    \ = (i + 13 < len) ? arr(i + 13) : 0L\n            val nextNextNextNextNextNextNextNext\
    \ = (i + 14 < len) ? arr(i + 14) : 0L\n            val nextNextNextNextNextNextNextNext\
    \ = (i + 15 < len) ? arr(i + 15) : 0L\n            val nextNextNextNextNextNextNextNext\
    \ = (i + 16 < len) ? arr(i + 16) : 0L\n            val nextNextNextNextNextNextNextNext\
    \ = (i + 17 < len) ? arr(i + 17) : 0L\n            val nextNextNextNextNextNextNextNext\
    \ = (i + 18 < len) ? arr(i + 18) : 0L\n            val nextNextNextNextNextNextNextNext\
    \ = (i + 19 < len) ? arr(i + 19) : 0L\n            val nextNextNextNextNextNextNextNext\
    \ = (i + 20 < len) ? arr(i + 20) : 0L\n            val nextNextNextNextNextNextNextNext\
    \ = (i + 21 < len) ? arr(i", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while (i < k) {\n          \
    \  sum += arr(i)\n            i += 1\n        }\n        while (i < arr.length)\
    \ {\n            sum += arr(i)\n            i += 1\n        }\n        result\
    \ += sum\n        return result.toList.sum", "        val result = mutable.ArrayBuffer.empty[Long]\n\
    \        val len = arr.length\n        val maxElements = len-k\n        val maxElementsLength\
    \ = maxElements.toString.length\n        for(i <- 0 until maxElements) {\n   \
    \         val currentElement = arr(i+k)\n            val currentElementLength\
    \ = currentElement.toString.length\n            if(currentElementLength > maxElementsLength)\
    \ {\n                result += currentElement\n            }\n        }\n    \
    \    result.sum", "        val arr = arr.toList\n        val len = arr.size\n\
    \        val maxLen = arr.take(k).size\n        val maxLen2 = maxLen / 2\n   \
    \     val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val\
    \ maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7\
    \ = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen\
    \ / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n\
    \        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n    \
    \    val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val\
    \ maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18\
    \ = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen\
    \ / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n\
    \        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n    \
    \    val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val\
    \ maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29\
    \ = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen\
    \ / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n\
    \        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n    \
    \    val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val\
    \ maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40\
    \ = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen\
    \ / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n\
    \        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n    \
    \    val maxLen", "        val result = new mutable.ListBuffer[Long]()\n     \
    \   val maxLength = arr.take(k).map(_.toString).map(_.length).max\n        val\
    \ maxLength2 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength3\
    \ = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength4 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLength5 = arr.take(k).map(_.toString).map(_.length).max\n    \
    \    val maxLength6 = arr.take(k).map(_.toString).map(_.length).max\n        val\
    \ maxLength7 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength8\
    \ = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength9 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLength10 = arr.take(k).map(_.toString).map(_.length).max\n   \
    \     val maxLength11 = arr.take(k).map(_.toString).map(_.length).max\n      \
    \  val maxLength12 = arr.take(k).map(_.toString).map(_.length).max\n        val\
    \ maxLength13 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength14\
    \ = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength15 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLength16 = arr.take(k).map(_.toString).map(_.length).max\n   \
    \     val maxLength17 = arr.take(k).map(_.toString).map(_.length).max\n      \
    \  val maxLength18 = arr.take(k).map(_.toString).map(_.length).max\n        val\
    \ maxLength19 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength20\
    \ = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength21 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLength22 = arr.take(k).map(_.toString).map(_.length).max\n   \
    \     val maxLength23 = arr.take(k).map(_.toString).map(_.length).max\n      \
    \  val maxLength24 = arr.take(k).map(_.toString).map(_.length).max\n        val\
    \ maxLength25 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength26\
    \ = arr.take(k).map(_.", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val len = arr.length\n        val maxLen = k\n        val maxLen2 = maxLen\
    \ / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n  \
    \      val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val\
    \ maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9\
    \ = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen\
    \ / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n\
    \        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n    \
    \    val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val\
    \ maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20\
    \ = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen\
    \ / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n\
    \        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n    \
    \    val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val\
    \ maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31\
    \ = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen\
    \ / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n\
    \        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n    \
    \    val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val\
    \ maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42\
    \ = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen\
    \ / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n\
    \        val ", "        val result = new mutable.ListBuffer[Long]()\n       \
    \ var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum +=\
    \ arr(i)\n            i += 1\n        }\n        val maxLength = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLength2 = arr.take(k).map(_.toString).map(_.length).max\n    \
    \    while (i < arr.size) {\n            if (arr(i).length < maxLength) {\n  \
    \              sum += arr(i)\n                i += 1\n            } else if (arr(i).length\
    \ < maxLength2) {\n                sum += arr(i)\n                i += 1\n   \
    \         } else {\n                val index = arr.indexWhere(x => x.toString.length\
    \ == maxLength)\n                val index2 = arr.indexWhere(x => x.toString.length\
    \ == maxLength2)\n                val first = arr(index)\n                val\
    \ second = arr(index2)\n                val firstString = first.toString\n   \
    \             val secondString = second.toString\n                val firstLength\
    \ = firstString.length\n                val secondLength = secondString.length\n\
    \                val firstChar = firstString.charAt(0)\n                val secondChar\
    \ = secondString.charAt(0)\n                if (firstChar != secondChar) {\n \
    \                   sum += first\n                    sum += second\n        \
    \            i += 1\n                } else {\n                    val firstIndex\
    \ = (index - k).toInt\n                    val secondIndex = (index2 - k).toInt\n\
    \                    val firstString = arr(firstIndex).toString\n            \
    \        val secondString = arr(secondIndex).toString\n                    val\
    \ firstLength = firstString.length\n                    val secondLength = secondString.length\n\
    \                    val firstChar = firstString.charAt(0)\n                 \
    \   val secondChar = secondString.charAt(0)\n                    if (firstChar\
    \ != secondChar) {\n                        sum += first\n                   \
    \     sum += second\n                        i += 1\n                    } else\
    \ {\n                        val firstIndex = (index - k).toInt\n            \
    \            val secondIndex = (index2 - k).toInt\n                        val\
    \ firstString = arr(firstIndex).toString\n                        val secondString\
    \ = arr(secondIndex).toString\n                        val firstLength = firstString.length\n\
    \                        val secondLength = secondString.length\n            \
    \            val firstChar = firstString.charAt(0)\n                        val\
    \ secondChar = secondString.charAt(0)\n                        if (firstChar !=\
    \ secondChar) {\n                            sum += first\n                  \
    \          sum += second\n                            i += 1\n               \
    \         } else {\n                            val firstIndex = (index - k).toInt\n\
    \                            val secondIndex = (index2 - k).toInt\n          \
    \                  val firstString = arr(firstIndex).toString\n              \
    \              val secondString = arr(secondIndex).toString\n                \
    \            val firstLength = firstString.length\n                          \
    \  val secondLength = secondString.length\n                            val firstChar\
    \ = firstString.charAt(0)\n                            val secondChar = ", " \
    \       val sum = 0L\n        val twoDigits = arr.take(k).map(_.toString.length).max\n\
    \        arr.take(k).foreach(x => sum += if (x.toString.length == twoDigits) x\
    \ else 0L)\n        sum", "        val arr = arr.toList\n        val result =\
    \ mutable.ListBuffer.empty[Long]\n        var sum = 0L\n        for(i <- 0 until\
    \ k){\n            sum += arr(i)\n        }\n        for(i <- 0 until k){\n  \
    \          sum += arr(i+k-1)\n        }\n        result += sum\n        return\
    \ result.toList(0)", "        val arr = arr.toList\n        val len = arr.length\n\
    \        val sum = 0L\n        var i = 0\n        while (i < len) {\n        \
    \    val curr = arr(i)\n            val next = (i + 1 < len) ? arr(i + 1) : 0L\n\
    \            val nextNext = (i + 2 < len) ? arr(i + 2) : 0L\n            val nextNextNext\
    \ = (i + 3 < len) ? arr(i + 3) : 0L\n            val nextNextNextNext = (i + 4\
    \ < len) ? arr(i + 4) : 0L\n            val nextNextNextNextNext = (i + 5 < len)\
    \ ? arr(i + 5) : 0L\n            val nextNextNextNextNext = (i + 6 < len) ? arr(i\
    \ + 6) : 0L\n            val nextNextNextNextNextNext = (i + 7 < len) ? arr(i\
    \ + 7) : 0L\n            val nextNextNextNextNextNext = (i + 8 < len) ? arr(i\
    \ + 8) : 0L\n            val nextNextNextNextNextNextNext = (i + 9 < len) ? arr(i\
    \ + 9) : 0L\n            val nextNextNextNextNextNextNext = (i + 10 < len) ? arr(i\
    \ + 10) : 0L\n            val nextNextNextNextNextNextNext = (i + 11 < len) ?\
    \ arr(i + 11) : 0L\n            val nextNextNextNextNextNextNext = (i + 12 < len)\
    \ ? arr(i + 12) : 0L\n            val nextNextNextNextNextNextNext = (i + 13 <\
    \ len) ? arr(i + 13) : 0L\n            val nextNextNextNextNextNextNext = (i +\
    \ 14 < len) ? arr(i + 14) : 0L\n            val nextNextNextNextNextNextNext =\
    \ (i + 15 < len) ? arr(i + 15) : 0L\n            val nextNextNextNextNextNextNext\
    \ = (i + 16 < len) ? arr(i + 16) : 0L\n            val nextNextNextNextNextNextNext\
    \ = (i + 17 < len) ? arr(i + 17) : 0L\n            val nextNextNextNextNextNextNext\
    \ = (i + 18 < len) ? arr(i + 18) : 0L\n            val nextNextNextNextNextNextNext\
    \ = (i + 19 < len) ? arr(i + 19) : 0L\n            val nextNextNextNextNextNextNext\
    \ = (i + 20 < len) ? arr(i + 20) : 0L\n            val nextNextNextNextNextNextNext\
    \ = (i + 21 < len) ? arr(i + 21) : 0L\n            val nextNextNextNextNextNextNext\
    \ = (i + 22 < len) ? arr(i + 22) : 0L\n            ", "        val arr = arr.toArray\n\
    \        val len = arr.length\n        val maxLen = len - k\n        val maxSum\
    \ = arr(0) + (arr(maxLen) / 10)\n        val sum = 0\n        for (i <- 0 until\
    \ maxLen) {\n            val curSum = arr(i) + (arr(i + k) / 10)\n           \
    \ if (curSum > maxSum) {\n                maxSum = curSum\n            }\n   \
    \         sum += curSum\n        }\n        return sum", "        val arr = arr.toList\n\
    \        val len = arr.size\n        val maxLen = len - k\n        val maxLen2\
    \ = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen\
    \ / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n  \
    \      val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val\
    \ maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11\
    \ = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen\
    \ / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n\
    \        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n    \
    \    val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val\
    \ maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22\
    \ = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen\
    \ / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n\
    \        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n    \
    \    val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val\
    \ maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33\
    \ = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen\
    \ / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n\
    \        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n    \
    \    val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val\
    \ maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44\
    \ = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen\
    \ / 46\n        val maxLen47 = max", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val len = arr.length\n        val maxLen = arr.take(k).length\n     \
    \   val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4\
    \ = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen\
    \ / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n  \
    \      val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val\
    \ maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13\
    \ = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen\
    \ / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n\
    \        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n    \
    \    val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val\
    \ maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24\
    \ = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen\
    \ / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n\
    \        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n    \
    \    val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val\
    \ maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35\
    \ = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen\
    \ / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n\
    \        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n    \
    \    val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val\
    \ maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46\
    \ = maxLen / ", "        val result = new mutable.ListBuffer[Long]()\n       \
    \ var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum +=\
    \ arr(i)\n            i += 1\n        }\n        val maxDigit = math.max(arr.take(k).map(_.toString.length))\n\
    \        arr.take(k).foreach(x => {\n            val digit = x.toString.length\n\
    \            if (digit > maxDigit) {\n                result.add(sum)\n      \
    \          sum = 0L\n            }\n            sum += x\n        })\n       \
    \ result.add(sum)\n        result.sum", "        val result = mutable.ListBuffer.empty[Long]\n\
    \        val maxLength = arr.take(k).length\n        arr.take(k).foreach(x =>\
    \ if (x.length <= maxLength) result += x)\n        result.sum", "        val result\
    \ = mutable.ListBuffer[Long]()\n        val len = arr.length\n        val maxLen\
    \ = arr.take(k).length\n        for(i <- 0 until k){\n            val curr = arr.take(i).sum\n\
    \            val next = (arr.drop(i).take(maxLen).sum).toLong\n            result\
    \ += curr + next\n        }\n        result.sum", "        val arr = arr.toList\n\
    \        val len = arr.size\n        val max2 = arr.take(k).filter(_ % 10 == 0).max\n\
    \        val max3 = arr.take(k).filter(_ % 10 == 1).max\n        val max4 = arr.take(k).filter(_\
    \ % 10 == 2).max\n        val max5 = arr.take(k).filter(_ % 10 == 3).max\n   \
    \     val max6 = arr.take(k).filter(_ % 10 == 4).max\n        val max7 = arr.take(k).filter(_\
    \ % 10 == 5).max\n        val max8 = arr.take(k).filter(_ % 10 == 6).max\n   \
    \     val max9 = arr.take(k).filter(_ % 10 == 7).max\n        val max10 = arr.take(k).filter(_\
    \ % 10 == 8).max\n        val max11 = arr.take(k).filter(_ % 10 == 9).max\n  \
    \      val max12 = arr.take(k).filter(_ % 10 == 10).max\n        val max13 = arr.take(k).filter(_\
    \ % 10 == 11).max\n        val max14 = arr.take(k).filter(_ % 10 == 12).max\n\
    \        val max15 = arr.take(k).filter(_ % 10 == 13).max\n        val max16 =\
    \ arr.take(k).filter(_ % 10 == 14).max\n        val max17 = arr.take(k).filter(_\
    \ % 10 == 15).max\n        val max18 = arr.take(k).filter(_ % 10 == 16).max\n\
    \        val max19 = arr.take(k).filter(_ % 10 == 17).max\n        val max20 =\
    \ arr.take(k).filter(_ % 10 == 18).max\n        val max21 = arr.take(k).filter(_\
    \ % 10 == 19).max\n        val max22 = arr.take(k).filter(_ % 10 == 20).max\n\
    \        val max23 = arr.take(k).filter(_ % 10 == 21).max\n        val max24 =\
    \ arr.take(k).filter(_ % 10 == 22).max\n        val max25 = arr.take(k).filter(_\
    \ % 10 == 23).max\n        val max26 = arr.take(k).filter(_ % 10 == 24).max\n\
    \        val max27 = arr.take(k).filter(_ % 10 == 25).max\n        val max28 =\
    \ arr.take(k).filter(_ % 10 == 26).max\n        val max29 = arr.take(k).filter(_\
    \ % 10 == 27).max\n        val max30 = arr.take(k).filter(_ % 10 == 28).max\n\
    \        ", "        val arr = arr.toList\n        val len = arr.length\n    \
    \    val sum = 0\n        var i = 0\n        while (i < len) {\n            val\
    \ cur = arr(i)\n            val next = (i + 1) < len ? arr(i + 1) : 0\n      \
    \      val nextNext = (i + 2) < len ? arr(i + 2) : 0\n            val nextNextNext\
    \ = (i + 3) < len ? arr(i + 3) : 0\n            val nextNextNextNext = (i + 4)\
    \ < len ? arr(i + 4) : 0\n            val nextNextNextNextNext = (i + 5) < len\
    \ ? arr(i + 5) : 0\n            val nextNextNextNextNext = (i + 6) < len ? arr(i\
    \ + 6) : 0\n            val nextNextNextNextNextNext = (i + 7) < len ? arr(i +\
    \ 7) : 0\n            val nextNextNextNextNextNext = (i + 8) < len ? arr(i + 8)\
    \ : 0\n            val nextNextNextNextNextNextNext = (i + 9) < len ? arr(i +\
    \ 9) : 0\n            val nextNextNextNextNextNextNext = (i + 10) < len ? arr(i\
    \ + 10) : 0\n            val nextNextNextNextNextNextNext = (i + 11) < len ? arr(i\
    \ + 11) : 0\n            val nextNextNextNextNextNextNext = (i + 12) < len ? arr(i\
    \ + 12) : 0\n            val nextNextNextNextNextNextNext = (i + 13) < len ? arr(i\
    \ + 13) : 0\n            val nextNextNextNextNextNextNext = (i + 14) < len ? arr(i\
    \ + 14) : 0\n            val nextNextNextNextNextNextNext = (i + 15) < len ? arr(i\
    \ + 15) : 0\n            val nextNextNextNextNextNextNext = (i + 16) < len ? arr(i\
    \ + 16) : 0\n            val nextNextNextNextNextNextNext = (i + 17) < len ? arr(i\
    \ + 17) : 0\n            val nextNextNextNextNextNextNext = (i + 18) < len ? arr(i\
    \ + 18) : 0\n            val nextNextNextNextNextNextNext = (i + 19) < len ? arr(i\
    \ + 19) : 0\n            val nextNextNextNextNextNextNext = (i + 20) < len ? arr(i\
    \ + 20) : 0\n            val nextNextNextNextNextNextNext = (i + 21) < len ? arr(i\
    \ + 21) : 0\n            val nextNextNextNextNextNextNext = (i + 22) < len ? arr(i\
    \ + 22) : 0\n            val nextNextNextNextNextNextNext = (i + 23) < len ? arr(i\
    \ + 23) : ", "        val result = new mutable.ListBuffer[Long]()\n        val\
    \ maxLength = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength2\
    \ = arr.take(k).map(_.toString).map(_.length).filter(_ > 2).max\n        val maxLength3\
    \ = arr.take(k).map(_.toString).map(_.length).filter(_ > 3).max\n        val maxLength4\
    \ = arr.take(k).map(_.toString).map(_.length).filter(_ > 4).max\n        val maxLength5\
    \ = arr.take(k).map(_.toString).map(_.length).filter(_ > 5).max\n        val maxLength6\
    \ = arr.take(k).map(_.toString).map(_.length).filter(_ > 6).max\n        val maxLength7\
    \ = arr.take(k).map(_.toString).map(_.length).filter(_ > 7).max\n        val maxLength8\
    \ = arr.take(k).map(_.toString).map(_.length).filter(_ > 8).max\n        val maxLength9\
    \ = arr.take(k).map(_.toString).map(_.length).filter(_ > 9).max\n        val maxLength10\
    \ = arr.take(k).map(_.toString).map(_.length).filter(_ > 10).max\n        val\
    \ maxLength11 = arr.take(k).map(_.toString).map(_.length).filter(_ > 11).max\n\
    \        val maxLength12 = arr.take(k).map(_.toString).map(_.length).filter(_\
    \ > 12).max\n        val maxLength13 = arr.take(k).map(_.toString).map(_.length).filter(_\
    \ > 13).max\n        val maxLength14 = arr.take(k).map(_.toString).map(_.length).filter(_\
    \ > 14).max\n        val maxLength15 = arr.take(k).map(_.toString).map(_.length).filter(_\
    \ > 15).max\n        val maxLength16 = arr.take(k).map(_.toString).map(_.length).filter(_\
    \ > 16).max\n        val maxLength17 = arr.take(k).map(_.toString).map(_.length).filter(_\
    \ > 17).max\n        val maxLength18 = arr.take(k).map(_.toString).map(_.length).filter(_\
    \ > 18).max\n        val maxLength19 = arr.take(k).map(_.toString).map(_.length).filter(_\
    \ > 19).max\n        val maxLength20 = arr.take(k).map(_.toString).map(_.length).filter(_\
    \ > 20).max\n        val maxLength21 = arr.take(k).map(_.toString).map(_.length).filter",
  "        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n   \
    \     var index = 0\n        while (index < k) {\n            sum += arr(index)\n\
    \            index += 1\n        }\n        result.clear()\n        arr.foreach(x\
    \ => if (sum - x < 2) result += x)\n        result.sum", "        val arr = arr.toList\n\
    \        val len = arr.length\n        val maxLen = arr.take(k).filter(_ % 10\
    \ == 0).length\n        val sum = 0L\n        for(i <- 0 until k){\n         \
    \   val index = arr.indexWhere(_ % 10 == 0)\n            val value = arr(index\
    \ - k)\n            sum += value\n        }\n        sum", "        var sum =\
    \ 0L\n        var index = 0L\n        for(i <- 0 until arr.length) {\n       \
    \     if(index == k) {\n                sum += arr(i)\n                index =\
    \ 0L\n            } else {\n                index += arr(i).toString.length\n\
    \            }\n        }\n        return sum", "        val arr = arr.toList\n\
    \        val len = arr.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val maxTwoDigits = arr.take(k).map(_.toString.length).max\n        val\
    \ maxTwoDigitsIndex = arr.take(k).map(_.toString.length).indexOf(_ == maxTwoDigits)\n\
    \        val maxTwoDigitsSum = arr.take(k).map(_.toString).map(_.charAt(maxTwoDigitsIndex)).sum\n\
    \        val maxTwoDigitsSumIndex = arr.take(k).map(_.toString).map(_.charAt(maxTwoDigitsIndex)).indexOf(_\
    \ == maxTwoDigitsSum)\n        val maxTwoDigitsSumIndex = arr.take(k).map(_.toString).map(_.charAt(maxTwoDigitsIndex)).indexOf(_\
    \ == maxTwoDigitsSum)\n        val maxTwoDigitsSumIndex = arr.take(k).map(_.toString).map(_.charAt(maxTwoDigitsIndex)).indexOf(_\
    \ == maxTwoDigitsSum)\n        val maxTwoDigitsSumIndex = arr.take(k).map(_.toString).map(_.charAt(maxTwoDigitsIndex)).indexOf(_\
    \ == maxTwoDigitsSum)\n        val maxTwoDigitsSumIndex = arr.take(k).map(_.toString).map(_.charAt(maxTwoDigitsIndex)).indexOf(_\
    \ == maxTwoDigitsSum)\n        val maxTwoDigitsSumIndex = arr.take(k).map(_.toString).map(_.charAt(maxTwoDigitsIndex)).indexOf(_\
    \ == maxTwoDigitsSum)\n        val maxTwoDigitsSumIndex = arr.take(k).map(_.toString).map(_.charAt(maxTwoDigitsIndex)).indexOf(_\
    \ == maxTwoDigitsSum)\n        val maxTwoDigitsSumIndex = arr.take(k).map(_.toString).map(_.charAt(maxTwoDigitsIndex)).indexOf(_\
    \ == maxTwoDigitsSum)\n        val maxTwoDigitsSumIndex = arr.take(k).map(_.toString).map(_.charAt(maxTwoDigitsIndex)).indexOf(_\
    \ == maxTwoDigitsSum)\n        val maxTwoDigitsSumIndex = arr.take(k).map(_.toString).map(_.charAt(maxTwoDigitsIndex)).indexOf(_\
    \ == maxTwoDigitsSum)\n        val maxTwoDigitsSumIndex = arr.take(k).map(_.toString).map(_.charAt(maxTwoDigitsIndex)).indexOf(_\
    \ == maxTwoDigitsSum)\n        val maxTwoDigitsSumIndex = arr.take(k).map(_.toString).map(_.charAt(maxTwoDigitsIndex)).indexOf(_\
    \ == maxTwoDig", "        val arr = arr.toList\n        val len = arr.length\n\
    \        val max2 = arr.take(k).max\n        val max1 = arr.drop(k).max\n    \
    \    val sum = max2 + max1\n        sum", "        val result = new mutable.HashMap[Long,\
    \ Long]()\n        arr.take(k).foreach(x => result.put(x, result.getOrElse(x,\
    \ 0) + x))\n        arr.take(k).foreach(x => result.put(x, result.getOrElse(x,\
    \ 0) - x))\n        result.toList.sum", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while (i < k) {\n          \
    \  sum += arr(i)\n            i += 1\n        }\n        val maxLength = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLength2 = arr.take(k).map(_.toString).map(_.length).max\n    \
    \    var j = 0\n        while (j < arr.length) {\n            val length = arr(j).toString().length\n\
    \            if (length < maxLength && length < maxLength2) {\n              \
    \  sum += arr(j)\n                j += 1\n            } else if (length == maxLength)\
    \ {\n                sum += arr(j)\n                j += 1\n            } else\
    \ if (length == maxLength2) {\n                sum += arr(j)\n               \
    \ j += 1\n            }\n        }\n        result.append(sum)\n        result.sum",
  "        var sum = 0L\n        for(i <- 0 until k){\n            sum += arr(i)\n\
    \        }\n        for(i <- 0 until k){\n            sum += arr(i+k)\n      \
    \  }\n        return sum", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val len = arr.length\n        val maxDigit = arr.take(k).max\n      \
    \  val maxIndex = arr.lastIndexWhere(x => x > maxDigit)\n        val maxIndex2\
    \ = maxIndex + k\n        val maxDigit2 = arr.take(maxIndex2).max\n        val\
    \ maxIndex3 = maxIndex2 + k\n        val maxDigit3 = arr.lastIndexWhere(x => x\
    \ > maxDigit2)\n        val maxIndex4 = maxIndex3 + k\n        val maxDigit4 =\
    \ arr.lastIndexWhere(x => x > maxDigit3)\n        val maxIndex5 = maxIndex4 +\
    \ k\n        val maxDigit5 = arr.lastIndexWhere(x => x > maxDigit4)\n        val\
    \ maxIndex6 = maxIndex5 + k\n        val maxDigit6 = arr.lastIndexWhere(x => x\
    \ > maxDigit5)\n        val maxIndex7 = maxIndex6 + k\n        val maxDigit7 =\
    \ arr.lastIndexWhere(x => x > maxDigit6)\n        val maxIndex8 = maxIndex7 +\
    \ k\n        val maxDigit8 = arr.lastIndexWhere(x => x > maxDigit7)\n        val\
    \ maxIndex9 = maxIndex8 + k\n        val maxDigit9 = arr.lastIndexWhere(x => x\
    \ > maxDigit8)\n        val maxIndex10 = maxIndex9 + k\n        val maxDigit10\
    \ = arr.lastIndexWhere(x => x > maxDigit9)\n        val maxIndex11 = maxIndex10\
    \ + k\n        val maxDigit11 = arr.lastIndexWhere(x => x > maxDigit10)\n    \
    \    val maxIndex12 = maxIndex11 + k\n        val maxDigit12 = arr.lastIndexWhere(x\
    \ => x > maxDigit11)\n        val maxIndex13 = maxIndex12 + k\n        val maxDigit13\
    \ = arr.lastIndexWhere(x => x > maxDigit12)\n        val maxIndex14 = maxIndex13\
    \ + k\n        val maxDigit14 = arr.lastIndexWhere(x => x > maxDigit13)\n    \
    \    val maxIndex15 = maxIndex14 + k\n        val maxDigit15 = arr.lastIndexWhere(x\
    \ => x > maxDigit14)\n        val maxIndex16 = maxIndex15 + k\n        val maxDigit16\
    \ = arr.lastIndexWhere(x => x > maxDigit15)\n        val maxIndex17 = maxIndex16\
    \ + k\n        val maxDigit17 = arr.lastIndexWhere(x => x > maxDigit16)\n    \
    \    val maxIndex18 = maxIndex17 + k\n        val maxDigit18 = arr.lastIndexWhere(x\
    \ => x > maxDigit17)\n        val max", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val len = arr.length\n        val maxDigit = math.pow(10, arr.max)\n\
    \        val maxDigit2 = math.pow(10, arr.max)\n        val maxDigit3 = math.pow(10,\
    \ arr.max)\n        val maxDigit4 = math.pow(10, arr.max)\n        val maxDigit5\
    \ = math.pow(10, arr.max)\n        val maxDigit6 = math.pow(10, arr.max)\n   \
    \     val maxDigit7 = math.pow(10, arr.max)\n        val maxDigit8 = math.pow(10,\
    \ arr.max)\n        val maxDigit9 = math.pow(10, arr.max)\n        val maxDigit10\
    \ = math.pow(10, arr.max)\n        val maxDigit11 = math.pow(10, arr.max)\n  \
    \      val maxDigit12 = math.pow(10, arr.max)\n        val maxDigit13 = math.pow(10,\
    \ arr.max)\n        val maxDigit14 = math.pow(10, arr.max)\n        val maxDigit15\
    \ = math.pow(10, arr.max)\n        val maxDigit16 = math.pow(10, arr.max)\n  \
    \      val maxDigit17 = math.pow(10, arr.max)\n        val maxDigit18 = math.pow(10,\
    \ arr.max)\n        val maxDigit19 = math.pow(10, arr.max)\n        val maxDigit20\
    \ = math.pow(10, arr.max)\n        val maxDigit21 = math.pow(10, arr.max)\n  \
    \      val maxDigit22 = math.pow(10, arr.max)\n        val maxDigit23 = math.pow(10,\
    \ arr.max)\n        val maxDigit24 = math.pow(10, arr.max)\n        val maxDigit25\
    \ = math.pow(10, arr.max)\n        val maxDigit26 = math.pow(10, arr.max)\n  \
    \      val maxDigit27 = math.pow(10, arr.max)\n        val maxDigit28 = math.pow(10,\
    \ arr.max)\n        val maxDigit29 = math.pow(10, arr.max)\n        val maxDigit30\
    \ = math.pow(10, arr.max)\n        val maxDigit31 = math.pow(10, arr.max)\n  \
    \      val maxDigit32 = math.pow(10, arr.max)\n        val maxDigit33 = math.pow(10,\
    \ arr.max)\n        val maxDigit34 = math.pow(10, arr.max)\n        val maxDigit35\
    \ = math.pow(10, arr.max)\n        val maxDigit36 = math.pow(10, arr.max)\n  \
    \      val maxDigit37 = math.pow(10, arr.max)\n        val maxDigit38 = math.pow(10,\
    \ arr.max)\n        val maxDigit39 = math.pow(10, arr.max)\n        val maxDigit40\
    \ = math.pow(10, arr.max)\n        val maxDigit41 = math.pow(10, arr.max)\n  \
    \      val maxDigit42 = math.pow(10, arr.max)\n        ", "        val result\
    \ = mutable.ListBuffer.empty[Long]\n        val arr = arr.toList\n        val\
    \ len = arr.length\n        val maxLength = len - k\n        val maxLength2 =\
    \ maxLength * maxLength\n        val maxLength3 = maxLength2 * maxLength\n   \
    \     val maxLength4 = maxLength3 * maxLength\n        val maxLength5 = maxLength4\
    \ * maxLength\n        val maxLength6 = maxLength5 * maxLength\n        val maxLength7\
    \ = maxLength6 * maxLength\n        val maxLength8 = maxLength7 * maxLength\n\
    \        val maxLength9 = maxLength8 * maxLength\n        val maxLength10 = maxLength9\
    \ * maxLength\n        val maxLength11 = maxLength10 * maxLength\n        val\
    \ maxLength12 = maxLength11 * maxLength\n        val maxLength13 = maxLength12\
    \ * maxLength\n        val maxLength14 = maxLength13 * maxLength\n        val\
    \ maxLength15 = maxLength14 * maxLength\n        val maxLength16 = maxLength15\
    \ * maxLength\n        val maxLength17 = maxLength16 * maxLength\n        val\
    \ maxLength18 = maxLength17 * maxLength\n        val maxLength19 = maxLength18\
    \ * maxLength\n        val maxLength20 = maxLength19 * maxLength\n        val\
    \ maxLength21 = maxLength20 * maxLength\n        val maxLength22 = maxLength21\
    \ * maxLength\n        val maxLength23 = maxLength22 * maxLength\n        val\
    \ maxLength24 = maxLength23 * maxLength\n        val maxLength25 = maxLength24\
    \ * maxLength\n        val maxLength26 = maxLength25 * maxLength\n        val\
    \ maxLength27 = maxLength26 * maxLength\n        val maxLength28 = maxLength27\
    \ * maxLength\n        val maxLength29 = maxLength28 * maxLength\n        val\
    \ maxLength30 = maxLength29 * maxLength\n        val maxLength31 = maxLength30\
    \ * maxLength\n        val maxLength32 = maxLength31 * maxLength\n        val\
    \ maxLength33 = maxLength32 * maxLength\n        val maxLength34 = maxLength33\
    \ * maxLength\n        val maxLength35 = maxLength34 * maxLength\n        val\
    \ maxLength36 = maxLength35 * maxLength\n        val maxLength37 = maxLength36\
    \ * maxLength\n        val maxLength38 = maxLength37 * maxLength\n        val\
    \ maxLength39 = maxLength38 * maxLength\n        val maxLength", "        val\
    \ result = new mutable.HashMap[Long, Long]()\n        val maxCount = new mutable.HashMap[Long,\
    \ Long]()\n        val maxCount2 = new mutable.HashMap[Long, Long]()\n       \
    \ val maxCount3 = new mutable.HashMap[Long, Long]()\n        val maxCount4 = new\
    \ mutable.HashMap[Long, Long]()\n        val maxCount5 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxCount6 = new mutable.HashMap[Long, Long]()\n       \
    \ val maxCount7 = new mutable.HashMap[Long, Long]()\n        val maxCount8 = new\
    \ mutable.HashMap[Long, Long]()\n        val maxCount9 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxCount10 = new mutable.HashMap[Long, Long]()\n      \
    \  val maxCount11 = new mutable.HashMap[Long, Long]()\n        val maxCount12\
    \ = new mutable.HashMap[Long, Long]()\n        val maxCount13 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxCount14 = new mutable.HashMap[Long, Long]()\n      \
    \  val maxCount15 = new mutable.HashMap[Long, Long]()\n        val maxCount16\
    \ = new mutable.HashMap[Long, Long]()\n        val maxCount17 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxCount18 = new mutable.HashMap[Long, Long]()\n      \
    \  val maxCount19 = new mutable.HashMap[Long, Long]()\n        val maxCount20\
    \ = new mutable.HashMap[Long, Long]()\n        val maxCount21 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxCount22 = new mutable.HashMap[Long, Long]()\n      \
    \  val maxCount23 = new mutable.HashMap[Long, Long]()\n        val maxCount24\
    \ = new mutable.HashMap[Long, Long]()\n        val maxCount25 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxCount26 = new mutable.HashMap[Long, Long]()\n      \
    \  val maxCount27 = new mutable.HashMap[Long, Long]()\n        val maxCount28\
    \ = new mutable.HashMap[Long, Long]()\n        val maxCount29 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxCount30 = new mutable.HashMap[Long, Long]()\n      \
    \  val maxCount31 = new mutable.HashMap[Long, Long]()\n        ", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n    \
    \    val maxDigit = arr.take(k).max\n        val maxDigitIndex = arr.lastIndexWhere(x\
    \ => x > maxDigit)\n        val maxDigitIndex = maxDigitIndex.orElse(k)\n    \
    \    val maxDigit = arr.take(maxDigitIndex).max\n        val maxDigitIndex = arr.lastIndexWhere(x\
    \ => x > maxDigit)\n        val maxDigitIndex = maxDigitIndex.orElse(k)\n    \
    \    val maxDigit = arr.take(maxDigitIndex).max\n        val maxDigitIndex = arr.lastIndexWhere(x\
    \ => x > maxDigit)\n        val maxDigitIndex = maxDigitIndex.orElse(k)\n    \
    \    val maxDigit = arr.take(maxDigitIndex).max\n        val maxDigitIndex = arr.lastIndexWhere(x\
    \ => x > maxDigit)\n        val maxDigitIndex = maxDigitIndex.orElse(k)\n    \
    \    val maxDigit = arr.take(maxDigitIndex).max\n        val maxDigitIndex = arr.lastIndexWhere(x\
    \ => x > maxDigit)\n        val maxDigitIndex = maxDigitIndex.orElse(k)\n    \
    \    val maxDigit = arr.take(maxDigitIndex).max\n        val maxDigitIndex = arr.lastIndexWhere(x\
    \ => x > maxDigit)\n        val maxDigitIndex = maxDigitIndex.orElse(k)\n    \
    \    val maxDigit = arr.take(maxDigitIndex).max\n        val maxDigitIndex = arr.lastIndexWhere(x\
    \ => x > maxDigit)\n        val maxDigitIndex = maxDigitIndex.orElse(k)\n    \
    \    val maxDigit = arr.take(maxDigitIndex).max\n        val maxDigitIndex = arr.lastIndexWhere(x\
    \ => x > maxDigit)\n        val maxDigitIndex = maxDigitIndex.orElse(k)\n    \
    \    val maxDigit = arr.take(maxDigitIndex).max\n        val maxDigitIndex = arr.lastIndexWhere(x\
    \ => x > maxDigit)\n        val maxDigitIndex = maxDigitIndex.orElse(k)\n    \
    \    val maxDigit = arr.take(maxDigitIndex).max\n        val maxDigitIndex = arr.lastIndexWhere(x\
    \ => x > maxDigit)\n        val maxDigitIndex = maxDigitIndex.orElse(k)\n    \
    \    val maxDigit = arr.take(maxDigitIndex).max\n        val maxDigitIndex = arr.lastIndexWhere(x\
    \ => x > maxDigit)\n        val maxDigitIndex = maxDigitIndex.orElse(k)\n    \
    \    val maxDigit = arr.take(maxDigitIndex).", "        val arr = arr.toList\n\
    \        val len = arr.length\n        val max = (len / 2).toInt\n        val\
    \ sum = 0L\n        val maxSum = 0L\n        val maxSumIndex = 0\n        for(i\
    \ <- 0 until max){\n            val index = arr.indexWhere(x => x < arr(i))\n\
    \            val sumOfTwo = arr(index) + arr(index + 1)\n            if(sumOfTwo\
    \ > maxSum){\n                maxSum = sumOfTwo\n                maxSumIndex =\
    \ index\n            }\n        }\n        val maxSumOfTwo = arr(maxSumIndex)\
    \ + arr(maxSumIndex + 1)\n        sum += maxSumOfTwo\n        sum", "        val\
    \ arr = arr.toArray\n        val len = arr.length\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val max = (0 until len).foldLeft(0) { (sum, index) => sum + arr(index)\
    \ }\n        val max2 = max / 10\n        val max3 = max % 10\n        val max4\
    \ = max2 / 10\n        val max5 = max2 % 10\n        val max6 = max3 / 10\n  \
    \      val max7 = max3 % 10\n        val max8 = max4 / 10\n        val max9 =\
    \ max4 % 10\n        val max10 = max5 / 10\n        val max11 = max5 % 10\n  \
    \      val max12 = max6 / 10\n        val max13 = max6 % 10\n        val max14\
    \ = max7 / 10\n        val max15 = max7 % 10\n        val max16 = max8 / 10\n\
    \        val max17 = max8 % 10\n        val max18 = max9 / 10\n        val max19\
    \ = max9 % 10\n        val max20 = max10 / 10\n        val max21 = max10 % 10\n\
    \        val max22 = max11 / 10\n        val max23 = max11 % 10\n        val max24\
    \ = max12 / 10\n        val max25 = max12 % 10\n        val max26 = max13 / 10\n\
    \        val max27 = max13 % 10\n        val max28 = max14 / 10\n        val max29\
    \ = max14 % 10\n        val max30 = max15 / 10\n        val max31 = max15 % 10\n\
    \        val max32 = max16 / 10\n        val max33 = max16 % 10\n        val max34\
    \ = max17 / 10\n        val max35 = max17 % 10\n        val max36 = max18 / 10\n\
    \        val max37 = max18 % 10\n        val max38 = max19 / 10\n        val max39\
    \ = max19 % 10\n        val max40 = max20 / 10\n        val max41 = max20 % 10\n\
    \        val max42 = max21 / 10\n        val max43 = max21 % 10\n        val max44\
    \ = max22 / 10\n        val max45 = max22 % 10\n        val max46 = max23 / 10\n\
    \        val max47 = max23 % 10\n        val max48 = max24 / 10\n        val max49",
  "        val result = new mutable.ListBuffer[Long]()\n        val arr = arr.toList\n\
    \        val len = arr.length\n        val maxNum = arr.take(k).max\n        val\
    \ maxNumLen = maxNum.length\n        val maxNumStr = maxNum.toString\n       \
    \ val maxNumStrLen = maxNumStr.length\n        val maxNumStrArray = maxNumStr.toCharArray\n\
    \        val maxNumStrArrayLen = maxNumStrArray.length\n        val maxNumStrArrayLen2\
    \ = maxNumStrArrayLen / 2\n        val maxNumStrArrayLen3 = maxNumStrArrayLen\
    \ / 3\n        val maxNumStrArrayLen4 = maxNumStrArrayLen / 4\n        val maxNumStrArrayLen5\
    \ = maxNumStrArrayLen / 5\n        val maxNumStrArrayLen6 = maxNumStrArrayLen\
    \ / 6\n        val maxNumStrArrayLen7 = maxNumStrArrayLen / 7\n        val maxNumStrArrayLen8\
    \ = maxNumStrArrayLen / 8\n        val maxNumStrArrayLen9 = maxNumStrArrayLen\
    \ / 9\n        val maxNumStrArrayLen10 = maxNumStrArrayLen / 10\n        val maxNumStrArrayLen11\
    \ = maxNumStrArrayLen / 11\n        val maxNumStrArrayLen12 = maxNumStrArrayLen\
    \ / 12\n        val maxNumStrArrayLen13 = maxNumStrArrayLen / 13\n        val\
    \ maxNumStrArrayLen14 = maxNumStrArrayLen / 14\n        val maxNumStrArrayLen15\
    \ = maxNumStrArrayLen / 15\n        val maxNumStrArrayLen16 = maxNumStrArrayLen\
    \ / 16\n        val maxNumStrArrayLen17 = maxNumStrArrayLen / 17\n        val\
    \ maxNumStrArrayLen18 = maxNumStrArrayLen / 18\n        val maxNumStrArrayLen19\
    \ = maxNumStrArrayLen / 19\n        val maxNumStrArrayLen20 = maxNumStrArrayLen\
    \ / 20\n        val maxNumStrArrayLen21 = maxNumStrArrayLen / 21\n        val\
    \ maxNumStrArrayLen22 = maxNumStrArrayLen / 22\n        val maxNumStrArrayLen23\
    \ = maxNumStrArrayLen / 23\n        val maxNumStrArrayLen24 = maxNumStrArrayLen\
    \ / 24\n        val maxNumStrArrayLen25 = maxNumStrArrayLen / 25\n        val\
    \ maxNumStrArrayLen26 = maxNumStrArrayLen / 26\n        val ", "        val arr\
    \ = arr.toList\n        val len = arr.length\n        val sum = 0L\n        val\
    \ maxLen = arr.take(k).size\n        val maxSum = arr.take(k).sum\n        for(i\
    \ <- 0 until k) {\n            val curSum = arr(i) + arr(i+1).asInstanceOf[Long]\n\
    \            sum += curSum\n            if(curSum > maxSum) {\n              \
    \  maxSum = curSum\n                maxLen = i + 1\n            }\n        }\n\
    \        sum", "        val arr = arr.toList\n        val len = arr.length\n \
    \       val max = (len - k).toInt\n        val sum = 0\n        for(i <- 0 until\
    \ max){\n            sum += arr(i+k)\n        }\n        return sum", "      \
    \  val arr = arr.toList\n        val len = arr.size\n        val sum = 0\n   \
    \     val maxSum = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum2 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        for(i <- 0 until k) {\n            val curSum = arr(i) + arr(i\
    \ + 1)\n            val curSum2 = arr(i) + arr(i + 1)\n            val curSum3\
    \ = arr(i) + arr(i + 2)\n            val curSum4 = arr(i) + arr(i + 3)\n     \
    \       val curSum5 = arr(i) + arr(i + 4)\n            val curSum6 = arr(i) +\
    \ arr(i + 5)\n            val curSum7 = arr(i) + arr(i + 6)\n            val curSum8\
    \ = arr(i) + arr(i + 7)\n            val curSum9 = arr(i) + arr(i + 8)\n     \
    \       val curSum10 = arr(i) + arr(i + 9)\n            val curSum11 = arr(i)\
    \ + arr(i + 10)\n            val curSum12 = arr(i) + arr(i + 11)\n           \
    \ val curSum13 = arr(i) + arr(i + 12)\n            val curSum14 = arr(i) + arr(i\
    \ + 13)\n            val curSum15 = arr(i) + arr(i + 14)\n            val curSum16\
    \ = arr(i) + arr(i + 15)\n            val curSum17 = arr(i) + arr(i + 16)\n  \
    \          val curSum18 = arr(i) + arr(i + 17)\n            val curSum19 = arr(i)\
    \ + arr(i + 18)\n            val curSum20 = arr(i) + arr(i + 19)\n           \
    \ val curSum21 = arr(i) + arr(i + 20)\n            val curSum22 = arr(i) + arr(i\
    \ + 21)\n            val curSum23 = arr(i) + arr(i + 22)\n            val curSum24\
    \ = arr(i) + arr(i + 23)\n            val curSum25 = arr(i) + arr(i + 24)\n  \
    \          val curSum26 = arr(i) + arr(i + 25)\n            val curSum27 = arr(i)\
    \ + arr(i + 26)\n            val curSum28 = arr(i) + arr(i + 27)\n           \
    \ val curSum29 = arr(i) + arr(i + 28)\n            val curSum30 = arr(i) + arr(i\
    \ + 29)\n            val curSum31 = arr(i) + arr(i + 30)\n            val curSum32\
    \ = arr(i) + arr(i + 31)\n            val curSum33 = ", "        var sum = 0L\n\
    \        var i = 0\n        while (i < k) {\n            sum += arr(i)\n     \
    \       i += 1\n        }\n        sum -= arr(k)\n        sum -= arr(k)\n    \
    \    sum -= arr(k)\n        sum -= arr(k)\n        sum -= arr(k)\n        sum\
    \ -= arr(k)\n        sum -= arr(k)\n        sum -= arr(k)\n        sum -= arr(k)\n\
    \        sum -= arr(k)\n        sum -= arr(k)\n        sum -= arr(k)\n       \
    \ sum -= arr(k)\n        sum -= arr(k)\n        sum -= arr(k)\n        sum -=\
    \ arr(k)\n        sum -= arr(k)\n        sum -= arr(k)\n        sum -= arr(k)\n\
    \        sum -= arr(k)\n        sum -= arr(k)\n        sum -= arr(k)\n       \
    \ sum -= arr(k)\n        sum -= arr(k)\n        sum -= arr(k)\n        sum -=\
    \ arr(k)\n        sum -= arr(k)\n        sum -= arr(k)\n        sum -= arr(k)\n\
    \        sum -= arr(k)\n        sum -= arr(k)\n        sum -= arr(k)\n       \
    \ sum -= arr(k)\n        sum -= arr(k)\n        sum -= arr(k)\n        sum -=\
    \ arr(k)\n        sum -= arr(k)\n        sum -= arr(k)\n        sum -= arr(k)\n\
    \        sum -= arr(k)\n        sum -= arr(k)\n        sum -= arr(k)\n       \
    \ sum -= arr(k)\n        sum -= arr(k)\n        sum -= arr(k)\n        sum -=\
    \ arr(k)\n        sum -= arr(k)\n        sum -= arr(k)\n        sum -= arr(k)\n\
    \        sum -= arr(k)\n        sum -= arr(k)\n        sum -= arr(k)\n       \
    \ sum -= arr(k)\n        sum -= arr(k)\n        sum -= arr(k)\n        sum -=\
    \ arr(k)\n        sum -= arr(k)\n        sum -= arr(k)\n        sum -= arr(k)\n\
    \        sum -= arr(k)\n        sum -= arr(k)\n        sum -= arr(k)\n       \
    \ sum -= arr(k)\n        sum -= arr(k)\n        sum -= arr(k)\n        sum -=\
    \ arr(k)\n        sum -= arr(k)\n        sum -= arr(k)\n        sum -= arr(k)\n\
    \        sum -= arr(k)", "        val arr = arr.toArray\n        val len = arr.length\n\
    \        val maxLen = len - k\n        val maxSum = arr(0) + (arr(maxLen) - arr(0))\n\
    \        val maxSumList = List(maxSum)\n        val maxSumListLen = maxSumList.length\n\
    \        for(i <- 1 to maxLen) {\n            val sum = arr(i) + (arr(i+1) - arr(i))\n\
    \            if(sum > maxSum) {\n                maxSum = sum\n              \
    \  maxSumList = List(sum)\n                maxSumListLen = maxSumList.length\n\
    \            } else {\n                maxSumList ::= sum\n                maxSumListLen\
    \ += 1\n            }\n        }\n        maxSumList.sum", "        val arr =\
    \ arr.toList\n        val len = arr.length\n        val sum = 0\n        val twoDigits\
    \ = arr.take(k)\n        val twoDigitSum = twoDigits.foldLeft(0)((sum, element)\
    \ => sum + element)\n        val threeDigits = arr.drop(twoDigits.length)\n  \
    \      val threeDigitSum = threeDigits.foldLeft(0)((sum, element) => sum + element)\n\
    \        val fourDigits = arr.drop(twoDigits.length + threeDigits.length)\n  \
    \      val fourDigitSum = fourDigits.foldLeft(0)((sum, element) => sum + element)\n\
    \        val fiveDigits = arr.drop(twoDigits.length + threeDigits.length + fourDigits.length)\n\
    \        val fiveDigitSum = fiveDigits.foldLeft(0)((sum, element) => sum + element)\n\
    \        val sixDigits = arr.drop(twoDigits.length + threeDigits.length + fourDigits.length\
    \ + fiveDigits.length)\n        val sixDigitSum = sixDigits.foldLeft(0)((sum,\
    \ element) => sum + element)\n        val sevenDigits = arr.drop(twoDigits.length\
    \ + threeDigits.length + fourDigits.length + fiveDigits.length + sixDigits.length)\n\
    \        val sevenDigitSum = sevenDigits.foldLeft(0)((sum, element) => sum + element)\n\
    \        val eightDigits = arr.drop(twoDigits.length + threeDigits.length + fourDigits.length\
    \ + fiveDigits.length + sixDigits.length + sevenDigits.length)\n        val eightDigitSum\
    \ = eightDigits.foldLeft(0)((sum, element) => sum + element)\n        val nineDigits\
    \ = arr.drop(twoDigits.length + threeDigits.length + fourDigits.length + fiveDigits.length\
    \ + sixDigits.length + sevenDigits.length + eightDigits.length)\n        val nineDigitSum\
    \ = nineDigits.foldLeft(0)((sum, element) => sum + element)\n        val tenDigits\
    \ = arr.drop(twoDigits.length + threeDigits.length + fourDigits.length + fiveDigits.length\
    \ + sixDigits.length + sevenDigits.length + eightDigits.length + nineDigits.length)\n\
    \        val tenDigitSum = tenDigits.foldLeft(0)((sum, element) => sum + element)\n\
    \        val elevenDigits = arr.drop(twoDigits.length + threeDigits.length + fourDigits.length\
    \ + fiveDigits.length + sixDigits.length + sevenDigits.length + eightDigits.length",
  "        val arr = arr.toList\n        val result = arr.take(k).foldLeft(0)(_ +\
    \ _)\n        val len = arr.length\n        val twoDigits = arr.take(len - k).foldLeft(0)(_\
    \ + _)\n        result + twoDigits", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        var i = 0\n        while (i < k) {\n           \
    \ sum += arr(i)\n            i += 1\n        }\n        val len = arr.length\n\
    \        while (i < len) {\n            sum += arr(i)\n            i += 1\n  \
    \      }\n        result += sum\n        return result.toList().sum", "      \
    \  val arr = arr.toList\n        val len = arr.length\n        val result = new\
    \ mutable.ListBuffer[Long]()\n        var sum = 0L\n        var i = 0\n      \
    \  while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n\
    \        while (i < len) {\n            sum += arr(i)\n            i += 1\n  \
    \      }\n        result += sum\n        result.sum", "        val sum = 0L\n\
    \        var i = 0L\n        while (i < k) {\n            sum += arr(i)\n    \
    \        i += 1L\n        }\n        sum", "        val result = mutable.ListBuffer.empty[Long]\n\
    \        val len = arr.length\n        val maxTwoDigits = arr.take(k).map(_.toString.length).max\n\
    \        val maxTwoDigitsIndex = arr.take(k).map(_.toString.length).indexOf(maxTwoDigits)\n\
    \        val maxTwoDigitsSum = arr.take(k).map(_.toString).map(_.toLong).sum\n\
    \        val maxTwoDigitsSumIndex = arr.take(k).map(_.toString).indexOf(maxTwoDigitsSum)\n\
    \        val maxTwoDigitsSumIndex2 = arr.take(k).map(_.toString).indexOf(maxTwoDigitsSumIndex\
    \ + 1)\n        val maxTwoDigitsSumIndex3 = arr.take(k).map(_.toString).indexOf(maxTwoDigitsSumIndex\
    \ + 2)\n        val maxTwoDigitsSumIndex4 = arr.take(k).map(_.toString).indexOf(maxTwoDigitsSumIndex\
    \ + 3)\n        val maxTwoDigitsSumIndex5 = arr.take(k).map(_.toString).indexOf(maxTwoDigitsSumIndex\
    \ + 4)\n        val maxTwoDigitsSumIndex6 = arr.take(k).map(_.toString).indexOf(maxTwoDigitsSumIndex\
    \ + 5)\n        val maxTwoDigitsSumIndex7 = arr.take(k).map(_.toString).indexOf(maxTwoDigitsSumIndex\
    \ + 6)\n        val maxTwoDigitsSumIndex8 = arr.take(k).map(_.toString).indexOf(maxTwoDigitsSumIndex\
    \ + 7)\n        val maxTwoDigitsSumIndex9 = arr.take(k).map(_.toString).indexOf(maxTwoDigitsSumIndex\
    \ + 8)\n        val maxTwoDigitsSumIndex10 = arr.take(k).map(_.toString).indexOf(maxTwoDigitsSumIndex\
    \ + 9)\n        val maxTwoDigitsSumIndex11 = arr.take(k).map(_.toString).indexOf(maxTwoDigitsSumIndex\
    \ + 10)\n        val maxTwoDigitsSumIndex12 = arr.take(k).map(_.toString).indexOf(maxTwoDigitsSumIndex\
    \ + 11)\n        val maxTwoDigitsSumIndex13 = arr.take(k).map(_.toString).indexOf(maxTwoDigitsSumIndex\
    \ + 12)\n        val maxTwoDigitsSumIndex14 = arr.take(k).map(_.toString).indexOf(maxTwoDigitsSumIndex\
    \ + 13)\n        val maxTwoDigitsSumIndex15 = arr.take(k).map(_.toString).indexOf(maxTwoDigitsSumIndex\
    \ + 14)\n        val maxTwoDigitsSumIndex16 = arr.take(k).map(_.toString).indexOf(maxTwoDigitsSumIndex\
    \ + ", "        val result = new mutable.HashMap[Long, Long]()\n        for (i\
    \ <- 0 until arr.size) {\n            val value = arr(i)\n            if (result.contains(value))\
    \ {\n                result(value)\n            } else {\n                val\
    \ newValue = value % 10 + value / 10\n                result.put(newValue, value)\n\
    \            }\n        }\n        val maxValue = result.values.max\n        val\
    \ maxKey = result.keys.max\n        val maxValueIndex = result.values.indexOf(maxValue)\n\
    \        val maxKeyIndex = result.keys.indexOf(maxKey)\n        if (maxValueIndex\
    \ < k) {\n            val maxValueWithTwoDigits = maxValue % 10 + maxValue / 10\n\
    \            val maxKeyWithTwoDigits = maxKey % 10 + maxKey / 10\n           \
    \ val maxValueWithTwoDigitsIndex = result.values.indexOf(maxValueWithTwoDigits)\n\
    \            val maxKeyWithTwoDigitsIndex = result.keys.indexOf(maxKeyWithTwoDigits)\n\
    \            if (maxValueWithTwoDigitsIndex < k) {\n                val maxValueWithThreeDigits\
    \ = maxValue % 100 + maxValue / 100\n                val maxKeyWithThreeDigits\
    \ = maxKey % 100 + maxKey / 100\n                val maxValueWithThreeDigitsIndex\
    \ = result.values.indexOf(maxValueWithThreeDigits)\n                val maxKeyWithThreeDigitsIndex\
    \ = result.keys.indexOf(maxKeyWithThreeDigits)\n                if (maxValueWithThreeDigitsIndex\
    \ < k) {\n                    val maxValueWithFourDigits = maxValue % 1000 + maxValue\
    \ / 1000\n                    val maxKeyWithFourDigits = maxKey % 1000 + maxKey\
    \ / 1000\n                    val maxValueWithFourDigitsIndex = result.values.indexOf(maxValueWithFourDigits)\n\
    \                    val maxKeyWithFourDigitsIndex = result.keys.indexOf(maxKeyWithFourDigits)\n\
    \                    if (maxValueWithFourDigitsIndex < k) {\n                \
    \        val maxValueWithFiveDigits = maxValue % 10000 + maxValue / 10000\n  \
    \                      val maxKeyWithFiveDigits = maxKey % 10000 + maxKey / 10000\n\
    \                        val maxValueWithFiveDigitsIndex = result.values.indexOf(maxValueWithFiveDigits)\n\
    \                        val maxKeyWithFiveDigitsIndex = result.keys.indexOf(maxKeyWithFiveDigits)\n\
    \                        if (maxValueWithFiveDigitsIndex < k) {\n            \
    \                val maxValueWithSixDigits = maxValue % 100000 + maxValue / 100000\n\
    \                            val maxKeyWithSixDigits = maxKey % 100000 + maxKey\
    \ / 100000\n                            val maxValueWithSixDigitsIndex = result.values.indexOf(max",
  "        val arr = arr.toList\n        val len = arr.length\n        val maxLen\
    \ = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen /\
    \ 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n    \
    \    val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8\
    \ = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen\
    \ / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n\
    \        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n    \
    \    val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val\
    \ maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19\
    \ = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen\
    \ / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n\
    \        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n    \
    \    val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val\
    \ maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30\
    \ = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen\
    \ / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n\
    \        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n    \
    \    val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val\
    \ maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41\
    \ = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen\
    \ / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n\
    \        val maxLen46 = maxLen / 46\n        val maxLen47 = max", "        val\
    \ arr = arr.toList\n        val len = arr.length\n        val maxTwoDigits = arr.take(k).map(_.toString.length).max\n\
    \        val maxTwoDigitsSum = arr.take(k).map(_.toString).map(_.toLong).sum\n\
    \        val maxTwoDigitsSum2 = arr.take(k).map(_.toString.toLong).sum\n     \
    \   val maxTwoDigitsSum3 = arr.take(k).map(_.toString.toLong).sum\n        val\
    \ maxTwoDigitsSum4 = arr.take(k).map(_.toString.toLong).sum\n        val maxTwoDigitsSum5\
    \ = arr.take(k).map(_.toString.toLong).sum\n        val maxTwoDigitsSum6 = arr.take(k).map(_.toString.toLong).sum\n\
    \        val maxTwoDigitsSum7 = arr.take(k).map(_.toString.toLong).sum\n     \
    \   val maxTwoDigitsSum8 = arr.take(k).map(_.toString.toLong).sum\n        val\
    \ maxTwoDigitsSum9 = arr.take(k).map(_.toString.toLong).sum\n        val maxTwoDigitsSum10\
    \ = arr.take(k).map(_.toString.toLong).sum\n        val maxTwoDigitsSum11 = arr.take(k).map(_.toString.toLong).sum\n\
    \        val maxTwoDigitsSum12 = arr.take(k).map(_.toString.toLong).sum\n    \
    \    val maxTwoDigitsSum13 = arr.take(k).map(_.toString.toLong).sum\n        val\
    \ maxTwoDigitsSum14 = arr.take(k).map(_.toString.toLong).sum\n        val maxTwoDigitsSum15\
    \ = arr.take(k).map(_.toString.toLong).sum\n        val maxTwoDigitsSum16 = arr.take(k).map(_.toString.toLong).sum\n\
    \        val maxTwoDigitsSum17 = arr.take(k).map(_.toString.toLong).sum\n    \
    \    val maxTwoDigitsSum18 = arr.take(k).map(_.toString.toLong).sum\n        val\
    \ maxTwoDigitsSum19 = arr.take(k).map(_.toString.toLong).sum\n        val maxTwoDigitsSum20\
    \ = arr.take(k).map(_.toString.toLong).sum\n        val maxTwoDigitsSum21 = arr.take(k).map(_.toString.toLong).sum\n\
    \        val maxTwoDigitsSum22 = arr.take(k).map(_.toString.toLong).sum\n    \
    \    val maxTwoDigitsSum", "        val arr = arr.toList\n        val len = arr.size\n\
    \        val maxSum = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum2 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum3 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum4\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum5 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum6 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum7\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum8 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum9 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum10\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum11 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum12 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum13\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum14 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum15 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum16\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum17 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum18 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum19\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum20 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum21 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum22\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum23 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum24 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum25\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum26 = arr.take(k).fold",
  "        val arr = arr.toArray\n        val len = arr.length\n        val max =\
    \ (len - k).toInt\n        val sum = 0L\n        for(i <- 0 until max){\n    \
    \        val temp = arr(i) + arr(i+1) + arr(i+k) + arr(i+k+1)\n            sum\
    \ += temp\n        }\n        return sum", "        val sum = 0L\n        val\
    \ arr = arr.toList\n        val len = arr.size\n        val maxLen = len - k\n\
    \        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val\
    \ maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6\
    \ = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen\
    \ / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n\
    \        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n    \
    \    val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val\
    \ maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17\
    \ = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen\
    \ / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n\
    \        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n    \
    \    val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val\
    \ maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28\
    \ = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen\
    \ / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n\
    \        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n    \
    \    val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val\
    \ maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39\
    \ = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen\
    \ / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n\
    \        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n    \
    \    val maxLen46 = maxLen / 46\n        ", "        val arr = arr.toList\n  \
    \      val len = arr.length\n        val maxLen = len - k\n        val maxLen2\
    \ = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen\
    \ / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n  \
    \      val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val\
    \ maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11\
    \ = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen\
    \ / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n\
    \        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n    \
    \    val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val\
    \ maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22\
    \ = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen\
    \ / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n\
    \        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n    \
    \    val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val\
    \ maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33\
    \ = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen\
    \ / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n\
    \        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n    \
    \    val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val\
    \ maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44\
    \ = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen\
    \ / 46\n        val maxLen47 = max", "        val arr = arr.toList\n        val\
    \ len = arr.length\n        val maxLen = arr.take(k).max\n        val maxLen2\
    \ = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen\
    \ / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n  \
    \      val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val\
    \ maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11\
    \ = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen\
    \ / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n\
    \        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n    \
    \    val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val\
    \ maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22\
    \ = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen\
    \ / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n\
    \        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n    \
    \    val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val\
    \ maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33\
    \ = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen\
    \ / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n\
    \        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n    \
    \    val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val\
    \ maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44\
    \ = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen\
    \ / 46\n        val maxLen", "        val result = mutable.ListBuffer.empty[Long]\n\
    \        val maxLength = arr.take(k).map(_.toString.length).max\n        arr.take(k).foreach(x\
    \ => {\n            val str = x.toString.padRight(maxLength, \"0\")\n        \
    \    result += str.substring(0,k)\n        })\n        result.sum", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n    \
    \    val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        ", "        val arr\
    \ = arr.toList\n        val len = arr.length\n        val sum = 0L\n        val\
    \ twoDigits = arr.take(k).map(_.toString.length).max\n        for(i <- 0 until\
    \ k) {\n            val curr = arr.take(i).map(_.toString).sum\n            sum\
    \ += curr\n            val nextTwoDigits = arr.take(i + 1).map(_.toString.length).max\n\
    \            val nextSum = curr + (nextTwoDigits - twoDigits)\n            sum\
    \ += nextSum\n        }\n        sum", "        val sum = 0L\n        val maxCount\
    \ = arr.take(k).count(_ < 10)\n        for(i <- 0 until k) {\n            val\
    \ curCount = arr.take(i).count(_ < 10)\n            sum += if (curCount > maxCount)\
    \ 0 else arr.take(i).sum\n        }\n        sum", "        val arr = arr.toList\n\
    \        val len = arr.length\n        val maxSum = arr.take(k).sum\n        val\
    \ maxSum2 = maxSum * maxSum\n        val maxSum3 = maxSum2 * maxSum\n        val\
    \ maxSum4 = maxSum3 * maxSum\n        val maxSum5 = maxSum4 * maxSum\n       \
    \ val maxSum6 = maxSum5 * maxSum\n        val maxSum7 = maxSum6 * maxSum\n   \
    \     val maxSum8 = maxSum7 * maxSum\n        val maxSum9 = maxSum8 * maxSum\n\
    \        val maxSum10 = maxSum9 * maxSum\n        val maxSum11 = maxSum10 * maxSum\n\
    \        val maxSum12 = maxSum11 * maxSum\n        val maxSum13 = maxSum12 * maxSum\n\
    \        val maxSum14 = maxSum13 * maxSum\n        val maxSum15 = maxSum14 * maxSum\n\
    \        val maxSum16 = maxSum15 * maxSum\n        val maxSum17 = maxSum16 * maxSum\n\
    \        val maxSum18 = maxSum17 * maxSum\n        val maxSum19 = maxSum18 * maxSum\n\
    \        val maxSum20 = maxSum19 * maxSum\n        val maxSum21 = maxSum20 * maxSum\n\
    \        val maxSum22 = maxSum21 * maxSum\n        val maxSum23 = maxSum22 * maxSum\n\
    \        val maxSum24 = maxSum23 * maxSum\n        val maxSum25 = maxSum24 * maxSum\n\
    \        val maxSum26 = maxSum25 * maxSum\n        val maxSum27 = maxSum26 * maxSum\n\
    \        val maxSum28 = maxSum27 * maxSum\n        val maxSum29 = maxSum28 * maxSum\n\
    \        val maxSum30 = maxSum29 * maxSum\n        val maxSum31 = maxSum30 * maxSum\n\
    \        val maxSum32 = maxSum31 * maxSum\n        val maxSum33 = maxSum32 * maxSum\n\
    \        val maxSum34 = maxSum33 * maxSum\n        val maxSum35 = maxSum34 * maxSum\n\
    \        val maxSum36 = maxSum35 * maxSum\n        val maxSum37 = maxSum36 * maxSum\n\
    \        val maxSum38 = maxSum37 * maxSum\n        val maxSum39 = maxSum38 * maxSum\n\
    \        val maxSum40 = maxSum39 * maxSum", "        val arr = arr.toList\n  \
    \      val len = arr.length\n        val sum = 0L\n        val twoDigits = arr.take(k).map(_.toString.toInt).filter(_\
    \ > 0).take(2)\n        val twoDigitSum = twoDigits.map(_.toString.toInt).sum\n\
    \        val threeDigits = arr.drop(twoDigits.size)\n        val threeDigitSum\
    \ = threeDigits.map(_.toString.toInt).sum\n        val fourDigits = arr.drop(threeDigits.size)\n\
    \        val fourDigitSum = fourDigits.map(_.toString.toInt).sum\n        val\
    \ fiveDigits = arr.drop(fourDigits.size)\n        val fiveDigitSum = fiveDigits.map(_.toString.toInt).sum\n\
    \        val sixDigits = arr.drop(fiveDigits.size)\n        val sixDigitSum =\
    \ sixDigits.map(_.toString.toInt).sum\n        val sevenDigits = arr.drop(sixDigits.size)\n\
    \        val sevenDigitSum = sevenDigits.map(_.toString.toInt).sum\n        val\
    \ eightDigits = arr.drop(sevenDigits.size)\n        val eightDigitSum = eightDigits.map(_.toString.toInt).sum\n\
    \        val nineDigits = arr.drop(eightDigits.size)\n        val nineDigitSum\
    \ = nineDigits.map(_.toString.toInt).sum\n        val tenDigits = arr.drop(nineDigits.size)\n\
    \        val tenDigitSum = tenDigits.map(_.toString.toInt).sum\n        val elevenDigits\
    \ = arr.drop(tenDigits.size)\n        val elevenDigitSum = elevenDigits.map(_.toString.toInt).sum\n\
    \        val twelveDigits = arr.drop(elevenDigits.size)\n        val twelveDigitSum\
    \ = twelveDigits.map(_.toString.toInt).sum\n        val thirteenDigits = arr.drop(twelveDigits.size)\n\
    \        val thirteenDigitSum = thirteenDigits.map(_.toString.toInt).sum\n   \
    \     val fourteenDigits = arr.drop(thirteenDigits.size)\n        val fourteenDigitSum\
    \ = fourteenDigits.map(_.toString.toInt).sum\n        val fifteenDigits = arr.drop(fourteenDigits.size)\n\
    \        val fifteenDigitSum = fifteenDigits.map(_.toString.toInt).sum\n     \
    \   val sixteenDigits = arr.drop(fifteenDigits.", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while (i < k) {\n          \
    \  sum += arr(i)\n            i += 1\n        }\n        val max = (sum / 10).toInt\n\
    \        var j = 0\n        while (j < arr.length) {\n            if (arr(j) <\
    \ max) {\n                sum += arr(j)\n                j += 1\n            }\
    \ else {\n                val max2 = (sum / 10).toInt\n                if (max2\
    \ == max) {\n                    sum += arr(j)\n                    j += 1\n \
    \               } else {\n                    val max3 = (sum / 100).toInt\n \
    \                   if (max3 == max) {\n                        sum += arr(j)\n\
    \                        j += 1\n                    } else {\n              \
    \          val max4 = (sum / 1000).toInt\n                        if (max4 ==\
    \ max) {\n                            sum += arr(j)\n                        \
    \    j += 1\n                        } else {\n                            val\
    \ max5 = (sum / 10000).toInt\n                            if (max5 == max) {\n\
    \                                sum += arr(j)\n                             \
    \   j += 1\n                            } else {\n                           \
    \     val max6 = (sum / 100000).toInt\n                                if (max6\
    \ == max) {\n                                    sum += arr(j)\n             \
    \                       j += 1\n                                } else {\n   \
    \                                 val max7 = (sum / 1000000).toInt\n         \
    \                           if (max7 == max) {\n                             \
    \           sum += arr(j)\n                                        j += 1\n  \
    \                                  } else {\n                                \
    \        val max8 = (sum / 10000000).toInt\n                                 \
    \       if (max8 == max) {\n                                            sum +=\
    \ arr(j)\n                                            j += 1\n               \
    \                         } else {\n                                         \
    \   val max9 = (sum / 100000000).toInt\n                                     \
    \       if (max9 == max) {\n                                                sum\
    \ += arr(j)\n                                                j += 1\n        \
    \                                    } else {\n                              \
    \                  val max10 = (sum / 1000000000).toInt\n                    \
    \                            if (max10 == max) {\n                           \
    \                         sum += arr(j)\n                                    \
    \                j += 1\n                                                } else\
    \ {\n                                                    val max11 = (sum / 10000000000).toInt\n\
    \                                                    if (max11 == max) {\n   \
    \                                                     sum += arr(j)\n        \
    \                                                j += 1\n                    \
    \                                } else {\n                                  \
    \                      val max12 = (sum / 100000000000).toInt\n              \
    \                                          if (max12 == max) {\n             \
    \                                               sum += arr(j)\n              \
    \                                              j += 1\n                      \
    \                                  } else {\n                                \
    \                            val max13 = (sum / 1000000000000).toInt\n       \
    \                                                     if (max13 == max) {\n  \
    \                                                              sum += arr(j)\n\
    \                                                                j += 1\n    \
    \                                                        } else {\n          \
    \                                                      val max14 = (sum / 10000000000000).toInt\n\
    \                                                                if (max14 ==\
    \ max) {\n                                                                   \
    \ sum += arr(j)\n                                                            \
    \        j += 1\n                                                            \
    \    } else {\n                                                              \
    \      val max15 = (sum / 100000000000000).toInt\n                           \
    \                                         ", "        val result = mutable.ListBuffer.empty[Long]\n\
    \        var sum = 0L\n        var i = 0\n        while (i < k) {\n          \
    \  sum += arr(i)\n            i += 1\n        }\n        while (i < arr.length)\
    \ {\n            sum += arr(i)\n            i += 1\n        }\n        result\
    \ += sum\n        result.toList", "        val arr = arr.toList\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        for(i <- 0 until\
    \ k){\n            sum += arr(i)\n        }\n        for(i <- 0 until k){\n  \
    \          val cur = arr(i)\n            val next = arr(i+1)\n            if(cur\
    \ < next){\n                sum += cur\n            }\n            else{\n   \
    \             sum += next\n            }\n        }\n        sum", "        var\
    \ sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n\
    \            i += 1\n        }\n        val maxLength = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLengthString = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLengthLong = arr.take(k).map(_.toLong).map(_.length).max\n   \
    \     val maxLengthDouble = arr.take(k).map(_.toDouble).map(_.length).max\n  \
    \      val maxLengthInt = arr.take(k).map(_.toInt).map(_.length).max\n       \
    \ val maxLengthLongLong = arr.take(k).map(_.toLong).map(_.toLong).map(_.length).max\n\
    \        val maxLengthDoubleDouble = arr.take(k).map(_.toDouble).map(_.toDouble).map(_.length).max\n\
    \        val maxLengthIntInt = arr.take(k).map(_.toInt).map(_.toInt).map(_.length).max\n\
    \        val maxLengthLongLongLong = arr.take(k).map(_.toLong).map(_.toLong).map(_.toLong).map(_.length).max\n\
    \        val maxLengthDoubleDoubleDouble = arr.take(k).map(_.toDouble).map(_.toDouble).map(_.toDouble).map(_.length).max\n\
    \        val maxLengthIntIntInt = arr.take(k).map(_.toInt).map(_.toInt).map(_.toInt).map(_.length).max\n\
    \        val maxLengthLongLongLongLong = arr.take(k).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.length).max\n\
    \        val maxLengthDoubleDoubleDouble = arr.take(k).map(_.toDouble).map(_.toDouble).map(_.toDouble).map(_.toDouble).map(_.length).max\n\
    \        val maxLengthIntIntIntInt = arr.take(k).map(_.toInt).map(_.toInt).map(_.toInt).map(_.toInt).map(_.toInt).map(_.length).max\n\
    \        val maxLengthLongLongLongLongLong = arr.take(k).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.length).max\n\
    \        val maxLengthDoubleDoubleDoubleDouble = arr.take(k).map(_.toDouble).map(_.toDouble).map(_.toDouble).map(_.toDouble).map(_.toDouble).",
  "        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n   \
    \     for(i <- 0 until k){\n            sum += arr(i)\n        }\n        for(i\
    \ <- 0 until k){\n            val temp = arr(i)\n            val index = arr.indexOf(0)\n\
    \            val temp = temp - arr(index)\n            arr(index) = temp\n   \
    \         val temp = arr(i)\n            val index = arr.indexOf(0)\n        \
    \    val temp = temp - arr(index)\n            arr(index) = temp\n           \
    \ val temp = arr(i)\n            val index = arr.indexOf(0)\n            val temp\
    \ = temp - arr(index)\n            arr(index) = temp\n            val temp = arr(i)\n\
    \            val index = arr.indexOf(0)\n            val temp = temp - arr(index)\n\
    \            arr(index) = temp\n            val temp = arr(i)\n            val\
    \ index = arr.indexOf(0)\n            val temp = temp - arr(index)\n         \
    \   arr(index) = temp\n            val temp = arr(i)\n            val index =\
    \ arr.indexOf(0)\n            val temp = temp - arr(index)\n            arr(index)\
    \ = temp\n            val temp = arr(i)\n            val index = arr.indexOf(0)\n\
    \            val temp = temp - arr(index)\n            arr(index) = temp\n   \
    \         val temp = arr(i)\n            val index = arr.indexOf(0)\n        \
    \    val temp = temp - arr(index)\n            arr(index) = temp\n           \
    \ val temp = arr(i)\n            val index = arr.indexOf(0)\n            val temp\
    \ = temp - arr(index)\n            arr(index) = temp\n            val temp = arr(i)\n\
    \            val index = arr.indexOf(0)\n            val temp = temp - arr(index)\n\
    \            arr(index) = temp\n            val temp = arr(i)\n            val\
    \ index = arr.indexOf(0)\n            val temp = temp - arr(index)\n         \
    \   arr(index) = temp\n            val temp = arr(i)\n            val index =\
    \ arr.indexOf(0)\n            val temp = temp - arr(index)\n            arr(index)\
    \ = temp\n            val temp = arr(i)\n            val index = arr.indexOf(0)\n\
    \            val temp = temp - arr(index)\n            arr(index) = temp\n   \
    \         val temp = arr(i)\n            val index = arr.indexOf(0)\n        \
    \    val temp = temp - arr(index)\n            arr(index) = temp\n           \
    \ val temp = arr(i)\n            val index = arr.indexOf(0)\n            val temp\
    \ = temp - arr(index)\n            arr(index) = temp\n            val temp = arr(i)\n\
    \            val index = arr.indexOf(0)\n            val temp = temp - arr(index)\n\
    \            arr(index) = temp\n            val temp = arr(i)", "        val sum\
    \ = 0L\n        val arr = arr.toList\n        val len = arr.length\n        val\
    \ maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen\
    \ / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n  \
    \      val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val\
    \ maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10\
    \ = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen\
    \ / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n\
    \        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n    \
    \    val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val\
    \ maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21\
    \ = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen\
    \ / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n\
    \        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n    \
    \    val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val\
    \ maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32\
    \ = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen\
    \ / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n\
    \        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n    \
    \    val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val\
    \ maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43\
    \ = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen\
    \ / 45\n        val maxLen46 = maxLen / 46\n        ", "        val result = new\
    \ mutable.ListBuffer[Long]()\n        var sum = 0\n        for(i <- 0 until k){\n\
    \            sum += arr(i)\n        }\n        for(i <- 0 until k){\n        \
    \    sum += arr(i+1) - arr(i)\n        }\n        sum += arr.last\n        sum\
    \ += arr.last\n        sum += arr.last\n        sum += arr.last\n        sum +=\
    \ arr.last\n        sum += arr.last\n        sum += arr.last\n        sum += arr.last\n\
    \        sum += arr.last\n        sum += arr.last\n        sum += arr.last\n \
    \       sum += arr.last\n        sum += arr.last\n        sum += arr.last\n  \
    \      sum += arr.last\n        sum += arr.last\n        sum += arr.last\n   \
    \     sum += arr.last\n        sum += arr.last\n        sum += arr.last\n    \
    \    sum += arr.last\n        sum += arr.last\n        sum += arr.last\n     \
    \   sum += arr.last\n        sum += arr.last\n        sum += arr.last\n      \
    \  sum += arr.last\n        sum += arr.last\n        sum += arr.last\n       \
    \ sum += arr.last\n        sum += arr.last\n        sum += arr.last\n        sum\
    \ += arr.last\n        sum += arr.last\n        sum += arr.last\n        sum +=\
    \ arr.last\n        sum += arr.last\n        sum += arr.last\n        sum += arr.last\n\
    \        sum += arr.last\n        sum += arr.last\n        sum += arr.last\n \
    \       sum += arr.last\n        sum += arr.last\n        sum += arr.last\n  \
    \      sum += arr.last\n        sum += arr.last\n        sum += arr.last\n   \
    \     sum += arr.last\n        sum += arr.last\n        sum += arr.last\n    \
    \    sum += arr.last\n        sum += arr.last\n        sum += arr.last\n     \
    \   sum += arr.last\n        sum += arr.last\n        sum += arr.last\n      \
    \  sum += arr.last\n        sum += arr.last\n        sum += arr.last\n       \
    \ sum += arr.last\n        sum += arr.last\n        sum += arr.last\n        sum\
    \ += arr.last\n        sum += arr.last\n        sum += arr.last\n        sum +=\
    \ arr.last\n        sum += arr.last\n        sum += arr.last\n        sum += arr.last\n\
    \        sum += arr.last\n        sum += arr.last\n        sum += arr.last\n \
    \       sum += arr.last\n        sum += arr.last\n        sum += arr.last\n  \
    \      sum += arr.last\n        sum += arr.last\n        sum += arr.last\n   \
    \     sum += arr.last\n        sum += arr.last\n        sum += arr.last\n    \
    \    sum += arr.last\n        sum += arr.last\n        sum += arr.last\n     \
    \   sum += arr.last\n        sum += arr.last\n        sum += arr.last\n      \
    \  sum += arr.last\n        sum += arr.last\n        sum += arr.last\n       \
    \ sum += arr.last", "        val result = new mutable.ListBuffer[Long]()\n   \
    \     val len = arr.length\n        val maxLen = arr.take(k).length\n        val\
    \ maxLen2 = maxLen / 2\n        for(i <- 0 until k) {\n            val curSum\
    \ = arr(i) + arr(i + k)\n            val curLen = arr(i + k).length\n        \
    \    val curLen2 = curLen / 2\n            val curSum2 = curSum + curSum\n   \
    \         val curSum3 = curSum2 + curSum\n            if(curLen > maxLen) {\n\
    \                result.add(curSum)\n            } else if(curLen < maxLen) {\n\
    \                val curSum4 = curSum3 + curSum\n                if(curSum4 >\
    \ maxLen2) {\n                    result.add(curSum4)\n                }\n   \
    \         }\n        }\n        result.sum", "        val result = new mutable.HashMap[Long,\
    \ Long]()\n        val arr = arr.toList\n        val len = arr.size\n        val\
    \ maxDigit = arr.take(k).map(_.toString.length).max\n        val maxDigitCount\
    \ = arr.take(k).map(_.toString.length).count\n        val maxDigitSum = arr.take(k).map(_.toString).sum\n\
    \        val maxDigitSumCount = arr.take(k).map(_.toString).count\n        val\
    \ maxDigitSumCount = arr.take(k).map(_.toString).count\n        val maxDigitSumCount2\
    \ = arr.take(k).map(_.toString).count\n        val maxDigitSumCount3 = arr.take(k).map(_.toString).count\n\
    \        val maxDigitSumCount4 = arr.take(k).map(_.toString).count\n        val\
    \ maxDigitSumCount5 = arr.take(k).map(_.toString).count\n        val maxDigitSumCount6\
    \ = arr.take(k).map(_.toString).count\n        val maxDigitSumCount7 = arr.take(k).map(_.toString).count\n\
    \        val maxDigitSumCount8 = arr.take(k).map(_.toString).count\n        val\
    \ maxDigitSumCount9 = arr.take(k).map(_.toString).count\n        val maxDigitSumCount10\
    \ = arr.take(k).map(_.toString).count\n        val maxDigitSumCount11 = arr.take(k).map(_.toString).count\n\
    \        val maxDigitSumCount12 = arr.take(k).map(_.toString).count\n        val\
    \ maxDigitSumCount13 = arr.take(k).map(_.toString).count\n        val maxDigitSumCount14\
    \ = arr.take(k).map(_.toString).count\n        val maxDigitSumCount15 = arr.take(k).map(_.toString).count\n\
    \        val maxDigitSumCount16 = arr.take(k).map(_.toString).count\n        val\
    \ maxDigitSumCount17 = arr.take(k).map(_.toString).count\n        val maxDigitSumCount18\
    \ = arr.take(k).map(_.toString).count\n        val maxDigitSumCount19 = arr.take(k).map(_.toString).count\n\
    \        val maxDigitSumCount20 = arr.take(k).map(_.toString).count\n        val\
    \ maxDigitSumCount21 = arr.take(k).map(_.toString).count\n        val maxDigitSumCount22\
    \ = arr.take(k).map(_.toString).count\n        val maxDigitSumCount23 = arr.take(k).map(_.toString).count\n\
    \        val maxDigitSumCount24 = arr.take(k).map(_.toString).count\n", "    \
    \    val arr = arr.toList\n        val len = arr.size\n        val maxLen = len\
    \ - k\n        val maxSum = arr.take(maxLen).sum\n        val minSum = arr.drop(maxLen).sum\n\
    \        return maxSum + minSum", "        val result = new mutable.HashMap[Long,\
    \ Long]()\n        for(i <- 0 until k){\n            val key = arr(i)\n      \
    \      val value = result.getOrElse(key, 0)\n            result += key -> value\
    \ + 1\n        }\n        val maxValue = result.maxBy(_._2)._2\n        val maxKey\
    \ = result.maxBy(_._1)._1\n        val maxValueSum = result.getOrElse(maxKey,\
    \ 0)\n        val maxKeySum = result.getOrElse(maxKey, 0)\n        return maxValueSum\
    \ + maxKeySum", "        val result = new mutable.ListBuffer[Long]()\n       \
    \ val len = arr.size\n        val maxLength = arr.take(k).size\n        val maxLength2\
    \ = maxLength * maxLength\n        for(i <- 0 until k) {\n            val first\
    \ = arr.take(i).size\n            val second = arr.take(i + 1).size\n        \
    \    val third = arr.take(i + 2).size\n            val fourth = arr.take(i + 3).size\n\
    \            val fifth = arr.take(i + 4).size\n            val sixth = arr.take(i\
    \ + 5).size\n            val seventh = arr.take(i + 6).size\n            val eighth\
    \ = arr.take(i + 7).size\n            val ninth = arr.take(i + 8).size\n     \
    \       val tenth = arr.take(i + 9).size\n            val eleventh = arr.take(i\
    \ + 10).size\n            val twelfth = arr.take(i + 11).size\n            val\
    \ thirteenth = arr.take(i + 12).size\n            val fourteenth = arr.take(i\
    \ + 13).size\n            val fifteenth = arr.take(i + 14).size\n            val\
    \ sixteenth = arr.take(i + 15).size\n            val seventeenth = arr.take(i\
    \ + 16).size\n            val eighteenth = arr.take(i + 17).size\n           \
    \ val nineteenth = arr.take(i + 18).size\n            val twentieth = arr.take(i\
    \ + 19).size\n            val twentyfirst = arr.take(i + 20).size\n          \
    \  val twentysecond = arr.take(i + 21).size\n            val twentythird = arr.take(i\
    \ + 22).size\n            val twentyfourth = arr.take(i + 23).size\n         \
    \   val twentyfifth = arr.take(i + 24).size\n            val twentysixth = arr.take(i\
    \ + 25).size\n            val twentyseventh = arr.take(i + 26).size\n        \
    \    val twentyeighth = arr.take(i + 27).size\n            val twentyninth = arr.take(i\
    \ + 28).size\n            val twentytenth = arr.take(i + 29).size\n          \
    \  val twentyeleventh = arr.take(i + 30).size\n            val twentytwelfth =\
    \ arr.take(i + 31).size\n            val twenty", "        val sum = 0L\n    \
    \    val arr = arr.toList\n        val len = arr.length\n        val maxNum =\
    \ arr.take(k).toList\n        val maxNumLen = maxNum.length\n        val maxNumLenMinusOne\
    \ = maxNumLen - 1\n        val maxNumLenMinusTwo = maxNumLen - 2\n        val\
    \ maxNumLenMinusThree = maxNumLen - 3\n        val maxNumLenMinusFour = maxNumLen\
    \ - 4\n        val maxNumLenMinusFive = maxNumLen - 5\n        val maxNumLenMinusSix\
    \ = maxNumLen - 6\n        val maxNumLenMinusSeven = maxNumLen - 7\n        val\
    \ maxNumLenMinusEight = maxNumLen - 8\n        val maxNumLenMinusNine = maxNumLen\
    \ - 9\n        val maxNumLenMinusTen = maxNumLen - 10\n        val maxNumLenMinusEleven\
    \ = maxNumLen - 11\n        val maxNumLenMinusTwelve = maxNumLen - 12\n      \
    \  val maxNumLenMinusThirteen = maxNumLen - 13\n        val maxNumLenMinusFourteen\
    \ = maxNumLen - 14\n        val maxNumLenMinusFifteen = maxNumLen - 15\n     \
    \   val maxNumLenMinusSixteen = maxNumLen - 16\n        val maxNumLenMinusSeventeen\
    \ = maxNumLen - 17\n        val maxNumLenMinusEighteen = maxNumLen - 18\n    \
    \    val maxNumLenMinusNineteen = maxNumLen - 19\n        val maxNumLenMinusTwenty\
    \ = maxNumLen - 20\n        val maxNumLenMinusThirty = maxNumLen - 30\n      \
    \  val maxNumLenMinusFourty = maxNumLen - 40\n        val maxNumLenMinusFifty\
    \ = maxNumLen - 50\n        val maxNumLenMinusSixty = maxNumLen - 60\n       \
    \ val maxNumLenMinusSeventy = maxNumLen - 70\n        val maxNumLenMinusEighty\
    \ = maxNumLen - 80\n        val maxNumLenMinusNinety = maxNumLen - 90\n      \
    \  val maxNumLenMinusOnehundred = maxNumLen - 100\n        val maxNumLenMinusOnethousand\
    \ = maxNumLen - 1000\n        val max", "        val arr = arr.toList\n      \
    \  val len = arr.length\n        val maxNum = arr.take(k).max\n        val maxNumIndex\
    \ = arr.lastIndexWhere(x => x == maxNum)\n        val maxNumLen = maxNumIndex\
    \ - k\n        val maxNumNum = maxNum.asInstanceOf[Long]\n        val maxNumNumLen\
    \ = maxNumNum.asInstanceOf[Long]\n        val maxNumNumLenLen = maxNumNumLen.asInstanceOf[Long]\n\
    \        val maxNumNumLenLenLen = maxNumNumLenLen.asInstanceOf[Long]\n       \
    \ val maxNumNumLenLenLenLen = maxNumNumLenLenLen.asInstanceOf[Long]\n        val\
    \ maxNumNumLenLenLenLenLen = maxNumNumLenLenLenLenLen.asInstanceOf[Long]\n   \
    \     val maxNumNumLenLenLenLenLenLen = maxNumNumLenLenLenLenLenLen.asInstanceOf[Long]\n\
    \        val maxNumNumLenLenLenLenLenLenLen = maxNumNumLenLenLenLenLenLenLen.asInstanceOf[Long]\n\
    \        val maxNumNumLenLenLenLenLenLenLenLen = maxNumNumLenLenLenLenLenLenLenLen.asInstanceOf[Long]\n\
    \        val maxNumNumLenLenLenLenLenLenLenLenLen = maxNumNumLenLenLenLenLenLenLenLenLenLen.asInstanceOf[Long]\n\
    \        val maxNumNumLenLenLenLenLenLenLenLenLenLen = maxNumNumLenLenLenLenLenLenLenLenLenLen.asInstanceOf[Long]\n\
    \        val maxNumNumLenLenLenLenLenLenLenLenLenLenLen = maxNumNumLenLenLenLenLenLenLenLenLenLenLen.asInstanceOf[Long]\n\
    \        val maxNumNumLenLenLenLenLenLenLenLenLenLenLen = maxNumNumLenLenLenLenLenLenLenLenLenLenLenLen.asInstanceOf[Long]\n\
    \        val maxNumNumLenLenLenLenLenLenLenLenLenLenLenLen = maxNumNumLenLenLenLenLenLenLenLenLenLenLenLen.asInstanceOf[Long]\n\
    \        val maxNumNumLenLenLenLenLenLenLenLenLenLenLenLenLen = maxNumNumLenLenLenLenLenLenLenLenLenLenLenLenLen.asInstanceOf[Long]\n\
    \        val maxNum", "        val arr = arr.toList\n        val len = arr.size\n\
    \        val max2 = arr.take(k).maxBy(_.toString.length)\n        val max2Str\
    \ = max2.toString\n        val max2StrLen = max2Str.length\n        val max2StrLenMinus1\
    \ = max2StrLen - 1\n        val max2StrLenMinus2 = max2StrLen - 2\n        val\
    \ max2StrLenMinus3 = max2StrLen - 3\n        val max2StrLenMinus4 = max2StrLen\
    \ - 4\n        val max2StrLenMinus5 = max2StrLen - 5\n        val max2StrLenMinus6\
    \ = max2StrLen - 6\n        val max2StrLenMinus7 = max2StrLen - 7\n        val\
    \ max2StrLenMinus8 = max2StrLen - 8\n        val max2StrLenMinus9 = max2StrLen\
    \ - 9\n        val max2StrLenMinus10 = max2StrLen - 10\n        val max2StrLenMinus11\
    \ = max2StrLen - 11\n        val max2StrLenMinus12 = max2StrLen - 12\n       \
    \ val max2StrLenMinus13 = max2StrLen - 13\n        val max2StrLenMinus14 = max2StrLen\
    \ - 14\n        val max2StrLenMinus15 = max2StrLen - 15\n        val max2StrLenMinus16\
    \ = max2StrLen - 16\n        val max2StrLenMinus17 = max2StrLen - 17\n       \
    \ val max2StrLenMinus18 = max2StrLen - 18\n        val max2StrLenMinus19 = max2StrLen\
    \ - 19\n        val max2StrLenMinus20 = max2StrLen - 20\n        val max2StrLenMinus21\
    \ = max2StrLen - 21\n        val max2StrLenMinus22 = max2StrLen - 22\n       \
    \ val max2StrLenMinus23 = max2StrLen - 23\n        val max2StrLenMinus24 = max2StrLen\
    \ - 24\n        val max2StrLenMinus25 = max2StrLen - 25\n        val max2StrLenMinus26\
    \ = max2StrLen - 26\n        val max2StrLenMinus27 = max2StrLen - 27\n       \
    \ val max2StrLenMinus28 = max2StrLen - 28\n", "        val result = mutable.ListBuffer[Long]()\n\
    \        val arr = arr.toList\n        val len = arr.length\n        val maxLen\
    \ = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen /\
    \ 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n    \
    \    val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8\
    \ = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen\
    \ / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n\
    \        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n    \
    \    val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val\
    \ maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19\
    \ = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen\
    \ / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n\
    \        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n    \
    \    val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val\
    \ maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30\
    \ = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen\
    \ / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n\
    \        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n    \
    \    val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val\
    \ maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41\
    \ = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen\
    \ / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n\
    \        val maxLen46 = ", "        val sum = 0\n        val arr = arr.toList\n\
    \        val len = arr.size\n        val maxDigit = math.min(k, len-1)\n     \
    \   val maxDigitIndex = math.min(math.max(0, k - maxDigit), len-1)\n        for(i\
    \ <- 0 until maxDigitIndex) {\n            val digit = arr(i).asDigit\n      \
    \      sum += digit\n        }\n        sum", "        val arr = arr.toList\n\
    \        val len = arr.size\n        val maxLen = len - k\n        val maxSum\
    \ = arr.take(maxLen).sum\n        val maxSum2 = arr.take(maxLen).sum * arr.take(maxLen).sum\n\
    \        val maxSum3 = arr.take(maxLen).sum * arr.take(maxLen).sum * arr.take(maxLen).sum\n\
    \        val maxSum4 = arr.take(maxLen).sum * arr.take(maxLen).sum * arr.take(maxLen).sum\
    \ * arr.take(maxLen).sum\n        val maxSum5 = arr.take(maxLen).sum * arr.take(maxLen).sum\
    \ * arr.take(maxLen).sum * arr.take(maxLen).sum * arr.take(maxLen).sum * arr.take(maxLen).sum\n\
    \        val maxSum6 = arr.take(maxLen).sum * arr.take(maxLen).sum * arr.take(maxLen).sum\
    \ * arr.take(maxLen).sum * arr.take(maxLen).sum * arr.take(maxLen).sum * arr.take(maxLen).sum\
    \ * arr.take(maxLen).sum * arr.take(maxLen).sum\n        val maxSum7 = arr.take(maxLen).sum\
    \ * arr.take(maxLen).sum * arr.take(maxLen).sum * arr.take(maxLen).sum * arr.take(maxLen).sum\
    \ * arr.take(maxLen).sum * arr.take(maxLen).sum * arr.take(maxLen).sum * arr.take(maxLen).sum\
    \ * arr.take(maxLen).sum * arr.take(maxLen).sum * arr.take(maxLen).sum * arr.take(maxLen).sum\
    \ * arr.take(maxLen).sum * arr.take(maxLen).sum * arr.take(maxLen).sum * arr.take(maxLen).sum\
    \ * arr.take(maxLen).sum * arr.take(maxLen).sum * arr.take(maxLen).sum * arr.take(maxLen).sum\
    \ * arr.take(maxLen).sum * arr.take(maxLen).sum * arr.take(maxLen).sum * arr.take(maxLen).sum\
    \ * arr.take(maxLen).sum * arr.take(maxLen).sum * arr.take(maxLen).sum * arr.take(maxLen).sum\
    \ * arr.take(maxLen).sum * arr.take(maxLen).sum * arr.take(maxLen).sum * ", " \
    \       val result = new mutable.HashMap[Long, Long]()\n        val len = arr.length\n\
    \        val max = (len / 2).toInt\n        for (i <- 0 until max) {\n       \
    \     val key = arr(i * 2).toLong\n            val value = arr(i * 2 + 1).toLong\n\
    \            val sum = result.get(key) match {\n                case Some(sum)\
    \ => sum + value\n                case None => value\n            }\n        \
    \    result.put(key, sum)\n        }\n        val sum = 0L\n        for (i <-\
    \ 0 until result.size) {\n            val value = result.get(i).toLong\n     \
    \       sum += value\n        }\n        return sum", "        var sum = 0L\n\
    \        var i = 0\n        while (i < k) {\n            sum += arr(i)\n     \
    \       i += 1\n        }\n        return sum", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val len = arr.length\n        val maxLen = len - k\n        val maxLen2\
    \ = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen\
    \ / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n  \
    \      val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val\
    \ maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11\
    \ = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen\
    \ / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n\
    \        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n    \
    \    val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val\
    \ maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22\
    \ = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen\
    \ / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n\
    \        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n    \
    \    val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val\
    \ maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33\
    \ = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen\
    \ / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n\
    \        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n    \
    \    val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val\
    \ maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44\
    \ = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen\
    \ / 46\n        ", "        val arr = arr.toList\n        val len = arr.length\n\
    \        val max = (len - k).toInt\n        val sum = 0L\n        for(i <- 0 until\
    \ max){\n            val cur = arr(i+k-1)\n            val next = arr(i+k)\n \
    \           sum += cur + next\n        }\n        return sum", "        val result\
    \ = mutable.ListBuffer.empty[Long]\n        val len = arr.length\n        val\
    \ maxTwoDigit = arr.take(k).max\n        val maxThreeDigit = arr.take(k).max\n\
    \        val maxFourDigit = arr.take(k).max\n        val maxFiveDigit = arr.take(k).max\n\
    \        val maxSixDigit = arr.take(k).max\n        val maxSevenDigit = arr.take(k).max\n\
    \        val maxEightDigit = arr.take(k).max\n        val maxNineDigit = arr.take(k).max\n\
    \        val maxTenDigit = arr.take(k).max\n        val maxElevenDigit = arr.take(k).max\n\
    \        val maxTwelveDigit = arr.take(k).max\n        val maxThirteenDigit =\
    \ arr.take(k).max\n        val maxFourteenDigit = arr.take(k).max\n        val\
    \ maxFifteenDigit = arr.take(k).max\n        val maxSixteenDigit = arr.take(k).max\n\
    \        val maxSeventeenDigit = arr.take(k).max\n        val maxEighteenDigit\
    \ = arr.take(k).max\n        val maxNineteenDigit = arr.take(k).max\n        val\
    \ maxTwentyDigit = arr.take(k).max\n        val maxThirtyDigit = arr.take(k).max\n\
    \        val maxFortyDigit = arr.take(k).max\n        val maxFiftyDigit = arr.take(k).max\n\
    \        val maxSixtyDigit = arr.take(k).max\n        val maxSeventyDigit = arr.take(k).max\n\
    \        val maxEightyDigit = arr.take(k).max\n        val maxNinetyDigit = arr.take(k).max\n\
    \        val maxTwentyOneDigit = arr.take(k).max\n        val maxThirtyOneDigit\
    \ = arr.take(k).max\n        val maxFortyOneDigit = arr.take(k).max\n        val\
    \ maxFiftyOneDigit = arr.take(k).max\n        val maxSixtyOneDigit = arr.take(k).max\n\
    \        val maxSeventyOneDigit = arr.take(k).max\n        val maxEightyOneDigit\
    \ = arr.take(k).max\n        val maxNinetyOneDigit = arr.take(k).max\n       \
    \ val maxTwentyTwoDigit = arr.take(k).max\n        val maxThirtyTwoDigit = arr.take(k).max\n\
    \        ", "        val result = new mutable.ListBuffer[Long]()\n        var\
    \ sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n\
    \            i += 1\n        }\n        val maxLength = arr.take(k).length\n \
    \       val maxSum = arr.take(k).sum\n        val maxSumLength = maxSum.toString().length\n\
    \        while (i < arr.length) {\n            val currentSum = arr(i).toString.length\n\
    \            if (currentSum < maxSumLength) {\n                sum += arr(i)\n\
    \                i += 1\n            } else if (currentSum == maxSumLength) {\n\
    \                val currentSumString = arr(i).toString\n                val currentSumStringLength\
    \ = currentSumString.length\n                val currentSumStringWithoutLastDigit\
    \ = currentSumString.substring(0, currentSumStringLength - 1)\n              \
    \  val currentSumWithoutLastDigit = currentSumString.substring(currentSumStringLength\
    \ - 1)\n                if (currentSumWithoutLastDigit.equals(currentSumStringWithoutLastDigit))\
    \ {\n                    val currentSumWithoutLastDigitString = currentSumWithoutLastDigit.substring(0,\
    \ currentSumWithoutLastDigit.length - 1)\n                    val currentSumWithoutLastDigitStringLength\
    \ = currentSumWithoutLastDigitString.length\n                    val currentSumWithoutLastDigitStringWithoutLastDigit\
    \ = currentSumWithoutLastDigitString.substring(currentSumWithoutLastDigitStringLength\
    \ - 1)\n                    if (currentSumWithoutLastDigitStringWithoutLastDigit.equals(currentSumString))\
    \ {\n                        result.add(sum)\n                        sum = 0L\n\
    \                        i += 1\n                    }\n                }\n  \
    \          }\n        }\n        result.last", "        val arr = arr.toList\n\
    \        val len = arr.size\n        val sum = 0\n        val maxSum = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum2 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum3\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum4 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum5 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum6\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum7 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum8 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum9\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum10 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum11 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum12\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum13 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum14 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum15\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum16 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum17 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum18\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum19 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum20 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum21\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum22 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum23 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum24\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum25 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum26 = ", "        val arr = arr.toList\n        val len\
    \ = arr.size\n        val maxLen = arr.take(k).size\n        val sum = 0L\n  \
    \      for(i <- 0 until k) {\n            val cur = arr(i)\n            val curLen\
    \ = cur.toString.length\n            if(curLen > maxLen) {\n                val\
    \ curStr = cur.toString\n                val curDigits = curStr.dropRight(maxLen)\n\
    \                val curDigitSum = curDigits.foldLeft(0L)(_ + _.toLong)\n    \
    \            sum += curDigitSum\n            }\n        }\n        sum", "   \
    \     val arr = arr.toList\n        val len = arr.length\n        val max = (len\
    \ / 2).toInt\n        val sum = 0L\n        val maxSum = 0L\n        for(i <-\
    \ 0 until max){\n            val curr = arr(i).toInt\n            val next = (i\
    \ + 1) % len\n            val nextCurr = arr(next).toInt\n            val nextNext\
    \ = (next + 1) % len\n            val curr = curr - nextCurr\n            val\
    \ next = next - nextCurr\n            val nextNext = nextNext - nextCurr\n   \
    \         val nextNextNext = nextNext - nextNextCurr\n            val nextNextNextNext\
    \ = nextNextNext - nextNextNextCurr\n            val nextNextNextNextNext = nextNextNextNext\
    \ - nextNextNextNextCurr\n            val nextNextNextNextNextNext = nextNextNextNextNext\
    \ - nextNextNextNextNextCurr\n            val nextNextNextNextNextNextNext = nextNextNextNextNextNext\
    \ - nextNextNextNextNextNextCurr\n            val nextNextNextNextNextNextNext\
    \ = nextNextNextNextNextNextNext - nextNextNextNextNextNextNextCurr\n        \
    \    val nextNextNextNextNextNextNextNext = nextNextNextNextNextNextNextNext -\
    \ nextNextNextNextNextNextNextCurr\n            val nextNextNextNextNextNextNextNextNext\
    \ = nextNextNextNextNextNextNextNextNext - nextNextNextNextNextNextNextNextCurr\n\
    \            val nextNextNextNextNextNextNextNextNext = nextNextNextNextNextNextNextNextNext\
    \ - nextNextNextNextNextNextNextNextCurr\n            val nextNextNextNextNextNextNextNextNextNext\
    \ = nextNextNextNextNextNextNextNextNextNext - nextNextNextNextNextNextNextNextCurr\n\
    \            val nextNextNextNextNextNextNextNextNextNext = nextNextNextNextNextNextNextNextNextNext\
    \ - nextNextNextNextNextNextNextNextCurr\n            val nextNextNextNextNextNextNextNextNextNext\
    \ = nextNextNextNextNextNextNextNextNextNext - nextNextNextNextNextNextNextNextCurr\n\
    \            val nextNextNextNextNextNextNextNextNextNext = nextNextNextNextNextNextNextNextNextNext\
    \ - nextNextNextNextNextNextNextNextCurr\n            val nextNextNextNextNextNextNextNextNextNext\
    \ = nextNextNextNextNextNextNextNextNextNextNext - nextNextNextNextNextNextNextNext",
  "        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n   \
    \     var i = 0\n        while (i < k) {\n            sum += arr(i)\n        \
    \    i += 1\n        }\n        var j = 0\n        while (j < arr.length) {\n\
    \            if (j < k) {\n                sum += arr(j)\n                j +=\
    \ 1\n            } else {\n                sum += arr(j - k)\n               \
    \ j -= k\n            }\n        }\n        result += sum\n        return result.toList().sum",
  "        val arr = arr.toList\n        val len = arr.size\n        val maxLen =\
    \ len - k\n        val maxSum = arr.reduceLeft(_ + _)\n        val maxSum2 = maxSum\
    \ * maxLen\n        val maxSum3 = maxSum * maxLen * maxLen\n        val maxSum4\
    \ = maxSum * maxLen * maxLen * maxLen\n        val maxSum5 = maxSum * maxLen *\
    \ maxLen * maxLen * maxLen * maxLen\n        val maxSum6 = maxSum * maxLen * maxLen\
    \ * maxLen * maxLen * maxLen * maxLen * maxLen\n        val maxSum7 = maxSum *\
    \ maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen\n\
    \        val maxSum8 = maxSum * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen\
    \ * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen\
    \ * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen\
    \ * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen\
    \ * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen\
    \ * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen\
    \ * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen\
    \ * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen\
    \ * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen\
    \ * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen\
    \ * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen\
    \ * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen\
    \ * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen * maxLen", " \
    \       val result = new mutable.HashMap[Long, Long]()\n        val maxLength\
    \ = arr.take(k).map(_.toString.length).max\n        arr.take(k).foreach(x => result.put(x,\
    \ result.getOrElse(x, 0) + x))\n        val maxLength2 = result.values.map(_.toString.length).max\n\
    \        val maxLength3 = result.values.map(_.toString.length).max\n        val\
    \ maxLength4 = result.values.map(_.toString.length).max\n        val maxLength5\
    \ = result.values.map(_.toString.length).max\n        val maxLength6 = result.values.map(_.toString.length).max\n\
    \        val maxLength7 = result.values.map(_.toString.length).max\n        val\
    \ maxLength8 = result.values.map(_.toString.length).max\n        val maxLength9\
    \ = result.values.map(_.toString.length).max\n        val maxLength10 = result.values.map(_.toString.length).max\n\
    \        val maxLength11 = result.values.map(_.toString.length).max\n        val\
    \ maxLength12 = result.values.map(_.toString.length).max\n        val maxLength13\
    \ = result.values.map(_.toString.length).max\n        val maxLength14 = result.values.map(_.toString.length).max\n\
    \        val maxLength15 = result.values.map(_.toString.length).max\n        val\
    \ maxLength16 = result.values.map(_.toString.length).max\n        val maxLength17\
    \ = result.values.map(_.toString.length).max\n        val maxLength18 = result.values.map(_.toString.length).max\n\
    \        val maxLength19 = result.values.map(_.toString.length).max\n        val\
    \ maxLength20 = result.values.map(_.toString.length).max\n        val maxLength21\
    \ = result.values.map(_.toString.length).max\n        val maxLength22 = result.values.map(_.toString.length).max\n\
    \        val maxLength23 = result.values.map(_.toString.length).max\n        val\
    \ maxLength24 = result.values.map(_.toString.length).max\n        val maxLength25\
    \ = result.values.map(_.toString.length).max\n        val maxLength26 = result.values.map(_.toString.length).max\n\
    \        val maxLength27 = result.values.map(_.toString.length).max\n        val\
    \ maxLength28 = result.values.map(_.toString.length).max\n        val maxLength29\
    \ = result.values.map(_.toString.length).max\n        val maxLength30 = result.values.map(_.toString.length).max\n\
    \        val maxLength31 = result.values.map(", "        var sum = 0L\n      \
    \  var max = 0L\n        var i = 0\n        while(i < k) {\n            sum +=\
    \ arr(i)\n            max = Math.max(max, arr(i))\n            i += 1\n      \
    \  }\n        while(i < arr.length) {\n            sum += arr(i)\n           \
    \ i += 1\n        }\n        return sum + max", "        val arr = arr.toList\n\
    \        val len = arr.length\n        val maxTwoDigit = arr.take(k).maxBy(_.toString.length).toString.length\n\
    \        val maxTwoDigitSum = arr.take(k).map(_.toString.length).sum\n       \
    \ val maxTwoDigitSum2 = arr.take(k).map(_.toString.length).sum\n        val maxTwoDigitSum3\
    \ = arr.take(k).map(_.toString.length).sum\n        val maxTwoDigitSum4 = arr.take(k).map(_.toString.length).sum\n\
    \        val maxTwoDigitSum5 = arr.take(k).map(_.toString.length).sum\n      \
    \  val maxTwoDigitSum6 = arr.take(k).map(_.toString.length).sum\n        val maxTwoDigitSum7\
    \ = arr.take(k).map(_.toString.length).sum\n        val maxTwoDigitSum8 = arr.take(k).map(_.toString.length).sum\n\
    \        val maxTwoDigitSum9 = arr.take(k).map(_.toString.length).sum\n      \
    \  val maxTwoDigitSum10 = arr.take(k).map(_.toString.length).sum\n        val\
    \ maxTwoDigitSum11 = arr.take(k).map(_.toString.length).sum\n        val maxTwoDigitSum12\
    \ = arr.take(k).map(_.toString.length).sum\n        val maxTwoDigitSum13 = arr.take(k).map(_.toString.length).sum\n\
    \        val maxTwoDigitSum14 = arr.take(k).map(_.toString.length).sum\n     \
    \   val maxTwoDigitSum15 = arr.take(k).map(_.toString.length).sum\n        val\
    \ maxTwoDigitSum16 = arr.take(k).map(_.toString.length).sum\n        val maxTwoDigitSum17\
    \ = arr.take(k).map(_.toString.length).sum\n        val maxTwoDigitSum18 = arr.take(k).map(_.toString.length).sum\n\
    \        val maxTwoDigitSum19 = arr.take(k).map(_.toString.length).sum\n     \
    \   val maxTwoDigitSum20 = arr.take(k).map(_.toString.length).sum\n        val\
    \ maxTwoDigitSum21 = arr.take(k).map(_.toString.length).sum\n        val maxTwoDigitSum22\
    \ = arr.take(k).map(_.toString.length).sum\n        val maxTwoDigitSum23 = arr.take(k).map(_.toString.length).sum\n\
    \        val maxTwoDigitSum24 = arr.take(k).map(_.toString.length).sum\n     \
    \   val maxTwoDigitSum25 = arr.take(k", "        val result = new mutable.HashMap[Long,\
    \ Long]()\n        for (i <- 0 until arr.size) {\n            val value = arr(i)\n\
    \            if (result.contains(value)) {\n                val oldValue = result.get(value)\n\
    \                if (oldValue > k) {\n                    result.put(value, oldValue\
    \ + k)\n                }\n            } else {\n                result.put(value,\
    \ k)\n            }\n        }\n        val sum = result.values.sum\n        return\
    \ sum", "        val arr = arr.toList\n        val len = arr.size\n        val\
    \ maxLen = arr.take(k).size\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen", "  \
    \      val arr = arr.toList\n        val len = arr.size\n        val sum = 0\n\
    \        val twoDigits = arr.take(k).filter(_ % 10 == 0)\n        val twoDigitsLen\
    \ = twoDigits.size\n        for(i <- 0 until k){\n            val twoDigit = twoDigits(i)\n\
    \            val twoDigitLen = twoDigits.filter(_ % 10 == 0).size\n          \
    \  val twoDigitSum = twoDigits(i) + twoDigits(i + 1)\n            val twoDigitSumLen\
    \ = twoDigitSum.size\n            val twoDigitSumLen2 = twoDigitSumLen * 2\n \
    \           val twoDigitSumLen3 = twoDigitSumLen * 3\n            val twoDigitSumLen4\
    \ = twoDigitSumLen * 4\n            val twoDigitSumLen5 = twoDigitSumLen * 5\n\
    \            val twoDigitSumLen6 = twoDigitSumLen * 6\n            val twoDigitSumLen7\
    \ = twoDigitSumLen * 7\n            val twoDigitSumLen8 = twoDigitSumLen * 8\n\
    \            val twoDigitSumLen9 = twoDigitSumLen * 9\n            val twoDigitSumLen10\
    \ = twoDigitSumLen * 10\n            val twoDigitSumLen11 = twoDigitSumLen * 11\n\
    \            val twoDigitSumLen12 = twoDigitSumLen * 12\n            val twoDigitSumLen13\
    \ = twoDigitSumLen * 13\n            val twoDigitSumLen14 = twoDigitSumLen * 14\n\
    \            val twoDigitSumLen15 = twoDigitSumLen * 15\n            val twoDigitSumLen16\
    \ = twoDigitSumLen * 16\n            val twoDigitSumLen17 = twoDigitSumLen * 17\n\
    \            val twoDigitSumLen18 = twoDigitSumLen * 18\n            val twoDigitSumLen19\
    \ = twoDigitSumLen * 19\n            val twoDigitSumLen20 = twoDigitSumLen * 20\n\
    \            val twoDigitSumLen21 = twoDigitSumLen * 21\n            val twoDigitSumLen22\
    \ = twoDigitSumLen * 22\n            val twoDigitSumLen23 = twoDigitSumLen * 23\n\
    \            val twoDigitSumLen24 = twoDigitSumLen * 24\n            val twoDigitSumLen25\
    \ = twoDigitSumLen * 25\n            val twoDigitSumLen26 = twoDigitSumLen * 26\n\
    \            val twoDigitSumLen27 = twoDigitSumLen * 27\n            val twoDigitSumLen28\
    \ = twoDigitSumLen * 28\n            val twoDigitSumLen29 = two", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        var i\
    \ = 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n\
    \        }\n        val maxLength = arr.take(k).size\n        val maxLength2 =\
    \ maxLength * maxLength\n        while (i < arr.size) {\n            val length\
    \ = arr(i) - sum\n            if (length < maxLength) {\n                sum +=\
    \ length\n                i += 1\n            } else if (length < maxLength2)\
    \ {\n                sum += length / maxLength\n                i += 1\n     \
    \       } else {\n                result.add(sum)\n                sum = 0\n \
    \               i += 1\n            }\n        }\n        result.add(sum)\n  \
    \      sum", "        val arr = arr.toList\n        val len = arr.size\n     \
    \   val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max",
  "        val sum = 0L\n        val arr = arr.toList\n        val len = arr.size\n\
    \        val arr = arr.take(k).toList\n        val arr2 = arr.drop(k).toList\n\
    \        val arr3 = arr.take(k).toList\n        val arr4 = arr.drop(k).toList\n\
    \        val arr5 = arr.take(k).toList\n        val arr6 = arr.drop(k).toList\n\
    \        val arr7 = arr.take(k).toList\n        val arr8 = arr.drop(k).toList\n\
    \        val arr9 = arr.take(k).toList\n        val arr10 = arr.drop(k).toList\n\
    \        val arr11 = arr.take(k).toList\n        val arr12 = arr.drop(k).toList\n\
    \        val arr13 = arr.take(k).toList\n        val arr14 = arr.drop(k).toList\n\
    \        val arr15 = arr.take(k).toList\n        val arr16 = arr.drop(k).toList\n\
    \        val arr17 = arr.take(k).toList\n        val arr18 = arr.drop(k).toList\n\
    \        val arr19 = arr.take(k).toList\n        val arr20 = arr.drop(k).toList\n\
    \        val arr21 = arr.take(k).toList\n        val arr22 = arr.drop(k).toList\n\
    \        val arr23 = arr.take(k).toList\n        val arr24 = arr.drop(k).toList\n\
    \        val arr25 = arr.take(k).toList\n        val arr26 = arr.drop(k).toList\n\
    \        val arr27 = arr.take(k).toList\n        val arr28 = arr.drop(k).toList\n\
    \        val arr29 = arr.take(k).toList\n        val arr30 = arr.drop(k).toList\n\
    \        val arr31 = arr.take(k).toList\n        val arr32 = arr.drop(k).toList\n\
    \        val arr33 = arr.take(k).toList\n        val arr34 = arr.drop(k).toList\n\
    \        val arr35 = arr.take(k).toList\n        val arr36 = arr.drop(k).toList\n\
    \        val arr37 = arr.take(k).toList\n        val arr38 = arr.drop(k).toList\n\
    \        val arr39 = arr.take(k).toList\n        val arr40 = arr.drop(k).toList\n\
    \        val arr41 = arr.take(k).toList\n        val arr42 = arr.drop(k).toList\n\
    \        val arr43 = arr.take(k).toList\n        val arr44 = arr.drop(k).toList\n\
    \        val arr45 = arr.take(k).toList\n        val arr46 = arr.drop(k).toList\n",
  "        val result = new mutable.ListBuffer[Long]()\n        val maxLength = arr.take(k).map(_.toString).map(_.length).max\n\
    \        arr.take(k).foreach(x => {\n            val str = x.toString\n      \
    \      val length = str.length\n            if (length > maxLength) {\n      \
    \          result.add(0)\n            } else {\n                val index = str.indexOf(\"\
    0\")\n                if (index >= 0) {\n                    val value = str.substring(index\
    \ + 1, length)\n                    result.add(value.toLong)\n               \
    \ }\n            }\n        })\n        result.sum", "        val arr = arr.toList\n\
    \        val len = arr.length\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val maxLen = Math.min(k, len)\n        for(i <- 0 until maxLen) {\n \
    \           val cur = arr(i)\n            val next = Math.min(arr(i+1), arr(i+2))\n\
    \            result += cur + next\n        }\n        val sum = result.toList.reduceLeft(_\
    \ + _)\n        return sum", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        for (i <- 0 until k) {\n            sum += arr(i)\n\
    \        }\n        result.add(sum)\n        for (i <- 0 until k) {\n        \
    \    sum += arr(i) - arr(i-1)\n            if (sum < 10) {\n                result.add(sum)\n\
    \            }\n        }\n        sum", "        val arr = arr.toList\n     \
    \   val len = arr.size\n        val maxSum = arr.take(k).foldLeft(0)(_ + _)\n\
    \        val maxSum2 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum3 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum4 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum5\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum6 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum7 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum8\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum9 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum10 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum11\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum12 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum13 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum14\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum15 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum16 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum17\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum18 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum19 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum20\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum21 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum22 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum23\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum24 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum25 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum26\
    \ = arr.take(k).fold", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val len = arr.length\n        val maxLen = arr.take(k).max\n        val\
    \ maxLenIndex = arr.indexOf(maxLen)\n        val maxLenIndex2 = arr.indexOf(maxLen,\
    \ maxLenIndex + 1)\n        val maxLenIndex3 = arr.indexOf(maxLen, maxLenIndex\
    \ + 2)\n        val maxLenIndex4 = arr.indexOf(maxLen, maxLenIndex + 3)\n    \
    \    val maxLenIndex5 = arr.indexOf(maxLen, maxLenIndex + 4)\n        val maxLenIndex6\
    \ = arr.indexOf(maxLen, maxLenIndex + 5)\n        val maxLenIndex7 = arr.indexOf(maxLen,\
    \ maxLenIndex + 6)\n        val maxLenIndex8 = arr.indexOf(maxLen, maxLenIndex\
    \ + 7)\n        val maxLenIndex9 = arr.indexOf(maxLen, maxLenIndex + 8)\n    \
    \    val maxLenIndex10 = arr.indexOf(maxLen, maxLenIndex + 9)\n        val maxLenIndex11\
    \ = arr.indexOf(maxLen, maxLenIndex + 10)\n        val maxLenIndex12 = arr.indexOf(maxLen,\
    \ maxLenIndex + 11)\n        val maxLenIndex13 = arr.indexOf(maxLen, maxLenIndex\
    \ + 12)\n        val maxLenIndex14 = arr.indexOf(maxLen, maxLenIndex + 13)\n \
    \       val maxLenIndex15 = arr.indexOf(maxLen, maxLenIndex + 14)\n        val\
    \ maxLenIndex16 = arr.indexOf(maxLen, maxLenIndex + 15)\n        val maxLenIndex17\
    \ = arr.indexOf(maxLen, maxLenIndex + 16)\n        val maxLenIndex18 = arr.indexOf(maxLen,\
    \ maxLenIndex + 17)\n        val maxLenIndex19 = arr.indexOf(maxLen, maxLenIndex\
    \ + 18)\n        val maxLenIndex20 = arr.indexOf(maxLen, maxLenIndex + 19)\n \
    \       val maxLenIndex21 = arr.indexOf(maxLen, maxLenIndex + 20)\n        val\
    \ maxLenIndex22 = arr.indexOf(maxLen, maxLenIndex + 21)\n        val maxLenIndex23\
    \ = arr.indexOf(maxLen, maxLenIndex + 22)\n        val maxLenIndex24 = arr.indexOf(maxLen,\
    \ maxLenIndex + 23)\n        val maxLenIndex25 = arr.indexOf(maxLen, maxLenIndex\
    \ + 24)\n        val maxLenIndex26 = arr.indexOf(maxLen, maxLenIndex + 25)\n \
    \       val maxLenIndex27 = arr.indexOf(maxLen, maxLenIndex + 26)\n        val\
    \ maxLenIndex28 = arr.indexOf(maxLen, ", "        val arr = arr.toList\n     \
    \   val len = arr.length\n        val sum = 0L\n        val maxLen = arr.take(k).map(_.toString.length).max\n\
    \        for(i <- 0 until k) {\n            val curr = arr.take(i).map(_.toString).map(_.toLong).toList\n\
    \            val curLen = curr.map(_.length).max\n            val sum = sum +\
    \ curr.take(curLen).sum\n        }\n        sum", "        val arr = arr.toList\n\
    \        val len = arr.length\n        val maxLen = len - k\n        val maxLen2\
    \ = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen\
    \ / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n  \
    \      val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val\
    \ maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11\
    \ = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen\
    \ / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n\
    \        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n    \
    \    val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val\
    \ maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22\
    \ = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen\
    \ / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n\
    \        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n    \
    \    val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val\
    \ maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33\
    \ = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen\
    \ / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n\
    \        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n    \
    \    val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val\
    \ maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44\
    \ = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen\
    \ / 46\n        val maxLen47 = max", "        val arr = arr.toList\n        val\
    \ len = arr.length\n        val result = new mutable.ListBuffer[Long]()\n    \
    \    var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum\
    \ += arr(i)\n            i += 1\n        }\n        val maxLength = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLength2 = arr.take(k).map(_.toString).map(_.length).max\n    \
    \    while (i < len) {\n            val curr = arr(i)\n            if (curr.toString.length\
    \ == maxLength) {\n                sum += curr\n                i += 1\n     \
    \       } else if (curr.toString.length == maxLength2) {\n                sum\
    \ += curr\n                i += 1\n            } else {\n                sum -=\
    \ curr\n                i += 1\n            }\n        }\n        result.toList.sum",
  "        val sum = 0L\n        var i = 0\n        while (i < k) {\n            sum\
    \ += arr(i)\n            i += 1\n        }\n        val maxLength = arr.take(k).map(_.toString.length).max\n\
    \        val maxLengthSum = arr.take(k).map(_.toString).map(_.length).max\n  \
    \      val maxLengthSumOfMaxLength = arr.take(k).map(_.toString).map(_.length).map(_.max).max\n\
    \        val maxLengthSumOfMaxLengthOfMaxLength = arr.take(k).map(_.toString).map(_.length).map(_.max).map(_.max).max\n\
    \        val maxLengthSumOfMaxLengthOfMaxLengthOfMaxLength = arr.take(k).map(_.toString).map(_.length).map(_.max).map(_.max).map(_.max).max\n\
    \        val maxLengthSumOfMaxLengthOfMaxLengthOfMaxLengthOfMaxLength = arr.take(k).map(_.toString).map(_.length).map(_.max).map(_.max).map(_.max).map(_.max).max\n\
    \        val maxLengthSumOfMaxLengthOfMaxLengthOfMaxLengthOfMaxLengthOfMaxLength\
    \ = arr.take(k).map(_.toString).map(_.length).map(_.max).map(_.max).map(_.max).map(_.max).map(_.max).max\n\
    \        val maxLengthSumOfMaxLengthOfMaxLengthOfMaxLengthOfMaxLengthOfMaxLengthOfMaxLength\
    \ = arr.take(k).map(_.toString).map(_.length).map(_.max).map(_.max).map(_.max).map(_.max).map(_.max).map(_.max).max\n\
    \        val maxLengthSumOfMaxLengthOfMaxLengthOfMaxLengthOfMaxLengthOfMaxLengthOfMaxLengthOfMaxLength\
    \ = arr.take(k).map(_.toString).map(_.length).map(_.max).map(_.max).map(_.max).map(_.max).map(_.max).map(_.max).map(_.max).map(_.max).max\n\
    \        val maxLengthSumOfMaxLengthOfMaxLengthOfMaxLengthOfMaxLengthOfMaxLengthOfMaxLengthOfMaxLengthOfMaxLength\
    \ = arr.take(k).map(_.toString).map(_.length).map(_.max).map(_.max).map(_.max).map(_.max).map(_.max).map(_.max).map(_.max).map(_.max).map(_.max).max\n\
    \        val maxLengthSumOfMaxLengthOfMaxLengthOfMaxLengthOfMaxLengthOfMaxLengthOfMaxLengthOfMaxLengthOfMaxLengthOfMaxLength\
    \ = arr.take(k).map(_.toString).", "        val arr = arr.toList\n        val\
    \ len = arr.length\n        val result = new mutable.ListBuffer[Long]()\n    \
    \    var sum = 0L\n        var i = 0\n        while (i < len) {\n            val\
    \ element = arr(i)\n            if (element < 10) {\n                sum += element\n\
    \                i += 1\n            } else if (element < 100) {\n           \
    \     sum += element % 10\n                i += 1\n            } else if (element\
    \ < 1000) {\n                sum += element % 100\n                i += 1\n  \
    \          } else if (element < 10000) {\n                sum += element % 1000\n\
    \                i += 1\n            } else if (element < 100000) {\n        \
    \        sum += element % 10000\n                i += 1\n            } else if\
    \ (element < 1000000) {\n                sum += element % 100000\n           \
    \     i += 1\n            } else if (element < 10000000) {\n                sum\
    \ += element % 1000000\n                i += 1\n            } else if (element\
    \ < 100000000) {\n                sum += element % 10000000\n                i\
    \ += 1\n            } else if (element < 1000000000) {\n                sum +=\
    \ element % 100000000\n                i += 1\n            } else if (element\
    \ < 10000000000) {\n                sum += element % 1000000000\n            \
    \    i += 1\n            } else if (element < 100000000000) {\n              \
    \  sum += element % 10000000000\n                i += 1\n            } else if\
    \ (element < 1000000000000) {\n                sum += element % 100000000000\n\
    \                i += 1\n            } else if (element < 10000000000000) {\n\
    \                sum += element % 1000000000000\n                i += 1\n    \
    \        } else if (element < 100000000000000) {\n                sum += element\
    \ % 10000000000000\n                i += 1\n            } else if (element < 1000000000000000)\
    \ {\n                sum += element % 100000000000000\n                i += 1\n\
    \            } else if (element < 10000000000000000) {\n                sum +=\
    \ element % 1000000000000000\n                i += 1\n            } else if (element\
    \ < 100000000000000000) {\n                sum += element % 10000000000000000\n\
    \                i += 1\n            } else if (element < 100000000000000000)\
    \ {\n                sum += element % 100000000000000000\n                i +=\
    \ 1\n            } else if (element < 1000000000000000000) {\n               \
    \ sum += element % 1000000000000000000\n                i += 1\n            }\
    \ else if (element < 10000000000000000000) {\n                sum += element %\
    \ 10000000000000000000\n                i += 1\n            } else if (element\
    \ < 100000000000000000000) {\n                sum += element % 100000000000000000000\n\
    \                i += 1\n            } else if (element < 1000000000000000000000)\
    \ {\n                sum += element % 1000000000000000000000\n               \
    \ i += 1\n            } else if (element < 10000000000000000000000) {\n      \
    \          sum += element % 10000000000000000000000\n                i += 1\n\
    \            } else if (element < 100000000000000000000000) {\n              \
    \  sum += element % 100000000000000000000000\n                i += 1\n       \
    \     } else if (element < 1000000000000000000000000) {\n                sum +=\
    \ element % 1000000000000000000000000\n                i += 1\n            } else\
    \ if (element < 10000000000000000000000000) {\n                sum += element\
    \ % 10000000000000000000000000\n                i += 1\n            } else if\
    \ (element < 100000000000000000000000000) {\n                sum += element %\
    \ 1000000000000000000", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val maxLen = arr.take(k).map(_.toString).map(_.length).max\n        for(i\
    \ <- 0 until k) {\n            val curr = arr.take(i).map(_.toString).map(_.length).max\n\
    \            if(curr > maxLen) {\n                result.clear()\n           \
    \     maxLen = curr\n            }\n            result += arr.take(i).map(_.toString).map(_.toLong)\n\
    \        }\n        result.sum", "        val result = new mutable.HashMap[Long,\
    \ Long]()\n        arr.foreach(x => result.put(x, result.getOrElse(x, 0) + x))\n\
    \        val maxCount = arr.take(k).count(x => result.getOrElse(x, 0) > result.getOrElse(x,\
    \ 1))\n        val maxCount = maxCount.toLong\n        val maxCountMap = result.filter(_._2\
    \ > maxCount).map(_._1)\n        val maxCountMapSize = maxCountMap.size\n    \
    \    val maxCountMapSize = maxCountMapSize.toLong\n        val maxCountMapSum\
    \ = maxCountMap.sum\n        val maxCountMapSum = maxCountMapSum.toLong\n    \
    \    val maxCountMapSum = maxCountMapSum + maxCountMapSize * maxCountMapSize *\
    \ maxCount\n        val maxCountMapSum = maxCountMapSum.toLong\n        val maxCountMapSum\
    \ = maxCountMapSum + maxCountMapSize * maxCountMapSize * maxCount\n        val\
    \ maxCountMapSum = maxCountMapSum.toLong\n        val maxCountMapSum = maxCountMapSum\
    \ + maxCountMapSize * maxCountMapSize * maxCount\n        val maxCountMapSum =\
    \ maxCountMapSum.toLong\n        val maxCountMapSum = maxCountMapSum + maxCountMapSize\
    \ * maxCountMapSize * maxCount\n        val maxCountMapSum = maxCountMapSum.toLong\n\
    \        val maxCountMapSum = maxCountMapSum + maxCountMapSize * maxCountMapSize\
    \ * maxCount\n        val maxCountMapSum = maxCountMapSum.toLong\n        val\
    \ maxCountMapSum = maxCountMapSum + maxCountMapSize * maxCountMapSize * maxCount\n\
    \        val maxCountMapSum = maxCountMapSum.toLong\n        val maxCountMapSum\
    \ = maxCountMapSum + maxCountMapSize * maxCountMapSize * maxCount\n        val\
    \ maxCountMapSum = maxCountMapSum.toLong\n        val maxCountMapSum = maxCountMapSum\
    \ + maxCountMapSize * maxCountMapSize * maxCount\n        val maxCountMapSum =\
    \ maxCountMapSum.toLong\n        val maxCountMapSum = maxCountMapSum + maxCountMapSize\
    \ * maxCountMapSize * maxCount\n        val maxCountMapSum = maxCountMapSum.toLong\n\
    \        val maxCountMapSum = maxCountMapSum + maxCountMapSize * maxCountMapSize\
    \ * maxCount\n        ", "        val arr = arr.toList\n        val len = arr.length\n\
    \        val sum = 0\n        var i = 0\n        while(i < len) {\n          \
    \  val curr = arr(i)\n            val next = (i + 1 < len) ? arr(i + 1) : 0\n\
    \            val next2 = (next+1 < len) ? arr(next+1) : 0\n            val next3\
    \ = (next2+1 < len) ? arr(next2+1) : 0\n            val next4 = (next3+1 < len)\
    \ ? arr(next3+1) : 0\n            val next5 = (next4+1 < len) ? arr(next4+1) :\
    \ 0\n            val next6 = (next5+1 < len) ? arr(next5+1) : 0\n            val\
    \ next7 = (next6+1 < len) ? arr(next6+1) : 0\n            val next8 = (next7+1\
    \ < len) ? arr(next7+1) : 0\n            val next9 = (next8+1 < len) ? arr(next8+1)\
    \ : 0\n            val next10 = (next9+1 < len) ? arr(next9+1) : 0\n         \
    \   val next11 = (next10+1 < len) ? arr(next10+1) : 0\n            val next12\
    \ = (next11+1 < len) ? arr(next11+1) : 0\n            val next13 = (next12+1 <\
    \ len) ? arr(next12+1) : 0\n            val next14 = (next13+1 < len) ? arr(next13+1)\
    \ : 0\n            val next15 = (next14+1 < len) ? arr(next14+1) : 0\n       \
    \     val next16 = (next15+1 < len) ? arr(next15+1) : 0\n            val next17\
    \ = (next16+1 < len) ? arr(next16+1) : 0\n            val next18 = (next17+1 <\
    \ len) ? arr(next17+1) : 0\n            val next19 = (next18+1 < len) ? arr(next18+1)\
    \ : 0\n            val next20 = (next19+1 < len) ? arr(next19+1) : 0\n       \
    \     val next21 = (next20+1 < len) ? arr(next20+1) : 0\n            val next22\
    \ = (next21+1 < len) ? arr(next21+1) : 0\n            val next23 = (next22+1 <\
    \ len) ? arr(next22+1) : 0\n            val next24 = (next23+1 < len) ? arr(next23+1)\
    \ : 0\n            val next25 = (next24+1 < len) ? arr(next24+1) : 0\n       \
    \     val next26 = (next25+1 < len) ? arr(next25+1) : 0\n            val next27\
    \ = (next26+1 < len) ? arr(next26+1) : 0\n            ", "        val arr = arr.toList\n\
    \        val len = arr.size\n        val maxLen = len - k\n        val maxSum\
    \ = arr.take(k).sum\n        val maxSum2 = arr.take(maxLen).sum\n        val maxSum3\
    \ = arr.take(maxLen + 1).sum\n        val maxSum4 = arr.take(maxLen + 2).sum\n\
    \        val maxSum5 = arr.take(maxLen + 3).sum\n        val maxSum6 = arr.take(maxLen\
    \ + 4).sum\n        val maxSum7 = arr.take(maxLen + 5).sum\n        val maxSum8\
    \ = arr.take(maxLen + 6).sum\n        val maxSum9 = arr.take(maxLen + 7).sum\n\
    \        val maxSum10 = arr.take(maxLen + 8).sum\n        val maxSum11 = arr.take(maxLen\
    \ + 9).sum\n        val maxSum12 = arr.take(maxLen + 10).sum\n        val maxSum13\
    \ = arr.take(maxLen + 11).sum\n        val maxSum14 = arr.take(maxLen + 12).sum\n\
    \        val maxSum15 = arr.take(maxLen + 13).sum\n        val maxSum16 = arr.take(maxLen\
    \ + 14).sum\n        val maxSum17 = arr.take(maxLen + 15).sum\n        val maxSum18\
    \ = arr.take(maxLen + 16).sum\n        val maxSum19 = arr.take(maxLen + 17).sum\n\
    \        val maxSum20 = arr.take(maxLen + 18).sum\n        val maxSum21 = arr.take(maxLen\
    \ + 19).sum\n        val maxSum22 = arr.take(maxLen + 20).sum\n        val maxSum23\
    \ = arr.take(maxLen + 21).sum\n        val maxSum24 = arr.take(maxLen + 22).sum\n\
    \        val maxSum25 = arr.take(maxLen + 23).sum\n        val maxSum26 = arr.take(maxLen\
    \ + 24).sum\n        val maxSum27 = arr.take(maxLen + 25).sum\n        val maxSum28\
    \ = arr.take(maxLen + 26).sum\n        val maxSum29 = arr.take(maxLen + 27).sum\n\
    \        val maxSum30 = arr.take(maxLen + 28).sum\n        val maxSum31 = arr.take(maxLen\
    \ + 29).sum\n        val maxSum32 = arr.take(maxLen + 30).sum\n", "        var\
    \ sum = 0L\n        var index = 0\n        var maxIndex = 0\n        for(i <-\
    \ 0 until k){\n            sum += arr(index)\n            index += 1\n       \
    \ }\n        for(i <- 0 until k){\n            sum += arr(maxIndex)\n        \
    \    maxIndex += 1\n        }\n        return sum", "        val sum = 0L\n  \
    \      var i = 0\n        while(i < k) {\n            sum += arr(i)\n        \
    \    i += 1\n        }\n        while(i < arr.length) {\n            sum += arr(i)\n\
    \            i += 1\n        }\n        return sum", "        val arr = arr.toList\n\
    \        val result = mutable.ListBuffer.empty[Long]\n        for(i <- 0 until\
    \ arr.size - k){\n            val sum = arr(i) + arr(i+k)\n            result\
    \ += sum\n        }\n        result.sum", "        val arr = arr.toList\n    \
    \    val len = arr.size\n        val sum = 0\n        val arr = arr.sortWith(_\
    \ < _)\n        val firstK = arr.take(k)\n        val secondK = arr.drop(k)\n\
    \        val firstKSum = firstK.foldLeft(0)(_ + _)\n        val secondKSum = secondK.foldLeft(0)(_\
    \ + _)\n        val sum = firstKSum + secondKSum\n        return sum", "     \
    \   val result = mutable.ListBuffer.empty[Long]\n        for (i <- 0 until arr.length)\n\
    \            if (arr.take(i).sum >= k)\n                result += arr.take(i)\n\
    \        result.sum", "        val arr = arr.toList\n        val len = arr.size\n\
    \        val maxSum = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum2 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum3 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum4\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum5 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum6 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum7\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum8 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum9 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum10\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum11 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum12 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum13\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum14 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum15 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum16\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum17 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum18 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum19\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum20 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum21 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum22\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum23 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum24 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum25\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum26 = arr.take(k).fold",
  "        val result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n\
    \        val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        ", "        val arr\
    \ = arr.toList\n        val len = arr.size\n        val maxLen = len - k\n   \
    \     val maxSum = arr.take(k).sum\n        val maxSum2 = arr.take(maxLen).sum\n\
    \        val maxSum3 = arr.take(maxLen-1).sum\n        val maxSum4 = arr.take(maxLen-2).sum\n\
    \        val maxSum5 = arr.take(maxLen-3).sum\n        val maxSum6 = arr.take(maxLen-4).sum\n\
    \        val maxSum7 = arr.take(maxLen-5).sum\n        val maxSum8 = arr.take(maxLen-6).sum\n\
    \        val maxSum9 = arr.take(maxLen-7).sum\n        val maxSum10 = arr.take(maxLen-8).sum\n\
    \        val maxSum11 = arr.take(maxLen-9).sum\n        val maxSum12 = arr.take(maxLen-10).sum\n\
    \        val maxSum13 = arr.take(maxLen-11).sum\n        val maxSum14 = arr.take(maxLen-12).sum\n\
    \        val maxSum15 = arr.take(maxLen-13).sum\n        val maxSum16 = arr.take(maxLen-14).sum\n\
    \        val maxSum17 = arr.take(maxLen-15).sum\n        val maxSum18 = arr.take(maxLen-16).sum\n\
    \        val maxSum19 = arr.take(maxLen-17).sum\n        val maxSum20 = arr.take(maxLen-18).sum\n\
    \        val maxSum21 = arr.take(maxLen-19).sum\n        val maxSum22 = arr.take(maxLen-20).sum\n\
    \        val maxSum23 = arr.take(maxLen-21).sum\n        val maxSum24 = arr.take(maxLen-22).sum\n\
    \        val maxSum25 = arr.take(maxLen-23).sum\n        val maxSum26 = arr.take(maxLen-24).sum\n\
    \        val maxSum27 = arr.take(maxLen-25).sum\n        val maxSum28 = arr.take(maxLen-26).sum\n\
    \        val maxSum29 = arr.take(maxLen-27).sum\n        val maxSum30 = arr.take(maxLen-28).sum\n\
    \        val maxSum31 = arr.take(maxLen-29).sum\n        val maxSum32 = arr.take(maxLen-30).sum\n\
    \        val maxSum33 = arr.take(maxLen-31).sum\n        val maxSum", "      \
    \  val result = mutable.ListBuffer[Long]()\n        val len = arr.length\n   \
    \     val maxDigit = arr.take(k).max\n        val maxDigitIndex = arr.lastIndexWhere(_\
    \ == maxDigit)\n        val maxDigitIndex = maxDigitIndex.get + 1\n        val\
    \ maxDigit = arr.take(maxDigitIndex).max\n        val maxDigitIndex = arr.lastIndexWhere(_\
    \ == maxDigit)\n        val maxDigitIndex = maxDigitIndex.get + 1\n        val\
    \ maxDigit = arr.take(maxDigitIndex).max\n        val maxDigitIndex = arr.lastIndexWhere(_\
    \ == maxDigit)\n        val maxDigitIndex = maxDigitIndex.get + 1\n        val\
    \ maxDigit = arr.take(maxDigitIndex).max\n        val maxDigitIndex = arr.lastIndexWhere(_\
    \ == maxDigit)\n        val maxDigitIndex = maxDigitIndex.get + 1\n        val\
    \ maxDigit = arr.take(maxDigitIndex).max\n        val maxDigitIndex = arr.lastIndexWhere(_\
    \ == maxDigit)\n        val maxDigitIndex = maxDigitIndex.get + 1\n        val\
    \ maxDigit = arr.take(maxDigitIndex).max\n        val maxDigitIndex = arr.lastIndexWhere(_\
    \ == maxDigit)\n        val maxDigitIndex = maxDigitIndex.get + 1\n        val\
    \ maxDigit = arr.take(maxDigitIndex).max\n        val maxDigitIndex = arr.lastIndexWhere(_\
    \ == maxDigit)\n        val maxDigitIndex = maxDigitIndex.get + 1\n        val\
    \ maxDigit = arr.take(maxDigitIndex).max\n        val maxDigitIndex = arr.lastIndexWhere(_\
    \ == maxDigit)\n        val maxDigitIndex = maxDigitIndex.get + 1\n        val\
    \ maxDigit = arr.take(maxDigitIndex).max\n        val maxDigitIndex = arr.lastIndexWhere(_\
    \ == maxDigit)\n        val maxDigitIndex = maxDigitIndex.get + 1\n        val\
    \ maxDigit = arr.take(maxDigitIndex).max\n        val maxDigitIndex = arr.lastIndexWhere(_\
    \ == maxDigit)\n        val maxDigitIndex = maxDigitIndex.get + 1\n        val\
    \ maxDigit = arr.take(maxDigitIndex).max\n        val maxDigitIndex = arr.lastIndexWhere(_\
    \ == maxDigit)\n        val maxDigitIndex = maxDigitIndex.get + 1\n        val\
    \ maxDigit = arr.take(maxDigitIndex).max\n        val maxDigitIndex = arr.lastIndexWhere(_\
    \ == maxDigit)\n        val maxDigitIndex = maxDigitIndex.get + 1\n        val\
    \ maxDigit = arr.take(maxDigitIndex).max\n        val max", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        val arr = arr.toList\n        val\
    \ len = arr.length\n        val maxTwoDigits = arr.take(k).map(_.toString.length).max\n\
    \        val maxTwoDigitsIndex = arr.take(k).map(_.toString.length).indexWhere(_\
    \ == maxTwoDigits)\n        val maxTwoDigitsSum = arr.take(k).map(_.toString).map(_.toLong).sum\n\
    \        val maxTwoDigitsSumIndex = arr.take(k).map(_.toString).map(_.toLong).indexWhere(_\
    \ == maxTwoDigitsSum)\n        val maxTwoDigitsSumIndex2 = arr.take(k).map(_.toString).map(_.toLong).indexWhere(_\
    \ == maxTwoDigitsSumIndex + 1)\n        val maxTwoDigitsSumIndex3 = arr.take(k).map(_.toString).map(_.toLong).indexWhere(_\
    \ == maxTwoDigitsSumIndex + 2)\n        val maxTwoDigitsSumIndex4 = arr.take(k).map(_.toString).map(_.toLong).indexWhere(_\
    \ == maxTwoDigitsSumIndex + 3)\n        val maxTwoDigitsSumIndex5 = arr.take(k).map(_.toString).map(_.toLong).indexWhere(_\
    \ == maxTwoDigitsSumIndex + 4)\n        val maxTwoDigitsSumIndex6 = arr.take(k).map(_.toString).map(_.toLong).indexWhere(_\
    \ == maxTwoDigitsSumIndex + 5)\n        val maxTwoDigitsSumIndex7 = arr.take(k).map(_.toString).map(_.toLong).indexWhere(_\
    \ == maxTwoDigitsSumIndex + 6)\n        val maxTwoDigitsSumIndex8 = arr.take(k).map(_.toString).map(_.toLong).indexWhere(_\
    \ == maxTwoDigitsSumIndex + 7)\n        val maxTwoDigitsSumIndex9 = arr.take(k).map(_.toString).map(_.toLong).indexWhere(_\
    \ == maxTwoDigitsSumIndex + 8)\n        val maxTwoDigitsSumIndex10 = arr.take(k).map(_.toString).map(_.toLong).indexWhere(_\
    \ == maxTwoDigitsSumIndex + 9)\n        val maxTwoDigitsSumIndex11 = arr.take(k).map(_.toString).map(_.toLong).indexWhere(_\
    \ == maxTwoDigitsSumIndex + 10)\n        val maxTwoDigitsSumIndex12 = arr.take(k).map(_.toString).map(_.toLong).indexWhere(_\
    \ == maxTwoDigitsSumIndex + 11)\n        val max", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val arr = arr.toList\n        val len = arr.length\n        val maxDigit\
    \ = arr.take(k).map(_.toString.length).max\n        val maxDigits = arr.take(k).map(_.toString.length).filter(_\
    \ <= maxDigit).length\n        val maxDigitSum = arr.take(k).map(_.toString.length).filter(_\
    \ <= maxDigit).sum\n        val maxDigitSums = arr.take(k).map(_.toString.length).filter(_\
    \ <= maxDigit).sum\n        val maxDigitSumsOfMaxDigits = arr.take(k).map(_.toString.length).filter(_\
    \ <= maxDigit).sum\n        val maxDigitSumsOfMaxDigitsOfMaxDigits = arr.take(k).map(_.toString.length).filter(_\
    \ <= maxDigit).sum\n        val maxDigitSumsOfMaxDigitsOfMaxDigitsOfMaxDigits\
    \ = arr.take(k).map(_.toString.length).filter(_ <= maxDigit).sum\n        val\
    \ maxDigitSumsOfMaxDigitsOfMaxDigitsOfMaxDigitsOfMaxDigits = arr.take(k).map(_.toString.length).filter(_\
    \ <= maxDigit).sum\n        val maxDigitSumsOfMaxDigitsOfMaxDigitsOfMaxDigitsOfMaxDigitsOfMaxDigits\
    \ = arr.take(k).map(_.toString.length).filter(_ <= maxDigit).sum\n        val\
    \ maxDigitSumsOfMaxDigitsOfMaxDigitsOfMaxDigitsOfMaxDigitsOfMaxDigitsOfMaxDigits\
    \ = arr.take(k).map(_.toString.length).filter(_ <= maxDigit).sum\n        val\
    \ maxDigitSumsOfMaxDigitsOfMaxDigitsOfMaxDigitsOfMaxDigitsOfMaxDigitsOfMaxDigitsOfMaxDigits\
    \ = arr.take(k).map(_.toString.length).filter(_ <= maxDigit).sum\n        val\
    \ maxDigitSumsOfMaxDigitsOfMaxDigitsOfMaxDigitsOfMaxDigitsOfMaxDigitsOfMaxDigitsOfMaxDigitsOfMaxDigits\
    \ = arr.take(k).map(_.toString.length).filter(_ <= maxDigit).sum\n        val\
    \ maxDigitSumsOfMaxDigitsOfMaxDigitsOfMaxDigitsOfMaxDigitsOfMaxDigitsOfMaxDigitsOfMaxDigitsOfMaxDigitsOfMaxDigits\
    \ = arr.take(k).map(_.toString.length).filter(_ <= maxDigit).sum\n        val ",
  "        val result = new mutable.ListBuffer[Long]()\n        val arr = arr.toList\n\
    \        val len = arr.length\n        val maxLen = len - k\n        val maxLen2\
    \ = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen\
    \ / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n  \
    \      val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val\
    \ maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11\
    \ = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen\
    \ / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n\
    \        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n    \
    \    val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val\
    \ maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22\
    \ = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen\
    \ / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n\
    \        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n    \
    \    val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val\
    \ maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33\
    \ = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen\
    \ / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n\
    \        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n    \
    \    val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val\
    \ maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44\
    \ = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen4", " \
    \       var sum = 0L\n        var i = 0L\n        var j = 0L\n        for(i <-\
    \ 0 until k){\n            sum += arr(i)\n        }\n        for(j <- 0 until\
    \ k){\n            sum += arr(j)\n        }\n        return sum", "        val\
    \ arr = arr.toList\n        val len = arr.size\n        val maxLen = len - k\n\
    \        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val\
    \ maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6\
    \ = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen\
    \ / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n\
    \        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n    \
    \    val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val\
    \ maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17\
    \ = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen\
    \ / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n\
    \        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n    \
    \    val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val\
    \ maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28\
    \ = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen\
    \ / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n\
    \        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n    \
    \    val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val\
    \ maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39\
    \ = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen\
    \ / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n\
    \        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n    \
    \    val maxLen46 = maxLen / 46\n        val maxLen47 = max", "        var sum\
    \ = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n\
    \            i += 1\n        }\n        val maxLength = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLength2 = arr.take(k).map(_.toString).map(_.length).filter(_ >\
    \ 1).max\n        val maxLength3 = arr.take(k).map(_.toString).map(_.length).filter(_\
    \ > 2).max\n        val maxLength4 = arr.take(k).map(_.toString).map(_.length).filter(_\
    \ > 3).max\n        val maxLength5 = arr.take(k).map(_.toString).map(_.length).filter(_\
    \ > 4).max\n        val maxLength6 = arr.take(k).map(_.toString).map(_.length).filter(_\
    \ > 5).max\n        val maxLength7 = arr.take(k).map(_.toString).map(_.length).filter(_\
    \ > 6).max\n        val maxLength8 = arr.take(k).map(_.toString).map(_.length).filter(_\
    \ > 7).max\n        val maxLength9 = arr.take(k).map(_.toString).map(_.length).filter(_\
    \ > 8).max\n        val maxLength10 = arr.take(k).map(_.toString).map(_.length).filter(_\
    \ > 9).max\n        val maxLength11 = arr.take(k).map(_.toString).map(_.length).filter(_\
    \ > 10).max\n        val maxLength12 = arr.take(k).map(_.toString).map(_.length).filter(_\
    \ > 11).max\n        val maxLength13 = arr.take(k).map(_.toString).map(_.length).filter(_\
    \ > 12).max\n        val maxLength14 = arr.take(k).map(_.toString).map(_.length).filter(_\
    \ > 13).max\n        val maxLength15 = arr.take(k).map(_.toString).map(_.length).filter(_\
    \ > 14).max\n        val maxLength16 = arr.take(k).map(_.toString).map(_.length).filter(_\
    \ > 15).max\n        val maxLength17 = arr.take(k).map(_.toString).map(_.length).filter(_\
    \ > 16).max\n        val maxLength18 = arr.take(k).map(_.toString).map(_.length).filter(_\
    \ > 17).max\n        val maxLength19 = arr.take(k).map(_.toString).map(_.length).filter(_\
    \ > 18).max\n        val maxLength20 = arr.take(k).map(_.toString).map(_.length).filter(_\
    \ > 19).max\n        val maxLength21 = arr.take(k).", "        val arr = arr.toList\n\
    \        val len = arr.length\n        val maxSum = arr.take(k).sum\n        val\
    \ maxSum2 = arr.take(k).sum\n        val maxSum3 = arr.take(k).sum\n        val\
    \ maxSum4 = arr.take(k).sum\n        val maxSum5 = arr.take(k).sum\n        val\
    \ maxSum6 = arr.take(k).sum\n        val maxSum7 = arr.take(k).sum\n        val\
    \ maxSum8 = arr.take(k).sum\n        val maxSum9 = arr.take(k).sum\n        val\
    \ maxSum10 = arr.take(k).sum\n        val maxSum11 = arr.take(k).sum\n       \
    \ val maxSum12 = arr.take(k).sum\n        val maxSum13 = arr.take(k).sum\n   \
    \     val maxSum14 = arr.take(k).sum\n        val maxSum15 = arr.take(k).sum\n\
    \        val maxSum16 = arr.take(k).sum\n        val maxSum17 = arr.take(k).sum\n\
    \        val maxSum18 = arr.take(k).sum\n        val maxSum19 = arr.take(k).sum\n\
    \        val maxSum20 = arr.take(k).sum\n        val maxSum21 = arr.take(k).sum\n\
    \        val maxSum22 = arr.take(k).sum\n        val maxSum23 = arr.take(k).sum\n\
    \        val maxSum24 = arr.take(k).sum\n        val maxSum25 = arr.take(k).sum\n\
    \        val maxSum26 = arr.take(k).sum\n        val maxSum27 = arr.take(k).sum\n\
    \        val maxSum28 = arr.take(k).sum\n        val maxSum29 = arr.take(k).sum\n\
    \        val maxSum30 = arr.take(k).sum\n        val maxSum31 = arr.take(k).sum\n\
    \        val maxSum32 = arr.take(k).sum\n        val maxSum33 = arr.take(k).sum\n\
    \        val maxSum34 = arr.take(k).sum\n        val maxSum35 = arr.take(k).sum\n\
    \        val maxSum36 = arr.take(k).sum\n        val maxSum37 = arr.take(k).sum\n\
    \        val maxSum38 = arr.take(k).sum\n        val maxSum39 = arr.take(k).sum\n\
    \        val maxSum40 = arr.take(k).sum\n        val maxSum41 = arr.take(k).sum\n\
    \        val maxSum42 = arr.take(k).sum\n        val maxSum43 = arr.", "     \
    \   val result = mutable.ListBuffer.empty[Long]\n        val len = arr.size\n\
    \        val maxLen = arr.take(k).size\n        val maxLen2 = maxLen / 2\n   \
    \     val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val\
    \ maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7\
    \ = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen\
    \ / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n\
    \        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n    \
    \    val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val\
    \ maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18\
    \ = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen\
    \ / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n\
    \        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n    \
    \    val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val\
    \ maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29\
    \ = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen\
    \ / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n\
    \        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n    \
    \    val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val\
    \ maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40\
    \ = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen\
    \ / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n\
    \        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46", "  \
    \      val arr = arr.toList\n        val len = arr.size\n        val result =\
    \ new mutable.ListBuffer[Long]()\n        val max = (arr.head / 10) * 10\n   \
    \     val min = (arr.last / 10) * 10\n        val max2 = max / 2\n        val\
    \ min2 = min / 2\n        val max3 = max / 3\n        val min3 = min / 3\n   \
    \     val max4 = max / 4\n        val min4 = min / 4\n        val max5 = max /\
    \ 5\n        val min5 = min / 5\n        val max6 = max / 6\n        val min6\
    \ = min / 6\n        val max7 = max / 7\n        val min7 = min / 7\n        val\
    \ max8 = max / 8\n        val min8 = min / 8\n        val max9 = max / 9\n   \
    \     val min9 = min / 9\n        val max10 = max / 10\n        val min10 = min\
    \ / 10\n        val max11 = max / 11\n        val min11 = min / 11\n        val\
    \ max12 = max / 12\n        val min12 = min / 12\n        val max13 = max / 13\n\
    \        val min13 = min / 13\n        val max14 = max / 14\n        val min14\
    \ = min / 14\n        val max15 = max / 15\n        val min15 = min / 15\n   \
    \     val max16 = max / 16\n        val min16 = min / 16\n        val max17 =\
    \ max / 17\n        val min17 = min / 17\n        val max18 = max / 18\n     \
    \   val min18 = min / 18\n        val max19 = max / 19\n        val min19 = min\
    \ / 19\n        val max20 = max / 20\n        val min20 = min / 20\n        val\
    \ max21 = max / 21\n        val min21 = min / 21\n        val max22 = max / 22\n\
    \        val min22 = min / 22\n        val max23 = max / 23\n        val min23\
    \ = min / 23\n        val max24 = max / 24\n        val min24 = min / 24\n   \
    \     val max25 = max / 25\n        val min25 = min / 25\n        val max26 =\
    \ max / 26\n        val min26 = min / 26\n        val max27 = max / 27\n     \
    \   val min27 = min / 27\n        val max28 = max / 28\n        val min28 = min\
    \ / 28\n", "        val arr = arr.toList\n        val len = arr.size\n       \
    \ val max = (len / 2).toInt\n        val sum = 0\n        for(i <- 0 until max){\n\
    \            sum += arr(i)\n        }\n        for(i <- 0 until k){\n        \
    \    sum += arr(i)\n        }\n        sum", "        var sum = 0L\n        var\
    \ i = 0\n        while (i < k) {\n            sum += arr(i)\n            i +=\
    \ 1\n        }\n        sum -= arr(0)\n        sum -= arr(k-1)\n        sum -=\
    \ arr(k+1)\n        sum -= arr(k)\n        sum -= arr(k+1)\n        sum -= arr(k-1)\n\
    \        sum -= arr(k-1)\n        sum -= arr(k+1)\n        sum -= arr(k+1)\n \
    \       sum -= arr(k-1)\n        sum -= arr(k+1)\n        sum -= arr(k+1)\n  \
    \      sum -= arr(k-1)\n        sum -= arr(k+1)\n        sum -= arr(k+1)\n   \
    \     sum -= arr(k-1)\n        sum -= arr(k+1)\n        sum -= arr(k+1)\n    \
    \    sum -= arr(k-1)\n        sum -= arr(k+1)\n        sum -= arr(k+1)\n     \
    \   sum -= arr(k-1)\n        sum -= arr(k+1)\n        sum -= arr(k+1)\n      \
    \  sum -= arr(k-1)\n        sum -= arr(k+1)\n        sum -= arr(k+1)\n       \
    \ sum -= arr(k-1)\n        sum -= arr(k+1)\n        sum -= arr(k+1)\n        sum\
    \ -= arr(k-1)\n        sum -= arr(k+1)\n        sum -= arr(k+1)\n        sum -=\
    \ arr(k-1)\n        sum -= arr(k+1)\n        sum -= arr(k+1)\n        sum -= arr(k-1)\n\
    \        sum -= arr(k+1)\n        sum -= arr(k+1)\n        sum -= arr(k-1)\n \
    \       sum -= arr(k+1)\n        sum -= arr(k+1)\n        sum -= arr(k-1)\n  \
    \      sum -= arr(k+1)\n        sum -= arr(k+1)\n        sum -= arr(k-1)\n   \
    \     sum -= arr(k+1)\n        sum -= arr(k+1)\n        sum -= arr(k-1)\n    \
    \    sum -= arr(k+1)\n        sum -= arr(k+1)\n        sum -= arr(k-1)\n     \
    \   sum -= arr(k+1)\n        sum -= arr(k+1)\n        sum -= arr(k-1)\n      \
    \  sum -= arr(k+1)\n        sum -= arr(k+1)\n        sum -= arr(k-1)\n       \
    \ sum -= arr(k+1)\n        sum -= arr(k+1)\n        sum -= arr(k-1)\n        sum\
    \ -= arr(k+1)\n        sum -= arr(k+1)\n        sum -= arr(k-1)\n        sum -=\
    \ arr(k+1)\n        sum -= arr(k+1)\n        sum -= arr(k-1)\n        sum -= arr(k+1)\n\
    \        sum -= arr(k+1)\n        sum -= arr(k-1)\n", "        val result = new\
    \ mutable.ListBuffer[Long]()\n        val arr = arr.toList\n        val len =\
    \ arr.length\n        val max = (len / 2).toInt\n        val max2 = max / 2\n\
    \        val max3 = max / 3\n        val max4 = max / 4\n        val max5 = max\
    \ / 5\n        val max6 = max / 6\n        val max7 = max / 7\n        val max8\
    \ = max / 8\n        val max9 = max / 9\n        val max10 = max / 10\n      \
    \  val max11 = max / 11\n        val max12 = max / 12\n        val max13 = max\
    \ / 13\n        val max14 = max / 14\n        val max15 = max / 15\n        val\
    \ max16 = max / 16\n        val max17 = max / 17\n        val max18 = max / 18\n\
    \        val max19 = max / 19\n        val max20 = max / 20\n        val max21\
    \ = max / 21\n        val max22 = max / 22\n        val max23 = max / 23\n   \
    \     val max24 = max / 24\n        val max25 = max / 25\n        val max26 =\
    \ max / 26\n        val max27 = max / 27\n        val max28 = max / 28\n     \
    \   val max29 = max / 29\n        val max30 = max / 30\n        val max31 = max\
    \ / 31\n        val max32 = max / 32\n        val max33 = max / 33\n        val\
    \ max34 = max / 34\n        val max35 = max / 35\n        val max36 = max / 36\n\
    \        val max37 = max / 37\n        val max38 = max / 38\n        val max39\
    \ = max / 39\n        val max40 = max / 40\n        val max41 = max / 41\n   \
    \     val max42 = max / 42\n        val max43 = max / 43\n        val max44 =\
    \ max / 44\n        val max45 = max / 45\n        val max46 = max / 46\n     \
    \   val max47 = max / 47\n        val max48 = max / 48\n        val max49 = max\
    \ / 49\n        val max50 = max / 50\n        val max51 = max / 51\n        val\
    \ max52 = max / 52\n        val max53 = max / 53\n        val max54 = max / 54\n\
    \        val max55 = max / 55\n        ", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while (i < k) {\n          \
    \  sum += arr(i)\n            i += 1\n        }\n        while (i < arr.length)\
    \ {\n            sum += arr(i)\n            i += 1\n        }\n        result\
    \ += sum\n        return result.toList.sum", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val arr = arr.toList\n        val len = arr.size\n        val maxElements\
    \ = len / 2\n        val maxElementsIndex = maxElements\n        val maxElementsValue\
    \ = arr(maxElementsIndex)\n        val minElements = len - maxElementsIndex\n\
    \        val minElementsIndex = minElements\n        val minElementsValue = arr(minElementsIndex)\n\
    \        val maxElementsSum = maxElementsValue + minElementsValue\n        val\
    \ minElementsSum = maxElementsValue - minElementsValue\n        val maxElementsSumIndex\
    \ = maxElementsIndex\n        val minElementsSumIndex = minElementsIndex\n   \
    \     val maxElementsSumValue = arr(maxElementsSumIndex)\n        val minElementsSumValue\
    \ = arr(minElementsSumIndex)\n        val maxElementsSumSum = maxElementsSumValue\
    \ + minElementsSumValue\n        val minElementsSumSum = maxElementsSumValue -\
    \ minElementsSumValue\n        val maxElementsSumSumIndex = maxElementsSumIndex\n\
    \        val minElementsSumSumIndex = minElementsSumIndex\n        val maxElementsSumSumValue\
    \ = arr(maxElementsSumSumIndex)\n        val minElementsSumSumValue = arr(minElementsSumSumIndex)\n\
    \        val maxElementsSumSumSum = maxElementsSumSumValue + minElementsSumSumValue\n\
    \        val minElementsSumSumSum = maxElementsSumSumValue - minElementsSumSumValue\n\
    \        val maxElementsSumSumSumIndex = maxElementsSumSumIndex\n        val minElementsSumSumSumIndex\
    \ = minElementsSumSumIndex\n        val maxElementsSumSumSumValue = arr(maxElementsSumSumSumIndex)\n\
    \        val minElementsSumSumSumValue = arr(minElementsSumSumSumIndex)\n    \
    \    val maxElementsSumSumSumSum = maxElementsSumSumSumValue + minElementsSumSumSumValue\n\
    \        val minElementsSumSumSumSum = maxElementsSumSumSumValue - minElementsSumSumSumValue\n\
    \        val maxElementsSumSumSumSumIndex = maxElementsSumSumSumIndex\n      \
    \  val minElementsSumSumSumSumIndex = minElementsSumSumSumIndex\n        val maxElementsSumSumSumSumValue\
    \ = arr(maxElementsSumSumSumSumIndex)\n        val minElementsSumSumSumSum", " \
    \       val result = new mutable.ListBuffer[Long]()\n        val maxLength = arr.take(k).map(_.toString.length).max\n\
    \        arr.take(k).foreach(x => {\n            val str = x.toString.substring(0,maxLength)\n\
    \            val sum = str.foldLeft(0)((sum,c) => sum + c.toLong)\n          \
    \  result.add(sum)\n        })\n        result.sum", "        val result = new\
    \ mutable.ListBuffer[Long]()\n        val arr = arr.toList\n        val len =\
    \ arr.length\n        val maxLen = len - k\n        val maxLen2 = maxLen / 2\n\
    \        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val\
    \ maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7\
    \ = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen\
    \ / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n\
    \        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n    \
    \    val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val\
    \ maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18\
    \ = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen\
    \ / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n\
    \        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n    \
    \    val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val\
    \ maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29\
    \ = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen\
    \ / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n\
    \        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n    \
    \    val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val\
    \ maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40\
    \ = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen\
    \ / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n\
    \        val maxLen45 = maxLen / 45\n        val maxLen4", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        val arr = arr.toList\n        val\
    \ len = arr.length\n        val maxLen = len - k\n        val maxLen2 = maxLen\
    \ / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n  \
    \      val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val\
    \ maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9\
    \ = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen\
    \ / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n\
    \        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n    \
    \    val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val\
    \ maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20\
    \ = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen\
    \ / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n\
    \        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n    \
    \    val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val\
    \ maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31\
    \ = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen\
    \ / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n\
    \        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n    \
    \    val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val\
    \ maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42\
    \ = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen\
    \ / 44\n        val maxLen45 = maxLen / 45\n        val maxLen4", "        val\
    \ sum = 0L\n        val arr = arr.toList\n        val len = arr.length\n     \
    \   val maxLen = len - k\n        val maxLenIndex = maxLen - 1\n        val maxLenValue\
    \ = arr(maxLenIndex)\n        val maxLenValueIndex = maxLenValue - 1\n       \
    \ val maxLenValueValue = arr(maxLenValueIndex)\n        val maxLenValueValueIndex\
    \ = maxLenValueValue - 1\n        val maxLenValueValueValue = arr(maxLenValueValueIndex)\n\
    \        val maxLenValueValueValueIndex = maxLenValueValueValue - 1\n        val\
    \ maxLenValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueValueIndex\
    \ = maxLenValueValueValueValue - 1\n        val maxLenValueValueValueValueValue\
    \ = arr(maxLenValueValueValueValueIndex)\n        val maxLenValueValueValueValueIndex\
    \ = maxLenValueValueValueValue - 1\n        val maxLenValueValueValueValueValue\
    \ = arr(maxLenValueValueValueValueIndex)\n        val maxLenValueValueValueValueIndex\
    \ = maxLenValueValueValueValue - 1\n        val maxLenValueValueValueValueValue\
    \ = arr(maxLenValueValueValueValueIndex)\n        val maxLenValueValueValueValueIndex\
    \ = maxLenValueValueValueValue - 1\n        val maxLenValueValueValueValueValue\
    \ = arr(maxLenValueValueValueValueIndex)\n        val maxLenValueValueValueValueIndex\
    \ = maxLenValueValueValueValue - 1\n        val maxLenValueValueValueValueValue\
    \ = arr(maxLenValueValueValueValueIndex)\n        val maxLenValueValueValueValueIndex\
    \ = maxLenValueValueValueValue - 1\n        val maxLenValueValueValueValueValue\
    \ = arr(maxLenValueValueValueValueIndex)\n        val maxLenValueValueValueValueIndex\
    \ = maxLenValueValueValueValue - 1\n        val maxLenValueValueValueValueValue\
    \ = arr(maxLenValueValueValueValueIndex)\n        val maxLenValueValueValueValueIndex\
    \ = maxLenValueValueValueValue - 1\n        val maxLenValueValueValueValueValue\
    \ = arr(maxLenValueValueValueValueIndex)\n        val maxLenValueValueValueValueIndex\
    \ = maxLenValueValueValueValue - 1\n        val maxLenValueValueValueValueValue\
    \ = arr(maxLenValueValueValueValueIndex)\n        val maxLenValueValueValueValueIndex\
    \ = maxLenValueValueValueValue - 1\n        val maxLenValueValueValueValueValue\
    \ = arr(maxLenValueValueValueValueIndex)\n        val maxLenValueValueValueValueIndex\
    \ = maxLenValueValueValueValue - 1\n        val maxLen", "        val arr = arr.toList\n\
    \        val len = arr.length\n        val maxLen = len - k\n        val maxLen2\
    \ = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen\
    \ / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n  \
    \      val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val\
    \ maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11\
    \ = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen\
    \ / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n\
    \        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n    \
    \    val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val\
    \ maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22\
    \ = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen\
    \ / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n\
    \        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n    \
    \    val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val\
    \ maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33\
    \ = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen\
    \ / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n\
    \        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n    \
    \    val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val\
    \ maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44\
    \ = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen\
    \ / 46\n        val maxLen47 = max", "        val arr = arr.toList\n        val\
    \ len = arr.size\n        val maxLen = arr.take(k).map(_.toString.length).max\n\
    \        val maxLen2 = arr.take(k).map(_.toString.length).filter(_ > 1).max\n\
    \        val maxLen3 = arr.take(k).map(_.toString.length).filter(_ > 2).max\n\
    \        val maxLen4 = arr.take(k).map(_.toString.length).filter(_ > 3).max\n\
    \        val maxLen5 = arr.take(k).map(_.toString.length).filter(_ > 4).max\n\
    \        val maxLen6 = arr.take(k).map(_.toString.length).filter(_ > 5).max\n\
    \        val maxLen7 = arr.take(k).map(_.toString.length).filter(_ > 6).max\n\
    \        val maxLen8 = arr.take(k).map(_.toString.length).filter(_ > 7).max\n\
    \        val maxLen9 = arr.take(k).map(_.toString.length).filter(_ > 8).max\n\
    \        val maxLen10 = arr.take(k).map(_.toString.length).filter(_ > 9).max\n\
    \        val maxLen11 = arr.take(k).map(_.toString.length).filter(_ > 10).max\n\
    \        val maxLen12 = arr.take(k).map(_.toString.length).filter(_ > 11).max\n\
    \        val maxLen13 = arr.take(k).map(_.toString.length).filter(_ > 12).max\n\
    \        val maxLen14 = arr.take(k).map(_.toString.length).filter(_ > 13).max\n\
    \        val maxLen15 = arr.take(k).map(_.toString.length).filter(_ > 14).max\n\
    \        val maxLen16 = arr.take(k).map(_.toString.length).filter(_ > 15).max\n\
    \        val maxLen17 = arr.take(k).map(_.toString.length).filter(_ > 16).max\n\
    \        val maxLen18 = arr.take(k).map(_.toString.length).filter(_ > 17).max\n\
    \        val maxLen19 = arr.take(k).map(_.toString.length).filter(_ > 18).max\n\
    \        val maxLen20 = arr.take(k).map(_.toString.length).filter(_ > 19).max\n\
    \        val maxLen21 = arr.take(k).map(_.toString.length).filter(_ > 20).max\n\
    \        val maxLen22 = arr.take(k).map(_.toString.length).filter(_ > 21).max\n\
    \        val maxLen23 = arr.take(k).map(_.to", "        var sum = 0L\n       \
    \ var max = 0L\n        var i = 0L\n        while(i < k) {\n            sum +=\
    \ arr(i)\n            i += 1\n        }\n        while(i < arr.length) {\n   \
    \         sum += arr(i)\n            i += 1\n        }\n        while(i < arr.length)\
    \ {\n            sum += arr(i)\n            i += 1\n        }\n        return\
    \ sum", "        var sum = 0L\n        var i = 0\n        while (i < k) {\n  \
    \          sum += arr(i)\n            i += 1\n        }\n        val maxDigits\
    \ = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength = (arr.take(k).map(_.toString).map(_.length).max).toInt\n\
    \        val maxDigit = math.pow(10, maxLength)\n        val maxDigits = math.pow(10,\
    \ maxLength).toInt\n        val maxDigit = math.pow(10, maxLength).toInt\n   \
    \     val maxDigits = math.pow(10, maxLength).toInt\n        val maxDigit = math.pow(10,\
    \ maxLength).toInt\n        val maxDigits = math.pow(10, maxLength).toInt\n  \
    \      val maxDigit = math.pow(10, maxLength).toInt\n        val maxDigits = math.pow(10,\
    \ maxLength).toInt\n        val maxDigit = math.pow(10, maxLength).toInt\n   \
    \     val maxDigits = math.pow(10, maxLength).toInt\n        val maxDigit = math.pow(10,\
    \ maxLength).toInt\n        val maxDigits = math.pow(10, maxLength).toInt\n  \
    \      val maxDigit = math.pow(10, maxLength).toInt\n        val maxDigits = math.pow(10,\
    \ maxLength).toInt\n        val maxDigit = math.pow(10, maxLength).toInt\n   \
    \     val maxDigits = math.pow(10, maxLength).toInt\n        val maxDigit = math.pow(10,\
    \ maxLength).toInt\n        val maxDigits = math.pow(10, maxLength).toInt\n  \
    \      val maxDigit = math.pow(10, maxLength).toInt\n        val maxDigits = math.pow(10,\
    \ maxLength).toInt\n        val maxDigit = math.pow(10, maxLength).toInt\n   \
    \     val maxDigits = math.pow(10, maxLength).toInt\n        val maxDigit = math.pow(10,\
    \ maxLength).toInt\n        val maxDigits = math.pow(10, maxLength).toInt\n  \
    \      val maxDigit = math.pow(10, maxLength).toInt\n        val maxDigits = math.pow(10,\
    \ maxLength).toInt\n        val maxDigit = math.pow(10, maxLength).toInt\n   \
    \     val maxDigits = math.pow(10, maxLength).toInt\n        val maxDigit = math.pow(10,\
    \ maxLength).toInt\n        val maxDigits = math.pow(10, maxLength).toInt\n  \
    \      val maxDigit = math.pow(10, maxLength).toInt\n        val maxDigits = math.pow(10,\
    \ maxLength).toInt\n        val maxDigit = math.pow(10, maxLength).toInt\n   \
    \     val maxDigits = math.pow(10, maxLength).toInt\n        val maxDigit = math.pow(10, ",
  "        val result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n\
    \        val maxLen = arr.take(k).length\n        for(i <- 0 until len) {\n  \
    \          val curr = arr(i)\n            val next = (i + 1) % len\n         \
    \   val nextNum = arr(next)\n            val nextLen = next.length\n         \
    \   val maxNum = arr.take(nextLen - 1).last\n            val maxLen = arr.take(nextLen\
    \ - 1).length\n            val maxNumLen = maxNum.length\n            val maxNumDigit\
    \ = maxNum.asDigit\n            val maxLenDigit = maxLen.asDigit\n           \
    \ val curDigit = curr.asDigit\n            val nextDigit = nextNum.asDigit\n \
    \           val nextLenDigit = nextLen.asDigit\n            val maxNumDigit =\
    \ maxNum.asDigit\n            val maxLenDigit = maxLen.asDigit\n            val\
    \ curDigit = curr.asDigit\n            val nextDigit = nextNum.asDigit\n     \
    \       val nextLenDigit = nextLen.asDigit\n            val maxNumDigit = maxNum.asDigit\n\
    \            val maxLenDigit = maxLen.asDigit\n            val curDigit = curr.asDigit\n\
    \            val nextDigit = nextNum.asDigit\n            val nextLenDigit = nextLen.asDigit\n\
    \            val maxNumDigit = maxNum.asDigit\n            val maxLenDigit = maxLen.asDigit\n\
    \            val curDigit = curr.asDigit\n            val nextDigit = nextNum.asDigit\n\
    \            val nextLenDigit = nextLen.asDigit\n            val maxNumDigit =\
    \ maxNum.asDigit\n            val maxLenDigit = maxLen.asDigit\n            val\
    \ curDigit = curr.asDigit\n            val nextDigit = nextNum.asDigit\n     \
    \       val nextLenDigit = nextLen.asDigit\n            val maxNumDigit = maxNum.asDigit\n\
    \            val maxLenDigit = maxLen.asDigit\n            val curDigit = curr.asDigit\n\
    \            val nextDigit = nextNum.asDigit\n            val nextLenDigit = nextLen.asDigit\n\
    \            val maxNumDigit = maxNum.asDigit\n            val maxLenDigit = maxLen.asDigit\n\
    \            val curDigit = curr.asDigit\n            val nextDigit = nextNum.asDigit\n\
    \            val nextLenDigit = nextLen.asDigit\n            val max", "     \
    \   var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum\
    \ += arr(i)\n            i += 1\n        }\n        val maxLength = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLengthString = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLengthString2 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLengthString3 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLengthString4 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLengthString5 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLengthString6 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLengthString7 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLengthString8 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLengthString9 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLengthString10 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLengthString11 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLengthString12 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLengthString13 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLengthString14 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLengthString15 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLengthString16 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLengthString17 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLengthString18 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLengthString19 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLengthString20 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLengthString21 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLengthString22 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLengthString23 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        ", "        val result = new mutable.HashMap[Long, Long]()\n        for\
    \ (i <- 0 until arr.size) {\n            val value = arr(i)\n            if (result.contains(value))\
    \ {\n                val oldValue = result.get(value)\n                result.put(value,\
    \ oldValue + value)\n            } else {\n                result.put(value, value)\n\
    \            }\n        }\n        val maxValue = result.values.max\n        val\
    \ maxKey = result.keys.max\n        val maxValueSum = result.values.sum\n    \
    \    val maxKeySum = result.keys.sum\n        val maxValueSum2 = maxValueSum *\
    \ maxValue\n        val maxKeySum2 = maxKeySum * maxKey\n        val maxValueSum3\
    \ = maxValueSum2 * maxValue\n        val maxKeySum3 = maxKeySum2 * maxKey\n  \
    \      val maxValueSum4 = maxValueSum3 * maxValue\n        val maxKeySum4 = maxKeySum3\
    \ * maxKey\n        val maxValueSum5 = maxValueSum4 * maxValue\n        val maxKeySum5\
    \ = maxKeySum4 * maxKey\n        val maxValueSum6 = maxValueSum5 * maxValue\n\
    \        val maxKeySum6 = maxKeySum5 * maxKey\n        val maxValueSum7 = maxValueSum6\
    \ * maxValue\n        val maxKeySum7 = maxKeySum6 * maxKey\n        val maxValueSum8\
    \ = maxValueSum7 * maxValue\n        val maxKeySum8 = maxKeySum7 * maxKey\n  \
    \      val maxValueSum9 = maxValueSum8 * maxValue\n        val maxKeySum9 = maxKeySum8\
    \ * maxKey\n        val maxValueSum10 = maxValueSum9 * maxValue\n        val maxKeySum10\
    \ = maxKeySum9 * maxKey\n        val maxValueSum11 = maxValueSum10 * maxValue\n\
    \        val maxKeySum11 = maxKeySum10 * maxKey\n        val maxValueSum12 = maxValueSum11\
    \ * maxValue\n        val maxKeySum12 = maxKeySum11 * maxKey\n        val maxValueSum13\
    \ = maxValueSum12 * maxValue\n        val maxKeySum13 = maxKeySum12 * maxKey\n\
    \        val maxValueSum14 = maxValueSum13 * maxValue\n        val maxKeySum14\
    \ = maxKeySum13 * maxKey\n        val maxValueSum15 = maxValueSum14 * maxValue\n\
    \        val maxKeySum15 = maxKeySum14 * maxKey\n        val maxValueSum16 = maxValueSum15\
    \ * maxValue\n        val maxKeySum16 = maxKeySum15 * maxKey", "        val result\
    \ = new mutable.HashMap[Long, Long]()\n        val maxLength = arr.take(k).map(_.toString).map(_.length).max\n\
    \        arr.take(k).foreach(x => {\n            val length = x.toString().length\n\
    \            val key = x.toString().substring(0, length)\n            val value\
    \ = x.toString().substring(length)\n            val sum = result.getOrElse(key,\
    \ 0L) + value.toLong\n            result.put(key, sum)\n        })\n        val\
    \ sum = result.values.sum\n        sum", "        val arr = arr.toList\n     \
    \   val len = arr.length\n        val maxLen = len - k\n        val maxLen2 =\
    \ maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen /\
    \ 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n    \
    \    val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9\
    \ = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen\
    \ / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n\
    \        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n    \
    \    val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val\
    \ maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20\
    \ = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen\
    \ / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n\
    \        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n    \
    \    val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val\
    \ maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31\
    \ = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen\
    \ / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n\
    \        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n    \
    \    val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val\
    \ maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42\
    \ = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen\
    \ / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n\
    \        val maxLen47 = max", "        var sum = 0L\n        var index = 0\n \
    \       while (index < k) {\n            sum += arr(index)\n            index\
    \ += 1\n        }\n        return sum", "        val result = new mutable.HashMap[Long,\
    \ Long]()\n        for(i <- 0 until k) {\n            val key = arr(i)\n     \
    \       val value = result.getOrElse(key, 0L)\n            result += key -> value\
    \ + 1\n        }\n        val maxValue = result.maxBy(_._2)._2\n        val maxKey\
    \ = result.maxBy(_._1)._1\n        val maxValue = maxValue + 1\n        result(maxKey)\
    \ + maxValue", "        val arr = arr.toList\n        val result = mutable.ListBuffer.empty[Long]\n\
    \        var sum = 0L\n        var index = 0\n        while (index < arr.length)\
    \ {\n            val element = arr(index)\n            if (element < 10) {\n \
    \               sum += element\n                index += 1\n            } else\
    \ {\n                val digit = element % 10\n                sum += digit *\
    \ 10\n                index += 1\n            }\n            if (index >= k) {\n\
    \                result += sum\n                sum = 0\n                index\
    \ = 0\n            }\n        }\n        if (index >= k) {\n            result\
    \ += sum\n        }\n        result.toList.sum", "        val result = mutable.ArrayBuffer.empty[Long]\n\
    \        val arr = arr.toList\n        val len = arr.length\n        val maxLength\
    \ = len - k\n        val maxLength2 = maxLength * maxLength\n        val maxLength3\
    \ = maxLength2 * maxLength\n        val maxLength4 = maxLength3 * maxLength\n\
    \        val maxLength5 = maxLength4 * maxLength\n        val maxLength6 = maxLength5\
    \ * maxLength\n        val maxLength7 = maxLength6 * maxLength\n        val maxLength8\
    \ = maxLength7 * maxLength\n        val maxLength9 = maxLength8 * maxLength\n\
    \        val maxLength10 = maxLength9 * maxLength\n        val maxLength11 = maxLength10\
    \ * maxLength\n        val maxLength12 = maxLength11 * maxLength\n        val\
    \ maxLength13 = maxLength12 * maxLength\n        val maxLength14 = maxLength13\
    \ * maxLength\n        val maxLength15 = maxLength14 * maxLength\n        val\
    \ maxLength16 = maxLength15 * maxLength\n        val maxLength17 = maxLength16\
    \ * maxLength\n        val maxLength18 = maxLength17 * maxLength\n        val\
    \ maxLength19 = maxLength18 * maxLength\n        val maxLength20 = maxLength19\
    \ * maxLength\n        val maxLength21 = maxLength20 * maxLength\n        val\
    \ maxLength22 = maxLength21 * maxLength\n        val maxLength23 = maxLength22\
    \ * maxLength\n        val maxLength24 = maxLength23 * maxLength\n        val\
    \ maxLength25 = maxLength24 * maxLength\n        val maxLength26 = maxLength25\
    \ * maxLength\n        val maxLength27 = maxLength26 * maxLength\n        val\
    \ maxLength28 = maxLength27 * maxLength\n        val maxLength29 = maxLength28\
    \ * maxLength\n        val maxLength30 = maxLength29 * maxLength\n        val\
    \ maxLength31 = maxLength30 * maxLength\n        val maxLength32 = maxLength31\
    \ * maxLength\n        val maxLength33 = maxLength32 * maxLength\n        val\
    \ maxLength34 = maxLength33 * maxLength\n        val maxLength35 = maxLength34\
    \ * maxLength\n        val maxLength36 = maxLength35 * maxLength\n        val\
    \ maxLength37 = maxLength36 * maxLength\n        val maxLength38 = maxLength37\
    \ * maxLength\n        val maxLength39 = maxLength38 * maxLength\n        val\
    \ maxLength", "        val result = new mutable.ListBuffer[Long]()\n        val\
    \ maxLength = arr.take(k).length\n        arr.take(k).foreach(x => if (x.length\
    \ <= maxLength) result += x)\n        result.sum", "        val result = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 0 until k){\n            val maxIndex = arr.indexWhere(x =>\
    \ x >= i)\n            val maxValue = arr(maxIndex)\n            val maxIndex2\
    \ = arr.indexWhere(x => x >= i)\n            val maxValue2 = arr(maxIndex2)\n\
    \            val maxValue3 = arr(maxIndex2)\n            val maxValue4 = arr(maxIndex2)\n\
    \            val maxValue5 = arr(maxIndex2)\n            val maxValue6 = arr(maxIndex2)\n\
    \            val maxValue7 = arr(maxIndex2)\n            val maxValue8 = arr(maxIndex2)\n\
    \            val maxValue9 = arr(maxIndex2)\n            val maxValue10 = arr(maxIndex2)\n\
    \            val maxValue11 = arr(maxIndex2)\n            val maxValue12 = arr(maxIndex2)\n\
    \            val maxValue13 = arr(maxIndex2)\n            val maxValue14 = arr(maxIndex2)\n\
    \            val maxValue15 = arr(maxIndex2)\n            val maxValue16 = arr(maxIndex2)\n\
    \            val maxValue17 = arr(maxIndex2)\n            val maxValue18 = arr(maxIndex2)\n\
    \            val maxValue19 = arr(maxIndex2)\n            val maxValue20 = arr(maxIndex2)\n\
    \            val maxValue21 = arr(maxIndex2)\n            val maxValue22 = arr(maxIndex2)\n\
    \            val maxValue23 = arr(maxIndex2)\n            val maxValue24 = arr(maxIndex2)\n\
    \            val maxValue25 = arr(maxIndex2)\n            val maxValue26 = arr(maxIndex2)\n\
    \            val maxValue27 = arr(maxIndex2)\n            val maxValue28 = arr(maxIndex2)\n\
    \            val maxValue29 = arr(maxIndex2)\n            val maxValue30 = arr(maxIndex2)\n\
    \            val maxValue31 = arr(maxIndex2)\n            val maxValue32 = arr(maxIndex2)\n\
    \            val maxValue33 = arr(maxIndex2)\n            val maxValue34 = arr(maxIndex2)\n\
    \            val maxValue35 = arr(maxIndex2)\n            val maxValue36 = arr(maxIndex2)\n\
    \            val maxValue37 = arr(maxIndex2)\n            val maxValue38 = arr(maxIndex2)\n\
    \            val maxValue39 = arr(maxIndex2)\n            val maxValue40 = arr(maxIndex",
  "        val arr = arr.toList\n        val len = arr.size\n        val sum = 0L\n\
    \        val maxLen = arr.take(k).size\n        for(i <- 0 until k) {\n      \
    \      val cur = arr(i)\n            val curLen = cur.toString.length\n      \
    \      val curLen2 = curLen + maxLen - curLen\n            val curSum = cur.toString.dropRight(curLen2).sum.toLong\n\
    \            sum += curSum\n        }\n        sum", "        val result = new\
    \ mutable.HashMap[Long, Long]()\n        for (i <- 0 until k) {\n            val\
    \ key = arr(i)\n            val value = result.getOrElse(key, 0)\n           \
    \ result += key -> value + 1\n        }\n        val sum = result.values.sum\n\
    \        val maxValue = result.values.max\n        val maxKey = result.values.toSet.max\n\
    \        val maxValue = result.values.toSet.max\n        val maxKey = result.values.toSet.max\n\
    \        val maxValue = result.values.toSet.max\n        val maxKey = result.values.toSet.max\n\
    \        val maxValue = result.values.toSet.max\n        val maxKey = result.values.toSet.max\n\
    \        val maxValue = result.values.toSet.max\n        val maxKey = result.values.toSet.max\n\
    \        val maxValue = result.values.toSet.max\n        val maxKey = result.values.toSet.max\n\
    \        val maxValue = result.values.toSet.max\n        val maxKey = result.values.toSet.max\n\
    \        val maxValue = result.values.toSet.max\n        val maxKey = result.values.toSet.max\n\
    \        val maxValue = result.values.toSet.max\n        val maxKey = result.values.toSet.max\n\
    \        val maxValue = result.values.toSet.max\n        val maxKey = result.values.toSet.max\n\
    \        val maxValue = result.values.toSet.max\n        val maxKey = result.values.toSet.max\n\
    \        val maxValue = result.values.toSet.max\n        val maxKey = result.values.toSet.max\n\
    \        val maxValue = result.values.toSet.max\n        val maxKey = result.values.toSet.max\n\
    \        val maxValue = result.values.toSet.max\n        val maxKey = result.values.toSet.max\n\
    \        val maxValue = result.values.toSet.max\n        val maxKey = result.values.toSet.max\n\
    \        val maxValue = result.values.toSet.max\n        val maxKey = result.values.toSet.max\n\
    \        val maxValue = result.values.toSet.max\n        val maxKey = result.values.toSet.max\n\
    \        val maxValue = result.values.toSet.max\n        val maxKey = result.values.toSet.max\n\
    \        val maxValue = result.values.toSet.max\n        val maxKey = result.values.toSet.max\n\
    \        val maxValue = result.values.toSet.max\n        val maxKey = result.values.toSet.max\n\
    \        val maxValue = result.values.toSet.max\n        val maxKey = result.values.toSet.max\n\
    \        val maxValue = result.values.toSet.max\n        val maxKey = result.values.toSet.max\n\
    \        val maxValue = result.values.toSet.max\n        val maxKey = result.values.toSet.max\n",
  "        val result = new mutable.ListBuffer[Long]()\n        val maxLength = arr.take(k).map(_.toString).map(_.length).max\n\
    \        arr.take(k).foreach(x => {\n            val str = x.toString\n      \
    \      val length = str.length\n            val digits = str.take(maxLength -\
    \ length)\n            result += digits\n        })\n        result.sum", "  \
    \      val arr = arr.toList\n        val len = arr.size\n        val sum = 0L\n\
    \        val twoDigits = arr.take(k).map(_.toString.toInt).filter(_ > 0).map(_\
    \ % 10).sum\n        for(i <- 0 until k) {\n            sum += arr(i).toString.toInt\
    \ * Math.pow(10, len - 1 - i)\n        }\n        sum + twoDigits", "        val\
    \ sum = 0L\n        val arr = arr.toList\n        val len = arr.length\n     \
    \   val maxLen = len - k\n        val maxSum = arr.take(maxLen).sum\n        val\
    \ minSum = arr.drop(maxLen).sum\n        val maxSum2 = arr.take(maxLen).sum\n\
    \        val minSum2 = arr.drop(maxLen).sum\n        val maxSum3 = arr.take(maxLen).sum\n\
    \        val minSum3 = arr.drop(maxLen).sum\n        val maxSum4 = arr.take(maxLen).sum\n\
    \        val minSum4 = arr.drop(maxLen).sum\n        val maxSum5 = arr.take(maxLen).sum\n\
    \        val minSum5 = arr.drop(maxLen).sum\n        val maxSum6 = arr.take(maxLen).sum\n\
    \        val minSum6 = arr.drop(maxLen).sum\n        val maxSum7 = arr.take(maxLen).sum\n\
    \        val minSum7 = arr.drop(maxLen).sum\n        val maxSum8 = arr.take(maxLen).sum\n\
    \        val minSum8 = arr.drop(maxLen).sum\n        val maxSum9 = arr.take(maxLen).sum\n\
    \        val minSum9 = arr.drop(maxLen).sum\n        val maxSum10 = arr.take(maxLen).sum\n\
    \        val minSum10 = arr.drop(maxLen).sum\n        val maxSum11 = arr.take(maxLen).sum\n\
    \        val minSum11 = arr.drop(maxLen).sum\n        val maxSum12 = arr.take(maxLen).sum\n\
    \        val minSum12 = arr.drop(maxLen).sum\n        val maxSum13 = arr.take(maxLen).sum\n\
    \        val minSum13 = arr.drop(maxLen).sum\n        val maxSum14 = arr.take(maxLen).sum\n\
    \        val minSum14 = arr.drop(maxLen).sum\n        val maxSum15 = arr.take(maxLen).sum\n\
    \        val minSum15 = arr.drop(maxLen).sum\n        val maxSum16 = arr.take(maxLen).sum\n\
    \        val minSum16 = arr.drop(maxLen).sum\n        val maxSum17 = arr.take(maxLen).sum\n\
    \        val minSum17 = arr.drop(maxLen).sum\n        val maxSum18 = arr.take(maxLen).sum\n\
    \        val minSum18 = arr.drop(maxLen).sum\n        val maxSum19", "       \
    \ val result = new mutable.ListBuffer[Long]()\n        val maxLength = arr.take(k).map(_.toString.length).max\n\
    \        arr.take(k).foreach(x => {\n            val str = x.toString.substring(0,maxLength)\n\
    \            val sum = str.foldLeft(0)(_ + _)\n            result += sum\n   \
    \     })\n        result.sum"]
stop_tokens:
- "\n    }\n"
