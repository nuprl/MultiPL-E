name: HumanEval_122_add_elements
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a non-empty array of integers arr and an integer k, return\n    //\
  \ the sum of the elements with at most two digits from the first k elements of arr.\n\
  \    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n    // Output:\
  \ 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    //\
  \ 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
  \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
  \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
  \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
  \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
  \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n \
  \   assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
  \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n  \
  \  assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
completions: ["        val arr = arr.toArray\n        val len = arr.length\n     \
    \   val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n      \
    \  var i = 0\n        while (i < k) {\n            sum += arr(i)\n           \
    \ i += 1\n        }\n        val maxTwoDigit = arr.take(k).max\n        val maxTwoDigitIndex\
    \ = arr.indexOf(maxTwoDigit)\n        val maxTwoDigitIndex2 = maxTwoDigitIndex\
    \ + 1\n        while (i < len) {\n            if (arr(i) > maxTwoDigit) {\n  \
    \              sum += arr(i)\n                i += 1\n            } else if (arr(i)\
    \ == maxTwoDigit) {\n                sum += arr(i)\n                i += 1\n \
    \           } else if (arr(i) < maxTwoDigit) {\n                sum += arr(i)\n\
    \                i += 1\n            } else if (arr(i) == maxTwoDigit) {\n   \
    \             sum += arr(i)\n                i += 1\n            } else if (arr(i)\
    \ > maxTwoDigit) {\n                sum += arr(i)\n                i += 1\n  \
    \          } else if (arr(i) == maxTwoDigit) {\n                sum += arr(i)\n\
    \                i += 1\n            } else if (arr(i) < maxTwoDigit) {\n    \
    \            sum += arr(i)\n                i += 1\n            } else if (arr(i)\
    \ == maxTwoDigit) {\n                sum += arr(i)\n                i += 1\n \
    \           } else if (arr(i) > maxTwoDigit) {\n                sum += arr(i)\n\
    \                i += 1\n            } else if (arr(i) == maxTwoDigit) {\n   \
    \             sum += arr(i)\n                i += 1\n            } else if (arr(i)\
    \ < maxTwoDigit) {\n                sum += arr(i)\n                i += 1\n  \
    \          } else if (arr(i) == maxTwoDigit) {\n                sum += arr(i)\n\
    \                i += 1\n            } else if (arr(i) > maxTwoDigit) {\n    \
    \            sum += arr(i)\n                i += 1\n            } else if (arr(i)\
    \ == maxTwoDigit) {\n                sum += arr(i)\n                i += 1\n \
    \           } else if (arr(i) < maxTwoDigit) {\n                sum += arr(i)\n\
    \                i += 1\n            } else if (arr(i) == maxTwoDigit) {\n   \
    \             sum += arr(i)\n                i += 1\n            } else if (arr(i)\
    \ > maxTwoDigit) {\n                sum += arr(i)\n                i += 1\n  \
    \          } else if (arr(i) == maxTwoDigit) {\n                sum += arr(i)\n\
    \                i += 1\n            } else if (arr(i) < maxTwoDigit) {\n    \
    \            sum += arr(i)\n                i += 1\n            } else if (arr(i)\
    \ == maxTwoDigit) {\n                sum += arr(i)\n                i += 1\n \
    \           } else if (arr(i) > maxTwoDigit) {\n                sum += arr(i)\n\
    \                i += 1\n            } else if (arr(i) == maxTwoDigit) {\n   \
    \             sum += arr(i)\n                i += 1\n            } else if (arr(i)\
    \ < maxTwoDigit) {\n                sum += arr(i)\n                i += 1\n  \
    \          } else if (arr(i) == maxTwoDigit) {\n                sum += arr(i)\n\
    \                i += 1\n            } else if (arr(i) > maxTwoDigit) {\n    \
    \            sum += arr", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val maxLength = arr.take(k).map(_.toString).map(_.length).max\n     \
    \   arr.take(k).foreach(x => {\n            val str = x.toString\n           \
    \ val length = str.length\n            val index = str.indexOf(\"0\")\n      \
    \      if (index != -1) {\n                val digit = str.substring(index + 1,\
    \ length)\n                if (digit.length <= maxLength) {\n                \
    \    result += x\n                }\n            }\n        })\n        result.sum",
  "        val result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n\
    \        val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        ", "        val arr\
    \ = arr.toList\n        val len = arr.length\n        val sum = 0\n        val\
    \ maxSum = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum2 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum3 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum4\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum5 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum6 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum7\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum8 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum9 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum10\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum11 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum12 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum13\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum14 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum15 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum16\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum17 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum18 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum19\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum20 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum21 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum22\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum23 = arr.take(k).foldLeft(0)(_\
    \ + _)\n        val maxSum24 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum25\
    \ = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum26 = ", "        val sum\
    \ = 0L\n        val arr = arr.toList\n        val len = arr.length\n        val\
    \ maxLen = len - k\n        val maxLenList = arr.take(maxLen)\n        val maxLenSum\
    \ = maxLenList.foldLeft(0L)(_ + _)\n        val maxLenSumList = maxLenList.foldLeft(0L)(_\
    \ + _)\n        val maxLenSumList = maxLenList.foldLeft(0L)(_ + _)\n        val\
    \ maxLenSumList = maxLenList.foldLeft(0L)(_ + _)\n        val maxLenSumList =\
    \ maxLenList.foldLeft(0L)(_ + _)\n        val maxLenSumList = maxLenList.foldLeft(0L)(_\
    \ + _)\n        val maxLenSumList = maxLenList.foldLeft(0L)(_ + _)\n        val\
    \ maxLenSumList = maxLenList.foldLeft(0L)(_ + _)\n        val maxLenSumList =\
    \ maxLenList.foldLeft(0L)(_ + _)\n        val maxLenSumList = maxLenList.foldLeft(0L)(_\
    \ + _)\n        val maxLenSumList = maxLenList.foldLeft(0L)(_ + _)\n        val\
    \ maxLenSumList = maxLenList.foldLeft(0L)(_ + _)\n        val maxLenSumList =\
    \ maxLenList.foldLeft(0L)(_ + _)\n        val maxLenSumList = maxLenList.foldLeft(0L)(_\
    \ + _)\n        val maxLenSumList = maxLenList.foldLeft(0L)(_ + _)\n        val\
    \ maxLenSumList = maxLenList.foldLeft(0L)(_ + _)\n        val maxLenSumList =\
    \ maxLenList.foldLeft(0L)(_ + _)\n        val maxLenSumList = maxLenList.foldLeft(0L)(_\
    \ + _)\n        val maxLenSumList = maxLenList.foldLeft(0L)(_ + _)\n        val\
    \ maxLenSumList = maxLenList.foldLeft(0L)(_ + _)\n        val maxLenSumList =\
    \ maxLenList.foldLeft(0L)(_ + _)\n        val maxLenSumList = maxLenList.foldLeft(0L)(_\
    \ + _)\n        val maxLenSumList = maxLenList.foldLe", "        val result =\
    \ new mutable.ListBuffer[Long]()\n        val maxCount = arr.take(k).count(_ <\
    \ 10)\n        val maxCount2 = arr.take(k).count(_ < 100)\n        val maxCount3\
    \ = arr.take(k).count(_ < 1000)\n        val maxCount4 = arr.take(k).count(_ <\
    \ 10000)\n        val maxCount5 = arr.take(k).count(_ < 100000)\n        val maxCount6\
    \ = arr.take(k).count(_ < 1000000)\n        val maxCount7 = arr.take(k).count(_\
    \ < 10000000)\n        val maxCount8 = arr.take(k).count(_ < 100000000)\n    \
    \    val maxCount9 = arr.take(k).count(_ < 1000000000)\n        val maxCount10\
    \ = arr.take(k).count(_ < 10000000000)\n        val maxCount11 = arr.take(k).count(_\
    \ < 100000000000)\n        val maxCount12 = arr.take(k).count(_ < 1000000000000)\n\
    \        val maxCount13 = arr.take(k).count(_ < 1000000000000)\n        val maxCount14\
    \ = arr.take(k).count(_ < 10000000000000)\n        val maxCount15 = arr.take(k).count(_\
    \ < 10000000000000)\n        val maxCount16 = arr.take(k).count(_ < 100000000000000)\n\
    \        val maxCount17 = arr.take(k).count(_ < 100000000000000)\n        val\
    \ maxCount18 = arr.take(k).count(_ < 1000000000000000)\n        val maxCount19\
    \ = arr.take(k).count(_ < 1000000000000000)\n        val maxCount20 = arr.take(k).count(_\
    \ < 10000000000000000)\n        val maxCount21 = arr.take(k).count(_ < 10000000000000000)\n\
    \        val maxCount22 = arr.take(k).count(_ < 100000000000000000)\n        val\
    \ maxCount23 = arr.take(k).count(_ < 100000000000000000)\n        val maxCount24\
    \ = arr.take(k).count(_ < 1000000000000000000)\n        val maxCount25 = arr.take(k).count(_\
    \ < 1000000000000000000)\n        val maxCount26 = arr.take(k).count(_ < 10000000000000000000)\n\
    \        val maxCount27 = arr.take(k).count(_ < 10000000000000000000)\n      \
    \  val maxCount28 = arr.take(k).count(_ < 100000000000000000000)\n        val\
    \ maxCount29 = arr.take(k).count(_ < 100000000000000000000)\n        val maxCount30\
    \ = arr.take(k).count(_ < 1000000000000000000000)\n        val max", "       \
    \ val result = new mutable.ListBuffer[Long]()\n        val arr = arr.toList\n\
    \        val len = arr.size\n        val maxLen = arr.take(k).size\n        val\
    \ maxLen2 = maxLen / 2\n        val maxLen3 = maxLen - maxLen2\n        val maxLen4\
    \ = maxLen - maxLen3\n        val maxLen5 = maxLen - maxLen4\n        val maxLen6\
    \ = maxLen - maxLen5\n        val maxLen7 = maxLen - maxLen6\n        val maxLen8\
    \ = maxLen - maxLen7\n        val maxLen9 = maxLen - maxLen8\n        val maxLen10\
    \ = maxLen - maxLen9\n        val maxLen11 = maxLen - maxLen10\n        val maxLen12\
    \ = maxLen - maxLen11\n        val maxLen13 = maxLen - maxLen12\n        val maxLen14\
    \ = maxLen - maxLen13\n        val maxLen15 = maxLen - maxLen14\n        val maxLen16\
    \ = maxLen - maxLen15\n        val maxLen17 = maxLen - maxLen16\n        val maxLen18\
    \ = maxLen - maxLen17\n        val maxLen19 = maxLen - maxLen18\n        val maxLen20\
    \ = maxLen - maxLen19\n        val maxLen21 = maxLen - maxLen20\n        val maxLen22\
    \ = maxLen - maxLen21\n        val maxLen23 = maxLen - maxLen22\n        val maxLen24\
    \ = maxLen - maxLen23\n        val maxLen25 = maxLen - maxLen24\n        val maxLen26\
    \ = maxLen - maxLen25\n        val maxLen27 = maxLen - maxLen26\n        val maxLen28\
    \ = maxLen - maxLen27\n        val maxLen29 = maxLen - maxLen28\n        val maxLen30\
    \ = maxLen - maxLen29\n        val maxLen31 = maxLen - maxLen30\n        val maxLen32\
    \ = maxLen - maxLen31\n        val maxLen33 = maxLen - maxLen32\n        val maxLen34\
    \ = maxLen - maxLen33\n        val maxLen35 = maxLen - maxLen34\n        val maxLen36\
    \ = maxLen - maxLen35\n        val maxLen37 = maxLen - maxLen36\n        val maxLen38\
    \ = maxLen - maxLen37\n        val maxLen39 = max", "        val arr = arr.toList\n\
    \        val len = arr.length\n        val maxLen = arr.take(k).max\n        val\
    \ maxLen2 = maxLen / 2\n        val sum = 0L\n        for (i <- 0 until k) {\n\
    \            val curr = arr(i)\n            val next = (i + 1) % len\n       \
    \     val next2 = next / 2\n            val next3 = next / 3\n            val\
    \ next4 = next / 4\n            val next5 = next / 5\n            val next6 =\
    \ next / 6\n            val next7 = next / 7\n            val next8 = next / 8\n\
    \            val next9 = next / 9\n            val next10 = next / 10\n      \
    \      val next11 = next / 11\n            val next12 = next / 12\n          \
    \  val next13 = next / 13\n            val next14 = next / 14\n            val\
    \ next15 = next / 15\n            val next16 = next / 16\n            val next17\
    \ = next / 17\n            val next18 = next / 18\n            val next19 = next\
    \ / 19\n            val next20 = next / 20\n            val next21 = next / 21\n\
    \            val next22 = next / 22\n            val next23 = next / 23\n    \
    \        val next24 = next / 24\n            val next25 = next / 25\n        \
    \    val next26 = next / 26\n            val next27 = next / 27\n            val\
    \ next28 = next / 28\n            val next29 = next / 29\n            val next30\
    \ = next / 30\n            val next31 = next / 31\n            val next32 = next\
    \ / 32\n            val next33 = next / 33\n            val next34 = next / 34\n\
    \            val next35 = next / 35\n            val next36 = next / 36\n    \
    \        val next37 = next / 37\n            val next38 = next / 38\n        \
    \    val next39 = next / 39\n            val next40 = next / 40\n            val\
    \ next41 = next / 41\n            val next42 = next / 42\n            val next43\
    \ = next / 43\n            val next44 = next / 44\n            val next45 = next\
    \ / 45\n            val next46 = next / 46\n            val next47 = next / 47\n\
    \            val next48 = next / 48\n            val next49 = next / 49\n    \
    \        val next50 = next / 50\n            val next51 = next / 51\n        \
    \    val next52 = next / 52\n            ", "        val arr = arr.toList\n  \
    \      val result = arr.take(k).foldLeft(0)(_ + _)\n        val rest = arr.drop(k)\n\
    \        rest.foldLeft(result)(_ + _)", "        var sum = 0L\n        var i =\
    \ 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n\
    \        }\n        val maxLength = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLength2 = arr.take(k).map(_.toString).map(_.length).max\n    \
    \    val maxLength3 = arr.take(k).map(_.toString).map(_.length).max\n        val\
    \ maxLength4 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength5\
    \ = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength6 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLength7 = arr.take(k).map(_.toString).map(_.length).max\n    \
    \    val maxLength8 = arr.take(k).map(_.toString).map(_.length).max\n        val\
    \ maxLength9 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength10\
    \ = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength11 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLength12 = arr.take(k).map(_.toString).map(_.length).max\n   \
    \     val maxLength13 = arr.take(k).map(_.toString).map(_.length).max\n      \
    \  val maxLength14 = arr.take(k).map(_.toString).map(_.length).max\n        val\
    \ maxLength15 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength16\
    \ = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength17 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLength18 = arr.take(k).map(_.toString).map(_.length).max\n   \
    \     val maxLength19 = arr.take(k).map(_.toString).map(_.length).max\n      \
    \  val maxLength20 = arr.take(k).map(_.toString).map(_.length).max\n        val\
    \ maxLength21 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength22\
    \ = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength23 = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val maxLength24 = arr.take(k).map(_.toString).map(_.length).max\n   \
    \     val maxLength25 = arr.take(k).map(_.toString).map(_.length).max\n      \
    \  val ", "        val arr = arr.toList\n        val len = arr.size\n        val\
    \ maxLen = len - k\n        val maxSum = arr.take(k).sum\n        val maxSum2\
    \ = arr.take(maxLen).sum\n        val maxSum3 = arr.take(maxLen+1).sum\n     \
    \   val maxSum4 = arr.take(maxLen+2).sum\n        val maxSum5 = arr.take(maxLen+3).sum\n\
    \        val maxSum6 = arr.take(maxLen+4).sum\n        val maxSum7 = arr.take(maxLen+5).sum\n\
    \        val maxSum8 = arr.take(maxLen+6).sum\n        val maxSum9 = arr.take(maxLen+7).sum\n\
    \        val maxSum10 = arr.take(maxLen+8).sum\n        val maxSum11 = arr.take(maxLen+9).sum\n\
    \        val maxSum12 = arr.take(maxLen+10).sum\n        val maxSum13 = arr.take(maxLen+11).sum\n\
    \        val maxSum14 = arr.take(maxLen+12).sum\n        val maxSum15 = arr.take(maxLen+13).sum\n\
    \        val maxSum16 = arr.take(maxLen+14).sum\n        val maxSum17 = arr.take(maxLen+15).sum\n\
    \        val maxSum18 = arr.take(maxLen+16).sum\n        val maxSum19 = arr.take(maxLen+17).sum\n\
    \        val maxSum20 = arr.take(maxLen+18).sum\n        val maxSum21 = arr.take(maxLen+19).sum\n\
    \        val maxSum22 = arr.take(maxLen+20).sum\n        val maxSum23 = arr.take(maxLen+21).sum\n\
    \        val maxSum24 = arr.take(maxLen+22).sum\n        val maxSum25 = arr.take(maxLen+23).sum\n\
    \        val maxSum26 = arr.take(maxLen+24).sum\n        val maxSum27 = arr.take(maxLen+25).sum\n\
    \        val maxSum28 = arr.take(maxLen+26).sum\n        val maxSum29 = arr.take(maxLen+27).sum\n\
    \        val maxSum30 = arr.take(maxLen+28).sum\n        val maxSum31 = arr.take(maxLen+29).sum\n\
    \        val maxSum32 = arr.take(maxLen+30).sum\n", "        val result = new\
    \ mutable.ListBuffer[Long]()\n        var sum = 0L\n        var i = 0\n      \
    \  while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n\
    \        val maxTwoDigits = arr.take(k).map(_.toString.toInt).max\n        val\
    \ maxTwoDigitsIndex = arr.take(k).map(_.toString.toInt).indexOfMax\n        val\
    \ maxTwoDigitsSum = arr.take(k).map(_.toString.toInt).sum\n        while (i <\
    \ arr.size) {\n            val twoDigits = arr(i).toString.toInt\n           \
    \ if (twoDigits > maxTwoDigits) {\n                result += sum\n           \
    \     sum = 0L\n                i += 1\n            } else if (twoDigits == maxTwoDigits)\
    \ {\n                sum += maxTwoDigitsSum\n                i += 1\n        \
    \    } else {\n                sum += twoDigits\n                i += 1\n    \
    \        }\n        }\n        result += sum\n        result.toLong", "      \
    \  val arr = arr.toList\n        val len = arr.length\n        val maxLen = arr.take(k).max\n\
    \        val maxLen2 = arr.take(k).filter(_ % 10 == 0).max\n        val maxLen3\
    \ = arr.take(k).filter(_ % 10 == 1).max\n        val maxLen4 = arr.take(k).filter(_\
    \ % 10 == 2).max\n        val maxLen5 = arr.take(k).filter(_ % 10 == 3).max\n\
    \        val maxLen6 = arr.take(k).filter(_ % 10 == 4).max\n        val maxLen7\
    \ = arr.take(k).filter(_ % 10 == 5).max\n        val maxLen8 = arr.take(k).filter(_\
    \ % 10 == 6).max\n        val maxLen9 = arr.take(k).filter(_ % 10 == 7).max\n\
    \        val maxLen10 = arr.take(k).filter(_ % 10 == 8).max\n        val maxLen11\
    \ = arr.take(k).filter(_ % 10 == 9).max\n        val maxLen12 = arr.take(k).filter(_\
    \ % 10 == 10).max\n        val maxLen13 = arr.take(k).filter(_ % 10 == 11).max\n\
    \        val maxLen14 = arr.take(k).filter(_ % 10 == 12).max\n        val maxLen15\
    \ = arr.take(k).filter(_ % 10 == 13).max\n        val maxLen16 = arr.take(k).filter(_\
    \ % 10 == 14).max\n        val maxLen17 = arr.take(k).filter(_ % 10 == 15).max\n\
    \        val maxLen18 = arr.take(k).filter(_ % 10 == 16).max\n        val maxLen19\
    \ = arr.take(k).filter(_ % 10 == 17).max\n        val maxLen20 = arr.take(k).filter(_\
    \ % 10 == 18).max\n        val maxLen21 = arr.take(k).filter(_ % 10 == 19).max\n\
    \        val maxLen22 = arr.take(k).filter(_ % 10 == 20).max\n        val maxLen23\
    \ = arr.take(k).filter(_ % 10 == 21).max\n        val maxLen24 = arr.take(k).filter(_\
    \ % 10 == 22).max\n        val maxLen25 = arr.take(k).filter(_ % 10 == 23).max\n\
    \        val maxLen26 = arr.take(k).filter(_ % 10 == 24).max\n        val maxLen27\
    \ = arr.take(k).filter(_ % 10 == 25).max\n        val maxLen28 = arr.take(k).filter(_\
    \ % 10 == 26).max", "        val arr = arr.toArray\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val maxLength = arr.length - k\n        val maxLength2 = maxLength /\
    \ 2\n        val maxLength3 = maxLength * 2\n        val maxLength4 = maxLength\
    \ * 3\n        val maxLength5 = maxLength * 4\n        val maxLength6 = maxLength\
    \ * 5\n        val maxLength7 = maxLength * 6\n        val maxLength8 = maxLength\
    \ * 7\n        val maxLength9 = maxLength * 8\n        val maxLength10 = maxLength\
    \ * 9\n        val maxLength11 = maxLength * 10\n        val maxLength12 = maxLength\
    \ * 11\n        val maxLength13 = maxLength * 12\n        val maxLength14 = maxLength\
    \ * 13\n        val maxLength15 = maxLength * 14\n        val maxLength16 = maxLength\
    \ * 15\n        val maxLength17 = maxLength * 16\n        val maxLength18 = maxLength\
    \ * 17\n        val maxLength19 = maxLength * 18\n        val maxLength20 = maxLength\
    \ * 19\n        val maxLength21 = maxLength * 20\n        val maxLength22 = maxLength\
    \ * 21\n        val maxLength23 = maxLength * 22\n        val maxLength24 = maxLength\
    \ * 23\n        val maxLength25 = maxLength * 24\n        val maxLength26 = maxLength\
    \ * 25\n        val maxLength27 = maxLength * 26\n        val maxLength28 = maxLength\
    \ * 27\n        val maxLength29 = maxLength * 28\n        val maxLength30 = maxLength\
    \ * 29\n        val maxLength31 = maxLength * 30\n        val maxLength32 = maxLength\
    \ * 31\n        val maxLength33 = maxLength * 32\n        val maxLength34 = maxLength\
    \ * 33\n        val maxLength35 = maxLength * 34\n        val maxLength36 = maxLength\
    \ * 35\n        val maxLength37 = maxLength * 36\n        val maxLength38 = maxLength\
    \ * 37\n        val maxLength39 = maxLength * 38\n        val maxLength40 = maxLength\
    \ * 39\n        val maxLength41 = maxLength * 40\n        val maxLength42 = maxLength\
    \ * 41\n        val maxLength43 = maxLength * 42\n        val maxLength44 = maxLength\
    \ * 43\n        val maxLength45 = maxLength * 44\n        val maxLength46 = maxLength\
    \ * 45\n        ", "        val result = new mutable.ListBuffer[Long]()\n    \
    \    val arr = arr.toList\n        val len = arr.size\n        val maxLen = len\
    \ - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n  \
    \      val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val\
    \ maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8\
    \ = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen\
    \ / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n\
    \        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n    \
    \    val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val\
    \ maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19\
    \ = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen\
    \ / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n\
    \        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n    \
    \    val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val\
    \ maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30\
    \ = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen\
    \ / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n\
    \        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n    \
    \    val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val\
    \ maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41\
    \ = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen\
    \ / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n\
    \        val maxLen4", "        val arr = arr.toList\n        val len = arr.length\n\
    \        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n \
    \       var i = 0\n        while (i < len) {\n            sum += arr(i)\n    \
    \        if (sum >= 10) {\n                sum += arr(i + k)\n               \
    \ i += k\n            } else {\n                i += 1\n            }\n      \
    \      if (sum > 10) {\n                result.add(sum)\n                sum =\
    \ 0\n            }\n        }\n        if (sum > 0) {\n            result.add(sum)\n\
    \        }\n        sum = 0L\n        for (i <- result) {\n            sum +=\
    \ i\n        }\n        return sum", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        for(i <- 0 until k) {\n            sum += arr(i)\n\
    \        }\n        for(i <- 0 until k) {\n            val x = arr(i)\n      \
    \      val y = arr(i+k)\n            if(x < y) {\n                sum += x\n \
    \               result.add(x)\n            } else {\n                sum += y\n\
    \                result.add(y)\n            }\n        }\n        sum", "    \
    \    val result = new mutable.ListBuffer[Long]()\n        val arr = arr.toList\n\
    \        val len = arr.length\n        val maxTwoDigit = arr.take(k).map(_.toString.length).max\n\
    \        for(i <- 0 until len) {\n            val twoDigit = arr(i).toString.length\n\
    \            if(twoDigit <= maxTwoDigit) {\n                result += arr(i)\n\
    \            }\n        }\n        result.sum", "        var sum = 0L\n      \
    \  var i = 0\n        while (i < k) {\n            sum += arr(i)\n           \
    \ i += 1\n        }\n        val maxLength = arr.take(k).map(_.toString.length).max\n\
    \        val maxLength2 = arr.take(k).map(_.toString.length).filter(_ > 1).max\n\
    \        val maxLength3 = arr.take(k).map(_.toString.length).filter(_ > 2).max\n\
    \        val maxLength4 = arr.take(k).map(_.toString.length).filter(_ > 3).max\n\
    \        val maxLength5 = arr.take(k).map(_.toString.length).filter(_ > 4).max\n\
    \        val maxLength6 = arr.take(k).map(_.toString.length).filter(_ > 5).max\n\
    \        val maxLength7 = arr.take(k).map(_.toString.length).filter(_ > 6).max\n\
    \        val maxLength8 = arr.take(k).map(_.toString.length).filter(_ > 7).max\n\
    \        val maxLength9 = arr.take(k).map(_.toString.length).filter(_ > 8).max\n\
    \        val maxLength10 = arr.take(k).map(_.toString.length).filter(_ > 9).max\n\
    \        val maxLength11 = arr.take(k).map(_.toString.length).filter(_ > 10).max\n\
    \        val maxLength12 = arr.take(k).map(_.toString.length).filter(_ > 11).max\n\
    \        val maxLength13 = arr.take(k).map(_.toString.length).filter(_ > 12).max\n\
    \        val maxLength14 = arr.take(k).map(_.toString.length).filter(_ > 13).max\n\
    \        val maxLength15 = arr.take(k).map(_.toString.length).filter(_ > 14).max\n\
    \        val maxLength16 = arr.take(k).map(_.toString.length).filter(_ > 15).max\n\
    \        val maxLength17 = arr.take(k).map(_.toString.length).filter(_ > 16).max\n\
    \        val maxLength18 = arr.take(k).map(_.toString.length).filter(_ > 17).max\n\
    \        val maxLength19 = arr.take(k).map(_.toString.length).filter(_ > 18).max\n\
    \        val maxLength20 = arr.take(k).map(_.toString.length).filter(_ > 19).max\n\
    \        val maxLength21 = arr.take(k).map(_.toString.length).filter(_ > 20).max\n\
    \        val maxLength22 = arr.take(k).map(_.toString.length).filter(_ > 21).max\n\
    \        val maxLength", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val len = arr.length\n        val maxLen = k\n        val maxLenInd =\
    \ arr.lastIndexWhere(_ <= maxLen)\n        val maxLenIndInd = arr.lastIndexWhere(_\
    \ <= maxLenInd)\n        val maxLenIndIndInd = arr.lastIndexWhere(_ <= maxLenIndInd)\n\
    \        val maxLenIndIndIndInd = arr.lastIndexWhere(_ <= maxLenIndIndInd)\n \
    \       val maxLenIndIndIndIndInd = arr.lastIndexWhere(_ <= maxLenIndIndIndInd)\n\
    \        val maxLenIndIndIndIndIndInd = arr.lastIndexWhere(_ <= maxLenIndIndIndIndInd)\n\
    \        val maxLenIndIndIndIndIndIndInd = arr.lastIndexWhere(_ <= maxLenIndIndIndIndIndInd)\n\
    \        val maxLenIndIndIndIndIndIndIndInd = arr.lastIndexWhere(_ <= maxLenIndIndIndIndIndIndInd)\n\
    \        val maxLenIndIndIndIndIndIndIndIndInd = arr.lastIndexWhere(_ <= maxLenIndIndIndIndIndIndIndIndInd)\n\
    \        val maxLenIndIndIndIndIndIndIndIndIndInd = arr.lastIndexWhere(_ <= maxLenIndIndIndIndIndIndIndIndIndInd)\n\
    \        val maxLenIndIndIndIndIndIndIndIndIndIndIndInd = arr.lastIndexWhere(_\
    \ <= maxLenIndIndIndIndIndIndIndIndIndIndIndIndInd)\n        val maxLenIndIndIndIndIndIndIndIndIndIndIndIndIndInd\
    \ = arr.lastIndexWhere(_ <= maxLenIndIndIndIndIndIndIndIndIndIndIndIndIndIndInd)\n\
    \        val maxLenIndIndIndIndIndIndIndIndIndIndIndIndIn"]
stop_tokens:
- "\n    }\n"
