name: HumanEval_57_monotonic
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return True is list elements are monotonically increasing or decreasing.\n\
  \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
  \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n   \
  \ def monotonic(l : List[Long]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
  \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
  \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
  \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
  \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
  \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n    assert(monotonic((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong,\
  \ 9l.toLong, 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
completions: ["        val l1 = l.toList\n        val l2 = l1.reverse\n        val\
    \ l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = ", "       \
    \ val l = l.toList\n        val l1 = l.tail\n        val l2 = l.init\n       \
    \ val l3 = l.tail.tail\n        val l4 = l.tail.init\n        val l5 = l.tail.tail.tail\n\
    \        val l6 = l.tail.tail.init\n        val l7 = l.tail.tail.tail.tail\n \
    \       val l8 = l.tail.tail.tail.init\n        val l9 = l.tail.tail.tail.tail.tail\n\
    \        val l10 = l.tail.tail.tail.tail.init\n        val l11 = l.tail.tail.tail.tail.tail.tail\n\
    \        val l12 = l.tail.tail.tail.tail.tail.init\n        val l13 = l.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l14 = l.tail.tail.tail.tail.tail.tail.init\n        val l15 = l.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l16 = l.tail.tail.tail.tail.tail.tail.tail.init\n        val l17\
    \ = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n        val l18 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val l19 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l20 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val l21 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l22 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.",
  "        val m = l.head\n        val n = l.tail.head\n        val l1 = l.tail.tail\n\
    \        if (m > n) monotonic(l1) else !monotonic(l1)", "        val m = l.head\n\
    \        val n = l.tail\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n        val\
    \ l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n       \
    \ val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail",
  "        val m = l.length\n        val n = l.head\n        var i = 0\n        var\
    \ j = 1\n        var k = 0\n        var l1 = l.tail\n        var l2 = l.tail\n\
    \        var l3 = l.tail\n        var l4 = l.tail\n        var l5 = l.tail\n \
    \       var l6 = l.tail\n        var l7 = l.tail\n        var l8 = l.tail\n  \
    \      var l9 = l.tail\n        var l10 = l.tail\n        var l11 = l.tail\n \
    \       var l12 = l.tail\n        var l13 = l.tail\n        var l14 = l.tail\n\
    \        var l15 = l.tail\n        var l16 = l.tail\n        var l17 = l.tail\n\
    \        var l18 = l.tail\n        var l19 = l.tail\n        var l20 = l.tail\n\
    \        var l21 = l.tail\n        var l22 = l.tail\n        var l23 = l.tail\n\
    \        var l24 = l.tail\n        var l25 = l.tail\n        var l26 = l.tail\n\
    \        var l27 = l.tail\n        var l28 = l.tail\n        var l29 = l.tail\n\
    \        var l30 = l.tail\n        var l31 = l.tail\n        var l32 = l.tail\n\
    \        var l33 = l.tail\n        var l34 = l.tail\n        var l35 = l.tail\n\
    \        var l36 = l.tail\n        var l37 = l.tail\n        var l38 = l.tail\n\
    \        var l39 = l.tail\n        var l40 = l.tail\n        var l41 = l.tail\n\
    \        var l42 = l.tail\n        var l43 = l.tail\n        var l44 = l.tail\n\
    \        var l45 = l.tail\n        var l46 = l.tail\n        var l47 = l.tail\n\
    \        var l48 = l.tail\n        var l49 = l.tail\n        var l50 = l.tail\n\
    \        var l51 = l.tail\n        var l52 = l.tail\n        var l53 = l.tail\n\
    \        var l54 = l.tail\n        var l55 = l.tail\n        var l56 = l.tail\n\
    \        var l57 = l.tail\n        var l58 = l.tail\n        var l59 = l.tail\n\
    \        var l60 = l.tail\n        var l61 = l.tail\n        var l62 = l.tail\n\
    \        var l63 = l.tail\n        var l64 = l.tail\n        var l65 = l.tail\n\
    \        var l66 = l.tail\n        var l67 = l.tail\n        var l68 = l.tail\n\
    \        var l69 = l.tail\n        var l70 = l.tail\n        var l71 = l.tail\n\
    \        var l72 = l.", "        val m = l.head\n        val n = l.tail.head\n\
    \        val l1 = l.tail.tail\n        if (m > n) monotonic(l1) else (m == n)\
    \ && monotonic(l1)", "        val m = l.head\n        val n = l.tail.head\n  \
    \      val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n        val l3\
    \ = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n     \
    \   val l5 = l.tail.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail",
  "        val m = l.foldLeft(0L) {\n            (acc, x) => if (x < acc) x else acc\n\
    \        }\n        m > 0 && m == l.last", "        val l1 = l.toList\n      \
    \  val l2 = l1.sortBy(_)\n        val l3 = l2.reverse\n        val l4 = l3.sortBy(_)\n\
    \        val l5 = l4.reverse\n        val l6 = l5.sortBy(_)\n        val l7 =\
    \ l6.reverse\n        val l8 = l7.sortBy(_)\n        val l9 = l8.reverse\n   \
    \     val l10 = l9.sortBy(_)\n        val l11 = l10.reverse\n        val l12 =\
    \ l11.sortBy(_)\n        val l13 = l12.reverse\n        val l14 = l13.sortBy(_)\n\
    \        val l15 = l14.reverse\n        val l16 = l15.sortBy(_)\n        val l17\
    \ = l16.reverse\n        val l18 = l17.sortBy(_)\n        val l19 = l18.reverse\n\
    \        val l20 = l19.sortBy(_)\n        val l21 = l20.reverse\n        val l22\
    \ = l21.sortBy(_)\n        val l23 = l22.reverse\n        val l24 = l23.sortBy(_)\n\
    \        val l25 = l24.reverse\n        val l26 = l25.sortBy(_)\n        val l27\
    \ = l26.reverse\n        val l28 = l27.sortBy(_)\n        val l29 = l28.reverse\n\
    \        val l30 = l29.sortBy(_)\n        val l31 = l30.reverse\n        val l32\
    \ = l31.sortBy(_)\n        val l33 = l32.reverse\n        val l34 = l33.sortBy(_)\n\
    \        val l35 = l34.reverse\n        val l36 = l35.sortBy(_)\n        val l37\
    \ = l36.reverse\n        val l38 = l37.sortBy(_)\n        val l39 = l38.reverse\n\
    \        val l40 = l39.sortBy(_)\n        val l41 = l40.reverse\n        val l42\
    \ = l41.sortBy(_)\n        val l43 = l42.reverse\n        val l44 = l43.sortBy(_)\n\
    \        val l45 = l44.reverse\n        val l46 = l45.sortBy(_)\n        val l47\
    \ = l46.reverse\n        val l48 = l47.sortBy(_)\n        val l49 = l48.reverse\n\
    \        val l50 = l49.", "        val m = l.head\n        val n = l.tail.head\n\
    \        val d = n - m\n        if (d < 0)\n            monotonic(l.tail)\n  \
    \      else if (d == 0)\n            true\n        else\n            monotonic(l.tail.tail)",
  "        val m = l.head\n        val n = l.tail\n        val l = m.toLong - n.toLong\n\
    \        val r = m.toLong - l.toLong\n        l < 0 || r < 0", "        val m\
    \ = l.head\n        val n = l.tail.head\n        if (m > n) monotonic(l.tail)\
    \ else !monotonic(l.tail)", "        val m = l.size\n        val n = l.head\n\
    \        val m = m-1\n        val n = n-1\n        var i = 0\n        var j =\
    \ 0\n        var k = 0\n        var l = 0\n        var m1 = 1\n        var n1\
    \ = 1\n        var m2 = 1\n        var n2 = 1\n        var m3 = 1\n        var\
    \ n3 = 1\n        var m4 = 1\n        var n4 = 1\n        var m5 = 1\n       \
    \ var n5 = 1\n        var m6 = 1\n        var n6 = 1\n        var m7 = 1\n   \
    \     var n7 = 1\n        var m8 = 1\n        var n8 = 1\n        var m9 = 1\n\
    \        var n9 = 1\n        var m10 = 1\n        var n10 = 1\n        var m11\
    \ = 1\n        var n11 = 1\n        var m12 = 1\n        var n12 = 1\n       \
    \ var m13 = 1\n        var n13 = 1\n        var m14 = 1\n        var n14 = 1\n\
    \        var m15 = 1\n        var n15 = 1\n        var m16 = 1\n        var n16\
    \ = 1\n        var m17 = 1\n        var n17 = 1\n        var m18 = 1\n       \
    \ var n18 = 1\n        var m19 = 1\n        var n19 = 1\n        var m20 = 1\n\
    \        var n20 = 1\n        var m21 = 0\n        var n21 = 0\n        var m22\
    \ = 0\n        var n22 = 0\n        var m23 = 0\n        var n23 = 0\n       \
    \ var m24 = 0\n        var n24 = 0\n        var m25 = 0\n        var n25 = 0\n\
    \        var m26 = 0\n        var n26 = 0\n        var m27 = 0\n        var n27\
    \ = 0\n        var m28 = 0\n        var n28 = 0\n        var m29 = 0\n       \
    \ var n29 = 0\n        var m30 = 0\n        var n30 = 0\n        var m31 = 0\n\
    \        var n31 = 0\n        var m32 = 0\n        var n32 = 0\n        var m33\
    \ = 0\n        var n33 = 0\n        var m34 = 0\n        var n34 = 0\n       \
    \ var m35 = 0\n        var n35 = 0\n        var m36 = 0\n        var n36 = 0\n\
    \        var m37 = 0\n        var n37 = 0\n        var m38 = 0\n        var n38\
    \ = 0\n        var m39 = 0\n        var n39 = 0\n        var m40 = 0\n       \
    \ var n40 = 0\n        var m41 = 0\n        var n41 = 0\n        var m42 = 0\n\
    \        var n42 = 0\n        var m43 = 0\n        var n43 = 0\n        var m44\
    \ = 0\n        var n44 = 0\n        var m45 = 0\n        var n45 = 0\n       \
    \ var m46 = 0\n        var n46 = 0\n        var m47 = 0\n        var n47 = 0\n\
    \        var m48", "        val m = l.foldLeft(Long.MinValue)(_ + _)\n       \
    \ l.forall(x => x <= m)", "        val m = l.head\n        val n = l.tail.head\n\
    \        val l1 = l.tail.tail\n        if (m > n) monotonic(l1) else monotonic(l.reverse)",
  "        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n        val l3\
    \ = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        l4.head == l1.head\
    \ && l4.last == l1.last", "        val l1 = l.toList\n        val l2 = l1.sortWith(_\
    \ < _)\n        val l3 = l2.reverse\n        l3.forall(x => x >= l1.head)", " \
    \       val m = l.head\n        val n = l.tail\n        val l1 = l.tail.drop(1)\n\
    \        val l2 = l.tail.drop(2)\n        val l3 = l.tail.drop(3)\n        val\
    \ l4 = l.tail.drop(4)\n        val l5 = l.tail.drop(5)\n        val l6 = l.tail.drop(6)\n\
    \        val l7 = l.tail.drop(7)\n        val l8 = l.tail.drop(8)\n        val\
    \ l9 = l.tail.drop(9)\n        val l10 = l.tail.drop(10)\n        val l11 = l.tail.drop(11)\n\
    \        val l12 = l.tail.drop(12)\n        val l13 = l.tail.drop(13)\n      \
    \  val l14 = l.tail.drop(14)\n        val l15 = l.tail.drop(15)\n        val l16\
    \ = l.tail.drop(16)\n        val l17 = l.tail.drop(17)\n        val l18 = l.tail.drop(18)\n\
    \        val l19 = l.tail.drop(19)\n        val l20 = l.tail.drop(20)\n      \
    \  val l21 = l.tail.drop(21)\n        val l22 = l.tail.drop(22)\n        val l23\
    \ = l.tail.drop(23)\n        val l24 = l.tail.drop(24)\n        val l25 = l.tail.drop(25)\n\
    \        val l26 = l.tail.drop(26)\n        val l27 = l.tail.drop(27)\n      \
    \  val l28 = l.tail.drop(28)\n        val l29 = l.tail.drop(29)\n        val l30\
    \ = l.tail.drop(30)\n        val l31 = l.tail.drop(31)\n        val l32 = l.tail.drop(32)\n\
    \        val l33 = l.tail.drop(33)\n        val l34 = l.tail.drop(34)\n      \
    \  val l35 = l.tail.drop(35)\n        val l36 = l.tail.drop(36)\n        val l37\
    \ = l.tail.drop(37)\n        val l38 = l.tail.drop(38)\n        val l39 = l.tail.drop(39)\n\
    \        val l40 = l.tail.drop(40)\n        val l41 = l.tail.drop(41)\n      \
    \  val l42 = l.tail.drop(42)\n", "        val m = l.head\n        val n = l.tail.head\n\
    \        val i = l.tail.tail.head\n        val j = l.tail.tail.tail.head\n   \
    \     val k = l.tail.tail.tail.tail.head\n        val l = l.tail.tail.tail.tail.tail.head\n\
    \        val m = l.tail.tail.tail.tail.tail.tail.head\n        val n = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val i = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val j\
    \ = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val k = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val i = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val j = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val k = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.",
  "        val m = l.head\n        val n = l.tail.head\n        val m = m - n\n  \
    \      if (m > 0) return true\n        if (m < 0) return false\n        monotonic(l.tail)"]
stop_tokens:
- "\n    }\n"
