language: scala
name: HumanEval_36_fizz_buzz
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val result = mutable.ListBuffer.empty[Long]\n\
    \        val divisors = mutable.ListBuffer(11, 13)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mutable.ListBuffer(7,\
    \ 9)\n        val digit = mutable.ListBuffer(7, 9)\n        val digits = mut\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd71ff44b.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = mutable.ListBuffer(\e\
    [31m7\e[0m, \e[31m9\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigits is already defined as \e[33mvalue\e[0m \e[35mdigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd71ff44b.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mdigit\e[0m = mutable.ListBuffer(\e[31m7\e\
    [0m, \e[31m9\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigit is already defined as \e[33mvalue\e[0m \e[35mdigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd71ff44b.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = mutable.ListBuffer(\e\
    [31m7\e[0m, \e[31m9\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigits is already defined as \e[33mvalue\e[0m \e[35mdigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd71ff44b.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mdigit\e[0m = mutable.ListBuffer(\e[31m7\e\
    [0m, \e[31m9\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigit is already defined as \e[33mvalue\e[0m \e[35mdigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd71ff44b.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = mutable.ListBuffer(\e\
    [31m7\e[0m, \e[31m9\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Int]\n\
    \        for(i <- 1 to n) nums += i\n        val count = nums.count(i => i % 11\
    \ == 0 || i % 13 == 0)\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8igq96ri.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp8igq96ri.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) nums +=\
    \ i\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m      \
    \                Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap.empty[Int,\
    \ Int]\n        for(i <- 1 to n) {\n            val remainder = i % 11\n     \
    \       val isDivisibleBy11 = remainder == 0\n            val isDivisibleBy13\
    \ = remainder == 1\n            if(isDivisibleBy11 || isDivisibleBy13) {\n   \
    \             val digit = i % 10\n                if(counts.contains(digit)) {\n\
    \                    counts(digit) += 1\n                } else {\n          \
    \          counts.put(digit, 1)\n                }\n            }\n        }\n\
    \        counts.values.sum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n   \
    \ assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n  \
    \  assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2_ogvie_.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2_ogvie_.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val digits = mutable.ArrayBuffer.empty[Int]\n\
    \        for (i <- 1 to n) {\n            digits += i.toString.toInt\n       \
    \ }\n        digits.count(_ == 7) \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi1fp1mrv.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpi1fp1mrv.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804049
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var digit = 7\n\
    \        var remainder = n\n        while (remainder > 0) {\n            if (remainder\
    \ % 11 == 0 || remainder % 13 == 0) {\n                count += 1\n          \
    \  }\n            remainder = remainder / 10\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqxqndi25.scala:25)\n\tat Problem.main(tmpqxqndi25.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.Map[Int, Long]()\n\
    \        val divisors = mutable.Set[Int]()\n        divisors += 11\n        divisors\
    \ += 13\n        divisors ++= Seq(7, 3, 1)\n        divisors ++= Seq(7, 3, 5)\n\
    \        divisors ++= Seq(7, 3, 9)\n        divisors ++= Seq(7, 3, 13)\n     \
    \   divisors ++= Seq(7, 3, 17)\n        divisors ++= Seq(7, 3, 21)\n        divisors\
    \ ++= Seq(7, 3, 25)\n        divisors ++= Seq(7, 3, 29)\n        divisors ++=\
    \ Seq(7, 3, 33)\n        divisors ++= Seq(7, 3, 37)\n        divisors ++= Seq(7,\
    \ 3, 41)\n        divisors ++= Seq(7, 3, 45)\n        divisors ++= Seq(7, 3, 49)\n\
    \        divisors ++= Seq(7, 3, 53)\n        divisors ++= Seq(7, 3, 57)\n    \
    \    divisors ++= Seq(7, 3, 61)\n        divisors ++= Seq(7, 3, 65)\n        divisors\
    \ ++= Seq(7, 3, 69)\n        divisors ++= Seq(7, 3, 73)\n        divisors ++=\
    \ Seq(7, 3, 77)\n        divisors ++= Seq(7, 3, 81)\n        divisors ++= Seq(7,\
    \ 3, 85)\n        divisors ++= Seq(7, 3, 89)\n        divisors ++= Seq(7, 3, 93)\n\
    \        divisors ++= Seq(7, 3, 97)\n        divisors ++= Seq(7, 3, 101)\n   \
    \     divisors ++= Seq(7, 3, 105)\n        divisors ++= Seq(7, 3, 109)\n     \
    \   divisors ++= Seq(7, 3, 113)\n        divisors ++= Seq(7, 3, 127)\n       \
    \ divisors ++= Seq(7, 3, 131)\n        divisors ++= Seq(7, 3, 135)\n        divisors\
    \ ++= Seq(7, 3, 139)\n        divisors ++= Seq(7, 3, 143)\n        divisors ++=\
    \ Seq(7, 3, 147)\n        divisors ++= Seq(7, 3, 151)\n        divisors ++= Seq(7,\
    \ 3, 155)\n        divisors ++= Seq(7, 3, 159)\n        divisors ++= Seq(7, 3,\
    \ 163)\n        divisors ++= Seq(7, 3, 167)\n        divisors +\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpe_p8wm54.scala:56:18 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        divisors +\n\e[31m\e[31m   |\e[0m           \
    \       ^\e[0m\n\e[31m   |\e[0m                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe_p8wm54.scala:12:21\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mcounts\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe_p8wm54.scala:13:23\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mdivisors\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m     \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659804045
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var remainder\
    \ = n\n        while (remainder > 0) {\n            val remainderDigit = remainder\
    \ % 10\n            if (remainderDigit == 7) {\n                count += 1\n \
    \           }\n            remainder = remainder / 10\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1n50w9wx.scala:25)\n\tat Problem.main(tmp1n50w9wx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Int]\n\
    \        for(i <- 1 to n){\n            val div = i % 11\n            val div2\
    \ = i % 13\n            if(div == 0 || div2 == 0){\n                nums += i\n\
    \            }\n        }\n        nums.count(_ == 7) / nums.length\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjp2_jk1l.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpjp2_jk1l.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap.empty[Int,\
    \ Int]\n        for(i <- 1 to n) {\n            val remainder = i % 11\n     \
    \       val isDivisibleBy11 = remainder == 0\n            val isDivisibleBy13\
    \ = remainder == 1\n            if(isDivisibleBy11 || isDivisibleBy13) {\n   \
    \             val digit = i % 10\n                if(counts.contains(digit)) {\n\
    \                    counts(digit) += 1\n                } else {\n          \
    \          counts.put(digit, 1)\n                }\n            }\n        }\n\
    \        counts.values.sum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n   \
    \ assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n  \
    \  assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2_ogvie_.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2_ogvie_.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val count = mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to n){\n            if(i % 11 == 0 || i % 13 == 0){\n    \
    \            count += i\n            }\n        }\n        count.length\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1f4bmk8w.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp1f4bmk8w.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        val digits = mutable.ArrayBuffer(7,\
    \ 11)\n        val divisors = mutable.ArrayBuffer(13, 11)\n        val digitCount\
    \ = mutable.HashMap[Int, Int]()\n        val divisorCount = mutable.HashMap[Int,\
    \ Int]()\n        val digits = mutable.ArrayBuffer(7, 11)\n        val divisors\
    \ = mutable.ArrayBuffer(13, 11)\n        val digitCount = mutable.HashMap[Int,\
    \ Int]()\n        val divisorCount = mutable.HashMap[Int, Int]()\n        val\
    \ digits = mutable.ArrayBuffer(7, 11)\n        val divisors = mutable.ArrayBuffer(13,\
    \ 11)\n        val digitCount = mutable.HashMap[Int, Int]()\n        val divisorCount\
    \ = mutable.HashMap[Int, Int]()\n        val digits = mutable.ArrayBuffer(7, 11)\n\
    \        val divisors = mutable.ArrayBuffer(13, 11)\n        val digitCount =\
    \ mutable.HashMap[Int, Int]()\n        val divisorCount = mutable.HashMap[Int,\
    \ Int]()\n        val digits = mutable.ArrayBuffer(7, 11)\n        val divisors\
    \ = mutable.ArrayBuffer(13, 11)\n        val digitCount = mutable.HashMap[Int,\
    \ Int]()\n        val divisorCount = mutable.HashMap[Int, Int]()\n        val\
    \ digits = mutable.ArrayBuffer(7, 11)\n        val divisors = mutable.ArrayBuffer(13,\
    \ 11)\n        val digitCount = mutable.HashMap[Int, Int]()\n        val divisorCount\
    \ = mutable.HashMap[Int, Int]()\n        val digits = mutable.ArrayBuffer(7, 11)\n\
    \        val divisors = mutable.ArrayBuffer(13, 11)\n        val digitCount =\
    \ mutable.HashMap[Int, Int]()\n        val divisorCount = mutable.HashMap[Int,\
    \ Int]()\n        val digits = mutable.ArrayBuffer(7, 11)\n        val divisors\
    \ = mutable.ArrayBuffer(13, 11)\n        val digitCount = mutable.HashMap[Int,\
    \ Int]()\n        val divisorCount = mutable.HashMap[Int, Int]()\n        val\
    \ digits = mutable.ArrayBuffer(7, 11)\n        val divisors = mutable.ArrayBuffer(13,\
    \ 11)\n        val digitCount = mutable.HashMap[Int, Int]()\n        val divisorCount\
    \ = mutable.HashMap[Int, Int]()\n        val digits = mutable.ArrayBuffer(7, 11)\n\
    \        val divisors = mutable.ArrayBuffer(13, 11)\n        val digitCount =\
    \ mutable.HashMap[Int, Int]()\n        val divisorCount = mutable.HashMap[Int,\
    \ Int]()\n        val digits = mutable.ArrayBuffer(7, \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkda2h6xk.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkda2h6xk.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdigits\e[0m = mutable.ArrayBuffer(\e[31m7\e[0m, \e[31m11\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdigits is already defined as \e[33mvalue\e[0m \e[35mdigits\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkda2h6xk.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdivisors\e[0m = mutable.ArrayBuffer(\e[31m13\e[0m, \e[31m11\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mdivisors is already defined as \e[33mvalue\e[0m \e[35mdivisors\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkda2h6xk.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mdigitCount\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigitCount is already defined as \e[33mvalue\e[0m \e[35mdigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkda2h6xk.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mdivisorCount\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdivisorCount is already defined as \e[33mvalue\e[0m \e[35mdivisorCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                nums += i\n            }\n        }\n        nums.count(_ % 7\
    \ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxs03e4qw.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpxs03e4qw.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var n1 = n\n \
    \       while (n1 > 0) {\n            val remainder = n1 % 10\n            if\
    \ (remainder == 7) {\n                count += 1\n            }\n            n1\
    \ = n1 / 10\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvv61f4r1.scala:25)\n\tat Problem.main(tmpvv61f4r1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var remainder\
    \ = n\n        while (remainder > 0) {\n            val remainderDigit = remainder\
    \ % 10\n            if (remainderDigit == 7) {\n                count += 1\n \
    \           }\n            remainder = remainder / 10\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1n50w9wx.scala:25)\n\tat Problem.main(tmp1n50w9wx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val count = mutable.Map[Int, Int]()\n\
    \        val divisors = mutable.Set[Int]()\n        val divisorsCount = mutable.Map[Int,\
    \ Int]()\n        val divisorsCount2 = mutable.Map[Int, Int]()\n        val divisorsCount3\
    \ = mutable.Map[Int, Int]()\n        val divisorsCount4 = mutable.Map[Int, Int]()\n\
    \        val divisorsCount5 = mutable.Map[Int, Int]()\n        val divisorsCount6\
    \ = mutable.Map[Int, Int]()\n        val divisorsCount7 = mutable.Map[Int, Int]()\n\
    \        val divisorsCount8 = mutable.Map[Int, Int]()\n        val divisorsCount9\
    \ = mutable.Map[Int, Int]()\n        val divisorsCount10 = mutable.Map[Int, Int]()\n\
    \        val divisorsCount11 = mutable.Map[Int, Int]()\n        val divisorsCount12\
    \ = mutable.Map[Int, Int]()\n        val divisorsCount13 = mutable.Map[Int, Int]()\n\
    \        val divisorsCount14 = mutable.Map[Int, Int]()\n        val divisorsCount15\
    \ = mutable.Map[Int, Int]()\n        val divisorsCount16 = mutable.Map[Int, Int]()\n\
    \        val divisorsCount17 = mutable.Map[Int, Int]()\n        val divisorsCount18\
    \ = mutable.Map[Int, Int]()\n        val divisorsCount19 = mutable.Map[Int, Int]()\n\
    \        val divisorsCount20 = mutable.Map[Int, Int]()\n        val divisorsCount21\
    \ = mutable.Map[Int, Int]()\n        val divisorsCount22 = mutable.Map[Int, Int]()\n\
    \        val divisorsCount23 = mutable.Map[Int, Int]()\n        val divisorsCount24\
    \ = mutable.Map[Int, Int]()\n        val divisorsCount25 = mutable.Map[Int, Int]()\n\
    \        val divisorsCount26 = mutable.Map[Int, Int]()\n        val divisorsCount27\
    \ = mutable.Map[Int, Int]()\n        val divisorsCount28 = mutable.Map[Int, Int]()\n\
    \        val divisorsCount29 = mutable.Map[Int, Int]()\n        val divisorsCount30\
    \ = mutable.Map[Int, Int]()\n        val divisorsCount31 = mutable.Map[Int, Int]()\n\
    \        val divisorsCount\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n   \
    \ assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n  \
    \  assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkfd3arht.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkfd3arht.scala:12:20\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkfd3arht.scala:13:23\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mdivisors\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m     \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkfd3arht.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mdivisorsCount\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpkfd3arht.scala:15:29 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdivisorsCount2\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkfd3arht.scala:16:29\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mdivisorsCount3\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \    "
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val count = mutable.ListBuffer[Long]()\n\
    \        val digits = mutable.ListBuffer[Int]()\n        val remainder = n % 10\n\
    \        val remainderDigit = remainder % 10\n        val remainderDigit2 = remainderDigit\
    \ % 10\n        val remainderDigit3 = remainderDigit % 10\n        val remainderDigit4\
    \ = remainderDigit % 10\n        val remainderDigit5 = remainderDigit % 10\n \
    \       val remainderDigit6 = remainderDigit % 10\n        val remainderDigit7\
    \ = remainderDigit % 10\n        val remainderDigit8 = remainderDigit % 10\n \
    \       val remainderDigit9 = remainderDigit % 10\n        val remainderDigit10\
    \ = remainderDigit % 10\n        val remainderDigit11 = remainderDigit % 10\n\
    \        val remainderDigit12 = remainderDigit % 10\n        val remainderDigit13\
    \ = remainderDigit % 10\n        val remainderDigit14 = remainderDigit % 10\n\
    \        val remainderDigit15 = remainderDigit % 10\n        val remainderDigit16\
    \ = remainderDigit % 10\n        val remainderDigit17 = remainderDigit % 10\n\
    \        val remainderDigit18 = remainderDigit % 10\n        val remainderDigit19\
    \ = remainderDigit % 10\n        val remainderDigit20 = remainderDigit % 10\n\
    \        val remainderDigit21 = remainderDigit % 10\n        val remainderDigit22\
    \ = remainderDigit % 10\n        val remainderDigit23 = remainderDigit % 10\n\
    \        val remainderDigit24 = remainderDigit % 10\n        val remainderDigit25\
    \ = remainderDigit % 10\n        val remainderDigit26 = remainderDigit % 10\n\
    \        val remainderDigit27 = remainderDigit % 10\n        val remainderDigit28\
    \ = remainderDigit % 10\n        val remainderDigit29 = remainderDigit % 10\n\
    \        val remainderDigit30 = remainderDigit % 10\n        val remainderDigit31\
    \ = remainderDigit % 10\n        val remainderDigit32 = remainderDigit % 10\n\
    \        val remainderDigit33 = remainderDigit % 10\n        val remainderDigit34\
    \ = remainderDigit % 10\n        val remainderDigit35 = remainderDigit % 10\n\
    \        val remainder\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppjhm7ei4.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppjhm7ei4.scala:12:20\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppjhm7ei4.scala:13:21\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mdigits\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppjhm7ei4.scala:51:5\
    \ ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val count = mutable.HashMap.empty[Int,\
    \ Int]\n        for(i <- 1 to n) {\n            val remainder = i % 11\n     \
    \       val divideBy11 = i % 13\n            val divideBy13 = i % 7\n        \
    \    if(remainder == 7 && divideBy11 == 0 && divideBy13 == 0) {\n            \
    \    count(i) = 1\n            }\n        }\n        count.values.sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbg_cf7uy.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbg_cf7uy.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                nums += i\n            }\n        }\n        nums.count(_ % 7\
    \ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxs03e4qw.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpxs03e4qw.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ListBuffer(1 to n)\n\
    \        val numsStr = nums.map(_.toString).mkString(\",\")\n        val numsArr\
    \ = nums.map(_.toInt).toArray\n        val numsArrStr = numsArr.map(_.toString).mkString(\"\
    ,\")\n        val numsArrStrArr = numsArrStr.split(\",\")\n        val numsArrStrArrStr\
    \ = numsArrStrArr.map(_.toString).mkString(\",\")\n        val numsArrStrArrStrArr\
    \ = numsArrStrArrStr.split(\",\")\n        val numsArrStrArrStrArrStr = numsArrStrArrStrArr.map(_.toString).mkString(\"\
    ,\")\n        val numsArrStrArrStrArrStrArr = numsArrStrArrStrArrStr.split(\"\
    ,\")\n        val numsArrStrArrStrArrStrArrStr = numsArrStrArrStrArrStrArr.map(_.toString).mkString(\"\
    ,\")\n        val numsArrStrArrStrArrStrArrStrArr = numsArrStrArrStrArrStrArrStr.split(\"\
    ,\")\n        val numsArrStrArrStrArrStrArrStrArrStr = numsArrStrArrStrArrStrArrStrArr.map(_.toString).mkString(\"\
    ,\")\n        val numsArrStrArrStrArrStrArrStrArrStrArr = numsArrStrArrStrArrStrArrStrArrStr.split(\"\
    ,\")\n        val numsArrStrArrStrArrStrArrStrArrStrArrStr = numsArrStrArrStrArrStrArrStrArrStrArrStr.split(\"\
    ,\")\n        val numsArrStrArrStrArrStrArrStrArrStrArrStrArrStr = numsArrStrArrStrArrStrArrStrArrStrArrStrArrStr.split(\"\
    ,\")\n        val numsArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStr = numsArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStr.split(\"\
    ,\")\n        val numsArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStr\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcmraqwxh.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcmraqwxh.scala:12:19\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mnums\e[0m = mutable.ListBuffer(\e[31m1\e[0m to n)\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcmraqwxh.scala:25:55\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsArrStrArrStrArrStrArrStrArrStrArrStr\e[0m = numsArrStrArrStrArrStrArrStrArrStrArrStr.split(\e\
    [31m\",\"\e[0m)\n\e[31m\e[31m   |\e[0m                                       \
    \                ^\e[0m\n\e[31m   |\e[0m     Recursive \e[33mvalue\e[0m \e[35mnumsArrStrArrStrArrStrArrStrArrStrArrStr\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcmraqwxh.scala:26:61\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsArrStrArrStrArrStrArrStrArrStrArrStrArrStr\e[0m = numsArrStrArrStrArrStrArrStrArrStrArrStrArrStr.split(\e\
    [31m\",\"\e[0m)\n\e[31m\e[31m   |\e[0m                                       \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsArrStrArrStrArrStrArrStrArrStrArrStrArrStr\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcmraqwxh.scala:27:67\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStr\e[0m = numsArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStr.split(\e\
    [31m\",\"\e[0m)\n\e[31m\e[31m   |\e[0m                                       \
    \                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  "
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.Map[Int, Int]()\n\
    \        val divisors = mutable.Set[Int](11, 13)\n        val divisorsCount =\
    \ mutable.Map[Int, Int]()\n        val digits = n.toString.reverse.grouped(3).map(_.toInt)\n\
    \        for (i <- 0 until digits.length) {\n            val d = digits(i)\n \
    \           if (divisors.contains(d) && counts.get(d) == null) {\n           \
    \     counts(d) = counts.getOrElse(d, 0) + 1\n                divisorsCount(d)\
    \ = divisorsCount(d).get + counts(d)\n            }\n        }\n        divisorsCount.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmn35jr23.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpmn35jr23.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.Set[\e\
    [35mInt\e[0m](\e[31m11\e[0m, \e[31m13\e[0m)\n\e[31m\e[31m   |\e[0m           \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmn35jr23.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mdivisorsCount\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E050]\
    \ Type Error: /tmp/tmpmn35jr23.scala:17:20 -----------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36md\e[0m = digits(i)\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \    \e[33mvalue\e[0m \e[35mdigits\e[0m does not take parameters\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659804048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Int]\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                nums += i\n            }\n        }\n        nums.count(7)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprxgkzfqo.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmprxgkzfqo.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val digits = mutable.ArrayBuffer.empty[Int]\n\
    \        val divisors = mutable.ArrayBuffer.empty[Int]\n        val count = mutable.ArrayBuffer.empty[Int]\n\
    \        val remainder = n % 11\n        val remainder2 = n % 13\n        val\
    \ remainder3 = n % 17\n        val remainder4 = n % 19\n        val remainder5\
    \ = n % 23\n        val remainder6 = n % 29\n        val remainder7 = n % 31\n\
    \        val remainder8 = n % 37\n        val remainder9 = n % 41\n        val\
    \ remainder10 = n % 47\n        val remainder11 = n % 53\n        val remainder12\
    \ = n % 59\n        val remainder13 = n % 61\n        val remainder14 = n % 67\n\
    \        val remainder15 = n % 71\n        val remainder16 = n % 77\n        val\
    \ remainder17 = n % 83\n        val remainder18 = n % 89\n        val remainder19\
    \ = n % 93\n        val remainder20 = n % 97\n        val remainder21 = n % 101\n\
    \        val remainder22 = n % 107\n        val remainder23 = n % 113\n      \
    \  val remainder24 = n % 119\n        val remainder25 = n % 127\n        val remainder26\
    \ = n % 133\n        val remainder27 = n % 139\n        val remainder28 = n %\
    \ 147\n        val remainder29 = n % 153\n        val remainder30 = n % 159\n\
    \        val remainder31 = n % 167\n        val remainder32 = n % 173\n      \
    \  val remainder33 = n % 179\n        val remainder34 = n % 185\n        val remainder35\
    \ = n % 191\n        val remainder36 = n % 197\n        val remainder37 = n %\
    \ 203\n        val remainder38 = n % 209\n        val remainder39 = n % 215\n\
    \        val remainder40 = n % 221\n        val remainder41 = n % 227\n      \
    \  val remainder42 = n % 233\n        val remainder43 = n % 239\n        val remainder44\
    \ = n % 245\n        val remainder45 = n % 251\n        val remainder46 = n %\
    \ 257\n        val remainder47 = n % 263\n        val remainder48 = n % 269\n\
    \        val remainder49 = n % 275\n        val remainder50 = n % 281\n      \
    \  val remainder51 = n % 287\n        val remainder52 = n % 293\n        val remainder53\
    \ = n % 299\n\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1qqmgjt4.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1qqmgjt4.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp1qqmgjt4.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp1qqmgjt4.scala:69:5 ---------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ListBuffer(1 to n)\n\
    \        val count = mutable.ListBuffer(0)\n        while(nums.nonEmpty) {\n \
    \           val num = nums.head\n            if(num % 11 == 0 || num % 13 == 0)\
    \ {\n                nums.remove(num)\n                count += num\n        \
    \    } else {\n                nums.remove(num)\n            }\n        }\n  \
    \      count.sum\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx7zipg41.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer(\e\
    [31m1\e[0m to n)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpx7zipg41.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.ListBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                nums += i\n            }\n        }\n        nums.foreach(i =>\
    \ count += nums.count(j => j == i))\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppur6kum2.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmppur6kum2.scala:14:23 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        for (i <- 1 to\
    \ n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count +=\
    \ 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvigjo6dv.scala:13:23\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap[Int, Int]()\n\
    \        val divisors = mutable.HashMap[Int, Int]()\n        val divisorsCount\
    \ = mutable.HashMap[Int, Int]()\n        val divisorsCount2 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount3 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount4 = mutable.HashMap[Int, Int]()\n        val divisorsCount5 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount6 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount7 = mutable.HashMap[Int, Int]()\n        val divisorsCount8 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount9 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount10 = mutable.HashMap[Int, Int]()\n        val divisorsCount11 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount12 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount13 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount14 = mutable.HashMap[Int, Int]()\n        val divisorsCount15 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount16 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount17 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount18 = mutable.HashMap[Int, Int]()\n        val divisorsCount19 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount20 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount21 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount22 = mutable.HashMap[Int, Int]()\n        val divisorsCount23 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount24 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount25 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount26 = mutable.HashMap[Int, Int]()\n        val divisorsCount27 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount28 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount29 = mutable.HashMap[Int, Int]()\n        val\
    \ divisors\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_z01s6mu.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_z01s6mu.scala:12:21\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mcounts\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_z01s6mu.scala:13:23 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.HashMap[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_z01s6mu.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdivisorsCount\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_z01s6mu.scala:15:29\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mdivisorsCount2\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_z01s6mu.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mdivisorsCount3\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    "
  stdout: ''
  timestamp: 1659804051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap.empty[Int,\
    \ Int]\n        for(i <- 1 to n){\n            val remainder = i % 11\n      \
    \      val isDivisibleBy11 = remainder == 0\n            val isDivisibleBy13 =\
    \ remainder == 1\n            if(isDivisibleBy11 || isDivisibleBy13){\n      \
    \          counts(i) = counts.getOrElse(i, 0) + 1\n            }\n        }\n\
    \        counts.values.sum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n   \
    \ assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n  \
    \  assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprk0jr89f.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprk0jr89f.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap[Int, Int]()\n\
    \        for (i <- 1 to n) {\n            val remainder = i % 11\n           \
    \ if (remainder == 0 || remainder == 13) {\n                counts.update(i.toInt,\
    \ counts.getOrElse(i, 0) + 1L)\n            }\n        }\n        counts.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp49arwazq.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp49arwazq.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap[Int, Long]()\n\
    \        for (i <- 1 to n) {\n            val remainder = i % 11\n           \
    \ if (remainder == 0 || remainder == 13) {\n                val count = counts.getOrElse(remainder,\
    \ 1)\n                counts.put(remainder, count + 1)\n            }\n      \
    \  }\n        counts.values.sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxc76wis3.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxc76wis3.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        for (i <- 1 to\
    \ n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count +=\
    \ 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvigjo6dv.scala:13:23\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Int]\n\
    \        for(i <- 1 to n){\n            val d = i % 11\n            val e = (i\
    \ % 13) + 1\n            if(d == 7 && e == 1) nums += i\n        }\n        nums.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqpv2fntb.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpqpv2fntb.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804060
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val count = mutable.HashMap.empty[Long,\
    \ Int]\n        for(i <- 1 to n) {\n            val remainder = i % 11\n     \
    \       val remainder2 = i % 13\n            if(remainder == 7 && remainder2 ==\
    \ 7) {\n                count(i) = 1\n            }\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0_09mdzu.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0_09mdzu.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804060
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap[Int, Int]()\n\
    \        for(i <- 1 to n) {\n            val div = i % 11\n            val dig\
    \ = i % 13\n            val count = counts.getOrElse(div, 0)\n            counts\
    \ += (div -> count + 1)\n            counts += (dig -> 1)\n        }\n       \
    \ counts.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl0p1w520.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl0p1w520.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ListBuffer(1 to n).filter(_\
    \ % 11 == 0 || _ % 13 == 0)\n        nums.count(_ % 7 == 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsrxbaem0.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer(\e\
    [31m1\e[0m to n).filter(_ % \e[31m11\e[0m == \e[31m0\e[0m || _ % \e[31m13\e[0m\
    \ == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        for (i <- 1 to\
    \ n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count +=\
    \ 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvigjo6dv.scala:13:23\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap[Int, Int]()\n\
    \        val divisors = mutable.HashSet[Int]()\n        divisors += 11\n     \
    \   divisors += 13\n        divisors += divisors.toList\n        divisors.foreach(divisor\
    \ => {\n            val divisorCount = math.ceil(n / divisor).toInt\n        \
    \    divisorCount match {\n                case 0 => return\n                case\
    \ 1 => counts += divisor -> 1\n                case _ => counts += divisor ->\
    \ divisorCount\n            }\n        })\n        counts.values.sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdas_6kl.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmphdas_6kl.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.HashSet[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659804056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val count = mutable.HashMap[Int, Int]()\n\
    \        for (i <- 1 to n) {\n            val div = i % 11\n            val mod\
    \ = i % 13\n            if (div == 0 || mod == 0) {\n                count.getOrElse(i,\
    \ 0)\n            } else {\n                count.getOrElse(i, 0) + fizzBuzz(i\
    \ - 1)\n            }\n        }\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3c50l_qa.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3c50l_qa.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Int]\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                nums += i\n            }\n        }\n        nums.count(7)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprxgkzfqo.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmprxgkzfqo.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val count = mutable.HashMap.empty[Long,\
    \ Int]\n        for (i <- 1 to n) {\n            val remainder = i % 11\n    \
    \        if (remainder == 0 || remainder == 13) {\n                val key = i\
    \ / 11\n                val value = count.get(key)\n                if (value\
    \ == null) count.put(key, 1)\n                else count.put(key, value + 1)\n\
    \            }\n        }\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpecaam4_k.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpecaam4_k.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        for (i <- 1 to\
    \ n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count +=\
    \ 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvigjo6dv.scala:13:23\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val count = mutable.HashMap[Int, Int]()\n\
    \        val digits = n.toString.reverse.grouped(3).map(_.toInt)\n        for\
    \ (i <- 0 until digits.length) {\n            val digit = digits(i)\n        \
    \    if (digit(0) != 7 && digit(0) != 11 && digit(0) != 13) {\n              \
    \  count(digit(0)) = count(digit(0)) + 1\n            }\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphl58kyhh.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmphl58kyhh.scala:15:24 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mdigit\e[0m = digits(i)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                    \e[33mvalue\e[0m \e[35mdigits\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Int]\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                nums += i\n            }\n        }\n        nums.count(_ ==\
    \ 7) / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptu3xkad2.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmptu3xkad2.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var nums = scala.collection.mutable.ListBuffer[Long]()\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                nums += i\n            }\n        }\n        for (i <- nums)\
    \ {\n            if (i % 7 == 0) {\n                count += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0q5htzv3.scala:14:23\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap.empty[Int,\
    \ Int]\n        for (i <- 1 to n) {\n            val remainder = n % i\n     \
    \       if (remainder == 0 || remainder == 11 || remainder == 13) {\n        \
    \        counts(i) = counts.getOrElse(i, 0) + 1\n            }\n        }\n  \
    \      counts.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpamswj2tk.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpamswj2tk.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val count = mutable.HashMap.empty[Long,\
    \ Long]\n        val digits = n.toString.reverse.grouped(3).map(_.toInt)\n   \
    \     for (i <- 0 until digits.size) {\n            val d = digits(i)\n      \
    \      if (d == 7 || d == 11 || d == 13) {\n                count(d) = count(d)\
    \ + 1\n            }\n        }\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2nja4eo3.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmp2nja4eo3.scala:15:20 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36md\e[0m = digits(i)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \            \e[33mvalue\e[0m \e[35mdigits\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap[Int, Int]()\n\
    \        for(i <- 1 to n) {\n            val digit = i % 10\n            if(digit\
    \ == 7 && counts.contains(digit)) {\n                counts(digit) += 1\n    \
    \        } else {\n                counts.put(digit, 1)\n            }\n     \
    \   }\n        counts.values.sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdb2s4xnd.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdb2s4xnd.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val count = mutable.HashMap.empty[Int,\
    \ Int]\n        for(i <- 1 to n) {\n            val div = i % 11\n           \
    \ if(div == 0 || div == 13) count.putIfAbsent(div, 0)\n            else count.put(div,\
    \ count.getOrElse(div, 0) + 1)\n        }\n        count.values.sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcv4mpa3z.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcv4mpa3z.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val fizzBuzz = mutable.Set[Long]()\n\
    \        for(i <- 1 to n){\n            if((i % 11) == 0 || (i % 13) == 0){\n\
    \                fizzBuzz += i\n            }\n        }\n        fizzBuzz.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph9yer34t.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfizzBuzz\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmph9yer34t.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Int]\n\
    \        for(i <- 1 to n) nums += i\n        val count = nums.count(i => i % 11\
    \ == 0 || i % 13 == 0)\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8igq96ri.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp8igq96ri.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) nums +=\
    \ i\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m      \
    \                Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 1 to n){\n            if((i % 11) == 0 || (i % 13) == 0){\n\
    \                nums += i\n            }\n        }\n        nums.count(_ % 7\
    \ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoguqrn46.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpoguqrn46.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap.empty[Int,\
    \ Int]\n        val divisors = mutable.HashSet.empty[Int]\n        for(i <- 1\
    \ to n) {\n            val remainder = i % 11\n            val divisor = remainder\
    \ % 13\n            if(divisors.contains(divisor)) {\n                counts(divisor)\
    \ += 1\n            } else {\n                divisors += divisor\n          \
    \      counts(divisor) = 1\n            }\n        }\n        counts.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3an83srd.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp3an83srd.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.HashSet.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp3an83srd.scala:14:22 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659804061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap[Int, Int]()\n\
    \        for(i <- 1 to n) {\n            val remainder = i % 11\n            val\
    \ isDivisibleBy11 = remainder == 0\n            val isDivisibleBy13 = remainder\
    \ == 1\n            val isDivisibleBy7 = remainder == 7\n            if(isDivisibleBy11\
    \ && isDivisibleBy13 && isDivisibleBy7) {\n                counts(i) += 1\n  \
    \          }\n        }\n        counts.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwvufcwu2.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwvufcwu2.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804060
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Int]\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                nums += i\n            }\n        }\n        nums.count(7)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprxgkzfqo.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmprxgkzfqo.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var isDivisibleBy11Or13\
    \ = false\n        var isDivisibleBy11Or13 = false\n        var isDivisibleBy11Or13\
    \ = false\n        var isDivisibleBy11Or13 = false\n        var isDivisibleBy11Or13\
    \ = false\n        var isDivisibleBy11Or13 = false\n        var isDivisibleBy11Or13\
    \ = false\n        var isDivisibleBy11Or13 = false\n        var isDivisibleBy11Or13\
    \ = false\n        var isDivisibleBy11Or13 = false\n        var isDivisibleBy11Or13\
    \ = false\n        var isDivisibleBy11Or13 = false\n        var isDivisibleBy11Or13\
    \ = false\n        var isDivisibleBy11Or13 = false\n        var isDivisibleBy11Or13\
    \ = false\n        var isDivisibleBy11Or13 = false\n        var isDivisibleBy11Or13\
    \ = false\n        var isDivisibleBy11Or13 = false\n        var isDivisibleBy11Or13\
    \ = false\n        var isDivisibleBy11Or13 = false\n        var isDivisibleBy11Or13\
    \ = false\n        var isDivisibleBy11Or13 = false\n        var isDivisibleBy11Or13\
    \ = false\n        var isDivisibleBy11Or13 = false\n        var isDivisibleBy11Or13\
    \ = false\n        var isDivisibleBy11Or13 = false\n        var isDivisibleBy11Or13\
    \ = false\n        var isDivisibleBy11Or13 = false\n        var isDivisibleBy11Or13\
    \ = false\n        var isDivisibleBy11Or13 = false\n        var isDivisibleBy11Or13\
    \ = false\n        var isDivisibleBy11Or13 = false\n        var isDivisibleBy11Or13\
    \ = false\n        var isDivisibleBy11Or13 = false\n        var isDivisibleBy11Or13\
    \ = false\n        var isDivisibleBy11Or13 = false\n        var isDivisibleBy11Or13\
    \ = false\n        var isDivisibleBy11Or13 = false\n        var isDivisibleBy11Or13\
    \ = false\n        var isDivisibleBy11Or13 = false\n        var isDivisibleBy11Or13\
    \ = false\n        var isDivisibleBy11Or13 = false\n        var isDivisibleBy11Or13\
    \ = false\n        var isDivisibleBy11Or13 = false\n        var isDivisibleBy11Or13\
    \ = false\n        var isDivisibleBy11Or13 = false\n        var isDivisibleBy11Or13\
    \ = false\n        var isDivisibleBy11Or13 = false\n        var isDivisibleBy11Or13\
    \ = false\n        var isDivisibleBy11Or13 = false\n        var isDivisibleBy11Or13\
    \ = false\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkyhmb_xf.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36misDivisibleBy11Or13\e[0m\
    \ = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misDivisibleBy11Or13 is already defined as \e[33mvariable\e\
    [0m \e[35misDivisibleBy11Or13\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkyhmb_xf.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36misDivisibleBy11Or13\e[0m\
    \ = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misDivisibleBy11Or13 is already defined as \e[33mvariable\e\
    [0m \e[35misDivisibleBy11Or13\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkyhmb_xf.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36misDivisibleBy11Or13\e[0m\
    \ = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misDivisibleBy11Or13 is already defined as \e[33mvariable\e\
    [0m \e[35misDivisibleBy11Or13\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkyhmb_xf.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36misDivisibleBy11Or13\e[0m\
    \ = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misDivisibleBy11Or13 is already defined as \e[33mvariable\e\
    [0m \e[35misDivisibleBy11Or13\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkyhmb_xf.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36misDivisibleBy11Or13\e[0m\
    \ = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m       "
  stdout: ''
  timestamp: 1659804061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 1 to n){\n            if(i % 11 == 0 || i % 13 == 0){\n    \
    \            nums += i\n            }\n        }\n        nums.count(_ % 7 ==\
    \ 0)\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxhk9kg_j.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpxhk9kg_j.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var remainder\
    \ = n\n        while(true){\n            val remainderMod11 = remainder % 11\n\
    \            val remainderMod13 = remainder % 13\n            if((remainderMod11\
    \ == 0 || remainderMod13 == 0) && remainder != 0){\n                count += 1\n\
    \            }\n            if((remainderMod11 == 0 || remainderMod13 == 0) &&\
    \ remainder == 0){\n                count += 1\n            }\n            if(remainder\
    \ == 0){\n                break\n            }\n            remainder = remainder\
    \ / 10\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp33th6p6e.scala:24:16 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659804064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ListBuffer(n)\n  \
    \      val count = mutable.ListBuffer[Long]()\n        while(nums.nonEmpty) {\n\
    \            val num = nums.head\n            if(num % 11 == 0 || num % 13 ==\
    \ 0) {\n                nums -= num\n                count += num\n          \
    \  }\n            else {\n                nums += num / 11\n                nums\
    \ += num / 13\n            }\n        }\n        count.length\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfhy0anp2.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpfhy0anp2.scala:13:20 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val count = mutable.ListBuffer.empty[Long]\n\
    \        for(i <- 1 to n){\n            val d = i % 11\n            val e = i\
    \ % 13\n            if(d != 0 && e != 0){\n                count += d\n      \
    \      }\n            if(e != 0){\n                count += e\n            }\n\
    \        }\n        count.length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_lr1qmw5.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp_lr1qmw5.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val count = mutable.Map.empty[Int, Int]\n\
    \        val divisors = mutable.Set.empty[Int]\n        val digits = mutable.Set.empty[Int]\n\
    \        val remainder = n % 10\n        val remainders = mutable.Set.empty[Int]\n\
    \        val digit = remainder / 10\n        val digits = mutable.Set.empty[Int]\n\
    \        val divisor = remainder % 10\n        divisors += divisor\n        digits\
    \ += digit\n        val divisorsSet = divisors.toSet\n        val digitsSet =\
    \ digits.toSet\n        val remaindersSet = remainders.toSet\n        val digitSet\
    \ = digits.toSet\n        val divisorsSet = divisors.toSet\n        val digitsSet\
    \ = digits.toSet\n        val remaindersSet = remainders.toSet\n        val digitSet\
    \ = digits.toSet\n        val divisorsSet = divisors.toSet\n        val digitsSet\
    \ = digits.toSet\n        val remaindersSet = remainders.toSet\n        val digitSet\
    \ = digits.toSet\n        val divisorsSet = divisors.toSet\n        val digitsSet\
    \ = digits.toSet\n        val remaindersSet = remainders.toSet\n        val digitSet\
    \ = digits.toSet\n        val divisorsSet = divisors.toSet\n        val digitsSet\
    \ = digits.toSet\n        val remaindersSet = remainders.toSet\n        val digitSet\
    \ = digits.toSet\n        val divisorsSet = divisors.toSet\n        val digitsSet\
    \ = digits.toSet\n        val remaindersSet = remainders.toSet\n        val digitSet\
    \ = digits.toSet\n        val divisorsSet = divisors.toSet\n        val digitsSet\
    \ = digits.toSet\n        val remaindersSet = remainders.toSet\n        val digitSet\
    \ = digits.toSet\n        val divisorsSet = divisors.toSet\n        val digitsSet\
    \ = digits.toSet\n        val remaindersSet = remainders.toSet\n        val digitSet\
    \ = digits.toSet\n        val divisorsSet = divisors.toSet\n        val digitsSet\
    \ = digits.toSet\n        val remaindersSet = remainders.toSet\n        val digitSet\
    \ = digits.toSet\n        val divisorsSet = divisors.toSet\n        val digitsSet\
    \ = digits.toSet\n        val remaindersSet = remainders.toSet\n        val digitSet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwg2hcful.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwg2hcful.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdigits\e[0m = mutable.Set.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdigits is already\
    \ defined as \e[33mvalue\e[0m \e[35mdigits\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwg2hcful.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdivisorsSet\e[0m = divisors.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdivisorsSet is already defined as \e[33mvalue\e[0m \e[35mdivisorsSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwg2hcful.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mdigitsSet\e[0m = digits.toSet\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdigitsSet\
    \ is already defined as \e[33mvalue\e[0m \e[35mdigitsSet\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwg2hcful.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mremaindersSet\e[0m = remainders.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremaindersSet is already defined as \e[33mvalue\e[0m \e[35mremaindersSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwg2hcful.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m"
  stdout: ''
  timestamp: 1659804069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var isDivisibleBy11Or13\
    \ = false\n        var isDivisibleBy7 = false\n        var isDivisibleBy3 = false\n\
    \        var isDivisibleBy5 = false\n        var isDivisibleBy1 = false\n    \
    \    var isDivisibleBy13 = false\n        var isDivisibleBy5 = false\n       \
    \ var isDivisibleBy3 = false\n        var isDivisibleBy1 = false\n        var\
    \ isDivisibleBy13 = false\n        var isDivisibleBy5 = false\n        var isDivisibleBy3\
    \ = false\n        var isDivisibleBy1 = false\n        var isDivisibleBy13 = false\n\
    \        var isDivisibleBy5 = false\n        var isDivisibleBy3 = false\n    \
    \    var isDivisibleBy1 = false\n        var isDivisibleBy13 = false\n       \
    \ var isDivisibleBy5 = false\n        var isDivisibleBy3 = false\n        var\
    \ isDivisibleBy1 = false\n        var isDivisibleBy13 = false\n        var isDivisibleBy5\
    \ = false\n        var isDivisibleBy3 = false\n        var isDivisibleBy1 = false\n\
    \        var isDivisibleBy13 = false\n        var isDivisibleBy5 = false\n   \
    \     var isDivisibleBy3 = false\n        var isDivisibleBy1 = false\n       \
    \ var isDivisibleBy13 = false\n        var isDivisibleBy5 = false\n        var\
    \ isDivisibleBy3 = false\n        var isDivisibleBy1 = false\n        var isDivisibleBy13\
    \ = false\n        var isDivisibleBy5 = false\n        var isDivisibleBy3 = false\n\
    \        var isDivisibleBy1 = false\n        var isDivisibleBy13 = false\n   \
    \     var isDivisibleBy5 = false\n        var isDivisibleBy3 = false\n       \
    \ var isDivisibleBy1 = false\n        var isDivisibleBy13 = false\n        var\
    \ isDivisibleBy5 = false\n        var isDivisibleBy3 = false\n        var isDivisibleBy1\
    \ = false\n        var isDivisibleBy13 = false\n        var isDivisibleBy5 = false\n\
    \        var isDivisibleBy3 = false\n        var isDivisibleBy1 = false\n    \
    \    var isDivisibleBy13 = false\n        var isDivisibleBy5 = false\n       \
    \ var isDivisibleBy3 = false\n        var isDivisibleBy1 = false\n        var\
    \ isDivisibleBy13 = false\n        var isDivisibleBy5 = false\n        var isDivisibleBy3\
    \ = false\n        var isDivisibleBy1 = false\n        var isDivisibleBy13 = false\n\
    \        var isDivisibleBy5 = false\n        var isDivisibleBy3 = false\n    \
    \    var isDivisibleBy1 = false\n        var isDivisibleBy13 = false\n       \
    \ var isDivisibleBy5 = false\n        var isDi\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi3umqoi0.scala:77:4 ----------------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi3umqoi0.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m\
    \ \e[36misDivisibleBy5\e[0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misDivisibleBy5 is already defined as \e[33mvariable\e[0m \e\
    [35misDivisibleBy5\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpi3umqoi0.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36misDivisibleBy3\e[0m = \e\
    [31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0misDivisibleBy3 is already defined as \e[33mvariable\e[0m \e[35misDivisibleBy3\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi3umqoi0.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mvar\e[0m \e[36misDivisibleBy1\e[0m = \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0misDivisibleBy1 is already defined as \e[33mvariable\e[0m \e[35misDivisibleBy1\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi3umqoi0.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mvar\e[0m \e[36misDivisibleBy13\e[0m = \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0misDivisibleBy13 is already defined as \e[33mvariable\e[0m \e[35misDivisibleBy13\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi3umqoi0.scala:23:12 --------------------------"
  stdout: ''
  timestamp: 1659804069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val fizzBuzz = mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to n) {\n            val remainder = i % 11\n            val\
    \ isFizz = (remainder == 0)\n            val isBuzz = (remainder == 6)\n     \
    \       if(isFizz && !isBuzz) fizzBuzz += i\n            if(!isFizz && !isBuzz)\
    \ fizzBuzz += i\n        }\n        fizzBuzz.count(_ == 7) \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkk0ysigi.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfizzBuzz\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpkk0ysigi.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val fizzBuzz = mutable.ListBuffer[Long]()\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                fizzBuzz += i\n            }\n        }\n        fizzBuzz.count(_\
    \ == 7)\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1ijm19ri.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfizzBuzz\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp1ijm19ri.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804070
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var remainder\
    \ = n\n        while (remainder > 0) {\n            if (remainder % 11 == 0 ||\
    \ remainder % 13 == 0) {\n                count += 1\n            }\n        \
    \    remainder = remainder / 10\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxbdbrva7.scala:24)\n\tat Problem.main(tmpxbdbrva7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659804072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap.empty[Int,\
    \ Int]\n        for(i <- 1 to n) {\n            val remainder = i % 11\n     \
    \       if(remainder == 0 || remainder == 13) {\n                val digit = i\
    \ % 10\n                if(counts.contains(digit)) {\n                    counts(digit)\
    \ += 1\n                } else {\n                    counts.put(digit, 1)\n \
    \               }\n            }\n        }\n        counts.values.sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn3vd4m47.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn3vd4m47.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Int]\n\
    \        for(i <- 1 to n){\n            if((i % 11) == 0 || i % 13 == 0){\n  \
    \              nums += i\n            }\n        }\n        nums.count(_ == 7)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpasktmgou.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpasktmgou.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Int]\n\
    \        for(i <- 1 to n){\n            if(i % 11 == 0 || i % 13 == 0){\n    \
    \            nums += i\n            }\n        }\n        nums.length\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjrga7qmm.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpjrga7qmm.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val digits = mutable.Set[Int]()\n   \
    \     val count = mutable.Map[Int, Int]()\n        for (i <- 1 to n) {\n     \
    \       digits += i % 10\n            count += i -> digits.count(_ == 7)\n   \
    \     }\n        count.values.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3pxr9kro.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp3pxr9kro.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3pxr9kro.scala:14:23 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659804072
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var remainder\
    \ = n\n        while(n != 0) {\n            val remainderMod11 = remainder % 11\n\
    \            val remainderMod13 = remainder % 13\n            if(remainderMod11\
    \ == 0 || remainderMod13 == 0) {\n                count += 1\n            }\n\
    \            remainder = remainder / 11\n        }\n        count\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n  \
    \  assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n  \
    \  assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659804076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val count = mutable.Map.empty[Long, Int]\n\
    \        val digits = mutable.Set[Int]()\n        val remainder = n % 10\n   \
    \     val remainderDigit = remainder / 10\n        val remainderDigits = remainderDigit.toString.toInt\n\
    \        val remainderRemainder = remainder % 10\n        val remainderRemainderDigit\
    \ = remainderRemainder / 10\n        val remainderRemainderDigits = remainderRemainderDigit.toString.toInt\n\
    \        val remainderRemainderRemainder = remainderRemainder % 10\n        val\
    \ remainderRemainderRemainderDigit = remainderRemainderRemainder / 10\n      \
    \  val remainderRemainderRemainderDigits = remainderRemainderRemainderDigit.toString.toInt\n\
    \        val remainderRemainderRemainderRemainder = remainderRemainderRemainder\
    \ % 10\n        val remainderRemainderRemainderRemainderDigit = remainderRemainderRemainderRemainder\
    \ / 10\n        val remainderRemainderRemainderRemainderDigits = remainderRemainderRemainderRemainderDigit.toString.toInt\n\
    \        val remainderRemainderRemainderRemainderRemainder = remainderRemainderRemainderRemainder\
    \ % 10\n        val remainderRemainderRemainderRemainderRemainderDigit = remainderRemainderRemainderRemainderRemainder\
    \ / 10\n        val remainderRemainderRemainderRemainderRemainderDigits = remainderRemainderRemainderRemainderRemainderDigit.toString.toInt\n\
    \        val remainderRemainderRemainderRemainderRemainderRemainder = remainderRemainderRemainderRemainderRemainder\
    \ % 10\n        val remainderRemainderRemainderRemainderRemainderRemainderDigit\
    \ = remainderRemainderRemainderRemainderRemainderRemainder / 10\n        val remainderRemainderRemainderRemainderRemainderRemainderDigits\
    \ = remainderRemainderRemainderRemainderRemainderRemainderDigit.toString.toInt\n\
    \        val remainderRemainderRemainderRemainderRemainderRemainderRemainder =\
    \ remainderRemainderRemainderRemainderRemainderRemainder % 10\n        val remainderRemainderRemainderRemainderRemainderRemainderRemainderDigit\
    \ = remainderRemainderRemainderRemainderRemainderRemainderRemainder / 10\n   \
    \     val remainderRemainderRemainderRemainderRemainderRemainderRemainderDigits\
    \ = remainderRemainderRemainderRemainderRemainderRemainderRemainderDigit.toString.toInt\n\
    \        val remainder\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2qobgg15.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2qobgg15.scala:12:20\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map.empty[\e[35mLong\e[0m, \e[35mInt\e[0m]\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp2qobgg15.scala:13:21 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mdigits\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp2qobgg15.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659804071
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Int]\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                nums += i\n            }\n        }\n        nums.count(_ ==\
    \ 7) / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptu3xkad2.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmptu3xkad2.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Int]\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                nums += i\n            }\n        }\n        nums.count(7)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprxgkzfqo.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmprxgkzfqo.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val count = mutable.Map[Int, Int]()\n\
    \        for(i <- 1 to n) {\n            val remainder = i % 11\n            val\
    \ isDivisibleBy11 = remainder == 0\n            val isDivisibleBy13 = remainder\
    \ == 1\n            if(isDivisibleBy11 || isDivisibleBy13) {\n               \
    \ val digit = i % 10\n                if(digit==7) {\n                    count(digit)\
    \ += 1\n                }\n            }\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpogi9i3n9.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpogi9i3n9.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804071
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                nums += i\n            }\n        }\n        nums.count(_ % 7\
    \ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxs03e4qw.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpxs03e4qw.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        for (i <- 1 to\
    \ n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count +=\
    \ 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvigjo6dv.scala:13:23\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var remainder\
    \ = n\n        while(remainder != 0) {\n            val remainder2 = remainder\
    \ % 11\n            val remainder3 = remainder % 13\n            if(remainder2\
    \ == 7 && remainder3 == 7) {\n                count += 1\n            }\n    \
    \        remainder = remainder / 10\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwwb9dt2a.scala:26)\n\tat Problem.main(tmpwwb9dt2a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659804072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap[Int, Int]()\n\
    \        for (i <- 1 to n) {\n            val remainder = i % 11\n           \
    \ val remainder2 = i % 13\n            if (remainder == 7 && remainder2 == 7)\
    \ {\n                counts(i) = counts.getOrElse(i, 0) + 1\n            }\n \
    \       }\n        counts.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnfo47j0n.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnfo47j0n.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 0 until n){\n            if((i % 11) == 0 || (i % 13) == 0){\n\
    \                nums += i\n            }\n        }\n        nums.count(_ % 7\
    \ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8tfmam8s.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp8tfmam8s.scala:13:25 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        for(i <- 1 to\
    \ n) {\n            val mod = i % 11\n            val mod2 = i % 13\n        \
    \    if(mod != 0 || mod2 != 0) {\n                count += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpggtn6h3h.scala:13:22\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ListBuffer(1 to n)\n\
    \        val count = mutable.ListBuffer(0)\n        val divisors = mutable.ListBuffer(11,\
    \ 13)\n        divisors.foreach { d =>\n            val divisor = nums.filter(_\
    \ % d == 0).length\n            count += divisor\n            nums -= divisor\n\
    \        }\n        count.sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpobvfzhtb.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer(\e\
    [31m1\e[0m to n)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpobvfzhtb.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.ListBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpobvfzhtb.scala:14:23 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.ListBuffer(\e\
    [31m11\e[0m, \e[31m13\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659804068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap.empty[Long,\
    \ Int]\n        for (i <- 1 to n) {\n            val remainder = i % 11\n    \
    \        if (remainder == 0 || remainder == 13) {\n                val digit =\
    \ i % 10\n                if (counts.contains(digit)) {\n                    counts(digit)\
    \ += 1\n                } else {\n                    counts.put(digit, 1)\n \
    \               }\n            }\n        }\n        counts.values.sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdwsht74g.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdwsht74g.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to n){\n            if(i % 11 == 0 || i % 13 == 0){\n    \
    \            nums += i\n            }\n        }\n        nums.count(_ == 7)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbob1uocy.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpbob1uocy.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val fizzBuzz = mutable.ListBuffer[Long]()\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                fizzBuzz += i\n            }\n        }\n        fizzBuzz.count(_\
    \ % 7 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzg35lc1q.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfizzBuzz\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpzg35lc1q.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.Map[Int, Int]()\n\
    \        for (i <- 1 to n) {\n            val div = i % 11\n            val fizz\
    \ = i % 13\n            if (div != 0 || fizz != 0) {\n                counts(div)\
    \ += 1\n                counts(fizz) += 1\n            }\n        }\n        counts.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi2dj5emu.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi2dj5emu.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 1 to n) {\n            val d = i % 11\n            if(d == 7\
    \ || d == 13) nums += i\n        }\n        nums.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpssj4odnt.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpssj4odnt.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap.empty[Int,\
    \ Int]\n        for (i <- 1 to n) {\n            val remainder = i % 11\n    \
    \        if (remainder == 0 || remainder == 13) {\n                val digit =\
    \ i % 10\n                if (counts.contains(digit)) {\n                    counts(digit)\
    \ += 1\n                } else {\n                    counts.put(digit, 1)\n \
    \               }\n            }\n        }\n        counts.values.sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg_d1iay9.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg_d1iay9.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap[Int, Int]()\n\
    \        for (i <- 1 to n) {\n            val remainder = i % 11\n           \
    \ if (remainder == 0 || remainder == 13) {\n                val digit = i % 10\n\
    \                if (counts.contains(digit)) {\n                    counts(digit)\
    \ += 1\n                } else {\n                    counts.put(digit, 1)\n \
    \               }\n            }\n        }\n        counts.values.sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdn313rek.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdn313rek.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804081
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        for (i <- 1 to\
    \ n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count +=\
    \ 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvigjo6dv.scala:13:23\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ListBuffer[Long]()\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                nums += i\n            }\n        }\n        nums.count(_ % 7\
    \ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwgqxvm2e.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpwgqxvm2e.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804080
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Int]\n\
    \        for (i <- 0 until n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                nums += i\n            }\n        }\n        nums.count(7)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkzmdhfk3.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpkzmdhfk3.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804080
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap[Int, Int]()\n\
    \        for (i <- 1 to n) {\n            val remainder = i % 11\n           \
    \ val remainder2 = i % 13\n            if (remainder == 7 && remainder2 == 7)\
    \ {\n                counts.putIfAbsent(i, 0)\n                counts(i) += 1\n\
    \            }\n        }\n        counts.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnrrsr9sr.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnrrsr9sr.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804080
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val count = mutable.Map[Int, Int]()\n\
    \        for(i <- 1 to n) {\n            val remainder = i % 11\n            val\
    \ remainder2 = i % 13\n            val count = count.getOrElse(remainder, 0)\n\
    \            val count2 = count.getOrElse(remainder2, 0)\n            count +=\
    \ count2\n        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpef4nelc7.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpef4nelc7.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804082
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 1 to n){\n            if(i % 11 == 0 || i % 13 == 0){\n    \
    \            nums += i\n            }\n        }\n        nums.count(_ % 7 ==\
    \ 0)\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxhk9kg_j.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpxhk9kg_j.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        for(i <- 1 to\
    \ n) {\n            val remainder = n % i\n            if(remainder == 0 || remainder\
    \ == 11 || remainder == 13) {\n                count += 1\n            }\n   \
    \     }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph097ffa4.scala:13:22\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap[Int, Int]()\n\
    \        val divisors = mutable.HashMap[Int, Int]()\n        val divisorsCount\
    \ = mutable.HashMap[Int, Int]()\n        val divisorsCount2 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount3 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount4 = mutable.HashMap[Int, Int]()\n        val divisorsCount5 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount6 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount7 = mutable.HashMap[Int, Int]()\n        val divisorsCount8 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount9 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount10 = mutable.HashMap[Int, Int]()\n        val divisorsCount11 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount12 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount13 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount14 = mutable.HashMap[Int, Int]()\n        val divisorsCount15 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount16 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount17 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount18 = mutable.HashMap[Int, Int]()\n        val divisorsCount19 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount20 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount21 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount22 = mutable.HashMap[Int, Int]()\n        val divisorsCount23 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount24 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount25 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount26 = mutable.HashMap[Int, Int]()\n        val divisorsCount27 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount28 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount29 = mutable.HashMap[Int, Int]()\n        val\
    \ divisors\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_z01s6mu.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_z01s6mu.scala:12:21\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mcounts\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_z01s6mu.scala:13:23 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.HashMap[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_z01s6mu.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdivisorsCount\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_z01s6mu.scala:15:29\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mdivisorsCount2\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_z01s6mu.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mdivisorsCount3\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    "
  stdout: ''
  timestamp: 1659804051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 1 to n){\n            if(i % 11 == 0 || i % 13 == 0){\n    \
    \            nums += i\n            }\n        }\n        nums.length\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx74oga_4.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpx74oga_4.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804082
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap.empty[Int,\
    \ Int]\n        for(i <- 1 to n) {\n            val remainder = i % 11\n     \
    \       if(remainder == 0 || remainder == 13) {\n                counts(remainder)\
    \ += 1\n            }\n        }\n        counts.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwdkg6v18.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwdkg6v18.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804082
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var remainder\
    \ = n\n        while (remainder > 0){\n            val remainderMod11 = remainder\
    \ % 11\n            val remainderMod13 = remainder % 13\n            if (remainderMod11\
    \ == 0 || remainderMod13 == 0) {\n                count += 1\n            }\n\
    \            remainder = remainder / 11\n        }\n        count\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n  \
    \  assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n  \
    \  assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm5zy8b9h.scala:26)\n\tat Problem.main(tmpm5zy8b9h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659804083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Int]\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                nums += i\n            }\n        }\n        nums.count(7)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprxgkzfqo.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmprxgkzfqo.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap[Int, Int]()\n\
    \        for(i <- 1 to n) {\n            val remainder = i % 11\n            val\
    \ isDivisibleBy11 = remainder == 0\n            val isDivisibleBy13 = remainder\
    \ == 1\n            val isDivisibleBy7 = i % 7 == 0\n            if(isDivisibleBy11\
    \ || isDivisibleBy13) {\n                counts(i) = counts.getOrElse(i, 0) +\
    \ 1\n            }\n            if(isDivisibleBy7) {\n                counts(i)\
    \ = counts.getOrElse(i, 0) + 1\n            }\n        }\n        counts.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmc1tod3q.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmc1tod3q.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap[Int, Int]()\n\
    \        for(i <- 1 to n){\n            val remainder = i % 11\n            val\
    \ isDivisibleBy11 = remainder == 0\n            val isDivisibleBy13 = remainder\
    \ == 1\n            if(isDivisibleBy11 || isDivisibleBy13){\n                counts(i.toInt)\
    \ += 1\n            }\n        }\n        counts.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz1dz88w5.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz1dz88w5.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804083
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var remainder\
    \ = n\n        while (remainder > 0) {\n            val remainderMod11 = remainder\
    \ % 11\n            val remainderMod13 = remainder % 13\n            if (remainderMod11\
    \ == 0 || remainderMod13 == 0) {\n                count += 1\n            }\n\
    \            remainder = remainder / 11\n        }\n        count\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n  \
    \  assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n  \
    \  assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpukhy_pcw.scala:26)\n\tat Problem.main(tmpukhy_pcw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659804083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val count = mutable.HashMap.empty[Long,\
    \ Int]\n        for(i <- 1 to n){\n            val remainder = i % 11\n      \
    \      if(remainder == 0 || remainder == 13){\n                val key = i\n \
    \               val value = count.get(key)\n                if(value == null){\n\
    \                    count.put(i, 1)\n                }else{\n               \
    \     count.put(i, value + 1)\n                }\n            }\n        }\n \
    \       count.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3a42l63d.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3a42l63d.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap[Int, Int]()\n\
    \        for (i <- 1 to n) {\n            val remainder = i % 11\n           \
    \ if (remainder == 0 || remainder == 13) {\n                counts.update(i.toInt,\
    \ counts.get (i.toInt) + 1)\n            }\n        }\n        counts.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp12sp63xz.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp12sp63xz.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap.empty[Int,\
    \ Int]\n        for(i <- 1 to n) {\n            val digit = i % 10\n         \
    \   if(digit == 7) {\n                counts(digit) += 1\n            }\n    \
    \    }\n        counts.values.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk0iw2o8y.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk0iw2o8y.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap[Int, Int]()\n\
    \        for (i <- 1 to n) {\n            val remainder = i % 11\n           \
    \ val isFizz = (remainder == 0)\n            val isBuzz = (remainder == 6)\n \
    \           if (isFizz && isBuzz) {\n                counts.update(i.toInt, 1)\n\
    \            }\n        }\n        counts.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpygwsq3hl.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpygwsq3hl.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap[Int, Int]()\n\
    \        val divisors = mutable.HashMap[Int, Int]()\n        val divisorsCount\
    \ = mutable.HashMap[Int, Int]()\n        val divisorsCount2 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount3 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount4 = mutable.HashMap[Int, Int]()\n        val divisorsCount5 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount6 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount7 = mutable.HashMap[Int, Int]()\n        val divisorsCount8 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount9 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount10 = mutable.HashMap[Int, Int]()\n        val divisorsCount11 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount12 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount13 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount14 = mutable.HashMap[Int, Int]()\n        val divisorsCount15 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount16 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount17 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount18 = mutable.HashMap[Int, Int]()\n        val divisorsCount19 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount20 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount21 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount22 = mutable.HashMap[Int, Int]()\n        val divisorsCount23 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount24 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount25 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount26 = mutable.HashMap[Int, Int]()\n        val divisorsCount27 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount28 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount29 = mutable.HashMap[Int, Int]()\n        val\
    \ divisors\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_z01s6mu.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_z01s6mu.scala:12:21\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mcounts\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_z01s6mu.scala:13:23 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.HashMap[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_z01s6mu.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdivisorsCount\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_z01s6mu.scala:15:29\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mdivisorsCount2\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_z01s6mu.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mdivisorsCount3\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    "
  stdout: ''
  timestamp: 1659804051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val result = mutable.ArrayBuffer.empty[Long]\n\
    \        val divisors = mutable.ArrayBuffer.empty[Long]\n        divisors += 11\n\
    \        divisors += 13\n        divisors += 17\n        divisors += 19\n    \
    \    divisors += 23\n        divisors += 29\n        divisors += 31\n        divisors\
    \ += 37\n        divisors += 41\n        divisors += 43\n        divisors += 47\n\
    \        divisors += 53\n        divisors += 59\n        divisors += 61\n    \
    \    divisors += 67\n        divisors += 71\n        divisors += 73\n        divisors\
    \ += 79\n        divisors += 83\n        divisors += 89\n        divisors += 97\n\
    \        divisors += 101\n        divisors += 107\n        divisors += 109\n \
    \       divisors += 113\n        divisors += 127\n        divisors += 131\n  \
    \      divisors += 137\n        divisors += 139\n        divisors += 147\n   \
    \     divisors += 151\n        divisors += 157\n        divisors += 163\n    \
    \    divisors += 167\n        divisors += 173\n        divisors += 179\n     \
    \   divisors += 181\n        divisors += 191\n        divisors += 197\n      \
    \  divisors += 199\n        divisors += 211\n        divisors += 223\n       \
    \ divisors += 227\n        divisors += 229\n        divisors += 233\n        divisors\
    \ += 239\n        divisors += 241\n        divisors += 243\n        divisors +=\
    \ 247\n        divisors += 251\n        divisors += 255\n        divisors += 257\n\
    \        divisors += 259\n        divisors += 263\n        divisors += 269\n \
    \       divisors += 271\n        divisors += 277\n        divisors += 281\n  \
    \      divisors += 283\n        divisors += 293\n        divisors += 307\n   \
    \     divisors += 311\n        divisors += 313\n        divisors += 317\n    \
    \    divisors += 323\n        divisors += 329\n        divisors += 331\n     \
    \   divisors += 337\n        divisors += 343\n        divisors += 349\n      \
    \  divisors += 351\n        divisors += 359\n        divisors += 363\n       \
    \ divisors += 369\n        divisors += 373\n        divisors += 379\n        divisors\
    \ += 383\n        divisors += 389\n        divisors += 393\n        divisors +=\
    \ 397\n        divisors += 401\n        divisors += 407\n        divisors += 411\n\
    \        divisors += 413\n        divisors += 417\n        divisors += 423\n \
    \       divisors += 429\n        divisors += 433\n        divisors += 439\n  \
    \      divisors += 443\n        divisors += 449\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkn14hyy5.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpkn14hyy5.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659804081
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap[Int, Int]()\n\
    \        val divisors = mutable.HashMap[Int, Int]()\n        val divisorsCount\
    \ = mutable.HashMap[Int, Int]()\n        val divisorsCount2 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount3 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount4 = mutable.HashMap[Int, Int]()\n        val divisorsCount5 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount6 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount7 = mutable.HashMap[Int, Int]()\n        val divisorsCount8 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount9 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount10 = mutable.HashMap[Int, Int]()\n        val divisorsCount11 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount12 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount13 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount14 = mutable.HashMap[Int, Int]()\n        val divisorsCount15 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount16 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount17 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount18 = mutable.HashMap[Int, Int]()\n        val divisorsCount19 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount20 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount21 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount22 = mutable.HashMap[Int, Int]()\n        val divisorsCount23 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount24 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount25 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount26 = mutable.HashMap[Int, Int]()\n        val divisorsCount27 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount28 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount29 = mutable.HashMap[Int, Int]()\n        val\
    \ divisors\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_z01s6mu.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_z01s6mu.scala:12:21\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mcounts\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_z01s6mu.scala:13:23 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.HashMap[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_z01s6mu.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdivisorsCount\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_z01s6mu.scala:15:29\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mdivisorsCount2\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_z01s6mu.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mdivisorsCount3\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    "
  stdout: ''
  timestamp: 1659804051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val digits = mutable.ListBuffer(7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n   \
    \ assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n  \
    \  assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw53qhdr6.scala:13:4 ----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw53qhdr6.scala:12:21\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mdigits\e[0m = mutable.ListBuffer(\e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m,\
    \ \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e\
    [0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e\
    [31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e\
    [0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e\
    [31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e\
    [0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e\
    [31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e\
    [0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e\
    [31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e\
    [0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e\
    [31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e\
    [0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e\
    [31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e\
    [0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e\
    [31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e\
    [0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e\
    [31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e\
    [0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e\
    [31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e\
    [0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e\
    [31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e\
    [0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e\
    [31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e\
    [0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e\
    [31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e[0m, \e[31m7\e"
  stdout: ''
  timestamp: 1659804084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap[Int, Int]()\n\
    \        for(i <- 1 to n){\n            val remainder = i % 11\n            val\
    \ isDivisibleBy11 = remainder == 0\n            val isDivisibleBy13 = remainder\
    \ == 1\n            if(isDivisibleBy11 || isDivisibleBy13){\n                counts(i)\
    \ = 1\n            }\n        }\n        counts.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplbjlh6s2.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplbjlh6s2.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ListBuffer(1 to n)\n\
    \        val numsStr = nums.map(_.toString).mkString(\",\")\n        val numsStrLen\
    \ = numsStr.length\n        val numsStrLenLen = numsStrLen.length\n        val\
    \ numsStrLenLenLen = numsStrLenLen.length\n        val numsStrLenLenLenLen = numsStrLenLenLen.length\n\
    \        val numsStrLenLenLenLenLen = numsStrLenLenLenLen.length\n        val\
    \ numsStrLenLenLenLenLenLen = numsStrLenLenLenLenLen.length\n        val numsStrLenLenLenLenLenLenLen\
    \ = numsStrLenLenLenLenLenLen.length\n        val numsStrLenLenLenLenLenLenLenLen\
    \ = numsStrLenLenLenLenLenLenLenLen.length\n        val numsStrLenLenLenLenLenLenLenLenLen\
    \ = numsStrLenLenLenLenLenLenLenLenLenLen.length\n        val numsStrLenLenLenLenLenLenLenLenLenLenLen\
    \ = numsStrLenLenLenLenLenLenLenLenLenLenLen.length\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = numsStrLenLenLenLenLenLenLenLenLenLenLenLen.length\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = numsStrLenLenLenLenLenLenLenLenLenLenLenLenLenLen.length\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = numsStrLenLenLenLenLenLenLenLenLenLenLenLenLenLen.length\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = numsStrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen.length\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = numsStrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen.length\n        val\
    \ numsStrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen = numsStrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen.length\n\
    \        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen = numsStrLenLenLenLenLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjuu5u3dy.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnumsStrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = numsStrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpjuu5u3dy.scala:12:19 ------------------------\e[0m\e[0m\n\
    \e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer(\e\
    [31m1\e[0m to n)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpjuu5u3dy.scala:21:46 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsStrLenLenLenLenLenLenLenLen\e\
    [0m = numsStrLenLenLenLenLenLenLenLen.length\n\e[31m\e[31m   |\e[0m          \
    \                                    ^\e[0m\n\e[31m   |\e[0m              Recursive\
    \ \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLen\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjuu5u3dy.scala:22:49 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsStrLenLenLenLenLenLenLenLenLen\e\
    [0m = numsStrLenLenLenLenLenLenLenLenLenLen.length\n\e[31m\e[31m   |\e[0m    \
    \                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Not found: numsStrLenLenLenLenLenLenLenLenLenLen\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-expla"
  stdout: ''
  timestamp: 1659804086
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap.empty[Long,\
    \ Int]\n        for (i <- 1 to n) {\n            val remainder = i % 11\n    \
    \        if (remainder == 0 || remainder == 13) counts.put(i, 1)\n           \
    \ else counts.put(i, counts.getOrElse(i, 0) + 1)\n        }\n        counts.filter(_._2\
    \ == 1).length\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmbp2oml6.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmbp2oml6.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804087
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Int]\n\
    \        for(i <- 0 until n){\n            if((i %% 11) == 0 || (i %% 13) == 0){\n\
    \                nums += i\n            }\n        }\n        nums.count(x =>\
    \ x == 7)\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpag_lrwgo.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpag_lrwgo.scala:13:25 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpag_lrwgo.scala:14:18\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m((i\
    \ %% \e[31m11\e[0m) == \e[31m0\e[0m || (i %% \e[31m13\e[0m) == \e[31m0\e[0m){\n\
    \e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m              \
    \  value %% is not a member of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1659804088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val count = mutable.HashMap[Int, Int]()\n\
    \        for(i <- 1 to n) {\n            val remainder = i % 11\n            val\
    \ isDivisibleBy11 = remainder == 0\n            val isDivisibleBy13 = remainder\
    \ == 1\n            val isDivisibleBy7 = i % 7 == 0\n            if(isDivisibleBy11\
    \ || isDivisibleBy13) {\n                count.putIfAbsent(7, 0)\n           \
    \     count(7) += 1\n            }\n            if(isDivisibleBy7) {\n       \
    \         count.putIfAbsent(7, 0)\n                count(7) += 1\n           \
    \ }\n        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpklcqcs5r.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpklcqcs5r.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap[Int, Int]()\n\
    \        for (i <- 1 to n) {\n            val d = i % 11\n            if (d ==\
    \ 7 || d == 13) counts.put(i, 1)\n            else counts.put(i, counts.getOrElse(i,\
    \ 0) + 1)\n        }\n        counts.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpczm3fx8v.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpczm3fx8v.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val count = mutable.Map[Int, Int]()\n\
    \        val digits = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ divisors = scala.collection.mutable.ListBuffer[Int]()\n        val divisor =\
    \ scala.collection.mutable.ListBuffer[Int]()\n        val divisors = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val divisor = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ divisors = scala.collection.mutable.ListBuffer[Int]()\n        val divisor =\
    \ scala.collection.mutable.ListBuffer[Int]()\n        val divisors = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val divisor = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ divisors = scala.collection.mutable.ListBuffer[Int]()\n        val divisor =\
    \ scala.collection.mutable.ListBuffer[Int]()\n        val divisors = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val divisor = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ divisors = scala.collection.mutable.ListBuffer[Int]()\n        val divisor =\
    \ scala.collection.mutable.ListBuffer[Int]()\n        val divisors = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val divisor = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ divisors = scala.collection.mutable.ListBuffer[Int]()\n        val divisor =\
    \ scala.collection.mutable.ListBuffer[Int]()\n        val divisors = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val divisor = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ divisors = scala.collection.mutable.ListBuffer[Int]()\n        val divisor =\
    \ scala.collection.mutable.ListBuffer[Int]()\n        val divisors = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val divisor = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ divisors = scala.collection.mutable.ListBuffer[Int]()\n        val divisor =\
    \ scala.collection.mutable.ListBuffer[Int]()\n        val divisors = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val divisor = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ divisors = scala.collection.mutable.ListBuffer[Int]()\n        val divisor =\
    \ scala.collection.mutable.ListBuffer[Int]()\n        val divisors = \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoc1yaokp.scala:44:22 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = \n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpoc1yaokp.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdivisors is already defined as \e[33mvalue\e[0m \e[35mdivisors\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoc1yaokp.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mdivisor\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdivisor is already defined as \e[33mvalue\e[0m \e[35mdivisor\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoc1yaokp.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdivisors is already defined as \e[33mvalue\e[0m \e[35mdivisors\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoc1yaokp.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mdivisor\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659804092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap[Int, Int]()\n\
    \        val divisors = mutable.HashMap[Int, Int]()\n        val divisorsCount\
    \ = mutable.HashMap[Int, Int]()\n        val divisorsCount2 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount3 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount4 = mutable.HashMap[Int, Int]()\n        val divisorsCount5 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount6 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount7 = mutable.HashMap[Int, Int]()\n        val divisorsCount8 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount9 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount10 = mutable.HashMap[Int, Int]()\n        val divisorsCount11 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount12 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount13 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount14 = mutable.HashMap[Int, Int]()\n        val divisorsCount15 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount16 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount17 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount18 = mutable.HashMap[Int, Int]()\n        val divisorsCount19 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount20 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount21 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount22 = mutable.HashMap[Int, Int]()\n        val divisorsCount23 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount24 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount25 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount26 = mutable.HashMap[Int, Int]()\n        val divisorsCount27 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount28 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount29 = mutable.HashMap[Int, Int]()\n        val\
    \ divisors\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_z01s6mu.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_z01s6mu.scala:12:21\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mcounts\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_z01s6mu.scala:13:23 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.HashMap[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_z01s6mu.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdivisorsCount\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_z01s6mu.scala:15:29\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mdivisorsCount2\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_z01s6mu.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mdivisorsCount3\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    "
  stdout: ''
  timestamp: 1659804051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Int]\n\
    \        for(i <- 1 to n) {\n            if(i % 11 == 0 || i % 13 == 0) {\n  \
    \              nums += i\n            }\n        }\n        nums.count(_ == 7)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6fu_ece1.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp6fu_ece1.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisors = mutable.HashSet.empty[Long]\n        val divisorsCount\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount2 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount3 = mutable.HashMap.empty[Long, Int]\n      \
    \  val divisorsCount4 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount5\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount6 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount7 = mutable.HashMap.empty[Long, Int]\n      \
    \  val divisorsCount8 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount9\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount10 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount11 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount12 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount13\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount14 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount15 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount16 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount17\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount18 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount19 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount20 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount21\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount22 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount23 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount24 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount25\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount26 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount27 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount28 = mutable.HashMap.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp316xnn0x.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp316xnn0x.scala:12:21 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e[35mLong\e\
    [0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp316xnn0x.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.HashSet.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp316xnn0x.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdivisorsCount\e[0m = mutable.HashMap.empty[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                        \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp316xnn0x.scala:15:29\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mdivisorsCount2\e[0m = mutable.HashMap.empty[\e[35mLong\e[0m, \e[35mInt\e[0m]\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp316xnn0x.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mdivisorsCount3\e[0m = mutable.HashMap.empty[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m      "
  stdout: ''
  timestamp: 1659804092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap[Int, Long]()\n\
    \        val divisors = mutable.HashMap[Int, Long]()\n        val divisorsCount\
    \ = mutable.HashMap[Int, Long]()\n        val divisorsCount2 = mutable.HashMap[Int,\
    \ Long]()\n        val divisorsCount3 = mutable.HashMap[Int, Long]()\n       \
    \ val divisorsCount4 = mutable.HashMap[Int, Long]()\n        val divisorsCount5\
    \ = mutable.HashMap[Int, Long]()\n        val divisorsCount6 = mutable.HashMap[Int,\
    \ Long]()\n        val divisorsCount7 = mutable.HashMap[Int, Long]()\n       \
    \ val divisorsCount8 = mutable.HashMap[Int, Long]()\n        val divisorsCount9\
    \ = mutable.HashMap[Int, Long]()\n        val divisorsCount10 = mutable.HashMap[Int,\
    \ Long]()\n        val divisorsCount11 = mutable.HashMap[Int, Long]()\n      \
    \  val divisorsCount12 = mutable.HashMap[Int, Long]()\n        val divisorsCount13\
    \ = mutable.HashMap[Int, Long]()\n        val divisorsCount14 = mutable.HashMap[Int,\
    \ Long]()\n        val divisorsCount15 = mutable.HashMap[Int, Long]()\n      \
    \  val divisorsCount16 = mutable.HashMap[Int, Long]()\n        val divisorsCount17\
    \ = mutable.HashMap[Int, Long]()\n        val divisorsCount18 = mutable.HashMap[Int,\
    \ Long]()\n        val divisorsCount19 = mutable.HashMap[Int, Long]()\n      \
    \  val divisorsCount20 = mutable.HashMap[Int, Long]()\n        val divisorsCount21\
    \ = mutable.HashMap[Int, Long]()\n        val divisorsCount22 = mutable.HashMap[Int,\
    \ Long]()\n        val divisorsCount23 = mutable.HashMap[Int, Long]()\n      \
    \  val divisorsCount24 = mutable.HashMap[Int, Long]()\n        val divisorsCount25\
    \ = mutable.HashMap[Int, Long]()\n        val divisorsCount26 = mutable.HashMap[Int,\
    \ Long]()\n        val divisorsCount27 = mutable.HashMap[Int, Long]()\n      \
    \  val divisorsCount28 = mutable.HashMap[Int, Long]()\n        val divisorsCount29\
    \ = mutable.HashMap[Int, Long]()\n        val divisors\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7g34fp56.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7g34fp56.scala:12:21\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mcounts\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7g34fp56.scala:13:23 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.HashMap[\e[35mInt\e[0m,\
    \ \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7g34fp56.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdivisorsCount\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7g34fp56.scala:15:29\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mdivisorsCount2\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7g34fp56.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mdivisorsCount3\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      "
  stdout: ''
  timestamp: 1659804093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap.empty[Int,\
    \ Int]\n        for (i <- 1 to n) {\n            val digit = i % 10\n        \
    \    if (digit == 7) {\n                counts.put(digit, 1)\n            } else\
    \ {\n                val count = counts.getOrElse(digit, 0)\n                counts.put(digit,\
    \ count + 1)\n            }\n        }\n        counts.values.sum\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n  \
    \  assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n  \
    \  assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj7q170mw.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj7q170mw.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val fizzBuzz = mutable.ListBuffer[String]()\n\
    \        for(i <- 1 to n){\n            val remainder = i % 11\n            if(remainder\
    \ == 0 || remainder == 13){\n                fizzBuzz += i.toString\n        \
    \    }\n        }\n        fizzBuzz.count(i => i == \"7\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyslxf09d.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfizzBuzz\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyslxf09d.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Int]\n\
    \        for(i <- 1 to n){\n            if((i % 11) == 0 || (i % 13) == 0){\n\
    \                nums += i\n            }\n        }\n        nums.count(_ ==\
    \ 7)\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu7cjss5f.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpu7cjss5f.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804094
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap.empty[Int,\
    \ Int]\n        for (i <- 1 to n) {\n            val remainder = i % 11\n    \
    \        if (remainder == 0 || remainder == 13) {\n                counts.putIfAbsent(remainder,\
    \ 0)\n                counts.get(remainder) += 1\n            }\n        }\n \
    \       counts.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9xh_09f_.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9xh_09f_.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804094
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        for (i <- 1 to\
    \ n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count +=\
    \ 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvigjo6dv.scala:13:23\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap[Int, Int]()\n\
    \        for(i <- 1 to n) {\n            val remainder = i % 11\n            val\
    \ isDivisibleBy11 = remainder == 0\n            val isDivisibleBy13 = remainder\
    \ == 1\n            if(isDivisibleBy11 || isDivisibleBy13) {\n               \
    \ counts.put(i, counts.get (i) + 1)\n            }\n        }\n        counts.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuicifm3d.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuicifm3d.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var remainder\
    \ = n % 11\n        while (remainder != 0 || remainder != 13) {\n            count\
    \ += 1\n            remainder = n % 11\n            n = n / 11\n        }\n  \
    \      count\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpgq6d178t.scala:17:14 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            n = n / \e[31m11\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val count = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisors = mutable.HashSet.empty[Long]\n        for(i <- 1\
    \ to n) {\n            val remainder = i % 11\n            val divisor = if (remainder\
    \ == 0) 11\n            else 13\n            divisors += divisor\n           \
    \ val digit = i % divisor\n            val count = count.get(digit) match {\n\
    \                case None => 1\n                case Some(count) => count + 1\n\
    \            }\n            count match {\n                case 0 => count.toLong\n\
    \                case _ => count.toLong + 1\n            }\n        }\n      \
    \  divisors.toList.max\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9pnx7n07.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9pnx7n07.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.HashSet.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp9pnx7n07.scala:14:22 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9pnx7n07.scala:20:24\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e\
    [0m \e[36mcount\e[0m = count.get(digit) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e\
    [0m                        ^\e[0m\n\e[31m   |\e[0m                        Recursive\
    \ \e[33mvalue\e[0m \e[35mcount\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp9pnx7n07.scala:22:36 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mcase\e[0m Some(count) => count\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                    ^\e\
    [0m\n\e[31m   |\e[0m                                    Recursive \e[33mvalue\e\
    [0m \e[35mcount\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659804095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        for(i <- 1 to\
    \ n){\n            if((i % 11) == 0 || (i % 13) == 0){\n                count\
    \ += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdx3wdg15.scala:13:22\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val fizzBuzz = mutable.ListBuffer[Long]()\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                fizzBuzz += i\n            }\n        }\n        fizzBuzz.count(_\
    \ % 7 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzg35lc1q.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfizzBuzz\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpzg35lc1q.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var digits = mutable.ArrayBuffer(7,\
    \ 11)\n        var remainder = n\n        while (remainder > 0) {\n          \
    \  val remainderDigit = remainder % 10\n            if (remainderDigit == 7) {\n\
    \                count += 1\n            }\n            if (remainderDigit ==\
    \ 11) {\n                digits = digits.reverse\n            }\n            if\
    \ (remainderDigit == 13) {\n                digits = digits.reverse\n        \
    \    }\n            remainder = remainder / 10\n        }\n        digits.reverse.foldLeft(0)((acc,\
    \ digit) => acc * 10 + digit)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe0256oy6.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36mdigits\e[0m = mutable.ArrayBuffer(\e\
    [31m7\e[0m, \e[31m11\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659804091
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var remainder\
    \ = n\n        while (remainder > 0) {\n            val remainder2 = remainder\
    \ % 11\n            val remainder3 = remainder % 13\n            if (remainder2\
    \ == 7 && remainder3 == 7) {\n                count += 1\n            }\n    \
    \        remainder = remainder / 11\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy3dxbnde.scala:26)\n\tat Problem.main(tmpy3dxbnde.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659804094
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap[Int, Long]()\n\
    \        val digits = n.toString.reverse.grouped(3).map(_.toInt)\n        digits.foreach{\
    \ case (digit, count) =>\n            if (digit == 7)\n                counts.put(digit,\
    \ counts.getOrElse(digit, 0L) + 1)\n        }\n        counts.values.sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp__4pchwh.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659804092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val count = mutable.HashMap[Int, Int]()\n\
    \        val digits = n.toString.reverse.grouped(3).map(_.toInt)\n        digits.foreach\
    \ { digit =>\n            val key = digit % 11\n            val value = digit\
    \ % 13\n            if (value != 0) {\n                count.get(key) match {\n\
    \                    case Some(count) => count.get += 1\n                    case\
    \ None => count.put(key, 1)\n                }\n            }\n        }\n   \
    \     count.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8e1j7mon.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659804092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap.empty[Int,\
    \ Int]\n        val divisors = mutable.HashSet.empty[Int]\n        divisors +=\
    \ 11\n        divisors += 13\n        val remainder = n % 10\n        val remainders\
    \ = mutable.HashSet.empty[Int]\n        remainders += remainder\n        val remaindersCount\
    \ = remainders.count(_ == remainder)\n        val remaindersCounts = remainders.count(_\
    \ == remainder)\n        val remaindersCounts = remainders.count(_ == remainder)\n\
    \        val remaindersCounts = remainders.count(_ == remainder)\n        val\
    \ remaindersCounts = remainders.count(_ == remainder)\n        val remaindersCounts\
    \ = remainders.count(_ == remainder)\n        val remaindersCounts = remainders.count(_\
    \ == remainder)\n        val remaindersCounts = remainders.count(_ == remainder)\n\
    \        val remaindersCounts = remainders.count(_ == remainder)\n        val\
    \ remaindersCounts = remainders.count(_ == remainder)\n        val remaindersCounts\
    \ = remainders.count(_ == remainder)\n        val remaindersCounts = remainders.count(_\
    \ == remainder)\n        val remaindersCounts = remainders.count(_ == remainder)\n\
    \        val remaindersCounts = remainders.count(_ == remainder)\n        val\
    \ remaindersCounts = remainders.count(_ == remainder)\n        val remaindersCounts\
    \ = remainders.count(_ == remainder)\n        val remaindersCounts = remainders.count(_\
    \ == remainder)\n        val remaindersCounts = remainders.count(_ == remainder)\n\
    \        val remaindersCounts = remainders.count(_ == remainder)\n        val\
    \ remaindersCounts = remainders.count(_ == remainder)\n        val remaindersCounts\
    \ = remainders.count(_ == remainder)\n        val remaindersCounts = remainders.count(_\
    \ == remainder)\n        val remaindersCounts = remainders.count(_ == remainder)\n\
    \        val remaindersCounts = remainders.count(_ == remainder)\n        val\
    \ remaindersCounts = remainders.count(_ == remainder)\n        val remaindersCounts\
    \ = remainders.count(_ == remainder)\n        val remainders\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7wmubhfe.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7wmubhfe.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mremaindersCounts\e[0m = remainders.count(_ == remainder)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mremaindersCounts is already defined as \e[33mvalue\e[0m \e[35mremaindersCounts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7wmubhfe.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mremaindersCounts\e[0m = remainders.count(_\
    \ == remainder)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremaindersCounts is already defined as \e[33mvalue\e[0m \e\
    [35mremaindersCounts\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp7wmubhfe.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mremaindersCounts\e[0m =\
    \ remainders.count(_ == remainder)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremaindersCounts is already defined as \e[33mvalue\e[0m \e\
    [35mremaindersCounts\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp7wmubhfe.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mremaindersCounts\e[0m =\
    \ remainders.count(_ == remainder)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremaindersCounts is already defined as \e[33mvalue\e[0m \e\
    [35mremaindersCounts\e[0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1659804096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                nums += i\n            }\n        }\n        nums.count(_ % 7\
    \ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxs03e4qw.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpxs03e4qw.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val count = mutable.HashMap.empty[Int,\
    \ Int]\n        for (i <- 1 to n) {\n            val remainder = i % 11\n    \
    \        val remainder2 = i % 13\n            if (remainder == 7 && remainder2\
    \ == 7) {\n                count(i) = 1\n            } else if (remainder == 7\
    \ && remainder2 != 7) {\n                count(i) = count(i) + 1\n           \
    \ } else if (remainder != 7 && remainder2 == 7) {\n                count(i) =\
    \ count(i) + 1\n            }\n        }\n        count.values.sum\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n \
    \   assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n \
    \   assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp57b08fnw.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp57b08fnw.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val fizzBuzz = mutable.ListBuffer[Long]()\n\
    \        val divisors = mutable.ListBuffer[Long]()\n        val divisorsCount\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount2 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount3 = mutable.ListBuffer[Long]()\n        val divisorsCount4\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount5 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount6 = mutable.ListBuffer[Long]()\n        val divisorsCount7\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount8 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount9 = mutable.ListBuffer[Long]()\n        val divisorsCount10\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount11 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount12 = mutable.ListBuffer[Long]()\n        val divisorsCount13\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount14 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount15 = mutable.ListBuffer[Long]()\n        val divisorsCount16\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount17 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount18 = mutable.ListBuffer[Long]()\n        val divisorsCount19\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount20 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount21 = mutable.ListBuffer[Long]()\n        val divisorsCount22\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount23 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount24 = mutable.ListBuffer[Long]()\n        val divisorsCount25\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount26 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount27 = mutable.ListBuffer[Long]()\n        val divisorsCount28\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount29 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount30 = mutable.ListBuffer[Long]()\n        val divisorsCount31\
    \ = mutable.ListBuffer[Long]()\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr35tvhd6.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfizzBuzz\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpr35tvhd6.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpr35tvhd6.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdivisorsCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr35tvhd6.scala:15:29 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdivisorsCount2\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr35tvhd6.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mdivisorsCount3\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr35tvhd6.scala:17:29 ------"
  stdout: ''
  timestamp: 1659804097
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.Map[Int, Int]()\n\
    \        val divisors = mutable.Set[Int]()\n        for (i <- 1 to n) {\n    \
    \        val d = i % 11\n            if (d == 0 || d == 7) {\n               \
    \ counts(d) = counts(d) + 1\n            }\n            divisors += d\n      \
    \  }\n        divisors.toList.foldLeft(0)((acc, d) => acc + counts(d))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpylydbaea.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpylydbaea.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpylydbaea.scala:14:23 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659804098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var digits = mutable.ArrayBuffer(7,\
    \ 11)\n        var remainder = n\n        while (remainder > 0) {\n          \
    \  val remainderDigit = remainder % 10\n            if (remainderDigit == 7) {\n\
    \                count += 1\n            }\n            digits += remainderDigit\n\
    \            remainder = remainder / 10\n        }\n        digits.toList.count(_\
    \ == 7)\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaz7giw27.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36mdigits\e[0m = mutable.ArrayBuffer(\e\
    [31m7\e[0m, \e[31m11\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659804097
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var remainder\
    \ = n\n        while (remainder != 0) {\n            if (remainder % 11 == 0 ||\
    \ remainder % 13 == 0) {\n                count += 1\n            }\n        \
    \    remainder = remainder / 10\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpajak6gk_.scala:24)\n\tat Problem.main(tmpajak6gk_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659804104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val fizzBuzz = mutable.ListBuffer[Long]()\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                fizzBuzz += i\n            }\n        }\n        fizzBuzz.count(_\
    \ == 7)\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1ijm19ri.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfizzBuzz\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp1ijm19ri.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val count = mutable.HashMap.empty[Long,\
    \ Int]\n        for(i <- 0 until n){\n            val div = i % 11\n         \
    \   if(div == 0 || div == 13){\n                val buzz = i % 13\n          \
    \      if(buzz == 0){\n                    count += 1\n                }\n   \
    \         }\n            val fizz = i % 11\n            if(fizz == 0){\n     \
    \           count += 1\n            }\n        }\n        count.size\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqdhw3v9e.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqdhw3v9e.scala:13:25 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val count = mutable.ListBuffer.empty[Long]\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                count += i\n            }\n        }\n        count.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf_d7naq9.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpf_d7naq9.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804102
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap.empty[Int,\
    \ Int]\n        for (i <- 1 to n) {\n            val remainder = i % 11\n    \
    \        if (remainder == 0 || remainder == 13) counts.put(i, 1)\n           \
    \ else counts.put(i, counts.getOrElse(i, 0) + 1)\n        }\n        counts.filter(_._2\
    \ == 1).length\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpufbm3out.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpufbm3out.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804102
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var digits = n.toString.toCharArray\n\
    \        for(i <- 0 until digits.length){\n            val digit = digits(i)\n\
    \            if(digit == '7'){\n                count += 1\n            }\n  \
    \      }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph7f4417n.scala:24)\n\tat Problem.main(tmph7f4417n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659804105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val result = mutable.ListBuffer[Long]()\n\
    \        val digits = scala.math.pow(10, n.toInt)\n        for(i <- 0 until digits.length){\n\
    \            val digit = digits(i)\n            if(digit % 11 == 0 || digit %\
    \ 13 == 0){\n                result += digit\n            }\n        }\n     \
    \   result.size\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppd_dxpcq.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmppd_dxpcq.scala:14:32 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until digits.length){\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         value length is not a member of Double\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmppd_dxpcq.scala:15:24 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mdigit\e[0m = digits(i)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                    \e[33mvalue\e[0m \e[35mdigits\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659804103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Int]\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                nums += i\n            }\n        }\n        nums.count(_ ==\
    \ 7).asInstanceOf[Long]\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw62cbbzk.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpw62cbbzk.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap[Int, Int]()\n\
    \        for(i <- 1 to n) {\n            val remainder = i % 11\n            val\
    \ divides13 = i % 13 == 0\n            if(divides13 && remainder == 7) {\n   \
    \             counts.update(i,1)\n            }\n        }\n        counts.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbls99dnq.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbls99dnq.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 1 to n) nums += i\n        nums.count(_ % 11 == 0 || _ % 13\
    \ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzq5mq32g.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpzq5mq32g.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) nums +=\
    \ i\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m      \
    \                Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap[Int, Int]()\n\
    \        for(i <- 1 to n) {\n            val div = i % 11\n            val fizz\
    \ = i % 13\n            if(div == 0 || fizz == 0) {\n                counts.update(i,1)\n\
    \            }\n        }\n        counts.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmzfz1itg.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmzfz1itg.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val digits = mutable.ArrayBuffer.empty[Int]\n\
    \        val result = mutable.ArrayBuffer.empty[Long]\n        val divisors =\
    \ mutable.ArrayBuffer.empty[Long]\n        val divisor = mutable.ArrayBuffer.empty[Long]\n\
    \        val divisor2 = mutable.ArrayBuffer.empty[Long]\n        val divisor3\
    \ = mutable.ArrayBuffer.empty[Long]\n        val divisor4 = mutable.ArrayBuffer.empty[Long]\n\
    \        val divisor5 = mutable.ArrayBuffer.empty[Long]\n        val divisor6\
    \ = mutable.ArrayBuffer.empty[Long]\n        val divisor7 = mutable.ArrayBuffer.empty[Long]\n\
    \        val divisor8 = mutable.ArrayBuffer.empty[Long]\n        val divisor9\
    \ = mutable.ArrayBuffer.empty[Long]\n        val divisor10 = mutable.ArrayBuffer.empty[Long]\n\
    \        val divisor11 = mutable.ArrayBuffer.empty[Long]\n        val divisor12\
    \ = mutable.ArrayBuffer.empty[Long]\n        val divisor13 = mutable.ArrayBuffer.empty[Long]\n\
    \        val divisor14 = mutable.ArrayBuffer.empty[Long]\n        val divisor15\
    \ = mutable.ArrayBuffer.empty[Long]\n        val divisor16 = mutable.ArrayBuffer.empty[Long]\n\
    \        val divisor17 = mutable.ArrayBuffer.empty[Long]\n        val divisor18\
    \ = mutable.ArrayBuffer.empty[Long]\n        val divisor19 = mutable.ArrayBuffer.empty[Long]\n\
    \        val divisor20 = mutable.ArrayBuffer.empty[Long]\n        val divisor21\
    \ = mutable.ArrayBuffer.empty[Long]\n        val divisor22 = mutable.ArrayBuffer.empty[Long]\n\
    \        val divisor23 = mutable.ArrayBuffer.empty[Long]\n        val divisor24\
    \ = mutable.ArrayBuffer.empty[Long]\n        val divisor25 = mutable.ArrayBuffer.empty[Long]\n\
    \        val divisor26 = mutable.ArrayBuffer.empty[Long]\n        val divisor27\
    \ = mutable.ArrayBuffer.empty[Long]\n        val divisor28 = mutable.ArrayBuffer.empty[Long]\n\
    \        val divisor29 = mutable.ArrayBuffer.empty[Long]\n        val divisor30\
    \ = mutable.ArrayBuffer.empty[Long]\n        val divisor31 = mutable.ArrayBuffer.empty[Long]\n\
    \        val divisor32 = mutable.ArrayBuffer.empty[Long]\n        val divisor33\
    \ = mutable.ArrayBuffer.empty[Long]\n        val divisor34 = mutable.ArrayBuffer.empty[Long]\n\
    \        val divisor35 = mutable.ArrayBuffer.empty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjq99q0el.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpjq99q0el.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpjq99q0el.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpjq99q0el.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdivisor\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpjq99q0el.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mdivisor2\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpjq99q0el.scala:17:23 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m  "
  stdout: ''
  timestamp: 1659804105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var remainder\
    \ = n\n        while (remainder > 0) {\n            val remainderMod11 = remainder\
    \ % 11\n            val remainderMod13 = remainder % 13\n            if (remainderMod11\
    \ == 0 || remainderMod13 == 0) {\n                count += 1\n            }\n\
    \            remainder = remainder / 11\n        }\n        count\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n  \
    \  assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n  \
    \  assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpukhy_pcw.scala:26)\n\tat Problem.main(tmpukhy_pcw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659804083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap.empty[Int,\
    \ Int]\n        val divisors = mutable.HashSet.empty[Int]\n        for (i <- 1\
    \ to n) {\n            val div = i / 11\n            val mod = i % 11\n      \
    \      if (div == 0 || div == 13) {\n                divisors += div\n       \
    \     }\n            if (counts.contains(div)) {\n                counts(div)\
    \ += 1\n            } else {\n                counts(div) = 1\n            }\n\
    \        }\n        divisors.toList.sorted.foldLeft(0)((acc, d) => acc + counts(d))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp649y0z6y.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp649y0z6y.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.HashSet.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp649y0z6y.scala:14:23 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659804105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                nums += i\n            }\n        }\n        nums.count(_ % 7\
    \ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxs03e4qw.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpxs03e4qw.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap[Int, Int]()\n\
    \        for (i <- 1 to n) {\n            val digit = i % 10\n            if (digit\
    \ == 7) {\n                counts.put(i, counts.getOrElse(i, 0) + 1L)\n      \
    \      }\n        }\n        counts.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpljdw3_l8.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpljdw3_l8.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisors = mutable.HashSet.empty[Long]\n        for(i <- 1\
    \ to n) {\n            val d = i % 11\n            if(d == 7 || d == 13) counts(i)\
    \ = counts.getOrElse(i, 0) + 1\n            divisors.add(d)\n        }\n     \
    \   divisors.toList.sorted.reverse.foldLeft(0)((acc, d) => acc * 10 + d).asInstanceOf[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplmo9fqh3.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmplmo9fqh3.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.HashSet.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmplmo9fqh3.scala:14:22 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659804106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Int]\n\
    \        var count = 0\n        for (i <- 1 to n) {\n            if (i % 11 ==\
    \ 0 || i % 13 == 0) {\n                nums += i\n                count += 1\n\
    \            }\n        }\n        nums.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpejyfzppo.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpejyfzppo.scala:14:23 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Int]\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                nums += i\n            }\n        }\n        nums.length\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4iard2b0.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp4iard2b0.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap.empty[Int,\
    \ Int]\n        val divisors = mutable.HashSet.empty[Int]\n        for(i <- 1\
    \ to n) {\n            val div = i / 11\n            val mod = i % 11\n      \
    \      if(!divisors.contains(div)) {\n                divisors += div\n      \
    \      }\n            if(!counts.contains(div)) {\n                counts += div\
    \ -> (counts.getOrElse(div, 0) + 1)\n            }\n            if(!counts.contains(mod))\
    \ {\n                counts += mod -> (counts.getOrElse(mod, 0) + 1)\n       \
    \     }\n        }\n        divisors.toList.map(d => (d, counts.getOrElse(d, 0))).filter(_._2\
    \ % 11 == 0).size\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv2n4hj08.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpv2n4hj08.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.HashSet.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpv2n4hj08.scala:14:22 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659804106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var lastDigit\
    \ = 0\n        var lastDigitCount = 0\n        var lastDigitCount2 = 0\n     \
    \   var lastDigitCount3 = 0\n        var lastDigitCount4 = 0\n        var lastDigitCount5\
    \ = 0\n        var lastDigitCount6 = 0\n        var lastDigitCount7 = 0\n    \
    \    var lastDigitCount8 = 0\n        var lastDigitCount9 = 0\n        var lastDigitCount10\
    \ = 0\n        var lastDigitCount11 = 0\n        var lastDigitCount12 = 0\n  \
    \      var lastDigitCount13 = 0\n        var lastDigitCount14 = 0\n        var\
    \ lastDigitCount15 = 0\n        var lastDigitCount16 = 0\n        var lastDigitCount17\
    \ = 0\n        var lastDigitCount18 = 0\n        var lastDigitCount19 = 0\n  \
    \      var lastDigitCount20 = 0\n        var lastDigitCount21 = 0\n        var\
    \ lastDigitCount22 = 0\n        var lastDigitCount23 = 0\n        var lastDigitCount24\
    \ = 0\n        var lastDigitCount25 = 0\n        var lastDigitCount26 = 0\n  \
    \      var lastDigitCount27 = 0\n        var lastDigitCount28 = 0\n        var\
    \ lastDigitCount29 = 0\n        var lastDigitCount30 = 0\n        var lastDigitCount31\
    \ = 0\n        var lastDigitCount32 = 0\n        var lastDigitCount33 = 0\n  \
    \      var lastDigitCount34 = 0\n        var lastDigitCount35 = 0\n        var\
    \ lastDigitCount36 = 0\n        var lastDigitCount37 = 0\n        var lastDigitCount38\
    \ = 0\n        var lastDigitCount39 = 0\n        var lastDigitCount40 = 0\n  \
    \      var lastDigitCount41 = 0\n        var lastDigitCount42 = 0\n        var\
    \ lastDigitCount43 = 0\n        var lastDigitCount44 = 0\n        var lastDigitCount45\
    \ = 0\n        var lastDigitCount46 = 0\n        var lastDigitCount47 = 0\n  \
    \      var lastDigitCount48 = 0\n        var lastDigitCount49 = 0\n        var\
    \ lastDigitCount50 = 0\n        var lastDigitCount51 = 0\n        var lastDigitCount52\
    \ = 0\n        var lastDigitCount53 = 0\n        var lastDigitCount54 = 0\n  \
    \      var lastDigitCount55 = 0\n        var lastDigitCount56 = 0\n        var\
    \ lastDigitCount57 = 0\n        var lastDigitCount58 = 0\n        var lastDigitCount59\
    \ = 0\n        var lastDigitCount60 = 0\n        var lastDigitCount61 = 0\n  \
    \      var lastDigitCount62 = 0\n        var lastDigitCount63 = 0\n        var\
    \ lastDigitCount64 = 0\n        var lastDigitCount65 = 0\n        var lastDigitCount66\
    \ = 0\n        var lastDigitCount67 = 0\n        var lastDigitCount68 = 0\n  \
    \      var lastDigitCount69 = 0\n        var lastDigitCount70 = 0\n        var\
    \ lastDigitCount71 = 0\n        var lastDigitCount72 = 0\n        var \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp6u6jutnk.scala:86:11 ---------------------------\e\
    [0m\e[0m\n\e[31m86 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6u6jutnk.scala:87:5 ---------------------\e\
    [0m\e[0m\n\e[31m87 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659804107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        for (i <- 1 to\
    \ n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count +=\
    \ 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvigjo6dv.scala:13:23\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap[Int, Int]()\n\
    \        val divisors = mutable.HashMap[Int, Int]()\n        val divisorsCount\
    \ = mutable.HashMap[Int, Int]()\n        val divisorsCount2 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount3 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount4 = mutable.HashMap[Int, Int]()\n        val divisorsCount5 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount6 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount7 = mutable.HashMap[Int, Int]()\n        val divisorsCount8 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount9 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount10 = mutable.HashMap[Int, Int]()\n        val divisorsCount11 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount12 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount13 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount14 = mutable.HashMap[Int, Int]()\n        val divisorsCount15 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount16 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount17 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount18 = mutable.HashMap[Int, Int]()\n        val divisorsCount19 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount20 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount21 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount22 = mutable.HashMap[Int, Int]()\n        val divisorsCount23 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount24 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount25 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount26 = mutable.HashMap[Int, Int]()\n        val divisorsCount27 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount28 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount29 = mutable.HashMap[Int, Int]()\n        val\
    \ divisors\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_z01s6mu.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_z01s6mu.scala:12:21\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mcounts\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_z01s6mu.scala:13:23 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.HashMap[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_z01s6mu.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdivisorsCount\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_z01s6mu.scala:15:29\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mdivisorsCount2\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_z01s6mu.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mdivisorsCount3\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    "
  stdout: ''
  timestamp: 1659804051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var digits = scala.collection.mutable.ListBuffer[Int]()\n\
    \        for(i <- 1 to n) {\n            val d = i % 10\n            if(d != 7\
    \ && d != 11 && d != 13) {\n                digits += d\n            }\n     \
    \   }\n        for(i <- 1 to digits.length) {\n            if(digits(i) == 7)\
    \ {\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxzh59wq4.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap.empty[Long,\
    \ Int]\n        for(i <- 1 to n) {\n            val remainder = n % i\n      \
    \      if(remainder == 0 || remainder == 11 || remainder == 13) {\n          \
    \      counts(i) = counts.getOrElse(i, 0) + 1\n            }\n        }\n    \
    \    counts.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4ikml505.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4ikml505.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804108
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ListBuffer(n)\n  \
    \      val numsCount = mutable.ListBuffer(0)\n        while(nums.nonEmpty) {\n\
    \            val num = nums.head\n            val numDigits = num.toString.length\n\
    \            if(numDigits == 1) {\n                if(num % 11 == 0 || num % 13\
    \ == 0) {\n                    numsCount += numsCount.length\n               \
    \ }\n                numsCount += 1\n            }\n            else if(numDigits\
    \ == 2) {\n                if(num % 11 == 0 || num % 13 == 0) {\n            \
    \        numsCount += numsCount.length\n                }\n                if(num\
    \ % 11 == 0 || num % 13 == 0) {\n                    numsCount += numsCount.length\n\
    \                }\n                numsCount += 2\n            }\n          \
    \  else if(numDigits == 3) {\n                if(num % 11 == 0 || num % 13 ==\
    \ 0) {\n                    numsCount += numsCount.length\n                }\n\
    \                if(num % 11 == 0 || num % 13 == 0) {\n                    numsCount\
    \ += numsCount.length\n                }\n                if(num % 11 == 0 ||\
    \ num % 13 == 0) {\n                    numsCount += numsCount.length\n      \
    \          }\n                numsCount += 3\n            }\n            else\
    \ if(numDigits == 4) {\n                if(num % 11 == 0 || num % 13 == 0) {\n\
    \                    numsCount += numsCount.length\n                }\n      \
    \          if(num % 11 == 0 || num % 13 == 0) {\n                    numsCount\
    \ += numsCount.length\n                }\n                if(num % 11 == 0 ||\
    \ num % 13 == 0) {\n                    numsCount += numsCount.length\n      \
    \          }\n                if(num % 11 == 0 || num % 13 == 0) {\n         \
    \           numsCount += numsCount.length\n                }\n               \
    \ numsCount += 4\n            }\n            else if(numDigits == 5) {\n     \
    \           if(num % 11 == 0 || num % 13 == 0) {\n                    numsCount\
    \ += numsCount.length\n                }\n                if(num % 11 == 0 ||\
    \ num % 13 == 0) {\n                    numsCount += numsCount.length\n      \
    \          }\n                if(num % 11 == 0 || num % 13 == 0) {\n         \
    \           numsCount += numsCount.length\n                }\n               \
    \ if(num % 11 == 0 || num % 13 == 0) {\n                    numsCount += numsCount.length\n\
    \                }\n                if(num % 11 == 0 || num % 13 == 0) {\n   \
    \                 numsCount += numsCount.length\n                }\n         \
    \       numsCount += 5\n            }\n            else if(numDigits == 6) {\n\
    \                if(num % 11 == 0 || num % 13 == 0) {\n                    \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_y0fzvpz.scala:93:0 ----------------------------\e\
    [0m\e[0m\n\e[31m93 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_y0fzvpz.scala:12:19\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mnums\e[0m = mutable.ListBuffer(n)\n\e[31m\e[31m   |\e[0m                 \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_y0fzvpz.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnumsCount\e[0m = mutable.ListBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp_y0fzvpz.scala:14:8 ---------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mwhile\e[0m(nums.nonEmpty) {\n\e[31m\e[31m\
    \   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e\
    [0m        Required: Long\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mnum\e\
    [0m = nums.head\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mnumDigits\e[0m\
    \ = num.toString.length\n\e[31m17 |\e[0m            \e[33mif\e[0m(numDigits ==\
    \ \e[31m1\e[0m) {\n\e[31m18 |\e[0m                \e[33mif\e[0m(num % \e[31m11\e\
    [0m == \e[31m0\e[0m || num % \e[31m13\e[0m == \e[31m0\e[0m) {\n\e[31m19 |\e[0m\
    \                    numsCount += numsCount.length\n\e[31m20 |\e[0m          \
    \      }\n\e[31m21 |\e[0m                numsCount += \e[31m1\e[0m\n\e[31m22 |\e\
    [0m            }\n\e[31m23 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m(numDigits\
    \ == \e[31m2\e[0m) {\n\e[31m24 |\e[0m                \e[33mif\e[0m(num % \e[31m11\e\
    [0m == \e[31m0\e[0m || num % \e[31m13\e[0m == \e[31m0\e[0m) {\n\e[31m25 |\e[0m\
    \                    numsCount += numsCount.length\n\e[31m26 |\e[0m          \
    \      }\n\e[31m27 |\e[0m                \e[33mif\e[0m(num % \e[31m11\e[0m ==\
    \ \e[31m0\e[0m || num % \e[31m13\e[0m == \e"
  stdout: ''
  timestamp: 1659804109
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val count = mutable.MutableList[Int]()\n\
    \        val digits = scala.math.pow(n, 10)\n        val divisors = scala.math.pow(10,\
    \ 9)\n        val divisorsOf11Or13 = scala.math.pow(10, 9)\n        val divisorsOf11Or13And7\
    \ = scala.math.pow(10, 9)\n        val divisorsOf11Or13And7And7 = scala.math.pow(10,\
    \ 9)\n        val divisorsOf11Or13And7And7And7 = scala.math.pow(10, 9)\n     \
    \   val divisorsOf11Or13And7And7And7And7 = scala.math.pow(10, 9)\n        val\
    \ divisorsOf11Or13And7And7And7And7And7 = scala.math.pow(10, 9)\n        val divisorsOf11Or13And7And7And7And7And7And7\
    \ = scala.math.pow(10, 9)\n        val divisorsOf11Or13And7And7And7And7And7And7And7\
    \ = scala.math.pow(10, 9)\n        val divisorsOf11Or13And7And7And7And7And7And7And7And7\
    \ = scala.math.pow(10, 9)\n        val divisorsOf11Or13And7And7And7And7And7And7And7And7And7\
    \ = scala.math.pow(10, 9)\n        val divisorsOf11Or13And7And7And7And7And7And7And7And7And7\
    \ = scala.math.pow(10, 9)\n        val divisorsOf11Or13And7And7And7And7And7And7And7And7And7\
    \ = scala.math.pow(10, 9)\n        val divisorsOf11Or13And7And7And7And7And7And7And7And7And7And7\
    \ = scala.math.pow(10, 9)\n        val divisorsOf11Or13And7And7And7And7And7And7And7And7And7And7\
    \ = scala.math.pow(10, 9)\n        val divisorsOf11Or13And7And7And7And7And7And7And7And7And7And7\
    \ = scala.math.pow(10, 9)\n        val divisorsOf11Or13And7And7And7And7And7And7And7And7And7And7And7\
    \ = scala.math.pow(10, 9)\n        val divisorsOf11Or13And7And7And7And7And7And7And7And7And7And7And7\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgbcyegzw.scala:31:74 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mdivisorsOf11Or13And7And7And7And7And7And7And7And7And7And7And7\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \            expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpgbcyegzw.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mdivisorsOf11Or13And7And7And7And7And7And7And7And7And7\e\
    [0m = scala.math.pow(\e[31m10\e[0m, \e[31m9\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdivisorsOf11Or13And7And7And7And7And7And7And7And7And7 is already\
    \ defined as \e[33mvalue\e[0m \e[35mdivisorsOf11Or13And7And7And7And7And7And7And7And7And7\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgbcyegzw.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mdivisorsOf11Or13And7And7And7And7And7And7And7And7And7\e\
    [0m = scala.math.pow(\e[31m10\e[0m, \e[31m9\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdivisorsOf11Or13And7And7And7And7And7And7And7And7And7 is already\
    \ defined as \e[33mvalue\e[0m \e[35mdivisorsOf11Or13And7And7And7And7And7And7And7And7And7\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgbcyegzw.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mdivisorsOf11Or13And7And7And7And7And7And7And7And7And7And7\e\
    [0m = scala.math.pow(\e[31m10\e[0m, \e[31m9\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659804109
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap[Int, Int]()\n\
    \        for(i <- 1 to n) {\n            val remainder = i % 11\n            val\
    \ isDivisibleBy11 = remainder == 0\n            val isDivisibleBy13 = remainder\
    \ == 1\n            if(isDivisibleBy11 || isDivisibleBy13) {\n               \
    \ counts(i) = counts.getOrElse(i, 0) + 1\n            }\n        }\n        counts.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsjzov900.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsjzov900.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804110
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 1 to n){\n            if(i % 11 == 0 || i % 13 == 0){\n    \
    \            nums += i\n            }\n        }\n        nums.length\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx74oga_4.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpx74oga_4.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804082
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                nums += i\n            }\n        }\n        nums.count(_ % 7\
    \ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxs03e4qw.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpxs03e4qw.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 1 to n) {\n            if(i % 11 == 0 || i % 13 == 0) {\n  \
    \              nums += i\n            }\n        }\n        for(i <- nums) {\n\
    \            if(i % 7 == 0) {\n                count += 1\n            }\n   \
    \     }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm6a70qy_.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpm6a70qy_.scala:14:22 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804114
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val count = mutable.HashMap[Int, Int]()\n\
    \        for(i <- 1 to n){\n            val remainder = i % 11\n            val\
    \ isDivisibleBy11 = remainder == 0\n            val isDivisibleBy13 = remainder\
    \ == 1\n            if(isDivisibleBy11 || isDivisibleBy13){\n                count(i)\
    \ = count(i) + 1\n            }\n        }\n        count.values.sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa4g_gq5a.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa4g_gq5a.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804113
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        for (i <- 1 to\
    \ n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count +=\
    \ 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvigjo6dv.scala:13:23\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val digits = mutable.ArrayBuffer.empty[Int]\n\
    \        val divisors = mutable.ArrayBuffer.empty[Int]\n        val count = mutable.ArrayBuffer.empty[Int]\n\
    \        val divisorsCount = mutable.ArrayBuffer.empty[Int]\n        val divisorsCount2\
    \ = mutable.ArrayBuffer.empty[Int]\n        val divisorsCount3 = mutable.ArrayBuffer.empty[Int]\n\
    \        val divisorsCount4 = mutable.ArrayBuffer.empty[Int]\n        val divisorsCount5\
    \ = mutable.ArrayBuffer.empty[Int]\n        val divisorsCount6 = mutable.ArrayBuffer.empty[Int]\n\
    \        val divisorsCount7 = mutable.ArrayBuffer.empty[Int]\n        val divisorsCount8\
    \ = mutable.ArrayBuffer.empty[Int]\n        val divisorsCount9 = mutable.ArrayBuffer.empty[Int]\n\
    \        val divisorsCount10 = mutable.ArrayBuffer.empty[Int]\n        val divisorsCount11\
    \ = mutable.ArrayBuffer.empty[Int]\n        val divisorsCount12 = mutable.ArrayBuffer.empty[Int]\n\
    \        val divisorsCount13 = mutable.ArrayBuffer.empty[Int]\n        val divisorsCount14\
    \ = mutable.ArrayBuffer.empty[Int]\n        val divisorsCount15 = mutable.ArrayBuffer.empty[Int]\n\
    \        val divisorsCount16 = mutable.ArrayBuffer.empty[Int]\n        val divisorsCount17\
    \ = mutable.ArrayBuffer.empty[Int]\n        val divisorsCount18 = mutable.ArrayBuffer.empty[Int]\n\
    \        val divisorsCount19 = mutable.ArrayBuffer.empty[Int]\n        val divisorsCount20\
    \ = mutable.ArrayBuffer.empty[Int]\n        val divisorsCount21 = mutable.ArrayBuffer.empty[Int]\n\
    \        val divisorsCount22 = mutable.ArrayBuffer.empty[Int]\n        val divisorsCount23\
    \ = mutable.ArrayBuffer.empty[Int]\n        val divisorsCount24 = mutable.ArrayBuffer.empty[Int]\n\
    \        val divisorsCount25 = mutable.ArrayBuffer.empty[Int]\n        val divisorsCount26\
    \ = mutable.ArrayBuffer.empty[Int]\n        val divisorsCount27 = mutable.ArrayBuffer.empty[Int]\n\
    \        val divisorsCount28 = mutable.ArrayBuffer.empty[Int]\n        val divisorsCount29\
    \ = mutable.ArrayBuffer.empty[Int]\n        val divisorsCount30 = mutable.ArrayBuffer.empty[Int]\n\
    \        val divisorsCount31 = \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpqlkh1sah.scala:45:29 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mdivisorsCount31\e[0m = \n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqlkh1sah.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpqlkh1sah.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpqlkh1sah.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpqlkh1sah.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdivisorsCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpqlkh1sah.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m1"
  stdout: ''
  timestamp: 1659804114
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val count = mutable.ListBuffer.empty[Long]\n\
    \        for(i <- 1 to n) {\n            val div = i % 11\n            val mod10\
    \ = i % 10\n            if(div == 0 || div == 13) {\n                if(mod10\
    \ == 7) {\n                    count += i\n                }\n            }\n\
    \        }\n        count.length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv4_rws5v.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpv4_rws5v.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804115
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap[Int, Int]()\n\
    \        for(i <- 1 to n){\n            val remainder = i % 11\n            val\
    \ isDivisibleBy11 = remainder == 0\n            val isDivisibleBy13 = remainder\
    \ == 1\n            if(isDivisibleBy11 || isDivisibleBy13){\n                counts.update(i,1)\n\
    \            }\n        }\n        counts.filter(_._2 == 7).length\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n \
    \   assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n \
    \   assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7mp6jag3.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7mp6jag3.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804115
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap[Int, Int]()\n\
    \        for (i <- 1 to n) {\n            val remainder = i % 11\n           \
    \ if (remainder == 0 || remainder == 13) {\n                counts.update(i.toInt,\
    \ counts.get (i.toInt) + 1)\n            }\n        }\n        counts.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp12sp63xz.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp12sp63xz.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804083
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var remainder\
    \ = n % 11\n        var remainder2 = n % 13\n        while (remainder != 0 ||\
    \ remainder2 != 0) {\n            if (remainder == 0 && remainder2 == 0) {\n \
    \               count += 1\n            }\n            else if (remainder == 0)\
    \ {\n                count += 1\n                remainder = 11\n            }\n\
    \            else if (remainder2 == 0) {\n                count += 1\n       \
    \         remainder2 = 13\n            }\n            else {\n               \
    \ remainder = remainder / 10\n                remainder2 = remainder2 / 10\n \
    \           }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659804119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Int]\n\
    \        val numsCount = mutable.ArrayBuffer.empty[Int]\n        for(i <- 1 to\
    \ n) {\n            val remainder = n % i\n            if(remainder == 0 || remainder\
    \ == 7) {\n                nums += i\n                numsCount += i\n       \
    \     }\n        }\n        numsCount.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprf42s5zg.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprf42s5zg.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnumsCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmprf42s5zg.scala:14:22 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659804114
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap.empty[Int,\
    \ Int]\n        for(i <- 1 to n) {\n            val d = i % 11\n            val\
    \ e = i % 13\n            if(d == 7 && e == 7) {\n                counts.put(i,\
    \ 1)\n            } else {\n                counts.put(i, 0)\n            }\n\
    \        }\n        counts.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2npvtdb7.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2npvtdb7.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804115
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ListBuffer(1 to n).filter(_\
    \ % 11 == 0 || _ % 13 == 0)\n        nums.count(_ == 7) / nums.size\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpznbgiuau.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer(\e\
    [31m1\e[0m to n).filter(_ % \e[31m11\e[0m == \e[31m0\e[0m || _ % \e[31m13\e[0m\
    \ == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804112
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val digits = mutable.Set[Int]()\n   \
    \     val fizzBuzz = mutable.Set[Int]()\n        val fizzBuzzCount = mutable.Set[Int]()\n\
    \        val fizzBuzzCount2 = mutable.Set[Int]()\n        val fizzBuzzCount3 =\
    \ mutable.Set[Int]()\n        val fizzBuzzCount4 = mutable.Set[Int]()\n      \
    \  val fizzBuzzCount5 = mutable.Set[Int]()\n        val fizzBuzzCount6 = mutable.Set[Int]()\n\
    \        val fizzBuzzCount7 = mutable.Set[Int]()\n        val fizzBuzzCount8 =\
    \ mutable.Set[Int]()\n        val fizzBuzzCount9 = mutable.Set[Int]()\n      \
    \  val fizzBuzzCount10 = mutable.Set[Int]()\n        val fizzBuzzCount11 = mutable.Set[Int]()\n\
    \        val fizzBuzzCount12 = mutable.Set[Int]()\n        val fizzBuzzCount13\
    \ = mutable.Set[Int]()\n        val fizzBuzzCount14 = mutable.Set[Int]()\n   \
    \     val fizzBuzzCount15 = mutable.Set[Int]()\n        val fizzBuzzCount16 =\
    \ mutable.Set[Int]()\n        val fizzBuzzCount17 = mutable.Set[Int]()\n     \
    \   val fizzBuzzCount18 = mutable.Set[Int]()\n        val fizzBuzzCount19 = mutable.Set[Int]()\n\
    \        val fizzBuzzCount20 = mutable.Set[Int]()\n        val fizzBuzzCount21\
    \ = mutable.Set[Int]()\n        val fizzBuzzCount22 = mutable.Set[Int]()\n   \
    \     val fizzBuzzCount23 = mutable.Set[Int]()\n        val fizzBuzzCount24 =\
    \ mutable.Set[Int]()\n        val fizzBuzzCount25 = mutable.Set[Int]()\n     \
    \   val fizzBuzzCount26 = mutable.Set[Int]()\n        val fizzBuzzCount27 = mutable.Set[Int]()\n\
    \        val fizzBuzzCount28 = mutable.Set[Int]()\n        val fizzBuzzCount29\
    \ = mutable.Set[Int]()\n        val fizzBu\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpykly6_u9.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpykly6_u9.scala:12:21\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mdigits\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m       \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpykly6_u9.scala:13:23\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mfizzBuzz\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m     \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpykly6_u9.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfizzBuzzCount\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpykly6_u9.scala:15:29 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mfizzBuzzCount2\e[0m = mutable.Set[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpykly6_u9.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfizzBuzzCount3\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e"
  stdout: ''
  timestamp: 1659804116
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        for(i <- 1 to\
    \ n) {\n            val str = i.toString\n            if(str.contains(\"7\"))\
    \ {\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzfahgczi.scala:13:22\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804116
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Int]\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                nums += i\n            }\n        }\n        nums.count(_ ==\
    \ 7)\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpndnmnn3c.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpndnmnn3c.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804116
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var nums = mutable.ArrayBuffer(n)\n\
    \        while(nums.nonEmpty) {\n            val num = nums.head\n           \
    \ nums -= num\n            val div = num / 11\n            val mod = num % 11\n\
    \            if(div == 0 || div == 13) {\n                if(mod == 7) {\n   \
    \                 count += 1\n                }\n            } else {\n      \
    \          count += 1\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo0xq_j0j.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804114
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap[Int, Int]()\n\
    \        val divisors = mutable.HashMap[Int, Int]()\n        val divisorsCount\
    \ = mutable.HashMap[Int, Int]()\n        val divisorsCount2 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount3 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount4 = mutable.HashMap[Int, Int]()\n        val divisorsCount5 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount6 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount7 = mutable.HashMap[Int, Int]()\n        val divisorsCount8 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount9 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount10 = mutable.HashMap[Int, Int]()\n        val divisorsCount11 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount12 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount13 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount14 = mutable.HashMap[Int, Int]()\n        val divisorsCount15 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount16 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount17 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount18 = mutable.HashMap[Int, Int]()\n        val divisorsCount19 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount20 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount21 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount22 = mutable.HashMap[Int, Int]()\n        val divisorsCount23 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount24 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount25 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount26 = mutable.HashMap[Int, Int]()\n        val divisorsCount27 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount28 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount29 = mutable.HashMap[Int, Int]()\n        val\
    \ divisors\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_z01s6mu.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_z01s6mu.scala:12:21\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mcounts\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_z01s6mu.scala:13:23 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.HashMap[\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_z01s6mu.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdivisorsCount\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_z01s6mu.scala:15:29\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mdivisorsCount2\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_z01s6mu.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mdivisorsCount3\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    "
  stdout: ''
  timestamp: 1659804051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Int]\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                nums += i\n            }\n        }\n        nums.count(_ ==\
    \ 7) / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptu3xkad2.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmptu3xkad2.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val counts = mutable.HashMap.empty[Int,\
    \ Int]\n        for (i <- 1 to n) {\n            val remainder = i % 11\n    \
    \        if (remainder == 0 || remainder == 13) {\n                counts.putIfAbsent(remainder,\
    \ 0)\n                counts.get(remainder) += 1\n            }\n        }\n \
    \       counts.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9xh_09f_.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9xh_09f_.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804094
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val count = mutable.MutableList[Long]()\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                count += i\n            }\n        }\n        count.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpohlc_cpq.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpohlc_cpq.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804116
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var remainder\
    \ = n\n        while (remainder > 0) {\n            if (remainder % 11 == 0 ||\
    \ remainder % 13 == 0) {\n                count += 1\n            }\n        \
    \    remainder = remainder / 10\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxbdbrva7.scala:24)\n\tat Problem.main(tmpxbdbrva7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659804072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Int]\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                nums += i\n            }\n        }\n        nums.length\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4iard2b0.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp4iard2b0.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var nums = scala.collection.mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to n) {\n            if(i % 11 == 0 || i % 13 == 0) {\n  \
    \              nums += i\n            }\n        }\n        for(i <- nums) {\n\
    \            if(i % 7 == 0) {\n                count += 1\n            }\n   \
    \     }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnznu0n0_.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val digits = mutable.Set[Int]()\n   \
    \     val divisors = mutable.Set[Int]()\n        val count = mutable.Set[Int]()\n\
    \        val remainder = n % 10\n        val remainderDivisor = remainder / 10\n\
    \        val remainderDivisorDivisor = remainderDivisor / 10\n        val remainderDivisorDivisorDivisor\
    \ = remainderDivisorDivisor / 10\n        val remainderDivisorDivisorDivisorDivisor\
    \ = remainderDivisorDivisorDivisor / 10\n        val remainderDivisorDivisorDivisorDivisorDivisor\
    \ = remainderDivisorDivisorDivisorDivisor / 10\n        val remainderDivisorDivisorDivisorDivisorDivisorDivisor\
    \ = remainderDivisorDivisorDivisorDivisorDivisor / 10\n        val remainderDivisorDivisorDivisorDivisorDivisorDivisorDivisor\
    \ = remainderDivisorDivisorDivisorDivisorDivisorDivisor / 10\n        val remainderDivisorDivisorDivisorDivisorDivisorDivisorDivisor\
    \ = remainderDivisorDivisorDivisorDivisorDivisorDivisor / 10\n        val remainderDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisor\
    \ = remainderDivisorDivisorDivisorDivisorDivisorDivisorDivisor / 10\n        val\
    \ remainderDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisor = remainderDivisorDivisorDivisorDivisorDivisorDivisorDivisor\
    \ / 10\n        val remainderDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisor\
    \ = remainderDivisorDivisorDivisorDivisorDivisorDivisorDivisor / 10\n        val\
    \ remainderDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisor\
    \ = remainderDivisorDivisorDivisorDivisorDivisorDivisorDivisor / 10\n        val\
    \ remainderDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisor\
    \ = remainderDivisorDivisorDivisorDivisorDivisorDivisorDivisor / 10\n        val\
    \ remainderDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisor\
    \ = remainderDivisorDivisorDivisorDivisorDivisorDivisorDivisor \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2ncwjzzc.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mremainderDivisorDivisorDivisorDivisorDivisorDivisorDivisor\e\
    [0m = remainderDivisorDivisorDivisorDivisorDivisorDivisor / \e[31m10\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainderDivisorDivisorDivisorDivisorDivisorDivisorDivisor\
    \ is already defined as \e[33mvalue\e[0m \e[35mremainderDivisorDivisorDivisorDivisorDivisorDivisorDivisor\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ncwjzzc.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mremainderDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisor\e\
    [0m = remainderDivisorDivisorDivisorDivisorDivisorDivisorDivisor / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainderDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisor\
    \ is already defined as \e[33mvalue\e[0m \e[35mremainderDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisor\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ncwjzzc.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mremainderDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisor\e\
    [0m = remainderDivisorDivisorDivisorDivisorDivisorDivisorDivisor / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainderDivisorDivisorDivisorDivisorDivisorDivisorDivis"
  stdout: ''
  timestamp: 1659804117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val fizzBuzz = mutable.Set[Long]()\n\
    \        val divisors = mutable.Set[Long]()\n        val divisorsCount = mutable.Set[Long]()\n\
    \        val divisorsCount2 = mutable.Set[Long]()\n        val divisorsCount3\
    \ = mutable.Set[Long]()\n        val divisorsCount4 = mutable.Set[Long]()\n  \
    \      val divisorsCount5 = mutable.Set[Long]()\n        val divisorsCount6 =\
    \ mutable.Set[Long]()\n        val divisorsCount7 = mutable.Set[Long]()\n    \
    \    val divisorsCount8 = mutable.Set[Long]()\n        val divisorsCount9 = mutable.Set[Long]()\n\
    \        val divisorsCount10 = mutable.Set[Long]()\n        val divisorsCount11\
    \ = mutable.Set[Long]()\n        val divisorsCount12 = mutable.Set[Long]()\n \
    \       val divisorsCount13 = mutable.Set[Long]()\n        val divisorsCount14\
    \ = mutable.Set[Long]()\n        val divisorsCount15 = mutable.Set[Long]()\n \
    \       val divisorsCount16 = mutable.Set[Long]()\n        val divisorsCount17\
    \ = mutable.Set[Long]()\n        val divisorsCount18 = mutable.Set[Long]()\n \
    \       val divisorsCount19 = mutable.Set[Long]()\n        val divisorsCount20\
    \ = mutable.Set[Long]()\n        val divisorsCount21 = mutable.Set[Long]()\n \
    \       val divisorsCount22 = mutable.Set[Long]()\n        val divisorsCount23\
    \ = mutable.Set[Long]()\n        val divisorsCount24 = mutable.Set[Long]()\n \
    \       val divisorsCount25 = mutable.Set[Long]()\n        val divisorsCount26\
    \ = mutable.Set[Long]()\n        val divisorsCount27 = mutable.Set[Long]()\n \
    \       val divisorsCount28 = mutable.Set[Long]()\n        val divisorsCount29\
    \ = mutable.Set[Long]()\n        val divisorsCount30 = mutable.Set[Long]()\n \
    \       val divisorsCount31 = mutable.Set[Long]()\n        val divisorsCount32\
    \ = mutable.Set[Long]()\n        val divisorsCount33 = mutable.Set[Long]()\n \
    \       val divisor\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2k0czes9.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2k0czes9.scala:12:23\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mfizzBuzz\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2k0czes9.scala:13:23\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mdivisors\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2k0czes9.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mdivisorsCount\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp2k0czes9.scala:15:29 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mdivisorsCount2\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2k0czes9.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mdivisorsCount3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: mutable\n\e[31"
  stdout: ''
  timestamp: 1659804117
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        var remainder\
    \ = n\n        while (remainder > 0) {\n            val remainderDigit = remainder\
    \ % 10\n            if (remainderDigit == 7) {\n                count += 1\n \
    \           }\n            remainder = remainder / 10\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1n50w9wx.scala:25)\n\tat Problem.main(tmp1n50w9wx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659804050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val digits = mutable.ArrayBuffer(7, 11)\n\
    \        val counts = mutable.ArrayBuffer(0)\n        val remainder = n % 10\n\
    \        val remainderDigit = remainder % 10\n        val remainderDigitCount\
    \ = digits.count(_ == remainderDigit)\n        val remainderDigitCount = remainderDigitCount\
    \ + 1\n        val remainderDigitCount2 = remainderDigitCount + 1\n        val\
    \ remainderDigitCount3 = remainderDigitCount + 1\n        val remainderDigitCount4\
    \ = remainderDigitCount + 1\n        val remainderDigitCount5 = remainderDigitCount\
    \ + 1\n        val remainderDigitCount6 = remainderDigitCount + 1\n        val\
    \ remainderDigitCount7 = remainderDigitCount + 1\n        val remainderDigitCount8\
    \ = remainderDigitCount + 1\n        val remainderDigitCount9 = remainderDigitCount\
    \ + 1\n        val remainderDigitCount10 = remainderDigitCount + 1\n        val\
    \ remainderDigitCount11 = remainderDigitCount + 1\n        val remainderDigitCount12\
    \ = remainderDigitCount + 1\n        val remainderDigitCount13 = remainderDigitCount\
    \ + 1\n        val remainderDigitCount14 = remainderDigitCount + 1\n        val\
    \ remainderDigitCount15 = remainderDigitCount + 1\n        val remainderDigitCount16\
    \ = remainderDigitCount + 1\n        val remainderDigitCount17 = remainderDigitCount\
    \ + 1\n        val remainderDigitCount18 = remainderDigitCount + 1\n        val\
    \ remainderDigitCount19 = remainderDigitCount + 1\n        val remainderDigitCount20\
    \ = remainderDigitCount + 1\n        val remainderDigitCount21 = remainderDigitCount\
    \ + 1\n        val remainderDigitCount22 = remainderDigitCount + 1\n        val\
    \ remainderDigitCount23 = remainderDigitCount + 1\n        val remainderDigitCount24\
    \ = remainderDigitCount + 1\n        val remainderDigitCount25 = remainderDigitCount\
    \ + 1\n        val remainderDigitCount26 = remainderDigitCount + 1\n        val\
    \ remainderDigitCount27 = remainderDigitCount + 1\n        val remainderDigitCount28\
    \ = remainderDigitCount + 1\n        val remainderDigitCount29 = remainderDigitCount\
    \ + 1\n        val remainderDigitCount30 = remainderDigitCount + 1\n        val\
    \ remainderDigitCount31 = remainderDigitCount + 1\n        val remainderDigitCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp10kz3qg3.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp10kz3qg3.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mremainderDigitCount\e[0m = remainderDigitCount + \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mremainderDigitCount is already defined as \e[33mvalue\e[0m \e[35mremainderDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp10kz3qg3.scala:12:21 ------------------------\e[0m\e[0m\n\
    \e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = mutable.ArrayBuffer(\e\
    [31m7\e[0m, \e[31m11\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp10kz3qg3.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp10kz3qg3.scala:49:5 ---------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659804117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val fizzBuzz = mutable.Set[Int]()\n \
    \       val fizzBuzz2 = mutable.Set[Int]()\n        val fizzBuzz3 = mutable.Set[Int]()\n\
    \        val fizzBuzz4 = mutable.Set[Int]()\n        val fizzBuzz5 = mutable.Set[Int]()\n\
    \        val fizzBuzz6 = mutable.Set[Int]()\n        val fizzBuzz7 = mutable.Set[Int]()\n\
    \        val fizzBuzz8 = mutable.Set[Int]()\n        val fizzBuzz9 = mutable.Set[Int]()\n\
    \        val fizzBuzz10 = mutable.Set[Int]()\n        val fizzBuzz11 = mutable.Set[Int]()\n\
    \        val fizzBuzz12 = mutable.Set[Int]()\n        val fizzBuzz13 = mutable.Set[Int]()\n\
    \        val fizzBuzz14 = mutable.Set[Int]()\n        val fizzBuzz15 = mutable.Set[Int]()\n\
    \        val fizzBuzz16 = mutable.Set[Int]()\n        val fizzBuzz17 = mutable.Set[Int]()\n\
    \        val fizzBuzz18 = mutable.Set[Int]()\n        val fizzBuzz19 = mutable.Set[Int]()\n\
    \        val fizzBuzz20 = mutable.Set[Int]()\n        val fizzBuzz21 = mutable.Set[Int]()\n\
    \        val fizzBuzz22 = mutable.Set[Int]()\n        val fizzBuzz23 = mutable.Set[Int]()\n\
    \        val fizzBuzz24 = mutable.Set[Int]()\n        val fizzBuzz25 = mutable.Set[Int]()\n\
    \        val fizzBuzz26 = mutable.Set[Int]()\n        val fizzBuzz27 = mutable.Set[Int]()\n\
    \        val fizzBuzz28 = mutable.Set[Int]()\n        val fizzBuzz29 = mutable.Set[Int]()\n\
    \        val fizzBuzz30 = mutable.Set[Int]()\n        val fizzBuzz31 = mutable.Set[Int]()\n\
    \        val fizzBuzz32 = mutable.Set[Int]()\n        val fizzBuzz33 = mutable.Set[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpov94cb9_.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpov94cb9_.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mfizzBuzz\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpov94cb9_.scala:13:24 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfizzBuzz2\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpov94cb9_.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfizzBuzz3\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpov94cb9_.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfizzBuzz4\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpov94cb9_.scala:16:24 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfizzBuzz5\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer exp"
  stdout: ''
  timestamp: 1659804117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val count = mutable.Map.empty[Int, Int]\n\
    \        val divisors = mutable.Set[Int](11, 13)\n        for(i <- 1 to n) {\n\
    \            val remainder = i % 10\n            if(remainder == 7) {\n      \
    \          val key = remainder % divisors.size\n                val value = divisors(key)\n\
    \                count += key -> value\n            }\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_wtujzfi.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.Map.empty[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_wtujzfi.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.Set[\e\
    [35mInt\e[0m](\e[31m11\e[0m, \e[31m13\e[0m)\n\e[31m\e[31m   |\e[0m           \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_wtujzfi.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659804117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val digits = mutable.ListBuffer(7).iterator\n\
    \        val count = mutable.ListBuffer(0)\n        var i = 0\n        while (i\
    \ < n) {\n            if (digits.hasNext) {\n                val d = digits.next()\n\
    \                if (i % 11 == 0 && i % 13 == 0) {\n                    count.append(0)\n\
    \                } else if (i % 11 == 0) {\n                    count.append(1)\n\
    \                } else if (i % 13 == 0) {\n                    count.append(2)\n\
    \                } else {\n                    count.append(0)\n             \
    \   }\n                i += 1\n            } else {\n                i += 1\n\
    \            }\n        }\n        count.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe1zfd6lv.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = mutable.ListBuffer(\e\
    [31m7\e[0m).iterator\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpe1zfd6lv.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.ListBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Int]\n\
    \        for(i <- 1 to n){\n            if(i % 11 == 0 || i % 13 == 0){\n    \
    \            nums += i\n            }\n        }\n        nums.length\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjrga7qmm.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpjrga7qmm.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804072
