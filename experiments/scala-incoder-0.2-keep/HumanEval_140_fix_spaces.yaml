name: HumanEval_140_fix_spaces
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string text, replace all spaces in it with underscores, \n    //\
  \ and if a string has more than 2 consecutive spaces, \n    // then replace all\
  \ consecutive spaces with - \n    // fix_spaces(\"Example\") == \"Example\"\n  \
  \  // fix_spaces(\"Example 1\") == \"Example_1\"\n    // fix_spaces(\" Example 2\"\
  ) == \"_Example_2\"\n    // fix_spaces(\" Example   3\") == \"_Example-3\"\n   \
  \ def fixSpaces(text : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
  )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
  Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
  Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
  Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
  )));\n    }\n\n}\n"
completions: ["        val spaces = text.count(_ == ' ')\n        if(spaces == 0)\
    \ text\n        else text.foldLeft(text){\n            case (acc, c) =>\n    \
    \            if(c == ' ') acc + \"_\"\n                else acc + (if (c == '\
    \ ' && acc == \"\") \"_\" else c)\n        }", "        val spaces = text.count(_\
    \ == ' ')\n        if (spaces == 0) text\n        else if (spaces == 1) text +\
    \ \"_\"\n        else text.take(spaces - 1).mkString + \"_\" + text.drop(spaces\
    \ - 1)", "        val spaces = text.count(_ == ' ')\n        if (spaces == 0)\
    \ text\n        else if (spaces == 1) text + \"_\"\n        else if (spaces ==\
    \ 2) text + \"_\"\n        else text.replaceAll(' ', '_')", "        val spaces\
    \ = text.count(_ == ' ')\n        if (spaces > 2) {\n            val consecutiveSpaces\
    \ = text.count(_ == ' ')\n            val result = text.substring(0, spaces -\
    \ 1) + text.substring(spaces - 1, consecutiveSpaces - 1) + text.substring(consecutiveSpaces)\n\
    \            fix_spaces(result)\n        } else {\n            text\n        }",
  "        val words = text.split(\" \")\n        val fixedWords = mutable.ListBuffer[String]()\n\
    \        words.foreach(word => {\n            val fixedWord = word.replaceAll(\"\
    \ \", \"_\")\n            if(fixedWord.length > 2) {\n                fixedWords\
    \ += fixedWord\n            }\n        })\n        fixedWords.mkString(\" \")",
  "        var newText : String = \"\"\n        var lastSpaceIndex : Int = -1\n  \
    \      var lastSpaceChar : Char = ' '\n        var spaceCount : Int = 0\n    \
    \    for (i <- 0 until text.length)\n        {\n            if (text.charAt(i)\
    \ == ' ')\n            {\n                if (lastSpaceIndex == -1)\n        \
    \        {\n                    lastSpaceIndex = i\n                    lastSpaceChar\
    \ = text.charAt(i)\n                }\n                else\n                {\n\
    \                    if (lastSpaceIndex != i)\n                    {\n       \
    \                 newText += text.charAt(lastSpaceIndex) + text.charAt(i)\n  \
    \                      lastSpaceIndex = i\n                        lastSpaceChar\
    \ = text.charAt(i)\n                    }\n                    else\n        \
    \            {\n                        newText += text.charAt(i)\n          \
    \          }\n                }\n                spaceCount += 1\n           \
    \ }\n            else\n            {\n                if (spaceCount > 1)\n  \
    \              {\n                    newText += text.charAt(lastSpaceIndex) +\
    \ text.charAt(i)\n                    lastSpaceIndex = -1\n                  \
    \  lastSpaceChar = ' '\n                    spaceCount = 0\n                }\n\
    \                else\n                {\n                    newText += text.charAt(i)\n\
    \                }\n            }\n        }\n        if (lastSpaceIndex != -1)\n\
    \        {\n            newText += text.charAt(lastSpaceIndex)\n        }\n  \
    \      return newText", "        val spaces = text.count(_ == ' ')\n        if(spaces\
    \ > 2) {\n            val spacedText = text.split(\" \").map(_.toLowerCase).toList\n\
    \            val spacedText2 = spacedText.zipWithIndex.filter(_._2 % 2 == 1).map(_._1).toList\n\
    \            val spacedText3 = spacedText2.zipWithIndex.filter(_._2 % 2 == 0).map(_._1).toList\n\
    \            val spacedText4 = spacedText3.map(_.replaceAll(\" \", \"-\"))\n \
    \           spacedText4.mkString(\" \")\n        } else {\n            text\n\
    \        }", "        var fixedText = text\n        fixedText = fixedText.replaceAll(\"\
    \\\\s+\", \"_\")\n        fixedText = fixedText.replaceAll(\"\\\\s{2,}\", \"-\"\
    )\n        return fixedText", "        val spaces = text.count(_ == ' ')\n   \
    \     if (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n    \
    \    else if (spaces == 2) text + \"_\"\n        else text.replaceAll(\"\\\\s+\"\
    , \"_\")", "        val spaces = text.count(_ == ' ')\n        if (spaces == 0)\
    \ text\n        else if (spaces == 1) text + \"_\"\n        else if (spaces ==\
    \ 2) text + \"_\"\n        else text.replaceAll(\"\\\\s+\", \"_\")", "       \
    \ val spaces = text.count(_ == ' ')\n        if (spaces > 2) {\n            val\
    \ spacedText = text.split(\" \").map(x => if (x == \" \") \"_\" else x).mkString\n\
    \            val spacedText2 = spacedText.split(\" \").map(x => if (x == \" \"\
    ) \"-\" else x).mkString\n            spacedText2\n        } else {\n        \
    \    text\n        }", "        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ if (spaces == 2) text + \"_-\"\n        else text.drop(1).dropRight(1).drop(1).mkString\
    \ + \"_\"", "        val spaces = text.split(\" \").map(_.toLowerCase).toList\n\
    \        val consecutiveSpaces = spaces.sliding(2).map(_.toLowerCase).toList\n\
    \        val consecutiveSpacesString = consecutiveSpaces.mkString(\"\")\n    \
    \    val consecutiveSpacesString2 = consecutiveSpacesString.replaceAll(\" \",\
    \ \"-\")\n        val fixedText = spaces.mkString(\"\") + consecutiveSpacesString2\n\
    \        fixedText", "        val spaces = text.split(\" \").map(_.toLowerCase).toList\n\
    \        val consecutiveSpaces = spaces.sliding(2).map(_.toLowerCase).toList\n\
    \        val consecutiveSpacesString = consecutiveSpaces.mkString(\" \")\n   \
    \     val consecutiveSpacesString2 = consecutiveSpacesString.replaceAll(\" \"\
    , \"-\")\n        val fixedText = spaces.mkString(\" \")\n        if (fixedText.length\
    \ > 2 && consecutiveSpacesString2.length > 2) {\n            fixedText\n     \
    \   } else {\n            consecutiveSpacesString2\n        }", "        val spaces\
    \ = text.count(_ == ' ')\n        if (spaces == 0) text\n        else if (spaces\
    \ == 1) text.replace(\" \", \"_\")\n        else text.replaceAll(\"\\\\s+\", \"\
    _\")", "        val spaces = text.count(_ == ' ')\n        if (spaces == 0) text\n\
    \        else if (spaces == 1) text + \"_\"\n        else if (spaces == 2) text\
    \ + \"_-\"\n        else text.replaceAll(\"\\\\s+\", \"_\")", "        val spaces\
    \ = text.count(_ == ' ')\n        if (spaces == 0) text\n        else if (spaces\
    \ == 1) text + \"_\"\n        else if (spaces == 2) text + \"_-\"\n        else\
    \ text.replaceAll(\"\\\\s+\", \"_\")", "        var result = text\n        val\
    \ spaces = text.count(_ == ' ')\n        if (spaces > 2) {\n            val spaces\
    \ = text.count(_ == ' ')\n            val lastSpace = text.lastIndexOf(' ')\n\
    \            val lastSpaceIndex = text.lastIndexOf(' ', spaces - 1)\n        \
    \    val lastSpaceIndex = text.lastIndexOf(' ', spaces - 2)\n            val lastSpaceIndex\
    \ = text.lastIndexOf(' ', spaces - 3)\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ', spaces - 4)\n            val lastSpaceIndex = text.lastIndexOf(' ', spaces\
    \ - 5)\n            val lastSpaceIndex = text.lastIndexOf(' ', spaces - 6)\n \
    \           val lastSpaceIndex = text.lastIndexOf(' ', spaces - 7)\n         \
    \   val lastSpaceIndex = text.lastIndexOf(' ', spaces - 8)\n            val lastSpaceIndex\
    \ = text.lastIndexOf(' ', spaces - 9)\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ', spaces - 10)\n            val lastSpaceIndex = text.lastIndexOf(' ', spaces\
    \ - 11)\n            val lastSpaceIndex = text.lastIndexOf(' ', spaces - 12)\n\
    \            val lastSpaceIndex = text.lastIndexOf(' ', spaces - 13)\n       \
    \     val lastSpaceIndex = text.lastIndexOf(' ', spaces - 14)\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ', spaces - 15)\n            val lastSpaceIndex\
    \ = text.lastIndexOf(' ', spaces - 16)\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ', spaces - 17)\n            val lastSpaceIndex = text.lastIndexOf(' ', spaces\
    \ - 18)\n            val lastSpaceIndex = text.lastIndexOf(' ', spaces - 19)\n\
    \            val lastSpaceIndex = text.lastIndexOf(' ', spaces - 20)\n       \
    \     val lastSpaceIndex = text.lastIndexOf(' ', spaces - 21)\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ', spaces - 22)\n            val lastSpaceIndex\
    \ = text.lastIndexOf(' ', spaces - 23)\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ', spaces - 24)\n            val lastSpaceIndex = text.lastIndexOf(' ', spaces\
    \ - 25)\n            val lastSpaceIndex = text.lastIndexOf(' ', spaces - 26)\n\
    \            val lastSpaceIndex = text.lastIndexOf(' ', spaces - 27)\n       \
    \     val lastSpaceIndex = text.lastIndexOf(' ', spaces - 28)\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ', spaces - 29)\n            val lastSpaceIndex\
    \ = text.lastIndexOf(' ', spaces - 30)\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ', spaces - 31)\n            val lastSpaceIndex = text.lastIndexOf(' ', spaces\
    \ - 32)\n            val lastSpaceIndex = text.lastIndexOf(' ', spaces - 33)\n\
    \            val ", "        val spaces = text.count(_ == ' ')\n        if (spaces\
    \ > 2) {\n            val spacedText = text.split(' ').map(_.toLowerCase).map(_.toString).mkString(\"\
    -\")\n            spacedText\n        } else {\n            text\n        }",
  "        val spaces = text.count(_ == ' ')\n        val consecutiveSpaces = text.count(_\
    \ == ' ' && _ == ' ')\n        if (spaces > 2 && consecutiveSpaces > 0) {\n  \
    \          val newText = text.split(' ').map(x => if (x == \" \") \"_\" else x).mkString\n\
    \            fixSpaces(newText)\n        } else {\n            text\n        }"]
stop_tokens:
- "\n    }\n"
