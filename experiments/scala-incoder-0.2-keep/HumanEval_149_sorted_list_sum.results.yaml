language: scala
name: HumanEval_149_sorted_list_sum
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            if(x.length%2 != 0) newList += x\n  \
    \      })\n        newList.sortBy(x => x.length)\n        newList.sortBy(x =>\
    \ x.length)\n        newList.sortBy(x => x.length)\n        newList.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyr68m4l4.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            val newWord = x.split(\" \").map(_.length).sum\n\
    \            newList += x if(newWord % 2 == 1)\n        })\n        newList.sortBy(x\
    \ => x.split(\" \").map(_.length).sum)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpcia25zng.scala:21:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            newList += x \e[33mif\e[0m(newWord % \e[31m2\e\
    [0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^\e[0m\n\e\
    [31m   |\e[0m                         end of statement expected but 'if' found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcia25zng.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val res = lst.filterNot(_.length%2==0).sortBy(_.length)\n\
    \        res.sortBy(_.toLowerCase + _.toUpperCase)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpgek8q5uu.scala:19:19 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        res.sortBy(_.toLowerCase + _.toUpperCase)\n\e\
    [31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Wrong number of parameters, expected: 1\n\e[31m\e\
    [31m-- Error: /tmp/tmpgek8q5uu.scala:19:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        res.sortBy(_.toLowerCase + _.toUpperCase)\n\e\
    [31m\e[31m   |\e[0m                                                 ^\e[0m\n\e\
    [31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mDeprecatedFloatOrdering\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mInt\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e\
    [0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659795239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            val newWord = x.split(\" \").filter(_ =>\
    \ _.length == 1).mkString(\" \")\n            newList += newWord\n        })\n\
    \        newList.sortWith(_.length > _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpngt5to5d.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmpngt5to5d.scala:20:51 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mnewWord\e[0m = x.split(\e\
    [31m\" \"\e[0m).filter(_ => _.length == \e[31m1\e[0m).mkString(\e[31m\" \"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                   ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$2 of expanded function:\n\e[31m\
    \   |\e[0m   _$2 => _$2.length == 1.\n2 errors found\n"
  stdout: ''
  timestamp: 1659795238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            val splitted = x.split(\" \").map(_.toInt)\n\
    \            val sum = splitted.sum\n            if (sum % 2 == 0) {\n       \
    \         newList += x\n            }\n        })\n        newList.sortBy(x =>\
    \ x.split(\" \").map(_.toInt).sum)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmae8kqly.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => if (x.length % 2 == 0) result.add(x) else result.add(x))\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoo6rqg4_.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     for(i <- 0 until lst.length){\n            if(lst(i).length() % 2 != 0){\n\
    \                newList += lst(i)\n            }\n        }\n        newList.sortWith((x,y)\
    \ => x.length < y.length)\n        newList.sortWith((x,y) => x.compareTo(y) ==\
    \ 0)\n        newList.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe8esblwf.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => if (x.length % 2 != 0) result += x else result.add(x))\n\
    \        result.sortWith((x, y) => x.length <= y.length)\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn15k87m8.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     for(i <- 0 until lst.length){\n            val word = lst(i)\n         \
    \   if(word.length % 2 == 1){\n                newList += word\n            }\n\
    \        }\n        newList.sortWith((a, b) => a.length < b.length)\n        newList.sortWith((a,\
    \ b) => a < b)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8eqpslci.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            val newWord = x.split(\" \").map(_.length).sum\n\
    \            newList += x if(newWord % 2 == 1)\n        })\n        newList.sortBy(x\
    \ => x.split(\" \").map(_.length).sum)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpwhk0r68v.scala:21:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            newList += x \e[33mif\e[0m(newWord % \e[31m2\e\
    [0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^\e[0m\n\e\
    [31m   |\e[0m                         end of statement expected but 'if' found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwhk0r68v.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            val newWord = x.split(\" \").filter(_ =>\
    \ _.length != 0).mkString(\" \")\n            newList += newWord\n        })\n\
    \        newList.sortBy(x => x.split(\" \").length)\n        newList.sortBy(x\
    \ => x.split(\" \").mkString.toLowerCase)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgw3rhjib.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmpgw3rhjib.scala:20:51 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mnewWord\e[0m = x.split(\e\
    [31m\" \"\e[0m).filter(_ => _.length != \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                   ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$2 of expanded function:\n\e[31m\
    \   |\e[0m   _$2 => _$2.length != 0.\n2 errors found\n"
  stdout: ''
  timestamp: 1659795238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     for(i <- 0 until lst.length){\n            val word = lst(i)\n         \
    \   if(word.length % 2 == 1){\n                newList += word\n            }\n\
    \        }\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ > _.length)\n        newList.sortWith(_.length < _.length)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzgv9bd2s.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            val newWord = x.split(\" \").filterNot(_.length%2==0).sorted\n\
    \            newList += newWord\n        })\n        newList.sortBy(x => x.split(\"\
    \ \").length)\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbc_7v8zv.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            if(lst(i).length() % 2 == 1)\
    \ {\n                newList += lst(i)\n            }\n        }\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb_fcwyqz.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => newList += x)\n        newList.sortWith(_.length < _.length)\n\
    \        newList.sortWith(_.length > _.length)\n        newList.sortWith(_.length\
    \ > _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjj8zk2k6.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => newList += x)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp40a4rhhr.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            if(x.length % 2 != 0) newList += x\n   \
    \     })\n        newList.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxbf1ova_.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => newList += x)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1eqg21tx.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp1eqg21tx.scala:18:22 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            if (x.length % 2 == 1) {\n             \
    \   newList += x\n            }\n        })\n        newList.sortWith((x, y) =>\
    \ x.length <= y.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp847n5o_t.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     for(i <- 0 until lst.size) {\n            if(lst(i).length() % 2 == 1) {\n\
    \                newList += lst(i)\n            }\n        }\n        newList.sortWith((x,\
    \ y) => x.compareTo(y))\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgq631m03.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            val newWord = x.split(\" \").map(_.length).sum\n\
    \            newList += x if(newWord % 2 == 1)\n        })\n        newList.sortBy(x\
    \ => x.split(\" \").map(_.length).sum)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpwhk0r68v.scala:21:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            newList += x \e[33mif\e[0m(newWord % \e[31m2\e\
    [0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^\e[0m\n\e\
    [31m   |\e[0m                         end of statement expected but 'if' found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwhk0r68v.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            if (x.length() % 2 != 0) {\n        \
    \        newList += x\n            }\n        })\n        newList.sortWith(_ <\
    \ _)\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpasx7zzet.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     for(i <- 0 until lst.size){\n            if(lst(i).length() % 2 != 0){\n\
    \                newList += lst(i)\n            }\n        }\n        newList.sortBy(x\
    \ => x.length)\n        newList.sortBy(x => x.toLowerCase )\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe3zbjzc3.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => {\n            val newList = x.split(\" \").filter(x\
    \ => x.length % 2 == 0).map(x => x.toUpperCase()).sorted\n            result.addAll(newList)\n\
    \        })\n        result.sortBy(x => x.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu3ig3bpp.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            if(x.length%2==1){\n                newList\
    \ += x\n            }\n        })\n        newList.sortBy(x => x.length)\n   \
    \     newList.sortBy(x => x.length)\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptd7b3k4b.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            if(x.length % 2 == 1){\n            \
    \    newList += x\n            }\n        })\n        newList.sortWith((x,y) =>\
    \ x.length <= y.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl0gnuvff.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => newList += x)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsj_68jv6.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => newList += x)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\"\
    , \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp86fiuq95.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => newList += x)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.toLowerCase )\n        newList.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn8so5kur.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => if (x.length % 2 != 0) result += x else result.add(x))\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpflw49gg8.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795245
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     for(i <- 0 until lst.size) {\n            val word = lst(i)\n          \
    \  val newWord = word.filterNot(_.length%2 == 0)\n            newList += newWord\n\
    \        }\n        newList.sortBy(_.length)\n        newList.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq_e38cq4.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpq_e38cq4.scala:21:43 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mnewWord\e[0m = word.filterNot(_.length%\e\
    [31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                           \
    \              ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \    value length is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659795247
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            if(x.length % 2 == 1){\n               \
    \ newList += x\n            }\n        })\n        newList.sortWith((x,y) => x.length\
    \ <= y.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnk3e7a0n.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795245
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            if (x.length % 2 != 0) {\n          \
    \      newList += x\n            }\n        })\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv4inepd4.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795245
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => newList += x)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsj_68jv6.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => if (x.length % 2 != 0) result += x else result.add(x))\n\
    \        result.sortWith((x, y) => x.length <= y.length)\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn15k87m8.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => newList += x)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsj_68jv6.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val word = lst(i)\n       \
    \     val length = word.length\n            if(length % 2 == 1) {\n          \
    \      newList += word\n            }\n        }\n        newList.sortWith((x,\
    \ y) => x.length <= y.length)\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1at4udty.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795245
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            if(lst(i).length() % 2 != 0)\
    \ {\n                newList += lst(i)\n            }\n        }\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphcap4yfq.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795245
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => newList += x)\n        newList.sortWith(_.length > _.length)\n\
    \        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ > _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi_s4wjzn.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795245
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => newList += x)\n        newList.sortWith((x, y) => x.length\
    \ <= y.length)\n        newList.sortWith((x, y) => x.compareTo(y) < 0)\n     \
    \   newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvhhcx4sa.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795245
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        lst.foreach(word => {\n            val length = word.length\n       \
    \     if (length % 2 == 1) {\n                result.add(word)\n            }\n\
    \        })\n        result.sortWith((x, y) => x.length < y.length)\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5xeo5gr5.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795245
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            val newWord = x.split(\" \").filter(_ =>\
    \ _.length == x.split(\" \").length).sortBy(_.toLower)\n            newList +=\
    \ newWord.mkString(\" \")\n        })\n        newList.sortBy(_.toLower)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprs41bsur.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmprs41bsur.scala:20:51 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mnewWord\e[0m = x.split(\e\
    [31m\" \"\e[0m).filter(_ => _.length == x.split(\e[31m\" \"\e[0m).length).sortBy(_.toLower)\n\
    \e[31m\e[31m   |\e[0m                                                   ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$2 of expanded function:\n\e[31m\
    \   |\e[0m   _$2 => _$2.length == x.split(\e[32m\" \"\e[0m).length.\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmprs41bsur.scala:20:93 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mnewWord\e[0m = x.split(\e\
    [31m\" \"\e[0m).filter(_ => _.length == x.split(\e[31m\" \"\e[0m).length).sortBy(_.toLower)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                       value toLower is not a member of String\n\e[31m\e[31m--\
    \ Error: /tmp/tmprs41bsur.scala:20:101 ----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mnewWord\e[0m = x.split(\e\
    [31m\" \"\e[0m).filter(_ => _.length == x.split(\e[31m\" \"\e[0m).length).sortBy(_.toLower)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                             ^\e[0m\n\e[31m   |\e[0mambiguous\
    \ given instances: both \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m\
    \ \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mString\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m match type Ordering[B] of parameter ord of \e[33mmethod\e\
    [0m \e[35msortBy\e[0m in \e[33mclass\e[0m \e[35mArrayOps\e[0m\n4 e"
  stdout: ''
  timestamp: 1659795247
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            if(lst(i).length() % 2 != 0)\
    \ {\n                newList += lst(i)\n            }\n        }\n        newList.sortWith((x,\
    \ y) => x.compareTo(y))\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7megvu05.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795245
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            if (x.length % 2 != 0) {\n          \
    \      newList += x\n            }\n        })\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.toLowerCase )\n        newList.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvdbc65j8.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795245
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            val newWord = x.split(\" \").map(_.length).filter(_\
    \ % 2 == 0).mkString(\" \")\n            newList += newWord\n        })\n    \
    \    newList.sortBy(x => x.split(\" \").map(_.length).filter(_ % 2 == 0).mkString(\"\
    \ \"))\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkrfspinz.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => newList += x)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsj_68jv6.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     for(i <- 0 until lst.size) {\n            val word = lst(i)\n          \
    \  if(word.length % 2 == 1) {\n                newList += word\n            }\n\
    \        }\n        newList.sortWith((x, y) => x.length <= y.length)\n       \
    \ newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplol6ld8m.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            val splitted = x.split(\" \")\n        \
    \    val length = splitted.length\n            val newWord = splitted.mkString(\"\
    \ \")\n            if (length % 2 == 1) {\n                newList += newWord\n\
    \            }\n        })\n        newList.sortBy(x => x.length)\n        newList.sortBy(x\
    \ => x.toLowerCase )\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnlgiwwwc.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            if(x.length % 2 == 1){\n            \
    \    newList += x\n            }\n        })\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.toLowerCase )\n        newList.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsfe8owmk.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     for(i <- 0 until lst.size) {\n            if(lst(i).length() % 2 != 0) {\n\
    \                newList += lst(i)\n            }\n        }\n        newList.sortWith((x,\
    \ y) => x.length < y.length)\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp30sq67mb.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            val newWord = x.split(\" \").filterNot(_.isEmpty).map(_.length).sum\n\
    \            newList += x + \" \" + newWord\n        })\n        newList.sortBy(x\
    \ => x.split(\" \")(1).length)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfahpnzdp.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => newList += x)\n        newList.sortWith(_.length < _.length)\n\
    \        newList.sortWith(_.length > _.length)\n        newList.sortWith(_.length\
    \ == _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ == _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ == _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ == _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ == _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ == _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ == _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ == _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ == _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ == _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ == _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ == _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ == _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ == _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ == _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ == _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ == _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ == _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ == _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ == _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ == _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpcptspgh2.scala:64:25 ---------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m        newList.sortWith(\n\e[31m\e[31m   |\e[0m    \
    \                     ^\e[0m\n\e[31m   |\e[0m                         expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpcptspgh2.scala:18:22 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => {\n            val newList = x.split(\" \").map(_.toInt).filter(_\
    \ % 2 == 0).sorted\n            result.addAll(newList)\n        })\n        result.sortBy(x\
    \ => x)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptiid8qsz.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            val newWord = x.split(\" \").map(_.length).sum\n\
    \            newList += x if(newWord % 2 == 1)\n        })\n        newList.sortWith((x,\
    \ y) => x.split(\" \").map(_.length).sum - y.split(\" \").map(_.length).sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp_yesy_gb.scala:21:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            newList += x \e[33mif\e[0m(newWord % \e[31m2\e\
    [0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^\e[0m\n\e\
    [31m   |\e[0m                         end of statement expected but 'if' found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_yesy_gb.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     for(i <- 0 until lst.length){\n            if(lst(i).length%2 != 0){\n \
    \               newList += lst(i)\n            }\n        }\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyooi6m9a.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => newList += x)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\"\
    , \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp86fiuq95.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            if(x.length % 2 == 1){\n               \
    \ newList += x\n            }\n        })\n        newList.sortWith(_.length <\
    \ _.length)\n        newList.sortWith(_.length == _.length)\n        newList.sortWith(_.length\
    \ == _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2ds8w7ze.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => newList += x)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsj_68jv6.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            if(x.length%2==0){\n                newList\
    \ += x\n            }\n        })\n        newList.sortWith((x,y) => x.length\
    \ <= y.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmponjd5k2l.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            if(x.length%2 == 1){\n              \
    \  newList += x\n            }\n        })\n        newList.sortWith((x,y) =>\
    \ x.compareTo(y))\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmcnh0xt7.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     val newList2 = mutable.ListBuffer[String]()\n        lst.foreach(x => {\n\
    \            if (x.length % 2 != 0) {\n                newList += x\n        \
    \    } else {\n                newList2 += x\n            }\n        })\n    \
    \    newList.sortWith(_.length < _.length)\n        newList2.sortWith(_.length\
    \ < _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyin89rzx.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpyin89rzx.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewList2\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            if(x.length % 2 != 0){\n               \
    \ newList += x\n            }\n        })\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjw0jdy_m.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => if (x.length % 2 == 0) result.add(x) else result.add(x))\n\
    \        result.sortWith((x, y) => x.length <= y.length)\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjoh6r5we.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => newList += x)\n        newList.sortWith(_.length < _.length)\n\
    \        newList.sortWith(_.length > _.length)\n        newList.sortWith(_.length\
    \ > _.length)\n        newList.sortWith(_.length < _.length)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo8zz1k3x.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        val newSet = mutable.Set.empty[String]\n        lst.foreach(x => {\n\
    \            val newWord = x.split(\" \").map(_.length).sum\n            if (newWord\
    \ % 2 == 1) {\n                newList += x\n                newSet += x\n   \
    \         }\n        })\n        newList.sortWith(_.length < _.length)\n     \
    \   newSet.sortWith(_.length < _.length)\n        newList.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\"\
    , \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplkhrntpu.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmplkhrntpu.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewSet\e[0m = mutable.Set.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            val newWord = x.split(\" \").filterNot(_.length%2==0).sortBy(_.length).mkString(\"\
    \ \")\n            newList += newWord\n        })\n        newList.sortBy(_.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz3thtizg.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795253
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            if (x.length % 2 != 0) {\n          \
    \      newList += x\n            }\n        })\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\"\
    , \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxxtctuse.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => newList += x)\n        newList.sortWith(_.length < _.length)\n\
    \        newList.sortWith(_.length > _.length)\n        newList.sortWith(_.length\
    \ > _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjj8zk2k6.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => newList += x)\n        newList.sortWith((x, y) => x.length\
    \ <= y.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr5_rbm7u.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     for(i <- 0 until lst.length){\n            val word = lst(i)\n         \
    \   if(word.length % 2 != 0){\n                newList += word\n            }\n\
    \        }\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ > _.length)\n        newList.sortWith(_.length > _.length)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwgx4apzi.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.length){\n            val word = lst(i)\n      \
    \      val length = word.length\n            if(length % 2 == 1){\n          \
    \      result.add(word)\n            }\n        }\n        result.sortWith((x,\
    \ y) => x.length <= y.length)\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpconpwri5.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795253
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            if (x.length % 2 == 0) {\n             \
    \   newList += x\n            }\n        })\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length > _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphym5o9rv.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => newList += x)\n        newList.sortWith(_.length < _.length)\n\
    \        newList.sortWith(_.length == _.length)\n        newList.sortWith(_.length\
    \ == _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxgcoih5h.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            if (x.length % 2 == 0) {\n             \
    \   newList += x\n            }\n        })\n        newList.sortWith((x, y) =>\
    \ x.length <= y.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphohhyrg5.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795253
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            if (x.length % 2 == 1) {\n          \
    \      newList += x\n            }\n        })\n        newList.sortWith((x, y)\
    \ => x.length <= y.length)\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5n28e5yj.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795253
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => {\n            val l = x.split(\" \").length\n     \
    \       if (l % 2 == 1) {\n                result.add(x)\n            }\n    \
    \    })\n        result.sortBy(x => x.split(\" \").length)\n        result.sortBy(x\
    \ => x.split(\" \").mkString.toLowerCase)\n        result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\"\
    , \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpatjbaxr0.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.length){\n            val word = lst(i)\n      \
    \      if(word.length % 2 != 0){\n                newList += word\n          \
    \  }\n        }\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ > _.length)\n        newList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9jvemiiq.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => newList += x)\n        newList.sortWith(_.length < _.length)\n\
    \        newList.sortWith(_.length == _.length)\n        newList.sortWith(_.length\
    \ > _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeus3yksn.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795257
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            if(x.length() % 2 == 1){\n             \
    \   newList += x\n            }\n        })\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcszs58u5.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     for(i <- 0 until lst.size) {\n            val word = lst(i)\n          \
    \  if(word.length % 2 == 1) {\n                newList += word\n            }\n\
    \        }\n        newList.sortWith((x, y) => x.length <= y.length)\n       \
    \ newList.sortWith((x, y) => x.toString.compareTo(y.toString) < 0)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ilfpk9o.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => newList += x)\n        newList.sortWith((x, y) => x.length\
    \ <= y.length ? x.compareTo(y) : x.length < y.length ? -1 : 0)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqzhj8wij.scala:20:100 --------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        newList.sortWith((\e[36mx\e[0m, \e[36my\e[0m)\
    \ => x.length <= y.length ? x.compareTo(y) : x.length \e[35m<\e[0m y.length \e\
    [35m?\e[0m -\e[31m1\e[0m : \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m              \
    \                                                                            \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \  ')' expected, but ':' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqzhj8wij.scala:18:22\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mnewList\e[0m = mutable.ListBuffer.empty[\e[35mString\e[0m]\n\e[31m\e[31m \
    \  |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            val newWord = x.split(\" \").filterNot(_.length%2\
    \ == 0).mkString(\" \")\n            newList += newWord\n        })\n        newList.sortBy(x\
    \ => x.split(\" \").length)\n        newList.sortBy(x => x.split(\" \").mkString(\"\
    \ \"))\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8cdiiupc.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.length){\n            val word = lst(i)\n      \
    \      if(word.length % 2 != 0){\n                result ++= word\n          \
    \  }\n        }\n        result ++= lst.sortWith(_.length < _.length)\n      \
    \  result ++= lst.sortWith(_.length > _.length)\n        result ++= lst.sortWith(_.length\
    \ == _.length)\n        result ++= lst.sortWith(_.length == _.length)\n      \
    \  result ++= lst.sortWith(_.length < _.length)\n        result ++= lst.sortWith(_.length\
    \ > _.length)\n        result ++= lst.sortWith(_.length == _.length)\n       \
    \ result ++= lst.sortWith(_.length == _.length)\n        result ++= lst.sortWith(_.length\
    \ < _.length)\n        result ++= lst.sortWith(_.length > _.length)\n        result\
    \ ++= lst.sortWith(_.length == _.length)\n        result ++= lst.sortWith(_.length\
    \ == _.length)\n        result ++= lst.sortWith(_.length < _.length)\n       \
    \ result ++= lst.sortWith(_.length > _.length)\n        result ++= lst.sortWith(_.length\
    \ == _.length)\n        result ++= lst.sortWith(_.length == _.length)\n      \
    \  result ++= lst.sortWith(_.length < _.length)\n        result ++= lst.sortWith(_.length\
    \ > _.length)\n        result ++= lst.sortWith(_.length == _.length)\n       \
    \ result ++= lst.sortWith(_.length == _.length)\n        result ++= lst.sortWith(_.length\
    \ < _.length)\n        result ++= lst.sortWith(_.length > _.length)\n        result\
    \ ++= lst.sortWith(_.length == _.length)\n        result ++= lst.sortWith(_.length\
    \ == _.length)\n        result ++= lst.sortWith(_.length < _.length)\n       \
    \ result ++= lst.sortWith(_.length > _.length)\n        result ++= lst.sortWith(_.length\
    \ == _.length)\n        result ++= lst.sortWith(_.length == _.length)\n      \
    \  result ++= lst.sortWith(_.length < _.length)\n        result ++= lst.sortWith(_.length\
    \ > _.length)\n        result ++= lst.sortWith(_.length == _.length)\n       \
    \ result ++= lst.sort\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppf3gaa90.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            if(lst(i).length() % 2 == 1)\
    \ {\n                newList += lst(i)\n            }\n        }\n        newList.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd99y8am5.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     for(i <- 0 until lst.size) {\n            if(lst(i).length() % 2 == 1) {\n\
    \                newList += lst(i)\n            }\n        }\n        newList.sortBy(x\
    \ => x.length)\n        newList.sortBy(x => x.toUpperCase)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqfqwnzln.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => newList += x)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsj_68jv6.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     for(i <- 0 until lst.size) {\n            if(lst(i).length() % 2 == 1) {\n\
    \                newList += lst(i)\n            }\n        }\n        newList.sortBy(x\
    \ => x.length)\n        newList.sortBy(x => x.length)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsszta7yv.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => {\n            val words = x.split(\" \").map(_.toInt)\n\
    \            val sum = words.sum\n            if (sum % 2 == 1) {\n          \
    \      result.add(x)\n            }\n        })\n        result.sortBy(x => x.split(\"\
    \ \").map(_.toInt).sum)\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppix9i8ed.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => newList += x)\n        newList.sortWith(_.length > _.length)\n\
    \        newList.sortWith(_.length > _.length)\n        newList.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptdd50fa6.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => newList += x)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsj_68jv6.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     val newList2 = mutable.ListBuffer[String]()\n        val newList3 = mutable.ListBuffer[String]()\n\
    \        val newList4 = mutable.ListBuffer[String]()\n        val newList5 = mutable.ListBuffer[String]()\n\
    \        val newList6 = mutable.ListBuffer[String]()\n        val newList7 = mutable.ListBuffer[String]()\n\
    \        val newList8 = mutable.ListBuffer[String]()\n        val newList9 = mutable.ListBuffer[String]()\n\
    \        val newList10 = mutable.ListBuffer[String]()\n        val newList11 =\
    \ mutable.ListBuffer[String]()\n        val newList12 = mutable.ListBuffer[String]()\n\
    \        val newList13 = mutable.ListBuffer[String]()\n        val newList14 =\
    \ mutable.ListBuffer[String]()\n        val newList15 = mutable.ListBuffer[String]()\n\
    \        val newList16 = mutable.ListBuffer[String]()\n        val newList17 =\
    \ mutable.ListBuffer[String]()\n        val newList18 = mutable.ListBuffer[String]()\n\
    \        val newList19 = mutable.ListBuffer[String]()\n        val newList20 =\
    \ mutable.ListBuffer[String]()\n        val newList21 = mutable.ListBuffer[String]()\n\
    \        val newList22 = mutable.ListBuffer[String]()\n        val newList23 =\
    \ mutable.ListBuffer[String]()\n        val newList24 = mutable.ListBuffer[String]()\n\
    \        val newList25 = mutable.ListBuffer[String]()\n        val newList26 =\
    \ mutable.ListBuffer[String]()\n        val newList27 = mutable.ListBuffer[String]()\n\
    \        val newList28 = mutable.ListBuffer[String]()\n        val newList29 =\
    \ mutable.ListBuffer[String]()\n        val newList30 = mutable.ListBuffer[String]()\n\
    \        val newList31 = mutable.ListBuffer[String]()\n        val newList32 =\
    \ mutable.ListBuffer[String]()\n        val newList33 = mutable.ListBuffer[String]()\n\
    \        val newList34 = mutable.ListBuffer[String]()\n        val newList35 =\
    \ mutable.ListBuffer[String]()\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfmbj6hjw.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfmbj6hjw.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewList2\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfmbj6hjw.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList3\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfmbj6hjw.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnewList4\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfmbj6hjw.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnewList5\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfmbj6hjw.scala:23:23 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    "
  stdout: ''
  timestamp: 1659795261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            if(x.length%2 == 1){\n                newList\
    \ += x\n            }\n        })\n        newList.sortWith(_ < _)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaa7wf020.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            val newWord = x.split(\" \").map(_.length).sum\n\
    \            if(newWord % 2 == 1){\n                newList += x\n           \
    \ }\n        })\n        newList.sortWith(_.length < _.length)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\"\
    , \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3r09rc2b.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            if(x.length % 2 != 0){\n            \
    \    newList += x\n            }\n        })\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_03edpnj.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            val splitted = x.split(\" \")\n        \
    \    val length = splitted.length\n            if (length % 2 == 1) {\n      \
    \          newList += x\n            }\n        })\n        newList.sortBy(x =>\
    \ x.split(\" \").length)\n        newList.sortBy(x => x.split(\" \").mkString.toUpperCase)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpge7iwenf.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => {\n            if (x.length % 2 == 0) {\n          \
    \      result.add(x)\n            }\n        })\n        result.sortWith((x, y)\
    \ => x.length <= y.length)\n        result.sortWith((x, y) => x.compareTo(y) ==\
    \ 0)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps5rqtn2d.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     for(i <- 0 until lst.size){\n            if(lst(i).length() % 2 == 1){\n\
    \                newList += lst(i)\n            }\n        }\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length > _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpidfon_py.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     for(i <- 0 until lst.length){\n            val word = lst(i)\n         \
    \   val newWord = word.filter(_ => !(i%2==0))\n            newList += newWord\n\
    \        }\n        newList.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgnb30fr5.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => newList += x)\n        newList.sortWith(_.length < _.length)\n\
    \        newList.sortWith(_.length == _.length)\n        newList.sortWith(_.toLowerCase\
    \ < _.toLowerCase )\n        newList.sortWith(_.toLowerCase == _.toLowerCase )\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph7zqyl6x.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.length){\n            if(lst(i).length%2 != 0){\n\
    \                newList += lst(i)\n            }\n        }\n        newList.sortBy(x\
    \ => x.length)\n        newList.sortBy(x => x.toUpperCase)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5pxt56pb.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            if(x.length % 2 == 1){\n               \
    \ newList += x\n            }\n        })\n        newList.sortWith(_.length <\
    \ _.length)\n        newList.sortWith(_.length > _.length)\n        newList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjkg82vqw.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => newList += x)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1eqg21tx.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp1eqg21tx.scala:18:22 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        val temp = new mutable.ListBuffer[String]()\n        for(i <- 0 until\
    \ lst.length){\n            if(lst(i).length%2 != 0){\n                temp +=\
    \ lst(i)\n            }\n        }\n        for(i <- 0 until temp.length){\n \
    \           if(temp.indexOf(i) == temp.lastIndexOf(i)){\n                temp.remove(i)\n\
    \            }\n        }\n        for(i <- 0 until temp.length){\n          \
    \  result += temp(i)\n        }\n        result.sortBy(x => x.length)\n      \
    \  result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n      \
    \  result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp644p752j.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp644p752j.scala:19:23\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mtemp\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            val splitted = x.split(\" \").map(_.toInt)\n\
    \            val sum = splitted.sum\n            val even = splitted.filter(_\
    \ % 2 == 0)\n            val odd = splitted.filter(_ % 2 != 0)\n            val\
    \ evenSum = even.sum\n            val oddSum = odd.sum\n            if (sum ==\
    \ evenSum) {\n                newList += x\n            } else if (sum == oddSum)\
    \ {\n                newList += x +\" \"+ evenSum\n            } else {\n    \
    \            newList += x +\" \"+ evenSum+\" \"+ oddSum\n            }\n     \
    \   })\n        newList.sortBy(x => x.split(\" \").map(_.toInt).sum)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpblmfgcpl.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => newList += x)\n        newList.sortWith(_ < _)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp076a97nr.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     for(i <- 0 until lst.size) {\n            val word = lst(i)\n          \
    \  if(word.length % 2 != 0) {\n                newList += word\n            }\n\
    \        }\n        newList.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxiioxv6n.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795265
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     for(i <- 0 until lst.size) {\n            if(lst(i).length() % 2 == 1) {\n\
    \                newList += lst(i)\n            }\n        }\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf4vx3i3f.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795265
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => newList += x)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1eqg21tx.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp1eqg21tx.scala:18:22 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => newList += x)\n        newList.sortWith(_.length < _.length)\n\
    \        newList.sortWith(_.length == _.length)\n        newList.sortWith(_.length\
    \ > _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeus3yksn.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795257
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.length){\n            val word = lst(i)\n      \
    \      if(word.length % 2 != 0){\n                result ++= word\n          \
    \  }\n        }\n        result.sortWith(_.length < _.length)\n        result.sortWith(_.length\
    \ > _.length)\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc_0pwpqq.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            val splitted = x.split(\" \")\n        \
    \    val length = splitted.length\n            val newWord = splitted.mkString(\"\
    \ \")\n            if (length % 2 == 1) {\n                newList += newWord\n\
    \            }\n        })\n        newList.sortWith(_.length < _.length)\n  \
    \      newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps3qfy6f9.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        val map = mutable.Map[String, Int]()\n        lst.foreach(word => {\n\
    \            val count = map.getOrElse(word, 0) + 1\n            map.put(word,\
    \ count)\n        })\n        map.toSeq.sortWith(_.length > _.length).foreach(word\
    \ => {\n            result.add(word)\n        })\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp36rab_n5.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp36rab_n5.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mmap\e[0m = mutable.Map[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            val newWord = x.split(\" \").map(_.length).sum\n\
    \            newList += x if(newWord % 2 == 1)\n        })\n        newList.sortBy(x\
    \ => x.split(\" \").map(_.length).sum)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpwhk0r68v.scala:21:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            newList += x \e[33mif\e[0m(newWord % \e[31m2\e\
    [0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^\e[0m\n\e\
    [31m   |\e[0m                         end of statement expected but 'if' found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwhk0r68v.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => if (x.length % 2 == 0) result.add(x) else result.add(x+\"\
    a\"))\n        result.sortWith((x, y) => x.length <= y.length)\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph_itpwqo.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => newList += x)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsj_68jv6.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => newList += x)\n        newList.sortWith(_.length > _.length)\n\
    \        newList.sortWith(_.length < _.length)\n        newList.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq5vn4z3z.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795265
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     for(i <- 0 until lst.size){\n            if(lst(i).length%2 != 0){\n   \
    \             newList += lst(i)\n            }\n        }\n        newList.sortWith((x,\
    \ y) => x.compareTo(y) == 0)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqfq_5837.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => newList += x)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp40a4rhhr.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        val set = mutable.Set[String]()\n        lst.foreach(x => {\n       \
    \     if (set.contains(x)) {\n                result.add(x)\n            } else\
    \ {\n                set += x\n            }\n        })\n        result.sortBy(x\
    \ => x.length).sortBy(x => x)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnpc2mqbo.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnpc2mqbo.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mset\e[0m = mutable.Set[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m       \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            if(x.length % 2 != 0){\n               \
    \ newList += x\n            }\n        })\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x)\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjp59p2r_.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     val newList2 = mutable.ListBuffer[String]()\n        val newList3 = mutable.ListBuffer[String]()\n\
    \        val newList4 = mutable.ListBuffer[String]()\n        val newList5 = mutable.ListBuffer[String]()\n\
    \        val newList6 = mutable.ListBuffer[String]()\n        val newList7 = mutable.ListBuffer[String]()\n\
    \        val newList8 = mutable.ListBuffer[String]()\n        val newList9 = mutable.ListBuffer[String]()\n\
    \        val newList10 = mutable.ListBuffer[String]()\n        val newList11 =\
    \ mutable.ListBuffer[String]()\n        val newList12 = mutable.ListBuffer[String]()\n\
    \        val newList13 = mutable.ListBuffer[String]()\n        val newList14 =\
    \ mutable.ListBuffer[String]()\n        val newList15 = mutable.ListBuffer[String]()\n\
    \        val newList16 = mutable.ListBuffer[String]()\n        val newList17 =\
    \ mutable.ListBuffer[String]()\n        val newList18 = mutable.ListBuffer[String]()\n\
    \        val newList19 = mutable.ListBuffer[String]()\n        val newList20 =\
    \ mutable.ListBuffer[String]()\n        val newList21 = mutable.ListBuffer[String]()\n\
    \        val newList22 = mutable.ListBuffer[String]()\n        val newList23 =\
    \ mutable.ListBuffer[String]()\n        val newList24 = mutable.ListBuffer[String]()\n\
    \        val newList25 = mutable.ListBuffer[String]()\n        val newList26 =\
    \ mutable.ListBuffer[String]()\n        val newList27 = mutable.ListBuffer[String]()\n\
    \        val newList28 = mutable.ListBuffer[String]()\n        val newList29 =\
    \ mutable.ListBuffer[String]()\n        val newList30 = mutable.ListBuffer[String]()\n\
    \        val newList31 = mutable.ListBuffer[String]()\n        val newList32 =\
    \ mutable.ListBuffer[String]()\n        val newList33 = mutable.ListBuffer[String]()\n\
    \        val newList34 = mutable.ListBuffer[String]()\n        val newList35 =\
    \ mutable.ListBuffer[String]()\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfmbj6hjw.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfmbj6hjw.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewList2\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfmbj6hjw.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList3\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfmbj6hjw.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnewList4\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfmbj6hjw.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnewList5\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfmbj6hjw.scala:23:23 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    "
  stdout: ''
  timestamp: 1659795261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            if(x.length % 2 != 0) {\n              \
    \  newList += x\n            }\n        })\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuqh0lop5.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val res = new mutable.ListBuffer[String]()\n   \
    \     for(i <- 0 until lst.size) {\n            if(lst(i).length() % 2 == 1) {\n\
    \                res.add(lst(i))\n            }\n        }\n        res.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpemtucu_o.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     val newList = lst.filterNot(x => x.length % 2 == 0).sortBy(x => x.length)\n\
    \        newList.foreach(x => newList += x)\n        newList.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0ky46x5c.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = lst.filterNot(\e\
    [36mx\e[0m => x.length % \e[31m2\e[0m == \e[31m0\e[0m).sortBy(\e[36mx\e[0m =>\
    \ x.length)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewList is already defined as \e[33mvalue\e[0m \e[35mnewList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp0ky46x5c.scala:18:22 ------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     for(i <- 0 until lst.size) {\n            if(lst(i).length() % 2 == 1) {\n\
    \                newList += lst(i)\n            }\n        }\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf4vx3i3f.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795265
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => {\n            val length = x.length\n            if\
    \ (length % 2 == 1) {\n                result.add(x)\n            }\n        })\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpahho5cb0.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => newList += x)\n        newList.sortWith(_.length < _.length)\n\
    \        newList.sortWith(_.length == _.length)\n        newList.sortWith(_.length\
    \ > _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeus3yksn.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795257
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => newList += x)\n        newList.sortWith(_.length < _.length)\n\
    \        newList.sortWith(_.length == _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfe562o0b.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => newList += x)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.toLowerCase )\n        newList.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3w4eao4n.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     for(word <- lst){\n            if(word.length % 2 != 0){\n             \
    \   newList += word\n            }\n        }\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.toUpperCase)\n        newList.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0jafs3yt.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     for(i <- 0 until lst.size) {\n            if(lst(i).length() % 2 == 1) {\n\
    \                newList += lst(i)\n            }\n        }\n        newList.sortWith((x,\
    \ y) => x.length < y.length)\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpunlmcxmp.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795267
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => {\n            val words = x.split(\" \").map(_.toInt)\n\
    \            val sumWords = words.sum\n            val isOdd = sumWords % 2 ==\
    \ 1\n            val isEven = sumWords % 2 == 0\n            val isEvenOrOdd =\
    \ isEven || isOdd\n            if (isEvenOrOdd) {\n                result.add(x)\n\
    \            }\n        })\n        result.sortBy(x => x.split(\" \").map(_.toInt).sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdes0ka9_.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     for(word <- lst){\n            if(word.length % 2 != 0){\n             \
    \   newList += word\n            }\n        }\n        newList.sortWith((a, b)\
    \ => a.length < b.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqy0ifybw.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            if (x.length % 2 == 0) {\n          \
    \      newList += x\n            }\n        })\n        newList.sortWith(_ < _)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdw5qk8bq.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            if(x.length % 2 == 1) {\n              \
    \  newList += x\n            }\n        })\n        newList.sortWith(_ < _)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5hr76aqm.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => newList += x)\n        newList.sortWith(_.length < _.length)\n\
    \        newList.sortWith(_.length > _.length)\n        newList.sortWith(_.length\
    \ == _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp31s4ilz.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => newList += x)\n        newList.sortWith(_.length < _.length)\n\
    \        newList.sortWith(_.length == _.length)\n        newList.sortWith(_.length\
    \ > _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpokxf0nmb.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => newList += x)\n        newList.sortWith((x, y) => x.length\
    \ <= y.length)\n        newList.sortWith((x, y) => x.length <= y.length).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwjwsx623.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => newList += x)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsj_68jv6.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        val map = new mutable.HashMap[String, Int]()\n        lst.foreach(x =>\
    \ {\n            val value = map.getOrElse(x, 0)\n            map.put(x, value\
    \ + 1)\n        })\n        map.foreach {\n            case (key, value) =>\n\
    \                if (value % 2 != 0) {\n                    result.add(key)\n\
    \                }\n        }\n        result.sortWith((x, y) => x.length <= y.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnbrxmh4a.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnbrxmh4a.scala:19:22\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mmap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => newList += x)\n        newList.sortWith(_.length < _.length)\n\
    \        newList.sortWith(_.length == _.length)\n        newList.sortWith(_.length\
    \ == _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxgcoih5h.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            if(x.length % 2 != 0) newList += x\n   \
    \     })\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ > _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdrsokbxs.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => newList += x)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp40a4rhhr.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val res = mutable.ListBuffer[String]()\n       \
    \ val set = mutable.Set[String]()\n        lst.foreach(x => {\n            if\
    \ (set.contains(x)) {\n                res.add(x)\n            } else {\n    \
    \            set += x\n            }\n        })\n        res.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph3o5i6cw.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmph3o5i6cw.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            if (x.length % 2 != 0) {\n          \
    \      newList += x\n            }\n        })\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.toLowerCase )\n        newList.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvdbc65j8.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795245
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => newList += x)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsj_68jv6.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     for(i <- 0 until lst.size) {\n            if(lst(i).length() % 2 == 1) {\n\
    \                newList += lst(i)\n            }\n        }\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf4vx3i3f.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795265
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            val newWord = x.split(\" \").map(_.length).sum\n\
    \            if (newWord % 2 == 1) {\n                newList += x\n         \
    \   }\n        })\n        newList.sortBy(x => x.split(\" \").map(_.length).sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz0hx1asq.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => newList += x)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp40a4rhhr.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     for(i <- 0 until lst.size) {\n            if(lst(i).length() % 2 == 1) {\n\
    \                newList += lst(i)\n            }\n        }\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf4vx3i3f.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795265
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     val newList2 = mutable.ListBuffer[String]()\n        lst.foreach(x => {\n\
    \            if(x.length % 2 == 1){\n                newList += x\n          \
    \  }\n            else{\n                newList2 += x\n            }\n      \
    \  })\n        newList.sortWith((x,y) => x.compareTo(y))\n        newList2.sortWith((x,y)\
    \ => x.compareTo(y))\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ctu16py.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp9ctu16py.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewList2\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => {\n            if(x.length % 2 == 1){\n            \
    \    result.add(x)\n            }\n        })\n        result.sortWith(_.length\
    \ < _.length)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9q4hlgf9.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            if(x.length % 2 == 1){\n               \
    \ newList += x\n            }\n        })\n        newList.sortWith((x, y) =>\
    \ x.length <= y.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprp1h5wvc.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            val newWord = x.split(\" \").map(_.length).sum\n\
    \            newList += x if (newWord % 2 == 1)\n        })\n        newList.sortBy(x\
    \ => x.split(\" \").map(_.length).sum)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpdoajw457.scala:21:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            newList += x \e[33mif\e[0m (newWord % \e\
    [31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^\e\
    [0m\n\e[31m   |\e[0m                         end of statement expected but 'if'\
    \ found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdoajw457.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            if(x.length%2 != 0) {\n             \
    \   newList += x\n            }\n        })\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\"\
    , \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjmm0123x.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- lst) {\n            if(word.length % 2 == 1) {\n        \
    \        result.add(word)\n            }\n        }\n        result.sortWith((x,\
    \ y) => x.length < y.length)\n        result.sortWith((x, y) => x.compareTo(y)\
    \ < 0)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkdwbainp.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            if(x.length % 2 == 1){\n            \
    \    newList += x\n            }\n        })\n        newList.sortWith((x,y) =>\
    \ x.length <= y.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl0gnuvff.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            if(x.length % 2 == 1) {\n              \
    \  newList += x\n            }\n        })\n        newList.sortWith(_.length\
    \ > _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ == _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpob1ixuc0.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => newList += x)\n        newList.sortWith((x, y) => x.length\
    \ <= y.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpirv_i1w5.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            val newWord = x.split(\" \").map(_.length).sum\n\
    \            if (newWord % 2 == 1) {\n                newList += x\n         \
    \   }\n        })\n        newList.sortBy(x => x.split(\" \").map(_.length).sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz0hx1asq.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val word = lst(i)\n       \
    \     if(word.length % 2 != 0) {\n                newList += word\n          \
    \  }\n        }\n        newList.sortWith(_.length < _.length)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy5d2qfl_.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => newList += x)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoiiwzru6.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpoiiwzru6.scala:18:22 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => newList += x)\n        newList.sortWith((x, y) => x.length\
    \ <= y.length)\n        newList.sortWith((x, y) => x.toString <= y.toString)\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp14n1o_r9.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     for(i <- 0 until lst.size) {\n            val word = lst(i)\n          \
    \  if(word.length % 2 == 1) {\n                newList += word\n            }\n\
    \        }\n        newList.sortWith((x, y) => x.length <= y.length)\n       \
    \ newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplol6ld8m.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => if (x.length % 2 == 0) result.add(x) else result.add(x))\n\
    \        result.sortWith((x, y) => x.length <= y.length)\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjoh6r5we.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     for(i <- 0 until lst.size) {\n            val word = lst(i)\n          \
    \  val length = word.length\n            val isOdd = length % 2 == 1\n       \
    \     if(isOdd) {\n                newList += word\n            }\n        }\n\
    \        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ > _.length)\n        newList.sortWith(_.length < _.length)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt0sqgphz.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795274
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     for(i <- 0 until lst.length){\n            val word = lst(i)\n         \
    \   if(word.length % 2 != 0){\n                newList += word\n            }\n\
    \        }\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ > _.length)\n        newList.sortWith(_.length > _.length)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwgx4apzi.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        val map = new mutable.HashMap[String, Int]()\n        lst.foreach(x =>\
    \ {\n            val value = map.getOrElse(x, 0)\n            map.put(x, value\
    \ + 1)\n        })\n        map.foreach {\n            case (k, v) => result.add(k)\n\
    \        }\n        result.sortWith(_.length < _.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoazkvc29.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoazkvc29.scala:19:22\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mmap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795274
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            if(x.length % 2 != 0){\n            \
    \    newList += x\n            }\n        })\n        newList.sortWith(_ < _)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjni9s3bo.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795275
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     val newList2 = mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size)\
    \ {\n            if(lst(i).length() % 2 == 1) {\n                newList2 += lst(i)\n\
    \            } else {\n                newList += lst(i)\n            }\n    \
    \    }\n        newList2.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList2.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpohrxxnas.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpohrxxnas.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewList2\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795276
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => newList += x)\n        newList.sortWith((x, y) => x.length\
    \ <= y.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr5_rbm7u.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            if(x.length % 2 == 1){\n               \
    \ newList += x\n            }\n        })\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\"\
    , \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe6ciqnjr.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795277
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            if(x.length % 2 == 1){\n               \
    \ newList += x\n            }\n        })\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\"\
    , \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe6ciqnjr.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795277
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            if (x.length % 2 != 0) {\n          \
    \      newList += x\n            }\n        })\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x)\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiodxt2nr.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795277
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            val newList = newList :+ x\n        \
    \    if (newList.size % 2 == 1) {\n                newList.sortWith(_ < _)\n \
    \           }\n        })\n        newList.sortWith(_ < _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpolwb5xja.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795277
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            if(x.length % 2 != 0){\n            \
    \    newList += x\n            }\n        })\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_03edpnj.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            val newWord = x.split(\" \").filterNot(_.isEmpty).map(_.length).sum\n\
    \            newList += x if(newWord % 2 == 0) else x.reverse\n        })\n  \
    \      newList.sortBy(x => x.split(\" \").map(_.length).sum)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpqjhfxyia.scala:21:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            newList += x \e[33mif\e[0m(newWord % \e[31m2\e\
    [0m == \e[31m0\e[0m) \e[33melse\e[0m x.reverse\n\e[31m\e[31m   |\e[0m        \
    \                 ^^\e[0m\n\e[31m   |\e[0m                         end of statement\
    \ expected but 'if' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqjhfxyia.scala:18:22\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mnewList\e[0m = mutable.ListBuffer.empty[\e[35mString\e[0m]\n\e[31m\e[31m \
    \  |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            if (x.length % 2 == 0) {\n             \
    \   newList += x\n            }\n        })\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.toLowerCase )\n        newList.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptu4gi1rt.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795278
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     for(i <- 0 until lst.size) {\n            val word = lst(i)\n          \
    \  if(word.length % 2 == 1) {\n                newList += word\n            }\n\
    \        }\n        newList.sortWith((x, y) => x.length <= y.length)\n       \
    \ newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplol6ld8m.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     val newList = lst.filterNot(x => x.length%2 == 0).sortBy(x => x).map(x =>\
    \ x + \"\\n\")\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdwr_82qv.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = lst.filterNot(\e\
    [36mx\e[0m => x.length%\e[31m2\e[0m == \e[31m0\e[0m).sortBy(\e[36mx\e[0m => x).map(\e\
    [36mx\e[0m => x + \e[31m\"\\n\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewList is already defined as \e[33mvalue\e[0m \e[35mnewList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpdwr_82qv.scala:18:22 ------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     for(i <- 0 until lst.length){\n            if(lst(i).length%2 != 0){\n \
    \               newList += lst(i)\n            }\n        }\n        newList.sortBy(x\
    \ => x.length)\n        newList.sortBy(x => x.length)\n        newList.sortBy(x\
    \ => x.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj2n33wjp.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     for(i <- 0 until lst.length){\n            if(lst(i).length%2 == 1){\n \
    \               newList += lst(i)\n            }\n        }\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk94s383e.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => newList += x)\n        newList.sortWith(_.length < _.length)\n\
    \        newList.sortWith(_.length == _.length)\n        newList.sortWith(_.length\
    \ > _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeus3yksn.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795257
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            if(lst(i).length() % 2 != 0)\
    \ {\n                newList += lst(i)\n            }\n        }\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphcap4yfq.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795245
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            if (x.length % 2 == 1) {\n             \
    \   newList += x\n            }\n        })\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe9_h6fgz.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            val newWord = x.split(\" \").map(_.length).sum\n\
    \            newList += x.split(\" \").map(_.length).sum + \" \" + x\n       \
    \ })\n        newList.sortBy(x => x.split(\" \")(1))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp55u2wfiq.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.size) {\n            val word = lst(i)\n       \
    \     if(word.length % 2 != 0) {\n                result.add(word)\n         \
    \   }\n        }\n        result.sortWith((x, y) => x.length <= y.length)\n  \
    \      result.sortWith((x, y) => x.compareTo(y) < 0)\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4fdsdtgp.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => {\n            val splitted = x.split(\" \")\n     \
    \       val length = splitted.length\n            if (length % 2 == 1) {\n   \
    \             result.add(x)\n            }\n        })\n        result.sortBy(x\
    \ => x.split(\" \").length)\n        result.sortBy(x => x.split(\" \").mkString.toLowerCase)\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt2c6ecxu.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            if(x.length%2 == 1){\n                newList\
    \ += x\n            }\n        })\n        newList.sortWith(_.length < _.length)\n\
    \        newList.sortWith(_.length > _.length)\n        newList.sortWith(_.length\
    \ > _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv3_v2uoh.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     lst.foreach(x => {\n            val newWord = x.split(\" \").map(_.length).sum\n\
    \            newList += x.split(\" \").map(_.length).sum + \" \" + x\n       \
    \ })\n        newList.sortBy(x => x.split(\" \")(1))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp55u2wfiq.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => newList += x)\n        newList.sortWith(_.length < _.length)\n\
    \        newList.sortWith(_.length == _.length)\n        newList.sortWith(_.length\
    \ > _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpokxf0nmb.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            if (x.length % 2 != 0) {\n          \
    \      newList += x\n            }\n        })\n        newList.sortWith(_ < _)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpngxmta7v.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.size) {\n            val word = lst(i)\n       \
    \     val length = word.length\n            if(length % 2 == 1) {\n          \
    \      result.add(word)\n            }\n        }\n        result.sortWith((x,\
    \ y) => x.length <= y.length)\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9564cb4l.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => newList += x)\n        newList.sortWith(_.length < _.length)\n\
    \        newList.sortWith(_.length > _.length)\n        newList.sortWith(_.length\
    \ == _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm5wl403c.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     for(i <- 0 until lst.length){\n            if(lst(i).length%2 == 1){\n \
    \               newList += lst(i)\n            }\n        }\n        newList.sortWith((x,y)\
    \ => x.compareTo(y))\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5_9dgxz3.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => if (x.length % 2 == 0) result += x else result.add(x))\n\
    \        result.sortWith((x, y) => x.length <= y.length)\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbow2iif7.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            if(lst(i).length() % 2 != 0)\
    \ {\n                newList += lst(i)\n            }\n        }\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphcap4yfq.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795245
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => if (x.length % 2 == 1) result.add(x) else result.add(x+x))\n\
    \        result.sortWith((x,y) => x.length <= y.length)\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpplexevpk.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     val newList = lst.filterNot(x => x.length%2 == 1)\n        newList.sortWith((x,\
    \ y) => x.length <= y.length)\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6oja9pje.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = lst.filterNot(\e\
    [36mx\e[0m => x.length%\e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnewList\
    \ is already defined as \e[33mvalue\e[0m \e[35mnewList\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6oja9pje.scala:18:22\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mnewList\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val newList = mutable.ListBuffer[String]()\n   \
    \     val newList2 = mutable.ListBuffer[String]()\n        val newList3 = mutable.ListBuffer[String]()\n\
    \        val newList4 = mutable.ListBuffer[String]()\n        val newList5 = mutable.ListBuffer[String]()\n\
    \        val newList6 = mutable.ListBuffer[String]()\n        val newList7 = mutable.ListBuffer[String]()\n\
    \        val newList8 = mutable.ListBuffer[String]()\n        val newList9 = mutable.ListBuffer[String]()\n\
    \        val newList10 = mutable.ListBuffer[String]()\n        val newList11 =\
    \ mutable.ListBuffer[String]()\n        val newList12 = mutable.ListBuffer[String]()\n\
    \        val newList13 = mutable.ListBuffer[String]()\n        val newList14 =\
    \ mutable.ListBuffer[String]()\n        val newList15 = mutable.ListBuffer[String]()\n\
    \        val newList16 = mutable.ListBuffer[String]()\n        val newList17 =\
    \ mutable.ListBuffer[String]()\n        val newList18 = mutable.ListBuffer[String]()\n\
    \        val newList19 = mutable.ListBuffer[String]()\n        val newList20 =\
    \ mutable.ListBuffer[String]()\n        val newList21 = mutable.ListBuffer[String]()\n\
    \        val newList22 = mutable.ListBuffer[String]()\n        val newList23 =\
    \ mutable.ListBuffer[String]()\n        val newList24 = mutable.ListBuffer[String]()\n\
    \        val newList25 = mutable.ListBuffer[String]()\n        val newList26 =\
    \ mutable.ListBuffer[String]()\n        val newList27 = mutable.ListBuffer[String]()\n\
    \        val newList28 = mutable.ListBuffer[String]()\n        val newList29 =\
    \ mutable.ListBuffer[String]()\n        val newList30 = mutable.ListBuffer[String]()\n\
    \        val newList31 = mutable.ListBuffer[String]()\n        val newList32 =\
    \ mutable.ListBuffer[String]()\n        val newList33 = mutable.ListBuffer[String]()\n\
    \        val newList34 = mutable.ListBuffer[String]()\n        val newList35 =\
    \ mutable.ListBuffer[String]()\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfmbj6hjw.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfmbj6hjw.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewList2\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfmbj6hjw.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList3\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfmbj6hjw.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnewList4\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfmbj6hjw.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnewList5\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfmbj6hjw.scala:23:23 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    "
  stdout: ''
  timestamp: 1659795261
