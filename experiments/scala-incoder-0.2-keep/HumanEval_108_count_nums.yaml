name: HumanEval_108_count_nums
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function count_nums which takes an array of integers and returns\n\
  \    // the number of elements which has a sum of digits > 0.\n    // If a number\
  \ is negative, then its first signed digit will be negative:\n    // e.g. -123 has\
  \ signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>> count_nums([-1,\
  \ 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def countNums(arr :\
  \ List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
  \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
  \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
  \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
  \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
  \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
  \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
  \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n   \
  \ assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
  \ == (1l));\n    }\n\n}\n"
completions: ["        var count = 0\n        for (i <- 0 until arr.length) {\n  \
    \          val num = arr(i)\n            if (num < 0) num *= -1\n            val\
    \ digits = num.toString.toInt\n            if (digits > 0) count += digits\n \
    \       }\n        count", "        val n = arr.length\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 0 until n) {\n            val digits = arr(i).abs\n        \
    \    sums += digits\n        }\n        sums.sum", "        val nums = arr.toSet\n\
    \        val digits = arr.map(_.toString.toInt)\n        val digitSums = digits.map(_.sum)\n\
    \        val numsWithSum = nums.filter(x => digitSums.contains(x))\n        numsWithSum.size",
  "        val sums = arr.map(x => math.abs(x))\n        val nums = arr.filter(x =>\
    \ math.abs(x) > 0).size\n        sums.filter(_ > 0).sum - nums", "        val\
    \ nums = arr.map(_.toInt)\n        val sums = nums.map(x => math.abs(x))\n   \
    \     val counts = sums.groupBy(x => math.abs(x))\n        val count = counts.mapValues(_.size).sum\n\
    \        count", "        val nums = arr.toSet\n        val sums = nums.map(x\
    \ => math.abs(x))\n        val count = sums.count(x => x > 0)\n        count",
  "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n  \
    \      val numsSums = nums.map(x => sums.filter(_ > x).length)\n        numsSums.sum",
  "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x)).toSet\n\
    \        val numsSums = nums.filter(_ > 0).map(_ % 10).filter(x => sums.contains(x)).length\n\
    \        numsSums", "        val nums = arr.toSet\n        val sums = arr.map(x\
    \ => math.abs(x))\n        val positiveSums = sums.filter(x => x >= 0)\n     \
    \   val negativeSums = sums.filter(x => x < 0)\n        val positiveSumsCount\
    \ = positiveSums.count(x => x > 0)\n        val negativeSumsCount = negativeSums.count(x\
    \ => x < 0)\n        val positiveSumsSum = positiveSums.sum\n        val negativeSumsSum\
    \ = negativeSums.sum\n        val positiveSumsSumAbs = math.abs(positiveSumsSum)\n\
    \        val negativeSumsSumAbs = math.abs(negativeSumsSum)\n        val positiveSumsSumAbsCount\
    \ = positiveSums.count(x => math.abs(x) > 0)\n        val negativeSumsSumAbsCount\
    \ = negativeSums.count(x => math.abs(x) < 0)\n        val positiveSumsSumAbsSum\
    \ = positiveSums.sum\n        val negativeSumsSumAbsSum = negativeSums.sum\n \
    \       val positiveSumsSumAbsSumAbs = math.abs(positiveSumsSumAbs)\n        val\
    \ negativeSumsSumAbsSumAbs = math.abs(negativeSumsSumAbs)\n        val positiveSumsSumAbsSumAbsCount\
    \ = positiveSums.count(x => math.abs(x) > 0)\n        val negativeSumsSumAbsSumAbsCount\
    \ = negativeSums.count(x => math.abs(x) < 0)\n        val positiveSumsSumAbsSumAbsSum\
    \ = positiveSums.sum\n        val negativeSumsSumAbsSumAbsSum = negativeSums.sum\n\
    \        val positiveSumsSumAbsSumAbsSumAbs = math.abs(positiveSumsSumAbsSumAbs)\n\
    \        val negativeSumsSumAbsSumAbsSumAbs = math.abs(negativeSumsSumAbsSumAbs)\n\
    \        val positiveSumsSumAbsSumAbsSumAbsCount = positiveSums.count(x => math.abs(x)\
    \ > 0)\n        val negativeSumsSumAbsSumAbsSumAbsCount = negativeSums.count(x\
    \ => math.abs(x) < 0)\n        val positiveSumsSumAbsSumAbsSumAbsSum = positiveSums.sum\n\
    \        val negativeSumsSumAbsSumAbsSumAbsSum = negativeSums.sum\n        val\
    \ positiveSumsSumAbsSumAbsSumAbsSumAbs = math.abs(positiveSumsSumAbsSumAbsSumAbs)\n\
    \        val negativeSum", "        val nums = arr.toSet\n        val sums = arr.map(x\
    \ => math.abs(x))\n        val positiveSums = sums.filter(x => x > 0)\n      \
    \  val negativeSums = sums.filter(x => x < 0)\n        val positiveSumsCount =\
    \ positiveSums.size\n        val negativeSumsCount = negativeSums.size\n     \
    \   val numsCount = nums.size\n        val positiveSumsSum = positiveSums.sum\n\
    \        val negativeSumsSum = negativeSums.sum\n        val numsSum = nums.sum\n\
    \        val positiveSumsSumOfDigits = positiveSumsSum.toString.toInt\n      \
    \  val negativeSumsSumOfDigits = negativeSumsSum.toString.toInt\n        val numsSumOfDigits\
    \ = numsSum.toString.toInt\n        val positiveSumsSumOfDigitsCount = positiveSumsSumOfDigits.toInt\n\
    \        val negativeSumsSumOfDigitsCount = negativeSumsSumOfDigits.toInt\n  \
    \      val numsSumOfDigitsCount = numsSumOfDigits.toInt\n        val positiveSumsSumOfDigitsSum\
    \ = positiveSumsSumOfDigits / numsSumOfDigits\n        val negativeSumsSumOfDigitsSum\
    \ = negativeSumsSumOfDigits / numsSumOfDigits\n        val numsSumOfDigitsSum\
    \ = numsSum / numsSumOfDigits\n        val positiveSumsSumOfDigitsSumOfDigits\
    \ = positiveSumsSumOfDigitsSum.toString.toInt\n        val negativeSumsSumOfDigitsSumOfDigits\
    \ = negativeSumsSumOfDigitsSum.toString.toInt\n        val numsSumOfDigitsSumOfDigits\
    \ = numsSumOfDigitsSum.toString.toInt\n        val positiveSumsSumOfDigitsSumOfDigitsCount\
    \ = positiveSumsSumOfDigitsSumOfDigits.toInt\n        val negativeSumsSumOfDigitsSumOfDigitsCount\
    \ = negativeSumsSumOfDigitsSumOfDigits.toInt\n        val numsSumOfDigitsSumOfDigitsCount\
    \ = numsSumOfDigitsSumOfDigits.toInt\n        val positiveSumsSumOfDigitsSumOfDigitsSum\
    \ = positiveSumsSumOfDigitsSumOfDigits / numsSumOfDigitsSumOfDigits\n        val\
    \ negativeSumsSumOfDigitsSumOfDigitsSum = negativeSumsSumOfDigitsSumOfDig", " \
    \       val nums = arr.toSet\n        val numsSum = nums.map(x => math.abs(x)).sum\n\
    \        nums.filter(x => math.abs(x) > 0).count(x => math.abs(x) == numsSum)",
  "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x)).toSet\n\
    \        val numsSums = nums.map(x => sums.count(y => y > x))\n        numsSums.sum",
  "        val nums = arr.toSet\n        val numsCount = arr.count(x => nums.contains(x))\n\
    \        numsCount", "        val nums = arr.toSet\n        val sums = arr.map(x\
    \ => math.abs(x))\n        val counts = sums.groupBy(x => math.abs(x))\n     \
    \   val count = counts.foldLeft(0)(_ + _._2)\n        nums.filter(x => math.abs(x)\
    \ > 0).length", "        val nums = arr.map(x => math.abs(x))\n        val sums\
    \ = nums.map(x => math.abs(x)).reduceLeft(_ + _)\n        sums.toLong", "    \
    \    val sums = arr.map(x => math.abs(x))\n        val counts = sums.groupBy(x\
    \ => math.abs(x))\n        val count = counts.mapValues(_.size).sum\n        count",
  "        val nums = arr.filter(_ > 0)\n        val sums = nums.map(x => math.abs(x))\n\
    \        val counts = sums.groupBy(x => math.abs(x))\n        val maxCount = counts.maxBy(_._2)._2\n\
    \        val numsOverMaxCount = nums.filter(x => math.abs(x) > maxCount)\n   \
    \     val numsOverMaxCountSum = numsOverMaxCount.map(x => math.abs(x)).reduce(_\
    \ + _)\n        numsOverMaxCountSum", "        val nums = arr.map(x => if (x <\
    \ 0) -x else x).distinct\n        val sums = nums.map(x => math.abs(x)).sum\n\
    \        nums.count(x => sums - math.abs(x) > 0)", "        var sum = 0L\n   \
    \     var count = 0L\n        for (i <- 0 until arr.length) {\n            sum\
    \ += arr(i)\n            if (sum > 0) {\n                count += 1\n        \
    \    }\n        }\n        count", "        val nums = arr.map(_.toInt)\n    \
    \    val sum = nums.sum\n        if (sum < 0) nums.map(_.toInt).sum\n        else\
    \ nums.count(_ > 0)", "        val nums = arr.filter(x => x >= 0)\n        val\
    \ numsSum = nums.map(x => x.toString.toInt).sum\n        nums.filter(x => x <\
    \ 0).map(x => x.toString.toInt).sum", "        var sum = 0\n        var count\
    \ = 0\n        for (i <- arr) {\n            sum += i\n            count += 1\n\
    \        }\n        if (sum > 0) {\n            count\n        } else {\n    \
    \        count + 1\n        }", "        val nums = arr.toSet\n        val sums\
    \ = arr.map(x => math.abs(x)).toSet\n        val result = sums.count(x => x >\
    \ 0)\n        nums.count(x => x < 0) == result * -1", "        val digits = arr.map(_.toString.toInt)\n\
    \        val sums = digits.map(_.sum)\n        val nums = sums.filter(x => x >\
    \ 0)\n        nums.count(_ > 0)", "        val nums = arr.map(x => math.abs(x))\n\
    \        val sums = nums.map(x => math.abs(x))\n        val counts = sums.groupBy(x\
    \ => math.abs(x)).mapValues(_.size)\n        val result = counts.filter(_._2 >\
    \ 0).map(_._2).sum\n        result", "        val nums = arr.toSet\n        val\
    \ numsSum = arr.toList.foldLeft(0L) { (sum, num) =>\n            val digits =\
    \ num.toString.reverse.grouped(2).map(_ + _)\n            sum + digits.sum\n \
    \       }\n        numsSum.toLong", "        val nums = arr.toSet\n        val\
    \ numsLen = arr.length\n        val numsSum = arr.map(x => math.abs(x)).sum\n\
    \        val numsSumDigits = numsSum.toString.length\n        val numsSumDigit\
    \ = math.abs(numsSum).floor.toInt\n        val numsSumDigits = numsSum.toString.length\n\
    \        val numsSumDigit = math.abs(numsSum).floor.toInt\n        val numsSumDigits\
    \ = numsSum.toString.length\n        val numsSumDigit = math.abs(numsSum).floor.toInt\n\
    \        val numsSumDigits = numsSum.toString.length\n        val numsSumDigit\
    \ = math.abs(numsSum).floor.toInt\n        val numsSumDigits = numsSum.toString.length\n\
    \        val numsSumDigit = math.abs(numsSum).floor.toInt\n        val numsSumDigits\
    \ = numsSum.toString.length\n        val numsSumDigit = math.abs(numsSum).floor.toInt\n\
    \        val numsSumDigits = numsSum.toString.length\n        val numsSumDigit\
    \ = math.abs(numsSum).floor.toInt\n        val numsSumDigits = numsSum.toString.length\n\
    \        val numsSumDigit = math.abs(numsSum).floor.toInt\n        val numsSumDigits\
    \ = numsSum.toString.length\n        val numsSumDigit = math.abs(numsSum).floor.toInt\n\
    \        val numsSumDigits = numsSum.toString.length\n        val numsSumDigit\
    \ = math.abs(numsSum).floor.toInt\n        val numsSumDigits = numsSum.toString.length\n\
    \        val numsSumDigit = math.abs(numsSum).floor.toInt\n        val numsSumDigits\
    \ = numsSum.toString.length\n        val numsSumDigit = math.abs(numsSum).floor.toInt\n\
    \        val numsSumDigits = numsSum.toString.length\n        val numsSumDigit\
    \ = math.abs(numsSum).floor.toInt\n        val numsSumDigits = numsSum.toString.length\n\
    \        val numsSumDigit = math.abs(numsSum).floor.toInt\n        val numsSumDigits\
    \ = numsSum.toString.length\n        val numsSumDigit = math.abs(numsSum).floor.toInt\n\
    \        val numsSumDigits = numsSum.toString.length\n", "        val nums = arr.toSet\n\
    \        val sums = arr.map(x => math.abs(x)).toSet\n        val numsSums = nums.map(x\
    \ => math.abs(x)).toSet\n        val numsSumsSums = numsSums.map(x => math.abs(x)).toSet\n\
    \        val numsSumsSumsSums = numsSumsSums.map(x => math.abs(x)).toSet\n   \
    \     val numsSumsSumsSumsSums = numsSumsSumsSums.map(x => math.abs(x)).toSet\n\
    \        val numsSumsSumsSumsSumsSums = numsSumsSumsSumsSums.map(x => math.abs(x)).toSet\n\
    \        val numsSumsSumsSumsSumsSumsSums = numsSumsSumsSumsSumsSums.map(x =>\
    \ math.abs(x)).toSet\n        val numsSumsSumsSumsSumsSumsSumsSums = numsSumsSumsSumsSumsSumsSumsSums.map(x\
    \ => math.abs(x)).toSet\n        val numsSumsSumsSumsSumsSumsSumsSumsSums = numsSumsSumsSumsSumsSumsSumsSumsSums.map(x\
    \ => math.abs(x)).toSet\n        val numsSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = numsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums.map(x => math.abs(x)).toSet\n\
    \        val numsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums = numsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums.map(x\
    \ => math.abs(x)).toSet\n        val numsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = numsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums.map(x => math.abs(x)).toSet\n\
    \        val numsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums = numsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums.map(x\
    \ => math.abs(x)).toSet\n        val ", "        val nums = arr.filter(x => x\
    \ > 0)\n        val sums = nums.map(x => math.abs(x))\n        val counts = sums.groupBy(x\
    \ => math.abs(x))\n        val count = counts.mapValues(_.size).sum\n        count",
  "        val nums = arr.toSet\n        val numsSet = nums.toSet\n        val numsSet2\
    \ = nums.toSet\n        val numsSet3 = nums.toSet\n        val numsSet4 = nums.toSet\n\
    \        val numsSet5 = nums.toSet\n        val numsSet6 = nums.toSet\n      \
    \  val numsSet7 = nums.toSet\n        val numsSet8 = nums.toSet\n        val numsSet9\
    \ = nums.toSet\n        val numsSet10 = nums.toSet\n        val numsSet11 = nums.toSet\n\
    \        val numsSet12 = nums.toSet\n        val numsSet13 = nums.toSet\n    \
    \    val numsSet14 = nums.toSet\n        val numsSet15 = nums.toSet\n        val\
    \ numsSet16 = nums.toSet\n        val numsSet17 = nums.toSet\n        val numsSet18\
    \ = nums.toSet\n        val numsSet19 = nums.toSet\n        val numsSet20 = nums.toSet\n\
    \        val numsSet21 = nums.toSet\n        val numsSet22 = nums.toSet\n    \
    \    val numsSet23 = nums.toSet\n        val numsSet24 = nums.toSet\n        val\
    \ numsSet25 = nums.toSet\n        val numsSet26 = nums.toSet\n        val numsSet27\
    \ = nums.toSet\n        val numsSet28 = nums.toSet\n        val numsSet29 = nums.toSet\n\
    \        val numsSet30 = nums.toSet\n        val numsSet31 = nums.toSet\n    \
    \    val numsSet32 = nums.toSet\n        val numsSet33 = nums.toSet\n        val\
    \ numsSet34 = nums.toSet\n        val numsSet35 = nums.toSet\n        val numsSet36\
    \ = nums.toSet\n        val numsSet37 = nums.toSet\n        val numsSet38 = nums.toSet\n\
    \        val numsSet39 = nums.toSet\n        val numsSet40 = nums.toSet\n    \
    \    val numsSet41 = nums.toSet\n        val numsSet42 = nums.toSet\n        val\
    \ numsSet43 = nums.toSet\n", "        val nums = arr.map(x => if (x < 0) -x else\
    \ x).distinct\n        val sums = nums.map(x => math.abs(x))\n        val sumsSum\
    \ = sums.sum\n        nums.count(x => math.abs(x) > sumsSum)", "        var sum\
    \ = 0L\n        var count = 0L\n        for(i <- 0 until arr.length) {\n     \
    \       sum += arr(i)\n            if(sum > 0) {\n                count += 1\n\
    \            }\n        }\n        count", "        val nums = arr.toSet\n   \
    \     val sums = arr.map(x => math.abs(x))\n        val numsSums = nums.map(x\
    \ => sums.count(y => y == x))\n        numsSums.sum", "        val nums = arr.toSet\n\
    \        val sums = arr.map(x => math.abs(x))\n        val numsSums = nums.map(x\
    \ => sums.filter(_ > x).size)\n        numsSums.sum", "        val digits = arr.map(_.toInt)\n\
    \        val sum = digits.sum\n        if (sum < 0) sum * -1\n        else sum",
  "        val nums = arr.filter(x => x > 0).map(x => math.abs(x))\n        val sums\
    \ = nums.map(x => math.pow(10, math.ceil(math.log10(x))))\n        val res = sums.foldLeft(0)((acc,\
    \ x) => acc + x)\n        res", "        val nums = arr.toSet\n        val numsSet\
    \ = nums.toSet\n        val numsSum = nums.map(x => x.toString.toInt).sum\n  \
    \      val numsSumSet = numsSum.toSet\n        val numsSumSet2 = numsSumSet.filter(_\
    \ > 0)\n        val numsSumSet3 = numsSumSet2.filter(_ > 0)\n        numsSumSet3.size",
  "        val nums = arr.toSet\n        val sums = nums.map(x => math.abs(x))\n \
    \       val counts = sums.groupBy(x => math.abs(x))\n        val result = counts.mapValues(x\
    \ => x.size)\n        val sum = result.mapValues(x => x.sum)\n        val positiveSum\
    \ = sum.filter(_ > 0)\n        val negativeSum = sum.filter(_ < 0)\n        val\
    \ positiveCount = positiveSum.sum\n        val negativeCount = negativeSum.sum\n\
    \        val positiveSumCount = positiveSum.size\n        val negativeSumCount\
    \ = negativeSum.size\n        val positiveCount = positiveCount.toLong\n     \
    \   val negativeCount = negativeCount.toLong\n        val positiveSumCount = positiveSumCount.toLong\n\
    \        val negativeSumCount = negativeSumCount.toLong\n        val positiveSumCount\
    \ = positiveSumCount.toLong\n        val negativeSumCount = negativeSumCount.toLong\n\
    \        val positiveSumCount = positiveSumCount.toLong\n        val negativeSumCount\
    \ = negativeSumCount.toLong\n        val positiveSumCount = positiveSumCount.toLong\n\
    \        val negativeSumCount = negativeSumCount.toLong\n        val positiveSumCount\
    \ = positiveSumCount.toLong\n        val negativeSumCount = negativeSumCount.toLong\n\
    \        val positiveSumCount = positiveSumCount.toLong\n        val negativeSumCount\
    \ = negativeSumCount.toLong\n        val positiveSumCount = positiveSumCount.toLong\n\
    \        val negativeSumCount = negativeSumCount.toLong\n        val positiveSumCount\
    \ = positiveSumCount.toLong\n        val negativeSumCount = negativeSumCount.toLong\n\
    \        val positiveSumCount = positiveSumCount.toLong\n        val negativeSumCount\
    \ = negativeSumCount.toLong\n        val positiveSumCount = positiveSumCount.toLong\n\
    \        val negativeSumCount = negativeSumCount.toLong\n        val positiveSumCount\
    \ = positiveSumCount.toLong\n        val negativeSumCount = negativeSumCount.toLong\n\
    \        val positiveSumCount = positiveSumCount.toLong\n        val negativeSumCount\
    \ = negativeSumCount.toLong\n        val positiveSumCount = positiveSumCount.toLong\n\
    \        val negativeSumCount = negativeSumCount.toLong\n        val positiveSumCount\
    \ = positiveSumCount.toLong\n        val negativeSumCount = negativeSumCount.toLong\n\
    \        val positiveSumCount = positiveSumCount.toLong\n        val negativeSumCount\
    \ = negativeSumCount.toLong\n        val positiveSumCount = positiveSumCount.toLong\n\
    \        ", "        var sum = 0L\n        var count = 0L\n        for (i <- arr)\
    \ {\n            sum += i\n            if (sum > 0) {\n                count +=\
    \ 1\n            }\n        }\n        count", "        var sum = 0\n        var\
    \ count = 0\n        for (i <- arr) {\n            sum += i\n            count\
    \ += 1\n        }\n        if (sum > 0) {\n            count\n        } else {\n\
    \            count - 1\n        }", "        val nums = arr.toSet\n        val\
    \ sums = arr.map(x => math.abs(x))\n        val numsSums = nums.map(x => sums.count(y\
    \ => y > x))\n        numsSums.sum", "        val nums = arr.filter(x => x >=\
    \ 0).map(x => math.abs(x))\n        val sums = nums.map(x => math.pow(10, x.length))\n\
    \        val count = sums.reduceLeft(_ + _)\n        count", "        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val numsSums\
    \ = nums.map(x => sums.count(y => y > x))\n        numsSums.sum", "        val\
    \ digits = arr.map(x => math.abs(x))\n        val sums = digits.map(x => math.pow(10,\
    \ x))\n        val count = sums.filter(x => x > 0).size\n        count", "   \
    \     val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n   \
    \     val sumsSet = sums.toSet\n        val numsSet = nums.toSet\n        sumsSet.filter(x\
    \ => numsSet.contains(x)).size", "        val nums = arr.toSet\n        val sums\
    \ = arr.map(x => math.abs(x))\n        val sumsSet = sums.toSet\n        val numsSet\
    \ = nums.toSet\n        val numsSums = nums.map(x => math.abs(x)).filter(x =>\
    \ x > 0)\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSetSet\
    \ = numsSums.toSet.toSet\n        val numsSumsSetSetSet = numsSums.toSet.toSet.toSet.toSet\n\
    \        val numsSumsSetSetSetSet = numsSums.toSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val numsSumsSetSetSetSetSet = numsSums.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSet = numsSums.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSet = numsSums.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSet = numsSums.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSet = numsSums.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSetSet = numsSums.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSetSetSet = numsSums.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSetSetSet = numsSums.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.to",
  "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n  \
    \      val numsSums = nums.map(x => sums.filter(_ > x).size)\n        numsSums.sum",
  "        val nums = arr.toSet\n        val numsCount = nums.size\n        val numsSum\
    \ = nums.map(x => math.abs(x)).sum\n        numsCount - numsSum", "        val\
    \ nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val\
    \ count = sums.count(x => x > 0)\n        val negCount = sums.count(x => x < 0)\n\
    \        val negSums = sums.filter(x => x < 0)\n        val negSumsCount = negSums.count(x\
    \ => x > 0)\n        val negSumsCount2 = negSums.count(x => x < 0)\n        val\
    \ negSumsCount3 = negSums.count(x => x == 0)\n        val negSumsCount4 = negSums.count(x\
    \ => x == -1)\n        val negSumsCount5 = negSums.count(x => x == -2)\n     \
    \   val negSumsCount6 = negSums.count(x => x == -3)\n        val negSumsCount7\
    \ = negSums.count(x => x == -4)\n        val negSumsCount8 = negSums.count(x =>\
    \ x == -5)\n        val negSumsCount9 = negSums.count(x => x == -6)\n        val\
    \ negSumsCount10 = negSums.count(x => x == -7)\n        val negSumsCount11 = negSums.count(x\
    \ => x == -8)\n        val negSumsCount12 = negSums.count(x => x == -9)\n    \
    \    val negSumsCount13 = negSums.count(x => x == -10)\n        val negSumsCount14\
    \ = negSums.count(x => x == -11)\n        val negSumsCount15 = negSums.count(x\
    \ => x == -12)\n        val negSumsCount16 = negSums.count(x => x == -13)\n  \
    \      val negSumsCount17 = negSums.count(x => x == -14)\n        val negSumsCount18\
    \ = negSums.count(x => x == -15)\n        val negSumsCount19 = negSums.count(x\
    \ => x == -16)\n        val negSumsCount20 = negSums.count(x => x == -17)\n  \
    \      val negSumsCount21 = negSums.count(x => x == -18)\n        val negSumsCount22\
    \ = negSums.count(x => x == -19)\n        val negSumsCount23 = negSums.count(x\
    \ => x == -20)\n        val negSumsCount24 = negSums.count(x => x == -21)\n  \
    \      val negSumsCount25 = negSums.count(x => x == -22)\n        val negSumsCount26\
    \ = negSums.count(x => x == -23)\n        val negSum", "        val nums = arr.toSet\n\
    \        val numsSum = nums.map(x => math.abs(x))\n        val numsSumSum = numsSum.sum\n\
    \        numsSumSum.toLong", "        val nums = arr.toSet\n        val sums =\
    \ arr.map(x => math.abs(x)).toSet\n        val numsSums = nums.filter(x => sums.contains(math.abs(x)))\n\
    \        numsSums.size", "        val nums = arr.filter(_ > 0)\n        val digits\
    \ = arr.filter(_ > 0).map(_.toString.toInt)\n        val sum = digits.sum\n  \
    \      val numsSum = nums.filter(_ > 0).sum\n        val numsSumDigits = numsSum.toString.toInt\n\
    \        val numsSumDigit = numsSumDigits % 10\n        val numsSumDigits = numsSumDigits\
    \ / 10\n        val numsSumDigit = numsSumDigit % 10\n        val numsSumDigits\
    \ = numsSumDigits / 10\n        val numsSumDigit = numsSumDigit % 10\n       \
    \ val numsSumDigits = numsSumDigits / 10\n        val numsSumDigit = numsSumDigit\
    \ % 10\n        val numsSumDigits = numsSumDigits / 10\n        val numsSumDigit\
    \ = numsSumDigit % 10\n        val numsSumDigits = numsSumDigits / 10\n      \
    \  val numsSumDigit = numsSumDigit % 10\n        val numsSumDigits = numsSumDigits\
    \ / 10\n        val numsSumDigit = numsSumDigit % 10\n        val numsSumDigits\
    \ = numsSumDigits / 10\n        val numsSumDigit = numsSumDigit % 10\n       \
    \ val numsSumDigits = numsSumDigits / 10\n        val numsSumDigit = numsSumDigit\
    \ % 10\n        val numsSumDigits = numsSumDigits / 10\n        val numsSumDigit\
    \ = numsSumDigit % 10\n        val numsSumDigits = numsSumDigits / 10\n      \
    \  val numsSumDigit = numsSumDigit % 10\n        val numsSumDigits = numsSumDigits\
    \ / 10\n        val numsSumDigit = numsSumDigit % 10\n        val numsSumDigits\
    \ = numsSumDigits / 10\n        val numsSumDigit = numsSumDigit % 10\n       \
    \ val numsSumDigits = numsSumDigits / 10\n        val numsSumDigit = numsSumDigit\
    \ % 10\n        val numsSumDigits = numsSumDigits / 10\n        val numsSumDigit\
    \ = numsSumDigit % 10\n        val numsSumDigits = numsSumDigits / 10\n", "  \
    \      val sums = arr.map(x => math.abs(x))\n        val counts = sums.groupBy(x\
    \ => math.abs(x))\n        val maxCount = counts.maxBy(x => x._2)._1\n       \
    \ val nums = counts.filter(x => x._2 == maxCount).map(x => x._1)\n        val\
    \ result = nums.filter(x => x > 0).length\n        result", "        val digits\
    \ = arr.map(x => math.abs(x))\n        val sum = digits.sum\n        val nums\
    \ = arr.filter(x => math.abs(x) > 0).length\n        sum - nums", "        var\
    \ sum = 0L\n        var count = 0L\n        for (i <- arr) {\n            sum\
    \ += i\n            if (sum > 0) {\n                count += 1\n            }\n\
    \        }\n        count", "        val nums = arr.toSet\n        val numsSet\
    \ = nums.toSeq\n        val numsSetLen = numsSet.size\n        val numsSetSum\
    \ = numsSet.sum\n        val numsSetSumLen = numsSetSum.length\n        val numsSetSumDigits\
    \ = numsSetSum.digits\n        val numsSetSumDigitsLen = numsSetSumDigits.length\n\
    \        val numsSetSumDigitsSum = numsSetSumDigits.sum\n        val numsSetSumDigitsSumLen\
    \ = numsSetSumDigitsSum.length\n        val numsSetSumDigitsSumDigits = numsSetSumDigitsSum.digits\n\
    \        val numsSetSumDigitsSumDigitsLen = numsSetSumDigitsSumDigits.length\n\
    \        val numsSetSumDigitsSumDigitsSum = numsSetSumDigitsSumDigits.sum\n  \
    \      val numsSetSumDigitsSumDigitsSumLen = numsSetSumDigitsSumDigitsSum.length\n\
    \        val numsSetSumDigitsSumDigitsSumDigitsSum = numsSetSumDigitsSumDigitsSumDigits.sum\n\
    \        val numsSetSumDigitsSumDigitsSumDigitsSumLen = numsSetSumDigitsSumDigitsSumDigitsSum.length\n\
    \        val numsSetSumDigitsSumDigitsSumDigitsSumDigitsSum = numsSetSumDigitsSumDigitsSumDigitsSumDigits.sum\n\
    \        val numsSetSumDigitsSumDigitsSumDigitsSumDigitsSumLen = numsSetSumDigitsSumDigitsSumDigitsSumDigitsSum.length\n\
    \        val numsSetSumDigitsSumDigitsSumDigitsSumDigitsSumDigitsSum = numsSetSumDigitsSumDigitsSumDigitsSumDigitsSumDigitsSum.digits\n\
    \        val numsSetSumDigitsSumDigitsSumDigitsSumDigitsSumLen = numsSetSumDigitsSumDigitsSumDigitsSumDigitsSumDigitsSum.len\n\
    \        val numsSetSumDigitsSumDigitsSumDigitsSumDigitsSumDigitsSum = numsSetSumDigitsSumDigitsSumDigitsSumDigitsSumDigitsSum.sum\n\
    \        val numsSetSumDigitsSumDigitsSumDigitsSumDigitsSumDigitsSumLen = nums",
  "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n  \
    \      val sumsSet = sums.toSet\n        val numsSet = nums.toSet\n        sumsSet.count(x\
    \ => x > 0) + (numsSet.count(x => x > 0) * (arr.count(x => x > 0) * (arr.count(x\
    \ => x > 0) * (arr.count(x => x > 0) * (arr.count(x => x > 0) * (arr.count(x =>\
    \ x > 0) * (arr.count(x => x > 0) * (arr.count(x => x > 0) * (arr.count(x => x\
    \ > 0) * (arr.count(x => x > 0) * (arr.count(x => x > 0) * (arr.count(x => x >\
    \ 0) * (arr.count(x => x > 0) * (arr.count(x => x > 0) * (arr.count(x => x > 0)\
    \ * (arr.count(x => x > 0) * (arr.count(x => x > 0) * (arr.count(x => x > 0) *\
    \ (arr.count(x => x > 0) * (arr.count(x => x > 0) * (arr.count(x => x > 0) * (arr.count(x\
    \ => x > 0) * (arr.count(x => x > 0) * (arr.count(x => x > 0) * (arr.count(x =>\
    \ x > 0) * (arr.count(x => x > 0) * (arr.count(x => x > 0) * (arr.count(x => x\
    \ > 0) * (arr.count(x => x > 0) * (arr.count(x => x > 0) * (arr.count(x => x >\
    \ 0) * (arr.count(x => x > 0) * (arr.count(x => x > 0) * (arr.count(x => x > 0)\
    \ * (arr.count(x => x > 0) * (arr.count(x => x > 0) * (arr.count(x => x > 0) *\
    \ (arr.count(x => x > 0) * (arr.count(x => x > 0) * (arr.count(x => x > 0) * (arr.count(x\
    \ => x > 0) * (arr.count(x => x > 0) * (arr.count(x => x > 0) * (arr.count(x =>\
    \ x > 0) * (arr.count(x => x > 0) * (arr.count(x => x > 0) * (arr.count(x => x\
    \ > 0) * (arr.count(x => x > 0) * (arr.count(x => x > 0) * (arr.count(x => x >\
    \ 0) * (arr.count(x => x > 0) * (arr.count(x => x > 0) * (arr.count(x => x > 0)\
    \ * (arr.count(x => x > 0) * (arr.count(x => x > 0) * (arr.count(x => x > 0) *\
    \ (arr.count(x => x > 0) * (arr.count(x => x > 0) * (arr.count(x => x > 0) * (arr.count(x\
    \ => x > 0) * (arr.count(x => x > 0) * (arr.count(x => x > 0) * (arr.count(x =>\
    \ x > 0) * (arr.count(x => x > 0) * (arr.count(x => x > 0) * (arr.count(x ", " \
    \       val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n \
    \       val numsSums = nums.map(x => sums.filter(_ > x).size)\n        numsSums.sum",
  "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n  \
    \      val numsSums = nums.map(x => sums.count(y => y > x))\n        numsSums.sum",
  "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n  \
    \      val count = sums.count(x => x > 0)\n        val negative = sums.count(x\
    \ => x < 0)\n        if (negative > 0) count - negative else count", "       \
    \ val digits = arr.map(_.toString.toInt)\n        val sum = digits.sum\n     \
    \   val nums = arr.filter(x => x > 0).map(x => digits.count(_ > 0))\n        nums.sum",
  "        val nums = arr.filter(_ > 0)\n        val sums = nums.map(x => math.abs(x))\n\
    \        val counts = sums.groupBy(x => math.abs(x))\n        val maxCount = counts.maxBy(_._1)._1\n\
    \        val numsWithMaxCount = nums.filter(x => math.abs(x) == maxCount)\n  \
    \      numsWithMaxCount.length", "        val nums = arr.toSet\n        val numsSum\
    \ = nums.map(x => math.abs(x)).sum\n        numsSum", "        val nums = arr.toSet\n\
    \        val numsSet = nums.toSeq\n        val numsSetLen = numsSet.size\n   \
    \     val numsSetSum = numsSet.sum\n        val numsSetSumLen = numsSetSum.length\n\
    \        val numsSetSumDigits = numsSetSum.map(_.toString.toInt)\n        val\
    \ numsSetSumDigitsLen = numsSetSumDigits.length\n        val numsSetSumDigitsSum\
    \ = numsSetSumDigits.sum\n        val numsSetSumDigitsSumLen = numsSetSumDigitsSum.length\n\
    \        val numsSetSumDigitsSumDigits = numsSetSumDigitsSum.map(_.toString.toInt)\n\
    \        val numsSetSumDigitsSumDigitsLen = numsSetSumDigitsSumDigits.length\n\
    \        val numsSetSumDigitsSumDigitsSum = numsSetSumDigitsSumDigits.sum\n  \
    \      val numsSetSumDigitsSumDigitsSumLen = numsSetSumDigitsSumDigitsSum.length\n\
    \        val numsSetSumDigitsSumDigitsSumDigits = numsSetSumDigitsSumDigitsSum.map(_.toString.toInt)\n\
    \        val numsSetSumDigitsSumDigitsSumDigitsLen = numsSetSumDigitsSumDigitsSumDigits.length\n\
    \        val numsSetSumDigitsSumDigitsSumDigitsSum = numsSetSumDigitsSumDigitsSumDigits.sum\n\
    \        val numsSetSumDigitsSumDigitsSumDigitsSumLen = numsSetSumDigitsSumDigitsSumDigitsSum.length\n\
    \        val numsSetSumDigitsSumDigitsSumDigitsSumDigits = numsSetSumDigitsSumDigitsSumDigitsSum.map(_.toString.toInt)\n\
    \        val numsSetSumDigitsSumDigitsSumDigitsSumDigitsLen = numsSetSumDigitsSumDigitsSumDigitsSumDigits.length\n\
    \        val numsSetSumDigitsSumDigitsSumDigitsSumDigitsSum = numsSetSumDigitsSumDigitsSumDigitsSumDigitsSum.sum\n\
    \        val numsSetSumDigitsSumDigitsSumDigitsSumDigitsSumLen = numsSetSumDigitsSumDigitsSumDigitsSumDigitsSumDigitsLen\n\
    \        numsSet", "        val nums = arr.toSet\n        val sums = arr.map(x\
    \ => math.abs(x))\n        val sumsSet = sums.toSet\n        val numsSet = nums.toSet\n\
    \        val numsSum = nums.map(x => math.abs(x))\n        val numsSumSet = numsSum.toSet\n\
    \        val numsSumSet2 = numsSum.map(x => math.abs(x))\n        val numsSumSet3\
    \ = numsSum.map(x => math.abs(x))\n        val numsSumSet4 = numsSum.map(x =>\
    \ math.abs(x))\n        val numsSumSet5 = numsSum.map(x => math.abs(x))\n    \
    \    val numsSumSet6 = numsSum.map(x => math.abs(x))\n        val numsSumSet7\
    \ = numsSum.map(x => math.abs(x))\n        val numsSumSet8 = numsSum.map(x =>\
    \ math.abs(x))\n        val numsSumSet9 = numsSum.map(x => math.abs(x))\n    \
    \    val numsSumSet10 = numsSum.map(x => math.abs(x))\n        val numsSumSet11\
    \ = numsSum.map(x => math.abs(x))\n        val numsSumSet12 = numsSum.map(x =>\
    \ math.abs(x))\n        val numsSumSet13 = numsSum.map(x => math.abs(x))\n   \
    \     val numsSumSet14 = numsSum.map(x => math.abs(x))\n        val numsSumSet15\
    \ = numsSum.map(x => math.abs(x))\n        val numsSumSet16 = numsSum.map(x =>\
    \ math.abs(x))\n        val numsSumSet17 = numsSum.map(x => math.abs(x))\n   \
    \     val numsSumSet18 = numsSum.map(x => math.abs(x))\n        val numsSumSet19\
    \ = numsSum.map(x => math.abs(x))\n        val numsSumSet20 = numsSum.map(x =>\
    \ math.abs(x))\n        val numsSumSet21 = numsSum.map(x => math.abs(x))\n   \
    \     val numsSumSet22 = numsSum.map(x => math.abs(x))\n        val numsSumSet23\
    \ = numsSum.map(x => math.abs(x))\n        val numsSumSet24 = numsSum.map(x =>\
    \ math.abs(x))\n        val numsSumSet25 = numsSum.map(x => math.", "        val\
    \ nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val\
    \ numsSums = sums.toSet\n        nums.filter(x => numsSums.contains(math.abs(x)))",
  "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n  \
    \      val sumsSet = sums.toSet\n        val numsSet = nums.toSet\n        val\
    \ numsSum = nums.map(x => math.abs(x)).reduceLeft(_ + _)\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSetSet = numsSumSet.toSet\n        val numsSumSetSetSet\
    \ = numsSumSetSet.toSet\n        val numsSumSetSetSetSet = numsSumSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSet = numsSumSetSetSetSet.toSet\n        val numsSumSetSetSetSetSetSet\
    \ = numsSumSetSetSetSetSet.toSet\n        val numsSumSetSetSetSetSetSetSet = numsSumSetSetSetSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSetSetSetSet = numsSumSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSetSetSetSetSet = numsSumSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSetSetSetSetSetSet = numsSumSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSetSetSetSetSetSetSet = numsSumSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSetSetSetSetSetSetSet = numsSumSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSetSetSetSetSetSetSetSet = numsSumSetSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSetSetSetSetSetSetSetSetSet = numsSumSetSetSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSetSetSetSetSetSetSetSetSet = numsSumSetSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSetSetSetSetSetSetSetSetSet = numsSumSetSetSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSetSetSetSetSetSetSet", "        val nums = arr.filter(x\
    \ => x >= 0)\n        val sums = nums.map(x => math.abs(x)).sum\n        nums.count(x\
    \ => math.abs(x) > sums)", "        val digits = arr.map(_.toString.toInt)\n \
    \       val sums = digits.map(x => x.toString.toInt).map(_.sum)\n        sums.count(_\
    \ > 0)", "        val n = arr.length\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 0 until n){\n            val sum = 0\n            for(j <- 0\
    \ until i){\n                sum += arr(j)\n            }\n            sums +=\
    \ sum\n        }\n        sums.sum", "        var sum = 0\n        arr.foreach(x\
    \ => sum += x)\n        if (sum < 0) sum = -sum\n        arr.count(x => x > 0\
    \ && sum > 0)", "        val sums = arr.map(x => math.abs(x))\n        val counts\
    \ = sums.groupBy(x => math.abs(x))\n        val count = counts.mapValues(_.length)\n\
    \        count.values.sum", "        val nums = arr.map(x => math.abs(x))\n  \
    \      val sums = nums.map(x => math.pow(10, math.ceil(math.log10(x))))\n    \
    \    val counts = sums.map(x => math.ceil(x / x))\n        val result = counts.foldLeft(0)((x,\
    \ y) => x + y)\n        result", "        val nums = arr.toSet\n        val sums\
    \ = arr.map(x => math.abs(x))\n        val sumsSet = sums.toSet\n        val numsSet\
    \ = nums.toSet\n        val numsSums = nums.map(x => math.abs(x))\n        val\
    \ numsSumsSet = numsSums.toSet\n        val numsSumsSetSet = numsSums.map(x =>\
    \ math.abs(x)).toSet\n        val numsSumsSetSetSet = numsSumsSet.toSet\n    \
    \    val numsSumsSetSetSet = numsSumsSetSet.toSet\n        val numsSumsSetSetSetSet\
    \ = numsSumsSetSetSet.toSet\n        val numsSumsSetSetSetSet = numsSumsSetSetSetSet.toSet\n\
    \        val numsSumsSetSetSetSetSet = numsSumsSetSetSetSetSet.toSet\n       \
    \ val numsSumsSetSetSetSetSetSet = numsSumsSetSetSetSetSet.toSet\n        val\
    \ numsSumsSetSetSetSetSetSet = numsSumsSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSet",
  "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x)).toSet\n\
    \        val count = sums.count(x => x > 0)\n        nums.count(x => math.abs(x)\
    \ > 0) - (count - nums.count(x => math.abs(x) > 0))", "        val nums = arr.toSet\n\
    \        val sums = arr.map(x => math.abs(x))\n        val numsSum = sums.toSet\n\
    \        val numsSumCount = numsSum.count\n        nums.count(x => numsSum.contains(math.abs(x)))",
  "        val nums = arr.map(_.toInt)\n        val sum = nums.sum\n        val digits\
    \ = nums.map(_.toInt)\n        val negatives = nums.filter(x => x < 0).map(_.toInt)\n\
    \        val positives = nums.filter(x => x > 0).map(_.toInt)\n        val positiveSum\
    \ = positives.sum\n        val negativeSum = negatives.sum\n        val positiveDigits\
    \ = positives.map(_.toInt)\n        val negativeDigits = negatives.map(_.toInt)\n\
    \        val positiveDigitSum = positiveDigits.sum\n        val negativeDigitSum\
    \ = negativeDigits.sum\n        val positiveDigitSumDigits = positiveDigits.map(_.toInt).sum\n\
    \        val negativeDigitSumDigits = negativeDigits.map(_.toInt).sum\n      \
    \  val positiveDigitSumDigitsDigits = positiveDigits.map(_.toInt).map(_.toInt).sum\n\
    \        val negativeDigitSumDigitsDigits = negativeDigits.map(_.toInt).map(_.toInt).sum\n\
    \        val positiveDigitSumDigitsDigitsDigits = positiveDigits.map(_.toInt).map(_.toInt).map(_.toInt).sum\n\
    \        val negativeDigitSumDigitsDigitsDigits = negativeDigits.map(_.toInt).map(_.toInt).map(_.toInt).sum\n\
    \        val positiveDigitSumDigitsDigitsDigitsDigits = positiveDigits.map(_.toInt).map(_.toInt).map(_.toInt).map(_.toInt).sum\n\
    \        val negativeDigitSumDigitsDigitsDigitsDigits = negativeDigits.map(_.toInt).map(_.toInt).map(_.toInt).map(_.toInt).map(_.toInt).sum\n\
    \        val positiveDigitSumDigitsDigitsDigitsDigitsDigits = positiveDigits.map(_.toInt).map(_.toInt).map(_.toInt).map(_.toInt).map(_.toInt).map(_.toInt).sum\n\
    \        val negativeDigitSumDigitsDigitsDigitsDigitsDigits = negativeDigits.map(_.toInt).map(_.toInt).map(_.toInt).map(_.toInt).map(_.toInt).map(_.toInt).map(_.toInt).map(_.toInt).sum\n\
    \        val positiveDigitSumDigitsDigitsDigitsDigitsDigitsDigits = positiveDigits.map(_.toInt).map(_.toInt).map(_.toInt).map(_.toInt).map(_.toInt).map(_.",
  "        val nums = arr.toSet\n        val digits = arr.map(x => math.abs(x))\n\
    \        val sums = digits.map(x => math.pow(10, x))\n        val count = sums.count(x\
    \ => x > 0)\n        count", "        val nums = arr.toSet\n        val sums =\
    \ arr.map(x => math.abs(x))\n        val numsSums = nums.map(x => math.abs(x))\n\
    \        val numsSumsSums = numsSums.map(x => math.abs(x))\n        val numsSumsSumsSums\
    \ = numsSumsSums.map(x => math.abs(x))\n        val numsSumsSumsSumsSums = numsSumsSumsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSumsSumsSumsSums = numsSumsSumsSumsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSumsSumsSumsSumsSums = numsSumsSumsSumsSumsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSumsSumsSumsSumsSumsSums = numsSumsSumsSumsSumsSumsSumsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSumsSumsSumsSumsSumsSumsSums = numsSumsSumsSumsSumsSumsSumsSumsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSumsSumsSumsSumsSumsSumsSumsSums = numsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums =\
    \ numsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums.map(x => math.abs(x))\n   \
    \     val numsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums = numsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = numsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums.map(x => math.abs(x))\n\
    \        val numsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums", "        val\
    \ nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val\
    \ numsSums = nums.map(x => sums.count(_ > 0))\n        numsSums.sum", "      \
    \  val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n      \
    \  val numsSums = nums.map(x => sums.filter(_ > x).size)\n        numsSums.sum",
  "        val n = arr.length\n        val m = arr.map(_.toString.toInt).sum\n   \
    \     val result = arr.filter(_ > 0).count(_ > 0)\n        if (result > 0) m /\
    \ result else 0", "        val nums = arr.filter(x => x >= 0).map(x => math.abs(x))\n\
    \        val sums = nums.map(x => math.pow(10, math.ceil(math.log10(x))))\n  \
    \      val counts = sums.map(x => nums.count(y => y % x == 0))\n        counts.reduce((x,\
    \ y) => x + y)", "        val nums = arr.filter(x => x >= 0)\n        val numsSum\
    \ = nums.map(x => math.abs(x)).sum\n        nums.count(x => math.abs(x) > 0) +\
    \ (numsSum - nums.sum)", "        val nums = arr.toSet\n        val sums = arr.map(x\
    \ => math.abs(x))\n        val counts = sums.groupBy(x => math.abs(x)).mapValues(_.size)\n\
    \        nums.foldLeft(0L){ (sum, num) =>\n            val count = counts(math.abs(num))\n\
    \            sum + math.pow(10, count) * count\n        }", "        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val counts\
    \ = sums.groupBy(x => math.abs(x))\n        val count = counts.mapValues(_.size)\n\
    \        val result = count.mapValues(x => math.abs(x))\n        val sum = result.mapValues(x\
    \ => math.abs(x))\n        val positiveSum = sum.filter(_ > 0)\n        val negativeSum\
    \ = sum.filter(_ < 0)\n        val positiveCount = positiveSum.sum\n        val\
    \ negativeCount = negativeSum.sum\n        val positiveSumCount = positiveSum.sum\n\
    \        val negativeSumCount = negativeSum.sum\n        val positiveSumCount2\
    \ = positiveSum.sum\n        val negativeSumCount2 = negativeSum.sum\n       \
    \ val positiveSumCount3 = positiveSum.sum\n        val negativeSumCount3 = negativeSum.sum\n\
    \        val positiveSumCount4 = positiveSum.sum\n        val negativeSumCount4\
    \ = negativeSum.sum\n        val positiveSumCount5 = positiveSum.sum\n       \
    \ val negativeSumCount5 = negativeSum.sum\n        val positiveSumCount6 = positiveSum.sum\n\
    \        val negativeSumCount6 = negativeSum.sum\n        val positiveSumCount7\
    \ = positiveSum.sum\n        val negativeSumCount7 = negativeSum.sum\n       \
    \ val positiveSumCount8 = positiveSum.sum\n        val negativeSumCount8 = negativeSum.sum\n\
    \        val positiveSumCount9 = positiveSum.sum\n        val negativeSumCount9\
    \ = negativeSum.sum\n        val positiveSumCount10 = positiveSum.sum\n      \
    \  val negativeSumCount10 = negativeSum.sum\n        val positiveSumCount11 =\
    \ positiveSum.sum\n        val negativeSumCount11 = negativeSum.sum\n        val\
    \ positiveSumCount12 = positiveSum.sum\n        val negativeSumCount12 = negativeSum.sum\n\
    \        val positiveSumCount13 = positiveSum.sum\n        val negativeSumCount13\
    \ = negativeSum.sum\n        val positiveSumCount14 = positiveSum.sum\n      \
    \  val negativeSumCount14 = negativeSum.sum\n        val positiveSumCount15 =\
    \ positiveSum.sum\n        val negativeSumCount15 = negativeSum.sum\n        val\
    \ positiveSumCount16 = positiveSum.sum\n        val negativeSumCount16 = negativeSum.sum\n\
    \        val positiveSumCount17 = positiveSum.sum\n        val negativeSumCount17\
    \ = negativeSum.sum\n        val positiveSumCount18 = positiveSum.sum\n      \
    \  val negativeSumCount18 = negativeSum", "        val nums = arr.toSet\n    \
    \    val numsCount = arr.count(x => x > 0)\n        val numsSum = arr.count(x\
    \ => x >= 0)\n        val numsSumDigit = arr.count(x => x >= 0 && x < 10)\n  \
    \      val numsSumDigitNegative = arr.count(x => x >= 0 && x < 10 && x < 0)\n\
    \        val numsSumDigitNegativeFirst = arr.count(x => x >= 0 && x < 10 && x\
    \ < 0 && x < 10)\n        val numsSumDigitNegativeSecond = arr.count(x => x >=\
    \ 0 && x < 10 && x < 0 && x < 10 && x < 0)\n        val numsSumDigitNegativeThird\
    \ = arr.count(x => x >= 0 && x < 10 && x < 0 && x < 10 && x < 10 && x < 0)\n \
    \       val numsSumDigitNegativeFourth = arr.count(x => x >= 0 && x < 10 && x\
    \ < 0 && x < 10 && x < 10 && x < 10 && x < 0)\n        val numsSumDigitNegativeFifth\
    \ = arr.count(x => x >= 0 && x < 10 && x < 0 && x < 10 && x < 10 && x < 10 &&\
    \ x < 10 && x < 0)\n        val numsSumDigitNegativeSixth = arr.count(x => x >=\
    \ 0 && x < 10 && x < 0 && x < 10 && x < 10 && x < 10 && x < 10 && x < 10 && x\
    \ < 0)\n        val numsSumDigitNegativeSeventh = arr.count(x => x >= 0 && x <\
    \ 10 && x < 0 && x < 10 && x < 10 && x < 10 && x < 10 && x < 10 && x < 0)\n  \
    \      val numsSumDigitNegativeEighth = arr.count(x => x >= 0 && x < 10 && x <\
    \ 0 && x < 10 && x < 10 && x < 10 && x < 10 && x < 10 && x < 0)\n        val numsSumDigitNegativeNinth\
    \ = arr.count(x => x >= 0 && x < 10 && x < 0 && x < 10 && x < 10 && x < 10 &&\
    \ x < 10 && x < 10 && x < 10 && x < 0)\n        val numsSumDigitNegativeTenth\
    \ = arr.count(x => x >= 0 && x < 10 && x < 0 && x < 10 && x < 10 && x < 10 &&\
    \ x < 10 && x < 10 && x < 10 && x < 0)\n        val numsSumDigitNegativeEleventh\
    \ = arr.count(x => x >= 0 && x < 10 && x < 0 && x < 10 && x < 10 && x < 10 &&\
    \ x < 10 && x < 10 && x < 10 && x < 0)\n        val numsSumDigitNegativeTwelth\
    \ = arr.count(x => x >= 0 && x < 10 && x < 0 && x < 10 && x < 10 && x < 10 &&\
    \ x < 10 && x < 10 && x < 10 && x < 0)\n        val nums", "        val digits\
    \ = arr.map(_.toInt)\n        val sums = digits.map(x => math.abs(x))\n      \
    \  val nums = sums.filter(x => x > 0)\n        nums.sum", "        val nums =\
    \ arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val count =\
    \ sums.count(x => x > 0)\n        nums.count(x => math.abs(x) == sums.max)", " \
    \       val nums = arr.toSet\n        val numsCount = arr.count(x => x > 0)\n\
    \        val numsSum = arr.count(x => x > 0 && x % 10 == 0)\n        numsCount\
    \ - numsSum", "        val nums = arr.toSet\n        val numsSum = arr.map(x =>\
    \ math.abs(x))\n        val numsSumSet = numsSum.toSet\n        val numsSumSetSize\
    \ = numsSumSet.size\n        val numsSumSetIterator = numsSumSet.iterator\n  \
    \      val numsSumSetIteratorSize = numsSumSetIterator.size\n        val numsSumSetIteratorIterator\
    \ = numsSumSetIterator.iterator\n        val numsSumSetIteratorIteratorSize =\
    \ numsSumSetIteratorIterator.size\n        val numsSumSetIteratorIteratorIterator\
    \ = numsSumSetIteratorIterator.iterator\n        val numsSumSetIteratorIteratorIteratorSize\
    \ = numsSumSetIteratorIteratorIterator.size\n        val numsSumSetIteratorIteratorIteratorIterator\
    \ = numsSumSetIteratorIteratorIterator.iterator\n        val numsSumSetIteratorIteratorIteratorIteratorSize\
    \ = numsSumSetIteratorIteratorIteratorIterator.size\n        val numsSumSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSumSetIteratorIteratorIteratorIterator.iterator\n        val numsSumSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSumSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSumSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSumSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSumSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSumSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ numsSumSetIteratorIteratorIteratorIteratorIteratorIteratorIterator = numsSumSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSumSetIteratorIteratorIteratorIteratorIteratorIteratorSize =\
    \ numsSumSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n  \
    \      val numsSumSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSumSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSumSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSumSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSumSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSumSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSumSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSumSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSumSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSumSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSumSetIteratorIteratorIteratorIteratorIteratorIterator", "  \
    \      var sum = 0\n        for(i <- arr) {\n            sum += i\n        }\n\
    \        sum", "        val digits = arr.map(_.toString.toInt)\n        val sums\
    \ = digits.map(_.sum)\n        sums.count(_ > 0)", "        val nums = arr.filter(_\
    \ > 0)\n        val sums = nums.map(x => math.abs(x))\n        val counts = sums.groupBy(_\
    \ % 10).mapValues(_.size)\n        val result = counts.filter(_._2 > 0).map(_._2).sum\n\
    \        result", "        val nums = arr.toSet\n        val numsSet = nums.toSet\n\
    \        val numsSetIterator = numsSet.iterator\n        var count = 0\n     \
    \   while (numsSetIterator.hasNext) {\n            val num = numsSetIterator.next\n\
    \            if (num > 0) {\n                val digits = num.toString.toList.map(_.toInt)\n\
    \                val sum = digits.sum\n                if (sum > 0) {\n      \
    \              count = count + 1\n                }\n            }\n        }\n\
    \        count", "        val nums = arr.map(_.toInt)\n        val sums = nums.map(x\
    \ => math.abs(x))\n        val counts = sums.groupBy(x => math.abs(x))\n     \
    \   val maxCount = counts.maxBy(_._1)._1\n        val numsWithMaxCount = nums.filter(x\
    \ => math.abs(x) == maxCount)\n        numsWithMaxCount.length", "        val\
    \ nums = arr.toSet\n        val digits = arr.map(_.toString.toInt)\n        val\
    \ sums = digits.map(_.sum)\n        val positiveSums = sums.filter(sum => sum\
    \ > 0)\n        val negativeSums = sums.filter(sum => sum < 0)\n        val positiveSumsCount\
    \ = positiveSums.size\n        val negativeSumsCount = negativeSums.size\n   \
    \     val positiveSumsSum = positiveSums.sum\n        val negativeSumsSum = negativeSums.sum\n\
    \        val positiveSumsSumDigits = positiveSums.map(_.toString.toInt).sum\n\
    \        val negativeSumsSumDigits = negativeSums.map(_.toString.toInt).sum\n\
    \        val positiveSumsSumDigits = positiveSums.map(_.toString.toInt).sum\n\
    \        val negativeSumsSumDigits = negativeSums.map(_.toString.toInt).sum\n\
    \        val positiveSumsSumDigits = positiveSums.map(_.toString.toInt).sum\n\
    \        val negativeSumsSumDigits = negativeSums.map(_.toString.toInt).sum\n\
    \        val positiveSumsSumDigits = positiveSums.map(_.toString.toInt).sum\n\
    \        val negativeSumsSumDigits = negativeSums.map(_.toString.toInt).sum\n\
    \        val positiveSumsSumDigits = positiveSums.map(_.toString.toInt).sum\n\
    \        val negativeSumsSumDigits = negativeSums.map(_.toString.toInt).sum\n\
    \        val positiveSumsSumDigits = positiveSums.map(_.toString.toInt).sum\n\
    \        val negativeSumsSumDigits = negativeSums.map(_.toString.toInt).sum\n\
    \        val positiveSumsSumDigits = positiveSums.map(_.toString.toInt).sum\n\
    \        val negativeSumsSumDigits = negativeSums.map(_.toString.toInt).sum\n\
    \        val positiveSumsSumDigits = positiveSums.map(_.toString.toInt).sum\n\
    \        val negativeSumsSumDigits = negativeSums.map(_.toString.toInt).sum\n\
    \        val positiveSumsSumDigits = positiveSums.map(_.toString.toInt).sum\n\
    \        val negativeSumsSumDigits = negativeSums.map(_.toString.toInt).sum\n\
    \        val positiveSumsSumDigits = positiveSums.map(_.toString.toInt).sum\n\
    \        val negativeSumsSumDigits = negativeSums.map(_.toString.toInt).sum\n\
    \        val positiveSumsSumDigits = positive", "        val nums = arr.toSet\n\
    \        val sums = arr.map(x => math.abs(x))\n        val numsSums = nums.map(x\
    \ => sums.count(_ > x))\n        numsSums.sum", "        val nums = arr.toSet\n\
    \        val sums = arr.map(x => math.abs(x))\n        val numsWithSum = sums.filter(x\
    \ => x >= 0)\n        numsWithSum.count(x => x > 0)", "        val sums = arr.map(x\
    \ => math.abs(x))\n        val sumsSorted = sums.sortWith(_ < _)\n        val\
    \ sumsSortedCount = sumsSorted.length\n        val nums = arr.filter(x => math.abs(x)\
    \ > 0).length\n        val numsSorted = nums.sortWith(_ < _)\n        val numsSortedCount\
    \ = numsSorted.length\n        val numsSum = sumsSorted.zip(numsSorted).filter(_._1\
    \ > 0).length\n        numsSum", "        val nums = arr.toSet\n        val numsCount\
    \ = arr.toList.foldLeft(0)(_ + nums.count(_ > 0))\n        numsCount", "     \
    \   val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n     \
    \   val numsWithSum = nums.filter(x => sums.contains(x))\n        numsWithSum.size",
  "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n  \
    \      val numsSums = nums.map(x => sums.count(y => y == x))\n        numsSums.sum",
  "        val digits = arr.map(_.toInt)\n        val sums = digits.map(_.toInt).map(_.toLong)\n\
    \        val positiveSums = sums.filter(_.isPositive)\n        val negativeSums\
    \ = sums.filter(_.isNegative)\n        positiveSums.size + negativeSums.size",
  "        val nums = arr.toSet\n        val numsSum = arr.map(x => math.abs(x)).reduceLeft(_\
    \ + _)\n        nums.count(x => x > 0 && math.abs(x) == numsSum)", "        val\
    \ nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val\
    \ numsSums = nums.map(x => sums.filter(_ > x).size)\n        numsSums.sum", " \
    \       val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n \
    \       val numsSums = nums.map(x => sums.filter(y => y > x).size)\n        numsSums.sum",
  "        val nums = arr.toSet\n        val sums = nums.map(x => math.abs(x))\n \
    \       val numsSum = sums.toSet\n        numsSum.size + (numsSum.size - sums.size)",
  "        val nums = arr.toSet\n        val numsSum = arr.toList.map(x => math.abs(x)).sum\n\
    \        nums.count(x => x > 0 && numsSum - math.abs(x) > 0)", "        var sum\
    \ = 0L\n        var count = 0L\n        for(i <- 0 until arr.length) {\n     \
    \       sum += arr(i)\n            if(sum > 0) {\n                count += 1\n\
    \            }\n        }\n        count", "        val nums = arr.toSet\n   \
    \     val sums = arr.map(x => math.abs(x))\n        val numsSums = nums.map(x\
    \ => sums.filter(_ > x).size)\n        numsSums.sum", "        val nums = arr.toSet\n\
    \        val sums = arr.map(x => math.abs(x))\n        val numsSums = nums.map(x\
    \ => sums.count(y => y > x))\n        numsSums.sum", "        val digits = arr.map(_.toString.toInt)\n\
    \        val sums = digits.map(_.sum)\n        val counts = sums.groupBy(_ > 0)\n\
    \        counts.map(_._2.length).sum", "        val nums = arr.toSet\n       \
    \ val sums = arr.map(x => math.abs(x))\n        val numsSums = nums.map(x => sums.count(_\
    \ > x))\n        numsSums.sum", "        var count = 0\n        for (i <- arr)\
    \ {\n            val digit = i % 10\n            if (digit > 0) count += digit\n\
    \            else count += -digit\n        }\n        count", "        var sum\
    \ = 0L\n        var count = 0L\n        for(i <- arr) {\n            sum += i\n\
    \            if(sum > 0) {\n                count += 1L\n            }\n     \
    \   }\n        count", "        val nums = arr.toSet\n        val sums = arr.map(x\
    \ => math.abs(x))\n        val numsSums = nums.map(x => sums.count(_ > 0))\n \
    \       numsSums.sum", "        val nums = arr.filter(x => x > 0).map(x => math.abs(x))\n\
    \        val sum = nums.sum\n        val numsLessThanZero = nums.filter(x => x\
    \ < 0)\n        val numsLessThanZeroSum = numsLessThanZero.sum\n        if (sum\
    \ < 0 || numsLessThanZeroSum < 0) 0 else numsLessThanZeroSum", "        val nums\
    \ = arr.map(_.toInt)\n        val sums = nums.map(x => if (x < 0) -x else x)\n\
    \        val counts = sums.groupBy(x => x).mapValues(_.size)\n        counts.foldLeft(0)((acc,\
    \ x) => acc + x)", "        val nums = arr.toSet\n        val sums = arr.map(x\
    \ => math.abs(x)).toSet\n        val count = sums.count(x => x > 0)\n        nums.count(x\
    \ => x > 0 && sums.contains(math.abs(x)))", "        val sums = arr.map(x => math.abs(x))\n\
    \        val positiveSums = sums.filter(x => x > 0)\n        val negativeSums\
    \ = sums.filter(x => x < 0)\n        val positiveSumsCount = positiveSums.length\n\
    \        val negativeSumsCount = negativeSums.length\n        val count = positiveSumsCount\
    \ + negativeSumsCount\n        count", "        val nums = arr.toSet\n       \
    \ val sums = arr.map(x => math.abs(x))\n        val counts = sums.groupBy(x =>\
    \ math.abs(x)).mapValues(_.size)\n        val numsCount = nums.count(x => counts.getOrElse(math.abs(x),\
    \ 0) > 0)\n        numsCount", "        var sum = 0L\n        var count = 0L\n\
    \        for (i <- 0 until arr.length) {\n            sum += arr(i)\n        \
    \    if (sum > 0) {\n                count += 1\n            }\n        }\n  \
    \      count", "        val nums = arr.map(_.toInt)\n        val sums = nums.map(x\
    \ => math.abs(x))\n        val count = sums.count(x => x > 0)\n        count",
  "        val nums = arr.map(x => if (x < 0) -x else x)\n        val sums = nums.map(x\
    \ => math.abs(x))\n        val counts = sums.groupBy(x => math.abs(x))\n     \
    \   val count = counts.mapValues(_.size).sum\n        count", "        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val numsWithSums\
    \ = sums.filter(x => x > 0).map(x => nums.contains(x))\n        numsWithSums.count(_\
    \ == true)", "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x)).toSet\n\
    \        val sumsSet = sums.toSet\n        val numsSet = nums.toSet\n        val\
    \ numsSums = nums.map(x => math.abs(x)).toSet\n        val numsSumsSet = numsSums.toSet\n\
    \        val numsSumsSetSet = numsSumsSet.toSet\n        val numsSumsSetSetSet\
    \ = numsSumsSetSet.toSet\n        val numsSumsSetSetSetSet = numsSumsSetSetSet.toSet\n\
    \        val numsSumsSetSetSetSetSet = numsSumsSetSetSetSet.toSet\n        val\
    \ numsSumsSetSetSetSetSetSet = numsSumsSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSet\
    \ = num", "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n\
    \        val sumsSet = sums.toSet\n        val numsSet = nums.toSet\n        val\
    \ numsSums = nums.map(x => math.abs(x))\n        val numsSumsSet = numsSums.toSet\n\
    \        val numsSumsSetSet = numsSums.toSet\n        val numsSumsSetSetSet =\
    \ numsSums.toSet\n        val numsSumsSetSetSetSet = numsSums.toSet\n        val\
    \ numsSumsSetSetSetSet = numsSums.toSet\n        val numsSumsSetSetSetSetSet =\
    \ numsSums.toSet\n        val numsSumsSetSetSetSetSet = numsSums.toSet\n     \
    \   val numsSumsSetSetSetSetSetSet = numsSums.toSet\n        val numsSumsSetSetSetSetSetSet\
    \ = numsSums.toSet\n        val numsSumsSetSetSetSetSetSet = numsSums.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSet = numsSums.toSet\n        val numsSumsSetSetSetSetSetSetSetSet\
    \ = numsSums.toSet\n        val numsSumsSetSetSetSetSetSetSetSet = numsSums.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSet = numsSums.toSet\n        val numsSumsSetSetSetSetSetSetSetSet\
    \ = numsSums.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSet = numsSums.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSetSetSet = numsSums.toSet\n       \
    \ val numsSumsSetSetSetSetSetSetSetSetSetSet = numsSums.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSet\
    \ = numsSums.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSet = numsSums.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSetSetSet = numsSums.toSet\n       \
    \ val numsSumsSetSetSetSetSetSetSetSetSetSet = numsSums.", "        val n = arr.length\n\
    \        val nums = mutable.HashMap[Long, Long]()\n        for (i <- 0 until n)\
    \ {\n            val digit = arr(i).asDigit\n            if (digit < 0) {\n  \
    \              nums(-digit) += 1\n            } else {\n                nums(digit)\
    \ += 1\n            }\n        }\n        nums.values.sum", "        val nums\
    \ = arr.toSet\n        val numsSet = nums.toSet\n        val numsSortedSet = nums.toSortedSet\n\
    \        val numsSortedSetSet = nums.toSortedSetSet\n        val numsSortedSetSetSet\
    \ = nums.toSortedSetSetSet\n        val numsSortedSetSetSetSet = nums.toSortedSetSetSetSet\n\
    \        val numsSortedSetSetSetSet = nums.toSortedSetSetSetSet\n        val numsSortedSetSetSetSetSet\
    \ = nums.toSortedSetSetSetSetSet\n        val numsSortedSetSetSetSetSet = nums.toSortedSetSetSetSetSet\n\
    \        val numsSortedSetSetSetSetSet = nums.toSortedSetSetSetSetSet\n      \
    \  val numsSortedSetSetSetSetSetSet = nums.toSortedSetSetSetSetSetSet\n      \
    \  val numsSortedSetSetSetSetSetSet = nums.toSortedSetSetSetSetSetSet\n      \
    \  val numsSortedSetSetSetSetSetSet = nums.toSortedSetSetSetSetSetSet\n      \
    \  val numsSortedSetSetSetSetSetSet = nums.toSortedSetSetSetSetSetSet\n      \
    \  val numsSortedSetSetSetSetSetSetSet = nums.toSortedSetSetSetSetSetSetSet\n\
    \        val numsSortedSetSetSetSetSetSetSet = nums.toSortedSetSetSetSetSetSetSet\n\
    \        val numsSortedSetSetSetSetSetSetSet = nums.toSortedSetSetSetSetSetSetSet\n\
    \        val numsSortedSetSetSetSetSetSetSet = nums.toSortedSetSetSetSetSetSetSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSet = nums.toSortedSetSetSetSetSetSetSetSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSet = nums.toSortedSetSetSetSetSetSetSetSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSet = nums.toSortedSetSetSetSetSetSetSetSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSet = nums.toSortedSetSetSetSetSetSetSetSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSet = nums.toSortedSetSetSetSetSetSetSetSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSet = nums.toSortedSetSet", "    \
    \    val n = arr.length\n        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 0 until n) {\n            val digits = arr(i).abs\n       \
    \     if (digits < 10) {\n                nums += digits\n            } else if\
    \ (digits < 100) {\n                nums += digits % 10\n            } else if\
    \ (digits < 1000) {\n                nums += digits % 100\n            } else\
    \ if (digits < 10000) {\n                nums += digits % 1000\n            }\
    \ else if (digits < 100000) {\n                nums += digits % 10000\n      \
    \      } else if (digits < 1000000) {\n                nums += digits % 100000\n\
    \            } else if (digits < 10000000) {\n                nums += digits %\
    \ 1000000\n            } else if (digits < 100000000) {\n                nums\
    \ += digits % 10000000\n            } else if (digits < 1000000000) {\n      \
    \          nums += digits % 100000000\n            } else if (digits < 10000000000)\
    \ {\n                nums += digits % 1000000000\n            } else if (digits\
    \ < 100000000000) {\n                nums += digits % 10000000000\n          \
    \  } else if (digits < 1000000000000) {\n                nums += digits % 100000000000\n\
    \            } else if (digits < 10000000000000) {\n                nums += digits\
    \ % 1000000000000\n            } else if (digits < 100000000000000) {\n      \
    \          nums += digits % 10000000000000\n            } else if (digits < 1000000000000000)\
    \ {\n                nums += digits % 100000000000000\n            } else if (digits\
    \ < 10000000000000000) {\n                nums += digits % 1000000000000000\n\
    \            } else if (digits < 100000000000000000) {\n                nums +=\
    \ digits % 10000000000000000\n            } else if (digits < 100000000000000000)\
    \ {\n                nums += digits % 100000000000000000\n            } else if\
    \ (digits < 1000000000000000000) {\n                nums += digits % 1000000000000000000\n\
    \            } else {\n                nums += digits % 1000000000000000000\n\
    \            }\n        }\n        nums.length", "        val nums = arr.toSet\n\
    \        val sums = arr.map(x => math.abs(x)).toSet\n        val numsSums = nums.filter(x\
    \ => sums.contains(math.abs(x)))\n        numsSums.size", "        val nums =\
    \ arr.toSet\n        val numsCount = nums.count\n        val numsSum = nums.sum\n\
    \        val numsSumDigits = numsSum.toString.length\n        val numsSumDigit\
    \ = numsSum.toString.charAt(0)\n        val numsSumDigits = numsSumDigit - numsSumDigit\
    \ % 10\n        val numsSumDigit = numsSumDigit % 10\n        val numsSumDigits\
    \ = numsSumDigits + numsSumDigit\n        val numsSumDigit = numsSumDigit + numsSumDigit\
    \ % 10\n        val numsSumDigit = numsSumDigit % 10\n        val numsSumDigits\
    \ = numsSumDigits + numsSumDigit\n        val numsSumDigit = numsSumDigit + numsSumDigit\
    \ % 10\n        val numsSumDigit = numsSumDigit % 10\n        val numsSumDigits\
    \ = numsSumDigits + numsSumDigit\n        val numsSumDigit = numsSumDigit + numsSumDigit\
    \ % 10\n        val numsSumDigit = numsSumDigit % 10\n        val numsSumDigits\
    \ = numsSumDigits + numsSumDigit\n        val numsSumDigit = numsSumDigit + numsSumDigit\
    \ % 10\n        val numsSumDigit = numsSumDigit % 10\n        val numsSumDigits\
    \ = numsSumDigits + numsSumDigit\n        val numsSumDigit = numsSumDigit + numsSumDigit\
    \ % 10\n        val numsSumDigit = numsSumDigit % 10\n        val numsSumDigits\
    \ = numsSumDigits + numsSumDigit\n        val numsSumDigit = numsSumDigit + numsSumDigit\
    \ % 10\n        val numsSumDigit = numsSumDigit % 10\n        val numsSumDigits\
    \ = numsSumDigits + numsSumDigit\n        val numsSumDigit = numsSumDigit + numsSumDigit\
    \ % 10\n        val numsSumDigit = numsSumDigit % 10\n        val numsSumDigits\
    \ = numsSumDigits + numsSumDigit\n        val numsSumDigit = numsSumDigit + numsSumDigit\
    \ % 10\n        val num", "        val nums = arr.filter(_ > 0)\n        val numsSum\
    \ = nums.sum\n        val numsSumDigits = numsSum.toString.length\n        val\
    \ numsSumDigit = numsSum.toString.charAt(0)\n        val numsSumDigits = numsSumDigit\
    \ - numsSumDigits.toString.length\n        nums.count(_ > 0)", "        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val numsSums\
    \ = nums.map(x => math.abs(x))\n        val numsSumsSet = numsSums.toSet\n   \
    \     val numsSumsSetSet = numsSumsSet.toSet\n        val numsSumsSetSetSet =\
    \ numsSumsSetSet.toSet\n        val numsSumsSetSetSetSet = numsSumsSetSetSet.toSet\n\
    \        val numsSumsSetSetSetSetSet = numsSumsSetSetSetSet.toSet\n        val\
    \ numsSumsSetSetSetSetSetSet = numsSumsSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSetSetSet\
    \ = numsSum", "        val nums = arr.toSet\n        val numsSum = arr.map(x =>\
    \ x.toString.toInt).sum\n        nums.filter(_ > 0).count(x => numsSum - x > 0)",
  "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n  \
    \      val numsSums = nums.map(x => math.abs(x))\n        val numsSumsSet = numsSums.toSet\n\
    \        val numsSumsSetSize = numsSumsSet.size\n        val numsSumsSetSum =\
    \ numsSumsSet.sum\n        val numsSumsSetSumSize = numsSumsSetSum.size\n    \
    \    val numsSumsSetSumSet = numsSumsSetSum.sum\n        val numsSumsSetSumSetSize\
    \ = numsSumsSetSumSet.size\n        val numsSumsSetSumSetSum = numsSumsSetSumSet.sum\n\
    \        val numsSumsSetSumSetSumSize = numsSumsSetSumSetSum.size\n        val\
    \ numsSumsSetSumSetSumSet = numsSumsSetSumSetSum.sum\n        val numsSumsSetSumSetSumSetSize\
    \ = numsSumsSetSumSetSumSet.size\n        val numsSumsSetSumSetSumSetSum = numsSumsSetSumSetSumSet.sum\n\
    \        val numsSumsSetSumSetSumSetSumSize = numsSumsSetSumSetSumSetSum.size\n\
    \        val numsSumsSetSumSetSumSetSumSet = numsSumsSetSumSetSumSetSum.sum\n\
    \        val numsSumsSetSumSetSumSetSumSetSize = numsSumsSetSumSetSumSetSumSet.size\n\
    \        val numsSumsSetSumSetSumSetSumSetSum = numsSumsSetSumSetSumSetSumSetSum.sum\n\
    \        val numsSumsSetSumSetSumSetSumSetSumSize = numsSumsSetSumSetSumSetSumSetSumSet.size\n\
    \        val numsSumsSetSumSetSumSetSumSetSumSet = numsSumsSetSumSetSumSetSumSetSumSetSumSet.sum\n\
    \        val numsSumsSetSumSetSumSetSumSetSumSetSize = numsSumsSetSumSetSumSetSumSetSumSet.size\n\
    \        val numsSumsSetSumSetSumSetSumSetSumSetSum = numsSumsSetSumSetSumSetSumSetSumSetSumSet.sum\n\
    \        val numsSumsSetSumSetSumSetSumSetSumSetSumSize = numsSumsSetSumSetSumSetSumSet",
  "        val digits = arr.map(x => math.abs(x))\n        val sumOfDigits = digits.sum\n\
    \        val nums = arr.filter(x => math.abs(x) > 0).map(x => math.abs(x))\n \
    \       val numsWithSumOfDigits = nums.filter(x => sumOfDigits - x > 0)\n    \
    \    numsWithSumOfDigits.size", "        val nums = arr.toSet\n        val sums\
    \ = arr.map(x => math.abs(x))\n        val numsSums = nums.map(x => math.abs(x))\n\
    \        val numsSumsSum = numsSums.sum\n        val numsSumsSum2 = numsSumsSum\
    \ * numsSumsSum\n        val numsSumsSum3 = numsSumsSum * numsSumsSum2\n     \
    \   val numsSumsSum4 = numsSumsSum3 * numsSumsSum3\n        val numsSumsSum5 =\
    \ numsSumsSum4 * numsSumsSum4\n        numsSumsSum5", "        val nums = arr.toSet\n\
    \        val sums = arr.map(x => math.abs(x))\n        val sumsSet = sums.toSet\n\
    \        val numsSet = nums.toSet\n        val numsSum = nums.map(x => math.abs(x)).sum\n\
    \        val numsSumSet = numsSum.toSet\n        val numsSumSet2 = numsSum.filter(x\
    \ => x > 0).toSet\n        val numsSumSet3 = numsSum.filter(x => x < 0).toSet\n\
    \        val numsSumSet4 = numsSum.filter(x => x == 0).toSet\n        val numsSumSet5\
    \ = numsSum.filter(x => x % 10 == 0).toSet\n        val numsSumSet6 = numsSum.filter(x\
    \ => x % 10 != 0).toSet\n        val numsSumSet7 = numsSum.filter(x => x % 10\
    \ == 0).filter(x => x % 10 != 0).toSet\n        val numsSumSet8 = numsSum.filter(x\
    \ => x % 10 != 0).filter(x => x % 10 == 0).toSet\n        val numsSumSet9 = numsSum.filter(x\
    \ => x % 10 != 0).filter(x => x % 10 != 0).filter(x => x % 10 == 0).toSet\n  \
    \      val numsSumSet10 = numsSum.filter(x => x % 10 != 0).filter(x => x % 10\
    \ != 0).filter(x => x % 10 != 0).filter(x => x % 10 == 0).filter(x => x % 10 !=\
    \ 0).toSet\n        val numsSumSet11 = numsSum.filter(x => x % 10 != 0).filter(x\
    \ => x % 10 != 0).filter(x => x % 10 != 0).filter(x => x % 10 != 0).filter(x =>\
    \ x % 10 == 0).filter(x => x % 10 != 0).filter(x => x % 10 == 0).filter(x => x\
    \ % 10 != 0).filter(x => x % 10 != 0).filter(x => x % 10 == 0).filter(x => x %\
    \ 10 != 0).filter(x => x % 10 != 0).filter(x => x % 10 != 0).filter(x => x % 10\
    \ == 0).filter(x => x % 10 != 0).filter(x => x % 10 != 0).filter(x => x % 10 !=\
    \ 0).filter(x => x % 10 == 0).filter(x => x % 10 != 0).filter(x => x % 10 != 0).filter(x\
    \ => x % 10 != 0).filter(x => x % 10 == 0).", "        val nums = arr.map(_.toInt)\n\
    \        val sums = nums.map(x => math.abs(x))\n        val counts = sums.groupBy(x\
    \ => math.abs(x))\n        val countsSorted = counts.toSeq.sortBy(_._1).reverse\n\
    \        val countsSortedSum = countsSorted.map(x => x._2).sum\n        countsSortedSum",
  "        val digits = arr.map(_.toString.toInt)\n        val sum = digits.sum\n\
    \        val nums = arr.filter(x => x > 0).map(x => digits(x) - digits(x - 1))\n\
    \        nums.count(x => x > 0).sum", "        val nums = arr.toSet\n        val\
    \ sums = arr.map(x => math.abs(x)).toSet\n        val numsSums = nums.map(x =>\
    \ math.abs(x)).toSet\n        val numsSumsSum = numsSums.map(x => math.abs(x)).toSet\n\
    \        val numsSumsSumSum = numsSumsSum.map(x => math.abs(x)).toSet\n      \
    \  val numsSumsSumSumSum = numsSumsSumSum.map(x => math.abs(x)).toSet\n      \
    \  val numsSumsSumSumSumSum = numsSumsSumSumSum.map(x => math.abs(x)).toSet\n\
    \        val numsSumsSumSumSumSumSum = numsSumsSumSumSumSum.map(x => math.abs(x)).toSet\n\
    \        val numsSumsSumSumSumSumSumSum = numsSumsSumSumSumSumSum.map(x => math.abs(x)).toSet\n\
    \        val numsSumsSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSum.map(x\
    \ => math.abs(x)).toSet\n        val numsSumsSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x)).toSet\n        val numsSumsSumSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x)).toSet\n        val numsSumsSumSumSumSumSumSumSumSumSumSum =\
    \ numsSumsSumSumSumSumSumSumSumSumSum.map(x => math.abs(x)).toSet\n        val\
    \ numsSumsSumSumSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x)).toSet\n        val numsSumsSumSumSumSumSumSumSumSumSumSumSum\
    \ = numsSumsSumSumSumSumSumSumSumSumSumSumSum.map(x => math.abs(x)).toSet\n  \
    \      val numsSumsSumSumSumSumSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x)).toSet\n        val numsSumsSumSumSumSumSumSumSumSumSumSumSumSum\
    \ = numsSumsSumSumSumSumSumSumSumSumSumSumSumSum", "        val n = arr.length\n\
    \        var sum = 0L\n        var i = 0\n        while (i < n) {\n          \
    \  val digit = arr(i).toInt\n            if (digit < 0) {\n                sum\
    \ += digit\n            } else {\n                sum += digit % 10\n        \
    \    }\n            i += 1\n        }\n        if (sum > 0) {\n            sum\n\
    \        } else {\n            arr.length\n        }", "        val nums = arr.map(_.toInt)\n\
    \        val sums = nums.map(x => x.toString.toInt).map(x => x * x)\n        val\
    \ counts = sums.map(x => if (x > 0) x else -x)\n        val count = counts.sum\n\
    \        count", "        var count = 0\n        for (i <- arr) {\n          \
    \  val digits = i.toString.toInt\n            if (digits > 0) {\n            \
    \    count += 1\n            }\n        }\n        count", "        val nums =\
    \ arr.map(_.toInt)\n        val sums = nums.map(x => x.toString.toInt).map(_.sum)\n\
    \        sums.count(_ > 0)", "        val digits = arr.map(_.toString.toInt)\n\
    \        val sums = digits.map(_.sum)\n        val positiveSums = sums.filter(sum\
    \ => sum > 0)\n        val negativeSums = sums.filter(sum => sum < 0)\n      \
    \  val positiveCount = positiveSums.size\n        val negativeCount = negativeSums.size\n\
    \        val totalCount = positiveCount + negativeCount\n        val positiveSum\
    \ = positiveSums.sum\n        val negativeSum = negativeSums.sum\n        val\
    \ positiveSumDigit = positiveSum.toString.toInt\n        val negativeSumDigit\
    \ = negativeSum.toString.toInt\n        val totalSumDigit = totalCount.toString.toInt\n\
    \        val positiveSumDigitCount = positiveSumDigit.size\n        val negativeSumDigitCount\
    \ = negativeSumDigit.size\n        val totalSumDigitCount = totalSumDigit.size\n\
    \        val positiveSumDigitCount = positiveSumDigitCount + negativeSumDigitCount\n\
    \        val negativeSumDigitCount = positiveSumDigitCount + negativeSumDigitCount\n\
    \        val totalSumDigitCount = positiveSumDigitCount + negativeSumDigitCount\n\
    \        val positiveSumDigitCount = positiveSumDigitCount + negativeSumDigitCount\n\
    \        val negativeSumDigitCount = positiveSumDigitCount + negativeSumDigitCount\n\
    \        val totalSumDigitCount = positiveSumDigitCount + negativeSumDigitCount\n\
    \        val positiveSumDigitCount = positiveSumDigitCount + negativeSumDigitCount\n\
    \        val negativeSumDigitCount = positiveSumDigitCount + negativeSumDigitCount\n\
    \        val totalSumDigitCount = positiveSumDigitCount + negativeSumDigitCount\n\
    \        val positiveSumDigitCount = positiveSumDigitCount + negativeSumDigitCount\n\
    \        val negativeSumDigitCount = positiveSumDigitCount + negativeSumDigitCount\n\
    \        val totalSumDigitCount = positiveSumDigitCount + negativeSumDigitCount\n\
    \        val positiveSumDigitCount = positiveSumDigitCount + negativeSumDigitCount\n\
    \        val negativeSumDigitCount = positiveSumDigitCount + negativeSumDigitCount\n\
    \        val totalSumDigitCount = positiveSumDigitCount + negativeSumDigitCount\n\
    \        val positiveSumDigitCount = positiveSumDigitCount + negativeSumDigitCount\n\
    \        val negativeSumDigitCount = positiveSumDigitCount + negativeSumDigitCount\n\
    \        val totalSumDigitCount = positiveSumDigitCount + negativeSumDigitCount\n\
    \        val positiveSumDigitCount = positiveSumDigitCount + negativeSumDigitCount\n\
    \        val negativeSumDigitCount = positiveSumDigitCount + negativeSumDigitCount\n\
    \        val totalSumDigitCount = positiveSumDigitCount + negativeSumDigitCount\n\
    \        val positive", "        val nums = arr.toSet\n        val sums = arr.map(x\
    \ => math.abs(x))\n        val count = sums.count(x => x > 0)\n        nums.count(x\
    \ => x > 0 && sums.contains(math.abs(x)))", "        val nums = arr.toSet\n  \
    \      val sums = arr.map(x => math.abs(x))\n        val numsSums = nums.map(x\
    \ => sums.count(y => y > x))\n        numsSums.sum", "        val nums = arr.toSet\n\
    \        val numsCount = arr.filter(x => x >= 0).size\n        numsCount.toLong",
  "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n  \
    \      val numsWithSum = sums.filter(x => x > 0).size\n        numsWithSum", " \
    \       val nums = arr.toSet\n        val numsSum = nums.map(x => math.abs(x)).sum\n\
    \        numsSum", "        val nums = arr.toSet\n        val numsSum = arr.map(x\
    \ => math.abs(x))\n        val numsSumSet = numsSum.toSet\n        numsSumSet.count(x\
    \ => x > 0)", "        val nums = arr.filter(x => x >= 0).map(x => math.abs(x))\n\
    \        val sums = nums.map(x => math.pow(10, math.ceil(math.log10(x))))\n  \
    \      val count = sums.foldLeft(0)(_ + _)\n        count", "        val nums\
    \ = arr.toSet\n        val numsLen = arr.length\n        val numsSum = arr.map(x\
    \ => x.toString.toInt).sum\n        val numsSumDigits = numsSum.toString.toInt\n\
    \        val numsSumDigits = numsSumDigits.toInt\n        val numsSumDigits =\
    \ numsSumDigits.toInt\n        val numsSumDigits = numsSumDigits.toInt\n     \
    \   val numsSumDigits = numsSumDigits.toInt\n        val numsSumDigits = numsSumDigits.toInt\n\
    \        val numsSumDigits = numsSumDigits.toInt\n        val numsSumDigits =\
    \ numsSumDigits.toInt\n        val numsSumDigits = numsSumDigits.toInt\n     \
    \   val numsSumDigits = numsSumDigits.toInt\n        val numsSumDigits = numsSumDigits.toInt\n\
    \        val numsSumDigits = numsSumDigits.toInt\n        val numsSumDigits =\
    \ numsSumDigits.toInt\n        val numsSumDigits = numsSumDigits.toInt\n     \
    \   val numsSumDigits = numsSumDigits.toInt\n        val numsSumDigits = numsSumDigits.toInt\n\
    \        val numsSumDigits = numsSumDigits.toInt\n        val numsSumDigits =\
    \ numsSumDigits.toInt\n        val numsSumDigits = numsSumDigits.toInt\n     \
    \   val numsSumDigits = numsSumDigits.toInt\n        val numsSumDigits = numsSumDigits.toInt\n\
    \        val numsSumDigits = numsSumDigits.toInt\n        val numsSumDigits =\
    \ numsSumDigits.toInt\n        val numsSumDigits = numsSumDigits.toInt\n     \
    \   val numsSumDigits = numsSumDigits.toInt\n        val numsSumDigits = numsSumDigits.toInt\n\
    \        val numsSumDigits = numsSumDigits.toInt\n        val numsSumDigits =\
    \ numsSumDigits.toInt\n        val numsSumDigits = numsSumDigits.toInt\n     \
    \   val numsSumDigits = numsSumDigits.toInt\n        val numsSumDigits = numsSumDigits.toInt\n\
    \        val numsSumDigits = numsSumDigits.", "        val digits = arr.map(x\
    \ => math.abs(x))\n        val sums = digits.map(x => math.abs(x)).reduce((x,\
    \ y) => x + y)\n        sums.toLong", "        val digits = arr.map(_.toString.toInt)\n\
    \        val sums = digits.map(_.sum)\n        val nums = sums.filter(x => x >\
    \ 0)\n        nums.size ", "        val sums = arr.map(x => if (x < 0) -x else\
    \ x).map(x => math.abs(x))\n        val count = sums.count(x => x > 0)\n     \
    \   count", "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n\
    \        val numsSums = nums.map(x => sums.count(y => y == x))\n        numsSums.sum",
  "        val nums = arr.filter(x => x >= 0)\n        val sums = nums.map(x => math.abs(x))\n\
    \        val counts = sums.groupBy(x => math.abs(x))\n        val count = counts.foldLeft(0)((acc,\
    \ x) => acc + x._2)\n        count", "        val nums = arr.toSet\n        val\
    \ sums = nums.map(x => math.abs(x))\n        val count = sums.count(_ > 0)\n \
    \       count", "        val nums = arr.toSet\n        val sums = arr.map(x =>\
    \ math.abs(x)).toSet\n        val numsSum = nums.map(x => math.abs(x)).reduceLeft(_\
    \ + _)\n        val numsSums = nums.map(x => math.abs(x)).reduceLeft(_ + _)\n\
    \        val numsSumsSum = numsSums.reduceLeft(_ + _)\n        numsSum - numsSumsSum",
  "        val nums = arr.map(_.toInt)\n        val sums = nums.map(x => math.abs(x))\n\
    \        val counts = sums.groupBy(x => math.abs(x))\n        val maxCount = counts.maxBy(_._2)._2\n\
    \        val numsWithMaxCount = nums.filter(x => math.abs(x) == maxCount)\n  \
    \      numsWithMaxCount.length", "        var sum = 0\n        var count = 0\n\
    \        for (i <- arr) {\n            sum += i\n            if (sum > 0) {\n\
    \                count += 1\n            }\n        }\n        count", "     \
    \   var sum = 0L\n        for(i <- 0 until arr.length) {\n            sum += arr(i)\n\
    \        }\n        if(sum > 0) {\n            sum\n        } else {\n       \
    \     arr.takeWhile(x => x < 0).sum\n        }", "        val digits = arr.map(_.toString.toInt)\n\
    \        val sum = digits.sum\n        val positiveSum = sum.toLong\n        val\
    \ negativeSum = sum.toLong * -1\n        val positiveDigits = digits.filter(_.toString.toInt\
    \ > 0)\n        val negativeDigits = digits.filter(_.toString.toInt < 0)\n   \
    \     val positiveCount = positiveDigits.count(_ > 0)\n        val negativeCount\
    \ = negativeDigits.count(_ < 0)\n        val positiveSumCount = positiveDigits.count(_\
    \ > 0)\n        val negativeSumCount = negativeDigits.count(_ < 0)\n        val\
    \ positiveSumCount2 = positiveDigits.count(_ > 0)\n        val negativeSumCount2\
    \ = negativeDigits.count(_ < 0)\n        val positiveSumCount3 = positiveDigits.count(_\
    \ > 0)\n        val negativeSumCount3 = negativeDigits.count(_ < 0)\n        val\
    \ positiveSumCount4 = positiveDigits.count(_ > 0)\n        val negativeSumCount4\
    \ = negativeDigits.count(_ < 0)\n        val positiveSumCount5 = positiveDigits.count(_\
    \ > 0)\n        val negativeSumCount5 = negativeDigits.count(_ < 0)\n        val\
    \ positiveSumCount6 = positiveDigits.count(_ > 0)\n        val negativeSumCount6\
    \ = negativeDigits.count(_ < 0)\n        val positiveSumCount7 = positiveDigits.count(_\
    \ > 0)\n        val negativeSumCount7 = negativeDigits.count(_ < 0)\n        val\
    \ positiveSumCount8 = positiveDigits.count(_ > 0)\n        val negativeSumCount8\
    \ = negativeDigits.count(_ < 0)\n        val positiveSumCount9 = positiveDigits.count(_\
    \ > 0)\n        val negativeSumCount9 = negativeDigits.count(_ < 0)\n        val\
    \ positiveSumCount10 = positiveDigits.count(_ > 0)\n        val negativeSumCount10\
    \ = negativeDigits.count(_ < 0)\n        val positiveSumCount11 = positiveDigits.count(_\
    \ > 0)\n        val negativeSumCount11 = negativeDigits.count(_ < 0)\n       \
    \ val positiveSumCount12 = positiveDigits.count(_ > 0)\n        val negativeSumCount12\
    \ = negativeDigits.count(_ < 0)\n        val positiveSumCount13 = positiveDigits.count(_\
    \ > 0)\n        val negativeSumCount13 = negativeDigits.count(_ < 0)\n       \
    \ val positiveSumCount14 = positiveDigits.count(_ > 0)\n        val negativeSumCount14\
    \ = negativeDigits.count(_ < 0)\n        val positiveSumCount15 = positiveDigits.count(_\
    \ > 0)\n        val negativeSumCount15 = negativeDigits.", "        val nums =\
    \ arr.toSet\n        val numsSum = arr.map(x => math.abs(x))\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSetSize = numsSumSet.size\n        val numsSumSetSum\
    \ = numsSumSet.foldLeft(0)(_ + _)\n        numsSumSetSize - numsSumSetSum", " \
    \       val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n \
    \       val counts = sums.groupBy(x => math.abs(x))\n        val numsCount = nums.count(x\
    \ => counts.getOrElse(x, 0) > 0)\n        numsCount", "        val nums = arr.toSet\n\
    \        val numsSet = nums.toSet\n        val numsLen = nums.size\n        val\
    \ numsSum = nums.map(x => x.toString.toInt).sum\n        val numsSumSet = numsSum.toSet\n\
    \        val numsSumLen = numsSum.size\n        val numsSumSetLen = numsSumSet.size\n\
    \        val numsSumSetDiff = numsSumSet.diff(nums)\n        val numsSumSetDiffLen\
    \ = numsSumSetDiff.size\n        val numsSumSetDiffSet = numsSumSetDiff.toSet\n\
    \        val numsSumSetDiffSetLen = numsSumSetDiffSet.size\n        val numsSumSetDiffSetDiff\
    \ = numsSumSetDiffSet.diff(numsSet)\n        val numsSumSetDiffSetDiffLen = numsSumSetDiffSetDiff.size\n\
    \        val numsSumSetDiffSetDiffSet = numsSumSetDiffSetDiff.toSet\n        val\
    \ numsSumSetDiffSetDiffSetLen = numsSumSetDiffSetDiffSet.size\n        val numsSumSetDiffSetDiffSetDiff\
    \ = numsSumSetDiffSetDiffSet.diff(numsLen)\n        val numsSumSetDiffSetDiffSetDiffLen\
    \ = numsSumSetDiffSetDiffSetDiff.size\n        val numsSumSetDiffSetDiffSetDiffSet\
    \ = numsSumSetDiffSetDiffSetDiff.toSet\n        val numsSumSetDiffSetDiffSetDiffSetLen\
    \ = numsSumSetDiffSetDiffSetDiffSet.size\n        val numsSumSetDiffSetDiffSetDiffSetDiff\
    \ = numsSumSetDiffSetDiffSetDiffSet.diff(numsSumLen)\n        val numsSumSetDiffSetDiffSetDiffSetDiffLen\
    \ = numsSumSetDiffSetDiffSetDiffSetDiff.size\n        val numsSumSetDiffSetDiffSetDiffSetDiffSet\
    \ = numsSumSetDiffSetDiffSetDiffSetDiff.toSet\n        val numsSumSetDiffSetDiffSetDiffSetDiffSetLen\
    \ = numsSumSetDiffSetDiffSetDiffSetDiffSet.size\n        val numsSumSetDiffSetDiffSetDiffSetDiffSetDiff\
    \ = numsSumSetDiffSetDiffSetDiffSetDiffSet.toSet\n        val numsSumSetDiffSetDiffSetDiffSetDiffSetDiffLen\
    \ = numsSumSetDiffSetDiff", "        val digits = arr.map(_.toString.toInt)\n\
    \        val sums = digits.map(_.sum)\n        val positiveSums = sums.filter(x\
    \ => x > 0)\n        positiveSums.sum", "        val sums = arr.map(x => math.abs(x))\n\
    \        val count = sums.count(x => x > 0)\n        count", "        val nums\
    \ = arr.toSet\n        val digits = arr.map(_.toString.toInt)\n        val sums\
    \ = digits.map(x => math.abs(x))\n        val numsWithSum = nums.filter(x => sums.contains(x))\n\
    \        numsWithSum.size", "        val digits = arr.map(_.toInt)\n        val\
    \ sums = digits.map(x => math.abs(x))\n        val count = sums.count(x => x >\
    \ 0)\n        count", "        val nums = arr.toSet\n        val sums = arr.map(x\
    \ => math.abs(x))\n        val sumsSet = sums.toSet\n        sumsSet.count(x =>\
    \ x > 0) + (nums.count(x => x < 0) * nums.count(x => x < 0) * nums.count(x =>\
    \ x < 0))", "        val nums = arr.toSet\n        val numsSum = arr.map(x =>\
    \ math.abs(x))\n        val numsSumSet = numsSum.toSet\n        val numsSumSetSize\
    \ = numsSumSet.size\n        val numsSumSetIterator = numsSumSet.iterator\n  \
    \      val numsSumSetIteratorSize = numsSumSetIterator.size\n        val numsSumSetIteratorIterator\
    \ = numsSumSetIterator.iterator\n        val numsSumSetIteratorIteratorSize =\
    \ numsSumSetIteratorIterator.size\n        val numsSumSetIteratorIteratorIterator\
    \ = numsSumSetIteratorIterator.iterator\n        val numsSumSetIteratorIteratorIteratorSize\
    \ = numsSumSetIteratorIteratorIterator.size\n        val numsSumSetIteratorIteratorIteratorIterator\
    \ = numsSumSetIteratorIteratorIterator.iterator\n        val numsSumSetIteratorIteratorIteratorIteratorSize\
    \ = numsSumSetIteratorIteratorIteratorIterator.size\n        val numsSumSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSumSetIteratorIteratorIteratorIterator.iterator\n        val numsSumSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSumSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSumSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSumSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSumSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSumSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSumSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSumSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n    \
    \    val numsSumSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSumSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSumSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSumSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSumSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSumSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSumSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSumSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSumSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSumSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSumSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSumSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSumSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSumSetIterator", "        val nums = arr.toSet\n        val sums = arr.map(x\
    \ => math.abs(x))\n        val sumsSet = sums.toSet\n        val numsSet = nums.toSet\n\
    \        val numsSums = nums.map(x => math.abs(x))\n        val numsSumsSet =\
    \ numsSums.toSet\n        val numsSumsSet2 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet3 = numsSums.map(x => math.abs(x))\n        val numsSumsSet4\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet5 = numsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSet6 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet7 = numsSums.map(x => math.abs(x))\n        val numsSumsSet8\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet9 = numsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSet10 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet11 = numsSums.map(x => math.abs(x))\n        val numsSumsSet12\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet13 = numsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSet14 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet15 = numsSums.map(x => math.abs(x))\n        val numsSumsSet16\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet17 = numsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSet18 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet19 = numsSums.map(x => math.abs(x))\n        val numsSumsSet20\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet21 = numsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSet22 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet23 = numsSums.map(x => math.abs(x))\n        val numsSumsSet24\
    \ = nums", "        val nums = arr.filter(_ > 0)\n        val sums = nums.map(x\
    \ => math.abs(x))\n        val count = sums.count(_ > 0)\n        count", "  \
    \      val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n  \
    \      val count = sums.count(x => x > 0)\n        nums.size - count", "     \
    \   val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x)).toSet\n\
    \        val numsSums = nums.filter(x => sums.contains(math.abs(x)))\n       \
    \ numsSums.size", "        val nums = arr.toSet\n        val sums = arr.map(x\
    \ => math.abs(x))\n        val numsSums = nums.map(x => sums.count(y => y == x))\n\
    \        numsSums.sum", "        val nums = arr.filter(x => x >= 0).map(x => math.abs(x))\n\
    \        val sum = nums.sum\n        val numsWithSum = nums.filter(x => x >= sum)\n\
    \        numsWithSum.length", "        val digits = arr.map(_.toString.toInt)\n\
    \        val sums = digits.map(_.sum)\n        val positiveSums = sums.filter(x\
    \ => x > 0)\n        val negativeSums = sums.filter(x => x < 0)\n        positiveSums.size\
    \ + (negativeSums.size * negativeSums.sum)", "        val digits = arr.map(_.toString.toInt)\n\
    \        val sums = digits.map(_.sum)\n        sums.count(_ > 0)", "        val\
    \ nums = arr.map(x => if (x < 0) -x else x)\n        val sums = nums.map(x =>\
    \ if (x < 0) x.toString.toLong else x)\n        val count = sums.count(x => x\
    \ > 0)\n        count", "        var count = 0L\n        for (i <- 0 until arr.length)\
    \ {\n            val digits = arr(i).toString.toInt\n            if (digits >\
    \ 0) {\n                count += digits\n            }\n        }\n        count",
  "        val nums = arr.toSet\n        val sums = nums.map(x => math.abs(x))\n \
    \       val counts = sums.groupBy(x => math.abs(x)).mapValues(_.size)\n      \
    \  val result = counts.maxBy(x => x._2)\n        result._1", "        val digits\
    \ = arr.map(_.toInt)\n        val sums = digits.map(x => math.abs(x))\n      \
    \  val counts = sums.groupBy(_ > 0).mapValues(_.size)\n        counts.foldLeft(0)((acc,\
    \ x) => acc + x)", "        val nums = arr.toSet\n        val numsCount = nums.count(_\
    \ > 0)\n        val numsSum = nums.sum\n        val numsSumDigits = numsSum.toString.reverse.map(_.toInt)\n\
    \        val numsSumDigitCount = numsSumDigits.count(_ > 0)\n        val numsSumDigitSum\
    \ = numsSumDigits.sum\n        val numsSumDigitSumDigits = numsSumDigitSum.toString.reverse.map(_.toInt)\n\
    \        val numsSumDigitSumDigitCount = numsSumDigitSumDigits.count(_ > 0)\n\
    \        val numsSumDigitSumDigitSum = numsSumDigitSumDigits.sum\n        val\
    \ numsSumDigitSumDigitSumDigits = numsSumDigitSumDigitSum.toString.reverse.map(_.toInt)\n\
    \        val numsSumDigitSumDigitSumDigitCount = numsSumDigitSumDigitSumDigits.count(_\
    \ > 0)\n        val numsSumDigitSumDigitSumDigitSum = numsSumDigitSumDigitSumDigits.sum\n\
    \        val numsSumDigitSumDigitSumDigitSumDigits = numsSumDigitSumDigitSumDigitSum.toString.reverse.map(_.toInt)\n\
    \        val numsSumDigitSumDigitSumDigitSumDigitCount = numsSumDigitSumDigitSumDigitSumDigits.count(_\
    \ > 0)\n        val numsSumDigitSumDigitSumDigitSumDigitSum = numsSumDigitSumDigitSumDigitSumDigits.sum\n\
    \        val numsSumDigitSumDigitSumDigitSumDigitSumDigits = numsSumDigitSumDigitSumDigitSumDigitSum.toString.reverse.map(_.toInt)\n\
    \        val numsSumDigitSumDigitSumDigitSumDigitSumDigitCount = numsSumDigitSumDigitSumDigitSumDigitSumDigits.count(_\
    \ > 0)\n        val numsSumDigitSumDigitSumDigitSumDigitSumDigitSum = numsSumDigitSumDigitSumDigitSumDigitSumDigits.sum\n\
    \        val numsSumDigitSumDigitSumDigitSumDigitSumDigitSumDigits = numsSumDigitSumDigitSumDigitSumDigitSumDigitSumDigits.toString.reverse.map(_.toInt)\n\
    \        val numsSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitCount = numsSumDigitSumDigitSumDigitSumDigitSumDigitSumDigits.count(_\
    \ > 0)\n        val numsSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum =\
    \ numsSumDigitSum", "        var count = 0\n        arr.foreach(x => if (x > 0)\
    \ count = count + math.abs(x))\n        count", "        val digits = arr.map(_.toString.toInt)\n\
    \        val sums = digits.map(_.sum)\n        val nums = sums.filter(_.isPositive)\n\
    \        nums.count(_ > 0)", "        val nums = arr.filter(x => x >= 0).map(x\
    \ => math.abs(x))\n        val sum = nums.sum\n        if (sum < 0) nums.head\
    \ * -1\n        else sum", "        val nums = arr.toSet\n        val numsSum\
    \ = arr.map(x => math.abs(x)).reduce(_ + _)\n        nums.count(x => x > 0 &&\
    \ math.abs(x) == numsSum)", "        val n = arr.size\n        var sum = 0L\n\
    \        for (i <- 0 until n) {\n            sum += arr(i)\n        }\n      \
    \  if (sum > 0) {\n            sum\n        } else {\n            arr.count(_\
    \ > 0)\n        }", "        val nums = arr.filter(x => x >= 0).map(x => math.abs(x))\n\
    \        val sums = nums.map(x => math.pow(10, x.length))\n        val count =\
    \ sums.reduceLeft(_ + _)\n        count", "        val nums = arr.filter(x =>\
    \ x >= 0).map(x => math.abs(x))\n        val sum = nums.sum\n        val numsWithSum\
    \ = nums.filter(x => x == sum)\n        numsWithSum.length", "        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val counts\
    \ = sums.groupBy(x => math.abs(x))\n        val result = counts.mapValues(x =>\
    \ x.size)\n        val sum = result.mapValues(x => x.sum)\n        val positiveSum\
    \ = sum.filter(_ > 0)\n        val negativeSum = sum.filter(_ < 0)\n        val\
    \ positiveCount = positiveSum.sum\n        val negativeCount = negativeSum.sum\n\
    \        val positiveSumCount = positiveSum.size\n        val negativeSumCount\
    \ = negativeSum.size\n        val positiveCount = positiveCount.toLong\n     \
    \   val negativeCount = negativeCount.toLong\n        val positiveSumCount = positiveSumCount.toLong\n\
    \        val negativeSumCount = negativeSumCount.toLong\n        val positiveSum\
    \ = positiveSum.sum\n        val negativeSum = negativeSum.sum\n        val positiveSumCount\
    \ = positiveSumCount.toLong\n        val negativeSumCount = negativeSumCount.toLong\n\
    \        val positiveSum = positiveSum.sum\n        val negativeSum = negativeSum.sum\n\
    \        val positiveSumCount = positiveSumCount.toLong\n        val negativeSumCount\
    \ = negativeSumCount.toLong\n        val positiveSum = positiveSum.sum\n     \
    \   val negativeSum = negativeSum.sum\n        val positiveSumCount = positiveSumCount.toLong\n\
    \        val negativeSumCount = negativeSumCount.toLong\n        val positiveSum\
    \ = positiveSum.sum\n        val negativeSum = negativeSum.sum\n        val positiveSumCount\
    \ = positiveSumCount.toLong\n        val negativeSumCount = negativeSumCount.toLong\n\
    \        val positiveSum = positiveSum.sum\n        val negativeSum = negativeSum.sum\n\
    \        val positiveSumCount = positiveSumCount.toLong\n        val negativeSumCount\
    \ = negativeSumCount.toLong\n        val positiveSum = positiveSum.sum\n     \
    \   val negativeSum = negativeSum.sum\n        val positiveSumCount = positiveSumCount.toLong\n\
    \        val negativeSumCount = negativeSumCount.toLong\n        val positiveSum\
    \ = positiveSum.sum\n        val negativeSum = negativeSum.sum\n        val positiveSumCount\
    \ = positiveSumCount.toLong\n        val negativeSumCount = negativeSumCount.toLong\n\
    \        val positiveSum = positiveSum.sum\n        val negativeSum = negativeSum.sum\n\
    \        val positiveSumCount = positiveSumCount.toLong\n        val negativeSumCount\
    \ = negativeSumCount.to", "        val sums = mutable.HashMap[Long, Long]()\n\
    \        arr.foreach(x => sums += ((x % 10).abs -> 1))\n        sums.values.sum",
  "        val digits = arr.map(_.toString.toInt)\n        val nums = arr.map(_.toString.toInt)\n\
    \        val sum = digits.foldLeft(0)((sum, digit) => sum + digit)\n        val\
    \ numsSum = nums.foldLeft(0)((sum, num) => sum + num)\n        if (sum > 0) {\n\
    \            numsSum\n        } else {\n            -1\n        }", "        val\
    \ nums = arr.toSet\n        val numsSet = nums.toList\n        val numsSetLen\
    \ = numsSet.length\n        val numsSetSum = numsSet.sum\n        val numsSetSumDigits\
    \ = numsSetSum.toString.length\n        val numsSetSumDigitsSet = numsSetSumDigits.toSet\n\
    \        val numsSetSumDigitsSetLen = numsSetSumDigitsSet.length\n        val\
    \ numsSetSumDigitsSetSum = numsSetSumDigitsSet.sum\n        val numsSetSumDigitsSetSumDigits\
    \ = numsSetSumDigitsSetSum.toString.length\n        val numsSetSumDigitsSetSumDigitsSet\
    \ = numsSetSumDigitsSetSumDigits.toSet\n        val numsSetSumDigitsSetSumDigitsSetLen\
    \ = numsSetSumDigitsSetSumDigitsSet.length\n        val numsSetSumDigitsSetSumDigitsSetSum\
    \ = numsSetSumDigitsSetSumDigitsSet.sum\n        val numsSetSumDigitsSetSumDigitsSetSumDigits\
    \ = numsSetSumDigitsSetSumDigitsSetSum.toString.length\n        val numsSetSumDigitsSetSumDigitsSetSumDigitsSet\
    \ = numsSetSumDigitsSetSumDigitsSetSumDigitsSet.toSet\n        val numsSetSumDigitsSetSumDigitsSetSumDigitsSetLen\
    \ = numsSetSumDigitsSetSumDigitsSetSumDigitsSetLen.toString.length\n        val\
    \ numsSetSumDigitsSetSumDigitsSetSumDigitsSetSum = numsSetSumDigitsSetSumDigitsSetSumDigitsSetSum.toString.length\n\
    \        val numsSetSumDigitsSetSumDigitsSetSumDigitsSetSumDigits = numsSetSumDigitsSetSumDigitsSetSumDigitsSetSumDigits.toString.length\n\
    \        val numsSetSumDigitsSetSumDigitsSetSumDigitsSetSumDigitsSet = numsSetSumDigitsSetSumDigitsSetSumDigitsSetSumDigitsSet.toString.length\n\
    \        val numsSetSumDigitsSetSumDigitsSetSumDigitsSetSumDigitsSetLen = numsSetSumDigitsSetSumDigitsSetSumDigitsSetSumDigitsSetLen.toString.length\n\
    \        val numsSetSumDig"]
stop_tokens:
- "\n    }\n"
