name: HumanEval_16_count_distinct_characters
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n    // 3\n\
  \    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
  \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
  abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
  )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n\
  \    }\n\n}\n"
completions: ["        val chars = string.chars\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toUpperCase).distinct\n\
    \        chars.count(_ == string.charAt(0))", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.distinct\n        chars.foldLeft(0)((acc, c) => acc\
    \ + 1)", "        val chars = string.distinct\n        val charCount = chars.toSet.size\n\
    \        charCount", "        val chars = string.map(_.toLower).toSet\n      \
    \  chars.size + 1", "        val chars = string.map(_.toLower).toSet\n       \
    \ chars.size", "        val chars = string.map(_.toLower).toSet\n        chars.size\
    \ * (chars.size + 1)", "        val chars = string.map(c => c.toLowerCase + c.toUpperCase).toSet\n\
    \        chars.size + 1", "        val chars = string.distinct\n        chars.size",
  "        val chars = string.map(_.toLower)\n        val counts = mutable.HashMap.empty[Char,\
    \ Int]\n        chars.foreach(c => counts.getOrElse(c, 0) + 1)\n        counts.values.toList.distinct.length",
  "        val chars = string.chars\n        val distinctChars = chars.distinct.length\n\
    \        distinctChars", "        val chars = string.distinct\n        chars.toSet.size\
    \ // number of distinct characters", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(_.toLower).toSet\n        chars.size + 1", "   \
    \     val chars = string.chars\n        val distinctChars = chars.distinct.length\n\
    \        distinctChars", "        val chars = string.map(_.toLower).toSet\n  \
    \      chars.toList.distinct.size", "        val chars = string.map(_.toUpperCase).distinct\n\
    \        chars.size + 1", "        val chars = string.map(_.toLower).toSet\n \
    \       chars.size + (chars.size - chars.distinct.size)", "        val chars =\
    \ string.map(_.toLower).toSet\n        chars.toList.distinct.length", "      \
    \  val chars = string.map(c => c.toUpperCase).distinct\n        chars.size", " \
    \       val chars = string.distinct\n        chars.foldLeft(0)((acc, c) => acc\
    \ + 1)", "        val chars = string.map(_.toUpperCase)\n        val counts =\
    \ chars.foldLeft(Map[Char,Long]()){\n            case (acc, c) => (acc + (c ->\
    \ (acc.getOrElse(c,0) + 1)))\n        }\n        counts.values.sum", "       \
    \ val chars = string.chars\n        val distinctChars = chars.distinct\n     \
    \   distinctChars.size", "        val chars = string.map(_.toUpperCase).distinct\n\
    \        chars.count(_ == 'Z') + chars.count(_ == 'z') + chars.count(_ == 'Y')\
    \ + chars.count(_ == 'y')", "        val chars = string.chars\n        val counts\
    \ = mutable.HashMap.empty[Char, Int]\n        for (c <- chars) {\n           \
    \ val count = counts.getOrElse(c, 0) + 1\n            counts.update(c, count)\n\
    \        }\n        counts.values.sum", "        val chars = string.chars\n  \
    \      val distinctChars = chars.distinct.length\n        distinctChars", "  \
    \      val chars = string.chars.toList\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(c => c.toUpperCase).distinct\n\
    \        chars.length", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(_.toLower).toSet\n        chars.size", "        val chars = string.chars.toSet\n\
    \        chars.foldLeft(0)(_ + chars.size)", "        val chars = string.chars\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.chars\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toUpperCase).distinct\n\
    \        chars.count(_ == string.head.toUpperCase)", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size", "        val chars = string.chars\n        val counts =\
    \ mutable.HashMap.empty[Char, Int]\n        for (c <- chars) {\n            counts.getOrElseUpdate(c,\
    \ 0) + 1\n        }\n        counts.values.sum", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(c => c.toLowerCase + c.toUpperCase)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size", "        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct.length\n        distinctChars", "        val chars = string.map(c\
    \ => c.toUpperCase).distinct\n        chars.toSet.size + 1", "        val chars\
    \ = string.distinct\n        chars.foldLeft(0)((acc, c) => acc + 1)", "      \
    \  val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.chars.toList\n     \
    \   val charsSet = chars.toSet\n        charsSet.size // number of distinct characters",
  "        val chars = string.map(_.toUpperCase)\n        val counts = chars.groupBy(identity).mapValues(_.size)\n\
    \        counts.foldLeft(0)((acc, x) => acc + x._2)", "        val chars = string.map(c\
    \ => c.toUpperCase).distinct\n        chars.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size", "        val chars = string.map(_.toLower).toSet\n     \
    \   chars.size * (chars.size + 1)", "        val chars = string.chars\n      \
    \  val distinctChars = chars.distinct.length\n        return distinctChars", " \
    \       val chars = string.map(_.toLower).toSet\n        chars.toSet.size + (chars.toSet\
    \ - chars.toSet)", "        val chars = string.distinct\n        chars.foldLeft(0){\
    \ (acc, c) => acc + c.length }", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.distinct\n        chars.count(_ == 'z') + chars.count(_\
    \ == 'Z') + chars.count(_ == 'z') + chars.count(_ == 'Z')", "        val chars\
    \ = string.distinct\n        chars.length", "        val chars = string.chars\n\
    \        val counts = mutable.HashMap[Char, Int]()\n        chars.foreach(c =>\
    \ counts(c) += 1)\n        counts.values.sum", "        val chars = string.distinct\n\
    \        chars.foldLeft(0)((acc, c) => acc + c.length)", "        val chars =\
    \ string.map(c => c.toLowerCase + c.toUpperCase).distinct\n        chars.size\
    \ + 1", "        val chars = string.map(_.toUpperCase).distinct\n        chars.length",
  "        val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size + 1", "        val chars = string.map(_.toLower).toSet\n \
    \       chars.size + (chars.toSet - chars).toSet.size", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(_.toLower)\n        val charsSet = chars.toSet\n\
    \        charsSet.size", "        val chars = string.distinct\n        chars.count(_\
    \ == 'a')", "        val chars = string.map(_.toLower)\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size", "        val chars = string.chars\n\
    \        val distinctChars = chars.distinct.length\n        distinctChars", " \
    \       val chars = string.distinct\n        chars.length", "        val chars\
    \ = string.map(_.toLower).toSet\n        chars.size + 1", "        val chars =\
    \ string.map(_.toLower).toSet\n        chars.toList.distinct.length", "      \
    \  val chars = string.map(_.toLower).toSet\n        chars.size + 1", "       \
    \ val chars = string.chars.toList\n        val charsSet = chars.toSet\n      \
    \  charsSet.size // number of distinct characters", "        val chars = string.chars\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.distinct\n        val charCount = chars.toSet.size\n\
    \        charCount", "        val chars = string.distinct\n        chars.length",
  "        val chars = string.map(_.toLower)\n        val charSet = chars.distinct\n\
    \        charSet.size", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(_.toLower)\n        val charsSet = chars.toSet\n        charsSet.size",
  "        val chars = string.chars\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size + 1", "        val chars = string.map(_.toLower)\n       \
    \ val distinctChars = chars.distinct\n        distinctChars.size", "        val\
    \ chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val charSet = chars.distinct\n        charSet.size", "        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(c => c.toLowerCase + c.toUpperCase).toSet\n        chars.size +\
    \ 1", "        val chars = string.map(c => c.toUpperCase).distinct\n        chars.count(_\
    \ == string.head)", "        val chars = string.map(_.toLower)\n        val counts\
    \ = chars.groupBy(identity).mapValues(_.size)\n        counts.foldLeft(0)(_ +\
    \ _._2)", "        val chars = string.map(_.toLower).toSet\n        chars.size",
  "        val chars = string.chars\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.length", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size", "        val chars = string.map(_.toLower).toSet\n     \
    \   chars.size * (chars.size + 1)", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size * (chars.size + 1)", "        val chars = string.map(c =>\
    \ c.toUpperCase).distinct\n        chars.count(_ == string.head.toUpperCase)",
  "        val chars = string.map(_.toLower).toSet\n        chars.size + 1", "   \
    \     val chars = string.distinct\n        chars.toSet.size // number of distinct\
    \ characters", "        val chars = string.map(_.toUpperCase).distinct\n     \
    \   chars.count(_ == string.charAt(0))", "        val chars = string.chars\n \
    \       val distinctChars = chars.distinct\n        distinctChars.length", " \
    \       val chars = string.distinct\n        chars.foldLeft(0)((acc, c) => acc\
    \ + c.length)", "        val chars = string.map(_.toLower).toSet\n        chars.size\
    \ * (chars.size + 1)", "        val chars = string.map(c => c.toLowerCase + c.toUpperCase\
    \ + c.toUpperCase).toSet\n        chars.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size", "        val chars = string.map(_.toLower).toSet\n     \
    \   chars.size * (chars.size + 1)", "        val chars = string.map(_.toLower)\n\
    \        val charsSet = chars.toSet\n        charsSet.size", "        val chars\
    \ = string.chars\n        val distinctChars = chars.distinct\n        distinctChars.size",
  "        val chars = string.map(_.toLower).toSet\n        chars.size", "       \
    \ val chars = string.map(_.toLower).toSet\n        chars.size", "        val chars\
    \ = string.chars\n        val distinctChars = chars.distinct.length\n        distinctChars",
  "        val chars = string.distinct\n        chars.foldLeft(0)((acc, c) => acc\
    \ + 1)", "        val chars = string.chars\n        val distinctChars = chars.distinct.length\n\
    \        distinctChars", "        val chars = string.map(_.toLower).toSet\n  \
    \      chars.size * (chars.size + 1)", "        val chars = string.chars.toList\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.distinct\n        chars.length", "        val chars\
    \ = string.chars\n        val distinctChars = chars.distinct\n        distinctChars.size",
  "        val chars = string.map(c => c.toLowerCase + c.toUpperCase).toSet\n    \
    \    chars.size", "        val chars = string.map(_.toLower).toSet\n        chars.size\
    \ + 1", "        val chars = string.distinct\n        chars.length", "       \
    \ val chars = string.map(_.toLower).toSet\n        chars.size + 1", "        val\
    \ chars = string.map(_.toLower).toSet\n        chars.size + (chars.toSet - chars).toSet.size",
  "        val chars = string.chars.toList\n        val charsSet = chars.toSet\n \
    \       charsSet.size", "        val chars = string.map(_.toLower).toSet\n   \
    \     chars.toList.distinct.length", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.chars\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.chars\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size + 1", "        val chars = string.map(c => c.toLowerCase +\
    \ c.toUpperCase)\n        val distinctChars = chars.distinct\n        distinctChars.size",
  "        val chars = string.map(_.toUpperCase).distinct\n        chars.length",
  "        val chars = string.map(c => c.toLowerCase + c.toUpperCase).toSet\n    \
    \    chars.size", "        val chars = string.distinct\n        val charsCount\
    \ = chars.toSet.size\n        charsCount", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.chars\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size + 1", "        val chars = string.map(_.toUpperCase).distinct\n\
    \        chars.length", "        val chars = string.distinct\n        chars.foldLeft(0)((acc,\
    \ c) => acc + 1)", "        val chars = string.map(_.toLower).toSet\n        chars.size\
    \ + 1", "        val chars = string.map(_.toLower).toSet\n        chars.toList.distinct.length",
  "        val chars = string.map(_.toUpperCase).distinct.length\n        chars",
  "        val chars = string.chars\n        val charsSet = chars.toSet\n        charsSet.size\
    \ // number of distinct characters", "        val chars = string.map(c => c.toUpperCase).distinct\n\
    \        chars.count(_ == string.head.toUpperCase)", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.distinct\n        val charsSet = chars.toSet\n     \
    \   charsSet.size", "        val chars = string.map(_.toLower)\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.toSet.size // number of distinct characters", "        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size", "        val chars = string.map(_.toLower)\n        val\
    \ counts = mutable.HashMap.empty[Char, Int]\n        chars.foreach(c => counts.getOrElse(c,\
    \ 0L) += 1)\n        counts.values.sum", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.distinct\n        chars.length", "        val chars\
    \ = string.map(_.toLower).toSet\n        chars.size", "        val chars = string.chars\n\
    \        val distinctChars = chars.distinct.length\n        distinctChars", " \
    \       val chars = string.map(_.toUpperCase).map(_.toLowerCase).toSet\n     \
    \   chars.size", "        val chars = string.distinct\n        chars.length",
  "        val chars = string.chars\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.distinct\n        val\
    \ charCount = chars.toSet.size\n        charCount", "        val chars = string.map(c\
    \ => c.toLowerCase + c.toUpperCase).distinct\n        chars.toList.size", "  \
    \      val chars = string.map(c => c.toLowerCase + c.toUpperCase + c.toUpperCase).toSet\n\
    \        chars.size", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(_.toLower)\n        val charsSet = chars.toSet\n        charsSet.size\
    \ // number of distinct characters", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.chars\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val charSet = chars.toSet\n        charSet.size + 1", "        val chars\
    \ = string.map(_.toLower)\n        val charsSet = chars.toSet\n        charsSet.size",
  "        val chars = string.map(c => c.toLowerCase + c.toUpperCase).toSet\n    \
    \    chars.size + 1", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.chars\n        val distinctChars = chars.distinct\n        distinctChars.size",
  "        val chars = string.chars\n        val distinctChars = chars.distinct.length\n\
    \        distinctChars", "        val chars = string.map(_.toLower).toSet\n  \
    \      chars.size + 1", "        val chars = string.map(_.toLower).toSet\n   \
    \     chars.size + 1", "        val chars = string.map(_.toLower)\n        val\
    \ counts = mutable.HashMap.empty[Char, Int]\n        for (c <- chars) {\n    \
    \        counts.getOrElseUpdate(c, counts.getOrElse(c, 0) + 1)\n        }\n  \
    \      counts.values.toList.size", "        val chars = string.map(_.toLower)\n\
    \        val counts = mutable.HashMap.empty[Char, Int]\n        chars.foreach(c\
    \ => counts(c) += 1)\n        counts.values.sum", "        val chars = string.map(c\
    \ => c.toLowerCase + c.toUpperCase)\n        val counts = chars.groupBy(identity).mapValues(_.size)\n\
    \        counts.foldLeft(0)((acc, x) => acc + x._2)", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.chars\n        val counts = mutable.HashMap[Char, Int]()\n\
    \        for (c <- chars) {\n            counts(c) match {\n                case\
    \ Some(count) => counts(c) = count + 1\n                case None => counts(c)\
    \ = 1\n            }\n        }\n        counts.values.toList.foldLeft(0)((acc,\
    \ x) => acc + x)", "        val chars = string.chars\n        val distinctChars\
    \ = mutable.Set[Char]()\n        chars.foreach(distinctChars += _)\n        distinctChars.size",
  "        val chars = string.map(_.toLower).toSet\n        chars.size + 1", "   \
    \     val chars = string.map(_.toLower).toSet\n        chars.size", "        val\
    \ chars = string.chars\n        val distinctChars = chars.distinct\n        distinctChars.size",
  "        val chars = string.chars\n        val charsSet = chars.toSet\n        charsSet.size",
  "        val chars = string.chars\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.distinct\n        chars.foldLeft(0)(_\
    \ + _.length)", "        val chars = string.map(_.toLower).toSet\n        chars.size\
    \ + 1", "        val chars = string.map(c => c.toLowerCase + c.toUpperCase).toSet\n\
    \        chars.size", "        val chars = string.map(_.toUpperCase)\n       \
    \ val distinctChars = chars.distinct\n        distinctChars.size", "        val\
    \ chars = string.map(c => c.toLowerCase + c.toUpperCase).distinct\n        chars.size\
    \ + 1", "        val chars = string.chars\n        val distinctChars = chars.distinct.length\n\
    \        return distinctChars", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size + (chars.toSet - chars).toSet.size", "        val chars =\
    \ string.map(_.toLower).toSet\n        chars.size + 1", "        val chars = string.chars\n\
    \        val distinctChars = chars.distinct.length\n        return distinctChars",
  "        val chars = string.map(_.toLower).toSet\n        chars.size", "       \
    \ val chars = string.chars\n        val distinctChars = chars.distinct\n     \
    \   distinctChars.size", "        val chars = string.map(c => c.toLowerCase +\
    \ c.toUpperCase + c.toUpperCase).distinct\n        chars.toSet.size // chars.toSet\
    \ is immutable", "        val chars = string.map(c => c.toUpperCase).distinct\n\
    \        chars.size + 1", "        val chars = string.map(_.toUpperCase).distinct\n\
    \        chars.count(_ == string.head.toUpperCase)", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size + 1", "        val chars = string.map(_.toLower).toSet\n \
    \       chars.size + 1", "        val chars = string.map(_.toLower).toSet\n  \
    \      chars.size * (chars.size + 1)", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(c => c.toUpperCase).distinct\n        chars.count(_\
    \ == string.head.toUpperCase)", "        val chars = string.map(c => c.toLowerCase\
    \ + c.toUpperCase).toSet\n        chars.size + 1", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size * (chars.size + 1)"]
stop_tokens:
- "\n    }\n"
