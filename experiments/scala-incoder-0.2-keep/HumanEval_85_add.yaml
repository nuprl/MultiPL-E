name: HumanEval_85_add
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a non-empty list of integers lst. add the even elements that are at\
  \ odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n    def add(lst\
  \ : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong,\
  \ 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong,\
  \ 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
  \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
  \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
completions: ["        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n  \
    \      evenSum + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n      \
    \  val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n      \
    \  val oddSum = odds.sum\n        evenSum + oddSum", "        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evenSum =\
    \ evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum", "     \
    \   val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 !=\
    \ 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n       \
    \ evenSum + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n        val\
    \ odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n        val\
    \ oddSum = odds.sum\n        evenSum + oddSum", "        val evens = lst.filter(x\
    \ => x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n        val\
    \ result = evens.sum + odds.sum\n        result", "        var sum = 0\n     \
    \   for(i <- 0 until lst.size) {\n            if(i % 2 == 0) {\n             \
    \   sum += lst(i)\n            }\n        }\n        return sum", "        var\
    \ sum = 0L\n        for (i <- 0 until lst.size) {\n            if (i % 2 == 0)\
    \ {\n                sum += lst(i)\n            }\n        }\n        return sum",
  "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ == 1)\n        val result = evens.sum + odds.sum\n        result", "       \
    \ val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 == 1)\n\
    \        evens.sum + odds.sum", "        val even = lst.filter(_ % 2 == 0)\n \
    \       val odd = lst.filter(_ % 2 != 0)\n        val evenOdd = even.zip(odd)\n\
    \        evenOdd.foldLeft(0L) { (sum, eod) =>\n            sum + eod\n       \
    \ }", "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        evenSum + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n    \
    \    val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n    \
    \    val oddSum = odds.sum\n        evenSum + oddSum", "        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        evenSum + oddSum", "        val even =\
    \ lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val\
    \ result = even.foldLeft(odd.head)(_ + _)\n        result", "        val even\
    \ = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n       \
    \ val result = even.foldLeft(0L)(_ + _)\n        odd.foldLeft(result)(_ + _)",
  "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val result = even.foldLeft(odd.head)(_ + _)\n        result", " \
    \       val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ %\
    \ 2 != 0)\n        evens.sum + odds.sum", "        var sum = 0L\n        for(i\
    \ <- 0 until lst.size) {\n            if(i % 2 == 0) {\n                sum +=\
    \ lst(i)\n            }\n        }\n        return sum", "        var sum = 0L\n\
    \        for (i <- 0 until lst.size) {\n            if (i % 2 == 0) {\n      \
    \          sum += lst(i)\n            }\n        }\n        return sum", "   \
    \     val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val result = even.zip(odd).foldLeft(0L)(_ + _._1)\n        result",
  "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum\
    \ + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_\
    \ % 2 != 0)\n        val evensOdds = evens ++ odds\n        evensOdds.reduce((x,\
    \ y) => x + y)", "        var sum = 0L\n        var even = 0L\n        var odd\
    \ = 0L\n        for (i <- 0 until lst.size) {\n            if (i%2 == 0) {\n \
    \               even += lst(i)\n            } else {\n                odd += lst(i)\n\
    \            }\n        }\n        sum = even + odd\n        return sum", "  \
    \      var sum = 0L\n        for (i <- 0 until lst.size) {\n            if (i\
    \ % 2 == 0) {\n                sum += lst(i)\n            }\n        }\n     \
    \   return sum", "        var sum = 0\n        for(i <- 0 until lst.size) {\n\
    \            if(i % 2 == 0) {\n                sum += lst(i)\n            }\n\
    \        }\n        return sum", "        val evens = lst.filter(_ % 2 == 0)\n\
    \        val odds = lst.filter(_ % 2 != 0)\n        val result = evens.foldLeft(0L)\
    \ { (sum, e) => sum + e }\n        val resultOdds = odds.foldLeft(0L) { (sum,\
    \ e) => sum + e }\n        val resultOddsSum = resultOdds.sum\n        val resultOddsSumOdds\
    \ = resultOddsSum + result\n        val resultOddsSumEvens = resultOddsSum - resultOddsSumOdds\n\
    \        val resultOddsSumEvensOdds = resultOddsSumEvens + resultOddsSumOdds\n\
    \        val resultOddsSumEvensOddsOdds = resultOddsSumEvensOdds + resultOddsSumOdds\n\
    \        val resultOddsSumEvensOddsOddsOdds = resultOddsSumEvensOddsOdds + resultOddsSumOddsOdds\n\
    \        val resultOddsSumEvensOddsOddsOddsOdds = resultOddsSumEvensOddsOddsOdds\
    \ + resultOddsSumOddsOddsOdds\n        val resultOddsSumEvensOddsOddsOddsOddsOdds\
    \ = resultOddsSumEvensOddsOddsOddsOdds + resultOddsSumOddsOddsOddsOddsOdds\n \
    \       val resultOddsSumEvensOddsOddsOddsOddsOddsOdds = resultOddsSumEvensOddsOddsOddsOddsOddsOdds\
    \ + resultOddsSumOddsOddsOddsOddsOddsOdds\n        val resultOddsSumEvensOddsOddsOddsOddsOddsOddsOdds\
    \ = resultOddsSumEvensOddsOddsOddsOddsOddsOddsOdds + resultOddsSumOddsOddsOddsOddsOddsOddsOdds\n\
    \        val ", "        val even = lst.filter(_ % 2 == 0)\n        val odd =\
    \ lst.filter(_ % 2 != 0)\n        val evenSum = even.foldLeft(0L)((sum, element)\
    \ => sum + element)\n        val oddSum = odd.foldLeft(0L)((sum, element) => sum\
    \ + element)\n        evenSum + oddSum", "        val evens = lst.filter(x =>\
    \ x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n        val evenSum\
    \ = evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum", "   \
    \     var sum = 0L\n        var even = 0L\n        var odd = 0L\n        lst.foreach{\n\
    \            x => if (x % 2 == 0) even = even + x\n            else odd = odd\
    \ + x\n        }\n        sum = even + odd\n        return sum", "        var\
    \ sum = 0L\n        var even = 0L\n        var odd = 0L\n        lst.foreach{\n\
    \            x =>\n            if (x % 2 == 0) {\n                even += x\n\
    \            } else {\n                odd += x\n            }\n        }\n  \
    \      sum = even + odd\n        return sum", "        val even = lst.filter(x\
    \ => x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val result\
    \ = even.foldLeft(0L)(_ + odd.head) \n        result", "        var sum = 0L\n\
    \        for (i <- 0 until lst.size) {\n            if (i % 2 == 0) {\n      \
    \          sum += lst(i)\n            }\n        }\n        return sum", "   \
    \     val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n    \
    \    evenSum + oddSum", "        val even = lst.filter(_ % 2 == 0)\n        val\
    \ odd = lst.filter(_ % 2 != 0)\n        val evenOdd = even.zip(odd)\n        evenOdd.foldLeft(0)((a,\
    \ b) => a + b)", "        val even = lst.filter(_ % 2 == 0)\n        val odd =\
    \ lst.filter(_ % 2 != 0)\n        val result = even.foldLeft(odd.head)(_ + _)\n\
    \        result", "        val evens = lst.filter(_ % 2 == 0)\n        val odds\
    \ = lst.filter(_ % 2 != 0)\n        val result = evens.foldLeft(0L)(_ + _)\n \
    \       result += odds.foldLeft(0L)(_ + _)\n        result", "        var sum\
    \ = 0L\n        for(i <- 0 until lst.size) {\n            if(i % 2 == 0) {\n \
    \               sum += lst(i)\n            }\n        }\n        return sum",
  "        var sum = 0L\n        for (i <- 0 until lst.size) {\n            if (i\
    \ % 2 == 0) {\n                sum += lst(i)\n            }\n        }\n     \
    \   return sum", "        val evens = lst.filter(_ % 2 == 0)\n        val odds\
    \ = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum\
    \ = odds.sum\n        evenSum + oddSum", "        val evens = lst.filter(x =>\
    \ x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n        val evensOdds\
    \ = evens.zip(odds)\n        val result = evensOdds.foldLeft(0)((a, b) => a +\
    \ b)\n        result", "        val evens = lst.filter(_ % 2 == 0)\n        val\
    \ odds = lst.filter(_ % 2 != 0)\n        val result = evens.sum + odds.sum\n \
    \       result", "        var sum = 0L\n        var even = 0L\n        var odd\
    \ = 0L\n        for (i <- 0 until lst.size) {\n            if (i % 2 == 0) {\n\
    \                even += lst(i)\n            } else {\n                odd +=\
    \ lst(i)\n            }\n        }\n        sum = even + odd\n        return sum",
  "        var sum = 0L\n        lst.foreach(x => if (x % 2 == 0) sum += x)\n    \
    \    sum", "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_\
    \ % 2 != 0)\n        val result = even.foldLeft(0L)(_ + _)\n        odd.foldLeft(result)(_\
    \ + _)", "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_\
    \ % 2 != 0)\n        evens.foldLeft(0L) { (sum, elem) => sum + elem }", "    \
    \    val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val result = even.foldLeft(0L)(_ + odd.last)\n        result", " \
    \       val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ %\
    \ 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n  \
    \      evenSum + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n      \
    \  val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n      \
    \  val oddSum = odds.sum\n        evenSum + oddSum", "        var sum = 0L\n \
    \       for (i <- 0 until lst.size) {\n            if (i % 2 == 0) {\n       \
    \         sum += lst(i)\n            }\n        }\n        return sum", "    \
    \    val evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x\
    \ => x % 2 != 0)\n        evens.sum + odds.sum", "        val evens = lst.filter(x\
    \ => x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n        val\
    \ result = evens.foldLeft(0L)(_ + _)\n        odds foreach { x => result += x\
    \ }\n        result", "        var sum = 0L\n        for (i <- 0 until lst.size)\
    \ {\n            if (i % 2 == 0) {\n                sum += lst(i)\n          \
    \  }\n        }\n        return sum", "        val evens = lst.filter(_ % 2 ==\
    \ 0)\n        val odds = lst.filter(_ % 2 != 0)\n        evens.sum + odds.sum",
  "        var sum = 0L\n        var even = 0L\n        var odd = 0L\n        for\
    \ (i <- 0 until lst.size) {\n            if (i%2 == 0) {\n                even\
    \ += lst(i)\n            } else {\n                odd += lst(i)\n           \
    \ }\n        }\n        sum = even + odd\n        return sum", "        val even\
    \ = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n       \
    \ val result = even.zip(odd).map(_ + _._1).sum\n        result", "        var\
    \ sum = 0L\n        for (i <- 0 until lst.size) {\n            if (i%2 == 0) {\n\
    \                sum += lst(i)\n            }\n        }\n        return sum",
  "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ != 0)\n        val result = evens.foldLeft(0L)(_ + _)\n        result + odds.foldLeft(0L)(_\
    \ + _)", "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        evenSum + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n    \
    \    val odds = lst.filter(_ % 2 != 0)\n        val result = evens.sum + odds.sum\n\
    \        result", "        val even = lst.filter(_ % 2 == 0)\n        val odd\
    \ = lst.filter(_ % 2 != 0)\n        val result = even.zip(odd).map(_ + _._1).sum\n\
    \        result", "        val evens = lst.filter(_ % 2 == 0)\n        val odds\
    \ = lst.filter(_ % 2 != 0)\n        val result = evens.sum + odds.sum\n      \
    \  result", "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        evenSum + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n    \
    \    val odds = lst.filter(_ % 2 != 0)\n        evens.foldLeft(0L)(_ + _)", " \
    \       val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ %\
    \ 2 != 0)\n        evens.sum + odds.sum", "        val evens = lst.filter(_ %\
    \ 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        evens.sum + odds.sum",
  "        val evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x\
    \ => x % 2 != 0)\n        val result = evens.foldLeft(0L)(_ + _)\n        odds\
    \ foreach { x => result += x }\n        result", "        var sum = 0L\n     \
    \   var even = 0L\n        var odd = 0L\n        for (i <- 0 until lst.size) {\n\
    \            if (i % 2 == 0) {\n                even += lst(i)\n            }\
    \ else {\n                odd += lst(i)\n            }\n        }\n        sum\
    \ = even + odd\n        return sum", "        val evens = lst.filter(_ % 2 ==\
    \ 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        evenSum + oddSum", "        val evens\
    \ = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n      \
    \  val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum",
  "        var sum = 0L\n        var even = 0L\n        var odd = 0L\n        for\
    \ (i <- 0 until lst.size) {\n            if (i % 2 == 0) {\n                even\
    \ += lst(i)\n            } else {\n                odd += lst(i)\n           \
    \ }\n        }\n        sum = even + odd\n        return sum", "        val even\
    \ = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n       \
    \ val result = even.foldLeft(odd.head)(_ + _)\n        result", "        val evens\
    \ = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 == 1)\n      \
    \  evens.sum + odds.sum", "        var sum = 0\n        var even = 0\n       \
    \ var odd = 0\n        lst.foreach(x => {\n            if (x % 2 == 0) {\n   \
    \             even += x\n            } else {\n                odd += x\n    \
    \        }\n        })\n        sum = even + odd\n        return sum", "     \
    \   val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 ==\
    \ 1)\n        val result = evens.sum + odds.sum\n        result", "        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        evens.sum + odds.sum", "        val even = lst.filter(_ % 2 == 0)\n \
    \       val odd = lst.filter(_ % 2 != 0)\n        val result = even.foldLeft(0L)(_\
    \ + _)\n        odd.foldLeft(result)(_ + _)", "        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evenSum =\
    \ evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum", "     \
    \   var sum = 0\n        for (i <- 0 until lst.size) {\n            if (i % 2\
    \ == 0) {\n                sum += lst(i)\n            }\n        }\n        sum",
  "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ == 1)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n    \
    \    evenSum + oddSum", "        val evens = lst.filter(x => x % 2 == 0)\n   \
    \     val odds = lst.filter(x => x % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        evenSum + oddSum", "        var sum =\
    \ 0L\n        for (i <- 0 until lst.size) {\n            if (i % 2 == 0) {\n \
    \               sum += lst(i)\n            }\n        }\n        return sum",
  "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n    \
    \    evenSum + oddSum", "        val evens = lst.filter(x => x % 2 == 0)\n   \
    \     val odds = lst.filter(x => x % 2 != 0)\n        val result = evens.sum +\
    \ odds.sum\n        result", "        val evens = lst.filter(_ % 2 == 0)\n   \
    \     val odds = lst.filter(_ % 2 != 0)\n        evens.sum + odds.sum", "    \
    \    val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val evenOdd = even.zip(odd)\n        evenOdd.foldLeft(0)(_ + _._1)",
  "        var sum = 0\n        for (i <- 0 until lst.size) {\n            if (i %\
    \ 2 == 0) {\n                sum += lst(i)\n            }\n        }\n       \
    \ return sum", "        var sum = 0L\n        for (i <- 0 until lst.size) {\n\
    \            if (i % 2 == 0) {\n                sum += lst(i)\n            }\n\
    \        }\n        return sum", "        val evens = lst.filter(_ % 2 == 0)\n\
    \        val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        evenSum + oddSum", "        val evens\
    \ = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n\
    \        val result = evens.foldLeft(0L)(_ + _)\n        result += odds.foldLeft(0L)(_\
    \ + _)\n        result", "        val even = lst.filter(_ % 2 == 0)\n        val\
    \ odd = lst.filter(_ % 2 != 0)\n        val result = even.foldLeft(0L)(_ + _)\n\
    \        odd.foldLeft(result)(_ + _)", "        val evens = lst.filter(x => x\
    \ % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n        val result\
    \ = evens.foldLeft(0L)(_ + _)\n        odds foreach { x => result += x }\n   \
    \     result", "        val evens = lst.filter(_ % 2 == 0)\n        val odds =\
    \ lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum\
    \ = odds.sum\n        evenSum + oddSum", "        var sum = 0L\n        for (i\
    \ <- 0 until lst.size) {\n            if (i%2 == 0) {\n                sum +=\
    \ lst(i)\n            }\n        }\n        return sum", "        var sum = 0\n\
    \        var even = 0\n        var odd = 0\n        for (i <- 0 until lst.size)\
    \ {\n            if (i % 2 == 0) {\n                sum += lst(i)\n          \
    \      even += lst(i)\n            } else {\n                odd += lst(i)\n \
    \           }\n        }\n        sum + even", "        var sum = 0L\n       \
    \ for (i <- 0 until lst.size) {\n            if (i % 2 == 0) {\n             \
    \   sum += lst(i)\n            }\n        }\n        return sum", "        var\
    \ sum = 0L\n        lst.foreach{\n            x => if (x % 2 == 0) sum += x\n\
    \        }\n        return sum", "        var sum = 0L\n        var even = 0L\n\
    \        var odd = 0L\n        for (i <- 0 until lst.size) {\n            if (i\
    \ % 2 == 0) {\n                even += lst(i)\n            } else {\n        \
    \        odd += lst(i)\n            }\n        }\n        sum = even + odd\n \
    \       return sum", "        var sum = 0L\n        for(i <- 0 until lst.size)\
    \ {\n            if(i % 2 == 0) {\n                sum += lst(i)\n           \
    \ }\n        }\n        return sum", "        var sum = 0L\n        lst.foreach(x\
    \ => if (x % 2 == 0) sum += x)\n        sum", "        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odds = lst.filter(_ % 2 == 1)\n        val evensOdds\
    \ = evens ++ odds\n        evensOdds.foldLeft(0)(_ + _)", "        val evens =\
    \ lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val\
    \ evensOdds = evens.zip(odds)\n        evensOdds.foldLeft(0L){ (sum, eod) =>\n\
    \            sum + eod\n        }", "        var sum = 0\n        for(i <- 0 until\
    \ lst.size) {\n            if(i % 2 == 0) {\n                sum += lst(i)\n \
    \           }\n        }\n        return sum", "        var sum = 0\n        for\
    \ (i <- 0 until lst.size) {\n            if (i%2 == 0) {\n                sum\
    \ += lst(i)\n            }\n        }\n        return sum", "        val evens\
    \ = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 == 1)\n      \
    \  val result = evens.sum + odds.sum\n        result", "        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val result = even.foldLeft(0L)(_\
    \ + _)\n        odd.foldLeft(result)(_ + _)", "        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenOdd = even.zip(odd)\n\
    \        evenOdd.foldLeft(0)(_ + _._1)", "        val even = lst.filter(_ % 2\
    \ == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val result = even.zip(odd).map(_\
    \ + _._1).sum\n        result", "        val even = lst.filter(_ % 2 == 0)\n \
    \       val odd = lst.filter(_ % 2 != 0)\n        val result = even.zip(odd).map(_\
    \ + _._1).sum\n        result", "        val evens = lst.filter(_ % 2 == 0)\n\
    \        val odds = lst.filter(_ % 2 != 0)\n        val evensOdds = evens.zip(odds)\n\
    \        val evensOddsSum = evensOdds.map(_._1 + _._2)\n        evensOddsSum.sum",
  "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val result = even.zip(odd).map(x => x._1 + x._2).sum\n        result",
  "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 ==\
    \ 1)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum\
    \ + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        evenSum + oddSum", "        var sum = 0L\n        for (i <- 0 until lst.size)\
    \ {\n            if (i % 2 == 0) {\n                sum += lst(i)\n          \
    \  }\n        }\n        return sum", "        val even = lst.filter(_ % 2 ==\
    \ 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenOdd = even.zip(odd)\n\
    \        evenOdd.foldLeft(0L)(_ + _._1)", "        val evens = lst.filter(_ %\
    \ 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        evenSum + oddSum", "        val evens\
    \ = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum\
    \ + oddSum", "        val evens = lst.filter(x => x % 2 == 0)\n        val odds\
    \ = lst.filter(x => x % 2 != 0)\n        val evenSum = evens.sum\n        val\
    \ oddSum = odds.sum\n        evenSum + oddSum", "        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odds = lst.filter(_ % 2 == 1)\n        val evenSum =\
    \ evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum", "     \
    \   val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n\
    \        val result = even.zip(odd).foldLeft(0L)(_ + _._2)\n        result", " \
    \       val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ %\
    \ 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n  \
    \      evenSum + oddSum", "        val evens = lst.filter(x => x % 2 == 0)\n \
    \       val odds = lst.filter(x => x % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        evenSum + oddSum", "        var sum =\
    \ 0L\n        for (i <- 0 until lst.size) {\n            if (i % 2 == 0) {\n \
    \               sum += lst(i)\n            }\n        }\n        return sum",
  "        val evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x\
    \ => x % 2 != 0)\n        val result = evens.foldLeft(0L)(_ + _)\n        odds\
    \ foreach { x => result += x }\n        result", "        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenOdd = even.zip(odd)\n\
    \        evenOdd.foldLeft(0L){ (sum, pair) => sum + pair._2 }", "        val even\
    \ = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n       \
    \ val evenOdd = even.zip(odd)\n        evenOdd.foldLeft(0L){ (sum, elem) =>\n\
    \            sum + elem._2\n        }", "        val evens = lst.filter(_ % 2\
    \ == 0)\n        val odds = lst.filter(_ % 2 == 1)\n        val result = evens.sum\
    \ + odds.sum\n        result", "        var sum = 0L\n        var even = 0L\n\
    \        var odd = 0L\n        for (i <- 0 until lst.size) {\n            if (i\
    \ % 2 == 0) {\n                sum += lst(i)\n                even += lst(i)\n\
    \            } else {\n                odd += lst(i)\n            }\n        }\n\
    \        sum + even", "        var sum = 0L\n        for (i <- 0 until lst.size)\
    \ {\n            if (i%2 == 0) {\n                sum += lst(i)\n            }\n\
    \        }\n        return sum", "        val evens = lst.filter(x => x % 2 ==\
    \ 0)\n        val odds = lst.filter(x => x % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        evenSum + oddSum", "        var sum =\
    \ 0L\n        for (i <- 0 until lst.size) {\n            if (i % 2 == 0) {\n \
    \               sum += lst(i)\n            }\n        }\n        return sum",
  "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val evenOdd = even.zip(odd)\n        evenOdd.foldLeft(0L){ (sum,\
    \ tuple) =>\n            sum + tuple._1\n        }", "        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evenSum =\
    \ evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum", "     \
    \   val evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x =>\
    \ x % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        evenSum + oddSum", "        val even = lst.filter(_ % 2 == 0)\n     \
    \   val odd = lst.filter(_ % 2 == 1)\n        val result = even.foldLeft(0L)(_\
    \ + _)\n        odd.foldLeft(result)(_ + _)", "        var sum = 0L\n        for\
    \ (i <- 0 until lst.size) {\n            if (i % 2 == 0) {\n                sum\
    \ += lst(i)\n            }\n        }\n        return sum", "        var sum =\
    \ 0L\n        var even = 0L\n        var odd = 0L\n        lst.foreach(x => {\n\
    \            if (x % 2 == 0) {\n                even += x\n            } else\
    \ {\n                odd += x\n            }\n        })\n        sum = even +\
    \ odd\n        return sum", "        val evens = lst.filter(_ % 2 == 0)\n    \
    \    val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n    \
    \    val oddSum = odds.sum\n        evenSum + oddSum", "        val evens = lst.filter(x\
    \ => x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n        val\
    \ result = evens.foldLeft(0L)(_ + _)\n        odds foreach { x => result += x\
    \ }\n        result", "        val evens = lst.filter(_ % 2 == 0)\n        val\
    \ odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n        val\
    \ oddSum = odds.sum\n        evenSum + oddSum", "        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evenSum =\
    \ evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum", "     \
    \   val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 !=\
    \ 0)\n        val evensOdds = evens.zip(odds)\n        evensOdds.foldLeft(0)((acc,\
    \ x) => acc + x._2)", "        val evens = lst.filter(x => x % 2 == 0)\n     \
    \   val odds = lst.filter(x => x % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        evenSum + oddSum", "        var sum =\
    \ 0L\n        lst.foreach(x => if (x % 2 == 0) sum += x)\n        sum", "    \
    \    val evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x\
    \ => x % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        evenSum + oddSum", "        var sum = 0L\n        var even = 0L\n   \
    \     var odd = 0L\n        lst.foreach(x => {\n            if (x % 2 == 0) {\n\
    \                even += x\n            } else {\n                odd += x\n \
    \           }\n        })\n        sum = even + odd\n        return sum", "  \
    \      val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n    \
    \    evenSum + oddSum", "        var sum = 0\n        for (i <- 0 until lst.size)\
    \ {\n            if (i % 2 == 0) {\n                sum += lst(i)\n          \
    \  }\n        }\n        return sum", "        val even = lst.filter(_ % 2 ==\
    \ 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val result = even.foldLeft(0L)\
    \ { (sum, elem) => sum + elem }\n        odd.foldLeft(result) { case (sum, elem)\
    \ => sum + elem }", "        val evens = lst.filter(_ % 2 == 0)\n        val odds\
    \ = lst.filter(_ % 2 == 1)\n        val evenSum = evens.sum\n        val oddSum\
    \ = odds.sum\n        evenSum + oddSum", "        val evens = lst.filter(x =>\
    \ x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n        val result\
    \ = evens.sum + odds.sum\n        result", "        var sum = 0L\n        for\
    \ (i <- 0 until lst.size) {\n            if (i % 2 == 0) {\n                sum\
    \ += lst(i)\n            }\n        }\n        return sum", "        val evens\
    \ = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n      \
    \  val result = evens.sum + odds.sum\n        result", "        var sum = 0L\n\
    \        for (i <- 0 until lst.size) {\n            if (i%2 == 0) {\n        \
    \        sum += lst(i)\n            }\n        }\n        return sum", "     \
    \   val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 !=\
    \ 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n       \
    \ evenSum + oddSum", "        val even = lst.filter(x => x % 2 == 0)\n       \
    \ val odd = lst.filter(x => x % 2 != 0)\n        val evenOdd = even.zip(odd)\n\
    \        evenOdd.foldLeft(0L) { (sum, tuple) => sum + tuple._2 }", "        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 == 1)\n  \
    \      val result = even.foldLeft(0L)(_ + _)\n        odd.foldLeft(result)(_ +\
    \ _)", "        var sum = 0\n        for (i <- 0 until lst.size) {\n         \
    \   if (i % 2 == 0) {\n                sum += lst(i)\n            }\n        }\n\
    \        return sum", "        val evens = lst.filter(_ % 2 == 0)\n        val\
    \ odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n        val\
    \ oddSum = odds.sum\n        evenSum + oddSum", "        val evens = lst.filter(x\
    \ => x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n        val\
    \ evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum",
  "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ != 0)\n        evens.sum + odds.sum", "        val evens = lst.filter(x => x\
    \ % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n        val evenSum\
    \ = evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum", "   \
    \     val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n    \
    \    evenSum + oddSum", "        val even = lst.filter(x => x % 2 == 0)\n    \
    \    val odd = lst.filter(x => x % 2 != 0)\n        val result = even.foldLeft(0L)(_\
    \ + odd.last)\n        result", "        val evens = lst.filter(_ % 2 == 0)\n\
    \        val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        evenSum + oddSum", "        var sum =\
    \ 0L\n        for (i <- 0 until lst.size) {\n            if (i % 2 == 0) {\n \
    \               sum += lst(i)\n            }\n        }\n        return sum",
  "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum\
    \ + oddSum", "        val even = lst.filter(x => x % 2 == 0)\n        val odd\
    \ = lst.filter(x => x % 2 != 0)\n        val result = even.zip(odd).map(x => x._1\
    \ + x._2).sum\n        result", "        val evens = lst.filter(_ % 2 == 0)\n\
    \        val odds = lst.filter(_ % 2 == 1)\n        val result = evens.foldLeft(0)\
    \ { (sum, e) => sum + e }\n        val resultOdds = odds.foldLeft(0) { (sum, e)\
    \ => sum + e }\n        val resultOddsSum = resultOdds.sum\n        val resultOddsSumOdds\
    \ = resultOddsSum - result\n        val resultOddsSumEvens = resultOddsSum - resultOddsSumOdds\n\
    \        val resultOddsSumEvensSum = resultOddsSumEvens.sum\n        val resultOddsSumEvensSumOdds\
    \ = resultOddsSumEvensSum - resultOddsSumEvens\n        val resultOddsSumEvensSumEvens\
    \ = resultOddsSumEvensSum - resultOddsSumEvensSumOdds\n        val resultOddsSumEvensSumEvensSum\
    \ = resultOddsSumEvensSumEvens.sum\n        val resultOddsSumEvensSumEvensSumOdds\
    \ = resultOddsSumEvensSumEvensSum - resultOddsSumEvensSumEvensSumEvens\n     \
    \   val resultOddsSumEvensSumEvensSumEvensSum = resultOddsSumEvensSumEvensSumEvensSum\
    \ - resultOddsSumEvensSumEvensSumEvensSumOdds\n        val resultOddsSumEvensSumEvensSumEvensSumEvens\
    \ = resultOddsSumEvensSumEvensSumEvensSumEvensSum - resultOddsSumEvensSumEvensSumEvensSumEvensOdds\n\
    \        val resultOddsSumEvensSumEvensSumEvensSumEvensSum = resultOddsSumEvensSumEvensSumEvensSumEvensSumEvensSum\
    \ - resultOddsSumEvensSumEvensSumEvensSumEvensSumEvensOdds\n        val resultOddsSumEvensSumEvensSumEvensSumEvensSumEvens\
    \ = resultOddsSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum - resultOddsSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensO",
  "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n    \
    \    evenSum + oddSum", "        var sum = 0L\n        for(i <- 0 until lst.size)\
    \ {\n            if(i % 2 == 0) {\n                sum += lst(i)\n           \
    \ }\n        }\n        return sum", "        var sum = 0L\n        for (i <-\
    \ 0 until lst.size) {\n            if (i % 2 == 0) {\n                sum += lst(i)\n\
    \            }\n        }\n        return sum", "        val evens = lst.filter(x\
    \ => x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n        val\
    \ evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum",
  "        var sum = 0L\n        for (i <- 0 until lst.size) {\n            if (i\
    \ % 2 == 0) {\n                sum += lst(i)\n            }\n        }\n     \
    \   return sum", "        val even = lst.filter(_ % 2 == 0)\n        val odd =\
    \ lst.filter(_ % 2 == 1)\n        val result = even.foldLeft(0L)(_ + _)\n    \
    \    odd.foldLeft(result)(_ + _)", "        val evens = lst.filter(x => x % 2\
    \ == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n        val result =\
    \ evens.sum + odds.sum\n        result", "        val evens = lst.filter(x =>\
    \ x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n        val evenSum\
    \ = evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum", "   \
    \     val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 ==\
    \ 1)\n        val result = even.foldLeft(0L)(_ + _)\n        odd.foldLeft(result)(_\
    \ + _)", "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_\
    \ % 2 != 0)\n        val result = evens.sum + odds.sum\n        result", "   \
    \     var sum = 0L\n        var even = 0L\n        var odd = 0L\n        lst.foreach(x\
    \ => {\n            if (x % 2 == 0) {\n                even += x\n           \
    \ } else {\n                odd += x\n            }\n        })\n        sum =\
    \ even + odd\n        return sum", "        val even = lst.filter(x => x % 2 ==\
    \ 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val evenSum = even.foldLeft(0L)(_\
    \ + _)\n        val oddSum = odd.foldLeft(0L)(_ + _)\n        evenSum + oddSum",
  "        var sum = 0L\n        for (i <- 0 until lst.size) {\n            if (i\
    \ % 2 == 0) {\n                sum += lst(i)\n            }\n        }\n     \
    \   return sum", "        val evens = lst.filter(_ % 2 == 0)\n        val odds\
    \ = lst.filter(_ % 2 != 0)\n        val result = evens.sum + odds.sum\n      \
    \  result", "        var sum = 0L\n        for (i <- 0 until lst.size) {\n   \
    \         if (i % 2 == 0) {\n                sum += lst(i)\n            }\n  \
    \      }\n        return sum", "        var sum = 0\n        for (i <- 0 until\
    \ lst.size) {\n            if (i % 2 == 0) {\n                sum += lst(i)\n\
    \            }\n        }\n        return sum", "        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evenSum =\
    \ evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum", "     \
    \   val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n\
    \        val result = even.foldLeft(0L)(_ + _)\n        odd.foldLeft(result)(_\
    \ + _)", "        var sum = 0L\n        var even = 0L\n        var odd = 0L\n\
    \        for (i <- 0 until lst.size) {\n            if (i % 2 == 0) {\n      \
    \          even += lst(i)\n            } else {\n                odd += lst(i)\n\
    \            }\n        }\n        sum = even + odd\n        return sum", "  \
    \      var sum = 0L\n        for (i <- 0 until lst.size) {\n            if (i\
    \ % 2 == 0) {\n                sum += lst(i)\n            }\n        }\n     \
    \   return sum", "        val even = lst.filter(_ % 2 == 0)\n        val odd =\
    \ lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum =\
    \ odd.sum\n        evenSum + oddSum", "        val evens = lst.filter(_ % 2 ==\
    \ 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        evenSum + oddSum", "        val even =\
    \ lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val\
    \ evenOdd = even.zip(odd)\n        evenOdd.foldLeft(0)((acc, e) => acc + e._2)",
  "        var sum = 0L\n        lst.foreach(x => if (x % 2 == 0) sum += x)\n    \
    \    sum", "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_\
    \ % 2 != 0)\n        val result = even.foldLeft(0L)(_ + odd.head) \n        result",
  "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val evenSum = even.foldLeft(0L)((sum, element) => sum + element)\n\
    \        val oddSum = odd.foldLeft(0L)((sum, element) => sum + element)\n    \
    \    evenSum + oddSum", "        var sum = 0L\n        for (i <- 0 until lst.size)\
    \ {\n            if (i % 2 == 0) {\n                sum += lst(i)\n          \
    \  }\n        }\n        return sum", "        val evens = lst.filter(_ % 2 ==\
    \ 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        evenSum + oddSum", "        val even =\
    \ lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val\
    \ result = even.zip(odd).foldLeft(0L)(_ + _._2)\n        result", "        var\
    \ sum = 0L\n        for (i <- 0 until lst.size) {\n            if (i % 2 == 0)\
    \ {\n                sum += lst(i)\n            }\n        }\n        return sum",
  "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val evenOdd = even.zip(odd)\n        evenOdd.foldLeft(0)((a, b)\
    \ => a + b)"]
stop_tokens:
- "\n    }\n"
