name: HumanEval_85_add
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a non-empty list of integers lst. add the even elements that are at\
  \ odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n    def add(lst\
  \ : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong,\
  \ 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong,\
  \ 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
  \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
  \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
completions: ["        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n  \
    \      evenSum + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n      \
    \  val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n      \
    \  val oddSum = odds.sum\n        evenSum + oddSum", "        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evenSum =\
    \ evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum", "     \
    \   val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 !=\
    \ 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n       \
    \ evenSum + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n        val\
    \ odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n        val\
    \ oddSum = odds.sum\n        evenSum + oddSum", "        val evens = lst.filter(x\
    \ => x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n        val\
    \ result = evens.sum + odds.sum\n        result", "        var sum = 0\n     \
    \   for(i <- 0 until lst.size) {\n            if(i % 2 == 0) {\n             \
    \   sum += lst(i)\n            }\n        }\n        return sum", "        var\
    \ sum = 0L\n        for (i <- 0 until lst.size) {\n            if (i % 2 == 0)\
    \ {\n                sum += lst(i)\n            }\n        }\n        return sum",
  "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ == 1)\n        val result = evens.sum + odds.sum\n        result", "       \
    \ val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 == 1)\n\
    \        evens.sum + odds.sum", "        val even = lst.filter(_ % 2 == 0)\n \
    \       val odd = lst.filter(_ % 2 != 0)\n        val evenOdd = even.zip(odd)\n\
    \        evenOdd.foldLeft(0L) { (sum, eod) =>\n            sum + eod\n       \
    \ }", "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        evenSum + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n    \
    \    val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n    \
    \    val oddSum = odds.sum\n        evenSum + oddSum", "        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        evenSum + oddSum", "        val even =\
    \ lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val\
    \ result = even.foldLeft(odd.head)(_ + _)\n        result", "        val even\
    \ = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n       \
    \ val result = even.foldLeft(0L)(_ + _)\n        odd.foldLeft(result)(_ + _)",
  "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val result = even.foldLeft(odd.head)(_ + _)\n        result", " \
    \       val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ %\
    \ 2 != 0)\n        evens.sum + odds.sum", "        var sum = 0L\n        for(i\
    \ <- 0 until lst.size) {\n            if(i % 2 == 0) {\n                sum +=\
    \ lst(i)\n            }\n        }\n        return sum", "        var sum = 0L\n\
    \        for (i <- 0 until lst.size) {\n            if (i % 2 == 0) {\n      \
    \          sum += lst(i)\n            }\n        }\n        return sum"]
stop_tokens:
- "\n    }\n"
