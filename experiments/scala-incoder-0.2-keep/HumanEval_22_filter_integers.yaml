name: HumanEval_22_filter_integers
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Filter given list of any python values only for integers\n    // >>> filter_integers(['a',\
  \ 3.14, 5])\n    // [5]\n    // >>> filter_integers([1, 2, 3, 'abc', {}, []])\n\
  \    // [1, 2, 3]\n    def filterIntegers(values : List[Any]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
  \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
  \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
  \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
  \    }\n\n}\n"
completions: ['        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  "        val result = mutable.ArrayBuffer.empty[Long]\n        values.foreach(v\
    \ => {\n            v match {\n                case i : Int => result += i.toLong\n\
    \                case i : Long => result += i\n                case i : String\
    \ => result += i.toLong\n                case i : Double => result += i.toLong\n\
    \                case i : Boolean => result += i.toLong\n                case\
    \ i : Null => result += 0L\n                case _ => result += 0L\n         \
    \   }\n        })\n        result.toList", '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  "        val filtered = values.filter(_.isInstanceOf[Int])\n        filtered.map(_.asInstanceOf[Long])",
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Long]).toList',
  '        values.filter(_.isInstanceOf[Long]).toList', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', " \
    \       val filtered = values.filter(_.isInstanceOf[Int])\n        filtered.map(_.asInstanceOf[Long])",
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  "        val filtered = values.filter(x => x match {\n            case x if x match\
    \ {\n                case _: Int => true\n                case _ => false\n  \
    \          }\n        })\n        filtered.map(x => x.asInstanceOf[Long])", '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', " \
    \       val filtered = values.filter(_.isInstanceOf[Long])\n        filtered.toList",
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Long]).toList',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Long]).toList',
  '        values.filter(_.isInstanceOf[Long]).toList', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  "        val filtered = values.filter(_.isInstanceOf[Int])\n        filtered.map(_.asInstanceOf[Long])",
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Long]).toList',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', " \
    \       val filtered = values.filter(_.isInstanceOf[Long])\n        filtered.toList",
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  "        val filtered = values.filter(_.isInstanceOf[Int])\n        filtered.map(_.asInstanceOf[Long])",
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', "     \
    \   val filtered = values.filter(_.isInstanceOf[Int])\n        filtered.map(_.asInstanceOf[Long])",
  '        values.filter(_.isInstanceOf[Long]).toList', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', "     \
    \   val filtered = values.filter(_.isInstanceOf[Int])\n        filtered.map(_.asInstanceOf[Long])",
  '        values.filter(_.isInstanceOf[Long]).toList', '        values.filter(_.isInstanceOf[Long]).toList',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  "        val filtered = values.filter(_.isInstanceOf[Int])\n        filtered.map(_.asInstanceOf[Long])",
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  "        val filtered = values.filter(_.isInstanceOf[Int])\n        filtered.map(_.asInstanceOf[Long])",
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Long]).toList',
  '        values.filter(_.isInstanceOf[Long]).toList', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Long]).toList',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', " \
    \       val filtered = values.filter(_.isInstanceOf[Int])\n        filtered.map(_.asInstanceOf[Long])",
  "        val filtered = values.filter(_.isInstanceOf[Int])\n        filtered.map(_.asInstanceOf[Long])",
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  "        val integers = values.filter(_.isInstanceOf[Long])\n        integers.toList",
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Long]).toList',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  "        val result = mutable.ListBuffer[Long]()\n        values.foreach(v => {\n\
    \            val isInteger = v.isInstanceOf[Int]\n            if (isInteger) {\n\
    \                result += v.asInstanceOf[Int]\n            }\n        })\n  \
    \      result.toList", "        val filtered = values.filter(_.isInstanceOf[Long])\n\
    \        filtered.toList.map(_.asInstanceOf[Long])", '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Long]).toList',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  "        val filtered = values.filter(_.isInstanceOf[Int])\n        filtered.map(_.asInstanceOf[Long])",
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Long]).toList', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  "        val filtered = values.filter(_.isInstanceOf[Int])\n        filtered.map(_.asInstanceOf[Long])",
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', " \
    \       val filtered = values.filter(_.isInstanceOf[Int])\n        filtered.map(_.asInstanceOf[Long])",
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Long]).toList',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Long]).toList', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', "     \
    \   val filtered = values.filter(_.isInstanceOf[Int])\n        filtered.map(_.asInstanceOf[Long])",
  "        val filteredValues = values.filter(x => x match {\n            case i:\
    \ Int => true\n            case _ => false\n        })\n        filteredValues.map(_.toLong)",
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', " \
    \       val filtered = values.filter(_.isInstanceOf[Long])\n        filtered.toList",
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  "        val filtered = values.filter(_.isInstanceOf[Int])\n        filtered.map(_.asInstanceOf[Long])",
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', " \
    \       val filteredValues = mutable.ListBuffer.empty[Long]\n        for (value\
    \ <- values) {\n            if (value match {\n                case i: Int =>\
    \ filteredValues += i\n                case _ => filteredValues += 0\n       \
    \     }\n        }\n        filteredValues.toList", '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList',
  "        val filteredValues = mutable.ListBuffer[Long]()\n        values.foreach(value\
    \ => {\n            if (value match {\n                case i: Int => filteredValues\
    \ += i\n                case _ => filteredValues += 0\n            })\n      \
    \      filteredValues\n        })\n        filteredValues.toList", '        values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int]).toList']
stop_tokens:
- "\n    }\n"
