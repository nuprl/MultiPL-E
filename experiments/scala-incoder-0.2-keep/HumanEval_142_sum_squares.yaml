name: HumanEval_142_sum_squares
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // \"\n    // This function will take a list of integers. For all entries in\
  \ the list, the function shall square the integer entry if its index is a \n   \
  \ // multiple of 3 and will cube the integer entry if its index is a multiple of\
  \ 4 and not a multiple of 3. The function will not \n    // change the entries in\
  \ the list whose indexes are not a multiple of 3 or 4. The function shall then return\
  \ the sum of all entries. \n    // Examples:\n    // For lst = [1,2,3] the output\
  \ should be 6\n    // For lst = []  the output should be 0\n    // For lst = [-1,-5,2,-1,-5]\
  \  the output should be -126\n    def sumSquares(lst : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
  \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n\
  \    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
  \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
  \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
  \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n\
  \    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong,\
  \ -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong, -99l.toLong,\
  \ 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, -1l.toLong)))\
  \ == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong, -2l.toLong,\
  \ 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong, 20l.toLong,\
  \ -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) == (-14196l));\n\
  \    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong, -1l.toLong,\
  \ -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong, -5l.toLong,\
  \ 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong, 16l.toLong,\
  \ 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
completions: ["        val sum = 0L\n        lst.foreach(i => {\n            if (i\
    \ % 3 == 0) {\n                sum += i * i\n            }\n            if (i\
    \ % 4 == 0) {\n                sum += i * i\n            }\n        })\n     \
    \   sum", "        val squares = mutable.ListBuffer[Long]()\n        val cubes\
    \ = mutable.ListBuffer[Long]()\n        lst.foreach(x => {\n            if (x\
    \ % 3 == 0) {\n                squares += x\n            } else if (x % 4 == 0)\
    \ {\n                cubes += x\n            } else {\n                squares\
    \ -= x\n                cubes -= x\n            }\n        })\n        squares.sum",
  "        val result = mutable.ListBuffer.empty[Long]\n        lst.foreach{ x =>\n\
    \            if (x % 3 == 0) {\n                result += x * x\n            }\
    \ else if (x % 4 == 0) {\n                result += x * x\n            } else\
    \ {\n                result += x\n            }\n        }\n        result.sum",
  "        val result = mutable.ListBuffer.empty[Long]\n        lst.foreach(x => {\n\
    \            if (x % 3 == 0) {\n                result += x * x\n            }\
    \ else if (x % 4 == 0) {\n                result += x * x\n            } else\
    \ {\n                result += x\n            }\n        })\n        result.sum",
  "        var sum = 0L\n        for(i <- 0 until lst.size) {\n            val index\
    \ = i / 3\n            val value = lst(i)\n            if(index % 3 == 0) {\n\
    \                sum += value * value\n            }\n            else if(index\
    \ % 4 == 0) {\n                sum += value * value * value\n            }\n \
    \           else {\n                sum += value\n            }\n        }\n \
    \       return sum", "        val squares = mutable.ListBuffer[Long]()\n     \
    \   val cubes = mutable.ListBuffer[Long]()\n        lst.foreach(x => {\n     \
    \       if (x % 3 == 0) {\n                squares += x\n            } else if\
    \ (x % 4 == 0) {\n                cubes += x\n            } else {\n         \
    \       squares += x * x\n                cubes += x * x * x\n            }\n\
    \        })\n        squares.sum", "        var sum = 0L\n        var count =\
    \ 0L\n        for(i <- 0 until lst.size) {\n            val x = lst(i)\n     \
    \       if((x % 3) == 0) {\n                sum += x\n                count +=\
    \ 1\n            }\n            else if((x % 4) == 0) {\n                sum +=\
    \ x\n                count += 1\n            }\n            else {\n         \
    \       sum += x * x\n                count += 1\n            }\n        }\n \
    \       sum", "        val squares = mutable.ListBuffer[Long]()\n        val cubes\
    \ = mutable.ListBuffer[Long]()\n        lst.foreach{i =>\n            if (i %\
    \ 3 == 0) squares += i\n            if (i % 4 == 0) cubes += i\n        }\n  \
    \      squares.sum + cubes.sum", "        val squares = mutable.ListBuffer[Long]()\n\
    \        val cubes = mutable.ListBuffer[Long]()\n        lst.foreach(x => {\n\
    \            if (x % 3 == 0) {\n                squares += x\n            } else\
    \ if (x % 4 == 0) {\n                cubes += x\n            } else {\n      \
    \          squares += x * x\n                cubes += x * x * x\n            }\n\
    \        })\n        squares.sum", "        val sum = 0L\n        lst.foreach{i\
    \ => \n            if (i % 3 == 0) sum += i * i\n            if (i % 4 == 0) sum\
    \ += i * i\n        }\n        sum", "        val n = lst.size\n        val sum\
    \ = 0L\n        for(i <- 0 until n){\n            val index = i / 3\n        \
    \    if(index == 0){\n                sum += lst(i)\n            }\n         \
    \   else if(index % 3 == 0){\n                sum += lst(i) * lst(i)\n       \
    \     }\n            else if(index % 4 == 0){\n                sum += lst(i) *\
    \ lst(i) * lst(i)\n            }\n        }\n        return sum", "        val\
    \ result = mutable.ListBuffer.empty[Long]\n        for (i <- 0 until lst.size)\
    \ {\n            if (i % 3 == 0 && i % 4 == 0) result += lst(i)\n            if\
    \ (i % 3 == 0) result += lst(i) * lst(i)\n            if (i % 4 == 0) result +=\
    \ lst(i) * lst(i) * lst(i)\n        }\n        result.sum", "        val sum =\
    \ 0\n        for(i <- 0 until lst.size) {\n            val index = i / 3\n   \
    \         if(index % 3 == 0) {\n                sum += lst(i)\n            }\n\
    \            else if(index % 4 == 0) {\n                sum += lst(i)\n      \
    \      }\n            else {\n                sum += lst(i) * lst(i)\n       \
    \     }\n        }\n        sum", "        var sum = 0L\n        var i = 0\n \
    \       while (i < lst.size) {\n            val x = lst(i)\n            if (x\
    \ % 3 == 0) {\n                sum += x * x\n            } else if (x % 4 == 0)\
    \ {\n                sum += x * x\n            } else {\n                sum +=\
    \ x\n            }\n            i += 1\n        }\n        return sum", "    \
    \    val sum = 0L\n        for(i <- 0 until lst.size) {\n            val index\
    \ = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            if(index != -1)\
    \ {\n                sum += lst(index)\n            }\n        }\n        return\
    \ sum", "        val sum = 0L\n        lst.foreach{\n            i =>\n      \
    \          if (i % 3 == 0 || i % 4 == 0)\n                    sum += i\n     \
    \   }\n        return sum", "        val squares = lst.filter(x => x % 3 == 0).map(x\
    \ => x * x)\n        val cubes = lst.filter(x => x % 4 == 0).map(x => x * x *\
    \ x)\n        squares.sum + cubes.sum", "        val squares = lst.filter(_ %\
    \ 3 == 0)\n        val cubes = lst.filter(_ % 4 == 0)\n        squares.sum + cubes.sum",
  "        val squares = lst.filter(_ % 3 == 0).map(_ * _)\n        val cubes = lst.filter(_\
    \ % 4 == 0).map(_ * _)\n        squares.sum + cubes.sum", "        var sum = 0L\n\
    \        var count = 0L\n        for(i <- 0 until lst.size) {\n            val\
    \ index = i / 3\n            if(index == 0 && i % 3 == 0) {\n                sum\
    \ += lst(i)\n                count += 1\n            } else if(index == 0 && i\
    \ % 4 == 0) {\n                sum += lst(i)\n                count += 1\n   \
    \         } else if(index != 0 && i % 3 == 0) {\n                sum += lst(i)\n\
    \                count += 1\n            } else if(index != 0 && i % 4 == 0) {\n\
    \                sum += lst(i)\n                count += 1\n            } else\
    \ {\n                sum += lst(i)\n                count += 1\n            }\n\
    \        }\n        sum"]
stop_tokens:
- "\n    }\n"
