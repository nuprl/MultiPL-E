name: HumanEval_142_sum_squares
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // \"\n    // This function will take a list of integers. For all entries in\
  \ the list, the function shall square the integer entry if its index is a \n   \
  \ // multiple of 3 and will cube the integer entry if its index is a multiple of\
  \ 4 and not a multiple of 3. The function will not \n    // change the entries in\
  \ the list whose indexes are not a multiple of 3 or 4. The function shall then return\
  \ the sum of all entries. \n    // Examples:\n    // For lst = [1,2,3] the output\
  \ should be 6\n    // For lst = []  the output should be 0\n    // For lst = [-1,-5,2,-1,-5]\
  \  the output should be -126\n    def sumSquares(lst : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
  \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n\
  \    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
  \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
  \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
  \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n\
  \    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong,\
  \ -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong, -99l.toLong,\
  \ 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, -1l.toLong)))\
  \ == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong, -2l.toLong,\
  \ 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong, 20l.toLong,\
  \ -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) == (-14196l));\n\
  \    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong, -1l.toLong,\
  \ -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong, -5l.toLong,\
  \ 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong, 16l.toLong,\
  \ 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
completions: ["        val sum = 0L\n        lst.foreach(i => {\n            if (i\
    \ % 3 == 0) {\n                sum += i * i\n            }\n            if (i\
    \ % 4 == 0) {\n                sum += i * i\n            }\n        })\n     \
    \   sum", "        val squares = mutable.ListBuffer[Long]()\n        val cubes\
    \ = mutable.ListBuffer[Long]()\n        lst.foreach(x => {\n            if (x\
    \ % 3 == 0) {\n                squares += x\n            } else if (x % 4 == 0)\
    \ {\n                cubes += x\n            } else {\n                squares\
    \ -= x\n                cubes -= x\n            }\n        })\n        squares.sum",
  "        val result = mutable.ListBuffer.empty[Long]\n        lst.foreach{ x =>\n\
    \            if (x % 3 == 0) {\n                result += x * x\n            }\
    \ else if (x % 4 == 0) {\n                result += x * x\n            } else\
    \ {\n                result += x\n            }\n        }\n        result.sum",
  "        val result = mutable.ListBuffer.empty[Long]\n        lst.foreach(x => {\n\
    \            if (x % 3 == 0) {\n                result += x * x\n            }\
    \ else if (x % 4 == 0) {\n                result += x * x\n            } else\
    \ {\n                result += x\n            }\n        })\n        result.sum",
  "        var sum = 0L\n        for(i <- 0 until lst.size) {\n            val index\
    \ = i / 3\n            val value = lst(i)\n            if(index % 3 == 0) {\n\
    \                sum += value * value\n            }\n            else if(index\
    \ % 4 == 0) {\n                sum += value * value * value\n            }\n \
    \           else {\n                sum += value\n            }\n        }\n \
    \       return sum", "        val squares = mutable.ListBuffer[Long]()\n     \
    \   val cubes = mutable.ListBuffer[Long]()\n        lst.foreach(x => {\n     \
    \       if (x % 3 == 0) {\n                squares += x\n            } else if\
    \ (x % 4 == 0) {\n                cubes += x\n            } else {\n         \
    \       squares += x * x\n                cubes += x * x * x\n            }\n\
    \        })\n        squares.sum", "        var sum = 0L\n        var count =\
    \ 0L\n        for(i <- 0 until lst.size) {\n            val x = lst(i)\n     \
    \       if((x % 3) == 0) {\n                sum += x\n                count +=\
    \ 1\n            }\n            else if((x % 4) == 0) {\n                sum +=\
    \ x\n                count += 1\n            }\n            else {\n         \
    \       sum += x * x\n                count += 1\n            }\n        }\n \
    \       sum", "        val squares = mutable.ListBuffer[Long]()\n        val cubes\
    \ = mutable.ListBuffer[Long]()\n        lst.foreach{i =>\n            if (i %\
    \ 3 == 0) squares += i\n            if (i % 4 == 0) cubes += i\n        }\n  \
    \      squares.sum + cubes.sum", "        val squares = mutable.ListBuffer[Long]()\n\
    \        val cubes = mutable.ListBuffer[Long]()\n        lst.foreach(x => {\n\
    \            if (x % 3 == 0) {\n                squares += x\n            } else\
    \ if (x % 4 == 0) {\n                cubes += x\n            } else {\n      \
    \          squares += x * x\n                cubes += x * x * x\n            }\n\
    \        })\n        squares.sum", "        val sum = 0L\n        lst.foreach{i\
    \ => \n            if (i % 3 == 0) sum += i * i\n            if (i % 4 == 0) sum\
    \ += i * i\n        }\n        sum", "        val n = lst.size\n        val sum\
    \ = 0L\n        for(i <- 0 until n){\n            val index = i / 3\n        \
    \    if(index == 0){\n                sum += lst(i)\n            }\n         \
    \   else if(index % 3 == 0){\n                sum += lst(i) * lst(i)\n       \
    \     }\n            else if(index % 4 == 0){\n                sum += lst(i) *\
    \ lst(i) * lst(i)\n            }\n        }\n        return sum", "        val\
    \ result = mutable.ListBuffer.empty[Long]\n        for (i <- 0 until lst.size)\
    \ {\n            if (i % 3 == 0 && i % 4 == 0) result += lst(i)\n            if\
    \ (i % 3 == 0) result += lst(i) * lst(i)\n            if (i % 4 == 0) result +=\
    \ lst(i) * lst(i) * lst(i)\n        }\n        result.sum", "        val sum =\
    \ 0\n        for(i <- 0 until lst.size) {\n            val index = i / 3\n   \
    \         if(index % 3 == 0) {\n                sum += lst(i)\n            }\n\
    \            else if(index % 4 == 0) {\n                sum += lst(i)\n      \
    \      }\n            else {\n                sum += lst(i) * lst(i)\n       \
    \     }\n        }\n        sum", "        var sum = 0L\n        var i = 0\n \
    \       while (i < lst.size) {\n            val x = lst(i)\n            if (x\
    \ % 3 == 0) {\n                sum += x * x\n            } else if (x % 4 == 0)\
    \ {\n                sum += x * x\n            } else {\n                sum +=\
    \ x\n            }\n            i += 1\n        }\n        return sum", "    \
    \    val sum = 0L\n        for(i <- 0 until lst.size) {\n            val index\
    \ = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            if(index != -1)\
    \ {\n                sum += lst(index)\n            }\n        }\n        return\
    \ sum", "        val sum = 0L\n        lst.foreach{\n            i =>\n      \
    \          if (i % 3 == 0 || i % 4 == 0)\n                    sum += i\n     \
    \   }\n        return sum", "        val squares = lst.filter(x => x % 3 == 0).map(x\
    \ => x * x)\n        val cubes = lst.filter(x => x % 4 == 0).map(x => x * x *\
    \ x)\n        squares.sum + cubes.sum", "        val squares = lst.filter(_ %\
    \ 3 == 0)\n        val cubes = lst.filter(_ % 4 == 0)\n        squares.sum + cubes.sum",
  "        val squares = lst.filter(_ % 3 == 0).map(_ * _)\n        val cubes = lst.filter(_\
    \ % 4 == 0).map(_ * _)\n        squares.sum + cubes.sum", "        var sum = 0L\n\
    \        var count = 0L\n        for(i <- 0 until lst.size) {\n            val\
    \ index = i / 3\n            if(index == 0 && i % 3 == 0) {\n                sum\
    \ += lst(i)\n                count += 1\n            } else if(index == 0 && i\
    \ % 4 == 0) {\n                sum += lst(i)\n                count += 1\n   \
    \         } else if(index != 0 && i % 3 == 0) {\n                sum += lst(i)\n\
    \                count += 1\n            } else if(index != 0 && i % 4 == 0) {\n\
    \                sum += lst(i)\n                count += 1\n            } else\
    \ {\n                sum += lst(i)\n                count += 1\n            }\n\
    \        }\n        sum", "        val sum = 0L\n        val sq = lst.map(x =>\
    \ if (x % 3 == 0) x * x else x * x * x)\n        val cu = lst.map(x => if (x %\
    \ 4 == 0) x * x else x * x * x * x)\n        val result = sq.zip(cu).map(x =>\
    \ x._1 + x._2).sum\n        result", "        var sum = 0L\n        var count\
    \ = 0L\n        lst.foreach(x => {\n            if (x % 3 == 0) {\n          \
    \      sum += x * x\n                count += 1\n            } else if (x % 4\
    \ == 0) {\n                sum += x * x\n                count += 1\n        \
    \    } else {\n                sum += x\n                count += 1\n        \
    \    }\n        })\n        sum", "        val squares = lst.filter(_ % 3 == 0)\n\
    \        val cubes = lst.filter(_ % 4 == 0)\n        squares.sum + cubes.sum",
  "        var sum = 0L\n        var count = 0L\n        for(i <- 0 until lst.size)\
    \ {\n            val index = i / 3\n            if(index % 3 == 0) {\n       \
    \         sum += lst(i)\n                count += 1\n            }\n         \
    \   else if(index % 4 == 0) {\n                sum += lst(i)\n               \
    \ count += 1\n            }\n            else {\n                sum += lst(i)\n\
    \                count += 1\n            }\n        }\n        sum", "       \
    \ val sum = 0L\n        for (i <- 0 until lst.size) {\n            if (i % 3 ==\
    \ 0) {\n                sum += lst(i)\n            } else if (i % 4 == 0) {\n\
    \                sum += lst(i) * lst(i)\n            } else {\n              \
    \  sum += lst(i) * lst(i) * lst(i)\n            }\n        }\n        return sum",
  "        val n = lst.length\n        val sum = 0L\n        val squares = mutable.ListBuffer[Long]()\n\
    \        val cubes = mutable.ListBuffer[Long]()\n        for(i <- 0 until n){\n\
    \            val index = i % 3\n            if(index == 0){\n                squares\
    \ += lst(i)\n            }\n            else if(index == 1){\n               \
    \ cubes += lst(i)\n            }\n        }\n        squares.foreach(x => sum\
    \ += x)\n        cubes.foreach(x => sum += x)\n        sum", "        var sum\
    \ = 0L\n        for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            val value = lst.apply(index)\n   \
    \         if(index % 3 == 0 || index % 4 == 0) {\n                sum += value\
    \ * value\n            }\n        }\n        return sum", "        val squares\
    \ = mutable.ListBuffer[Long]()\n        val cubes = mutable.ListBuffer[Long]()\n\
    \        lst.foreach{i => if (i % 3 == 0) squares += i * i else cubes += i * i\
    \ * i}\n        squares.sum + cubes.sum", "        var sum = 0L\n        var i\
    \ = 0\n        while (i < lst.size) {\n            if (i % 3 == 0) {\n       \
    \         sum += lst(i)\n            }\n            else if (i % 4 == 0) {\n \
    \               sum += lst(i)\n            }\n            else {\n           \
    \     sum += lst(i) * lst(i)\n            }\n            i += 1\n        }\n \
    \       return sum", "        val sum = 0L\n        for(i <- 0 until lst.size)\
    \ {\n            val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n \
    \           if(index != -1) {\n                sum += lst(index)\n           \
    \ }\n        }\n        return sum", "        var sum = 0\n        var count =\
    \ 0\n        for (i <- 0 until lst.size) {\n            if (i % 3 == 0) {\n  \
    \              sum += lst(i)\n                count += 1\n            } else if\
    \ (i % 4 == 0) {\n                sum += lst(i)\n                count += 1\n\
    \            } else {\n                sum += lst(i) * lst(i)\n              \
    \  count += 1\n            }\n        }\n        sum", "        val sum = 0L\n\
    \        for(i <- 0 until lst.size) {\n            val index = i / 3\n       \
    \     if(index % 3 == 0) {\n                sum += lst(i)\n            }\n   \
    \         else if(index % 4 == 0) {\n                sum += lst(i)\n         \
    \   }\n            else {\n                sum += lst(i) * lst(i)\n          \
    \  }\n        }\n        return sum", "        var sum = 0L\n        var i = 0\n\
    \        while (i < lst.size) {\n            if (lst(i) % 3 == 0 || lst(i) % 4\
    \ == 0) {\n                sum += lst(i)\n            }\n            i += 1\n\
    \        }\n        return sum", "        val squares = mutable.ListBuffer[Long]()\n\
    \        val cubes = mutable.ListBuffer[Long]()\n        for(i <- 0 until lst.size)\
    \ {\n            if((i mod 3) == 0) {\n                squares += lst(i)\n   \
    \         }\n            else if((i mod 4) == 0) {\n                cubes += lst(i)\n\
    \            }\n            else {\n                lst(i) = lst(i) * lst(i)\n\
    \            }\n        }\n        squares.sum", "        val sum = 0L\n     \
    \   for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x =>\
    \ x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n                sum\
    \ += lst(index)\n            }\n        }\n        sum", "        var sum = 0L\n\
    \        for(i <- 0 until lst.size) {\n            val index = i / 3\n       \
    \     val value = lst(i)\n            if(index % 3 == 0) {\n                sum\
    \ += value * value\n            }\n            if(index % 4 == 0) {\n        \
    \        sum += value * value * value\n            }\n        }\n        sum",
  "        val sum = 0L\n        val lst2 = lst.filter(_ % 3 == 0 || _ % 4 == 0)\n\
    \        lst2.foreach(x => sum += x * x)\n        sum", "        var sum = 0L\n\
    \        for(i <- 0 until lst.size) {\n            if(i % 3 == 0) {\n        \
    \        sum += lst(i)\n            }\n            if(i % 4 == 0) {\n        \
    \        sum += lst(i)\n            }\n        }\n        return sum", "     \
    \   val squares = lst.filter(_ % 3 == 0)\n        val cubes = lst.filter(_ % 4\
    \ == 0)\n        squares.foldLeft(0)((sum, element) => sum + element)\n      \
    \  cubes.foldLeft(0)((sum, element) => sum + element)", "        val squares =\
    \ mutable.ListBuffer[Long]()\n        val cubes = mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if((i %% 3) == 0) {\n     \
    \           squares += lst(i)\n            }\n            if((i %% 4) == 0) {\n\
    \                cubes += lst(i)\n            }\n        }\n        squares.sum",
  "        val squares = mutable.ListBuffer[Long]()\n        val cubes = mutable.ListBuffer[Long]()\n\
    \        lst.foreach{\n            i =>\n                if (i % 3 == 0) squares\
    \ += i\n                else if (i % 4 == 0) cubes += i\n                else\
    \ {\n                    squares -= i\n                    cubes -= i\n      \
    \          }\n        }\n        squares.sum", "        val sum = 0L\n       \
    \ for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x => x\
    \ % 3 == 0 || x % 4 == 0)\n            val square = if (index != -1) lst(index)\
    \ * lst(index) else 0\n            val cube = if (index != -1) lst(index) * lst(index)\
    \ * lst(index) else 0\n            sum += square\n            sum += cube\n  \
    \      }\n        sum", "        val squares = lst.filter(_ % 3 == 0).map(_ *\
    \ _)\n        val cubes = lst.filter(_ % 4 == 0).map(_ * _)\n        squares.sum\
    \ + cubes.sum", "        val sum = 0L\n        for(i <- 0 until lst.size) {\n\
    \            val index = lst.indexWhere(_ % 3 == 0 || _ % 4 == 0)\n          \
    \  val entry = lst(index)\n            if(index != -1) {\n                val\
    \ square = if (index%4 == 0) entry * entry else entry * entry * entry\n      \
    \          sum += square\n            }\n        }\n        sum", "        val\
    \ squares = lst.filter(x => x % 3 == 0).map(x => x * x)\n        val cubes = lst.filter(x\
    \ => x % 4 == 0).map(x => x * x * x)\n        squares.sum + cubes.sum", "    \
    \    val sum = 0L\n        lst.foreach(x => {\n            val index = x % 3\n\
    \            if (index == 0) sum += x\n            else if (index == 1) sum +=\
    \ x * x\n            else if (index == 2) sum += x * x * x\n        })\n     \
    \   sum", "        var sum = 0L\n        var count = 0L\n        for(i <- 0 until\
    \ lst.size) {\n            val square = lst(i) * lst(i)\n            val cube\
    \ = lst(i) * lst(i) * lst(i)\n            if(i % 3 == 0) {\n                sum\
    \ += square\n                count += 1\n            } else if(i % 4 == 0) {\n\
    \                sum += cube\n                count += 1\n            } else {\n\
    \                sum += square\n                count += 1\n            }\n  \
    \      }\n        sum", "        val result = mutable.ListBuffer.empty[Long]\n\
    \        for (i <- 0 until lst.size) {\n            if (i % 3 == 0) {\n      \
    \          result += lst(i)\n            } else if (i % 4 == 0) {\n          \
    \      result += lst(i)\n            } else {\n                result += lst(i)\
    \ * lst(i)\n            }\n        }\n        result.sum", "        val sum =\
    \ 0L\n        lst.foreach(i => {\n            if (i % 3 == 0) {\n            \
    \    sum += i * i\n            }\n            if (i % 4 == 0) {\n            \
    \    sum += i * i\n            }\n        })\n        return sum", "        var\
    \ sum = 0L\n        for(i <- 0 until lst.size) {\n            val index = i /\
    \ 3\n            if(index % 3 == 0) {\n                sum += lst(i) * lst(i)\n\
    \            }\n            else if(index % 4 == 0) {\n                sum +=\
    \ lst(i) * lst(i)\n            }\n            else {\n                sum += lst(i)\n\
    \            }\n        }\n        return sum", "        val sum = 0L\n      \
    \  val lst2 = lst.filter(_ % 3 == 0 || _ % 4 == 0)\n        lst2.foreach(x =>\
    \ sum += x * x)\n        sum", "        val sum = 0L\n        for(i <- 0 until\
    \ lst.size) {\n            val index = lst.indexWhere(x => x % 3 == 0 || x % 4\
    \ == 0)\n            val value = if (index != -1) lst(index) * lst(index) else\
    \ 0L\n            sum += value\n        }\n        sum", "        val sum = 0L\n\
    \        for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n              \
    \  val value = lst(index)\n                if(value % 3 == 0 || value % 4 == 0)\
    \ {\n                    sum += value * value\n                }\n           \
    \ }\n        }\n        return sum", "        val sum = 0L\n        lst.foreach(x\
    \ => {\n            if (x % 3 == 0) sum += x * x\n            if (x % 4 == 0)\
    \ sum += x * x\n        })\n        return sum", "        var sum = 0L\n     \
    \   for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x =>\
    \ x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n                sum\
    \ += lst(index)\n            }\n        }\n        return sum", "        val squares\
    \ = mutable.ListBuffer[Long]()\n        val cubes = mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(i % 3 == 0) {\n        \
    \        squares += lst(i)\n            }\n            if(i % 4 == 0) {\n    \
    \            cubes += lst(i)\n            }\n        }\n        squares.sum",
  "        val squares = mutable.ListBuffer[Long]()\n        val cubes = mutable.ListBuffer[Long]()\n\
    \        lst.foreach(x => {\n            if (x % 3 == 0) {\n                squares\
    \ += x\n            } else if (x % 4 == 0) {\n                cubes += x\n   \
    \         } else {\n                squares += x * x\n                cubes +=\
    \ x * x * x\n            }\n        })\n        squares.sum", "        val sum\
    \ = 0L\n        for (i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            if (index != -1) {\n             \
    \   sum += lst(index) * lst(index)\n            }\n        }\n        sum", " \
    \       var sum = 0L\n        for(i <- 0 until lst.size) {\n            val index\
    \ = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            val entry = lst(index)\n\
    \            if(index != -1) {\n                sum += entry * entry\n       \
    \     }\n        }\n        return sum", "        var sum = 0L\n        for(i\
    \ <- 0 until lst.size) {\n            if(i % 3 == 0) {\n                sum +=\
    \ lst(i)\n            }\n            if(i % 4 == 0) {\n                sum +=\
    \ lst(i)\n            }\n        }\n        return sum", "        val squares\
    \ = lst.filter(x => x % 3 == 0).map(x => x * x)\n        val cubes = lst.filter(x\
    \ => x % 4 == 0).map(x => x * x * x)\n        squares.sum + cubes.sum", "    \
    \    val squares = mutable.ListBuffer[Long]()\n        val cubes = mutable.ListBuffer[Long]()\n\
    \        lst.foreach(i => {\n            if (i % 3 == 0) {\n                squares\
    \ += i\n            } else if (i % 4 == 0) {\n                cubes += i\n   \
    \         } else {\n                squares += i * i\n                cubes +=\
    \ i * i * i\n            }\n        })\n        squares.sum", "        val result\
    \ = mutable.ListBuffer.empty[Long]\n        lst.foreach(x => {\n            if\
    \ (x % 3 == 0) result += x * x\n            if (x % 4 == 0) result += x * x\n\
    \            if (x % 3 != 0 && x % 4 != 0) result += x * x\n        })\n     \
    \   result.sum", "        val sum = 0L\n        for(i <- 0 until lst.size) {\n\
    \            val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n     \
    \       if(index != -1) {\n                sum += lst(index)\n            }\n\
    \        }\n        sum", "        var sum = 0\n        var count = 0\n      \
    \  for(i <- 0 until lst.size) {\n            if(i % 3 == 0 && i % 4 == 0) {\n\
    \                sum += lst(i)\n                count += 1\n            }\n  \
    \      }\n        if(count == 0) {\n            return 0\n        }\n        sum",
  "        val sum = 0\n        for(i <- 0 until lst.size) {\n            val index\
    \ = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            if(index != -1)\
    \ {\n                sum += lst(index)\n            }\n        }\n        sum",
  "        val sum = 0L\n        val sq = lst.map(x => if (x % 3 == 0) x * x else\
    \ x * x * x)\n        val cu = lst.map(x => if (x % 4 == 0) x * x else x * x *\
    \ x * x)\n        val sum = sq.sum + cu.sum\n        return sum", "        val\
    \ squares = lst.filter(_ % 3 == 0).map(_ * _)\n        val cubes = lst.filter(_\
    \ % 4 == 0).map(_ * _)\n        squares.sum + cubes.sum", "        val squares\
    \ = mutable.ListBuffer[Long]()\n        val cubes = mutable.ListBuffer[Long]()\n\
    \        lst.foreach{ x =>\n            if (x % 3 == 0) {\n                squares\
    \ += x\n            } else if (x % 4 == 0) {\n                cubes += x\n   \
    \         } else {\n                squares += x * x\n                cubes +=\
    \ x * x * x\n            }\n        }\n        squares.sum", "        val sum\
    \ = 0\n        for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n              \
    \  val square = lst(index) * lst(index)\n                sum += square\n     \
    \       }\n        }\n        sum", "        var sum = 0L\n        for (i <- 0\
    \ until lst.size) {\n            if (i % 3 == 0 || i % 4 == 0)\n             \
    \   sum += lst(i)\n        }\n        return sum", "        var sum = 0L\n   \
    \     var i = 0\n        while (i < lst.size) {\n            if (lst(i) % 3 ==\
    \ 0 || lst(i) % 4 == 0) {\n                sum += lst(i)\n            }\n    \
    \        i += 1\n        }\n        return sum", "        var sum = 0L\n     \
    \   var count = 0L\n        for (i <- 0 until lst.size) {\n            if (i %\
    \ 3 == 0 && i % 4 == 0) {\n                sum += lst(i)\n                count\
    \ += 1\n            } else if (i % 3 == 0) {\n                sum += lst(i)\n\
    \                count += 1\n            } else if (i % 4 == 0) {\n          \
    \      sum += lst(i)\n                count += 1\n            } else {\n     \
    \           sum += lst(i)\n            }\n        }\n        sum", "        var\
    \ sum = 0L\n        var square = 0L\n        var cube = 0L\n        var count\
    \ = 0L\n        for(i <- 0 until lst.size) {\n            if(i % 3 == 0) {\n \
    \               square += lst(i)\n                count += 1\n            }\n\
    \            else if(i % 4 == 0) {\n                cube += lst(i)\n         \
    \       count += 1\n            }\n            else {\n                sum +=\
    \ lst(i)\n                count += 1\n            }\n        }\n        sum",
  "        val squares = mutable.ListBuffer[Long]()\n        val cubes = mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        lst.foreach{i =>\n            if (i % 3 == 0) {\n\
    \                squares += i\n            } else if (i % 4 == 0) {\n        \
    \        cubes += i\n            } else {\n                sum += i\n        \
    \    }\n        }\n        squares.sum", "        var sum = 0L\n        var count\
    \ = 0L\n        var index = 0L\n        for(i <- 0 until lst.size) {\n       \
    \     sum += lst(i)\n            count += 1L\n            index += 1L\n      \
    \      if(index % 3 == 0L) {\n                sum += lst(i)\n                count\
    \ += 1L\n            }\n            if(index % 4 == 0L) {\n                sum\
    \ += lst(i)\n                count += 1L\n            }\n        }\n        sum",
  "        var sum = 0L\n        var i = 0\n        while (i < lst.size) {\n     \
    \       if (lst(i) % 3 == 0 || lst(i) % 4 == 0) sum += lst(i)\n            i +=\
    \ 1\n        }\n        return sum", "        var sum = 0L\n        var i = 0\n\
    \        while(i < lst.size) {\n            val x = lst(i)\n            val y\
    \ = lst(i+1)\n            val z = lst(i+2)\n            val a = if (x % 3 == 0)\
    \ x * x else x * x * x\n            val b = if (y % 4 == 0) y * y else y * y *\
    \ y\n            val c = if (z % 3 == 0) z * z else z * z * z\n            sum\
    \ += a + b + c\n            i += 3\n        }\n        sum", "        val sum\
    \ = 0L\n        lst.foreach{\n            x =>\n                val y = if (x\
    \ % 3 == 0) x * x else x * x * x\n                sum += y\n        }\n      \
    \  sum", "        val squares = lst.filter(_ % 3 == 0)\n        val cubes = lst.filter(_\
    \ % 4 == 0)\n        squares.sum + cubes.sum", "        var sum = 0\n        var\
    \ i = 0\n        while (i < lst.size) {\n            val x = lst(i)\n        \
    \    if (x % 3 == 0) {\n                sum += x * x\n            }\n        \
    \    else if (x % 4 == 0) {\n                sum += x * x\n            }\n   \
    \         else {\n                sum += x\n            }\n            i += 1\n\
    \        }\n        sum", "        val squares = mutable.ListBuffer[Long]()\n\
    \        val cubes = mutable.ListBuffer[Long]()\n        lst.foreach { x =>\n\
    \            if (x % 3 == 0) {\n                squares += x\n            } else\
    \ if (x % 4 == 0) {\n                cubes += x\n            } else {\n      \
    \          squares += x * x\n                cubes += x * x * x\n            }\n\
    \        }\n        squares.sum", "        var sum = 0\n        var count = 0\n\
    \        for (i <- 0 until lst.size) {\n            if (i % 3 == 0) {\n      \
    \          sum += lst(i)\n                count += 1\n            } else if (i\
    \ % 4 == 0) {\n                sum += lst(i)\n                count += 1\n   \
    \         } else {\n                sum += lst(i) * lst(i)\n                count\
    \ += 1\n            }\n        }\n        sum", "        val sum = 0L\n      \
    \  val lst2 = lst.filter(_ % 3 == 0 || _ % 4 == 0).map(_ * _)\n        lst.foreach(x\
    \ => sum += x)\n        lst.foreach(x => sum += x)\n        lst.foreach(x => sum\
    \ += x)\n        lst.foreach(x => sum += x)\n        lst.foreach(x => sum += x)\n\
    \        lst.foreach(x => sum += x)\n        lst.foreach(x => sum += x)\n    \
    \    lst.foreach(x => sum += x)\n        lst.foreach(x => sum += x)\n        lst.foreach(x\
    \ => sum += x)\n        lst.foreach(x => sum += x)\n        lst.foreach(x => sum\
    \ += x)\n        lst.foreach(x => sum += x)\n        lst.foreach(x => sum += x)\n\
    \        lst.foreach(x => sum += x)\n        lst.foreach(x => sum += x)\n    \
    \    lst.foreach(x => sum += x)\n        lst.foreach(x => sum += x)\n        lst.foreach(x\
    \ => sum += x)\n        lst.foreach(x => sum += x)\n        lst.foreach(x => sum\
    \ += x)\n        lst.foreach(x => sum += x)\n        lst.foreach(x => sum += x)\n\
    \        lst.foreach(x => sum += x)\n        lst.foreach(x => sum += x)\n    \
    \    lst.foreach(x => sum += x)\n        lst.foreach(x => sum += x)\n        lst.foreach(x\
    \ => sum += x)\n        lst.foreach(x => sum += x)\n        lst.foreach(x => sum\
    \ += x)\n        lst.foreach(x => sum += x)\n        lst.foreach(x => sum += x)\n\
    \        lst.foreach(x => sum += x)\n        lst.foreach(x => sum += x)\n    \
    \    lst.foreach(x => sum += x)\n        lst.foreach(x => sum += x)\n        lst.foreach(x\
    \ => sum += x)\n        lst.foreach(x => sum += x)\n        lst.foreach(x => sum\
    \ += x)\n        lst.foreach(x => sum += x)\n        lst.foreach(x => sum += x)\n\
    \        lst.foreach(x => sum += x)\n        lst.foreach(x => sum += x)\n    \
    \    lst.foreach(x => sum += x)\n        lst.foreach(x => sum += x)\n        lst.foreach(x\
    \ => sum += x)\n        lst.foreach(x => sum += x)\n        lst.foreach(x => sum\
    \ += x)\n        lst.foreach(x => sum += x)\n        lst.foreach(x => sum += x)\n\
    \        lst.foreach(x => sum += x)\n        lst.foreach(x => sum += x)\n    \
    \    lst.foreach(x => sum += x)\n        lst.foreach(x => sum += ", "        var\
    \ sum = 0L\n        for (i <- 0 until lst.size) {\n            if (i % 3 == 0)\
    \ {\n                sum += lst(i)\n            }\n            else if (i % 4\
    \ == 0) {\n                sum += lst(i)\n            }\n            else {\n\
    \                sum += lst(i) * lst(i)\n            }\n        }\n        return\
    \ sum", "        val sum = 0L\n        for (i <- 0 until lst.size) {\n       \
    \     if (i % 3 == 0) {\n                sum += lst(i)\n            } else if\
    \ (i % 4 == 0) {\n                sum += lst(i)\n            } else {\n      \
    \          sum += lst(i) * lst(i)\n            }\n        }\n        return sum",
  "        val squares = lst.filter(_ % 3 == 0).map(_ * _)\n        val cubes = lst.filter(_\
    \ % 4 == 0).map(_ * _)\n        squares.sum + cubes.sum", "        val squares\
    \ = lst.filter(_ % 3 == 0).map(_ * _)\n        val cubes = lst.filter(_ % 4 ==\
    \ 0).map(_ * _)\n        squares.sum + cubes.sum", "        val squares = lst.map(x\
    \ => if (x % 3 == 0) x * x else x * x * x)\n        val cubes = lst.map(x => if\
    \ (x % 4 == 0) x * x else x * x * x * x)\n        squares.sum + cubes.sum", " \
    \       val squares = mutable.ListBuffer[Long]()\n        val cubes = mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            val index = i / 3\n       \
    \     if(index % 3 == 0) {\n                squares += lst(i)\n            }\n\
    \            else if(index % 4 == 0) {\n                cubes += lst(i)\n    \
    \        }\n            else {\n                lst(i) = lst(i) * lst(i)\n   \
    \         }\n        }\n        squares.sum", "        val squares = mutable.ListBuffer[Long]()\n\
    \        val cubes = mutable.ListBuffer[Long]()\n        lst.foreach { i =>\n\
    \            if (i % 3 == 0) {\n                squares += i\n            } else\
    \ if (i % 4 == 0) {\n                cubes += i\n            } else {\n      \
    \          squares += i * i\n                cubes += i * i * i\n            }\n\
    \        }\n        squares.sum", "        var sum = 0L\n        var i = 0\n \
    \       while(i < lst.size) {\n            val num = lst(i)\n            val mod\
    \ = num % 3\n            if(mod == 0) {\n                sum += num\n        \
    \        i += 1\n            } else {\n                val mod = num % 4\n   \
    \             if(mod == 0) {\n                    sum += num\n               \
    \     i += 1\n                } else {\n                    sum += num * num\n\
    \                    i += 1\n                }\n            }\n        }\n   \
    \     return sum", "        val sum = 0L\n        for(i <- 0 until lst.size) {\n\
    \            val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n     \
    \       if(index != -1) {\n                sum += lst(index)\n            }\n\
    \        }\n        return sum", "        val lst2 = lst.filter(_ % 3 == 0 ||\
    \ _ % 4 == 0)\n        val lst3 = lst2.filter(_ % 3 == 0)\n        val lst4 =\
    \ lst3.filter(_ % 4 == 0)\n        val lst5 = lst4.filter(_ % 5 == 0)\n      \
    \  lst5.foldLeft(0)((a, b) => a + b)", "        val squares = mutable.ListBuffer[Long]()\n\
    \        val cubes = mutable.ListBuffer[Long]()\n        lst.foreach { x =>\n\
    \            if (x % 3 == 0) {\n                squares += x\n            } else\
    \ if (x % 4 == 0) {\n                cubes += x\n            } else {\n      \
    \          squares += x * x\n                cubes += x * x * x\n            }\n\
    \        }\n        squares.sum", "        val sum = 0L\n        lst.foreach(i\
    \ => if (i % 3 == 0) sum += i * i else if (i % 4 == 0) sum += i * i * i else sum\
    \ += i)\n        sum", "        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val index = i / 3\n            if(index % 3 == 0) {\n       \
    \         sum += lst(i)\n            }\n            else if(index % 4 == 0) {\n\
    \                sum += lst(i)\n            }\n            else {\n          \
    \      sum += lst(i) * lst(i)\n            }\n        }\n        sum", "     \
    \   val squares = lst.filter(_ % 3 == 0)\n        val cubes = lst.filter(_ % 4\
    \ == 0)\n        val sums = squares.map(_ * _) + cubes.map(_ * _)\n        sums.sum",
  "        val sum = 0\n        val sq = lst.map(x => if (x % 3 == 0) x * x else x\
    \ * x * x)\n        val cu = lst.map(x => if (x % 4 == 0) x * x else x * x * x\
    \ * x)\n        val sum = sq.sum + cu.sum\n        return sum", "        val sum\
    \ = 0L\n        for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            val square = if (index != -1) lst(index)\
    \ * lst(index) else 0\n            val cube = if (index != -1) lst(index) * lst(index)\
    \ * lst(index) else 0\n            sum += square\n            sum += cube\n  \
    \      }\n        sum", "        val squares = lst.filter(_ % 3 == 0).map(_ *\
    \ _)\n        val cubes = lst.filter(_ % 4 == 0).map(_ * _)\n        squares.sum\
    \ + cubes.sum", "        val result = mutable.ListBuffer.empty[Long]\n       \
    \ lst.foreach(x => {\n            if (x % 3 == 0) result += x * x\n          \
    \  if (x % 4 == 0) result += x * x\n        })\n        result.sum", "       \
    \ val result = mutable.ListBuffer.empty[Long]\n        lst.foreach { x =>\n  \
    \          if (x % 3 == 0 && x % 4 == 0) result += x * x\n            if (x %\
    \ 3 == 0) result += x * x\n            if (x % 4 == 0) result += x * x\n     \
    \   }\n        result.sum", "        var sum = 0L\n        var i = 0\n       \
    \ while (i < lst.size) {\n            val x = lst(i)\n            if (x % 3 ==\
    \ 0 || x % 4 == 0) {\n                sum += x\n            }\n            i +=\
    \ 1\n        }\n        sum", "        val squares = lst.filter(_ % 3 == 0)\n\
    \        val cubes = lst.filter(_ % 4 == 0)\n        squares.sum + cubes.sum",
  "        val sum = 0L\n        for(i <- 0 until lst.size) {\n            val index\
    \ = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            if(index != -1)\
    \ {\n                val value = lst(index)\n                if(value % 3 == 0\
    \ || value % 4 == 0) {\n                    sum += value * value\n           \
    \     }\n            }\n        }\n        sum", "        val sum = 0L\n     \
    \   val squares = mutable.ListBuffer[Long]()\n        lst.foreach { x =>\n   \
    \         if (x % 3 == 0) {\n                squares += x * x\n            }\n\
    \            if (x % 4 == 0) {\n                squares += x * x\n           \
    \ }\n            if (x % 3 != 0 && x % 4 != 0) {\n                squares += x\n\
    \            }\n        }\n        squares.sum", "        val sum = 0L\n     \
    \   for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x =>\
    \ x % 3 == 0 || x % 4 == 0)\n            val square = if (index != -1) lst(index)\
    \ * lst(index) else 0\n            sum += square\n        }\n        sum", " \
    \       val squares = mutable.ListBuffer[Long]()\n        val cubes = mutable.ListBuffer[Long]()\n\
    \        lst.foreach(x => {\n            if (x % 3 == 0) {\n                squares\
    \ += x\n            } else if (x % 4 == 0) {\n                cubes += x\n   \
    \         } else {\n                squares += x * x\n                cubes +=\
    \ x * x * x\n            }\n        })\n        squares.sum", "        var sum\
    \ = 0L\n        var i = 0\n        while (i < lst.size) {\n            if (lst(i)\
    \ % 3 == 0) {\n                sum += lst(i)\n                i += 1\n       \
    \     } else if (lst(i) % 4 == 0) {\n                sum += lst(i)\n         \
    \       i += 1\n            } else {\n                sum += lst(i) * lst(i)\n\
    \                i += 1\n            }\n        }\n        return sum", "    \
    \    val squares = lst.filter(_ % 3 == 0)\n        val cubes = lst.filter(_ %\
    \ 4 == 0)\n        squares.foldLeft(0)(_ + _)", "        val sum = 0L\n      \
    \  for(i <- 0 until lst.size) {\n            val index = i / 3\n            val\
    \ value = lst(i)\n            if(index % 3 == 0) {\n                sum += value\
    \ * value\n            } else if(index % 4 == 0) {\n                sum += value\
    \ * value * value\n            } else {\n                sum += value\n      \
    \      }\n        }\n        return sum", "        val squares = lst.map(x =>\
    \ if (x % 3 == 0) x * x else x * x * x)\n        val cubes = lst.map(x => if (x\
    \ % 4 == 0) x * x * x else x * x * x * x)\n        squares.sum + cubes.sum", " \
    \       val squares = mutable.ListBuffer[Long]()\n        val cubes = mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        lst.foreach { i =>\n            if (i % 3 == 0)\
    \ {\n                squares += i\n            }\n            else if (i % 4 ==\
    \ 0) {\n                cubes += i\n            }\n            else {\n      \
    \          sum += i\n            }\n        }\n        squares.sum", "       \
    \ var sum = 0L\n        var count = 0L\n        for(i <- 0 until lst.size) {\n\
    \            if((i %% 3) == 0) {\n                sum += lst(i)\n            \
    \    count += 1\n            }\n            if((i %% 4) == 0) {\n            \
    \    sum += lst(i)\n                count += 1\n            }\n        }\n   \
    \     if(count == 0) {\n            return 0\n        }\n        return sum",
  "        val sum = 0L\n        for(i <- 0 until lst.size) {\n            val index\
    \ = i / 3\n            if(index % 3 == 0) {\n                sum += lst(i)\n \
    \           }\n            else if(index % 4 == 0) {\n                sum += lst(i)\n\
    \            }\n            else {\n                sum += lst(i) * lst(i)\n \
    \           }\n        }\n        return sum", "        var sum = 0L\n       \
    \ var index = 0L\n        for(i <- 0 until lst.size) {\n            val isMultipleOf3\
    \ = index % 3 == 0\n            val isMultipleOf4 = index % 4 == 0\n         \
    \   if(isMultipleOf3 && isMultipleOf4) {\n                sum += lst(i)\n    \
    \        } else if(isMultipleOf3) {\n                sum += lst(i) * lst(i)\n\
    \            } else if(isMultipleOf4) {\n                sum += lst(i) * lst(i)\
    \ * lst(i)\n            } else {\n                sum += lst(i)\n            }\n\
    \            index += 1\n        }\n        return sum", "        val sum = 0L\n\
    \        for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n              \
    \  val value = lst(index)\n                if(value % 3 == 0 || value % 4 == 0)\
    \ {\n                    val newValue = value * value\n                    sum\
    \ += newValue\n                }\n            }\n        }\n        sum", "  \
    \      var sum = 0L\n        var square = 0L\n        var cube = 0L\n        var\
    \ i = 0\n        for(i <- 0 until lst.size) {\n            if((i % 3) == 0) {\n\
    \                square = lst(i)\n            }\n            else if((i % 4) ==\
    \ 0) {\n                cube = lst(i)\n            }\n            else {\n   \
    \             lst(i) = lst(i) * lst(i)\n                sum += lst(i)\n      \
    \      }\n        }\n        sum", "        var sum = 0L\n        var count =\
    \ 0L\n        for(i <- 0 until lst.size) {\n            val index = i / 3\n  \
    \          val value = lst(i)\n            if(index == 0 || index == 1) {\n  \
    \              sum += value\n                count += 1\n            } else if(index\
    \ == 2 || index == 3) {\n                sum += value * value\n              \
    \  count += 1\n            }\n        }\n        sum", "        val sum = 0L\n\
    \        for (i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            if (index != -1) {\n             \
    \   sum += lst(index) * lst(index)\n            }\n        }\n        return sum",
  "        var sum = 0L\n        var count = 0L\n        for(i <- 0 until lst.size)\
    \ {\n            val square = if (lst(i) % 3 == 0) lst(i) * lst(i) else lst(i)\
    \ * lst(i) * lst(i)\n            val cube = if (lst(i) % 4 == 0) lst(i) * lst(i)\
    \ * lst(i) else lst(i) * lst(i) * lst(i) * lst(i)\n            sum += square\n\
    \            count += 1\n        }\n        sum", "        val n = lst.size\n\
    \        val sum = 0L\n        for(i <- 0 until n) {\n            val index =\
    \ i % 3\n            val square = if (index == 0) lst(i) * lst(i) else lst(i)\
    \ * lst(i) * lst(i)\n            val cube = if (index == 0) lst(i) * lst(i) *\
    \ lst(i) else lst(i) * lst(i) * lst(i) * lst(i)\n            sum += square\n \
    \           sum += cube\n        }\n        return sum", "        val squares\
    \ = mutable.ListBuffer.empty[Long]\n        val cubes = mutable.ListBuffer.empty[Long]\n\
    \        for(i <- 0 until lst.size) {\n            if((i %% 3) == 0) {\n     \
    \           squares += lst(i)\n            }\n            if((i %% 4) == 0) {\n\
    \                cubes += lst(i)\n            }\n        }\n        squares.sum",
  "        val squares = lst.filter(_ % 3 == 0).map(_ * _)\n        val cubes = lst.filter(_\
    \ % 4 == 0).map(_ * _)\n        squares.sum + cubes.sum", "        val sum = 0L\n\
    \        for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            val square = if (index != -1) lst(index)\
    \ * lst(index) else 0\n            val cube = if (index != -1) lst(index) * lst(index)\
    \ * lst(index) else 0\n            sum += square\n            sum += cube\n  \
    \      }\n        sum", "        val squares = lst.filter(_ % 3 == 0)\n      \
    \  val cubes = lst.filter(_ % 4 == 0)\n        squares.foldLeft(0)((sum, element)\
    \ => sum + element)\n        cubes.foldLeft(0)((sum, element) => sum + element)",
  "        var sum = 0\n        var index = 0\n        var temp = 0\n        for(i\
    \ <- 0 until lst.size) {\n            if(i % 3 == 0) {\n                temp =\
    \ lst(i)\n                sum += temp * temp\n                index += 3\n   \
    \         }\n            if(i % 4 == 0) {\n                temp = lst(i)\n   \
    \             sum += temp * temp\n                index += 4\n            }\n\
    \            else {\n                sum += lst(i)\n                index += 3\n\
    \            }\n        }\n        return sum", "        var sum = 0L\n      \
    \  var i = 0\n        while(i < lst.size) {\n            val index = lst.size\
    \ - i - 1\n            val entry = lst(index)\n            if(index % 3 == 0)\
    \ {\n                sum += entry\n            }\n            if(index % 4 ==\
    \ 0) {\n                sum += entry\n            }\n            i += 1\n    \
    \    }\n        return sum", "        val squares = mutable.ListBuffer[Long]()\n\
    \        val cubes = mutable.ListBuffer[Long]()\n        lst.foreach(x => {\n\
    \            if (x % 3 == 0) {\n                squares += x\n            } else\
    \ if (x % 4 == 0) {\n                cubes += x\n            } else {\n      \
    \          squares += x * x\n                cubes += x * x * x\n            }\n\
    \        })\n        squares.sum", "        val squares = lst.filter(x => x %\
    \ 3 == 0).map(x => x * x)\n        val cubes = lst.filter(x => x % 4 == 0).map(x\
    \ => x * x)\n        squares.sum + cubes.sum", "        val sum = 0L\n       \
    \ val squares = mutable.ListBuffer[Long]()\n        for(i <- 0 until lst.size)\
    \ {\n            val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n \
    \           if(index != -1) {\n                squares += lst(index)\n       \
    \     }\n        }\n        squares.foreach(x => sum += x)\n        sum", "  \
    \      val sum = 0L\n        for(i <- 0 until lst.size) {\n            val index\
    \ = i / 3\n            val value = lst(i)\n            if(index == 0 && value\
    \ == 0) continue\n            if(index == 1 && value == 0) continue\n        \
    \    if(index == 2 && value == 0) continue\n            if(index == 3 && value\
    \ == 0) continue\n            if(index == 0 && value == 0) continue\n        \
    \    if(index == 1 && value == 0) continue\n            if(index == 2 && value\
    \ == 0) continue\n            if(index == 3 && value == 0) continue\n        \
    \    if(index == 0 && value == 0) continue\n            if(index == 1 && value\
    \ == 0) continue\n            if(index == 2 && value == 0) continue\n        \
    \    if(index == 3 && value == 0) continue\n            if(index == 0 && value\
    \ == 0) continue\n            if(index == 1 && value == 0) continue\n        \
    \    if(index == 2 && value == 0) continue\n            if(index == 3 && value\
    \ == 0) continue\n            if(index == 0 && value == 0) continue\n        \
    \    if(index == 1 && value == 0) continue\n            if(index == 2 && value\
    \ == 0) continue\n            if(index == 3 && value == 0) continue\n        \
    \    if(index == 0 && value == 0) continue\n            if(index == 1 && value\
    \ == 0) continue\n            if(index == 2 && value == 0) continue\n        \
    \    if(index == 3 && value == 0) continue\n            if(index == 0 && value\
    \ == 0) continue\n            if(index == 1 && value == 0) continue\n        \
    \    if(index == 2 && value == 0) continue\n            if(index == 3 && value\
    \ == 0) continue\n            if(index == 0 && value == 0) continue\n        \
    \    if(index == 1 && value == 0) continue\n            if(index == 2 && value\
    \ == 0) continue\n            if(index == 3 && value == 0) continue\n        \
    \    if(index == 0 && value == 0) continue\n            if(index == 1 && value\
    \ == 0) continue\n            if(index == 2 && value == 0) continue\n        \
    \    if(index == 3 && value == 0) continue\n            if(index == 0 && value\
    \ == 0) continue\n            if(index == 1 && value == 0) continue\n        \
    \    if(index == 2 && value == 0) continue\n            if(index == 3 && value\
    \ == 0) continue\n            if(index == 0 && value == 0) continue\n        \
    \    if(index == 1 && value == 0) continue\n            if(index == 2 && value\
    \ == 0) continue\n            if(index == 3 && value == 0) continue\n        \
    \    if(index == 0 && value == 0) continue\n            if(index == 1 && value\
    \ == 0) continue\n            if(index == 2 && value == 0) continue\n        \
    \    if(index == 3 && value == 0) continue\n            if(index == 0 && value\
    \ == 0) continue\n            if(index == 1 && value == 0) continue\n        \
    \    if(index == 2 && value == 0) continue\n            if(index == 3 && value\
    \ == 0) continue\n            if(index == 0 && value == 0) continue\n        \
    \    if(index == 1 && value == 0) continue\n            if(index == 2 && value\
    \ == 0) continue\n            if(index == 3 && value == 0) continue\n        \
    \    if(index == 0 && value == 0) continue\n            if(index == 1 && value\
    \ == 0) continue\n            if(index == 2 && value == 0) continue\n        \
    \    if(index == 3 && value == 0) continue\n            if(index == ", "     \
    \   val squares = lst.filter(_ % 3 == 0).map(_ * _)\n        val cubes = lst.filter(_\
    \ % 4 == 0).map(_ * _)\n        squares.sum + cubes.sum", "        val result\
    \ = mutable.ListBuffer.empty[Long]\n        lst.foreach(x => {\n            if\
    \ (x % 3 == 0) {\n                result += x * x\n            } else if (x %\
    \ 4 == 0) {\n                result += x * x\n            } else {\n         \
    \       result += x\n            }\n        })\n        result.sum", "       \
    \ val lst2 = lst.filter(_ % 3 == 0 || _ % 4 == 0)\n        val lst3 = lst2.filter(_\
    \ % 3 == 0)\n        val lst4 = lst3.filter(_ % 4 == 0)\n        lst4.sum", " \
    \       var sum = 0L\n        var count = 0L\n        for(i <- 0 until lst.size)\
    \ {\n            val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n \
    \           if(index != -1) {\n                sum += lst(index)\n           \
    \     count += 1\n            }\n        }\n        sum * count", "        var\
    \ sum = 0L\n        var i = 0\n        while (i < lst.size) {\n            if\
    \ (lst(i) % 3 == 0) {\n                sum += lst(i) * lst(i)\n              \
    \  i += 1\n            } else if (lst(i) % 4 == 0) {\n                sum += lst(i)\
    \ * lst(i)\n                i += 1\n            } else {\n                sum\
    \ += lst(i)\n                i += 1\n            }\n        }\n        return\
    \ sum", "        var sum = 0L\n        var i = 0\n        while (i < lst.size)\
    \ {\n            if (lst(i) % 3 == 0 || lst(i) % 4 == 0) {\n                sum\
    \ += lst(i)\n            }\n            i += 1\n        }\n        return sum",
  "        val sum = 0L\n        lst.foreach(x => {\n            if (x % 3 == 0) {\n\
    \                sum += x * x\n            } else if (x % 4 == 0) {\n        \
    \        sum += x * x\n            } else {\n                sum += x\n      \
    \      }\n        })\n        return sum", "        val squares = lst.filter(_\
    \ % 3 == 0)\n        val cubes = lst.filter(_ % 4 == 0)\n        squares.sum +\
    \ cubes.sum", "        val squares = lst.filter(_ % 3 == 0)\n        val cubes\
    \ = lst.filter(_ % 4 == 0)\n        val sums = squares.map(x => x * x).sum\n \
    \       val sumCubes = cubes.map(x => x * x).sum\n        sums + sumCubes", " \
    \       var sum = 0\n        for (i <- 0 until lst.size) {\n            if (i\
    \ % 3 == 0) {\n                sum += lst(i)\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst(i)\n            } else {\n                sum\
    \ += lst(i) * lst(i)\n            }\n        }\n        return sum", "       \
    \ val sum = 0L\n        lst.foreach(x => {\n            if (x % 3 == 0) {\n  \
    \              sum += x * x\n            }\n            if (x % 4 == 0) {\n  \
    \              sum += x * x\n            }\n        })\n        return sum", " \
    \       var sum = 0L\n        var count = 0L\n        for(i <- 0 until lst.size)\
    \ {\n            if(i % 3 == 0) {\n                sum += lst(i)\n           \
    \     count += 1\n            } else if(i % 4 == 0) {\n                sum +=\
    \ lst(i)\n                count += 1\n            } else {\n                lst(i)\
    \ = lst(i) * lst(i)\n                count += 1\n            }\n        }\n  \
    \      sum", "        var sum = 0L\n        for(i <- 0 until lst.size) {\n   \
    \         val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n        \
    \    if(index != -1) {\n                sum += lst(index)\n            }\n   \
    \     }\n        sum", "        val result = mutable.ListBuffer[Long]()\n    \
    \    lst.foreach(x => {\n            if (x % 3 == 0) {\n                result\
    \ += x * x\n            } else if (x % 4 == 0) {\n                result += x\
    \ * x\n            } else {\n                result += x\n            }\n    \
    \    })\n        result.sum", "        val sum = 0\n        for (i <- 0 until\
    \ lst.size) {\n            if (i % 3 == 0) {\n                sum += lst(i)\n\
    \            } else if (i % 4 == 0) {\n                sum += lst(i)\n       \
    \     } else {\n                sum += lst(i) * lst(i)\n            }\n      \
    \  }\n        return sum", "        val sum = 0L\n        for(i <- 0 until lst.size)\
    \ {\n            val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n \
    \           if(index != -1) {\n                val value = lst(index)\n      \
    \          if(value % 3 == 0 || value % 4 == 0) {\n                    sum +=\
    \ value\n                }\n            }\n        }\n        return sum", " \
    \       val sum = 0\n        val lst2 = lst.filter(_ % 3 == 0 || _ % 4 == 0).map(_\
    \ * _)\n        lst2.foreach(x => sum += x)\n        sum", "        val squares\
    \ = mutable.ListBuffer[Long]()\n        val cubes = mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i<- 0 until lst.size) {\n            if (i\
    \ % 3 == 0) {\n                squares += lst(i)\n            } else if (i % 4\
    \ == 0) {\n                cubes += lst(i)\n            } else {\n           \
    \     sum += lst(i)\n            }\n        }\n        sum + squares.sum + cubes.sum",
  "        val sum = 0L\n        lst.foreach(i => {\n            if (i % 3 == 0) sum\
    \ += i * i\n            if (i % 4 == 0) sum += i * i\n        })\n        sum",
  "        val sum = 0L\n        for (i <- 0 until lst.size) {\n            val index\
    \ = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            if (index != -1)\
    \ {\n                sum += lst(index)\n            }\n        }\n        return\
    \ sum", "        val sum = 0L\n        lst.foreach(x => {\n            if (x %\
    \ 3 == 0) {\n                sum += x * x\n            }\n            else if\
    \ (x % 4 == 0) {\n                sum += x * x\n            }\n            else\
    \ {\n                sum += x\n            }\n        })\n        return sum",
  "        val squares = mutable.ListBuffer[Long]()\n        val cubes = mutable.ListBuffer[Long]()\n\
    \        lst.foreach{x =>\n            if (x % 3 == 0) {\n                squares\
    \ += x\n            } else if (x % 4 == 0) {\n                cubes += x\n   \
    \         } else {\n                squares += x * x\n                cubes +=\
    \ x * x * x\n            }\n        }\n        squares.sum", "        val squares\
    \ = mutable.ListBuffer[Long]()\n        val cubes = mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        lst.foreach { x =>\n            if (x % 3 == 0)\
    \ {\n                squares += x\n            } else if (x % 4 == 0) {\n    \
    \            cubes += x\n            } else {\n                sum += x\n    \
    \        }\n        }\n        squares.sum", "        var sum = 0L\n        for(i\
    \ <- 0 until lst.size) {\n            val index = lst.indexWhere(x => x % 3 ==\
    \ 0 || x % 4 == 0)\n            if(index != -1) {\n                sum += lst(index)\n\
    \            }\n        }\n        return sum", "        val sum = 0L\n      \
    \  for(i <- 0 until lst.size) {\n            val index = i / 3\n            val\
    \ value = lst(i)\n            if(index == 0) sum += value\n            else if(index\
    \ == 1) sum += value * value\n            else if(index == 2) sum += value * value\
    \ * value\n            else sum += value * value * value * value\n        }\n\
    \        return sum", "        val squares = mutable.ListBuffer[Long]()\n    \
    \    val cubes = mutable.ListBuffer[Long]()\n        lst.foreach{ i =>\n     \
    \       if (i % 3 == 0) {\n                squares += i\n            } else if\
    \ (i % 4 == 0) {\n                cubes += i\n            } else {\n         \
    \       squares += i * i\n                cubes += i * i * i\n            }\n\
    \        }\n        squares.sum", "        val squares = mutable.ListBuffer[Long]()\n\
    \        val cubes = mutable.ListBuffer[Long]()\n        lst.foreach { x =>\n\
    \            if (x % 3 == 0) {\n                squares += x\n            } else\
    \ if (x % 4 == 0) {\n                cubes += x\n            } else {\n      \
    \          squares += x * x\n                cubes += x * x * x\n            }\n\
    \        }\n        squares.sum", "        val squares = mutable.ListBuffer[Long]()\n\
    \        val cubes = mutable.ListBuffer[Long]()\n        lst.foreach{\n      \
    \      x => {\n                if (x % 3 == 0) {\n                    squares\
    \ += x\n                }\n                if (x % 4 == 0) {\n               \
    \     cubes += x\n                }\n            }\n        }\n        squares.sum",
  "        var sum = 0L\n        var i = 0\n        while (i < lst.size) {\n     \
    \       if (lst(i) % 3 == 0 || lst(i) % 4 == 0) {\n                sum += lst(i)\n\
    \            }\n            i += 1\n        }\n        return sum", "        var\
    \ sum = 0L\n        var i = 0\n        while (i < lst.size) {\n            val\
    \ x = lst(i)\n            if (x % 3 == 0 || x % 4 == 0) {\n                sum\
    \ += x\n            }\n            i += 1\n        }\n        return sum", " \
    \       val sum = 0L\n        for (i <- 0 until lst.size) {\n            if (lst(i)\
    \ % 3 == 0) {\n                sum += lst(i)\n            }\n            else\
    \ if (lst(i) % 4 == 0) {\n                sum += lst(i)\n            }\n     \
    \       else {\n                sum += lst(i) * lst(i)\n            }\n      \
    \  }\n        return sum", "        val sum = 0L\n        for (i <- 0 until lst.size)\
    \ {\n            if (i % 3 == 0 || i % 4 == 0) {\n                sum += lst(i)\n\
    \            }\n        }\n        return sum", "        val result = mutable.ListBuffer.empty[Long]\n\
    \        lst.foreach { x =>\n            if (x % 3 == 0) {\n                result\
    \ += x * x\n            } else if (x % 4 == 0) {\n                result += x\
    \ * x\n            } else {\n                result += x\n            }\n    \
    \    }\n        result.sum", "        var sum = 0L\n        var count = 0L\n \
    \       var temp = 0L\n        for(i <- 0 until lst.size) {\n            temp\
    \ = lst(i)\n            if(i % 3 == 0) {\n                temp = temp * temp\n\
    \                sum = sum + temp\n                count = count + 1\n       \
    \     }\n            else if(i % 4 == 0) {\n                temp = temp * temp\n\
    \                sum = sum + temp\n                count = count + 1\n       \
    \     }\n            else {\n                sum = sum + temp\n              \
    \  count = count + 1\n            }\n        }\n        sum", "        var sum\
    \ = 0L\n        var index = 0\n        for(i <- 0 until lst.size) {\n        \
    \    if(index % 3 == 0) {\n                sum += lst(i)\n            }\n    \
    \        if(index % 4 == 0) {\n                sum += lst(i)\n            }\n\
    \            index += 1\n        }\n        return sum", "        val sum = 0L\n\
    \        for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n              \
    \  val value = lst(index)\n                if(value % 3 == 0 || value % 4 == 0)\
    \ {\n                    sum += value\n                }\n            }\n    \
    \    }\n        sum", "        var sum = 0L\n        for(i <- 0 until lst.size)\
    \ {\n            if(i % 3 == 0) {\n                sum += lst(i)\n           \
    \ }\n            if(i % 4 == 0) {\n                sum += lst(i)\n           \
    \ }\n        }\n        sum", "        val squares = mutable.ListBuffer[Long]()\n\
    \        val cubes = mutable.ListBuffer[Long]()\n        lst.foreach{i =>\n  \
    \          if (i % 3 == 0) {\n                squares += i\n            } else\
    \ if (i % 4 == 0) {\n                cubes += i\n            } else {\n      \
    \          squares += i * i\n                cubes += i * i * i\n            }\n\
    \        }\n        squares.sum", "        val sum = 0L\n        for(i <- 0 until\
    \ lst.size) {\n            val index = lst.indexWhere(x => x % 3 == 0 || x % 4\
    \ == 0)\n            if(index != -1) {\n                val square = lst(index)\
    \ * lst(index)\n                sum += square\n            }\n        }\n    \
    \    sum", "        var sum = 0L\n        var i = 0\n        while (i < lst.size)\
    \ {\n            if (lst(i) % 3 == 0) {\n                sum += lst(i)\n     \
    \       }\n            else if (lst(i) % 4 == 0) {\n                sum += lst(i)\n\
    \            }\n            else {\n                sum += lst(i) * lst(i)\n \
    \           }\n            i += 1\n        }\n        return sum", "        val\
    \ sum = 0L\n        val lst2 = lst.filter(_ % 3 == 0 || _ % 4 == 0).map(_ * _)\n\
    \        lst2.foreach(x => sum += x)\n        sum", "        val squares = mutable.ListBuffer[Long]()\n\
    \        val cubes = mutable.ListBuffer[Long]()\n        for(i <- 0 until lst.size)\
    \ {\n            if((i % 3) == 0) {\n                squares += lst(i)\n     \
    \       }\n            else if((i % 4) == 0) {\n                cubes += lst(i)\n\
    \            }\n            else {\n                lst(i)\n            }\n  \
    \      }\n        squares.sum", "        var sum = 0L\n        var index = 0\n\
    \        for(i <- 0 until lst.size) {\n            if(index % 3 == 0) {\n    \
    \            sum += lst(i)\n            }\n            if(index % 4 == 0) {\n\
    \                sum += lst(i)\n            }\n            index += 1\n      \
    \  }\n        return sum", "        val sum = 0L\n        lst.foreach(x => {\n\
    \            if (x % 3 == 0) {\n                sum += x * x\n            } else\
    \ if (x % 4 == 0) {\n                sum += x * x\n            } else {\n    \
    \            sum += x\n            }\n        })\n        sum", "        val result\
    \ = mutable.ListBuffer.empty[Long]\n        lst.foreach(x => {\n            if\
    \ (x % 3 == 0 && x % 4 == 0) result += x * x\n            if (x % 3 == 0) result\
    \ += x * x\n            if (x % 4 == 0) result += x * x\n        })\n        result.sum",
  "        val result = mutable.ListBuffer.empty[Long]\n        lst.foreach(x => {\n\
    \            if (x % 3 == 0) {\n                result += x * x\n            }\
    \ else if (x % 4 == 0) {\n                result += x * x\n            } else\
    \ {\n                result += x\n            }\n        })\n        result.sum",
  "        val sum = 0L\n        lst.foreach(x => {\n            if (x % 3 == 0) {\n\
    \                sum += x * x\n            } else if (x % 4 == 0) {\n        \
    \        sum += x * x\n            } else {\n                sum += x\n      \
    \      }\n        })\n        return sum", "        var sum = 0L\n        for(i\
    \ <- 0 until lst.size) {\n            val index = i / 3\n            val value\
    \ = lst(i)\n            if(index == 0) sum += value\n            else if(index\
    \ == 1) sum += value * value\n            else if(index == 2) sum += value * value\
    \ * value\n            else sum += value * value * value * value\n        }\n\
    \        sum", "        var sum = 0L\n        var i = 0\n        while (i < lst.size)\
    \ {\n            if (lst(i) % 3 == 0) {\n                sum += lst(i)\n     \
    \       }\n            else if (lst(i) % 4 == 0) {\n                sum += lst(i)\n\
    \            }\n            else {\n                sum += lst(i) * lst(i)\n \
    \           }\n            i += 1\n        }\n        return sum", "        val\
    \ squares = mutable.ListBuffer[Long]()\n        val cubes = mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        lst.foreach(x => {\n            if (x % 3 == 0)\
    \ {\n                squares += x\n            } else if (x % 4 == 0) {\n    \
    \            cubes += x\n            } else {\n                sum += x\n    \
    \        }\n        })\n        squares.sum", "        val squares = lst.filter(_\
    \ % 3 == 0)\n        val cubes = lst.filter(_ % 4 == 0)\n        squares.sum +\
    \ cubes.sum", "        var sum = 0L\n        for (i <- 0 until lst.size) {\n \
    \           if (i % 3 == 0) {\n                sum += lst(i)\n            } else\
    \ if (i % 4 == 0) {\n                sum += lst(i) * lst(i)\n            } else\
    \ {\n                sum += lst(i) * lst(i) * lst(i)\n            }\n        }\n\
    \        return sum", "        var sum = 0L\n        var count = 0L\n        lst.foreach{\n\
    \            x => {\n                if (x % 3 == 0L) {\n                    sum\
    \ += x * x\n                    count += 1L\n                }\n             \
    \   if (x % 4 == 0L) {\n                    sum += x * x\n                   \
    \ count += 1L\n                }\n            }\n        }\n        if (count\
    \ == 0L) {\n            return 0L\n        }\n        return sum", "        val\
    \ sum = 0L\n        val squares = mutable.ListBuffer[Long]()\n        lst.foreach{\n\
    \            x => \n                val index = math.floor(x/3)\n            \
    \    val isMultipleOf3 = index == math.floor(index/3)\n                val isMultipleOf4\
    \ = index == math.floor(index/4)\n                val isNotMultipleOf3 = index\
    \ != math.floor(index/3)\n                val isNotMultipleOf4 = index != math.floor(index/4)\n\
    \                if(isMultipleOf3 || isMultipleOf4){\n                    squares\
    \ += x*x\n                }\n                if(!isMultipleOf3 && !isMultipleOf4){\n\
    \                    sum += x\n                }\n        }\n        sum + squares.sum",
  "        val sum = 0L\n        lst.foreach(i => {\n            if (i % 3 == 0) {\n\
    \                sum += i * i\n            } else if (i % 4 == 0) {\n        \
    \        sum += i * i\n            } else {\n                sum += i\n      \
    \      }\n        })\n        return sum", "        var sum = 0L\n        var\
    \ i = 0\n        while (i < lst.size) {\n            if (lst(i) % 3 == 0 || lst(i)\
    \ % 4 == 0) {\n                sum += lst(i)\n            }\n            i +=\
    \ 1\n        }\n        return sum", "        val squares = mutable.ListBuffer[Long]()\n\
    \        val cubes = mutable.ListBuffer[Long]()\n        for(i <- 0 until lst.size)\
    \ {\n            if((i mod 3) == 0) {\n                squares += lst(i)\n   \
    \         }\n            if((i mod 4) == 0) {\n                cubes += lst(i)\n\
    \            }\n        }\n        squares.sum", "        val sum = 0L\n     \
    \   val lst2 = lst.filter(_ % 3 == 0 || _ % 4 == 0)\n        lst2.foreach(x =>\
    \ sum += x * x)\n        sum", "        val n = lst.length\n        val result\
    \ = mutable.ArrayBuffer.empty[Long]\n        var sum = 0L\n        for (i <- 0\
    \ until n) {\n            val index = i / 3\n            val value = lst(i)\n\
    \            if (index % 3 == 0) {\n                sum += value * value\n   \
    \         } else if (index % 4 == 0) {\n                sum += value * value *\
    \ value\n            } else {\n                sum += value\n            }\n \
    \       }\n        result.append(sum)\n        result.sum", "        val sum =\
    \ 0L\n        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_\
    \ % 2 != 0)\n        val evenSquares = even.map(_ * _)\n        val oddSquares\
    \ = odd.map(_ * _)\n        val sumEven = evenSquares.sum\n        val sumOdd\
    \ = oddSquares.sum\n        sum = sumEven + sumOdd\n        return sum", "   \
    \     val sum = 0L\n        for(i <- 0 until lst.size) {\n            val index\
    \ = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            if(index != -1)\
    \ {\n                sum += lst(index)\n            }\n        }\n        sum",
  "        val squares = lst.filter(_ % 3 == 0)\n        val cubes = lst.filter(_\
    \ % 4 == 0)\n        val sums = squares.map(_ * _) + cubes.map(_ * _)\n      \
    \  sums.sum", "        val squares = mutable.ListBuffer[Long]()\n        val cubes\
    \ = mutable.ListBuffer[Long]()\n        val sum = 0L\n        for (i <- 0 until\
    \ lst.size) {\n            if (i % 3 == 0) {\n                squares += lst(i)\n\
    \            } else if (i % 4 == 0) {\n                cubes += lst(i)\n     \
    \       } else {\n                sum += lst(i)\n            }\n        }\n  \
    \      sum + squares.sum + cubes.sum", "        val squares = mutable.ListBuffer.empty[Long]\n\
    \        val cubes = mutable.ListBuffer.empty[Long]\n        lst.foreach { i =>\n\
    \            if (i % 3 == 0) {\n                squares += i\n            } else\
    \ if (i % 4 == 0) {\n                cubes += i\n            } else {\n      \
    \          squares += i * i\n                cubes += i * i * i\n            }\n\
    \        }\n        squares.sum", "        val sum = 0L\n        val sq = lst.map(x\
    \ => if (x % 3 == 0) x * x else x * x * x)\n        val cu = lst.map(x => if (x\
    \ % 4 == 0) x * x else x * x * x * x)\n        val sum = sq.sum + cu.sum\n   \
    \     return sum", "        var sum = 0L\n        var i = 0\n        while (i\
    \ < lst.size) {\n            if (lst(i) % 3 == 0 || lst(i) % 4 == 0) {\n     \
    \           sum += lst(i)\n            }\n            i += 1\n        }\n    \
    \    return sum", "        val sum = 0\n        for(i <- 0 until lst.size) {\n\
    \            val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n     \
    \       if(index != -1) {\n                sum += lst(index)\n            }\n\
    \        }\n        sum"]
stop_tokens:
- "\n    }\n"
