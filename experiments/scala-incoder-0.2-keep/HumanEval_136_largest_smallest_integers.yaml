name: HumanEval_136_largest_smallest_integers
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function that returns a tuple (a, b), where 'a' is\n    // the\
  \ largest of negative integers, and 'b' is the smallest\n    // of positive integers\
  \ in a list.\n    // If there is no negative or positive integers, return them as\
  \ None.\n    // Examples:\n    // largest_smallest_integers([2, 4, 1, 3, 5, 7])\
  \ == (None, 1)\n    // largest_smallest_integers([]) == (None, None)\n    // largest_smallest_integers([0])\
  \ == (None, None)\n    def largestSmallestIntegers(lst : List[Long]) : Tuple2[Option[Long],\
  \ Option[Long]] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
  \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None), Some(1l))));\n\
  \    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong,\
  \ 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None), Some(1l))));\n\
  \    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
  \ 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n    assert(largestSmallestIntegers((List[Long](4l.toLong,\
  \ 5l.toLong, 3l.toLong, 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l,\
  \ 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong, 3l.toLong, 8l.toLong,\
  \ 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l, 2l)));\n\
  \    assert(largestSmallestIntegers((List[Long]())).equals((Some(None), Some(None))));\n\
  \    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
  \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
  \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
  \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
  \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
  \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
  \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l, 1l)));\n\
  \    }\n\n}\n"
completions: ["        val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_\
    \ > 0)\n        if (negative.isEmpty && positive.isEmpty) None else (Some(negative.max),\
    \ Some(positive.min))", "        val negatives = lst.filter(_ < 0)\n        val\
    \ positives = lst.filter(_ > 0)\n        if (negatives.isEmpty) (None, None)\n\
    \        else if (positives.isEmpty) (None, None)\n        else (Some(negatives.max),\
    \ Some(positives.min))", "        val minNegative = lst.minBy(_.toInt)\n     \
    \   val maxPositive = lst.maxBy(_.toInt)\n        (minNegative, maxPositive)",
  "        val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ >\
    \ 0)\n        if (negative.isEmpty && positive.isEmpty) None else (Option(negative.max),\
    \ Option(positive.min))", "        val negative = lst.filter(_ < 0)\n        val\
    \ positive = lst.filter(_ > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None else (Some(negative.max), Some(positive.min))", "        val negative =\
    \ lst.filter(x => x < 0)\n        val positive = lst.filter(x => x > 0)\n    \
    \    if (negative.isEmpty && positive.isEmpty) None else (Some(negative.max),\
    \ Some(positive.min))", "        val negative = lst.filter(x => x < 0)\n     \
    \   val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None else (Some(negative.max), Some(positive.min))", "        val negative =\
    \ lst.filter(x => x < 0)\n        val positive = lst.filter(x => x >= 0)\n   \
    \     if (negative.isEmpty && positive.isEmpty) {\n            (None, None)\n\
    \        } else if (negative.isEmpty) {\n            (None, positive.min)\n  \
    \      } else if (positive.isEmpty) {\n            (negative.max, None)\n    \
    \    } else {\n            (negative.max, positive.min)\n        }", "       \
    \ val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x =>\
    \ x >= 0)\n        if (negative.isEmpty && positive.isEmpty) None else (Some(negative.max),\
    \ Some(positive.min))", "        val negative = lst.filter(_ < 0)\n        val\
    \ positive = lst.filter(_ > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ {\n            (None, None)\n        } else if (negative.isEmpty) {\n      \
    \      (None, positive.min)\n        } else if (positive.isEmpty) {\n        \
    \    (negative.max, None)\n        } else {\n            (negative.max, positive.min)\n\
    \        }", "        val negative = lst.filter(x => x < 0)\n        val positive\
    \ = lst.filter(x => x >= 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None else (Option(negative.max), Option(positive.min))", "        val negative\
    \ = lst.filter(_ < 0)\n        val positive = lst.filter(_ > 0)\n        val maxNegative\
    \ = negative.max\n        val minPositive = positive.min\n        (maxNegative,\
    \ minPositive)", "        val negatives = lst.filter(_ < 0)\n        val positives\
    \ = lst.filter(_ >= 0)\n        if (negatives.isEmpty) (None, None)\n        else\
    \ if (positives.isEmpty) (None, None)\n        else (Some(negatives.max), Some(positives.min))",
  "        val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ >=\
    \ 0)\n        val maxNegative = negative.max\n        val minPositive = positive.min\n\
    \        (maxNegative, minPositive)", "        val negatives = lst.filter(x =>\
    \ x < 0)\n        val positives = lst.filter(x => x > 0)\n        if (negatives.isEmpty)\
    \ None\n        else if (positives.isEmpty) None\n        else (Some(negatives.max),\
    \ Some(positives.min))", "        val negative = lst.filter(_ < 0)\n        val\
    \ positive = lst.filter(_ > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None else (Some(negative.max), Some(positive.min))", "        val positive =\
    \ lst.filter(x => x >= 0)\n        val negative = lst.filter(x => x < 0)\n   \
    \     val positiveMinusNegative = positive diff negative\n        val positiveMinusNegativeMinusOne\
    \ = positiveMinusNegative diff (negative diff 1)\n        val positiveMinusNegativeMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOne diff (negativeMinusOne diff 1)\n        val\
    \ positiveMinusNegativeMinusOneMinusOneMinusOne = positiveMinusNegativeMinusOneMinusOne\
    \ diff (negativeMinusOneMinusOne diff 1)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOne diff (negativeMinusOneMinusOneMinusOne\
    \ diff 1)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOne diff (negativeMinusOneMinusOneMinusOneMinusOne\
    \ diff 1)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOne diff (negativeMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff 1)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne diff\
    \ (negativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne diff 1)\n        val\
    \ positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff (negativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne diff\
    \ 1)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff (negativeMinusOneMinusOneMinusOneMinusOne", "        val negatives = lst.filter(_\
    \ < 0)\n        val positives = lst.filter(_ > 0)\n        if (negatives.isEmpty)\
    \ (None, positives.min) else (Some(negatives.max), Some(positives.min))", "  \
    \      val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ >\
    \ 0)\n        if (negative.isEmpty && positive.isEmpty) None else (Option(negative.max),\
    \ Option(positive.min))", "        val negative = lst.filter(_ < 0)\n        val\
    \ positive = lst.filter(_ > 0)\n        if(negative.isEmpty && positive.isEmpty)\
    \ None else (Option(negative.max), Option(positive.min))", "        val negatives\
    \ = lst.filter(x => x < 0)\n        val positives = lst.filter(x => x >= 0)\n\
    \        if (negatives.isEmpty) \n            (None, Some(positives.min))\n  \
    \      else if (positives.isEmpty) \n            (Some(negatives.max), None)\n\
    \        else \n            (Some(negatives.max), Some(positives.min))", "   \
    \     val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ >\
    \ 0)\n        if (negative.isEmpty && positive.isEmpty)\n            (None, None)\n\
    \        else if (negative.isEmpty)\n            (None, positive.min)\n      \
    \  else if (positive.isEmpty)\n            (negative.max, None)\n        else\n\
    \            (negative.max, positive.min)", "        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if(negative.isEmpty\
    \ && positive.isEmpty) None else (Option(negative.max), Option(positive.min))",
  "        val negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x\
    \ => x >= 0)\n        if (negatives.isEmpty) \n            (None, None)\n    \
    \    else if (positives.isEmpty) \n            (None, None)\n        else \n \
    \           (Some(negatives.max), Some(positives.min))", "        val negative\
    \ = lst.filter(x => x < 0L)\n        val positive = lst.filter(x => x >= 0L)\n\
    \        if (negative.isEmpty && positive.isEmpty) None else (Option(negative.max),\
    \ Option(positive.min))", "        val negatives = lst.filter(_ < 0)\n       \
    \ val positives = lst.filter(_ > 0)\n        if (negatives.isEmpty) {\n      \
    \      (None, None)\n        } else if (positives.isEmpty) {\n            (None,\
    \ Some(0))\n        } else {\n            val max = negatives.max\n          \
    \  val min = positives.min\n            (Some(max), Some(min))\n        }", " \
    \       val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x > 0)\n        if (negative.isEmpty && positive.isEmpty)\n            (None,\
    \ None)\n        else if (negative.isEmpty)\n            (Some(positive.min),\
    \ None)\n        else if (positive.isEmpty)\n            (None, Some(negative.min))\n\
    \        else\n            (Some(negative.min), Some(positive.min))", "      \
    \  val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x > 0)\n        if (negative.isEmpty && positive.isEmpty) {\n           \
    \ (None, None)\n        } else if (negative.isEmpty) {\n            (None, positive.min)\n\
    \        } else if (positive.isEmpty) {\n            (negative.max, None)\n  \
    \      } else {\n            (Some(negative.max), Some(positive.min))\n      \
    \  }", "        val positive = lst.filter(x => x >= 0)\n        val negative =\
    \ lst.filter(x => x < 0)\n        val positiveMin = positive.min\n        val\
    \ negativeMax = negative.max\n        (positiveMin, negativeMax)", "        val\
    \ negative = lst.filter(x => x < 0L)\n        val positive = lst.filter(x => x\
    \ >= 0L)\n        if (negative.isEmpty && positive.isEmpty)\n            (None,\
    \ None)\n        else if (negative.isEmpty)\n            (Some(0L), Some(positive.min))\n\
    \        else if (positive.isEmpty)\n            (Some(negative.max), Some(0L))\n\
    \        else\n            (Some(negative.max), Some(positive.min))", "      \
    \  val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ > 0)\n\
    \        val max = negative.max\n        val min = positive.min\n        (max,\
    \ min) match {\n            case (Some(max), Some(min)) => (Some(max), Some(min))\n\
    \            case _ => (None, None)\n        }", "        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Option(negative.max), Option(positive.min))",
  "        val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x > 0)\n        if (negative.isEmpty && positive.isEmpty) None else (Option(negative.max),\
    \ Option(positive.min))", "        val maxNegative = lst.filter(_ < 0)\n     \
    \   val minPositive = lst.filter(_ > 0)\n        if (maxNegative.isEmpty && minPositive.isEmpty)\
    \ None\n        else if (maxNegative.isEmpty) Some(minPositive.max)\n        else\
    \ if (minPositive.isEmpty) Some(maxNegative.min)\n        else (Some(maxNegative.max),\
    \ Some(minPositive.min))", "        val negative = lst.filter(x => x < 0)\n  \
    \      val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty &&\
    \ positive.isEmpty) None else (Option(negative.max), Option(positive.min))", " \
    \       val negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x\
    \ => x >= 0)\n        if (negatives.isEmpty) None\n        else if (positives.isEmpty)\
    \ None\n        else (Some(negatives.max), Some(positives.min))", "        val\
    \ negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ > 0)\n   \
    \     if (negative.isEmpty && positive.isEmpty) None else (Some(negative.max),\
    \ Some(positive.min))", "        val negative = lst.filter(_ < 0)\n        val\
    \ positive = lst.filter(_ > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None else (Option(negative.max), Option(positive.min))", "        val negatives\
    \ = lst.filter(x => x < 0)\n        val positives = lst.filter(x => x >= 0)\n\
    \        if (negatives.isEmpty) (None, None)\n        else if (positives.isEmpty)\
    \ (None, None)\n        else (Some(negatives.max), Some(positives.min))", "  \
    \      val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x > 0)\n        if (negative.isEmpty && positive.isEmpty) None else (Some(negative.max),\
    \ Some(positive.min))", "        val negative = lst.filter(x => x < 0)\n     \
    \   val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None else (Some(negative.max), Some(positive.min))", "        val negatives\
    \ = lst.filter(_ < 0)\n        val positives = lst.filter(_ > 0)\n        if (negatives.isEmpty)\
    \ None\n        else if (positives.isEmpty) None\n        else (Some(negatives.max),\
    \ Some(positives.min))", "        val negative = lst.filter(x => x < 0)\n    \
    \    val positive = lst.filter(x => x >= 0)\n        if(negative.isEmpty) None\
    \ else Some(negative.max)\n        if(positive.isEmpty) None else Some(positive.min)",
  "        val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x >= 0)\n        if (negative.isEmpty && positive.isEmpty) None else (Some(negative.max),\
    \ Some(positive.min))", "        val negative = lst.filter(_ < 0)\n        val\
    \ positive = lst.filter(_ > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ {\n            (None, None)\n        } else if (negative.isEmpty || positive.isEmpty)\
    \ {\n            (None, None)\n        } else {\n            val largest = negative.max\n\
    \            val smallest = positive.min\n            (Some(largest), Some(smallest))\n\
    \        }", "        val negative = lst.filter(x => x < 0)\n        val positive\
    \ = lst.filter(x => x >= 0)\n        if (negative.isEmpty && positive.isEmpty)\n\
    \            (None, None)\n        else if (negative.isEmpty)\n            (Some(positive.min),\
    \ None)\n        else if (positive.isEmpty)\n            (None, Some(negative.min))\n\
    \        else\n            (Some(negative.min), Some(positive.min))", "      \
    \  val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x >= 0)\n        if (negative.isEmpty && positive.isEmpty) None else (Option(negative.max),\
    \ Option(positive.min))", "        val negatives = lst.filter(x => x < 0)\n  \
    \      val positives = lst.filter(x => x >= 0)\n        if (negatives.isEmpty)\
    \ None\n        else if (positives.isEmpty) None\n        else (Some(negatives.max),\
    \ Some(positives.min))", "        val negatives = lst.filter(_ < 0)\n        val\
    \ positives = lst.filter(_ > 0)\n        if (negatives.isEmpty) {\n          \
    \  (None, None)\n        } else if (positives.isEmpty) {\n            (None, Some(0))\n\
    \        } else {\n            (Some(negatives.max), Some(positives.min))\n  \
    \      }", "        val negatives = lst.filter(x => x < 0)\n        val positives\
    \ = lst.filter(x => x >= 0)\n        if (negatives.isEmpty) (None, positives.min)\
    \ else None", "        val negative = lst.filter(x => x < 0)\n        val positive\
    \ = lst.filter(x => x > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None else (Option(negative.max), Option(positive.min))", "        val negative\
    \ = lst.filter(x => x < 0)\n        val positive = lst.filter(x => x > 0)\n  \
    \      if(negative.isEmpty && positive.isEmpty) None else (Option(negative.max),\
    \ Option(positive.min))", "        val negative = lst.filter(_ < 0)\n        val\
    \ positive = lst.filter(_ > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None else (Option(negative.max), Option(positive.min))", "        val negative\
    \ = lst.filter(x => x < 0)\n        val positive = lst.filter(x => x >= 0)\n \
    \       val maxNegative = negative.max\n        val minPositive = positive.min\n\
    \        (maxNegative, minPositive)", "        val negative = lst.filter(x =>\
    \ x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Option(negative.max), Option(positive.min))",
  "        val negatives = lst.filter(_ < 0)\n        val positives = lst.filter(_\
    \ > 0)\n        if (negatives.isEmpty) \n            (None, Some(positives.min))\n\
    \        else if (positives.isEmpty) \n            (Some(negatives.max), None)\n\
    \        else\n            (Some(negatives.max), Some(positives.min))", "    \
    \    val negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x\
    \ => x >= 0)\n        val maxNegative = negatives.max\n        val minPositive\
    \ = positives.min\n        (maxNegative, minPositive)", "        val negatives\
    \ = lst.filter(x => x < 0)\n        val positives = lst.filter(x => x >= 0)\n\
    \        if(negatives.isEmpty) \n            (None, None)\n        else if(positives.isEmpty)\n\
    \            (None, None)\n        else\n            (Some(negatives.max), Some(positives.min))",
  "        val maxNegative = lst.filter(x => x < 0).max\n        val minPositive =\
    \ lst.filter(x => x > 0).min\n        (maxNegative, minPositive)", "        val\
    \ negatives = lst.filter(_ < 0)\n        val positives = lst.filter(_ > 0)\n \
    \       if (negatives.isEmpty) {\n            (None, None)\n        } else if\
    \ (positives.isEmpty) {\n            (None, None)\n        } else {\n        \
    \    val maxNegative = negatives.max\n            val minPositive = positives.min\n\
    \            (Some(maxNegative), Some(minPositive))\n        }", "        val\
    \ negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x =>\
    \ x >= 0)\n        if (negatives.isEmpty) None\n        else if (positives.isEmpty)\
    \ None\n        else (Some(negatives.max), Some(positives.min))", "        val\
    \ negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x => x\
    \ > 0)\n        if (negative.isEmpty && positive.isEmpty) None else (Option(negative.max),\
    \ Option(positive.min))", "        val negative = lst.filter(_ < 0)\n        val\
    \ positive = lst.filter(_ > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None else (Some(negative.max), Some(positive.min))", "        val negative =\
    \ lst.filter(x => x < 0L)\n        val positive = lst.filter(x => x > 0L)\n  \
    \      val maxNegative = negative.max\n        val minPositive = positive.min\n\
    \        (maxNegative, minPositive)", "        val negative = lst.filter(x =>\
    \ x < 0)\n        val positive = lst.filter(x => x >= 0)\n        val maxNegative\
    \ = negative.max\n        val minPositive = positive.min\n        (maxNegative,\
    \ minPositive)", "        val negative = lst.filter(x => x < 0)\n        val positive\
    \ = lst.filter(x => x > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None else (Some(negative.max), Some(positive.min))", "        val minNegative\
    \ = lst.filter(_ < 0).min\n        val minPositive = lst.filter(_ > 0).min\n \
    \       val maxNegative = lst.filter(_ < 0).max\n        val maxPositive = lst.filter(_\
    \ > 0).max\n        (minNegative, minPositive) match {\n            case (Some(negative),\
    \ Some(positive)) => (Some(negative), Some(positive))\n            case _ => (maxNegative,\
    \ maxPositive)\n        }", "        val negatives = lst.filter(x => x < 0)\n\
    \        val positives = lst.filter(x => x > 0)\n        if (negatives.isEmpty)\
    \ \n            (None, None)\n        else if (positives.isEmpty) \n         \
    \   (None, None)\n        else\n            (Some(negatives.max), Some(positives.min))",
  "        val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ >\
    \ 0)\n        if (negative.isEmpty && positive.isEmpty) None else (Option(negative.max),\
    \ Option(positive.min))", "        val negatives = lst.filter(x => x < 0)\n  \
    \      val positives = lst.filter(x => x >= 0)\n        if (negatives.isEmpty)\
    \ None\n        else if (positives.isEmpty) None\n        else (Some(negatives.max),\
    \ Some(positives.min))", "        val negative = lst.filter(_ < 0)\n        val\
    \ positive = lst.filter(_ > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None else (Some(negative.max), Some(positive.min))", "        val negatives\
    \ = lst.filter(x => x < 0)\n        val positives = lst.filter(x => x >= 0)\n\
    \        val maxNegative = negatives.max\n        val minPositive = positives.min\n\
    \        (maxNegative, minPositive)", "        val maxVal = lst.max\n        val\
    \ minVal = lst.min\n        if(maxVal.isEmpty || minVal.isEmpty) None\n      \
    \  else (Some(maxVal), Some(minVal))", "        val negative = lst.filter(x =>\
    \ x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Option(negative.max), Option(positive.min))",
  "        val negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x\
    \ => x > 0)\n        val minNegative = negatives.min\n        val maxPositive\
    \ = positives.max\n        (minNegative, maxPositive)", "        val positive\
    \ = lst.filter(x => x < 0L)\n        val negative = lst.filter(x => x >= 0L)\n\
    \        if (positive.isEmpty && negative.isEmpty) None else (positive.max, negative.min)",
  "        val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ >\
    \ 0)\n        if (negative.isEmpty && positive.isEmpty)\n            (None, None)\n\
    \        else if (negative.isEmpty)\n            (Some(positive.min), Some(negative.max))\n\
    \        else if (positive.isEmpty)\n            (Some(negative.min), Some(positive.max))\n\
    \        else\n            (Some(negative.min), Some(positive.max))", "      \
    \  val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ > 0)\n\
    \        if (negative.isEmpty && positive.isEmpty)\n            (None, None)\n\
    \        else if (negative.isEmpty)\n            (Some(positive.min), None)\n\
    \        else if (positive.isEmpty)\n            (None, Some(negative.min))\n\
    \        else\n            (Some(negative.min), Some(positive.min))", "      \
    \  val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x > 0)\n        if (negative.isEmpty && positive.isEmpty) None else (Some(negative.max),\
    \ Some(positive.min))", "        val negative = lst.filter(x => x < 0)\n     \
    \   val positive = lst.filter(x => x > 0)\n        if(negative.isEmpty && positive.isEmpty)\
    \ None else (Option(negative.max), Option(positive.min))", "        val negative\
    \ = lst.filter(x => x < 0)\n        val positive = lst.filter(x => x >= 0)\n \
    \       if (negative.isEmpty && positive.isEmpty) None else Some(negative.min,\
    \ positive.max)", "        val negative = lst.filter(_ < 0)\n        val positive\
    \ = lst.filter(_ > 0)\n        if (negative.isEmpty && positive.isEmpty) None\
    \ else (Some(negative.max), Some(positive.min))", "        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Some(negative.max), Some(positive.min))", " \
    \       val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_\
    \ > 0)\n        if (negative.isEmpty && positive.isEmpty) {\n            (None,\
    \ None)\n        } else if (negative.isEmpty || positive.isEmpty) {\n        \
    \    (None, None)\n        } else {\n            (Option(negative.max), Option(positive.min))\n\
    \        }", "        val negative = lst.filter(_ < 0)\n        val positive =\
    \ lst.filter(_ > 0)\n        if(negative.isEmpty && positive.isEmpty) None else\
    \ (Option(negative.max), Option(positive.min))", "        val maxNegative = lst.filter(_\
    \ < 0).max\n        val minPositive = lst.filter(_ > 0).min\n        (maxNegative,\
    \ minPositive)", "        val negative = lst.filter(_ < 0)\n        val positive\
    \ = lst.filter(_ > 0)\n        if(negative.isEmpty && positive.isEmpty) None else\
    \ (Option(negative.max), Option(positive.min))", "        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Some(negative.max), Some(positive.min))", " \
    \       val positive = lst.filter(x => x >= 0)\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positiveMinusNegative = positive diff negative\n    \
    \    val positiveMinusNegativeMinusOne = positiveMinusNegative diff List(1L)\n\
    \        val positiveMinusNegativeMinusOneMinusOne = positiveMinusNegativeMinusOne\
    \ diff List(1L, 1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOne diff List(1L, 1L, 1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOne diff List(1L, 1L, 1L, 1L, 1L)\n\
    \        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOne = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOne\
    \ diff List(1L, 1L, 1L, 1L, 1L, 1L, 1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOne diff List(1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne diff\
    \ List(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff List(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff List(1", "        val positive = lst.filter(x => x > 0)\n        val negative\
    \ = lst.filter(x => x < 0)\n        val positiveMinusNegative = positive diff\
    \ negative\n        val positiveMinusNegativeMinusOne = positiveMinusNegative\
    \ diff List(1L)\n        val positiveMinusNegativeMinusOneMinusOne = positiveMinusNegativeMinusOne\
    \ diff List(1L, 1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOne diff List(1L, 1L, 1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOne diff List(1L, 1L, 1L, 1L, 1L)\n\
    \        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOne = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOne\
    \ diff List(1L, 1L, 1L, 1L, 1L, 1L, 1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOne diff List(1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne diff\
    \ List(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff List(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff List(1L, 1L, 1L, 1", "        val negative = lst.filter(_ < 0)\n      \
    \  val positive = lst.filter(_ > 0)\n        val maxNegative = negative.max\n\
    \        val minPositive = positive.min\n        (maxNegative, minPositive)",
  "        val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x > 0)\n        if (negative.isEmpty && positive.isEmpty) None else Some(negative.min,\
    \ positive.max)", "        val negatives = lst.filter(_ < 0)\n        val positives\
    \ = lst.filter(_ > 0)\n        if (negatives.isEmpty) None\n        else if (positives.isEmpty)\
    \ None\n        else {\n            val largest = negatives.max\n            val\
    \ smallest = positives.min\n            (Some(largest), Some(smallest))\n    \
    \    }", "        val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_\
    \ > 0)\n        if (negative.isEmpty && positive.isEmpty)\n            (None,\
    \ None)\n        else if (negative.isEmpty)\n            (Some(positive.min),\
    \ None)\n        else if (positive.isEmpty)\n            (None, Some(negative.min))\n\
    \        else\n            (Some(negative.min), Some(positive.min))", "      \
    \  val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ > 0)\n\
    \        if (negative.isEmpty && positive.isEmpty) None else (Some(negative.max),\
    \ Some(positive.min))", "        val negatives = lst.filter(x => x < 0)\n    \
    \    val positives = lst.filter(x => x >= 0)\n        val maxNegative = negatives.max\n\
    \        val minPositive = positives.min\n        (maxNegative, minPositive)",
  "        val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ >\
    \ 0)\n        if (negative.isEmpty && positive.isEmpty) None else (Some(negative.max),\
    \ Some(positive.min))", "        val negative = lst.filter(_ < 0)\n        val\
    \ positive = lst.filter(_ > 0)\n        if (negative.isEmpty && positive.isEmpty)\n\
    \            (None, None)\n        else if (negative.isEmpty)\n            (Some(positive.min),\
    \ None)\n        else if (positive.isEmpty)\n            (None, Some(negative.min))\n\
    \        else\n            (Some(negative.min), Some(positive.min))", "      \
    \  val negatives = lst.filter(_ < 0)\n        val positives = lst.filter(_ > 0)\n\
    \        if (negatives.isEmpty) \n            (None, Some(positives.min))\n  \
    \      else if (positives.isEmpty)\n            (Some(negatives.max), None)\n\
    \        else\n            (Some(negatives.max), Some(positives.min))", "    \
    \    val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ > 0)\n\
    \        if (negative.isEmpty && positive.isEmpty) None else (Option(negative.max),\
    \ Option(positive.min))", "        val positive = lst.filter(x => x >= 0)\n  \
    \      val negative = lst.filter(x => x < 0)\n        if (positive.isEmpty &&\
    \ negative.isEmpty) None\n        else if (positive.isEmpty && negative.isDefined)\
    \ Some(negative.get)\n        else if (negative.isEmpty && positive.isDefined)\
    \ Some(positive.get)\n        else if (positive.isDefined && negative.isDefined)\
    \ Some(positive.get, negative.get)\n        else None", "        val positive\
    \ = lst.filter(x => x < 0)\n        val negative = lst.filter(x => x >= 0)\n \
    \       if (positive.isEmpty && negative.isEmpty) None else (Some(positive.max),\
    \ Some(negative.min))", "        val negative = lst.filter(x => x < 0)\n     \
    \   val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None else Some(negative.min, positive.max)", "        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x >= 0)\n        if (negatives.isEmpty)\
    \ (None, positives.min) else None\n        if (positives.isEmpty) (None, negatives.max)\
    \ else None", "        val negative = lst.filter(x => x < 0)\n        val positive\
    \ = lst.filter(x => x >= 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None else (Option(negative.max), Option(positive.min))", "        val negative\
    \ = lst.filter(x => x < 0)\n        val positive = lst.filter(x => x >= 0)\n \
    \       if (negative.isEmpty && positive.isEmpty) None else (Option(negative.max),\
    \ Option(positive.min))", "        val negative = lst.filter(x => x < 0)\n   \
    \     val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None else (Some(negative.max), Some(positive.min))", "        val positive =\
    \ lst.filter(x => x > 0)\n        val negative = lst.filter(x => x < 0)\n    \
    \    if (positive.isEmpty && negative.isEmpty)\n            (None, None)\n   \
    \     else if (positive.isEmpty)\n            (None, negative.min)\n        else\
    \ if (negative.isEmpty)\n            (positive.min, None)\n        else\n    \
    \        (positive.min, negative.min)", "        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x >= 0)\n        if (negatives.isEmpty)\
    \ (None, None)\n        else if (positives.isEmpty) (None, None)\n        else\
    \ (Some(negatives.max), Some(positives.min))", "        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Some(negative.max), Some(positive.min))", " \
    \       val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_\
    \ > 0)\n        if (negative.isEmpty && positive.isEmpty) None else (Some(negative.max),\
    \ Some(positive.min))", "        val negatives = lst.filter(_ < 0)\n        val\
    \ positives = lst.filter(_ > 0)\n        if (negatives.isEmpty) None\n       \
    \ else if (positives.isEmpty) None\n        else {\n            val largest =\
    \ negatives.max\n            val smallest = positives.min\n            (Some(largest),\
    \ Some(smallest))\n        }", "        val minNegative = lst.minBy(x => -x).toOption\n\
    \        val minPositive = lst.minBy(x => x).toOption\n        val maxNegative\
    \ = lst.maxBy(x => -x).toOption\n        val maxPositive = lst.maxBy(x => x).toOption\n\
    \        (minNegative, minPositive)\n            .filterNot(x => maxNegative.contains(x))\n\
    \            .filterNot(x => maxPositive.contains(x))\n            .filterNot(x\
    \ => minNegative.contains(x))\n            .filterNot(x => minPositive.contains(x))",
  "        val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ >\
    \ 0)\n        if (negative.isEmpty && positive.isEmpty) None else (Option(negative.max),\
    \ Option(positive.min))", "        val negatives = lst.filter(x => x < 0)\n  \
    \      val positives = lst.filter(x => x > 0)\n        val largest = negatives.max\n\
    \        val smallest = positives.min\n        (largest, smallest)", "       \
    \ val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ >= 0)\n\
    \        val a = if (negative.isEmpty) None else negative.max\n        val b =\
    \ if (positive.isEmpty) None else positive.min\n        (a.toOption, b.toOption)",
  "        val negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x\
    \ => x >= 0)\n        if (negatives.isEmpty) \n            (None, Some(positives.min))\n\
    \        else if (positives.isEmpty)\n            (Some(negatives.max), None)\n\
    \        else\n            (Some(negatives.max), Some(positives.min))", "    \
    \    val negatives = lst.filter(_ < 0)\n        val positives = lst.filter(_ >\
    \ 0)\n        if (negatives.isEmpty) None\n        else if (positives.isEmpty)\
    \ None\n        else {\n            val max = negatives.max\n            val min\
    \ = positives.min\n            (Some(max), Some(min))\n        }", "        val\
    \ minNegative = lst.minBy(x => -x).toOption\n        val maxPositive = lst.maxBy(x\
    \ => x).toOption\n        (minNegative, maxPositive)", "        val positive =\
    \ lst.filter(x => x > 0)\n        val negative = lst.filter(x => x < 0)\n    \
    \    val positiveMinusNegative = positive diff negative\n        val positiveMinusNegativeMinusOne\
    \ = positiveMinusNegative diff (negative diff 1)\n        val positiveMinusNegativeMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOne diff (negative diff 1 diff 1)\n        val positiveMinusNegativeMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOne diff (negative diff 1 diff 1 diff 1)\n\
    \        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOne = positiveMinusNegativeMinusOneMinusOneMinusOne\
    \ diff (negative diff 1 diff 1 diff 1 diff 1)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOne diff (negative diff\
    \ 1 diff 1 diff 1 diff 1 diff 1)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOne diff (negative\
    \ diff 1 diff 1 diff 1 diff 1 diff 1 diff 1)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne diff\
    \ (negative diff 1 diff 1 diff 1 diff 1 diff 1 diff 1 diff 1)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff (negative diff 1 diff 1 diff 1 diff 1 diff 1 diff 1 diff 1 diff 1)\n  \
    \      val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff (negative diff 1 diff 1 diff 1 diff 1 diff 1 diff 1 diff 1 diff 1 diff\
    \ 1)\n        val positiveMinusNegativeMinusOne", "        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) {\n            return (None, None)\n        }\n       \
    \ if (negative.isEmpty) {\n            return (Some(positive.min), None)\n   \
    \     }\n        if (positive.isEmpty) {\n            return (None, Some(negative.min))\n\
    \        }\n        val min = negative.min\n        val max = positive.max\n \
    \       return (Some(min), Some(max))", "        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x >= 0)\n        if (negatives.isEmpty)\
    \ None\n        else if (positives.isEmpty) None\n        else (Some(negatives.max),\
    \ Some(positives.min))", "        val negative = lst.filter(_ < 0)\n        val\
    \ positive = lst.filter(_ > 0)\n        val maxNegative = negative.max\n     \
    \   val minPositive = positive.min\n        (maxNegative, minPositive)", "   \
    \     val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x >= 0)\n        if (negative.isEmpty && positive.isEmpty) None else (Option(negative.max),\
    \ Option(positive.min))", "        val negative = lst.filter(_ < 0)\n        val\
    \ positive = lst.filter(_ > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None else (Some(negative.max), Some(positive.min))", "        val negative =\
    \ lst.filter(_ < 0)\n        val positive = lst.filter(_ > 0)\n        val a =\
    \ negative.max\n        val b = positive.min\n        if (a.isEmpty) (a, b) else\
    \ None", "        val negative = lst.filter(x => x < 0)\n        val positive\
    \ = lst.filter(x => x > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ {\n            (None, None)\n        } else if (negative.isEmpty) {\n      \
    \      (None, positive.min)\n        } else if (positive.isEmpty) {\n        \
    \    (negative.max, None)\n        } else {\n            (negative.max, positive.min)\n\
    \        }", "        val negatives = lst.filter(x => x < 0)\n        val positives\
    \ = lst.filter(x => x >= 0)\n        val maxNegative = negatives.max\n       \
    \ val minPositive = positives.min\n        (maxNegative, minPositive)", "    \
    \    val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x > 0)\n        val maxNegative = negative.max\n        val minPositive =\
    \ positive.min\n        (maxNegative, minPositive)", "        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Some(negative.max), Some(positive.min))", " \
    \       val negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x\
    \ => x >= 0)\n        if (negatives.isEmpty) (None, None)\n        else if (positives.isEmpty)\
    \ (None, Some(0))\n        else (Some(negatives.max), Some(positives.min))", " \
    \       val negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x\
    \ => x >= 0)\n        if (negatives.isEmpty) \n            (None, None)\n    \
    \    else if (positives.isEmpty) \n            (None, None)\n        else\n  \
    \          (Some(negatives.max), Some(positives.min))", "        val negative\
    \ = lst.filter(x => x < 0)\n        val positive = lst.filter(x => x >= 0)\n \
    \       if (negative.isEmpty && positive.isEmpty)\n            (None, None)\n\
    \        else if (negative.isEmpty)\n            (None, positive.min)\n      \
    \  else if (positive.isEmpty)\n            (negative.max, None)\n        else\n\
    \            (Some(negative.max), Some(positive.min))", "        val negative\
    \ = lst.filter(x => x < 0)\n        val positive = lst.filter(x => x >= 0)\n \
    \       if (negative.isEmpty && positive.isEmpty) None else (Some(negative.max),\
    \ Some(positive.min))", "        val negative = lst.filter(x => x < 0)\n     \
    \   val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None else (Option(negative.max), Option(positive.min))", "        val negative\
    \ = lst.filter(x => x < 0)\n        val positive = lst.filter(x => x >= 0)\n \
    \       val max = negative.max\n        val min = positive.min\n        (max,\
    \ min) match {\n            case (Some(x), Some(y)) => (Some(x), Some(y))\n  \
    \          case _ => (None, None)\n        }", "        val maxNegative = lst.filter(_\
    \ < 0).max\n        val minPositive = lst.filter(_ > 0).min\n        (maxNegative,\
    \ minPositive)", "        val negative = lst.filter(x => x < 0)\n        val positive\
    \ = lst.filter(x => x > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None else (Option(negative.max), Option(positive.min))", "        val negatives\
    \ = lst.filter(x => x < 0)\n        val positives = lst.filter(x => x >= 0)\n\
    \        val maxNegative = negatives.max\n        val minPositive = positives.min\n\
    \        (maxNegative, minPositive)", "        val maxNegative = lst.filter(_\
    \ < 0).max\n        val minPositive = lst.filter(_ > 0).min\n        (maxNegative,\
    \ minPositive)", "        val negative = lst.filter(x => x < 0)\n        val positive\
    \ = lst.filter(x => x >= 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None else (Option(negative.max), Option(positive.min))", "        val negative\
    \ = lst.filter(x => x < 0)\n        val positive = lst.filter(x => x >= 0)\n \
    \       if (negative.isEmpty && positive.isEmpty)\n            (None, None)\n\
    \        else if (negative.isEmpty)\n            (Some(positive.min), None)\n\
    \        else if (positive.isEmpty)\n            (None, Some(negative.min))\n\
    \        else\n            (Some(negative.min), Some(positive.min))", "      \
    \  val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x > 0)\n        if (negative.isEmpty && positive.isEmpty) None else (Some(negative.max),\
    \ Some(positive.min))", "        val negatives = lst.filter(x => x < 0)\n    \
    \    val positives = lst.filter(x => x > 0)\n        if (negatives.isEmpty) \n\
    \            (None, Some(positives.min))\n        else if (positives.isEmpty)\
    \ \n            (Some(negatives.max), None)\n        else\n            (Some(negatives.max),\
    \ Some(positives.min))", "        val negative = lst.filter(x => x < 0)\n    \
    \    val positive = lst.filter(x => x > 0)\n        val maxNegative = negative.max\n\
    \        val minPositive = positive.min\n        val maxNegativeOption = Some(maxNegative)\n\
    \        val minPositiveOption = Some(minPositive)\n        (maxNegativeOption,\
    \ minPositiveOption)", "        val negative = lst.filter(_ < 0)\n        val\
    \ positive = lst.filter(_ > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None else (Some(negative.max), Some(positive.min))", "        val negative =\
    \ lst.filter(x => x < 0L)\n        val positive = lst.filter(x => x >= 0L)\n \
    \       if (negative.isEmpty && positive.isEmpty) None else (Some(negative.max),\
    \ Some(positive.min))", "        val negative = lst.filter(x => x < 0)\n     \
    \   val positive = lst.filter(x => x >= 0)\n        if(negative.isEmpty && positive.isEmpty)\
    \ None else (Some(negative.max), Some(positive.min))", "        val negative =\
    \ lst.filter(x => x < 0)\n        val positive = lst.filter(x => x >= 0)\n   \
    \     val minNegative = negative.min\n        val maxPositive = positive.max\n\
    \        (minNegative, maxPositive)", "        val negative = lst.filter(x =>\
    \ x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty)\n            (None, None)\n        else if (negative.isEmpty)\n\
    \            (Some(positive.min), None)\n        else if (positive.isEmpty)\n\
    \            (None, Some(negative.min))\n        else\n            (Some(negative.min),\
    \ Some(positive.min))", "        val negative = lst.filter(x => x < 0)\n     \
    \   val positive = lst.filter(x => x > 0)\n        val maxNegative = negative.max\n\
    \        val minPositive = positive.min\n        (maxNegative, minPositive)",
  "        val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x > 0)\n        if (negative.isEmpty && positive.isEmpty) None else (Option(negative.max),\
    \ Option(positive.min))", "        val negative = lst.filter(x => x < 0)\n   \
    \     val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None else (Option(negative.max), Option(positive.min))", "        val negatives\
    \ = lst.filter(_ < 0)\n        val positives = lst.filter(_ > 0)\n        if (negatives.isEmpty)\
    \ {\n            (None, None)\n        } else if (positives.isEmpty) {\n     \
    \       (None, Some(0))\n        } else {\n            (Some(negatives.max), Some(positives.min))\n\
    \        }", "        val negative = lst.filter(_ < 0)\n        val positive =\
    \ lst.filter(_ > 0)\n        val max = negative.max\n        val min = positive.min\n\
    \        (max, min) match {\n            case (Some(max), Some(min)) => (Some(max),\
    \ Some(min))\n            case _ => (None, None)\n        }", "        val negatives\
    \ = lst.filter(x => x < 0)\n        val positives = lst.filter(x => x > 0)\n \
    \       val minNegative = negatives.min\n        val maxPositive = positives.max\n\
    \        (minNegative, maxPositive)", "        val maxNegative = lst.filter(x\
    \ => x < 0).max\n        val minPositive = lst.filter(x => x > 0).min\n      \
    \  (maxNegative, minPositive)", "        val maxNegative = lst.filter(_ < 0).max\n\
    \        val minPositive = lst.filter(_ > 0).min\n        (maxNegative, minPositive)",
  "        val negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x\
    \ => x > 0)\n        if (negatives.isEmpty) (None, None)\n        else if (positives.isEmpty)\
    \ (None, None)\n        else (Some(negatives.max), Some(positives.min))", "  \
    \      val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ >\
    \ 0)\n        if (negative.isEmpty && positive.isEmpty) None\n        else if\
    \ (negative.isEmpty) Some(positive.min)\n        else if (positive.isEmpty) Some(negative.max)\n\
    \        else (negative.min, positive.max)", "        val positive = lst.filter(x\
    \ => x >= 0)\n        val negative = lst.filter(x => x < 0)\n        val positiveMinusNegative\
    \ = positive diff negative\n        val positiveMinusNegativeMinusOne = positiveMinusNegative\
    \ diff List(1L)\n        val positiveMinusNegativeMinusOneMinusOne = positiveMinusNegativeMinusOne\
    \ diff List(1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOne = positiveMinusNegativeMinusOneMinusOne\
    \ diff List(1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOne diff List(1L)\n    \
    \    val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOne = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff List(1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne diff\
    \ List(1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff List(1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff List(1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff List(1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff List(1L)", "        val negatives = lst.filter(_ < 0)\n        val positives\
    \ = lst.filter(_ > 0)\n        if (negatives.isEmpty) None else (Option(negatives.max),\
    \ Option(positives.min))", "        val positive = lst.filter(x => x >= 0)\n \
    \       val negative = lst.filter(x => x < 0)\n        val positiveMinusNegative\
    \ = positive diff negative\n        val positiveMinusNegativeMinusOne = positiveMinusNegative\
    \ diff (negative diff 1)\n        val positiveMinusNegativeMinusOneMinusOne =\
    \ positiveMinusNegativeMinusOne diff (negative diff 1 diff 1)\n        val positiveMinusNegativeMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOne diff (negative diff 1 diff 1 diff 1)\n\
    \        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOne = positiveMinusNegativeMinusOneMinusOneMinusOne\
    \ diff (negative diff 1 diff 1 diff 1 diff 1)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOne diff (negative diff\
    \ 1 diff 1 diff 1 diff 1 diff 1)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne diff\
    \ (negative diff 1 diff 1 diff 1 diff 1 diff 1 diff 1)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff (negative diff 1 diff 1 diff 1 diff 1 diff 1 diff 1 diff 1)\n        val\
    \ positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff (negative diff 1 diff 1 diff 1 diff 1 diff 1 diff 1 diff 1 diff 1)\n  \
    \      val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff (negative diff 1 diff 1 diff 1 diff 1 diff 1 diff 1 diff 1 diff 1 ", " \
    \       val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_\
    \ > 0)\n        val minNegative = negative.min\n        val minPositive = positive.min\n\
    \        val maxNegative = negative.max\n        val maxPositive = positive.max\n\
    \        if (minNegative == maxNegative && minPositive == maxPositive) {\n   \
    \         return (None, None)\n        } else if (minNegative == maxNegative)\
    \ {\n            return (Some(minPositive), None)\n        } else if (minPositive\
    \ == maxPositive) {\n            return (None, Some(minNegative))\n        } else\
    \ {\n            return (Some(minNegative), Some(minPositive))\n        }", " \
    \       val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_\
    \ > 0)\n        if (negative.isEmpty && positive.isEmpty) None else (Some(negative.max),\
    \ Some(positive.min))", "        val positive = lst.filter(x => x >= 0)\n    \
    \    val negative = lst.filter(x => x < 0)\n        val positiveMin = positive.min\n\
    \        val positiveMax = positive.max\n        val negativeMin = negative.min\n\
    \        val negativeMax = negative.max\n        (Some(positiveMin), Some(positiveMax))",
  "        val negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x\
    \ => x >= 0)\n        if (negatives.isEmpty) \n            (None, None)\n    \
    \    else if (positives.isEmpty) \n            (None, None)\n        else\n  \
    \          (Some(negatives.max), Some(positives.min))", "        val negative\
    \ = lst.filter(_ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Some(negative.max), Some(positive.min))", " \
    \       val minNegative = lst.minBy(x => -x).toOption\n        val maxPositive\
    \ = lst.maxBy(x => x).toOption\n        (minNegative, maxPositive)", "       \
    \ val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x =>\
    \ x >= 0)\n        if (negative.isEmpty && positive.isEmpty) None else (Some(negative.max),\
    \ Some(positive.min))", "        val negatives = lst.filter(x => x < 0)\n    \
    \    val positives = lst.filter(x => x >= 0)\n        if (negatives.isEmpty) \n\
    \            (None, Some(positives.min))\n        else if (positives.isEmpty)\
    \ \n            (Some(negatives.max), None)\n        else\n            (Some(negatives.max),\
    \ Some(positives.min))", "        val negatives = lst.filter(_ < 0)\n        val\
    \ positives = lst.filter(_ > 0)\n        if (negatives.isEmpty) \n           \
    \ (None, Some(positives.min))\n        else if (positives.isEmpty)\n         \
    \   (Some(negatives.max), None)\n        else\n            (Some(negatives.max),\
    \ Some(positives.min))", "        val negative = lst.filter(_ < 0)\n        val\
    \ positive = lst.filter(_ > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None else (Some(negative.max), Some(positive.min))", "        val negatives\
    \ = lst.filter(x => x < 0)\n        val positives = lst.filter(x => x >= 0)\n\
    \        val maxNegative = negatives.max\n        val minPositive = positives.min\n\
    \        (maxNegative, minPositive)", "        val maxNegative = lst.filter(_\
    \ < 0).max\n        val minPositive = lst.filter(_ > 0).min\n        (maxNegative,\
    \ minPositive)", "        val negative = lst.filter(x => x < 0)\n        val positive\
    \ = lst.filter(x => x >= 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None else (Option(negative.max), Option(positive.min))", "        val maxNegative\
    \ = lst.maxBy(-_)\n        val minPositive = lst.minBy(_)\n        (maxNegative,\
    \ minPositive)", "        val negative = lst.filter(x => x < 0)\n        val positive\
    \ = lst.filter(x => x >= 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None else (Option(negative.max), Option(positive.min))", "        val negative\
    \ = lst.filter(x => x < 0L)\n        val positive = lst.filter(x => x >= 0L)\n\
    \        if (negative.isEmpty && positive.isEmpty)\n            (None, None)\n\
    \        else if (negative.isEmpty)\n            (Some(0L), Some(positive.min))\n\
    \        else if (positive.isEmpty)\n            (Some(negative.max), Some(0L))\n\
    \        else\n            (Some(negative.max), Some(positive.min))", "      \
    \  val negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x\
    \ => x >= 0)\n        if (negatives.isEmpty) None\n        else if (positives.isEmpty)\
    \ None\n        else {\n            val largest = negatives.max\n            val\
    \ smallest = positives.min\n            (Some(largest), Some(smallest))\n    \
    \    }", "        val positive = lst.filter(x => x >= 0)\n        val negative\
    \ = lst.filter(x => x < 0)\n        val positiveMinusNegative = positive diff\
    \ negative\n        val positiveMinusNegativeMinusOne = positiveMinusNegative\
    \ diff List(1L)\n        val positiveMinusNegativeMinusOneMinusOne = positiveMinusNegativeMinusOne\
    \ diff List(1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOne = positiveMinusNegativeMinusOneMinusOne\
    \ diff List(1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOne diff List(1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOne diff List(1L)\n\
    \        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne diff\
    \ List(1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff List(1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff List(1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff List(1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff List(1L)\n        val positiveMinus", "        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Option(negative.max), Option(positive.min))",
  "        val negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x\
    \ => x >= 0)\n        if (negatives.isEmpty) None\n        else if (positives.isEmpty)\
    \ None\n        else (Some(negatives.max), Some(positives.min))", "        val\
    \ negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ > 0)\n   \
    \     val max = negative.max\n        val min = positive.min\n        (max, min)",
  "        val maxNegative = lst.filter(_ < 0).max\n        val minPositive = lst.filter(_\
    \ > 0).min\n        (maxNegative, minPositive)", "        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x > 0)\n        val maxNegative\
    \ = negatives.max\n        val minPositive = positives.min\n        (maxNegative,\
    \ minPositive)", "        val negative = lst.filter(x => x < 0)\n        val positive\
    \ = lst.filter(x => x >= 0)\n        val maxNegative = negative.max\n        val\
    \ minPositive = positive.min\n        (maxNegative, minPositive)", "        val\
    \ negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ > 0)\n   \
    \     if (negative.isEmpty && positive.isEmpty) None else (Some(negative.max),\
    \ Some(positive.min))", "        val negative = lst.filter(x => x < 0L)\n    \
    \    val positive = lst.filter(x => x > 0L)\n        if (negative.isEmpty && positive.isEmpty)\n\
    \            (None, None)\n        else if (negative.isEmpty)\n            (None,\
    \ positive.min)\n        else if (positive.isEmpty)\n            (negative.max,\
    \ None)\n        else\n            (negative.max, positive.min)", "        val\
    \ negative = lst.filter(x => x < 0L)\n        val positive = lst.filter(x => x\
    \ > 0L)\n        if (negative.isEmpty && positive.isEmpty) None else (Option(negative.max),\
    \ Option(positive.min))", "        val maxNegative = lst.filter(x => x < 0).max\n\
    \        val minPositive = lst.filter(x => x > 0).min\n        (maxNegative, minPositive)",
  "        val negative = lst.filter(x => x < 0L)\n        val positive = lst.filter(x\
    \ => x >= 0L)\n        val max = negative.max\n        val min = positive.min\n\
    \        (max, min)", "        val negative = lst.filter(x => x < 0)\n       \
    \ val positive = lst.filter(x => x > 0)\n        if(negative.isEmpty && positive.isEmpty)\
    \ None else (Some(negative.max), Some(positive.min))", "        val negative =\
    \ lst.filter(x => x < 0)\n        val positive = lst.filter(x => x >= 0)\n   \
    \     if (negative.isEmpty && positive.isEmpty) None else (Option(negative.max),\
    \ Option(positive.min))", "        val negative = lst.filter(_ < 0)\n        val\
    \ positive = lst.filter(_ > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None else (Some(negative.max), Some(positive.min))", "        val negative =\
    \ lst.filter(_ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Some(negative.max), Some(positive.min))", " \
    \       val negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x\
    \ => x > 0)\n        if (negatives.isEmpty) \n            (None, Some(positives.min))\n\
    \        else if (positives.isEmpty)\n            (Some(negatives.max), None)\n\
    \        else\n            (Some(negatives.max), Some(positives.min))", "    \
    \    val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ > 0)\n\
    \        val maxNegative = negative.max\n        val minPositive = positive.min\n\
    \        (maxNegative, minPositive)", "        val negatives = lst.filter(x =>\
    \ x < 0)\n        val positives = lst.filter(x => x >= 0)\n        if (negatives.isEmpty)\
    \ {\n            (None, None)\n        } else if (positives.isEmpty) {\n     \
    \       (None, None)\n        } else {\n            val largest = negatives.max\n\
    \            val smallest = positives.min\n            (Some(largest), Some(smallest))\n\
    \        }", "        val negative = lst.filter(x => x < 0)\n        val positive\
    \ = lst.filter(x => x >= 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None else (Some(negative.max), Some(positive.min))"]
stop_tokens:
- "\n    }\n"
