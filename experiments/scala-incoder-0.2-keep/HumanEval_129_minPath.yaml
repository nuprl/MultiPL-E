name: HumanEval_129_minPath
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a grid with N rows and N columns (N >= 2) and a positive integer k,\
  \ \n    // each cell of the grid contains a value. Every integer in the range [1,\
  \ N * N]\n    // inclusive appears exactly once on the cells of the grid.\n    //\
  \ You have to find the minimum path of length k in the grid. You can start\n   \
  \ // from any cell, and in each step you can move to any of the neighbor cells,\n\
  \    // in other words, you can go to cells which share an edge with you current\n\
  \    // cell.\n    // Please note that a path of length k means visiting exactly\
  \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
  \    // A path A (of length k) is considered less than a path B (of length k) if\n\
  \    // after making the ordered lists of the values on the cells that A and B go\n\
  \    // through (let's call them lst_A and lst_B), lst_A is lexicographically less\n\
  \    // than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n\
  \    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    //\
  \ lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is unique.\n   \
  \ // Return an ordered list of the values on the cells that the minimum path go\
  \ through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6], [7,8,9]],\
  \ k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6], [7,8,2]],\
  \ k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]], k : Long)\
  \ : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
  \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
  \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
  \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
  \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
  \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
  \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
  \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
  \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
  \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
  \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
  \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
  \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
  \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
  \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
  \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
  \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
  \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
  \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
  \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
  \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
  \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
  \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
  \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
  \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong))));\n\
  \    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong, 4l.toLong),\
  \ List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong, 8l.toLong,\
  \ 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
  \ 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
  \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
  \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
  \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
  \ 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 3l.toLong),\
  \ List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong, 3l.toLong,\
  \ 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n\
  \    }\n\n}\n"
completions: ["        val n = grid.length\n        val m = grid(0).length\n     \
    \   val result = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n\
    \        val visitedCount = new Array[Int](k)\n        val visitedCountTemp =\
    \ new Array[Int](k)\n        val visitedCountTemp2 = new Array[Int](k)\n     \
    \   val visitedCountTemp3 = new Array[Int](k)\n        val visitedCountTemp4 =\
    \ new Array[Int](k)\n        val visitedCountTemp5 = new Array[Int](k)\n     \
    \   val visitedCountTemp6 = new Array[Int](k)\n        val visitedCountTemp7 =\
    \ new Array[Int](k)\n        val visitedCountTemp8 = new Array[Int](k)\n     \
    \   val visitedCountTemp9 = new Array[Int](k)\n        val visitedCountTemp10\
    \ = new Array[Int](k)\n        val visitedCountTemp11 = new Array[Int](k)\n  \
    \      val visitedCountTemp12 = new Array[Int](k)\n        val visitedCountTemp13\
    \ = new Array[Int](k)\n        val visitedCountTemp14 = new Array[Int](k)\n  \
    \      val visitedCountTemp15 = new Array[Int](k)\n        val visitedCountTemp16\
    \ = new Array[Int](k)\n        val visitedCountTemp17 = new Array[Int](k)\n  \
    \      val visitedCountTemp18 = new Array[Int](k)\n        val visitedCountTemp19\
    \ = new Array[Int](k)\n        val visitedCountTemp20 = new Array[Int](k)\n  \
    \      val visitedCountTemp21 = new Array[Int](k)\n        val visitedCountTemp22\
    \ = new Array[Int](k)\n        val visitedCountTemp23 = new Array[Int](k)\n  \
    \      val visitedCountTemp24 = new Array[Int](k)\n        val visitedCountTemp25\
    \ = new Array[Int](k)\n        val visitedCountTemp26 = new Array[Int](k)\n  \
    \      val visitedCountTemp27 = new Array[Int](k)\n        val visitedCountTemp28\
    \ = new Array[Int](k)\n        val visitedCountTemp29 = new Array[Int](k)\n  \
    \      val visitedCountTemp30 = new Array[Int](k)\n        val visitedCountTemp31\
    \ = new Array[Int](k)\n        val visitedCountTemp32 = new Array[Int](k)\n  \
    \      val visitedCountTemp33 = new Array[Int](k)\n        val visite", "    \
    \    val N = grid.length\n        val m = N * N\n        val lst_A = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_B = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_C = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_D\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_E = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_F = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_G = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_H\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_I = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_J = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_K = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_L\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_M = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_N = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_O = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_P\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_Q = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_R = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_S = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_T\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_U = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_V = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_W = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_X\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_Y = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_Z = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_A = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_B\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_C = scala.collection.mutable.ArrayBuffer.empty",
  "        val n = grid.length\n        val m = grid(0).length\n        val result\
    \ = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n        var\
    \ min = 0L\n        var index = 0\n        var minIndex = 0\n        var minPath\
    \ = 0L\n        val visitedIndex = new Array[Int](k)\n        var index2 = 0\n\
    \        var minIndex2 = 0\n        var minPath2 = 0L\n        val visitedIndex2\
    \ = new Array[Int](k)\n        var index3 = 0\n        var minIndex3 = 0\n   \
    \     var minPath3 = 0L\n        val visitedIndex3 = new Array[Int](k)\n     \
    \   var index4 = 0\n        var minIndex4 = 0\n        var minPath4 = 0L\n   \
    \     val visitedIndex4 = new Array[Int](k)\n        var index5 = 0\n        var\
    \ minIndex5 = 0\n        var minPath5 = 0L\n        val visitedIndex5 = new Array[Int](k)\n\
    \        var index6 = 0\n        var minIndex6 = 0\n        var minPath6 = 0L\n\
    \        val visitedIndex6 = new Array[Int](k)\n        var index7 = 0\n     \
    \   var minIndex7 = 0\n        var minPath7 = 0L\n        val visitedIndex7 =\
    \ new Array[Int](k)\n        var index8 = 0\n        var minIndex8 = 0\n     \
    \   var minPath8 = 0L\n        val visitedIndex8 = new Array[Int](k)\n       \
    \ var index9 = 0\n        var minIndex9 = 0\n        var minPath9 = 0L\n     \
    \   val visitedIndex9 = new Array[Int](k)\n        var index10 = 0\n        var\
    \ minIndex10 = 0\n        var minPath10 = 0L\n        val visitedIndex10 = new\
    \ Array[Int](k)\n        var index11 = 0\n        var minIndex11 = 0\n       \
    \ var minPath11 = 0L\n        val visitedIndex11 = new Array[Int](k)\n       \
    \ var index12 = 0\n        var minIndex12 = 0\n        var minPath12 = 0L\n  \
    \      val visitedIndex12 = new Array[Int](k)\n        var index13 = 0\n     \
    \   var minIndex13 = 0\n        var minPath13 = 0L\n        val visitedIndex13\
    \ = new Array[Int](k)\n        var index14 = 0\n        var minIndex14 = 0\n \
    \       var minPath14 = 0L\n        val visitedIndex14 = new Array[Int](k)\n \
    \       var index15 = 0\n        var minIndex15 = 0\n        var minPath15 = 0L\n\
    \        val visitedIndex15 = new Array[Int](k)\n        var index16 = 0\n   \
    \     var minIndex16 = 0\n        var ", "        val N = grid.size\n        val\
    \ lst_A = grid.map(_.toList).toList\n        val lst_B = grid.map(_.toList).reverse.toList\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => x._1 compare x._2)\n        val\
    \ lst_D = lst_A.zip(lst_B).map(x => x._1 compare x._2).reverse\n        val lst_E\
    \ = lst_A.zip(lst_B).map(x => x._1 compare x._2).reverse\n        val lst_F =\
    \ lst_A.zip(lst_B).map(x => x._1 compare x._2).reverse\n        val lst_G = lst_A.zip(lst_B).map(x\
    \ => x._1 compare x._2).reverse\n        val lst_H = lst_A.zip(lst_B).map(x =>\
    \ x._1 compare x._2).reverse\n        val lst_I = lst_A.zip(lst_B).map(x => x._1\
    \ compare x._2).reverse\n        val lst_J = lst_A.zip(lst_B).map(x => x._1 compare\
    \ x._2).reverse\n        val lst_K = lst_A.zip(lst_B).map(x => x._1 compare x._2).reverse\n\
    \        val lst_L = lst_A.zip(lst_B).map(x => x._1 compare x._2).reverse\n  \
    \      val lst_M = lst_A.zip(lst_B).map(x => x._1 compare x._2).reverse\n    \
    \    val lst_N = lst_A.zip(lst_B).map(x => x._1 compare x._2).reverse\n      \
    \  val lst_O = lst_A.zip(lst_B).map(x => x._1 compare x._2).reverse\n        val\
    \ lst_P = lst_A.zip(lst_B).map(x => x._1 compare x._2).reverse\n        val lst_Q\
    \ = lst_A.zip(lst_B).map(x => x._1 compare x._2).reverse\n        val lst_R =\
    \ lst_A.zip(lst_B).map(x => x._1 compare x._2).reverse\n        val lst_S = lst_A.zip(lst_B).map(x\
    \ => x._1 compare x._2).reverse\n        val lst_T = lst_A.zip(lst_B).map(x =>\
    \ x._1 compare x._2).reverse\n        val lst_U = lst_A.zip(lst_B).map(x => x._1\
    \ compare x.", "        val m = grid.length\n        val n = grid(0).length\n\
    \        val result = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n\
    \        val visitedIndex = new Array[Int](k)\n        val visitedIndexIndex =\
    \ new Array[Int](k)\n        val visitedIndexIndexIndex = new Array[Int](k)\n\
    \        val visitedIndexIndexIndexIndex = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndex = new\
    \ Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndex = new\
    \ Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndex =\
    \ new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndex",
  "        val grid = mutable.ArrayBuffer.empty[List[Long]]\n        val visited =\
    \ mutable.ArrayBuffer.empty[Boolean]\n        val visitedList = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        val visitedList2 = mutable.ArrayBuffer.empty[List[Long]]\n        val\
    \ visitedList3 = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList4\
    \ = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList5 = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        val visitedList6 = mutable.ArrayBuffer.empty[List[Long]]\n        val\
    \ visitedList7 = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList8\
    \ = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList9 = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        val visitedList10 = mutable.ArrayBuffer.empty[List[Long]]\n        val\
    \ visitedList11 = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList12\
    \ = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList13 = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        val visitedList14 = mutable.ArrayBuffer.empty[List[Long]]\n        val\
    \ visitedList15 = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList16\
    \ = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList17 = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        val visitedList18 = mutable.ArrayBuffer.empty[List[Long]]\n        val\
    \ visitedList19 = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList20\
    \ = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList21 = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        val visitedList22 = mutable.ArrayBuffer.empty[List[Long]]\n        val\
    \ visitedList23 = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList24\
    \ = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList25 = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        val visitedList26 = mutable.ArrayBuffer.empty[List[Long]]\n        val\
    \ visitedList27 = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList28\
    \ = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList29 = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        val visitedList30", "        val grid = mutable.ArrayBuffer(grid)\n \
    \       val visited = mutable.HashSet[Long]()\n        val result = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize2 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize3 = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize4\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize5 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize6 = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize7\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize8 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize9 = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize10\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize11 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize12 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ visitedListSize13 = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize14\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize15 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize16 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ visitedListSize17 = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize18\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize19 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize20 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ visitedListSize21 = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize22\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize23 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize24 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ visitedListSize25 = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize26\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize27 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize28 = mutable.ArrayBuffer.empty[Long]\n", "       \
    \ val m = grid.length\n        val n = grid(0).length\n        val result = new\
    \ mutable.ListBuffer[Long]()\n        val visited = new mutable.HashSet[Long]()\n\
    \        val visitedList = new mutable.ListBuffer[Long]()\n        val visitedList2\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList3 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList4 = new mutable.ListBuffer[Long]()\n        val visitedList5\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList6 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList7 = new mutable.ListBuffer[Long]()\n        val visitedList8\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList9 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList10 = new mutable.ListBuffer[Long]()\n        val visitedList11\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList12 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList13 = new mutable.ListBuffer[Long]()\n        val visitedList14\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList15 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList16 = new mutable.ListBuffer[Long]()\n        val visitedList17\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList18 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList19 = new mutable.ListBuffer[Long]()\n        val visitedList20\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList21 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList22 = new mutable.ListBuffer[Long]()\n        val visitedList23\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList24 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList25 = new mutable.ListBuffer[Long]()\n        val visitedList26\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList27 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList28 = new mutable.ListBuffer[Long]()\n        val visitedList29\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList30 = new mut", "  \
    \      val n = grid.size\n        val m = grid(0).size\n        val grid = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        val visited = mutable.HashSet.empty[Long]\n        val visitedList =\
    \ mutable.ArrayBuffer.empty[Long]\n        val visitedList = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList = mutable.ArrayBuffer.empty[Long]\n        val visitedList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList = mutable.ArrayBuffer.empty[Long]\n        val visitedList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList = mutable.ArrayBuffer.empty[Long]\n        val visitedList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList = mutable.ArrayBuffer.empty[Long]\n        val visitedList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList = mutable.ArrayBuffer.empty[Long]\n        val visitedList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList = mutable.ArrayBuffer.empty[Long]\n        val visitedList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList = mutable.ArrayBuffer.empty[Long]\n        val visitedList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList = mutable.ArrayBuffer.empty[Long]\n        val visitedList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList = mutable.ArrayBuffer.empty[Long]\n        val visitedList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList = mutable.ArrayBuffer.empty[Long]\n        val visitedList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList = mutable.ArrayBuffer.empty[Long]\n        val visitedList\
    \ = mutable.ArrayBuffer.empty[", "        val m = grid.length\n        val n =\
    \ grid(0).length\n        val result = new Array[Long](k)\n        var index =\
    \ 0\n        var min = 0L\n        var minIndex = 0\n        var minValue = 0L\n\
    \        var minValueIndex = 0\n        var minValueIndex2 = 0\n        var minValueIndex3\
    \ = 0\n        var minValueIndex4 = 0\n        var minValueIndex5 = 0\n      \
    \  var minValueIndex6 = 0\n        var minValueIndex7 = 0\n        var minValueIndex8\
    \ = 0\n        var minValueIndex9 = 0\n        var minValueIndex10 = 0\n     \
    \   var minValueIndex11 = 0\n        var minValueIndex12 = 0\n        var minValueIndex13\
    \ = 0\n        var minValueIndex14 = 0\n        var minValueIndex15 = 0\n    \
    \    var minValueIndex16 = 0\n        var minValueIndex17 = 0\n        var minValueIndex18\
    \ = 0\n        var minValueIndex19 = 0\n        var minValueIndex20 = 0\n    \
    \    var minValueIndex21 = 0\n        var minValueIndex22 = 0\n        var minValueIndex23\
    \ = 0\n        var minValueIndex24 = 0\n        var minValueIndex25 = 0\n    \
    \    var minValueIndex26 = 0\n        var minValueIndex27 = 0\n        var minValueIndex28\
    \ = 0\n        var minValueIndex29 = 0\n        var minValueIndex30 = 0\n    \
    \    var minValueIndex31 = 0\n        var minValueIndex32 = 0\n        var minValueIndex33\
    \ = 0\n        var minValueIndex34 = 0\n        var minValueIndex35 = 0\n    \
    \    var minValueIndex36 = 0\n        var minValueIndex37 = 0\n        var minValueIndex38\
    \ = 0\n        var minValueIndex39 = 0\n        var minValueIndex40 = 0\n    \
    \    var minValueIndex41 = 0\n        var minValueIndex42 = 0\n        var minValueIndex43\
    \ = 0\n        var minValueIndex44 = 0\n        var minValueIndex45 = 0\n    \
    \    var minValueIndex46 = 0\n        var minValueIndex47 = 0\n        var minValueIndex48\
    \ = 0\n        var minValueIndex49 = 0\n        var minValueIndex50 = 0\n    \
    \    var minValueIndex51 = 0\n        var minValueIndex52 = 0\n        var minValueIndex53\
    \ = 0\n        var minValueIndex54 = 0\n        var minValueIndex55 = 0\n    \
    \    var minValueIndex56 = 0\n        var minValueIndex57 = 0\n        var minValueIndex58\
    \ = 0\n        var minValueIndex59 = 0\n        var minValueIndex60 = 0\n    \
    \    var minValueIndex61 = 0\n        var minValueIndex62 = 0\n        var minValueIndex63\
    \ = 0\n        var minValueIndex64 = 0\n        var minValueIndex65 = 0\n    \
    \    var minValueIndex66 = 0\n        var minValueIndex67 = 0\n        var ",
  "        val n = grid.length\n        val m = grid(0).length\n        val grid =\
    \ mutable.ArrayBuffer.empty[List[Long]](m)\n        for (i <- 0 until n) {\n \
    \           val row = grid\n            val col = grid.map(_.toList)\n       \
    \     val rowIndex = i\n            val colIndex = i\n            val rowValue\
    \ = rowIndex * n + i\n            val colValue = colIndex * n + i\n          \
    \  row += List(rowValue)\n            col += List(colValue)\n        }\n     \
    \   val visited = mutable.HashSet[Long]()\n        val ans = mutable.ArrayBuffer.empty[Long]\n\
    \        val minPath = mutable.ArrayBuffer.empty[Long]\n        val minPathIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val minPathLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val minPathLength = mutable.ArrayBuffer.empty[Int]\n        val minPathLength\
    \ = mutable.ArrayBuffer.empty[Int]\n        val minPathLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val minPathLength = mutable.ArrayBuffer.empty[Int]\n        val minPathLength\
    \ = mutable.ArrayBuffer.empty[Int]\n        val minPathLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val minPathLength = mutable.ArrayBuffer.empty[Int]\n        val minPathLength\
    \ = mutable.ArrayBuffer.empty[Int]\n        val minPathLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val minPathLength = mutable.ArrayBuffer.empty[Int]\n        val minPathLength\
    \ = mutable.ArrayBuffer.empty[Int]\n        val minPathLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val minPathLength = mutable.ArrayBuffer.empty[Int]\n        val minPathLength\
    \ = mutable.ArrayBuffer.empty[Int]\n        val minPathLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val minPathLength = mutable.ArrayBuffer.empty[Int]\n        val minPathLength\
    \ = mutable.ArrayBuffer.empty[Int]\n        val minPathLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val minPathLength = mutable.ArrayBuffer.empty[Int]\n        val minPathLength\
    \ = mutable.ArrayBuffer.empty[Int]\n        val minPathLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val minPathLength = mutable.ArrayBuffer.empty[Int]\n        val minPathLength\
    \ = mutable.ArrayBuffer.empty[Int]\n        val minPathLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val minPathLength = mutable.ArrayBuffer.empty[Int]", "        val n =\
    \ grid.length\n        val m = grid(0).length\n        val lst_A = Array.ofDim[Long](k)\n\
    \        val lst_B = Array.ofDim[Long](k)\n        val lst_C = Array.ofDim[Long](k)\n\
    \        val lst_D = Array.ofDim[Long](k)\n        val lst_E = Array.ofDim[Long](k)\n\
    \        val lst_F = Array.ofDim[Long](k)\n        val lst_G = Array.ofDim[Long](k)\n\
    \        val lst_H = Array.ofDim[Long](k)\n        val lst_I = Array.ofDim[Long](k)\n\
    \        val lst_J = Array.ofDim[Long](k)\n        val lst_K = Array.ofDim[Long](k)\n\
    \        val lst_L = Array.ofDim[Long](k)\n        val lst_M = Array.ofDim[Long](k)\n\
    \        val lst_N = Array.ofDim[Long](k)\n        val lst_O = Array.ofDim[Long](k)\n\
    \        val lst_P = Array.ofDim[Long](k)\n        val lst_Q = Array.ofDim[Long](k)\n\
    \        val lst_R = Array.ofDim[Long](k)\n        val lst_S = Array.ofDim[Long](k)\n\
    \        val lst_T = Array.ofDim[Long](k)\n        val lst_U = Array.ofDim[Long](k)\n\
    \        val lst_V = Array.ofDim[Long](k)\n        val lst_W = Array.ofDim[Long](k)\n\
    \        val lst_X = Array.ofDim[Long](k)\n        val lst_Y = Array.ofDim[Long](k)\n\
    \        val lst_Z = Array.ofDim[Long](k)\n        val lst_A = Array.ofDim[Long](k)\n\
    \        val lst_B = Array.ofDim[Long](k)\n        val lst_C = Array.ofDim[Long](k)\n\
    \        val lst_D = Array.ofDim[Long](k)\n        val lst_E = Array.ofDim[Long](k)\n\
    \        val lst_F = Array.ofDim[Long](k)\n        val lst_G = Array.ofDim[Long](k)\n\
    \        val lst_H = Array.ofDim[Long](k)\n        val lst_I = Array.ofDim[Long](k)\n\
    \        val lst_J = Array.ofDim[Long](k)\n        val lst_K = Array.ofDim[Long](k)\n\
    \        val lst_", "        val grid = mutable.ArrayBuffer(grid)\n        val\
    \ visited = mutable.HashSet[Long]()\n        val result = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedCount = mutable.HashSet[Long]()\n        val resultCount =\
    \ mutable.HashSet[Long]()\n        val visitedCount2 = mutable.HashSet[Long]()\n\
    \        val resultCount2 = mutable.HashSet[Long]()\n        val visitedCount3\
    \ = mutable.HashSet[Long]()\n        val resultCount3 = mutable.HashSet[Long]()\n\
    \        val visitedCount4 = mutable.HashSet[Long]()\n        val resultCount4\
    \ = mutable.HashSet[Long]()\n        val visitedCount5 = mutable.HashSet[Long]()\n\
    \        val resultCount5 = mutable.HashSet[Long]()\n        val visitedCount6\
    \ = mutable.HashSet[Long]()\n        val resultCount6 = mutable.HashSet[Long]()\n\
    \        val visitedCount7 = mutable.HashSet[Long]()\n        val resultCount7\
    \ = mutable.HashSet[Long]()\n        val visitedCount8 = mutable.HashSet[Long]()\n\
    \        val resultCount8 = mutable.HashSet[Long]()\n        val visitedCount9\
    \ = mutable.HashSet[Long]()\n        val resultCount9 = mutable.HashSet[Long]()\n\
    \        val visitedCount10 = mutable.HashSet[Long]()\n        val resultCount10\
    \ = mutable.HashSet[Long]()\n        val visitedCount11 = mutable.HashSet[Long]()\n\
    \        val resultCount11 = mutable.HashSet[Long]()\n        val visitedCount12\
    \ = mutable.HashSet[Long]()\n        val resultCount12 = mutable.HashSet[Long]()\n\
    \        val visitedCount13 = mutable.HashSet[Long]()\n        val resultCount13\
    \ = mutable.HashSet[Long]()\n        val visitedCount14 = mutable.HashSet[Long]()\n\
    \        val resultCount14 = mutable.HashSet[Long]()\n        val visitedCount15\
    \ = mutable.HashSet[Long]()\n        val resultCount15 = mutable.HashSet[Long]()\n\
    \        val visitedCount16 = mutable.HashSet[Long]()\n        val resultCount16\
    \ = mutable.HashSet[Long]()\n        val visitedCount17 = ", "        val m =\
    \ grid.size\n        val n = grid(0).size\n        val path = new Array[Long](k)\n\
    \        val visited = new Array[Boolean](k)\n        val stack = new Array[Long](k)\n\
    \        val lst_A = new Array[Long](k)\n        val lst_B = new Array[Long](k)\n\
    \        val lst_C = new Array[Long](k)\n        val lst_D = new Array[Long](k)\n\
    \        val lst_E = new Array[Long](k)\n        val lst_F = new Array[Long](k)\n\
    \        val lst_G = new Array[Long](k)\n        val lst_H = new Array[Long](k)\n\
    \        val lst_I = new Array[Long](k)\n        val lst_J = new Array[Long](k)\n\
    \        val lst_K = new Array[Long](k)\n        val lst_L = new Array[Long](k)\n\
    \        val lst_M = new Array[Long](k)\n        val lst_N = new Array[Long](k)\n\
    \        val lst_O = new Array[Long](k)\n        val lst_P = new Array[Long](k)\n\
    \        val lst_Q = new Array[Long](k)\n        val lst_R = new Array[Long](k)\n\
    \        val lst_S = new Array[Long](k)\n        val lst_T = new Array[Long](k)\n\
    \        val lst_U = new Array[Long](k)\n        val lst_V = new Array[Long](k)\n\
    \        val lst_W = new Array[Long](k)\n        val lst_X = new Array[Long](k)\n\
    \        val lst_Y = new Array[Long](k)\n        val lst_Z = new Array[Long](k)\n\
    \        val lst_AA = new Array[Long](k)\n        val lst_AB = new Array[Long](k)\n\
    \        val lst_AC = new Array[Long](k)\n        val lst_AD = new Array[Long](k)\n\
    \        val lst_AE = new Array[Long](k)\n        val lst_AF = new Array[Long](k)\n\
    \        val lst_AG = new Array[Long](k)\n        val lst_AH = new Array[Long](k)\n\
    \        val lst_AI = new Array[Long](k)\n        val lst_AJ = new Array[Long](k)\n\
    \        val lst_AK = new Array[Long](k)\n        val lst_AL = new Array[Long](k)\n\
    \        val lst_AM = new Array[Long](k)\n", "        val N = grid.length\n  \
    \      val m = grid.head\n        val n = grid.last\n        val lst_A = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_B = mutable.ArrayBuffer.empty[Long]\n        var i = 0\n    \
    \    var j = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0", "  \
    \      val N = grid.length\n        val m = N * N\n        val lst_A = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_B = mutable.ArrayBuffer.empty[Long]\n        val lst_C = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_D = mutable.ArrayBuffer.empty[Long]\n        val lst_E = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_F = mutable.ArrayBuffer.empty[Long]\n        val lst_G = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_H = mutable.ArrayBuffer.empty[Long]\n        val lst_I = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_J = mutable.ArrayBuffer.empty[Long]\n        val lst_K = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_L = mutable.ArrayBuffer.empty[Long]\n        val lst_M = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_N = mutable.ArrayBuffer.empty[Long]\n        val lst_O = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_P = mutable.ArrayBuffer.empty[Long]\n        val lst_Q = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_R = mutable.ArrayBuffer.empty[Long]\n        val lst_S = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_T = mutable.ArrayBuffer.empty[Long]\n        val lst_U = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_V = mutable.ArrayBuffer.empty[Long]\n        val lst_W = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_X = mutable.ArrayBuffer.empty[Long]\n        val lst_Y = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_Z = mutable.ArrayBuffer.empty[Long]\n        val lst_A = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_B = mutable.ArrayBuffer.empty[Long]\n        val lst_C = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_D = mutable.ArrayBuffer.empty[Long]\n        val lst_E = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_F = mutable.ArrayBuffer.empty[Long]\n        val lst_G = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_H = mutable.ArrayBuffer.empty[Long]\n        val lst_I = mutable.ArrayBuffer.empty[",
  "        val n = grid.length\n        val m = grid(0).length\n        val visited\
    \ = new Array[Boolean](n)\n        val result = new Array[Long](k)\n        val\
    \ stack = new Array[Long](k)\n        val stackPointer = 0\n        var minPath\
    \ = 0\n        var minPathIndex = 0\n        var minPathValue = 0L\n        var\
    \ minPathValueIndex = 0\n        var minPathValueIndex2 = 0\n        var minPathValueIndex3\
    \ = 0\n        var minPathValueIndex4 = 0\n        var minPathValueIndex5 = 0\n\
    \        var minPathValueIndex6 = 0\n        var minPathValueIndex7 = 0\n    \
    \    var minPathValueIndex8 = 0\n        var minPathValueIndex9 = 0\n        var\
    \ minPathValueIndex10 = 0\n        var minPathValueIndex11 = 0\n        var minPathValueIndex12\
    \ = 0\n        var minPathValueIndex13 = 0\n        var minPathValueIndex14 =\
    \ 0\n        var minPathValueIndex15 = 0\n        var minPathValueIndex16 = 0\n\
    \        var minPathValueIndex17 = 0\n        var minPathValueIndex18 = 0\n  \
    \      var minPathValueIndex19 = 0\n        var minPathValueIndex20 = 0\n    \
    \    var minPathValueIndex21 = 0\n        var minPathValueIndex22 = 0\n      \
    \  var minPathValueIndex23 = 0\n        var minPathValueIndex24 = 0\n        var\
    \ minPathValueIndex25 = 0\n        var minPathValueIndex26 = 0\n        var minPathValueIndex27\
    \ = 0\n        var minPathValueIndex28 = 0\n        var minPathValueIndex29 =\
    \ 0\n        var minPathValueIndex30 = 0\n        var minPathValueIndex31 = 0\n\
    \        var minPathValueIndex32 = 0\n        var minPathValueIndex33 = 0\n  \
    \      var minPathValueIndex34 = 0\n        var minPathValueIndex35 = 0\n    \
    \    var minPathValueIndex36 = 0\n        var minPathValueIndex37 = 0\n      \
    \  var minPathValueIndex38 = 0\n        var minPathValueIndex39 = 0\n        var\
    \ minPathValueIndex40 = 0\n        var minPathValueIndex41 = 0\n        var minPathValueIndex42\
    \ = 0\n        var minPathValueIndex43 = 0\n        var minPathValueIndex44 =\
    \ 0\n        var minPathValueIndex45 = 0\n        var minPathValueIndex46 = 0\n\
    \        var minPathValueIndex47 = 0\n        var minPathValueIndex48 = 0\n  \
    \      var minPathValueIndex49 = 0\n        var minPathValueIndex50 = 0\n    \
    \    var minPathValueIndex51 = 0\n        var minPathValueIndex52 = 0\n      \
    \  var minPathValueIndex53 = 0\n        var minPathValueIndex54 = 0\n        var\
    \ minPathValueIndex55 = 0\n        var minPathValueIndex", "        val m = grid.size\n\
    \        val n = grid(0).size\n        val result = new Array[Long](k)\n     \
    \   val visited = new Array[Boolean](k)\n        val stack = new Array[Int](k)\n\
    \        val stackIndex = new Array[Int](k)\n        val stackIndexIndex = new\
    \ Array[Int](k)\n        val stackIndexIndexIndex = new Array[Int](k)\n      \
    \  val stackIndexIndexIndexIndex = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n  \
    \      val stackIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = new\
    \ Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array", "        val m = grid.length\n        val n = grid(0).length\n\
    \        val grid = mutable.ArrayBuffer.empty[List[Long]](m)\n        for (i <-\
    \ 0 until m) {\n            val row = grid(i)\n            val col = grid(0).zipWithIndex.filter(_._1\
    \ == i).map(_._2).max\n            row += col\n            grid += row\n     \
    \   }\n        val visited = mutable.ArrayBuffer.empty[Boolean](m)\n        val\
    \ result = mutable.ArrayBuffer.empty[Long]\n        val visitedList = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val resultList = mutable.ArrayBuffer.empty[Long]\n        val visitedListList\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val resultListList = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListListList = mutable.ArrayBuffer.empty[Boolean](m)\n   \
    \     val resultListListList = mutable.ArrayBuffer.empty[Long]\n        val visitedListListListList\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val resultListListListList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListListListListList =\
    \ mutable.ArrayBuffer.empty[Boolean](m)\n        val resultListListListListList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListListListListListList\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val resultListListListListListList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListListListListListListList\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val resultListListListListListListList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListListListListListListListList\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val resultListListListListListListListList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListListListListListListListListList\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val resultListListListListListListListListList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListListListListListListListListList\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val resultListListListListListListListListListList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListListListListListListListListListList\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val resultListListListListListListListListListList\
    \ = mutable.ArrayBuffer.empty[", "        val N = grid.length\n        val M =\
    \ grid(0).length\n        val result = new Array[Long](k)\n        val visited\
    \ = new Array[Boolean](k)\n        val stack = new Array[Int](k)\n        val\
    \ stackSize = new Array[Int](k)\n        val stackIndex = new Array[Int](k)\n\
    \        val stackPointer = new Array[Int](k)\n        val stackPointerIndex =\
    \ new Array[Int](k)\n        val stackPointerPointer = new Array[Int](k)\n   \
    \     val stackPointerPointerIndex = new Array[Int](k)\n        val stackPointerPointerPointer\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerIndex = new Array[Int](k)\n\
    \        val stackPointerPointerPointerPointer = new Array[Int](k)\n        val\
    \ stackPointerPointerPointerPointerIndex = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointer\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerIndex = new\
    \ Array[Int](k)\n        val stackPointerPointerPointerPointerPointer = new Array[Int](k)\n\
    \        val stackPointerPointerPointerPointerIndex = new Array[Int](k)\n    \
    \    val stackPointerPointerPointerPointerPointer = new Array[Int](k)\n      \
    \  val stackPointerPointerPointerPointerIndex = new Array[Int](k)\n        val\
    \ stackPointerPointerPointerPointerPointer = new Array[Int](k)\n        val stackPointerPointerPointerPointerIndex\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointer =\
    \ new Array[Int](k)\n        val stackPointerPointerPointerPointerIndex = new\
    \ Array[Int](k)\n        val stackPointerPointerPointerPointerPointer = new Array[Int](k)\n\
    \        val stackPointerPointerPointerPointerIndex = new Array[Int](k)\n    \
    \    val stackPointerPointerPointerPointerPointer = new Array[Int](k)\n      \
    \  val stackPointerPointerPointerPointerIndex = new Array[Int](k)\n        val\
    \ stackPointerPointerPointerPointerPointer = new Array[Int](k)\n        val stackPointerPointerPointerPointerIndex\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointer =\
    \ new Array[Int](k)\n        val stackPointerPointerPointerPointerPointerIndex\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointer =\
    \ new Array[Int](k)\n        val stackPointerPointerPointerPointerPointerIndex\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointerPointer\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointerIndex\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointer",
  "        val m = grid.size\n        val n = grid(0).size\n        val paths = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        val visited = mutable.HashSet[Long]()\n        val queue = mutable.Queue[Long]()\n\
    \        val visitedList = mutable.ArrayBuffer.empty[Long]\n        val queueList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList2 = mutable.ArrayBuffer.empty[Long]\n\
    \        val queueList2 = mutable.ArrayBuffer.empty[Long]\n        val visitedList3\
    \ = mutable.ArrayBuffer.empty[Long]\n        val queueList3 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList4 = mutable.ArrayBuffer.empty[Long]\n        val queueList4\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList5 = mutable.ArrayBuffer.empty[Long]\n\
    \        val queueList5 = mutable.ArrayBuffer.empty[Long]\n        val visitedList6\
    \ = mutable.ArrayBuffer.empty[Long]\n        val queueList6 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList7 = mutable.ArrayBuffer.empty[Long]\n        val queueList7\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList8 = mutable.ArrayBuffer.empty[Long]\n\
    \        val queueList8 = mutable.ArrayBuffer.empty[Long]\n        val visitedList9\
    \ = mutable.ArrayBuffer.empty[Long]\n        val queueList9 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList10 = mutable.ArrayBuffer.empty[Long]\n        val queueList10\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList11 = mutable.ArrayBuffer.empty[Long]\n\
    \        val queueList11 = mutable.ArrayBuffer.empty[Long]\n        val visitedList12\
    \ = mutable.ArrayBuffer.empty[Long]\n        val queueList12 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList13 = mutable.ArrayBuffer.empty[Long]\n        val queueList13\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList14 = mutable.ArrayBuffer.empty[Long]\n\
    \        val queueList14 = mutable.ArrayBuffer.empty[Long]\n        val visitedList15\
    \ = mutable.ArrayBuffer.empty[Long]\n        val queueList15 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList16 = mutable.ArrayBuffer.empty[Long]\n        val queueList16\
    \ = ", "        val n = grid.size\n        val m = grid(0).size\n        val result\
    \ = new mutable.ListBuffer[Long]\n        val visited = new mutable.HashSet[Long]\n\
    \        val visitedCount = new mutable.HashMap[Long, Int]\n        val visitedCountMap\
    \ = new mutable.HashMap[Long, Int]\n        val visitedCountMap2 = new mutable.HashMap[Long,\
    \ Int]\n        val visitedCountMap3 = new mutable.HashMap[Long, Int]\n      \
    \  val visitedCountMap4 = new mutable.HashMap[Long, Int]\n        val visitedCountMap5\
    \ = new mutable.HashMap[Long, Int]\n        val visitedCountMap6 = new mutable.HashMap[Long,\
    \ Int]\n        val visitedCountMap7 = new mutable.HashMap[Long, Int]\n      \
    \  val visitedCountMap8 = new mutable.HashMap[Long, Int]\n        val visitedCountMap9\
    \ = new mutable.HashMap[Long, Int]\n        val visitedCountMap10 = new mutable.HashMap[Long,\
    \ Int]\n        val visitedCountMap11 = new mutable.HashMap[Long, Int]\n     \
    \   val visitedCountMap12 = new mutable.HashMap[Long, Int]\n        val visitedCountMap13\
    \ = new mutable.HashMap[Long, Int]\n        val visitedCountMap14 = new mutable.HashMap[Long,\
    \ Int]\n        val visitedCountMap15 = new mutable.HashMap[Long, Int]\n     \
    \   val visitedCountMap16 = new mutable.HashMap[Long, Int]\n        val visitedCountMap17\
    \ = new mutable.HashMap[Long, Int]\n        val visitedCountMap18 = new mutable.HashMap[Long,\
    \ Int]\n        val visitedCountMap19 = new mutable.HashMap[Long, Int]\n     \
    \   val visitedCountMap20 = new mutable.HashMap[Long, Int]\n        val visitedCountMap21\
    \ = new mutable.HashMap[Long, Int]\n        val visitedCountMap22 = new mutable.HashMap[Long,\
    \ Int]\n        val visitedCountMap23 = new mutable.HashMap[Long, Int]\n     \
    \   val visitedCountMap24 = new mutable.HashMap[Long, Int]\n        val visitedCountMap25\
    \ = new mutable.HashMap[Long, Int]\n        val visitedCountMap26 = new mutable.HashMap[Long,\
    \ Int]\n        val visitedCountMap27 = new mutable.HashMap[Long, Int]\n", " \
    \       val n = grid.length\n        val m = grid(0).length\n        val result\
    \ = new Array[Long](k)\n        var i = 0\n        var j = 0\n        var min\
    \ = 0\n        var minIndex = 0\n        var minValue = 0\n        var minPath\
    \ = 0\n        var isFound = false\n        var isFound2 = false\n        var\
    \ isFound3 = false\n        var isFound4 = false\n        var isFound5 = false\n\
    \        var isFound6 = false\n        var isFound7 = false\n        var isFound8\
    \ = false\n        var isFound9 = false\n        var isFound10 = false\n     \
    \   var isFound11 = false\n        var isFound12 = false\n        var isFound13\
    \ = false\n        var isFound14 = false\n        var isFound15 = false\n    \
    \    var isFound16 = false\n        var isFound17 = false\n        var isFound18\
    \ = false\n        var isFound19 = false\n        var isFound20 = false\n    \
    \    var isFound21 = false\n        var isFound22 = false\n        var isFound23\
    \ = false\n        var isFound24 = false\n        var isFound25 = false\n    \
    \    var isFound26 = false\n        var isFound27 = false\n        var isFound28\
    \ = false\n        var isFound29 = false\n        var isFound30 = false\n    \
    \    var isFound31 = false\n        var isFound32 = false\n        var isFound33\
    \ = false\n        var isFound34 = false\n        var isFound35 = false\n    \
    \    var isFound36 = false\n        var isFound37 = false\n        var isFound38\
    \ = false\n        var isFound39 = false\n        var isFound40 = false\n    \
    \    var isFound41 = false\n        var isFound42 = false\n        var isFound43\
    \ = false\n        var isFound44 = false\n        var isFound45 = false\n    \
    \    var isFound46 = false\n        var isFound47 = false\n        var isFound48\
    \ = false\n        var isFound49 = false\n        var isFound50 = false\n    \
    \    var isFound51 = false\n        var isFound52 = false\n        var isFound53\
    \ = false\n        var isFound54 = false\n        var isFound55 = false\n    \
    \    var isFound56 = false\n        var isFound57 = false\n        var isFound58\
    \ = false\n        var isFound59 = false\n        var isFound60 = false\n    \
    \    var isFound61 = false\n        var isFound62 = false\n        var isFound63\
    \ = false\n        var isFound64 = false\n        var isFound65 = false\n    \
    \    var isFound66 = false\n        var isFound67 = false\n        var isFound68\
    \ = false\n        var isFound69 = false\n        var isFound70 = false\n    \
    \    var isFound71 = false\n        var isFound72 = false\n        var isFound73\
    \ = false\n        var isFound74 = false\n        var isFound75", "        val\
    \ m = grid.length\n        val n = grid(0).length\n        val result = new mutable.ListBuffer[Long]\n\
    \        val visited = new mutable.HashSet[Long]\n        val visitedSet = new\
    \ mutable.HashSet[Long]\n        val visitedList = new mutable.ArrayList[Long]\n\
    \        val visitedList2 = new mutable.ArrayList[Long]\n        val visitedList3\
    \ = new mutable.ArrayList[Long]\n        val visitedList4 = new mutable.ArrayList[Long]\n\
    \        val visitedList5 = new mutable.ArrayList[Long]\n        val visitedList6\
    \ = new mutable.ArrayList[Long]\n        val visitedList7 = new mutable.ArrayList[Long]\n\
    \        val visitedList8 = new mutable.ArrayList[Long]\n        val visitedList9\
    \ = new mutable.ArrayList[Long]\n        val visitedList10 = new mutable.ArrayList[Long]\n\
    \        val visitedList11 = new mutable.ArrayList[Long]\n        val visitedList12\
    \ = new mutable.ArrayList[Long]\n        val visitedList13 = new mutable.ArrayList[Long]\n\
    \        val visitedList14 = new mutable.ArrayList[Long]\n        val visitedList15\
    \ = new mutable.ArrayList[Long]\n        val visitedList16 = new mutable.ArrayList[Long]\n\
    \        val visitedList17 = new mutable.ArrayList[Long]\n        val visitedList18\
    \ = new mutable.ArrayList[Long]\n        val visitedList19 = new mutable.ArrayList[Long]\n\
    \        val visitedList20 = new mutable.ArrayList[Long]\n        val visitedList21\
    \ = new mutable.ArrayList[Long]\n        val visitedList22 = new mutable.ArrayList[Long]\n\
    \        val visitedList23 = new mutable.ArrayList[Long]\n        val visitedList24\
    \ = new mutable.ArrayList[Long]\n        val visitedList25 = new mutable.ArrayList[Long]\n\
    \        val visitedList26 = new mutable.ArrayList[Long]\n        val visitedList27\
    \ = new mutable.ArrayList[Long]\n        val visitedList28 = new mutable.ArrayList[Long]\n\
    \        val visitedList29 = new mutable.ArrayList[Long]\n        val visitedList30\
    \ = new mutable.ArrayList[Long]\n        val visitedList31 = new mutable.ArrayList[Long]\n\
    \        val visitedList32 = new mutable.ArrayList[Long]\n        val visitedList33\
    \ = new mutable.ArrayList[", "        val N = grid.size\n        val m = N * N\n\
    \        val lst_A = mutable.ArrayBuffer.empty[Long]\n        val lst_B = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_C = mutable.ArrayBuffer.empty[Long]\n        val lst_D = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_E = mutable.ArrayBuffer.empty[Long]\n        val lst_F = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_G = mutable.ArrayBuffer.empty[Long]\n        val lst_H = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_I = mutable.ArrayBuffer.empty[Long]\n        val lst_J = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_K = mutable.ArrayBuffer.empty[Long]\n        val lst_L = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_M = mutable.ArrayBuffer.empty[Long]\n        val lst_N = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_O = mutable.ArrayBuffer.empty[Long]\n        val lst_P = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_Q = mutable.ArrayBuffer.empty[Long]\n        val lst_R = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_S = mutable.ArrayBuffer.empty[Long]\n        val lst_T = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_U = mutable.ArrayBuffer.empty[Long]\n        val lst_V = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_W = mutable.ArrayBuffer.empty[Long]\n        val lst_X = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_Y = mutable.ArrayBuffer.empty[Long]\n        val lst_Z = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_AA = mutable.ArrayBuffer.empty[Long]\n        val lst_AB = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_AC = mutable.ArrayBuffer.empty[Long]\n        val lst_AD = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_AE = mutable.ArrayBuffer.empty[Long]\n        val lst_AF = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_AG = mutable.ArrayBuffer.empty[Long]\n        val lst_AH = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_AI", "        val N = grid.length\n        val m = grid.head\n\
    \        val n = m.length\n        val lst_A = ArrayBuffer.empty[Long]\n     \
    \   val lst_B = ArrayBuffer.empty[Long]\n        var i = 0\n        var j = 0\n\
    \        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n\
    \        var m = 0\n        var n = 0\n        var m = 0\n        var n = 0\n\
    \        var m = 0\n        var n = 0\n        var m = 0\n        var n = 0\n\
    \        var m = 0\n        var n = 0\n        var m = 0\n        var n = 0\n\
    \        var m = 0\n        var n = 0\n        var m = 0\n        var n = 0\n\
    \        var m = 0\n        var n = 0\n        var m = 0\n        var n = 0\n\
    \        var m = 0\n        var n = 0\n        var m = 0\n        var n = 0\n\
    \        var m = 0\n        var n = 0\n        var m = 0\n        var n = 0\n\
    \        var m = 0\n        var n = 0\n        var m = 0\n        var n = 0\n\
    \        var m = 0\n        var n = 0\n        var m = 0\n        var n = 0\n\
    \        var m = 0\n        var n = 0\n        var m = 0\n        var n = 0\n\
    \        var m = 0\n        var n = 0\n        var m = 0\n        var n = 0\n\
    \        var m = 0\n        var n = 0\n        var m = 0\n        var n = 0\n\
    \        var m = 0\n        var n = 0\n        var m = 0\n        var n = 0\n\
    \        var m = 0\n        var n = 0\n        var m = 0\n        var n = 0\n\
    \        var m = 0\n        var n = 0\n        var m = 0\n        var n = 0\n\
    \        var m = 0\n        var n = 0\n        var m = 0\n        var n = 0\n\
    \        var m = 0\n        var n = 0\n        var m = 0\n        var n = 0\n\
    \        var m = 0\n        var n = 0\n        var m = 0\n        var n = 0\n\
    \        var m = 0\n        var n = 0\n        var m = 0\n        var n = 0\n\
    \        var m = 0\n        var n = 0\n        var m = 0\n        var n = 0\n\
    \        var m = 0\n        var n = 0\n        var m = 0\n        var n = 0\n\
    \        var m = 0\n        var n = 0\n        var m = 0\n        var n = 0\n\
    \        var m = 0\n        var n = 0\n        var m = 0\n        var n = 0\n\
    \        var m = 0\n        var n = 0\n        var m = 0\n        var n = 0\n\
    \        var m = 0\n        var n = 0\n        var m = 0\n        var n = 0\n\
    \        var m = 0\n        var n = 0\n        var m = 0\n        var n = 0\n\
    \        var m = 0\n        var n = 0\n        var m = 0\n        var n = 0\n\
    \        var m = 0\n        var n = 0\n        var m = 0\n        var n = 0",
  "        val n = grid.length\n        val m = grid(0).length\n        val grid =\
    \ mutable.ArrayBuffer.empty[List[Long]](m)\n        val visited = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val queue = mutable.Queue[List[Long]]()\n        val ans = mutable.ArrayBuffer.empty[Long](m)\n\
    \        val visitedCount = mutable.ArrayBuffer.empty[Int](m)\n        val queueCount\
    \ = mutable.Queue[Int]()\n        val visitedCounts = mutable.ArrayBuffer.empty[Int](m)\n\
    \        val queueCounts = mutable.Queue[Int]()\n        val visitedCounts_ =\
    \ mutable.ArrayBuffer.empty[Int](m)\n        val queueCounts_ = mutable.Queue[Int]()\n\
    \        val visitedCounts_ = mutable.ArrayBuffer.empty[Int](m)\n        val queueCounts_\
    \ = mutable.Queue[Int]()\n        val visitedCounts_ = mutable.ArrayBuffer.empty[Int](m)\n\
    \        val queueCounts_ = mutable.Queue[Int]()\n        val visitedCounts_ =\
    \ mutable.ArrayBuffer.empty[Int](m)\n        val queueCounts_ = mutable.Queue[Int]()\n\
    \        val visitedCounts_ = mutable.ArrayBuffer.empty[Int](m)\n        val queueCounts_\
    \ = mutable.Queue[Int]()\n        val visitedCounts_ = mutable.ArrayBuffer.empty[Int](m)\n\
    \        val queueCounts_ = mutable.Queue[Int]()\n        val visitedCounts_ =\
    \ mutable.ArrayBuffer.empty[Int](m)\n        val queueCounts_ = mutable.Queue[Int]()\n\
    \        val visitedCounts_ = mutable.ArrayBuffer.empty[Int](m)\n        val queueCounts_\
    \ = mutable.Queue[Int]()\n        val visitedCounts_ = mutable.ArrayBuffer.empty[Int](m)\n\
    \        val queueCounts_ = mutable.Queue[Int]()\n        val visitedCounts_ =\
    \ mutable.ArrayBuffer.empty[Int](m)\n        val queueCounts_ = mutable.Queue[Int]()\n\
    \        val visitedCounts_ = mutable.ArrayBuffer.empty[Int](m)\n        val queueCounts_\
    \ = mutable.Queue[Int]()\n        val visitedCounts_ = mutable.ArrayBuffer.empty[Int](m)\n\
    \        val queueCounts_ = mutable.Queue[Int]()\n        val visitedCounts_ =\
    \ mutable.ArrayBuffer.empty[Int](m)", "        val n = grid.length\n        val\
    \ m = grid(0).length\n        val lst_A = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_B = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_C = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_D\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_E = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_F = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_G = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_H\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_I = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_J = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_K = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_L\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_M = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_N = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_O = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_P\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_Q = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_R = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_S = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_T\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_U = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_V = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_W = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_X\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_Y = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_Z = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_A = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_B\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_C = scala.collection.mutable.ArrayBuffer.empty",
  "        val m = grid.length\n        val n = grid(0).length\n        val grid =\
    \ mutable.ArrayBuffer.empty[List[Long]](m)\n        for (i <- 0 until m) {\n \
    \           val row = grid(i)\n            val col = grid(0).zipWithIndex.filter(_._1\
    \ == i).map(_._2)\n            row += col\n            grid += row\n        }\n\
    \        val visited = mutable.HashSet[Long]()\n        val result = mutable.ArrayBuffer.empty[Long]\n\
    \        def dfs(i : Long, j : Long, visited : mutable.HashSet[Long], result :\
    \ mutable.ArrayBuffer[Long], k : Long) : Unit = {\n            if (i == 0 || j\
    \ == 0 || i == n || j == n) {\n                return\n            }\n       \
    \     val cell = grid((i-1)/n, (j-1)/n)\n            if (visited.contains(cell))\
    \ {\n                return\n            }\n            visited += cell\n    \
    \        val lst_A = cell.zipWithIndex.filter(_._1 == i).map(_._2)\n         \
    \   val lst_B = cell.zipWithIndex.filter(_._1 == j).map(_._2)\n            if\
    \ (lst_A.size < k && lst_B.size < k) {\n                val lst_C = lst_A.zip(lst_B).filter(_._1\
    \ < _._1).map(_._2)\n                val lst_D = lst_A.zip(lst_B).filter(_._1\
    \ > _._1).map(_._2)\n                val lst_E = lst_A.zip(lst_B).filter(_._1\
    \ == _._1).map(_._2)\n                val lst_F = lst_A.zip(lst_B).filter(_._1\
    \ == _._2).map(_._2)\n                val lst_G = lst_A.zip(lst_B).filter(_._2\
    \ == _._1).map(_._2)\n                val lst_H = lst_A.zip(lst_B).filter(_._2\
    \ == _._2).map(_._2)\n                val lst_I = lst_A.zip(lst_B).filter(_._2\
    \ < _._1).map(_._2)\n                val lst_J = lst_A.zip(lst_B).filter(_._2\
    \ > _._1).map(_._2)\n                val lst_K = lst_A.zip(lst_B).filter(_._2\
    \ == _._1).map(_._2)\n                val lst_L = lst_A.zip(lst_B).filter(_._2\
    \ == _._2).map(_._2)\n                val lst_M = lst_A.zip(lst_B).filter(_._",
  "        val N = grid.size\n        val grid = mutable.ArrayBuffer.empty[List[Long]](N)\n\
    \        for (row <- 0 until N) {\n            val row = grid.updated(row, mutable.ArrayBuffer.empty[Long])\n\
    \            for (col <- 0 until N) {\n                val cell = row.updated(col,\
    \ mutable.ArrayBuffer.empty[Long])\n                val value = gridRow(grid,\
    \ row, col)\n                val neighbors = getNeighbors(grid, row, col)\n  \
    \              for (neighbor <- neighbors) {\n                    val neighborRow\
    \ = grid.updated(neighbor, mutable.ArrayBuffer.empty[Long])\n                \
    \    val neighborCell = neighborRow.updated(col, mutable.ArrayBuffer.empty[Long])\n\
    \                    val neighborValue = gridRow(grid, neighbor, col)\n      \
    \              if (neighborValue < value) {\n                        val newCell\
    \ = cell.updated(neighbor, neighborValue)\n                        val newRow\
    \ = neighborCell.updated(row, value)\n                        val newGrid = neighborRow.updated(col,\
    \ newCell)\n                        val newValue = gridRow(grid, row, col)\n \
    \                       val newNeighbors = getNeighbors(grid, row, col)\n    \
    \                    val newNeighbor = neighbors.updated(neighbor, neighborValue)\n\
    \                        val newNeighborRow = neighborCell.updated(neighbor, newCell)\n\
    \                        val newNeighborGrid = neighborRow.updated(neighbor, newCell)\n\
    \                        val newNeighborValue = gridRow(grid, neighbor, neighbor)\n\
    \                        val newNeighborNeighbors = getNeighbors(grid, neighbor,\
    \ neighbor)\n                        val newNeighborNeighbor = neighbors.updated(neighbor,\
    \ newNeighborValue)\n                        val newNeighborNeighborRow = neighborCell.updated(neighbor,\
    \ newNeighborCell)\n                        val newNeighborNeighborGrid = neighborRow.updated(neighbor,\
    \ newNeighborCell)\n                        val newNeighborNeighborValue = gridRow(grid,\
    \ neighbor, neighbor)\n                        val newNeighborNeighborNeighbors\
    \ = getNeighbors(grid, neighbor, neighbor)\n                        val newNeighborNeighborNeighbor\
    \ = neighbors.updated(neighbor, newNeighborNeighborValue)\n                  \
    \      val newNeighborNeighborNeighborRow = neighborCell.updated(neighbor, newNeighborNeighborCell)\n\
    \                        val newNeighborNeighborNeighborGrid = neighborRow.updated(neighbor,\
    \ newNeighborNeighborCell)\n                        val newNeighborNeighborNeighborValue\
    \ = gridRow(grid, neighbor, neighbor)\n                        val newNeighborNeighborNeighborNeighbors\
    \ = getNeighbors(grid, neighbor, neighbor)\n                        val newNeighborNeighborNeighborNeighbor\
    \ = neighbors.updated(neighbor, newNeighborNeighborNeighborValue)\n          \
    \              val newNeighborNeighborNeighborNeighborRow = neighborCell.updated(neighbor,\
    \ newNeighborNeighborNeighborCell)\n                        val newNeighbor",
  "        val n = grid.length\n        val m = grid(0).length\n        val result\
    \ = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n        val\
    \ visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array",
  "        val m = grid.length\n        val n = grid(0).length\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val visited = new mutable.HashSet[Long]()\n\
    \        val visitedList = new mutable.ListBuffer[Long]()\n        val visitedList2\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList3 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList4 = new mutable.ListBuffer[Long]()\n        val visitedList5\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList6 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList7 = new mutable.ListBuffer[Long]()\n        val visitedList8\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList9 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList10 = new mutable.ListBuffer[Long]()\n        val visitedList11\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList12 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList13 = new mutable.ListBuffer[Long]()\n        val visitedList14\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList15 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList16 = new mutable.ListBuffer[Long]()\n        val visitedList17\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList18 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList19 = new mutable.ListBuffer[Long]()\n        val visitedList20\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList21 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList22 = new mutable.ListBuffer[Long]()\n        val visitedList23\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList24 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList25 = new mutable.ListBuffer[Long]()\n        val visitedList26\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList27 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList28 = new mutable.ListBuffer[Long]()\n        val visitedList29\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList30 = new mut", "  \
    \      val m = grid.length\n        val n = grid(0).length\n        val lst_A\
    \ = mutable.ArrayBuffer.empty[Long]\n        val lst_B = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_C = mutable.ArrayBuffer.empty[Long]\n        val lst_D = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_E = mutable.ArrayBuffer.empty[Long]\n        val lst_F = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_G = mutable.ArrayBuffer.empty[Long]\n        val lst_H = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_I = mutable.ArrayBuffer.empty[Long]\n        val lst_J = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_K = mutable.ArrayBuffer.empty[Long]\n        val lst_L = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_M = mutable.ArrayBuffer.empty[Long]\n        val lst_N = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_O = mutable.ArrayBuffer.empty[Long]\n        val lst_P = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_Q = mutable.ArrayBuffer.empty[Long]\n        val lst_R = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_S = mutable.ArrayBuffer.empty[Long]\n        val lst_T = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_U = mutable.ArrayBuffer.empty[Long]\n        val lst_V = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_W = mutable.ArrayBuffer.empty[Long]\n        val lst_X = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_Y = mutable.ArrayBuffer.empty[Long]\n        val lst_Z = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_A = mutable.ArrayBuffer.empty[Long]\n        val lst_B = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_C = mutable.ArrayBuffer.empty[Long]\n        val lst_D = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_E = mutable.ArrayBuffer.empty[Long]\n        val lst_F = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_G = mutable.ArrayBuffer.empty[Long]\n        val lst_H = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_I = mutable.ArrayBuffer.empty[", "        val m = grid.size\n\
    \        val n = grid(0).size\n        val lst_A = Array.ofDim[Long](k + 1)\n\
    \        val lst_B = Array.ofDim[Long](k + 1)\n        val lst_C = Array.ofDim[Long](k\
    \ + 1)\n        val lst_D = Array.ofDim[Long](k + 1)\n        val lst_E = Array.ofDim[Long](k\
    \ + 1)\n        val lst_F = Array.ofDim[Long](k + 1)\n        val lst_G = Array.ofDim[Long](k\
    \ + 1)\n        val lst_H = Array.ofDim[Long](k + 1)\n        val lst_I = Array.ofDim[Long](k\
    \ + 1)\n        val lst_J = Array.ofDim[Long](k + 1)\n        val lst_K = Array.ofDim[Long](k\
    \ + 1)\n        val lst_L = Array.ofDim[Long](k + 1)\n        val lst_M = Array.ofDim[Long](k\
    \ + 1)\n        val lst_N = Array.ofDim[Long](k + 1)\n        val lst_O = Array.ofDim[Long](k\
    \ + 1)\n        val lst_P = Array.ofDim[Long](k + 1)\n        val lst_Q = Array.ofDim[Long](k\
    \ + 1)\n        val lst_R = Array.ofDim[Long](k + 1)\n        val lst_S = Array.ofDim[Long](k\
    \ + 1)\n        val lst_T = Array.ofDim[Long](k + 1)\n        val lst_U = Array.ofDim[Long](k\
    \ + 1)\n        val lst_V = Array.ofDim[Long](k + 1)\n        val lst_W = Array.ofDim[Long](k\
    \ + 1)\n        val lst_X = Array.ofDim[Long](k + 1)\n        val lst_Y = Array.ofDim[Long](k\
    \ + 1)\n        val lst_Z = Array.ofDim[Long](k + 1)\n        val lst_A = Array.ofDim[Long](k\
    \ + 1)\n        val lst_B = Array.ofDim[Long](k + 1)\n        val lst_C = Array.ofDim[Long](k\
    \ + 1)\n        val lst_D = Array.ofDim[Long](k + 1)\n        val lst_E = Array.ofDim[Long](k\
    \ + 1)\n        val lst_F = Array.ofDim[Long](k + 1)\n        val lst_G = Array.ofDim[Long](k\
    \ + 1)\n        val lst_H = Array.ofDim[Long](k + 1)\n        val lst_I = Array.ofDim[Long](",
  "        val n = grid.size\n        val m = grid(0).size\n        val result = new\
    \ mutable.ListBuffer[Long]()\n        val visited = new mutable.HashSet[Long]()\n\
    \        val visitedList = new mutable.ListBuffer[Long]()\n        val visitedList2\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList3 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList4 = new mutable.ListBuffer[Long]()\n        val visitedList5\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList6 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList7 = new mutable.ListBuffer[Long]()\n        val visitedList8\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList9 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList10 = new mutable.ListBuffer[Long]()\n        val visitedList11\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList12 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList13 = new mutable.ListBuffer[Long]()\n        val visitedList14\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList15 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList16 = new mutable.ListBuffer[Long]()\n        val visitedList17\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList18 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList19 = new mutable.ListBuffer[Long]()\n        val visitedList20\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList21 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList22 = new mutable.ListBuffer[Long]()\n        val visitedList23\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList24 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList25 = new mutable.ListBuffer[Long]()\n        val visitedList26\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList27 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList28 = new mutable.ListBuffer[Long]()\n        val visitedList29\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList30 = new mut", "  \
    \      val n = grid.length\n        val m = grid(0).length\n        val result\
    \ = new mutable.ListBuffer[Long]\n        val visited = new mutable.HashSet[Long]\n\
    \        val visitedCount = new mutable.HashMap[Long, Int]\n        val visitedCountMax\
    \ = k\n        val visitedCountMaxIndex = k - 1\n        val visitedCountMaxIndex2\
    \ = k - 2\n        val visitedCountMaxIndex3 = k - 3\n        val visitedCountMaxIndex4\
    \ = k - 4\n        val visitedCountMaxIndex5 = k - 5\n        val visitedCountMaxIndex6\
    \ = k - 6\n        val visitedCountMaxIndex7 = k - 7\n        val visitedCountMaxIndex8\
    \ = k - 8\n        val visitedCountMaxIndex9 = k - 9\n        val visitedCountMaxIndex10\
    \ = k - 10\n        val visitedCountMaxIndex11 = k - 11\n        val visitedCountMaxIndex12\
    \ = k - 12\n        val visitedCountMaxIndex13 = k - 13\n        val visitedCountMaxIndex14\
    \ = k - 14\n        val visitedCountMaxIndex15 = k - 15\n        val visitedCountMaxIndex16\
    \ = k - 16\n        val visitedCountMaxIndex17 = k - 17\n        val visitedCountMaxIndex18\
    \ = k - 18\n        val visitedCountMaxIndex19 = k - 19\n        val visitedCountMaxIndex20\
    \ = k - 20\n        val visitedCountMaxIndex21 = k - 21\n        val visitedCountMaxIndex22\
    \ = k - 22\n        val visitedCountMaxIndex23 = k - 23\n        val visitedCountMaxIndex24\
    \ = k - 24\n        val visitedCountMaxIndex25 = k - 25\n        val visitedCountMaxIndex26\
    \ = k - 26\n        val visitedCountMaxIndex27 = k - 27\n        val visitedCountMaxIndex28\
    \ = k - 28\n        val visitedCountMaxIndex29 = k - 29\n        val visitedCountMaxIndex30\
    \ = k - 30\n        val visitedCountMaxIndex31 = k - 31\n        val visitedCountMaxIndex32\
    \ = k - 32\n        val visitedCountMaxIndex33 = k - 33\n        val visitedCountMaxIndex34\
    \ = k - 34\n        val visitedCountMaxIndex35 = k - 35\n        val visitedCountMaxIndex36\
    \ = ", "        val n = grid.length\n        val m = grid(0).length\n        val\
    \ result = new Array[Long](k)\n        var min = 0\n        var index = 0\n  \
    \      var index2 = 0\n        var index3 = 0\n        var index4 = 0\n      \
    \  var index5 = 0\n        var index6 = 0\n        var index7 = 0\n        var\
    \ index8 = 0\n        var index9 = 0\n        var index10 = 0\n        var index11\
    \ = 0\n        var index12 = 0\n        var index13 = 0\n        var index14 =\
    \ 0\n        var index15 = 0\n        var index16 = 0\n        var index17 = 0\n\
    \        var index18 = 0\n        var index19 = 0\n        var index20 = 0\n \
    \       var index21 = 0\n        var index22 = 0\n        var index23 = 0\n  \
    \      var index24 = 0\n        var index25 = 0\n        var index26 = 0\n   \
    \     var index27 = 0\n        var index28 = 0\n        var index29 = 0\n    \
    \    var index30 = 0\n        var index31 = 0\n        var index32 = 0\n     \
    \   var index33 = 0\n        var index34 = 0\n        var index35 = 0\n      \
    \  var index36 = 0\n        var index37 = 0\n        var index38 = 0\n       \
    \ var index39 = 0\n        var index40 = 0\n        var index41 = 0\n        var\
    \ index42 = 0\n        var index43 = 0\n        var index44 = 0\n        var index45\
    \ = 0\n        var index46 = 0\n        var index47 = 0\n        var index48 =\
    \ 0\n        var index49 = 0\n        var index50 = 0\n        var index51 = 0\n\
    \        var index52 = 0\n        var index53 = 0\n        var index54 = 0\n \
    \       var index55 = 0\n        var index56 = 0\n        var index57 = 0\n  \
    \      var index58 = 0\n        var index59 = 0\n        var index60 = 0\n   \
    \     var index61 = 0\n        var index62 = 0\n        var index63 = 0\n    \
    \    var index64 = 0\n        var index65 = 0\n        var index66 = 0\n     \
    \   var index67 = 0\n        var index68 = 0\n        var index69 = 0\n      \
    \  var index70 = 0\n        var index71 = 0\n        var index72 = 0\n       \
    \ var index73 = 0\n        var index74 = 0\n        var index75 = 0\n        var\
    \ index76 = 0\n        var index77 = 0\n        var index78 = 0\n        var index79\
    \ = 0\n        var index80 = 0\n        var index81 = 0\n        var index82 =\
    \ 0\n        var index83 = 0\n        var index84 = 0\n        var index85 = 0\n\
    \        var index86 = 0\n        var index87 = 0\n        var index88 = 0\n \
    \       var index89 = 0\n        var index90 = 0\n        var index91 = 0\n  \
    \      var index92 = 0\n        var index93 = 0\n        var index94 = 0\n   \
    \     var index95 = 0\n        var index96 = 0\n        var index97 = 0\n    \
    \    var ", "        val m = grid.length\n        val n = grid(0).length\n   \
    \     val grid = mutable.ArrayBuffer.empty[List[Long]]\n        val visited =\
    \ mutable.HashSet.empty[Long]\n        val paths = mutable.HashSet.empty[List[Long]]\n\
    \        val visitedPaths = mutable.HashSet.empty[List[Long]]\n        val pathLengths\
    \ = mutable.HashMap.empty[List[Long], Long]\n        val pathLengthsMap = mutable.HashMap.empty[List[Long],\
    \ Long]\n        val pathLengthsMap2 = mutable.HashMap.empty[List[Long], Long]\n\
    \        val pathLengthsMap3 = mutable.HashMap.empty[List[Long], Long]\n     \
    \   val pathLengthsMap4 = mutable.HashMap.empty[List[Long], Long]\n        val\
    \ pathLengthsMap5 = mutable.HashMap.empty[List[Long], Long]\n        val pathLengthsMap6\
    \ = mutable.HashMap.empty[List[Long], Long]\n        val pathLengthsMap7 = mutable.HashMap.empty[List[Long],\
    \ Long]\n        val pathLengthsMap8 = mutable.HashMap.empty[List[Long], Long]\n\
    \        val pathLengthsMap9 = mutable.HashMap.empty[List[Long], Long]\n     \
    \   val pathLengthsMap10 = mutable.HashMap.empty[List[Long], Long]\n        val\
    \ pathLengthsMap11 = mutable.HashMap.empty[List[Long], Long]\n        val pathLengthsMap12\
    \ = mutable.HashMap.empty[List[Long], Long]\n        val pathLengthsMap13 = mutable.HashMap.empty[List[Long],\
    \ Long]\n        val pathLengthsMap14 = mutable.HashMap.empty[List[Long], Long]\n\
    \        val pathLengthsMap15 = mutable.HashMap.empty[List[Long], Long]\n    \
    \    val pathLengthsMap16 = mutable.HashMap.empty[List[Long], Long]\n        val\
    \ pathLengthsMap17 = mutable.HashMap.empty[List[Long], Long]\n        val pathLengthsMap18\
    \ = mutable.HashMap.empty[List[Long], Long]\n        val pathLengthsMap19 = mutable.HashMap.empty[List[Long],\
    \ Long]\n        val pathLengthsMap20 = mutable.HashMap.empty[List[Long], Long]\n\
    \        val pathLengthsMap21 = mutable.HashMap.empty[List[Long], Long]\n    \
    \    val pathLengthsMap22 = mutable.HashMap.empty[List[Long], Long]", "      \
    \  val N = grid.size\n        val m = N * N\n        val lst_A = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_B = mutable.ArrayBuffer.empty[Long]\n        val lst_C = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_D = mutable.ArrayBuffer.empty[Long]\n        val lst_E = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_F = mutable.ArrayBuffer.empty[Long]\n        val lst_G = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_H = mutable.ArrayBuffer.empty[Long]\n        val lst_I = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_J = mutable.ArrayBuffer.empty[Long]\n        val lst_K = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_L = mutable.ArrayBuffer.empty[Long]\n        val lst_M = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_N = mutable.ArrayBuffer.empty[Long]\n        val lst_O = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_P = mutable.ArrayBuffer.empty[Long]\n        val lst_Q = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_R = mutable.ArrayBuffer.empty[Long]\n        val lst_S = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_T = mutable.ArrayBuffer.empty[Long]\n        val lst_U = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_V = mutable.ArrayBuffer.empty[Long]\n        val lst_W = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_X = mutable.ArrayBuffer.empty[Long]\n        val lst_Y = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_Z = mutable.ArrayBuffer.empty[Long]\n        val lst_A = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_B = mutable.ArrayBuffer.empty[Long]\n        val lst_C = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_D = mutable.ArrayBuffer.empty[Long]\n        val lst_E = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_F = mutable.ArrayBuffer.empty[Long]\n        val lst_G = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_H = mutable.ArrayBuffer.empty[Long]\n        val lst_I = mutable.ArrayBuffer.empty[",
  "        val N = grid.length\n        val m = grid.head\n        val n = grid.last\n\
    \        val lst_A = mutable.ArrayBuffer.empty[Long]\n        val lst_B = mutable.ArrayBuffer.empty[Long]\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var minPath\
    \ = 0\n        while(i < N && j < N) {\n            val a = grid(i)(j)\n     \
    \       val b = grid(i)(j+1)\n            val c = grid(i)(j+2)\n            val\
    \ d = grid(i+1)(j)\n            val e = grid(i+1)(j+1)\n            val f = grid(i+1)(j+2)\n\
    \            val g = grid(i+2)(j)\n            val h = grid(i+2)(j+1)\n      \
    \      val i = i + 3\n            val j = j + 3\n            val k = k + 1\n \
    \           val a = grid(i)(j)\n            val b = grid(i)(j+1)\n           \
    \ val c = grid(i)(j+2)\n            val d = grid(i+1)(j)\n            val e =\
    \ grid(i+1)(j+1)\n            val f = grid(i+1)(j+2)\n            val g = grid(i+2)(j)\n\
    \            val h = grid(i+2)(j+1)\n            val i = i + 3\n            val\
    \ j = j + 3\n            val k = k + 1\n            val a = grid(i)(j)\n     \
    \       val b = grid(i)(j+1)\n            val c = grid(i)(j+2)\n            val\
    \ d = grid(i+1)(j)\n            val e = grid(i+1)(j+1)\n            val f = grid(i+1)(j+2)\n\
    \            val g = grid(i+2)(j)\n            val h = grid(i+2)(j+1)\n      \
    \      val i = i + 3\n            val j = j + 3\n            val k = k + 1\n \
    \           val a = grid(i)(j)\n            val b = grid(i)(j+1)\n           \
    \ val c = grid(i)(j+2)\n            val d = grid(i+1)(j)\n            val e =\
    \ grid(i+1)(j+1)\n            val f = grid(i+1)(j+2)\n            val g = grid(i+2)(j)\n\
    \            val h = grid(i+2)(j+1)\n            val i = i + 3\n            val\
    \ j = j + 3\n            val k = k + 1\n            val a = grid(i)(j)\n     \
    \       val b = grid(i)(j+1)\n            val c = grid(i)(j+2)\n            val\
    \ d = grid(i+1)(j)\n            val e = grid(i+1)(j+1)\n            val f = grid(i+1)(j+2)\n\
    \            val g = grid(i+2)(j)\n            val h = grid(i+2)(j+1)\n", "  \
    \      val n = grid.size\n        val m = grid(0).size\n        val result = new\
    \ Array[Long](k)\n        val visited = new Array[Boolean](k)\n        val queue\
    \ = new Array[Int](k)\n        val visitedCount = new Array[Int](k)\n        val\
    \ queueCount = new Array[Int](k)\n        val queueIndex = new Array[Int](k)\n\
    \        val queueIndexCount = new Array[Int](k)\n        val queueIndexCountMax\
    \ = new Array[Int](k)\n        val queueIndexCountMaxIndex = -1\n        val queueIndexCountMaxValue\
    \ = -1\n        val queueIndexCountMaxIndex2 = -1\n        val queueIndexCountMaxValue2\
    \ = -1\n        val queueIndexCountMaxIndex3 = -1\n        val queueIndexCountMaxValue3\
    \ = -1\n        val queueIndexCountMaxIndex4 = -1\n        val queueIndexCountMaxValue4\
    \ = -1\n        val queueIndexCountMaxIndex5 = -1\n        val queueIndexCountMaxValue5\
    \ = -1\n        val queueIndexCountMaxIndex6 = -1\n        val queueIndexCountMaxValue6\
    \ = -1\n        val queueIndexCountMaxIndex7 = -1\n        val queueIndexCountMaxValue7\
    \ = -1\n        val queueIndexCountMaxIndex8 = -1\n        val queueIndexCountMaxValue8\
    \ = -1\n        val queueIndexCountMaxIndex9 = -1\n        val queueIndexCountMaxValue9\
    \ = -1\n        val queueIndexCountMaxIndex10 = -1\n        val queueIndexCountMaxValue10\
    \ = -1\n        val queueIndexCountMaxIndex11 = -1\n        val queueIndexCountMaxValue11\
    \ = -1\n        val queueIndexCountMaxIndex12 = -1\n        val queueIndexCountMaxValue12\
    \ = -1\n        val queueIndexCountMaxIndex13 = -1\n        val queueIndexCountMaxValue13\
    \ = -1\n        val queueIndexCountMaxIndex14 = -1\n        val queueIndexCountMaxValue14\
    \ = -1\n        val queueIndexCountMaxIndex15 = -1\n        val queueIndexCountMaxValue15\
    \ = -1\n        val queueIndexCountMaxIndex16 = -1\n        val queueIndexCountMaxValue16\
    \ = -1\n        val queueIndexCountMaxIndex17 = -1\n        val queueIndexCountMaxValue17\
    \ = -1\n        val queueIndexCountMaxIndex18 = -1\n        val queueIndexCountMaxValue18\
    \ = -1\n        val queueIndexCountMaxIndex19 = -1\n        val queueIndexCountMaxValue19\
    \ = -1\n        val queueIndexCountMaxIndex20 = -1\n        val queueIndexCountMaxValue20\
    \ = -1\n        val queueIndexCountMaxIndex21 = -1\n", "        val m = grid.size\n\
    \        val n = grid(0).size\n        val grid = mutable.ArrayBuffer.empty[List[Long]](m)\n\
    \        val visited = mutable.HashSet[Long]()\n        val result = mutable.ArrayBuffer.empty[Long]\n\
    \        val queue = mutable.Queue[Long]()\n        val start = 0\n        val\
    \ end = m * n - 1\n        val minPathLength = k\n        val minPath = new Array[Long](k)\n\
    \        val minPathIndex = new Array[Int](k)\n        val minPathIndexMap = new\
    \ HashMap[Long, Int]()\n        val minPathIndexMap2 = new HashMap[Int, Int]()\n\
    \        val minPathIndexMap3 = new HashMap[Int, Int]()\n        val minPathIndexMap4\
    \ = new HashMap[Int, Int]()\n        val minPathIndexMap5 = new HashMap[Int, Int]()\n\
    \        val minPathIndexMap6 = new HashMap[Int, Int]()\n        val minPathIndexMap7\
    \ = new HashMap[Int, Int]()\n        val minPathIndexMap8 = new HashMap[Int, Int]()\n\
    \        val minPathIndexMap9 = new HashMap[Int, Int]()\n        val minPathIndexMap10\
    \ = new HashMap[Int, Int]()\n        val minPathIndexMap11 = new HashMap[Int,\
    \ Int]()\n        val minPathIndexMap12 = new HashMap[Int, Int]()\n        val\
    \ minPathIndexMap13 = new HashMap[Int, Int]()\n        val minPathIndexMap14 =\
    \ new HashMap[Int, Int]()\n        val minPathIndexMap15 = new HashMap[Int, Int]()\n\
    \        val minPathIndexMap16 = new HashMap[Int, Int]()\n        val minPathIndexMap17\
    \ = new HashMap[Int, Int]()\n        val minPathIndexMap18 = new HashMap[Int,\
    \ Int]()\n        val minPathIndexMap19 = new HashMap[Int, Int]()\n        val\
    \ minPathIndexMap20 = new HashMap[Int, Int]()\n        val minPathIndexMap21 =\
    \ new HashMap[Int, Int]()\n        val minPathIndexMap22 = new HashMap[Int, Int]()\n\
    \        val minPathIndexMap23 = new HashMap[Int, Int]()\n        val minPathIndexMap24\
    \ = new HashMap[Int, Int]()\n        val minPathIndexMap25 = new HashMap[Int,\
    \ Int]()\n        val minPathIndex", "        val m = grid.length\n        val\
    \ n = grid(0).length\n        val result = new Array[Long](k)\n        val visited\
    \ = new Array[Boolean](k)\n        val queue = new Array[Int](k)\n        val\
    \ visitedIndex = new Array[Int](k)\n        val queueIndex = new Array[Int](k)\n\
    \        val queueIndex2 = new Array[Int](k)\n        val queueIndex3 = new Array[Int](k)\n\
    \        val queueIndex4 = new Array[Int](k)\n        val queueIndex5 = new Array[Int](k)\n\
    \        val queueIndex6 = new Array[Int](k)\n        val queueIndex7 = new Array[Int](k)\n\
    \        val queueIndex8 = new Array[Int](k)\n        val queueIndex9 = new Array[Int](k)\n\
    \        val queueIndex10 = new Array[Int](k)\n        val queueIndex11 = new\
    \ Array[Int](k)\n        val queueIndex12 = new Array[Int](k)\n        val queueIndex13\
    \ = new Array[Int](k)\n        val queueIndex14 = new Array[Int](k)\n        val\
    \ queueIndex15 = new Array[Int](k)\n        val queueIndex16 = new Array[Int](k)\n\
    \        val queueIndex17 = new Array[Int](k)\n        val queueIndex18 = new\
    \ Array[Int](k)\n        val queueIndex19 = new Array[Int](k)\n        val queueIndex20\
    \ = new Array[Int](k)\n        val queueIndex21 = new Array[Int](k)\n        val\
    \ queueIndex22 = new Array[Int](k)\n        val queueIndex23 = new Array[Int](k)\n\
    \        val queueIndex24 = new Array[Int](k)\n        val queueIndex25 = new\
    \ Array[Int](k)\n        val queueIndex26 = new Array[Int](k)\n        val queueIndex27\
    \ = new Array[Int](k)\n        val queueIndex28 = new Array[Int](k)\n        val\
    \ queueIndex29 = new Array[Int](k)\n        val queueIndex30 = new Array[Int](k)\n\
    \        val queueIndex31 = new Array[Int](k)\n        val queueIndex32 = new\
    \ Array[Int](k)\n        val queueIndex33 = new Array[Int](k)\n        val queueIndex34\
    \ = new Array[Int](k)\n        val queueIndex35 = new Array[Int](k)\n        val\
    \ queueIndex36 = new Array[Int](k)\n        val queueIndex37 = new Array[Int](k)\n\
    \        val queueIndex38 = new Array[Int](k)", "        val N = grid.length\n\
    \        val m = mutable.HashMap.empty[Long, List[Long]]\n        val result =\
    \ mutable.ArrayBuffer.empty[Long]\n        val visited = mutable.HashSet.empty[Long]\n\
    \        val visitedList = mutable.ArrayBuffer.empty[Long]\n        for (row <-\
    \ 0 until N) {\n            for (col <- 0 until N) {\n                if (row\
    \ == 0 && col == 0) continue\n                val key = row * N + col\n      \
    \          if (grid.contains(key + 1) && grid.contains(key - 1)) {\n         \
    \           val list = m.get(key)\n                    if (list == null) m.put(key,\
    \ list = new mutable.ListBuffer[Long])\n                    list += key - 1\n\
    \                    list += key + 1\n                } else if (grid.contains(key\
    \ + 1) && grid.contains(key + 2)) {\n                    val list = m.get(key)\n\
    \                    if (list == null) m.put(key, list = new mutable.ListBuffer[Long])\n\
    \                    list += key + 1\n                    list += key + 2\n  \
    \              } else if (grid.contains(key - 1) && grid.contains(key - 2)) {\n\
    \                    val list = m.get(key)\n                    if (list == null)\
    \ m.put(key, list = new mutable.ListBuffer[Long])\n                    list +=\
    \ key - 1\n                    list += key - 2\n                } else if (grid.contains(key\
    \ - 1) && grid.contains(key + 2)) {\n                    val list = m.get(key)\n\
    \                    if (list == null) m.put(key, list = new mutable.ListBuffer[Long])\n\
    \                    list += key - 1\n                    list += key + 2\n  \
    \              } else if (grid.contains(key + 1) && grid.contains(key - 2)) {\n\
    \                    val list = m.get(key)\n                    if (list == null)\
    \ m.put(key, list = new mutable.ListBuffer[Long])\n                    list +=\
    \ key + 1\n                    list += key - 2\n                } else if (grid.contains(key\
    \ + 1) && grid.contains(key + 2)) {\n                    val list = m.get(key)\n\
    \                    if (list == null) m.put(key, list = new mutable.ListBuffer[Long])\n\
    \                    list += key + 1\n                    list += key + 2\n  \
    \              } else if (grid.contains(key - 1) && grid.contains(key + 2)) {\n\
    \                    val list = m.get(key)\n                    if (list == null)\
    \ m.put(key, list = new mutable.ListBuffer[Long])\n                    list +=\
    \ key - 1\n                    list += key + 2\n                } else if (grid.contains(key\
    \ - 1) && grid.contains(key - 2)) {\n                    val list = m.get(key)\n\
    \                    if (list == null) m.put(key, list = new mutable.ListBuffer[Long])\n\
    \                    list += key - 1\n                    list += key - 2\n  \
    \              } else if (grid.contains(", "        val m = grid.length\n    \
    \    val n = grid(0).length\n        val grid = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        for (i <- 1 to m) {\n            val row = grid(i).map(_.toLong)\n  \
    \          val col = row.zipWithIndex.map(x => x._2).max\n            grid.append(row.take(col).toList)\n\
    \        }\n        val result = grid.foldLeft(List[Long]())((acc, x) => acc ++\
    \ x)\n        result.take(k)", "        val n = grid.size\n        val m = grid(0).size\n\
    \        val lst_A = Array.ofDim[Long](k)\n        val lst_B = Array.ofDim[Long](k)\n\
    \        var i : Int = 0\n        var j : Int = 0\n        var cnt : Int = 0\n\
    \        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int =\
    \ 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int\
    \ = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt :\
    \ Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt\
    \ : Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var\
    \ cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n      \
    \  var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n \
    \       var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int =\
    \ 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int\
    \ = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt :\
    \ Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt\
    \ : Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var\
    \ cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n      \
    \  var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n \
    \       var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int =\
    \ 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int\
    \ = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt :\
    \ Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt\
    \ : Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var\
    \ cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n      \
    \  var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n \
    \       var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int =\
    \ 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int\
    \ = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt :\
    \ Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt\
    \ : Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var\
    \ cnt : Int = 0\n        var cnt : Int = 0", "        val m = grid.size\n    \
    \    val n = grid(0).size\n        val result = new mutable.ListBuffer[Long]\n\
    \        val visited = new mutable.HashSet[Long]\n        val stack = new mutable.Stack[Long]\n\
    \        val stackSize = k\n        val stackSize2 = stackSize * stackSize\n \
    \       val stackSize3 = stackSize2 * stackSize\n        val stackSize4 = stackSize3\
    \ * stackSize\n        val stackSize5 = stackSize4 * stackSize\n        val stackSize6\
    \ = stackSize5 * stackSize\n        val stackSize7 = stackSize6 * stackSize\n\
    \        val stackSize8 = stackSize7 * stackSize\n        val stackSize9 = stackSize8\
    \ * stackSize\n        val stackSize10 = stackSize9 * stackSize\n        val stackSize11\
    \ = stackSize10 * stackSize\n        val stackSize12 = stackSize11 * stackSize\n\
    \        val stackSize13 = stackSize12 * stackSize\n        val stackSize14 =\
    \ stackSize13 * stackSize\n        val stackSize15 = stackSize14 * stackSize\n\
    \        val stackSize16 = stackSize15 * stackSize\n        val stackSize17 =\
    \ stackSize16 * stackSize\n        val stackSize18 = stackSize17 * stackSize\n\
    \        val stackSize19 = stackSize18 * stackSize\n        val stackSize20 =\
    \ stackSize19 * stackSize\n        val stackSize21 = stackSize20 * stackSize\n\
    \        val stackSize22 = stackSize21 * stackSize\n        val stackSize23 =\
    \ stackSize22 * stackSize\n        val stackSize24 = stackSize23 * stackSize\n\
    \        val stackSize25 = stackSize24 * stackSize\n        val stackSize26 =\
    \ stackSize25 * stackSize\n        val stackSize27 = stackSize26 * stackSize\n\
    \        val stackSize28 = stackSize27 * stackSize\n        val stackSize29 =\
    \ stackSize28 * stackSize\n        val stackSize30 = stackSize29 * stackSize\n\
    \        val stackSize31 = stackSize30 * stackSize\n        val stackSize32 =\
    \ stackSize31 * stackSize\n        val stackSize33 = stackSize32 * stackSize\n\
    \        val stackSize34 = stackSize33 * stackSize\n        val stackSize35 =\
    \ stackSize34 * stackSize\n        val stackSize36 = stackSize35 * stackSize\n\
    \        val stackSize37 = stackSize36 * stackSize\n        val stackSize38 =\
    \ stack", "        val grid = mutable.ArrayBuffer(grid)\n        val visited =\
    \ mutable.HashSet[Long]()\n        val queue = mutable.PriorityQueue[Long]()\n\
    \        val ans = mutable.ArrayBuffer.empty[Long]\n        val size = grid.size\n\
    \        val n = grid.head.length\n        val m = grid.last.length\n        val\
    \ max = (n - 1) * m\n        val max2 = n * m\n        val max3 = n * n * m\n\
    \        val max4 = n * n * n * m\n        val max5 = n * n * n * n * m\n    \
    \    val max6 = n * n * n * n * n * m\n        val max7 = n * n * n * n * n *\
    \ n * m\n        val max8 = n * n * n * n * n * n * n * m\n        val max9 =\
    \ n * n * n * n * n * n * n * n * m\n        val max10 = n * n * n * n * n * n\
    \ * n * n * n * m\n        val max11 = n * n * n * n * n * n * n * n * n * n *\
    \ m\n        val max12 = n * n * n * n * n * n * n * n * n * n * n * m\n     \
    \   val max13 = n * n * n * n * n * n * n * n * n * n * n * n * m\n        val\
    \ max14 = n * n * n * n * n * n * n * n * n * n * n * n * n * n * m\n        val\
    \ max15 = n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * m\n    \
    \    val max16 = n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * m\n        val max17 = n * n * n * n * n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n * m\n        val max18 = n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * m\n        val max19 = n * n * n * n * n *\
    \ n * n * n * n * n * n * n * n * n * n * n * n * n * n * m\n        val max20\
    \ = n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * m\n        val max21 = n * n * n * n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n * n * n * n * n * m\n        val max22 = n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * m\n      \
    \  val max23 = n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n * n * m\n        val max24 = n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * m\n        val max25 = ",
  "        val N = grid.size\n        val m = N * N\n        val lst_A = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_B = mutable.ArrayBuffer.empty[Long]\n        var index = 0\n\
    \        for (i <- 1 to N) {\n            for (j <- 1 to N) {\n              \
    \  if (i == j) {\n                    lst_A += grid(i)(j)\n                  \
    \  lst_B += grid(i)(j)\n                } else {\n                    val x =\
    \ grid(i)(j)\n                    val y = grid(i)(j + 1)\n                   \
    \ val z = grid(i + 1)(j)\n                    val w = grid(i + 1)(j + 1)\n   \
    \                 val u = grid(i + 1)(j)\n                    val v = grid(i +\
    \ 1)(j - 1)\n                    val w = grid(i + 1)(j - 1)\n                \
    \    val x = grid(i)(j - 1)\n                    val y = grid(i)(j - 1)\n    \
    \                val z = grid(i + 1)(j - 1)\n                    val w = grid(i\
    \ + 1)(j - 1)\n                    val u = grid(i + 1)(j - 1)\n              \
    \      val v = grid(i + 1)(j - 1)\n                    val x = grid(i)(j - 1)\n\
    \                    val y = grid(i)(j - 1)\n                    val z = grid(i\
    \ + 1)(j - 1)\n                    val w = grid(i + 1)(j - 1)\n              \
    \      val u = grid(i + 1)(j - 1)\n                    val v = grid(i + 1)(j -\
    \ 1)\n                    val x = grid(i)(j - 1)\n                    val y =\
    \ grid(i)(j - 1)\n                    val z = grid(i + 1)(j - 1)\n           \
    \         val w = grid(i + 1)(j - 1)\n                    val u = grid(i + 1)(j\
    \ - 1)\n                    val v = grid(i + 1)(j - 1)\n                    val\
    \ x = grid(i)(j - 1)\n                    val y = grid(i)(j - 1)\n           \
    \         val z = grid(i + 1)(j - 1)\n                    val w = grid(i + 1)(j\
    \ - 1)\n                    val u = grid(i + 1)(j - 1)\n                    val\
    \ v = grid(i + 1)(j - 1)\n                    val x = grid(i)(j - 1)\n       \
    \             val y = grid(i)(j - 1)\n                    val z = grid(i + 1)(j\
    \ - 1)\n                    val w = grid(i + 1)(j - 1)\n                    val\
    \ u = grid(i + 1)(j - 1)\n                    val v = grid(i + 1)(j - 1)\n   \
    \                 val x = grid(i)(j - 1)\n                    val y = grid(i)(j\
    \ - 1)\n                    val z = grid(i + 1)(j - 1)\n                    val\
    \ w = grid(i + 1)(j - 1)\n                    val u = grid(i + 1)(j - 1)\n   \
    \                 val v = grid(i + 1)(j - 1)\n                    val x = grid(i)(j\
    \ - 1)\n                    val y = ", "        val n = grid.length\n        val\
    \ m = grid(0).length\n        val grid = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        var current = 0\n        var currentRow = 0\n        var currentCol =\
    \ 0\n        var currentValue = 0L\n        var currentPath = 0L\n        var\
    \ currentPathValue = 0L\n        var currentPathRow = 0\n        var currentPathCol\
    \ = 0\n        var currentPathValue = 0L\n        var currentPathRow = 0\n   \
    \     var currentPathCol = 0\n        var currentPathValue = 0L\n        var currentPathRow\
    \ = 0\n        var currentPathCol = 0\n        var currentPathValue = 0L\n   \
    \     var currentPathRow = 0\n        var currentPathCol = 0\n        var currentPathValue\
    \ = 0L\n        var currentPathRow = 0\n        var currentPathCol = 0\n     \
    \   var currentPathValue = 0L\n        var currentPathRow = 0\n        var currentPathCol\
    \ = 0\n        var currentPathValue = 0L\n        var currentPathRow = 0\n   \
    \     var currentPathCol = 0\n        var currentPathValue = 0L\n        var currentPathRow\
    \ = 0\n        var currentPathCol = 0\n        var currentPathValue = 0L\n   \
    \     var currentPathRow = 0\n        var currentPathCol = 0\n        var currentPathValue\
    \ = 0L\n        var currentPathRow = 0\n        var currentPathCol = 0\n     \
    \   var currentPathValue = 0L\n        var currentPathRow = 0\n        var currentPathCol\
    \ = 0\n        var currentPathValue = 0L\n        var currentPathRow = 0\n   \
    \     var currentPathCol = 0\n        var currentPathValue = 0L\n        var currentPathRow\
    \ = 0\n        var currentPathCol = 0\n        var currentPathValue = 0L\n   \
    \     var currentPathRow = 0\n        var currentPathCol = 0\n        var currentPathValue\
    \ = 0L\n        var currentPathRow = 0\n        var currentPathCol = 0\n     \
    \   var currentPathValue = 0L\n        var currentPathRow = 0\n        var currentPathCol\
    \ = 0\n        var currentPathValue = 0L\n        var currentPathRow = 0\n   \
    \     var currentPathCol = 0\n        var currentPathValue = 0L\n        var currentPathRow\
    \ = 0\n        var currentPathCol = 0\n        var currentPathValue = 0L\n   \
    \     var currentPathRow = 0\n        var currentPathCol = 0\n        var currentPathValue\
    \ = 0L\n        var currentPathRow = 0\n        var currentPathCol = 0\n     \
    \   var currentPathValue = 0L\n        var currentPathRow = 0\n        var currentPathCol\
    \ = 0\n        var currentPathValue = 0L\n        var currentPathRow = 0\n   \
    \     var currentPathCol = 0\n        var currentPathValue = 0L\n        var currentPathRow\
    \ = 0\n        var currentPathCol = 0\n        var currentPathValue = 0L\n   \
    \     var currentPathRow = 0\n        var currentPathCol = 0\n        var currentPathValue",
  "        val N = grid.length\n        val M = grid(0).length\n        val grid =\
    \ mutable.ArrayBuffer.empty[List[Long]](N * M)\n        for (i <- 0 until N *\
    \ M) {\n            grid(i) = grid((i / N).toInt)\n        }\n        val visited\
    \ = mutable.ArrayBuffer.empty[Boolean](N * M)\n        val ans = mutable.ArrayBuffer.empty[Long](N)\n\
    \        val visitedCount = mutable.ArrayBuffer.empty[Int](N)\n        val visitedCount2\
    \ = mutable.ArrayBuffer.empty[Int](N)\n        val visitedCount3 = mutable.ArrayBuffer.empty[Int](N)\n\
    \        val visitedCount4 = mutable.ArrayBuffer.empty[Int](N)\n        val visitedCount5\
    \ = mutable.ArrayBuffer.empty[Int](N)\n        val visitedCount6 = mutable.ArrayBuffer.empty[Int](N)\n\
    \        val visitedCount7 = mutable.ArrayBuffer.empty[Int](N)\n        val visitedCount8\
    \ = mutable.ArrayBuffer.empty[Int](N)\n        val visitedCount9 = mutable.ArrayBuffer.empty[Int](N)\n\
    \        val visitedCount10 = mutable.ArrayBuffer.empty[Int](N)\n        val visitedCount11\
    \ = mutable.ArrayBuffer.empty[Int](N)\n        val visitedCount12 = mutable.ArrayBuffer.empty[Int](N)\n\
    \        val visitedCount13 = mutable.ArrayBuffer.empty[Int](N)\n        val visitedCount14\
    \ = mutable.ArrayBuffer.empty[Int](N)\n        val visitedCount15 = mutable.ArrayBuffer.empty[Int](N)\n\
    \        val visitedCount16 = mutable.ArrayBuffer.empty[Int](N)\n        val visitedCount17\
    \ = mutable.ArrayBuffer.empty[Int](N)\n        val visitedCount18 = mutable.ArrayBuffer.empty[Int](N)\n\
    \        val visitedCount19 = mutable.ArrayBuffer.empty[Int](N)\n        val visitedCount20\
    \ = mutable.ArrayBuffer.empty[Int](N)\n        val visitedCount21 = mutable.ArrayBuffer.empty[Int](N)\n\
    \        val visitedCount22 = mutable.ArrayBuffer.empty[Int](N)\n        val visitedCount23\
    \ = mutable.ArrayBuffer.empty[Int](N)\n        val visitedCount24 = mutable.ArrayBuffer.empty[Int](N)\n\
    \        val visitedCount25 = mutable.ArrayBuffer.empty[Int](N)\n        val visitedCount26\
    \ = mutable.ArrayBuffer.empty[Int](N)", "        val n = grid.size\n        val\
    \ m = grid(0).size\n        val grid = mutable.ArrayBuffer.empty[List[Long]](m)\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until m) {\n        \
    \        grid += grid0(grid(i).indexOf(grid0(j))).toList\n            }\n    \
    \    }\n        val result = new scala.collection.mutable.ArrayBuffer[Long]\n\
    \        val visited = new scala.collection.mutable.HashSet[Long]\n        val\
    \ visited0 = new scala.collection.mutable.HashSet[Long]\n        val visited1\
    \ = new scala.collection.mutable.HashSet[Long]\n        val visited2 = new scala.collection.mutable.HashSet[Long]\n\
    \        val visited3 = new scala.collection.mutable.HashSet[Long]\n        val\
    \ visited0 = new scala.collection.mutable.HashSet[Long]\n        val visited1\
    \ = new scala.collection.mutable.HashSet[Long]\n        val visited2 = new scala.collection.mutable.HashSet[Long]\n\
    \        val visited3 = new scala.collection.mutable.HashSet[Long]\n        val\
    \ visited0 = new scala.collection.mutable.HashSet[Long]\n        val visited1\
    \ = new scala.collection.mutable.HashSet[Long]\n        val visited2 = new scala.collection.mutable.HashSet[Long]\n\
    \        val visited3 = new scala.collection.mutable.HashSet[Long]\n        val\
    \ visited0 = new scala.collection.mutable.HashSet[Long]\n        val visited1\
    \ = new scala.collection.mutable.HashSet[Long]\n        val visited2 = new scala.collection.mutable.HashSet[Long]\n\
    \        val visited3 = new scala.collection.mutable.HashSet[Long]\n        val\
    \ visited0 = new scala.collection.mutable.HashSet[Long]\n        val visited1\
    \ = new scala.collection.mutable.HashSet[Long]\n        val visited2 = new scala.collection.mutable.HashSet[Long]\n\
    \        val visited3 = new scala.collection.mutable.HashSet[Long]\n        val\
    \ visited0 = new scala.collection.mutable.HashSet[Long]\n        val visited1\
    \ = new scala.collection.mutable.HashSet[Long]\n        val visited2 = new scala.collection.mutable.HashSet[Long]\n\
    \        val visited3 = new scala.collection.mutable.HashSet[Long]\n        val\
    \ visited0 = new scala.collection.mutable.HashSet[Long]\n        val visite",
  "        val m = grid.length\n        val n = grid(0).length\n        val result\
    \ = new Array[Long](k)\n        var minPath = 0\n        var minPathIndex = 0\n\
    \        var minPathValue = grid(0).head\n        var currentCell = 0\n      \
    \  var currentCellIndex = 0\n        var currentCellValue = grid(0).head\n   \
    \     var currentCellValueIndex = 0\n        var currentCellValueIndexMin = 0\n\
    \        var currentCellValueIndexMax = 0\n        var currentCellValueIndexMaxMin\
    \ = 0\n        var currentCellValueIndexMinMax = 0\n        var currentCellValueIndexMinMaxMin\
    \ = 0\n        var currentCellValueIndexMinMaxMinMax = 0\n        var currentCellValueIndexMinMaxMinMaxMin\
    \ = 0\n        var currentCellValueIndexMinMaxMinMaxMinMax = 0\n        var currentCellValueIndexMinMaxMinMaxMinMaxMax\
    \ = 0\n        var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax = 0\n       \
    \ var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax = 0\n        var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax\
    \ = 0\n        var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax = 0\n       \
    \ var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax = 0\n        var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax\
    \ = 0\n        var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax = 0\n       \
    \ var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax = 0\n        var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax\
    \ = 0\n        var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax = 0\n       \
    \ var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax = 0\n        var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax\
    \ = 0\n        var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax = 0\n       \
    \ var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax = 0\n        var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax\
    \ = 0\n        var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax = 0\n       \
    \ var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax = 0\n        var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax\
    \ = 0\n        var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax = 0\n       \
    \ var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax = 0\n        var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax\
    \ = 0\n        var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax = 0\n       \
    \ var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax = 0\n        var currentCellValueIndex",
  "        val n = grid.length\n        val m = grid(0).length\n        val result\
    \ = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n        val\
    \ stack = new Array[Int](k)\n        val stackSize = new Array[Int](k)\n     \
    \   val stackInd = new Array[Int](k)\n        val stackIndSize = new Array[Int](k)\n\
    \        val stackIndInd = new Array[Int](k)\n        val stackIndIndSize = new\
    \ Array[Int](k)\n        val stackIndIndInd = new Array[Int](k)\n        val stackIndIndIndSize\
    \ = new Array[Int](k)\n        val stackIndIndIndInd = new Array[Int](k)\n   \
    \     val stackIndIndIndIndSize = new Array[Int](k)\n        val stackIndIndIndIndInd\
    \ = new Array[Int](k)\n        val stackIndIndIndIndIndSize = new Array[Int](k)\n\
    \        val stackIndIndIndIndIndInd = new Array[Int](k)\n        val stackIndIndIndIndIndIndSize\
    \ = new Array[Int](k)\n        val stackIndIndIndIndIndIndInd = new Array[Int](k)\n\
    \        val stackIndIndIndIndIndIndIndSize = new Array[Int](k)\n        val stackIndIndIndIndIndIndIndInd\
    \ = new Array[Int](k)\n        val stackIndIndIndIndIndIndIndIndSize = new Array[Int](k)\n\
    \        val stackIndIndIndIndIndIndIndIndIndIndSize = new Array[Int](k)\n   \
    \     val stackIndIndIndIndIndIndIndIndIndIndIndIndSize = new Array[Int](k)\n\
    \        val stackIndIndIndIndIndIndIndIndIndIndIndIndIndIndSize = new Array[Int](k)\n\
    \        val stackIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndSize = new Array[Int](k)",
  "        val m = grid.length\n        val n = grid(0).length\n        val result\
    \ = new mutable.ListBuffer[Long]\n        val visited = new mutable.HashSet[Long]\n\
    \        val queue = new mutable.PriorityQueue[Long]\n        val visitedList\
    \ = new mutable.ListBuffer[Long]\n        val queueList = new mutable.ListBuffer[Long]\n\
    \        for (i <- 1 to m) {\n            val row = new mutable.ArrayList[Long]()\n\
    \            for (j <- 1 to n) {\n                val value = grid(i)(j)\n   \
    \             if (visited.contains(value)) {\n                    val index =\
    \ queue.dequeue()\n                    queueList.append(index)\n             \
    \   } else {\n                    val index = queue.enqueue(value)\n         \
    \           queueList.append(index)\n                }\n                row.append(value)\n\
    \            }\n            val rowList = row.toList\n            val rowListLength\
    \ = rowList.length\n            val rowListLength = rowListLength - 1\n      \
    \      val rowListLength = rowListLength - 1\n            val rowListLength =\
    \ rowListLength - 1\n            val rowListLength = rowListLength - 1\n     \
    \       val rowListLength = rowListLength - 1\n            val rowListLength =\
    \ rowListLength - 1\n            val rowListLength = rowListLength - 1\n     \
    \       val rowListLength = rowListLength - 1\n            val rowListLength =\
    \ rowListLength - 1\n            val rowListLength = rowListLength - 1\n     \
    \       val rowListLength = rowListLength - 1\n            val rowListLength =\
    \ rowListLength - 1\n            val rowListLength = rowListLength - 1\n     \
    \       val rowListLength = rowListLength - 1\n            val rowListLength =\
    \ rowListLength - 1\n            val rowListLength = rowListLength - 1\n     \
    \       val rowListLength = rowListLength - 1\n            val rowListLength =\
    \ rowListLength - 1\n            val rowListLength = rowListLength - 1\n     \
    \       val rowListLength = rowListLength - 1\n            val rowListLength =\
    \ rowListLength - 1\n            val rowListLength = rowListLength - 1\n     \
    \       val rowListLength = rowListLength - 1\n            val rowListLength =\
    \ rowListLength - 1\n            val rowListLength = rowListLength - 1\n     \
    \       val rowListLength = rowListLength - 1\n            val rowListLength =\
    \ rowListLength - 1\n            val rowListLength = rowListLength - 1\n     \
    \       val rowListLength = rowListLength - 1\n            val rowListLength =\
    \ rowListLength - 1\n            val rowListLength = rowListLength - 1\n     \
    \       val rowListLength = rowListLength - 1\n            val rowListLength =\
    \ rowListLength - 1\n            val rowListLength = rowListLength - 1", "   \
    \     val N = grid.length\n        val M = grid(0).length\n        val grid =\
    \ mutable.ArrayBuffer.empty[List[Long]](N * M)\n        for (i <- 0 until N) {\n\
    \            for (j <- 0 until M) {\n                grid(i * M + j) = grid(i).last\n\
    \            }\n        }\n        val visited = mutable.ArrayBuffer.empty[Int]\n\
    \        val result = mutable.ArrayBuffer.empty[Long]\n        val stack = mutable.ArrayBuffer.empty[Int]\n\
    \        val stackSize = mutable.ArrayBuffer.empty[Int]\n        val stackIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val stackSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val stackIndex = mutable.ArrayBuffer.empty[Int]\n        val stackSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val stackIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val stackSize = mutable.ArrayBuffer.empty[Int]\n        val stackIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val stackSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val stackIndex = mutable.ArrayBuffer.empty[Int]\n        val stackSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val stackIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val stackSize = mutable.ArrayBuffer.empty[Int]\n        val stackIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val stackSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val stackIndex = mutable.ArrayBuffer.empty[Int]\n        val stackSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val stackIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val stackSize = mutable.ArrayBuffer.empty[Int]\n        val stackIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val stackSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val stackIndex = mutable.ArrayBuffer.empty[Int]\n        val stackSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val stackIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val stackSize = mutable.ArrayBuffer.empty[Int]\n        val stackIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val stackSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val stackIndex = mutable.ArrayBuffer.empty[Int]\n        val stackSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val stackIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val stackSize = mutable.ArrayBuffer.empty[Int]\n        val stackIndex\
    \ = mutable.ArrayBuffer.", "        val n = grid.size\n        val m = grid(0).size\n\
    \        val lst_A = mutable.ArrayBuffer.empty[Long]\n        val lst_B = mutable.ArrayBuffer.empty[Long]\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var cnt = 0\n\
    \        var min_cnt = 0\n        var min_path = 0\n        var min_path_index\
    \ = 0\n        var min_path_len = 0\n        var min_path_len_index = 0\n    \
    \    var min_path_len_value = 0\n        var min_path_len_value_i = 0\n      \
    \  var min_path_len_value_j = 0\n        var min_path_len_value_j = 0\n      \
    \  var min_path_len_value_j = 0\n        var min_path_len_value_j = 0\n      \
    \  var min_path_len_value_j = 0\n        var min_path_len_value_j = 0\n      \
    \  var min_path_len_value_j = 0\n        var min_path_len_value_j = 0\n      \
    \  var min_path_len_value_j = 0\n        var min_path_len_value_j = 0\n      \
    \  var min_path_len_value_j = 0\n        var min_path_len_value_j = 0\n      \
    \  var min_path_len_value_j = 0\n        var min_path_len_value_j = 0\n      \
    \  var min_path_len_value_j = 0\n        var min_path_len_value_j = 0\n      \
    \  var min_path_len_value_j = 0\n        var min_path_len_value_j = 0\n      \
    \  var min_path_len_value_j = 0\n        var min_path_len_value_j = 0\n      \
    \  var min_path_len_value_j = 0\n        var min_path_len_value_j = 0\n      \
    \  var min_path_len_value_j = 0\n        var min_path_len_value_j = 0\n      \
    \  var min_path_len_value_j = 0\n        var min_path_len_value_j = 0\n      \
    \  var min_path_len_value_j = 0\n        var min_path_len_value_j = 0\n      \
    \  var min_path_len_value_j = 0\n        var min_path_len_value_j = 0\n      \
    \  var min_path_len_value_j = 0\n        var min_path_len_value_j = 0\n      \
    \  var min_path_len_value_j = 0\n        var min_path_len_value_j = 0\n      \
    \  var min_path_len_value_j = 0\n        var min_path_len_value_j = 0\n      \
    \  var min_path_len_value_j = 0\n        var min_path_len_value_j = 0\n      \
    \  var min_path_len_value_j = 0\n        var min_path_len_value_j = 0\n      \
    \  var min_path_len_value_j = 0\n        var min_path_len_value_j = 0\n      \
    \  var min_path_len_value_j = 0\n        var min_path_len_value_j = 0\n      \
    \  var min_path_len_value_j = 0\n        var min_path_len_value_j = 0\n      \
    \  var min_path_len_value_j = 0\n        var min_path_len_value_j = 0\n      \
    \  var min_path_len_value_j = 0\n        var min_path_len_value_j = 0\n      \
    \  var min_path_len_value_j = 0\n        var min_path_len_value_", "        val\
    \ m = grid.length\n        val n = grid(0).length\n        val grid = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        for (i <- 1 to m) {\n            val row = grid(i)\n            val col\
    \ = i\n            val rowList = mutable.ArrayBuffer.empty[Long]\n           \
    \ val colList = mutable.ArrayBuffer.empty[Long]\n            val rowList2 = mutable.ArrayBuffer.empty[Long]\n\
    \            val colList2 = mutable.ArrayBuffer.empty[Long]\n            val rowList3\
    \ = mutable.ArrayBuffer.empty[Long]\n            val colList3 = mutable.ArrayBuffer.empty[Long]\n\
    \            val rowList4 = mutable.ArrayBuffer.empty[Long]\n            val colList4\
    \ = mutable.ArrayBuffer.empty[Long]\n            val rowList5 = mutable.ArrayBuffer.empty[Long]\n\
    \            val colList5 = mutable.ArrayBuffer.empty[Long]\n            val rowList6\
    \ = mutable.ArrayBuffer.empty[Long]\n            val colList6 = mutable.ArrayBuffer.empty[Long]\n\
    \            val rowList7 = mutable.ArrayBuffer.empty[Long]\n            val colList7\
    \ = mutable.ArrayBuffer.empty[Long]\n            val rowList8 = mutable.ArrayBuffer.empty[Long]\n\
    \            val colList8 = mutable.ArrayBuffer.empty[Long]\n            val rowList9\
    \ = mutable.ArrayBuffer.empty[Long]\n            val colList9 = mutable.ArrayBuffer.empty[Long]\n\
    \            val rowList10 = mutable.ArrayBuffer.empty[Long]\n            val\
    \ colList10 = mutable.ArrayBuffer.empty[Long]\n            val rowList11 = mutable.ArrayBuffer.empty[Long]\n\
    \            val colList11 = mutable.ArrayBuffer.empty[Long]\n            val\
    \ rowList12 = mutable.ArrayBuffer.empty[Long]\n            val colList12 = mutable.ArrayBuffer.empty[Long]\n\
    \            val rowList13 = mutable.ArrayBuffer.empty[Long]\n            val\
    \ colList13 = mutable.ArrayBuffer.empty[Long]\n            val rowList14 = mutable.ArrayBuffer.empty[Long]\n\
    \            val colList14 = mutable.ArrayBuffer.empty[Long]\n            val\
    \ rowList15 = mutable.ArrayBuffer.empty[Long]\n            val colList15 = mutable.ArrayBuffer.empty[Long]\n\
    \            val rowList16 = mutable.ArrayBuffer.empty[Long]\n            val\
    \ colList16 = mutable.ArrayBuffer.empty[Long]\n            val rowList17 = mutable.ArrayBuffer.empty[Long]\n",
  "        val n = grid.length\n        val m = grid(0).length\n        val result\
    \ = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n        val\
    \ stack = new Array[Int](k)\n        val stackSize = new Array[Int](k)\n     \
    \   val stackIndex = new Array[Int](k)\n        val stackPointer = new Array[Int](k)\n\
    \        val stackPointer2 = new Array[Int](k)\n        val stackPointer3 = new\
    \ Array[Int](k)\n        val stackPointer4 = new Array[Int](k)\n        val stackPointer5\
    \ = new Array[Int](k)\n        val stackPointer6 = new Array[Int](k)\n       \
    \ val stackPointer7 = new Array[Int](k)\n        val stackPointer8 = new Array[Int](k)\n\
    \        val stackPointer9 = new Array[Int](k)\n        val stackPointer10 = new\
    \ Array[Int](k)\n        val stackPointer11 = new Array[Int](k)\n        val stackPointer12\
    \ = new Array[Int](k)\n        val stackPointer13 = new Array[Int](k)\n      \
    \  val stackPointer14 = new Array[Int](k)\n        val stackPointer15 = new Array[Int](k)\n\
    \        val stackPointer16 = new Array[Int](k)\n        val stackPointer17 =\
    \ new Array[Int](k)\n        val stackPointer18 = new Array[Int](k)\n        val\
    \ stackPointer19 = new Array[Int](k)\n        val stackPointer20 = new Array[Int](k)\n\
    \        val stackPointer21 = new Array[Int](k)\n        val stackPointer22 =\
    \ new Array[Int](k)\n        val stackPointer23 = new Array[Int](k)\n        val\
    \ stackPointer24 = new Array[Int](k)\n        val stackPointer25 = new Array[Int](k)\n\
    \        val stackPointer26 = new Array[Int](k)\n        val stackPointer27 =\
    \ new Array[Int](k)\n        val stackPointer28 = new Array[Int](k)\n        val\
    \ stackPointer29 = new Array[Int](k)\n        val stackPointer30 = new Array[Int](k)\n\
    \        val stackPointer31 = new Array[Int](k)\n        val stackPointer32 =\
    \ new Array[Int](k)\n        val stackPointer33 = new Array[Int](k)\n        val\
    \ stackPointer34 = new Array[Int](k)\n        val stackPointer35 = new Array[Int](k)\n\
    \        val stackPointer36 = new Array[Int](k)\n        val stackPointer37 =\
    \ new Array[Int](k)\n        ", "        val m = grid.length\n        val n =\
    \ grid(0).length\n        val result = new Array[Long](k)\n        var minPath\
    \ = 0\n        var minPathIndex = 0\n        var minPathValue = grid(0).head\n\
    \        var currentCell = 0\n        var currentCellIndex = 0\n        var currentCellValue\
    \ = grid(0).head\n        var currentCellValueIndex = 0\n        var currentCellValueIndexMin\
    \ = 0\n        var currentCellValueIndexMax = 0\n        var currentCellValueIndexMaxMin\
    \ = 0\n        var currentCellValueIndexMinMax = 0\n        var currentCellValueIndexMinMaxMin\
    \ = 0\n        var currentCellValueIndexMinMaxMinMax = 0\n        var currentCellValueIndexMinMaxMinMaxMin\
    \ = 0\n        var currentCellValueIndexMinMaxMinMaxMinMax = 0\n        var currentCellValueIndexMinMaxMinMaxMinMaxMax\
    \ = 0\n        var currentCellValueIndexMinMaxMinMaxMinMaxMax = 0\n        var\
    \ currentCellValueIndexMinMaxMinMaxMinMaxMaxMax = 0\n        var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax\
    \ = 0\n        var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax = 0\n       \
    \ var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax = 0\n        var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax\
    \ = 0\n        var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax = 0\n       \
    \ var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax = 0\n        var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax\
    \ = 0\n        var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax = 0\n       \
    \ var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax = 0\n        var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax\
    \ = 0\n        var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax = 0\n       \
    \ var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax = 0\n        var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax\
    \ = 0\n        var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax = 0\n       \
    \ var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax = 0\n        var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax\
    \ = 0\n        var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax = 0\n       \
    \ var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax = 0\n        var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax\
    \ = 0\n        var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax = 0\n       \
    \ var currentCellValueIndexMinMaxMinMaxMinMaxMaxMax = 0\n        var currentCellValueIndexMin",
  "        val m = grid.length\n        val n = grid(0).length\n        val lst_A\
    \ = mutable.ArrayBuffer.empty[Long]\n        val lst_B = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_C = mutable.ArrayBuffer.empty[Long]\n        val lst_D = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_E = mutable.ArrayBuffer.empty[Long]\n        val lst_F = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_G = mutable.ArrayBuffer.empty[Long]\n        val lst_H = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_I = mutable.ArrayBuffer.empty[Long]\n        val lst_J = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_K = mutable.ArrayBuffer.empty[Long]\n        val lst_L = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_M = mutable.ArrayBuffer.empty[Long]\n        val lst_N = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_O = mutable.ArrayBuffer.empty[Long]\n        val lst_P = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_Q = mutable.ArrayBuffer.empty[Long]\n        val lst_R = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_S = mutable.ArrayBuffer.empty[Long]\n        val lst_T = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_U = mutable.ArrayBuffer.empty[Long]\n        val lst_V = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_W = mutable.ArrayBuffer.empty[Long]\n        val lst_X = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_Y = mutable.ArrayBuffer.empty[Long]\n        val lst_Z = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_A = mutable.ArrayBuffer.empty[Long]\n        val lst_B = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_C = mutable.ArrayBuffer.empty[Long]\n        val lst_D = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_E = mutable.ArrayBuffer.empty[Long]\n        val lst_F = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_G = mutable.ArrayBuffer.empty[Long]\n        val lst_H = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_I = mutable.ArrayBuffer.empty[", "        val m = grid.length\n\
    \        val n = grid(0).length\n        val result = new Array[Long](k)\n   \
    \     var minPath = 0\n        var minPathIndex = 0\n        var currentPath =\
    \ 0\n        var currentPathIndex = 0\n        var currentPathValue = 0\n    \
    \    var currentPathValueIndex = 0\n        var currentPathValueIndex2 = 0\n \
    \       var currentPathValueIndex3 = 0\n        var currentPathValueIndex4 = 0\n\
    \        var currentPathValueIndex5 = 0\n        var currentPathValueIndex6 =\
    \ 0\n        var currentPathValueIndex7 = 0\n        var currentPathValueIndex8\
    \ = 0\n        var currentPathValueIndex9 = 0\n        var currentPathValueIndex10\
    \ = 0\n        var currentPathValueIndex11 = 0\n        var currentPathValueIndex12\
    \ = 0\n        var currentPathValueIndex13 = 0\n        var currentPathValueIndex14\
    \ = 0\n        var currentPathValueIndex15 = 0\n        var currentPathValueIndex16\
    \ = 0\n        var currentPathValueIndex17 = 0\n        var currentPathValueIndex18\
    \ = 0\n        var currentPathValueIndex19 = 0\n        var currentPathValueIndex20\
    \ = 0\n        var currentPathValueIndex21 = 0\n        var currentPathValueIndex22\
    \ = 0\n        var currentPathValueIndex23 = 0\n        var currentPathValueIndex24\
    \ = 0\n        var currentPathValueIndex25 = 0\n        var currentPathValueIndex26\
    \ = 0\n        var currentPathValueIndex27 = 0\n        var currentPathValueIndex28\
    \ = 0\n        var currentPathValueIndex29 = 0\n        var currentPathValueIndex30\
    \ = 0\n        var currentPathValueIndex31 = 0\n        var currentPathValueIndex32\
    \ = 0\n        var currentPathValueIndex33 = 0\n        var currentPathValueIndex34\
    \ = 0\n        var currentPathValueIndex35 = 0\n        var currentPathValueIndex36\
    \ = 0\n        var currentPathValueIndex37 = 0\n        var currentPathValueIndex38\
    \ = 0\n        var currentPathValueIndex39 = 0\n        var currentPathValueIndex40\
    \ = 0\n        var currentPathValueIndex41 = 0\n        var currentPathValueIndex42\
    \ = 0\n        var currentPathValueIndex43 = 0\n        var currentPathValueIndex44\
    \ = 0\n        var currentPathValueIndex45 = 0\n        var currentPathValueIndex46\
    \ = 0\n        var currentPathValueIndex47 = 0\n        var currentPathValueIndex48\
    \ = 0\n        var currentPathValueIndex49 = 0\n        var currentPathValueIndex50\
    \ = 0\n        var currentPathValueIndex51 = 0\n        var currentPathValueIndex52\
    \ = 0\n        var currentPathValueIndex53 = 0\n        var currentPathValueIndex54\
    \ = 0\n        var currentPathValueIndex55 = 0\n        var currentPathValueIndex56\
    \ = 0\n        var currentPathValueIndex57 = 0\n        var currentPathValueIndex58",
  "        val n = grid.length\n        val m = grid(0).length\n        val grid =\
    \ mutable.ArrayBuffer.empty[List[Long]](m)\n        val visited = mutable.HashSet[Long]()\n\
    \        val ans = mutable.ArrayBuffer.empty[Long]\n        val visitedMap = mutable.HashMap[Long,\
    \ Long]()\n        val visitedMap2 = mutable.HashMap[Long, Long]()\n        for\
    \ (i <- 1 to n) {\n            val row = grid((i - 1) / m).toList\n          \
    \  val col = grid((i - 1) % m).toList\n            val value = grid((i).toList)\n\
    \            val key = row.toString + col.toString + value.toString\n        \
    \    val newKey = row.toString + col.toString + value.toString + k.toString\n\
    \            val newKey2 = row.toString + col.toString + value.toString + k.toString\
    \ + k.toString\n            val newKey3 = row.toString + col.toString + value.toString\
    \ + k.toString + k.toString + k.toString\n            val newKey4 = row.toString\
    \ + col.toString + value.toString + k.toString + k.toString + k.toString + k.toString\
    \ + k.toString\n            val newKey5 = row.toString + col.toString + value.toString\
    \ + k.toString + k.toString + k.toString + k.toString + k.toString + k.toString\
    \ + k.toString\n            val newKey6 = row.toString + col.toString + value.toString\
    \ + k.toString + k.toString + k.toString + k.toString + k.toString + k.toString\
    \ + k.toString + k.toString + k.toString\n            val newKey7 = row.toString\
    \ + col.toString + value.toString + k.toString + k.toString + k.toString + k.toString\
    \ + k.toString + k.toString + k.toString + k.toString + k.toString + k.toString\
    \ + k.toString\n            val newKey8 = row.toString + col.toString + value.toString\
    \ + k.toString + k.toString + k.toString + k.toString + k.toString + k.toString\
    \ + k.toString + k.toString + k.toString + k.toString + k.toString + k.toString\
    \ + k.toString + k.toString + k.toString + k.toString + k.toString + k.toString\
    \ + k.toString + k.toString + k.toString + k.toString + k.toString + k.toString ",
  "        val m = grid.length\n        val n = grid(0).length\n        val result\
    \ = new mutable.ListBuffer[Long]\n        val visited = new mutable.HashSet[Long]\n\
    \        val stack = new mutable.Stack[Long]\n        val stack2 = new mutable.Stack[Long]\n\
    \        val stack3 = new mutable.Stack[Long]\n        val stack4 = new mutable.Stack[Long]\n\
    \        val stack5 = new mutable.Stack[Long]\n        val stack6 = new mutable.Stack[Long]\n\
    \        val stack7 = new mutable.Stack[Long]\n        val stack8 = new mutable.Stack[Long]\n\
    \        val stack9 = new mutable.Stack[Long]\n        val stack10 = new mutable.Stack[Long]\n\
    \        val stack11 = new mutable.Stack[Long]\n        val stack12 = new mutable.Stack[Long]\n\
    \        val stack13 = new mutable.Stack[Long]\n        val stack14 = new mutable.Stack[Long]\n\
    \        val stack15 = new mutable.Stack[Long]\n        val stack16 = new mutable.Stack[Long]\n\
    \        val stack17 = new mutable.Stack[Long]\n        val stack18 = new mutable.Stack[Long]\n\
    \        val stack19 = new mutable.Stack[Long]\n        val stack20 = new mutable.Stack[Long]\n\
    \        val stack21 = new mutable.Stack[Long]\n        val stack22 = new mutable.Stack[Long]\n\
    \        val stack23 = new mutable.Stack[Long]\n        val stack24 = new mutable.Stack[Long]\n\
    \        val stack25 = new mutable.Stack[Long]\n        val stack26 = new mutable.Stack[Long]\n\
    \        val stack27 = new mutable.Stack[Long]\n        val stack28 = new mutable.Stack[Long]\n\
    \        val stack29 = new mutable.Stack[Long]\n        val stack30 = new mutable.Stack[Long]\n\
    \        val stack31 = new mutable.Stack[Long]\n        val stack32 = new mutable.Stack[Long]\n\
    \        val stack33 = new mutable.Stack[Long]\n        val stack34 = new mutable.Stack[Long]\n\
    \        val stack35 = new mutable.Stack[Long]\n        val stack36 = new mutable.Stack[Long]\n\
    \        val stack37 = new mutable.Stack[Long]\n        val stack38 = new mutable.Stack[Long]\n\
    \        val stack39 = new mutable.Stack[Long]\n        val stack40 = new ", " \
    \       val m = grid.length\n        val n = grid(0).length\n        val grid\
    \ = mutable.ArrayBuffer.empty[List[Long]](m)\n        for (i <- 0 until m) {\n\
    \            grid.append(mutable.ArrayBuffer.empty[List[Long]](n))\n        }\n\
    \        val gridSize = grid.length\n        val gridSize2 = gridSize * gridSize\n\
    \        val gridSize3 = gridSize2 * gridSize\n        val gridSize4 = gridSize3\
    \ * gridSize\n        val gridSize5 = gridSize4 * gridSize\n        val gridSize6\
    \ = gridSize5 * gridSize\n        val gridSize7 = gridSize6 * gridSize\n     \
    \   val gridSize8 = gridSize7 * gridSize\n        val gridSize9 = gridSize8 *\
    \ gridSize\n        val gridSize10 = gridSize9 * gridSize\n        val gridSize11\
    \ = gridSize10 * gridSize\n        val gridSize12 = gridSize11 * gridSize\n  \
    \      val gridSize13 = gridSize12 * gridSize\n        val gridSize14 = gridSize13\
    \ * gridSize\n        val gridSize15 = gridSize14 * gridSize\n        val gridSize16\
    \ = gridSize15 * gridSize\n        val gridSize17 = gridSize16 * gridSize\n  \
    \      val gridSize18 = gridSize17 * gridSize\n        val gridSize19 = gridSize18\
    \ * gridSize\n        val gridSize20 = gridSize19 * gridSize\n        val gridSize21\
    \ = gridSize20 * gridSize\n        val gridSize22 = gridSize21 * gridSize\n  \
    \      val gridSize23 = gridSize22 * gridSize\n        val gridSize24 = gridSize23\
    \ * gridSize\n        val gridSize25 = gridSize24 * gridSize\n        val gridSize26\
    \ = gridSize25 * gridSize\n        val gridSize27 = gridSize26 * gridSize\n  \
    \      val gridSize28 = gridSize27 * gridSize\n        val gridSize29 = gridSize28\
    \ * gridSize\n        val gridSize30 = gridSize29 * gridSize\n        val gridSize31\
    \ = gridSize30 * gridSize\n        val gridSize32 = gridSize31 * gridSize\n  \
    \      val gridSize33 = gridSize32 * gridSize\n        val gridSize34 = gridSize33\
    \ * gridSize\n        val gridSize35 = gridSize34 * gridSize\n        val gridSize36\
    \ = gridSize35 * gridSize\n        val gridSize37 = gridSize36 * gridSize\n  \
    \      val grid", "        val n = grid.length\n        val m = grid(0).length\n\
    \        val lst_A = new Array[Long](n)\n        val lst_B = new Array[Long](m)\n\
    \        var i : Int = 0\n        var j : Int = 0\n        var cnt : Int = 0\n\
    \        while(i < n && j < m) {\n            val a = grid(i)(j)\n           \
    \ val b = grid(i)(j + 1)\n            val c = grid(i + 1)(j)\n            val\
    \ d = grid(i + 1)(j + 1)\n            val e = grid(i + 1)(j + 2)\n           \
    \ val f = grid(i + 2)(j + 1)\n            val g = grid(i + 2)(j + 2)\n       \
    \     val h = grid(i + 2)(j + 3)\n            val i = i + 1\n            val j\
    \ = j + 1\n            val cnt = cnt + 1\n            lst_A(i) = a\n         \
    \   lst_B(j) = b\n            if(a < b && a < c && a < d && a < e && a < f &&\
    \ a < g && a < h) {\n                lst_A(i) = a\n                lst_B(j) =\
    \ b\n            }\n            if(b < a && b < c && b < d && b < e && b < f &&\
    \ b < g && b < h) {\n                lst_A(i) = a\n                lst_B(j) =\
    \ b\n            }\n            if(c < a && c < b && c < d && c < e && c < f &&\
    \ c < g && c < h) {\n                lst_A(i) = a\n                lst_B(j) =\
    \ b\n            }\n            if(d < a && d < b && d < c && d < e && d < f &&\
    \ d < g && d < h) {\n                lst_A(i) = a\n                lst_B(j) =\
    \ b\n            }\n            if(e < a && e < b && e < c && e < d && e < f &&\
    \ e < g && e < h) {\n                lst_A(i) = a\n                lst_B(j) =\
    \ b\n            }\n            if(f < a && f < b && f < c && f < d && f < e &&\
    \ f < g && f < h) {\n                lst_A(i) = a\n                lst_B(j) =\
    \ b\n            }\n            if(g < a && g < b && g < c && g < d && g < e &&\
    \ g < f && g < h) {\n                lst_A(i) = a\n                lst_B(j) =\
    \ b\n            }\n            if(h < a && h < b ", "        val n = grid.length\n\
    \        val m = grid(0).length\n        val result = new Array[Long](k)\n   \
    \     val visited = new Array[Boolean](k)\n        val stack = new Array[Int](k)\n\
    \        val stackSize = new Array[Int](k)\n        val stackIndex = new Array[Int](k)\n\
    \        val stackPointer = new Array[Int](k)\n        val stackPointerIndex =\
    \ new Array[Int](k)\n        val stackPointerPointer = new Array[Int](k)\n   \
    \     val stackPointerPointerIndex = new Array[Int](k)\n        val stackPointerPointerPointer\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerIndex = new Array[Int](k)\n\
    \        val stackPointerPointerPointerPointer = new Array[Int](k)\n        val\
    \ stackPointerPointerPointerPointerIndex = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointer\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerIndex = new\
    \ Array[Int](k)\n        val stackPointerPointerPointerPointerPointer = new Array[Int](k)\n\
    \        val stackPointerPointerPointerPointerIndex = new Array[Int](k)\n    \
    \    val stackPointerPointerPointerPointerPointer = new Array[Int](k)\n      \
    \  val stackPointerPointerPointerPointerIndex = new Array[Int](k)\n        val\
    \ stackPointerPointerPointerPointerPointer = new Array[Int](k)\n        val stackPointerPointerPointerPointerIndex\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointer =\
    \ new Array[Int](k)\n        val stackPointerPointerPointerPointerIndex = new\
    \ Array[Int](k)\n        val stackPointerPointerPointerPointerPointer = new Array[Int](k)\n\
    \        val stackPointerPointerPointerPointerIndex = new Array[Int](k)\n    \
    \    val stackPointerPointerPointerPointerPointer = new Array[Int](k)\n      \
    \  val stackPointerPointerPointerPointerIndex = new Array[Int](k)\n        val\
    \ stackPointerPointerPointerPointerPointer = new Array[Int](k)\n        val stackPointerPointerPointerPointerIndex\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointer =\
    \ new Array[Int](k)\n        val stackPointerPointerPointerPointerPointerIndex\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointer =\
    \ new Array[Int](k)\n        val stackPointerPointerPointerPointerPointerIndex\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointerPointer\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointerIndex\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointer",
  "        val m = grid.length\n        val n = grid(0).length\n        val grid =\
    \ mutable.ArrayBuffer.empty[List[Long]]\n        val visited = mutable.HashSet[Long]()\n\
    \        val result = mutable.ArrayBuffer.empty[Long]\n        val visitedList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize\
    \ = mutable.ArrayBuffer.empty[", "        val m = grid.length\n        val n =\
    \ grid(0).length\n        val result = new Array[Long](k)\n        val visited\
    \ = new Array[Boolean](k)\n        val stack = new Array[Long](k)\n        val\
    \ stackIndex = new Array[Int](k)\n        val stackIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndex = new Array[Int](k)\n        val stackIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n       \
    \ val stackIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n        val\
    \ stackIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n        val\
    \ stackIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n        val\
    \ stackIndexIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n   \
    \     val stackIndexIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = new\
    \ Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array", "        val n = grid.size\n        val m = grid.head\n      \
    \  val result = new mutable.ListBuffer[Long]()\n        val visited = new mutable.HashSet[Long]()\n\
    \        val visitedFrom = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n\
    \        val visitedFrom2 = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n\
    \        val visitedFrom3 = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n\
    \        val visitedFrom4 = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n\
    \        val visitedFrom5 = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n\
    \        val visitedFrom6 = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n\
    \        val visitedFrom7 = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n\
    \        val visitedFrom8 = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n\
    \        val visitedFrom9 = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n\
    \        val visitedFrom10 = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n\
    \        val visitedFrom11 = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n\
    \        val visitedFrom12 = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n\
    \        val visitedFrom13 = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n\
    \        val visitedFrom14 = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n\
    \        val visitedFrom15 = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n\
    \        val visitedFrom16 = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n\
    \        val visitedFrom17 = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n\
    \        val visitedFrom18 = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n\
    \        val visitedFrom19 = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n\
    \        val visitedFrom20 = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n\
    \        val visitedFrom21 = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n\
    \        val visitedFrom22 = new mutable.HashMap[", "        val m = grid.length\n\
    \        val n = grid(0).length\n        val result = new Array[Long](k)\n   \
    \     var min = 0\n        var max = 0\n        var index = 0\n        var count\
    \ = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l\
    \ = 0\n        var m = 0\n        var n = 0\n        var x = 0\n        var y\
    \ = 0\n        var z = 0\n        var count = 0\n        var min = 0\n       \
    \ var max = 0\n        var index = 0\n        var count = 0\n        var i = 0\n\
    \        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n\
    \        var n = 0\n        var x = 0\n        var y = 0\n        var z = 0\n\
    \        var count = 0\n        var min = 0\n        var max = 0\n        var\
    \ index = 0\n        var count = 0\n        var i = 0\n        var j = 0\n   \
    \     var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n   \
    \     var x = 0\n        var y = 0\n        var z = 0\n        var count = 0\n\
    \        var min = 0\n        var max = 0\n        var index = 0\n        var\
    \ count = 0\n        var i = 0\n        var j = 0\n        var k = 0\n       \
    \ var l = 0\n        var m = 0\n        var n = 0\n        var x = 0\n       \
    \ var y = 0\n        var z = 0\n        var count = 0\n        var min = 0\n \
    \       var max = 0\n        var index = 0\n        var count = 0\n        var\
    \ i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var\
    \ m = 0\n        var n = 0\n        var x = 0\n        var y = 0\n        var\
    \ z = 0\n        var count = 0\n        var min = 0\n        var max = 0\n   \
    \     var index = 0\n        var count = 0\n        var i = 0\n        var j =\
    \ 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n =\
    \ 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var count\
    \ = 0\n        var min = 0\n        var max = 0\n        var index = 0\n     \
    \   var count = 0\n        var i = 0\n        var j = 0\n        var k = 0\n \
    \       var l = 0\n        var m = 0\n        var n = 0\n        var x = 0\n \
    \       var y = 0\n        var z = 0\n        var count = 0\n        var min =\
    \ 0\n        var max = 0\n        var index = 0\n        var count = 0\n     \
    \   var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n     \
    \   var m = 0\n        var n = 0\n        var x = 0\n        var y = 0\n     \
    \   var z = 0\n        var count = 0\n        var min = 0\n        var max = 0\n\
    \        var index = 0\n        var count = 0\n        var i = 0\n        var\
    \ j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var\
    \ n = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var\
    \ count = 0\n        var min = 0\n        var max = 0\n        var index = 0\n",
  "        val n = grid.length\n        val m = grid(0).length\n        val lst_A\
    \ = mutable.ArrayBuffer.empty[Long]\n        val lst_B = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_C = mutable.ArrayBuffer.empty[Long]\n        val lst_D = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_E = mutable.ArrayBuffer.empty[Long]\n        val lst_F = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_G = mutable.ArrayBuffer.empty[Long]\n        val lst_H = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_I = mutable.ArrayBuffer.empty[Long]\n        val lst_J = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_K = mutable.ArrayBuffer.empty[Long]\n        val lst_L = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_M = mutable.ArrayBuffer.empty[Long]\n        val lst_N = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_O = mutable.ArrayBuffer.empty[Long]\n        val lst_P = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_Q = mutable.ArrayBuffer.empty[Long]\n        val lst_R = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_S = mutable.ArrayBuffer.empty[Long]\n        val lst_T = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_U = mutable.ArrayBuffer.empty[Long]\n        val lst_V = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_W = mutable.ArrayBuffer.empty[Long]\n        val lst_X = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_Y = mutable.ArrayBuffer.empty[Long]\n        val lst_Z = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_A = mutable.ArrayBuffer.empty[Long]\n        val lst_B = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_C = mutable.ArrayBuffer.empty[Long]\n        val lst_D = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_E = mutable.ArrayBuffer.empty[Long]\n        val lst_F = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_G = mutable.ArrayBuffer.empty[Long]\n        val lst_H = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_I = mutable.ArrayBuffer.empty[", "        val n = grid.length\n\
    \        val m = grid(0).length\n        val visited = new mutable.HashSet[Long]\n\
    \        val ans = mutable.ArrayBuffer.empty[Long]\n        val lst_A = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_B = mutable.ArrayBuffer.empty[Long]\n        for (i <- 1 to n)\
    \ {\n            lst_A += grid(i)(0)\n            lst_B += grid(i)(1)\n      \
    \  }\n        val maxLen = k\n        val minLen = k\n        val minLenIndex\
    \ = n\n        for (i <- 1 to n) {\n            val curr = grid((i - 1) % n)((i\
    \ - 1) / n)\n            val next = (i + 1) % n\n            val nextCurr = grid(next)((i\
    \ + 1) % n)\n            val nextNext = grid(next)((i + 2) % n)\n            val\
    \ nextNextCurr = grid(nextNext)((i + 2) % n)\n            val nextNextNext = grid(nextNext)((i\
    \ + 3) % n)\n            val nextNextNextCurr = grid(nextNextNext)((i + 3) % n)\n\
    \            val nextNextNextNext = grid(nextNextNext)((i + 4) % n)\n        \
    \    val nextNextNextNextCurr = grid(nextNextNextNext)((i + 4) % n)\n        \
    \    val nextNextNextNextNext = grid(nextNextNextNext)((i + 5) % n)\n        \
    \    val nextNextNextNextNextCurr = grid(nextNextNextNextNext)((i + 5) % n)\n\
    \            val nextNextNextNextNextNext = grid(nextNextNextNextNext)((i + 6)\
    \ % n)\n            val nextNextNextNextNextNextCurr = grid(nextNextNextNextNextNext)((i\
    \ + 6) % n)\n            val nextNextNextNextNextNextNext = grid(nextNextNextNextNextNext)((i\
    \ + 7) % n)\n            val nextNextNextNextNextNextNextCurr = grid(nextNextNextNextNextNextNext)((i\
    \ + 7) % n)\n            val nextNextNextNextNextNextNextNext = grid(nextNextNextNextNextNextNext)((i\
    \ + 8) % n)\n            val nextNextNextNextNextNextNextNextCurr = grid(nextNextNextNextNextNextNextNext)((i\
    \ + 8) % n)\n            val nextNextNextNextNextNextNextNextNext = grid(nextNextNextNextNextNextNextNext)((i\
    \ + 9) % n)\n            val nextNextNextNextNextNextNextNextCurr = grid(nextNextNextNextNextNextNextNextNext)((i\
    \ + 9) % n)\n            val nextNextNext", "        val N = grid.size\n     \
    \   val m = N * N\n        val lst_A = new Array[Long](m)\n        val lst_B =\
    \ new Array[Long](m)\n        val lst_C = new Array[Long](m)\n        val lst_D\
    \ = new Array[Long](m)\n        val lst_E = new Array[Long](m)\n        val lst_F\
    \ = new Array[Long](m)\n        val lst_G = new Array[Long](m)\n        val lst_H\
    \ = new Array[Long](m)\n        val lst_I = new Array[Long](m)\n        val lst_J\
    \ = new Array[Long](m)\n        val lst_K = new Array[Long](m)\n        val lst_L\
    \ = new Array[Long](m)\n        val lst_M = new Array[Long](m)\n        val lst_N\
    \ = new Array[Long](m)\n        val lst_O = new Array[Long](m)\n        val lst_P\
    \ = new Array[Long](m)\n        val lst_Q = new Array[Long](m)\n        val lst_R\
    \ = new Array[Long](m)\n        val lst_S = new Array[Long](m)\n        val lst_T\
    \ = new Array[Long](m)\n        val lst_U = new Array[Long](m)\n        val lst_V\
    \ = new Array[Long](m)\n        val lst_W = new Array[Long](m)\n        val lst_X\
    \ = new Array[Long](m)\n        val lst_Y = new Array[Long](m)\n        val lst_Z\
    \ = new Array[Long](m)\n        val lst_AA = new Array[Long](m)\n        val lst_AB\
    \ = new Array[Long](m)\n        val lst_AC = new Array[Long](m)\n        val lst_AD\
    \ = new Array[Long](m)\n        val lst_AE = new Array[Long](m)\n        val lst_AF\
    \ = new Array[Long](m)\n        val lst_AG = new Array[Long](m)\n        val lst_AH\
    \ = new Array[Long](m)\n        val lst_AI = new Array[Long](m)\n        val lst_AJ\
    \ = new Array[Long](m)\n        val lst_AK = new Array[Long](m)\n        val lst_AL\
    \ = new Array[Long](m)\n        val lst_AM = new Array[Long](m)\n        val lst_AN\
    \ = new Array[Long](m)\n        val lst_AO = new Array[Long](m)\n        val lst_AP\
    \ = new ", "        val m = grid.length\n        val n = grid(0).length\n    \
    \    val result = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n\
    \        val stack = new Array[Long](k)\n        val stackPointer = 0\n      \
    \  val stackPointer2 = 1\n        val stackPointer3 = 2\n        val stackPointer4\
    \ = 3\n        val stackPointer5 = 4\n        val stackPointer6 = 5\n        val\
    \ stackPointer7 = 6\n        val stackPointer8 = 7\n        val stackPointer9\
    \ = 8\n        val stackPointer10 = 9\n        val stackPointer11 = 10\n     \
    \   val stackPointer12 = 11\n        val stackPointer13 = 12\n        val stackPointer14\
    \ = 13\n        val stackPointer15 = 14\n        val stackPointer16 = 15\n   \
    \     val stackPointer17 = 16\n        val stackPointer18 = 17\n        val stackPointer19\
    \ = 18\n        val stackPointer20 = 19\n        val stackPointer21 = 20\n   \
    \     val stackPointer22 = 21\n        val stackPointer23 = 22\n        val stackPointer24\
    \ = 23\n        val stackPointer25 = 24\n        val stackPointer26 = 25\n   \
    \     val stackPointer27 = 26\n        val stackPointer28 = 27\n        val stackPointer29\
    \ = 28\n        val stackPointer30 = 29\n        val stackPointer31 = 30\n   \
    \     val stackPointer32 = 31\n        val stackPointer33 = 32\n        val stackPointer34\
    \ = 33\n        val stackPointer35 = 34\n        val stackPointer36 = 35\n   \
    \     val stackPointer37 = 36\n        val stackPointer38 = 37\n        val stackPointer39\
    \ = 38\n        val stackPointer40 = 39\n        val stackPointer41 = 40\n   \
    \     val stackPointer42 = 41\n        val stackPointer43 = 42\n        val stackPointer44\
    \ = 43\n        val stackPointer45 = 44\n        val stackPointer46 = 45\n   \
    \     val stackPointer47 = 46\n        val stackPointer48 = 47\n        val stackPointer49\
    \ = 48\n        val stackPointer50 = 49\n        val stackPointer51 = 50\n   \
    \     val stackPointer52 = 51\n        val stackPointer53 = 52\n        val stackPointer54\
    \ = 53\n        val stackPointer55 = 54\n        val stackPointer56 = 55\n   \
    \     val stackPointer57 = 56\n        val stackPointer58 = 57\n        val stackPointer59\
    \ = 58\n        val stackPointer60 = 59\n        val stackPointer61 = 60\n", " \
    \       val m = grid.length\n        val n = grid(0).length\n        val result\
    \ = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n        val\
    \ stack = new Array[Int](k)\n        val stackSize = new Array[Int](k)\n     \
    \   val stackInd = new Array[Int](k)\n        val stackIndSize = new Array[Int](k)\n\
    \        val stackIndInd = new Array[Int](k)\n        val stackIndIndSize = new\
    \ Array[Int](k)\n        val stackIndIndInd = new Array[Int](k)\n        val stackIndIndIndSize\
    \ = new Array[Int](k)\n        val stackIndIndIndInd = new Array[Int](k)\n   \
    \     val stackIndIndIndIndSize = new Array[Int](k)\n        val stackIndIndIndIndInd\
    \ = new Array[Int](k)\n        val stackIndIndIndIndIndSize = new Array[Int](k)\n\
    \        val stackIndIndIndIndIndInd = new Array[Int](k)\n        val stackIndIndIndIndIndIndSize\
    \ = new Array[Int](k)\n        val stackIndIndIndIndIndIndInd = new Array[Int](k)\n\
    \        val stackIndIndIndIndIndIndIndSize = new Array[Int](k)\n        val stackIndIndIndIndIndIndIndInd\
    \ = new Array[Int](k)\n        val stackIndIndIndIndIndIndIndIndSize = new Array[Int](k)\n\
    \        val stackIndIndIndIndIndIndIndIndIndIndSize = new Array[Int](k)\n   \
    \     val stackIndIndIndIndIndIndIndIndIndIndIndIndSize = new Array[Int](k)\n\
    \        val stackIndIndIndIndIndIndIndIndIndIndIndIndIndIndSize = new Array[Int](k)\n\
    \        val stackIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndSize = new Array[Int](k)",
  "        val n = grid.length\n        val m = grid(0).length\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val visited = new mutable.HashSet[Long]()\n\
    \        val visitedSet = new mutable.HashSet[Long]()\n        val visitedSet2\
    \ = new mutable.HashSet[Long]()\n        val visitedSet3 = new mutable.HashSet[Long]()\n\
    \        val visitedSet4 = new mutable.HashSet[Long]()\n        val visitedSet5\
    \ = new mutable.HashSet[Long]()\n        val visitedSet6 = new mutable.HashSet[Long]()\n\
    \        val visitedSet7 = new mutable.HashSet[Long]()\n        val visitedSet8\
    \ = new mutable.HashSet[Long]()\n        val visitedSet9 = new mutable.HashSet[Long]()\n\
    \        val visitedSet10 = new mutable.HashSet[Long]()\n        val visitedSet11\
    \ = new mutable.HashSet[Long]()\n        val visitedSet12 = new mutable.HashSet[Long]()\n\
    \        val visitedSet13 = new mutable.HashSet[Long]()\n        val visitedSet14\
    \ = new mutable.HashSet[Long]()\n        val visitedSet15 = new mutable.HashSet[Long]()\n\
    \        val visitedSet16 = new mutable.HashSet[Long]()\n        val visitedSet17\
    \ = new mutable.HashSet[Long]()\n        val visitedSet18 = new mutable.HashSet[Long]()\n\
    \        val visitedSet19 = new mutable.HashSet[Long]()\n        val visitedSet20\
    \ = new mutable.HashSet[Long]()\n        val visitedSet21 = new mutable.HashSet[Long]()\n\
    \        val visitedSet22 = new mutable.HashSet[Long]()\n        val visitedSet23\
    \ = new mutable.HashSet[Long]()\n        val visitedSet24 = new mutable.HashSet[Long]()\n\
    \        val visitedSet25 = new mutable.HashSet[Long]()\n        val visitedSet26\
    \ = new mutable.HashSet[Long]()\n        val visitedSet27 = new mutable.HashSet[Long]()\n\
    \        val visitedSet28 = new mutable.HashSet[Long]()\n        val visitedSet29\
    \ = new mutable.HashSet[Long]()\n        val visitedSet30 = new mut", "      \
    \  val m = grid.length\n        val n = grid(0).length\n        val paths = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        val visited = mutable.HashSet[Long]()\n        val visitedList = mutable.ArrayBuffer.empty[Long]\n\
    \        val pathList = mutable.ArrayBuffer.empty[Long]\n        val pathList2\
    \ = mutable.ArrayBuffer.empty[Long]\n        val pathList3 = mutable.ArrayBuffer.empty[Long]\n\
    \        val pathList4 = mutable.ArrayBuffer.empty[Long]\n        val pathList5\
    \ = mutable.ArrayBuffer.empty[Long]\n        val pathList6 = mutable.ArrayBuffer.empty[Long]\n\
    \        val pathList7 = mutable.ArrayBuffer.empty[Long]\n        val pathList8\
    \ = mutable.ArrayBuffer.empty[Long]\n        val pathList9 = mutable.ArrayBuffer.empty[Long]\n\
    \        val pathList10 = mutable.ArrayBuffer.empty[Long]\n        val pathList11\
    \ = mutable.ArrayBuffer.empty[Long]\n        val pathList12 = mutable.ArrayBuffer.empty[Long]\n\
    \        val pathList13 = mutable.ArrayBuffer.empty[Long]\n        val pathList14\
    \ = mutable.ArrayBuffer.empty[Long]\n        val pathList15 = mutable.ArrayBuffer.empty[Long]\n\
    \        val pathList16 = mutable.ArrayBuffer.empty[Long]\n        val pathList17\
    \ = mutable.ArrayBuffer.empty[Long]\n        val pathList18 = mutable.ArrayBuffer.empty[Long]\n\
    \        val pathList19 = mutable.ArrayBuffer.empty[Long]\n        val pathList20\
    \ = mutable.ArrayBuffer.empty[Long]\n        val pathList21 = mutable.ArrayBuffer.empty[Long]\n\
    \        val pathList22 = mutable.ArrayBuffer.empty[Long]\n        val pathList23\
    \ = mutable.ArrayBuffer.empty[Long]\n        val pathList24 = mutable.ArrayBuffer.empty[Long]\n\
    \        val pathList25 = mutable.ArrayBuffer.empty[Long]\n        val pathList26\
    \ = mutable.ArrayBuffer.empty[Long]\n        val pathList27 = mutable.ArrayBuffer.empty[Long]\n\
    \        val pathList28 = mutable.ArrayBuffer.empty[Long]\n        val pathList29\
    \ = mutable.ArrayBuffer.empty[Long]\n        val pathList30 = mutable.ArrayBuffer.empty[Long]\n\
    \        val pathList31 = mutable.ArrayBuffer.empty[Long]\n        val pathList32\
    \ = ", "        val m = grid.length\n        val n = grid(0).length\n        val\
    \ result = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n \
    \       val stack = new Array[Int](k)\n        val stackSize = new Array[Int](k)\n\
    \        val stackIndex = new Array[Int](k)\n        val stackPointer = new Array[Int](k)\n\
    \        val stackPointerIndex = new Array[Int](k)\n        val stackPointerIndex2\
    \ = new Array[Int](k)\n        val stackPointerIndex3 = new Array[Int](k)\n  \
    \      val stackPointerIndex4 = new Array[Int](k)\n        val stackPointerIndex5\
    \ = new Array[Int](k)\n        val stackPointerIndex6 = new Array[Int](k)\n  \
    \      val stackPointerIndex7 = new Array[Int](k)\n        val stackPointerIndex8\
    \ = new Array[Int](k)\n        val stackPointerIndex9 = new Array[Int](k)\n  \
    \      val stackPointerIndex10 = new Array[Int](k)\n        val stackPointerIndex11\
    \ = new Array[Int](k)\n        val stackPointerIndex12 = new Array[Int](k)\n \
    \       val stackPointerIndex13 = new Array[Int](k)\n        val stackPointerIndex14\
    \ = new Array[Int](k)\n        val stackPointerIndex15 = new Array[Int](k)\n \
    \       val stackPointerIndex16 = new Array[Int](k)\n        val stackPointerIndex17\
    \ = new Array[Int](k)\n        val stackPointerIndex18 = new Array[Int](k)\n \
    \       val stackPointerIndex19 = new Array[Int](k)\n        val stackPointerIndex20\
    \ = new Array[Int](k)\n        val stackPointerIndex21 = new Array[Int](k)\n \
    \       val stackPointerIndex22 = new Array[Int](k)\n        val stackPointerIndex23\
    \ = new Array[Int](k)\n        val stackPointerIndex24 = new Array[Int](k)\n \
    \       val stackPointerIndex25 = new Array[Int](k)\n        val stackPointerIndex26\
    \ = new Array[Int](k)\n        val stackPointerIndex27 = new Array[Int](k)\n \
    \       val stackPointerIndex28 = new Array[Int](k)\n        val stackPointerIndex29\
    \ = new Array[Int](k)\n        val stackPointerIndex30 = new Array[Int](k)\n \
    \       val stackPointerIndex31 = new Array[Int](k)\n        val stackPointerIndex32\
    \ = new Array[Int](k)\n        val stackPointerIndex33 = new Array[Int](k)\n \
    \       val stackPointerIndex", "        val m = grid.size\n        val n = grid(0).size\n\
    \        val visited = new mutable.HashSet[Long]()\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val stack = new mutable.Stack[Long]()\n        val stackSize = new mutable.Stack[Int]()\n\
    \        val stackSize2 = new mutable.Stack[Int]()\n        val stackSize3 = new\
    \ mutable.Stack[Int]()\n        val stackSize4 = new mutable.Stack[Int]()\n  \
    \      val stackSize5 = new mutable.Stack[Int]()\n        val stackSize6 = new\
    \ mutable.Stack[Int]()\n        val stackSize7 = new mutable.Stack[Int]()\n  \
    \      val stackSize8 = new mutable.Stack[Int]()\n        val stackSize9 = new\
    \ mutable.Stack[Int]()\n        val stackSize10 = new mutable.Stack[Int]()\n \
    \       val stackSize11 = new mutable.Stack[Int]()\n        val stackSize12 =\
    \ new mutable.Stack[Int]()\n        val stackSize13 = new mutable.Stack[Int]()\n\
    \        val stackSize14 = new mutable.Stack[Int]()\n        val stackSize15 =\
    \ new mutable.Stack[Int]()\n        val stackSize16 = new mutable.Stack[Int]()\n\
    \        val stackSize17 = new mutable.Stack[Int]()\n        val stackSize18 =\
    \ new mutable.Stack[Int]()\n        val stackSize19 = new mutable.Stack[Int]()\n\
    \        val stackSize20 = new mutable.Stack[Int]()\n        val stackSize21 =\
    \ new mutable.Stack[Int]()\n        val stackSize22 = new mutable.Stack[Int]()\n\
    \        val stackSize23 = new mutable.Stack[Int]()\n        val stackSize24 =\
    \ new mutable.Stack[Int]()\n        val stackSize25 = new mutable.Stack[Int]()\n\
    \        val stackSize26 = new mutable.Stack[Int]()\n        val stackSize27 =\
    \ new mutable.Stack[Int]()\n        val stackSize28 = new mutable.Stack[Int]()\n\
    \        val stackSize29 = new mutable.Stack[Int]()\n        val stackSize30 =\
    \ new mutable.Stack[Int]()\n        val stackSize31 = new mutable.Stack[Int]()\n\
    \        val stackSize32 = new mutable.Stack[Int]()\n        val stackSize33 =\
    \ new mutable.Stack[Int", "        val m = grid.length\n        val n = grid(0).length\n\
    \        val path = new Array[Long](k)\n        var minPath = 0L\n        var\
    \ minPathIndex = 0\n        var minPathValue = 0L\n        var minPathValueIndex\
    \ = 0\n        var minPathValueIndex2 = 0\n        var minPathValueIndex3 = 0\n\
    \        var minPathValueIndex4 = 0\n        var minPathValueIndex5 = 0\n    \
    \    var minPathValueIndex6 = 0\n        var minPathValueIndex7 = 0\n        var\
    \ minPathValueIndex8 = 0\n        var minPathValueIndex9 = 0\n        var minPathValueIndex10\
    \ = 0\n        var minPathValueIndex11 = 0\n        var minPathValueIndex12 =\
    \ 0\n        var minPathValueIndex13 = 0\n        var minPathValueIndex14 = 0\n\
    \        var minPathValueIndex15 = 0\n        var minPathValueIndex16 = 0\n  \
    \      var minPathValueIndex17 = 0\n        var minPathValueIndex18 = 0\n    \
    \    var minPathValueIndex19 = 0\n        var minPathValueIndex20 = 0\n      \
    \  var minPathValueIndex21 = 0\n        var minPathValueIndex22 = 0\n        var\
    \ minPathValueIndex23 = 0\n        var minPathValueIndex24 = 0\n        var minPathValueIndex25\
    \ = 0\n        var minPathValueIndex26 = 0\n        var minPathValueIndex27 =\
    \ 0\n        var minPathValueIndex28 = 0\n        var minPathValueIndex29 = 0\n\
    \        var minPathValueIndex30 = 0\n        var minPathValueIndex31 = 0\n  \
    \      var minPathValueIndex32 = 0\n        var minPathValueIndex33 = 0\n    \
    \    var minPathValueIndex34 = 0\n        var minPathValueIndex35 = 0\n      \
    \  var minPathValueIndex36 = 0\n        var minPathValueIndex37 = 0\n        var\
    \ minPathValueIndex38 = 0\n        var minPathValueIndex39 = 0\n        var minPathValueIndex40\
    \ = 0\n        var minPathValueIndex41 = 0\n        var minPathValueIndex42 =\
    \ 0\n        var minPathValueIndex43 = 0\n        var minPathValueIndex44 = 0\n\
    \        var minPathValueIndex45 = 0\n        var minPathValueIndex46 = 0\n  \
    \      var minPathValueIndex47 = 0\n        var minPathValueIndex48 = 0\n    \
    \    var minPathValueIndex49 = 0\n        var minPathValueIndex50 = 0\n      \
    \  var minPathValueIndex51 = 0\n        var minPathValueIndex52 = 0\n        var\
    \ minPathValueIndex53 = 0\n        var minPathValueIndex54 = 0\n        var minPathValueIndex55\
    \ = 0\n        var minPathValueIndex56 = 0\n        var minPathValueIndex57 =\
    \ 0\n        var minPathValueIndex58 = 0\n        var minPathValueIndex59 = 0",
  "        val N = grid.length\n        val m = grid.head\n        val n = grid.last\n\
    \        val m = m.toLong\n        val n = n.toLong\n        val m1 = m - 1\n\
    \        val n1 = n - 1\n        val m2 = m + 1\n        val n2 = n + 1\n    \
    \    val m3 = m + 2\n        val n3 = n + 2\n        val m4 = m + 3\n        val\
    \ n4 = n + 3\n        val m5 = m + 4\n        val n5 = n + 4\n        val m6 =\
    \ m + 5\n        val n6 = n + 5\n        val m7 = m + 6\n        val n7 = n +\
    \ 6\n        val m8 = m + 7\n        val n8 = n + 7\n        val m9 = m + 8\n\
    \        val n9 = n + 8\n        val m10 = m + 9\n        val n10 = n + 9\n  \
    \      val m11 = m + 10\n        val n11 = n + 10\n        val m12 = m + 11\n\
    \        val n12 = n + 11\n        val m13 = m + 12\n        val n13 = n + 12\n\
    \        val m14 = m + 13\n        val n14 = n + 13\n        val m15 = m + 14\n\
    \        val n15 = n + 14\n        val m16 = m + 15\n        val n16 = n + 15\n\
    \        val m17 = m + 16\n        val n17 = n + 16\n        val m18 = m + 17\n\
    \        val n18 = n + 17\n        val m19 = m + 18\n        val n19 = n + 18\n\
    \        val m20 = m + 19\n        val n20 = n + 19\n        val m21 = m + 20\n\
    \        val n21 = n + 20\n        val m22 = m + 21\n        val n22 = n + 21\n\
    \        val m23 = m + 22\n        val n23 = n + 22\n        val m24 = m + 23\n\
    \        val n24 = n + 23\n        val m25 = m + 24\n        val n25 = n + 24\n\
    \        val m26 = m + 25\n        val n26 = n + 25\n        val m27 = m + 26\n\
    \        val n27 = n + 26\n        val m28 = m + 27\n        val n28 = n + 27\n\
    \        val m29 = m + 28\n        val n29 = n + 28\n        val m30 = m + 29\n\
    \        val n30 = n + 29\n        val m31 = m + 30\n        val n31 = n + 30\n\
    \        val m32 = m + 31\n        val n", "        val m = grid.length\n    \
    \    val n = grid(0).length\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val visited = new mutable.HashSet[Long]()\n        val visitedMap = new\
    \ mutable.HashMap[Long, Boolean]()\n        val visitedMap2 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap3 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap4 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap5\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap6 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap7 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap8 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap9\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap10 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap11 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap12 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap13 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap14\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap15 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap16 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap17 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap18 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap19\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap20 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap21 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap22 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap23 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap24\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap25 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap26 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap27 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap28 = new mutable.HashMap[Long, ", "        val m = grid.map(_.size).max\n\
    \        val n = grid.map(_.size).min\n        val m = m + 1\n        val n =\
    \ n + 1\n        val grid = mutable.ArrayBuffer.empty[List[Long]]\n        val\
    \ visited = mutable.ArrayBuffer.empty[Boolean]\n        val result = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedCount = mutable.ArrayBuffer.empty[Int]\n        val visitedCount2\
    \ = mutable.ArrayBuffer.empty[Int]\n        val visitedCount3 = mutable.ArrayBuffer.empty[Int]\n\
    \        val visitedCount4 = mutable.ArrayBuffer.empty[Int]\n        val visitedCount5\
    \ = mutable.ArrayBuffer.empty[Int]\n        val visitedCount6 = mutable.ArrayBuffer.empty[Int]\n\
    \        val visitedCount7 = mutable.ArrayBuffer.empty[Int]\n        val visitedCount8\
    \ = mutable.ArrayBuffer.empty[Int]\n        val visitedCount9 = mutable.ArrayBuffer.empty[Int]\n\
    \        val visitedCount10 = mutable.ArrayBuffer.empty[Int]\n        val visitedCount11\
    \ = mutable.ArrayBuffer.empty[Int]\n        val visitedCount12 = mutable.ArrayBuffer.empty[Int]\n\
    \        val visitedCount13 = mutable.ArrayBuffer.empty[Int]\n        val visitedCount14\
    \ = mutable.ArrayBuffer.empty[Int]\n        val visitedCount15 = mutable.ArrayBuffer.empty[Int]\n\
    \        val visitedCount16 = mutable.ArrayBuffer.empty[Int]\n        val visitedCount17\
    \ = mutable.ArrayBuffer.empty[Int]\n        val visitedCount18 = mutable.ArrayBuffer.empty[Int]\n\
    \        val visitedCount19 = mutable.ArrayBuffer.empty[Int]\n        val visitedCount20\
    \ = mutable.ArrayBuffer.empty[Int]\n        val visitedCount21 = mutable.ArrayBuffer.empty[Int]\n\
    \        val visitedCount22 = mutable.ArrayBuffer.empty[Int]\n        val visitedCount23\
    \ = mutable.ArrayBuffer.empty[Int]\n        val visitedCount24 = mutable.ArrayBuffer.empty[Int]\n\
    \        val visitedCount25 = mutable.ArrayBuffer.empty[Int]\n        val visitedCount26\
    \ = mutable.ArrayBuffer.empty[Int]\n        val visitedCount27 = mutable.ArrayBuffer.empty[Int]\n\
    \        val visitedCount28 = mutable.ArrayBuffer.empty[Int]\n        val visitedCount29\
    \ = ", "        val m = grid.map(_.size).max\n        val n = grid.map(_.size).min\n\
    \        val grid = grid.map(_.toArray).map(_.toList).toArray\n        val m =\
    \ grid.map(_.size).max\n        val n = grid.map(_.size).min\n        val grid\
    \ = grid.map(_.toArray).map(_.toList).toArray\n        val m = grid.map(_.size).max\n\
    \        val n = grid.map(_.size).min\n        val grid = grid.map(_.toArray).map(_.toList).toArray\n\
    \        val m = grid.map(_.size).max\n        val n = grid.map(_.size).min\n\
    \        val grid = grid.map(_.toArray).map(_.toList).toArray\n        val m =\
    \ grid.map(_.size).max\n        val n = grid.map(_.size).min\n        val grid\
    \ = grid.map(_.toArray).map(_.toList).toArray\n        val m = grid.map(_.size).max\n\
    \        val n = grid.map(_.size).min\n        val grid = grid.map(_.toArray).map(_.toList).toArray\n\
    \        val m = grid.map(_.size).max\n        val n = grid.map(_.size).min\n\
    \        val grid = grid.map(_.toArray).map(_.toList).toArray\n        val m =\
    \ grid.map(_.size).max\n        val n = grid.map(_.size).min\n        val grid\
    \ = grid.map(_.toArray).map(_.toList).toArray\n        val m = grid.map(_.size).max\n\
    \        val n = grid.map(_.size).min\n        val grid = grid.map(_.toArray).map(_.toList).toArray\n\
    \        val m = grid.map(_.size).max\n        val n = grid.map(_.size).min\n\
    \        val grid = grid.map(_.toArray).map(_.toList).toArray\n        val m =\
    \ grid.map(_.size).max\n        val n = grid.map(_.size).min\n        val grid\
    \ = grid.map(_.toArray).map(_.toList).toArray\n        val m = grid.map(_.size).max\n\
    \        val n = grid.map(_.size).min\n        val grid = grid.map(_.toArray).map(_.toList).toArray\n\
    \        val m = grid.map(_.size).max\n        val n = grid.map(_.size).min\n\
    \        val grid = grid.map(_.toArray).map(_.toList).toArray\n        val m =\
    \ grid.map(_.size).max\n        val n = grid.map(_.size).min\n        val grid\
    \ = grid.map(_.toArray).map(_.toList).toArray\n        val m = grid.map(_.size).",
  "        val m = grid.size\n        val n = grid(0).size\n        val result = new\
    \ Array[Long](k)\n        val visited = new Array[Boolean](k)\n        val visitedSet\
    \ = new mutable.HashSet[Boolean]()\n        val visitedSetSet = new mutable.HashSet[Boolean]()\n\
    \        val visitedSetSet2 = new mutable.HashSet[Boolean]()\n        val visitedSetSet3\
    \ = new mutable.HashSet[Boolean]()\n        val visitedSetSet4 = new mutable.HashSet[Boolean]()\n\
    \        val visitedSetSet5 = new mutable.HashSet[Boolean]()\n        val visitedSetSet6\
    \ = new mutable.HashSet[Boolean]()\n        val visitedSetSet7 = new mutable.HashSet[Boolean]()\n\
    \        val visitedSetSet8 = new mutable.HashSet[Boolean]()\n        val visitedSetSet9\
    \ = new mutable.HashSet[Boolean]()\n        val visitedSetSet10 = new mutable.HashSet[Boolean]()\n\
    \        val visitedSetSet11 = new mutable.HashSet[Boolean]()\n        val visitedSetSet12\
    \ = new mutable.HashSet[Boolean]()\n        val visitedSetSet13 = new mutable.HashSet[Boolean]()\n\
    \        val visitedSetSet14 = new mutable.HashSet[Boolean]()\n        val visitedSetSet15\
    \ = new mutable.HashSet[Boolean]()\n        val visitedSetSet16 = new mutable.HashSet[Boolean]()\n\
    \        val visitedSetSet17 = new mutable.HashSet[Boolean]()\n        val visitedSetSet18\
    \ = new mutable.HashSet[Boolean]()\n        val visitedSetSet19 = new mutable.HashSet[Boolean]()\n\
    \        val visitedSetSet20 = new mutable.HashSet[Boolean]()\n        val visitedSetSet21\
    \ = new mutable.HashSet[Boolean]()\n        val visitedSetSet22 = new mutable.HashSet[Boolean]()\n\
    \        val visitedSetSet23 = new mutable.HashSet[Boolean]()\n        val visitedSetSet24\
    \ = new mutable.HashSet[Boolean]()\n        val visitedSetSet25 = new mutable.HashSet[Boolean]()\n\
    \        val visitedSetSet26 = new mutable.HashSet[Boolean]()\n        val visitedSetSet27\
    \ = new mutable.HashSet[Boolean]()\n        val visited", "        val n = grid.size\n\
    \        val m = grid(0).size\n        val grid = mutable.ArrayBuffer.empty[List[Long]](m)\n\
    \        for (i <- 0 until n) {\n            val row = grid\n            val col\
    \ = grid\n            for (j <- 0 until m) {\n                val cell = row :+\
    \ col\n                if (cell(i) == k) {\n                    cell += cell(i\
    \ + 1)\n                }\n                cell += cell(i + 1)\n             \
    \   cell += cell(i + 1)\n                cell += cell(i + 1)\n               \
    \ cell += cell(i + 1)\n                cell += cell(i + 1)\n                cell\
    \ += cell(i + 1)\n                cell += cell(i + 1)\n                cell +=\
    \ cell(i + 1)\n                cell += cell(i + 1)\n                cell += cell(i\
    \ + 1)\n                cell += cell(i + 1)\n                cell += cell(i +\
    \ 1)\n                cell += cell(i + 1)\n                cell += cell(i + 1)\n\
    \                cell += cell(i + 1)\n                cell += cell(i + 1)\n  \
    \              cell += cell(i + 1)\n                cell += cell(i + 1)\n    \
    \            cell += cell(i + 1)\n                cell += cell(i + 1)\n      \
    \          cell += cell(i + 1)\n                cell += cell(i + 1)\n        \
    \        cell += cell(i + 1)\n                cell += cell(i + 1)\n          \
    \      cell += cell(i + 1)\n                cell += cell(i + 1)\n            \
    \    cell += cell(i + 1)\n                cell += cell(i + 1)\n              \
    \  cell += cell(i + 1)\n                cell += cell(i + 1)\n                cell\
    \ += cell(i + 1)\n                cell += cell(i + 1)\n                cell +=\
    \ cell(i + 1)\n                cell += cell(i + 1)\n                cell += cell(i\
    \ + 1)\n                cell += cell(i + 1)\n                cell += cell(i +\
    \ 1)\n                cell += cell(i + 1)\n                cell += cell(i + 1)\n\
    \                cell += cell(i + 1)\n                cell += cell(i + 1)\n  \
    \              cell += cell(i + 1)\n                cell += cell(i + 1)\n    \
    \            cell += cell(i + 1)\n                cell += cell(i + 1)\n      \
    \          cell += cell(i + 1)\n                cell += cell(i + 1)\n        \
    \        cell += cell(i + 1)\n                cell += cell(i + 1)\n          \
    \      cell += cell(i + 1)\n                cell += cell(i + 1)\n            \
    \    cell += cell(i + 1)\n                cell += cell(i + 1)\n              \
    \  cell += cell(i + 1)\n                cell += cell(i + 1)\n                cell\
    \ += cell(i + 1)\n                cell += cell(i + 1)\n                cell +=\
    \ cell(i + 1)\n                cell += cell(i + 1)\n                cell += cell(i\
    \ + 1)\n                cell += cell(i + 1)\n                cell += cell(i +\
    \ 1)\n", "        val N = grid.length\n        val m = mutable.HashMap[Long, List[Long]]()\n\
    \        val result = mutable.ArrayBuffer.empty[Long]\n        val visited = mutable.HashSet[Long]()\n\
    \        val visitedList = mutable.ArrayBuffer.empty[Long]\n        val visitedList2\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList3 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList4 = mutable.ArrayBuffer.empty[Long]\n        val visitedList5\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList6 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList7 = mutable.ArrayBuffer.empty[Long]\n        val visitedList8\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList9 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList10 = mutable.ArrayBuffer.empty[Long]\n        val visitedList11\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList12 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList13 = mutable.ArrayBuffer.empty[Long]\n        val visitedList14\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList15 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList16 = mutable.ArrayBuffer.empty[Long]\n        val visitedList17\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList18 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList19 = mutable.ArrayBuffer.empty[Long]\n        val visitedList20\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList21 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList22 = mutable.ArrayBuffer.empty[Long]\n        val visitedList23\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList24 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList25 = mutable.ArrayBuffer.empty[Long]\n        val visitedList26\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList27 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList28 = mutable.ArrayBuffer.empty[Long]\n        val visitedList29\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList30 = mutable.ArrayBuffer.empty[Long]\n",
  "        val n = grid.length\n        val m = grid(0).length\n        val result\
    \ = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n        val\
    \ stack = new Array[Int](n)\n        val stackSize = new Array[Int](k)\n     \
    \   val stackIndex = new Array[Int](k)\n        val stackIndex2 = new Array[Int](k)\n\
    \        val stackIndex3 = new Array[Int](k)\n        val stackIndex4 = new Array[Int](k)\n\
    \        val stackIndex5 = new Array[Int](k)\n        val stackIndex6 = new Array[Int](k)\n\
    \        val stackIndex7 = new Array[Int](k)\n        val stackIndex8 = new Array[Int](k)\n\
    \        val stackIndex9 = new Array[Int](k)\n        val stackIndex10 = new Array[Int](k)\n\
    \        val stackIndex11 = new Array[Int](k)\n        val stackIndex12 = new\
    \ Array[Int](k)\n        val stackIndex13 = new Array[Int](k)\n        val stackIndex14\
    \ = new Array[Int](k)\n        val stackIndex15 = new Array[Int](k)\n        val\
    \ stackIndex16 = new Array[Int](k)\n        val stackIndex17 = new Array[Int](k)\n\
    \        val stackIndex18 = new Array[Int](k)\n        val stackIndex19 = new\
    \ Array[Int](k)\n        val stackIndex20 = new Array[Int](k)\n        val stackIndex21\
    \ = new Array[Int](k)\n        val stackIndex22 = new Array[Int](k)\n        val\
    \ stackIndex23 = new Array[Int](k)\n        val stackIndex24 = new Array[Int](k)\n\
    \        val stackIndex25 = new Array[Int](k)\n        val stackIndex26 = new\
    \ Array[Int](k)\n        val stackIndex27 = new Array[Int](k)\n        val stackIndex28\
    \ = new Array[Int](k)\n        val stackIndex29 = new Array[Int](k)\n        val\
    \ stackIndex30 = new Array[Int](k)\n        val stackIndex31 = new Array[Int](k)\n\
    \        val stackIndex32 = new Array[Int](k)\n        val stackIndex33 = new\
    \ Array[Int](k)\n        val stackIndex34 = new Array[Int](k)\n        val stackIndex35\
    \ = new Array[Int](k)\n        val stackIndex36 = new Array[Int](k)\n        val\
    \ stackIndex37 = new Array[Int](k)\n        val stackIndex38 = new Array[Int](k)\n",
  "        val n = grid.length\n        val m = grid(0).length\n        val result\
    \ = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n        val\
    \ visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array",
  "        val m = grid.length\n        val n = grid(0).length\n        val grid =\
    \ mutable.ArrayBuffer.empty[List[Long]]\n        val visited = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val paths = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val pathsList = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        val visitedList2 = mutable.ArrayBuffer.empty[Boolean]\n        val pathsList2\
    \ = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList3 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val pathsList3 = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList4\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val pathsList4 = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        val visitedList5 = mutable.ArrayBuffer.empty[Boolean]\n        val pathsList5\
    \ = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList6 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val pathsList6 = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList7\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val pathsList7 = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        val visitedList8 = mutable.ArrayBuffer.empty[Boolean]\n        val pathsList8\
    \ = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList9 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val pathsList9 = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList10\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val pathsList10 = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        val visitedList11 = mutable.ArrayBuffer.empty[Boolean]\n        val pathsList11\
    \ = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList12 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val pathsList12 = mutable.ArrayBuffer.empty[List[Long]]\n        val\
    \ visitedList13 = mutable.ArrayBuffer.empty[Boolean]\n        val pathsList13\
    \ = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList14 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val pathsList14 = mutable.ArrayBuffer.empty[List[Long]]\n        val\
    \ visitedList15 = mutable.ArrayBuffer.empty[Boolean]\n        val pathsList15\
    \ = mutable.ArrayBuffer.empty[List[Long]]\n        val visited", "        val\
    \ n = grid.size\n        val m = grid(0).size\n        val visited = new Array[Boolean](n)\n\
    \        val result = new Array[Long](k)\n        val index = new Array[Int](k)\n\
    \        val indexMap = new mutable.HashMap[Long, Int]()\n        val indexMap2\
    \ = new mutable.HashMap[Int, Long]()\n        val indexMap3 = new mutable.HashMap[Int,\
    \ Int]()\n        val indexMap4 = new mutable.HashMap[Int, Int]()\n        val\
    \ indexMap5 = new mutable.HashMap[Int, Int]()\n        val indexMap6 = new mutable.HashMap[Int,\
    \ Int]()\n        val indexMap7 = new mutable.HashMap[Int, Int]()\n        val\
    \ indexMap8 = new mutable.HashMap[Int, Int]()\n        val indexMap9 = new mutable.HashMap[Int,\
    \ Int]()\n        val indexMap10 = new mutable.HashMap[Int, Int]()\n        val\
    \ indexMap11 = new mutable.HashMap[Int, Int]()\n        val indexMap12 = new mutable.HashMap[Int,\
    \ Int]()\n        val indexMap13 = new mutable.HashMap[Int, Int]()\n        val\
    \ indexMap14 = new mutable.HashMap[Int, Int]()\n        val indexMap15 = new mutable.HashMap[Int,\
    \ Int]()\n        val indexMap16 = new mutable.HashMap[Int, Int]()\n        val\
    \ indexMap17 = new mutable.HashMap[Int, Int]()\n        val indexMap18 = new mutable.HashMap[Int,\
    \ Int]()\n        val indexMap19 = new mutable.HashMap[Int, Int]()\n        val\
    \ indexMap20 = new mutable.HashMap[Int, Int]()\n        val indexMap21 = new mutable.HashMap[Int,\
    \ Int]()\n        val indexMap22 = new mutable.HashMap[Int, Int]()\n        val\
    \ indexMap23 = new mutable.HashMap[Int, Int]()\n        val indexMap24 = new mutable.HashMap[Int,\
    \ Int]()\n        val indexMap25 = new mutable.HashMap[Int, Int]()\n        val\
    \ indexMap26 = new mutable.HashMap[Int, Int]()\n        val indexMap27 = new mutable.HashMap[Int,\
    \ Int]()\n        val indexMap28 = new mutable.HashMap[Int, Int]()\n        val\
    \ indexMap29 = new mutable.HashMap[Int, Int]()\n        val indexMap", "     \
    \   val n = grid.size\n        val m = grid(0).size\n        val grid = mutable.ArrayBuffer.empty[List[Long]](m)\n\
    \        val visited = mutable.ArrayBuffer.empty[Boolean](m)\n        val ans\
    \ = mutable.ArrayBuffer.empty[Long](m)\n        val visitedList = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val ansList = mutable.ArrayBuffer.empty[Long](m)\n        val visitedListList\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val ansListList = mutable.ArrayBuffer.empty[Long](m)\n\
    \        val visitedListListList = mutable.ArrayBuffer.empty[Boolean](m)\n   \
    \     val ansListListList = mutable.ArrayBuffer.empty[Long](m)\n        val visitedListListListList\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val ansListListListList = mutable.ArrayBuffer.empty[Long](m)\n\
    \        val visitedListListListListList = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val ansListListListListList = mutable.ArrayBuffer.empty[Long](m)\n  \
    \      val visitedListListListListListList = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val ansListListListListListList = mutable.ArrayBuffer.empty[Long](m)\n\
    \        val visitedListListListListListListList = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val ansListListListListListListList = mutable.ArrayBuffer.empty[Long](m)\n\
    \        val visitedListListListListListListListList = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val ansListListListListListListListList = mutable.ArrayBuffer.empty[Long](m)\n\
    \        val visitedListListListListListListListListList = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val ansListListListListListListListListList = mutable.ArrayBuffer.empty[Long](m)\n\
    \        val visitedListListListListListListListListList = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val ansListListListListListListListListListList = mutable.ArrayBuffer.empty[Long](m)\n\
    \        val visitedListListListListListListListListListList = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val ansListListListListListListListListListListList = mutable.ArrayBuffer.empty[Long](m)\n\
    \        val visitedListListListListListListListListListListList = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val an", "        val m = grid.size\n        val n = grid(0).size\n \
    \       val result = new mutable.ListBuffer[Long]\n        val visited = new mutable.HashSet[Long]\n\
    \        val visitedCount = new mutable.HashMap[Long, Int]\n        val visitedCountMap\
    \ = new mutable.HashMap[Long, Int]\n        val visitedCountMap2 = new mutable.HashMap[Long,\
    \ Int]\n        val visitedCountMap3 = new mutable.HashMap[Long, Int]\n      \
    \  val visitedCountMap4 = new mutable.HashMap[Long, Int]\n        val visitedCountMap5\
    \ = new mutable.HashMap[Long, Int]\n        val visitedCountMap6 = new mutable.HashMap[Long,\
    \ Int]\n        val visitedCountMap7 = new mutable.HashMap[Long, Int]\n      \
    \  val visitedCountMap8 = new mutable.HashMap[Long, Int]\n        val visitedCountMap9\
    \ = new mutable.HashMap[Long, Int]\n        val visitedCountMap10 = new mutable.HashMap[Long,\
    \ Int]\n        val visitedCountMap11 = new mutable.HashMap[Long, Int]\n     \
    \   val visitedCountMap12 = new mutable.HashMap[Long, Int]\n        val visitedCountMap13\
    \ = new mutable.HashMap[Long, Int]\n        val visitedCountMap14 = new mutable.HashMap[Long,\
    \ Int]\n        val visitedCountMap15 = new mutable.HashMap[Long, Int]\n     \
    \   val visitedCountMap16 = new mutable.HashMap[Long, Int]\n        val visitedCountMap17\
    \ = new mutable.HashMap[Long, Int]\n        val visitedCountMap18 = new mutable.HashMap[Long,\
    \ Int]\n        val visitedCountMap19 = new mutable.HashMap[Long, Int]\n     \
    \   val visitedCountMap20 = new mutable.HashMap[Long, Int]\n        val visitedCountMap21\
    \ = new mutable.HashMap[Long, Int]\n        val visitedCountMap22 = new mutable.HashMap[Long,\
    \ Int]\n        val visitedCountMap23 = new mutable.HashMap[Long, Int]\n     \
    \   val visitedCountMap24 = new mutable.HashMap[Long, Int]\n        val visitedCountMap25\
    \ = new mutable.HashMap[Long, Int]\n        val visitedCountMap26 = new mutable.HashMap[Long,\
    \ Int]\n        val visitedCountMap27 = new mutable.HashMap[Long, Int]\n", " \
    \       val n = grid.length\n        val m = grid(0).length\n        val result\
    \ = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n        val\
    \ stack = new Array[Long](k)\n        val stackSize = new Array[Int](k)\n    \
    \    val stackIndex = new Array[Int](k)\n        val stackPointer = new Array[Int](k)\n\
    \        val stackPointerIndex = new Array[Int](k)\n        val stackPointerPointer\
    \ = new Array[Int](k)\n        val stackPointerPointerPointer = new Array[Int](k)\n\
    \        val stackPointerPointerPointerPointer = new Array[Int](k)\n        val\
    \ stackPointerPointerPointerPointerPointer = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointerPointer\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointerPointerPointer\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointerPointerPointerPointer\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointerPointerPointerPointerPointer\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointerPointerPointerPointerPointerPointer\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointer\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointer\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointer\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointer\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointer\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointer\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointer\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointer\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointer\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointer\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointer\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointerPointer\
    \ = new Array[Int](k)\n", "        val m = grid.map(_.size).max\n        val n\
    \ = grid.map(_.size).min\n        val grid = grid.map(_.toArray).map(_.toList).toList\n\
    \        val visited = mutable.HashSet[Long]()\n        val ans = mutable.ArrayBuffer.empty[Long]\n\
    \        val queue = mutable.PriorityQueue[Long]()\n        val visitedMap = mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap2 = mutable.HashMap[Long, Boolean]()\n   \
    \     val queue = mutable.PriorityQueue[Long]()\n        val visitedMap = mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap2 = mutable.HashMap[Long, Boolean]()\n   \
    \     val queue = mutable.PriorityQueue[Long]()\n        val visitedMap = mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap2 = mutable.HashMap[Long, Boolean]()\n   \
    \     val queue = mutable.PriorityQueue[Long]()\n        val visitedMap = mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap2 = mutable.HashMap[Long, Boolean]()\n   \
    \     val queue = mutable.PriorityQueue[Long]()\n        val visitedMap = mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap2 = mutable.HashMap[Long, Boolean]()\n   \
    \     val queue = mutable.PriorityQueue[Long]()\n        val visitedMap = mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap2 = mutable.HashMap[Long, Boolean]()\n   \
    \     val queue = mutable.PriorityQueue[Long]()\n        val visitedMap = mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap2 = mutable.HashMap[Long, Boolean]()\n   \
    \     val queue = mutable.PriorityQueue[Long]()\n        val visitedMap = mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap2 = mutable.HashMap[Long, Boolean]()\n   \
    \     val queue = mutable.PriorityQueue[Long]()\n        val visitedMap = mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap2 = mutable.HashMap[Long, Boolean]()\n   \
    \     val queue = mutable.PriorityQueue[Long]()\n        val visitedMap = mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap2 = mutable.HashMap[Long, Boolean]()\n   \
    \     val queue = mutable.PriorityQueue[Long]()\n        val visitedMap = mutable.Hash",
  "        val n = grid.length\n        val m = grid(0).length\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val visited = new mutable.HashSet[Long]()\n\
    \        val visited2 = new mutable.HashSet[Long]()\n        val visited3 = new\
    \ mutable.HashSet[Long]()\n        val visited4 = new mutable.HashSet[Long]()\n\
    \        val visited5 = new mutable.HashSet[Long]()\n        val visited6 = new\
    \ mutable.HashSet[Long]()\n        val visited7 = new mutable.HashSet[Long]()\n\
    \        val visited8 = new mutable.HashSet[Long]()\n        val visited9 = new\
    \ mutable.HashSet[Long]()\n        val visited10 = new mutable.HashSet[Long]()\n\
    \        val visited11 = new mutable.HashSet[Long]()\n        val visited12 =\
    \ new mutable.HashSet[Long]()\n        val visited13 = new mutable.HashSet[Long]()\n\
    \        val visited14 = new mutable.HashSet[Long]()\n        val visited15 =\
    \ new mutable.HashSet[Long]()\n        val visited16 = new mutable.HashSet[Long]()\n\
    \        val visited17 = new mutable.HashSet[Long]()\n        val visited18 =\
    \ new mutable.HashSet[Long]()\n        val visited19 = new mutable.HashSet[Long]()\n\
    \        val visited20 = new mutable.HashSet[Long]()\n        val visited21 =\
    \ new mutable.HashSet[Long]()\n        val visited22 = new mutable.HashSet[Long]()\n\
    \        val visited23 = new mutable.HashSet[Long]()\n        val visited24 =\
    \ new mutable.HashSet[Long]()\n        val visited25 = new mutable.HashSet[Long]()\n\
    \        val visited26 = new mutable.HashSet[Long]()\n        val visited27 =\
    \ new mutable.HashSet[Long]()\n        val visited28 = new mutable.HashSet[Long]()\n\
    \        val visited29 = new mutable.HashSet[Long]()\n        val visited30 =\
    \ new mutable.HashSet[Long]()\n        val visited31 = new mutable.HashSet[Long]()\n\
    \        val visited32 = new mutable.HashSet[Long]()\n        val visited33 =\
    \ new mutable.HashSet[Long", "        val m = grid.length\n        val n = grid(0).length\n\
    \        val visited = new mutable.HashSet[Long]()\n        val result = new mutable.ArrayBuffer[Long]()\n\
    \        val stack = new mutable.Stack[Long]()\n        val stackSize = new mutable.HashMap[Long,\
    \ Int]()\n        val stackSize2 = new mutable.HashMap[Long, Int]()\n        val\
    \ stackSize3 = new mutable.HashMap[Long, Int]()\n        val stackSize4 = new\
    \ mutable.HashMap[Long, Int]()\n        val stackSize5 = new mutable.HashMap[Long,\
    \ Int]()\n        val stackSize6 = new mutable.HashMap[Long, Int]()\n        val\
    \ stackSize7 = new mutable.HashMap[Long, Int]()\n        val stackSize8 = new\
    \ mutable.HashMap[Long, Int]()\n        val stackSize9 = new mutable.HashMap[Long,\
    \ Int]()\n        val stackSize10 = new mutable.HashMap[Long, Int]()\n       \
    \ val stackSize11 = new mutable.HashMap[Long, Int]()\n        val stackSize12\
    \ = new mutable.HashMap[Long, Int]()\n        val stackSize13 = new mutable.HashMap[Long,\
    \ Int]()\n        val stackSize14 = new mutable.HashMap[Long, Int]()\n       \
    \ val stackSize15 = new mutable.HashMap[Long, Int]()\n        val stackSize16\
    \ = new mutable.HashMap[Long, Int]()\n        val stackSize17 = new mutable.HashMap[Long,\
    \ Int]()\n        val stackSize18 = new mutable.HashMap[Long, Int]()\n       \
    \ val stackSize19 = new mutable.HashMap[Long, Int]()\n        val stackSize20\
    \ = new mutable.HashMap[Long, Int]()\n        val stackSize21 = new mutable.HashMap[Long,\
    \ Int]()\n        val stackSize22 = new mutable.HashMap[Long, Int]()\n       \
    \ val stackSize23 = new mutable.HashMap[Long, Int]()\n        val stackSize24\
    \ = new mutable.HashMap[Long, Int]()\n        val stackSize25 = new mutable.HashMap[Long,\
    \ Int]()\n        val stackSize26 = new mutable.HashMap[Long, Int]()\n       \
    \ val stackSize27 = new mutable.HashMap[Long, Int]()\n        val stackSize28\
    \ = new mutable.HashMap[Long, Int]()\n        val stackSize29 = new mutable.HashMap[Long,\
    \ Int", "        val m = grid.length\n        val n = grid(0).length\n       \
    \ val lst_A = new Array[Long](k)\n        val lst_B = new Array[Long](k)\n   \
    \     val lst_C = new Array[Long](k)\n        val lst_D = new Array[Long](k)\n\
    \        val lst_E = new Array[Long](k)\n        val lst_F = new Array[Long](k)\n\
    \        val lst_G = new Array[Long](k)\n        val lst_H = new Array[Long](k)\n\
    \        val lst_I = new Array[Long](k)\n        val lst_J = new Array[Long](k)\n\
    \        val lst_K = new Array[Long](k)\n        val lst_L = new Array[Long](k)\n\
    \        val lst_M = new Array[Long](k)\n        val lst_N = new Array[Long](k)\n\
    \        val lst_O = new Array[Long](k)\n        val lst_P = new Array[Long](k)\n\
    \        val lst_Q = new Array[Long](k)\n        val lst_R = new Array[Long](k)\n\
    \        val lst_S = new Array[Long](k)\n        val lst_T = new Array[Long](k)\n\
    \        val lst_U = new Array[Long](k)\n        val lst_V = new Array[Long](k)\n\
    \        val lst_W = new Array[Long](k)\n        val lst_X = new Array[Long](k)\n\
    \        val lst_Y = new Array[Long](k)\n        val lst_Z = new Array[Long](k)\n\
    \        val lst_AA = new Array[Long](k)\n        val lst_AB = new Array[Long](k)\n\
    \        val lst_AC = new Array[Long](k)\n        val lst_AD = new Array[Long](k)\n\
    \        val lst_AE = new Array[Long](k)\n        val lst_AF = new Array[Long](k)\n\
    \        val lst_AG = new Array[Long](k)\n        val lst_AH = new Array[Long](k)\n\
    \        val lst_AI = new Array[Long](k)\n        val lst_AJ = new Array[Long](k)\n\
    \        val lst_AK = new Array[Long](k)\n        val lst_AL = new Array[Long](k)\n\
    \        val lst_AM = new Array[Long](k)\n        val lst_AN = new Array[Long](k)\n\
    \        val lst_AO = new Array[Long](k)\n        val lst_AP = new ", "      \
    \  val n = grid.size\n        val m = grid.head\n        val lst_A = grid.map(_.toList)\n\
    \        val lst_B = grid.map(_.toList)\n        val lst_C = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_D = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_E = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_F\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_G = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_H = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_I = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_J\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_K = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_L = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_M = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_N\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_O = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_P = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_Q = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_R\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_S = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_T = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_U = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_V\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_W = lst_A.zip(", " \
    \       val N = grid.length\n        val M = grid(0).length\n        val grid\
    \ = mutable.ArrayBuffer.empty[List[Long]](N * M)\n        for (i <- 0 until N)\
    \ {\n            for (j <- 0 until M) {\n                grid(i * M + j) = grid(i).filter(x\
    \ => x == grid(i).indexOf(grid(i).indexOf(x) + 1)).sorted\n            }\n   \
    \     }\n        val result = grid.toList.sortBy(x => x.indexOf(0))\n        result.take(k).toList",
  "        val n = grid.length\n        val m = grid(0).length\n        val grid =\
    \ mutable.ArrayBuffer(grid: _*)\n        val visited = mutable.ArrayBuffer(grid:\
    \ _*)\n        val result = mutable.ArrayBuffer(grid: _*)\n        val visitedCount\
    \ = mutable.ArrayBuffer(grid: _*)\n        val resultCount = mutable.ArrayBuffer(grid:\
    \ _*)\n        val visitedCount2 = mutable.ArrayBuffer(grid: _*)\n        val\
    \ resultCount2 = mutable.ArrayBuffer(grid: _*)\n        val visitedCount3 = mutable.ArrayBuffer(grid:\
    \ _*)\n        val resultCount3 = mutable.ArrayBuffer(grid: _*)\n        val visitedCount4\
    \ = mutable.ArrayBuffer(grid: _*)\n        val resultCount4 = mutable.ArrayBuffer(grid:\
    \ _*)\n        val visitedCount5 = mutable.ArrayBuffer(grid: _*)\n        val\
    \ resultCount5 = mutable.ArrayBuffer(grid: _*)\n        val visitedCount6 = mutable.ArrayBuffer(grid:\
    \ _*)\n        val resultCount6 = mutable.ArrayBuffer(grid: _*)\n        val visitedCount7\
    \ = mutable.ArrayBuffer(grid: _*)\n        val resultCount7 = mutable.ArrayBuffer(grid:\
    \ _*)\n        val visitedCount8 = mutable.ArrayBuffer(grid: _*)\n        val\
    \ resultCount8 = mutable.ArrayBuffer(grid: _*)\n        val visitedCount9 = mutable.ArrayBuffer(grid:\
    \ _*)\n        val resultCount9 = mutable.ArrayBuffer(grid: _*)\n        val visitedCount10\
    \ = mutable.ArrayBuffer(grid: _*)\n        val resultCount10 = mutable.ArrayBuffer(grid:\
    \ _*)\n        val visitedCount11 = mutable.ArrayBuffer(grid: _*)\n        val\
    \ resultCount11 = mutable.ArrayBuffer(grid: _*)\n        val visitedCount12 =\
    \ mutable.ArrayBuffer(grid: _*)\n        val resultCount12 = mutable.ArrayBuffer(grid:\
    \ _*)\n        val visitedCount13 = mutable.ArrayBuffer(grid: _*)\n        val\
    \ resultCount13 = mutable.ArrayBuffer(grid: _*)\n        val visitedCount14 =\
    \ mutable.ArrayBuffer(grid: _*)\n        val resultCount14 = mutable.ArrayBuffer(grid:\
    \ _*)\n        val visitedCount15 = mutable.ArrayBuffer(grid: _*)\n        val\
    \ resultCount15 = mutable.ArrayBuffer(grid: _*)\n        val visitedCount16 =\
    \ mutable.ArrayBuffer(grid: _*)\n        val resultCount16 = mutable.ArrayBuffer(grid:\
    \ _*)\n        val visitedCount17 = mutable.ArrayBuffer(grid: _*)\n        val\
    \ resultCount17 = mutable.ArrayBuffer(grid: _", "        val N = grid.size\n \
    \       val m = N * N\n        val lst_A = mutable.ArrayBuffer.empty[Long]\n \
    \       val lst_B = mutable.ArrayBuffer.empty[Long]\n        val lst_C = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_D = mutable.ArrayBuffer.empty[Long]\n        val lst_E = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_F = mutable.ArrayBuffer.empty[Long]\n        val lst_G = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_H = mutable.ArrayBuffer.empty[Long]\n        val lst_I = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_J = mutable.ArrayBuffer.empty[Long]\n        val lst_K = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_L = mutable.ArrayBuffer.empty[Long]\n        val lst_M = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_N = mutable.ArrayBuffer.empty[Long]\n        val lst_O = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_P = mutable.ArrayBuffer.empty[Long]\n        val lst_Q = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_R = mutable.ArrayBuffer.empty[Long]\n        val lst_S = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_T = mutable.ArrayBuffer.empty[Long]\n        val lst_U = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_V = mutable.ArrayBuffer.empty[Long]\n        val lst_W = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_X = mutable.ArrayBuffer.empty[Long]\n        val lst_Y = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_Z = mutable.ArrayBuffer.empty[Long]\n        val lst_A = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_B = mutable.ArrayBuffer.empty[Long]\n        val lst_C = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_D = mutable.ArrayBuffer.empty[Long]\n        val lst_E = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_F = mutable.ArrayBuffer.empty[Long]\n        val lst_G = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_H = mutable.ArrayBuffer.empty[Long]\n        val lst_I = mutable.ArrayBuffer.empty[",
  "        val N = grid.length\n        val M = grid(0).length\n        val grid =\
    \ mutable.ArrayBuffer.empty[List[Long]](N * M)\n        for (i <- 0 until N) {\n\
    \            for (j <- 0 until M) {\n                grid(i * M + j) = grid(i).map(x\
    \ => x + grid(j).indexOf(x)).min\n            }\n        }\n        val ans =\
    \ grid.map(x => x.min).distinct\n        ans.sortWith((x, y) => x < y)", "   \
    \     val n = grid.length\n        val m = grid(0).length\n        val result\
    \ = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n        val\
    \ queue = new Array[Int](k)\n        val queueLen = new Array[Int](k)\n      \
    \  val visitedLen = new Array[Int](k)\n        val queueLenLen = new Array[Int](k)\n\
    \        val visitedLenLen = new Array[Int](k)\n        val queueLenLenLen = new\
    \ Array[Int](k)\n        val visitedLenLenLen = new Array[Int](k)\n        val\
    \ queueLenLenLenLen = new Array[Int](k)\n        val visitedLenLenLenLen = new\
    \ Array[Int](k)\n        val queueLenLenLenLenLen = new Array[Int](k)\n      \
    \  val visitedLenLenLenLenLen = new Array[Int](k)\n        val queueLenLenLenLenLenLen\
    \ = new Array[Int](k)\n        val visitedLenLenLenLenLenLen = new Array[Int](k)\n\
    \        val queueLenLenLenLenLenLenLen = new Array[Int](k)\n        val visitedLenLenLenLenLenLenLen\
    \ = new Array[Int](k)\n        val queueLenLenLenLenLenLenLenLen = new Array[Int](k)\n\
    \        val visitedLenLenLenLenLenLenLenLen = new Array[Int](k)\n        val\
    \ queueLenLenLenLenLenLenLenLenLen = new Array[Int](k)\n        val visitedLenLenLenLenLenLenLenLenLen\
    \ = new Array[Int](k)\n        val queueLenLenLenLenLenLenLenLenLenLen = new Array[Int](k)\n\
    \        val visitedLenLenLenLenLenLenLenLenLenLen = new Array[Int](k)\n     \
    \   val queueLenLenLenLenLenLenLenLenLenLenLen = new Array[Int](k)\n        val\
    \ visitedLenLenLenLenLenLenLenLenLenLenLen = new Array[Int](k)\n        val queueLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = new Array[Int](k)\n        val visitedLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = new Array[Int](k)\n        val queueLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = new Array[Int](k)\n        val visitedLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = new Array[Int](k)\n        val queueLenLenLenLenLenLenLenLenLenLen", "   \
    \     val N = grid.length\n        val m = grid.head\n        val n = grid.last\n\
    \        val lst_A = mutable.ListBuffer.empty[Long]\n        val lst_B = mutable.ListBuffer.empty[Long]\n\
    \        val lst_C = mutable.ListBuffer.empty[Long]\n        val lst_D = mutable.ListBuffer.empty[Long]\n\
    \        val lst_E = mutable.ListBuffer.empty[Long]\n        val lst_F = mutable.ListBuffer.empty[Long]\n\
    \        val lst_G = mutable.ListBuffer.empty[Long]\n        val lst_H = mutable.ListBuffer.empty[Long]\n\
    \        val lst_I = mutable.ListBuffer.empty[Long]\n        val lst_J = mutable.ListBuffer.empty[Long]\n\
    \        val lst_K = mutable.ListBuffer.empty[Long]\n        val lst_L = mutable.ListBuffer.empty[Long]\n\
    \        val lst_M = mutable.ListBuffer.empty[Long]\n        val lst_N = mutable.ListBuffer.empty[Long]\n\
    \        val lst_O = mutable.ListBuffer.empty[Long]\n        val lst_P = mutable.ListBuffer.empty[Long]\n\
    \        val lst_Q = mutable.ListBuffer.empty[Long]\n        val lst_R = mutable.ListBuffer.empty[Long]\n\
    \        val lst_S = mutable.ListBuffer.empty[Long]\n        val lst_T = mutable.ListBuffer.empty[Long]\n\
    \        val lst_U = mutable.ListBuffer.empty[Long]\n        val lst_V = mutable.ListBuffer.empty[Long]\n\
    \        val lst_W = mutable.ListBuffer.empty[Long]\n        val lst_X = mutable.ListBuffer.empty[Long]\n\
    \        val lst_Y = mutable.ListBuffer.empty[Long]\n        val lst_Z = mutable.ListBuffer.empty[Long]\n\
    \        val lst_A = mutable.ListBuffer.empty[Long]\n        val lst_B = mutable.ListBuffer.empty[Long]\n\
    \        val lst_C = mutable.ListBuffer.empty[Long]\n        val lst_D = mutable.ListBuffer.empty[Long]\n\
    \        val lst_E = mutable.ListBuffer.empty[Long]\n        val lst_F = mutable.ListBuffer.empty[Long]\n\
    \        val lst_G = mutable.ListBuffer.empty[Long]\n        val lst_H = mutable.ListBuffer.empty[Long]\n\
    \        val lst_I = mut", "        val n = grid.length\n        val m = grid(0).length\n\
    \        val result = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n\
    \        val queue = new Array[Int](n)\n        val stack = new Array[Int](k)\n\
    \        val min = new Array[Long](k)\n        val max = new Array[Long](k)\n\
    \        val minPath = new Array[Long](k)\n        val maxPath = new Array[Long](k)\n\
    \        val minPathIndex = new Array[Int](k)\n        val maxPathIndex = new\
    \ Array[Int](k)\n        val minPathIndexMap = new mutable.HashMap[Long, Int]()\n\
    \        val maxPathIndexMap = new mutable.HashMap[Long, Int]()\n        val minPathIndexMap2\
    \ = new mutable.HashMap[Long, Int]()\n        val maxPathIndexMap2 = new mutable.HashMap[Long,\
    \ Int]()\n        val minPathIndexMap3 = new mutable.HashMap[Long, Int]()\n  \
    \      val maxPathIndexMap3 = new mutable.HashMap[Long, Int]()\n        val minPathIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxPathIndexMap4 = new mutable.HashMap[Long,\
    \ Int]()\n        val minPathIndexMap5 = new mutable.HashMap[Long, Int]()\n  \
    \      val maxPathIndexMap5 = new mutable.HashMap[Long, Int]()\n        val minPathIndexMap6\
    \ = new mutable.HashMap[Long, Int]()\n        val maxPathIndexMap6 = new mutable.HashMap[Long,\
    \ Int]()\n        val minPathIndexMap7 = new mutable.HashMap[Long, Int]()\n  \
    \      val maxPathIndexMap7 = new mutable.HashMap[Long, Int]()\n        val minPathIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxPathIndexMap8 = new mutable.HashMap[Long,\
    \ Int]()\n        val minPathIndexMap9 = new mutable.HashMap[Long, Int]()\n  \
    \      val maxPathIndexMap9 = new mutable.HashMap[Long, Int]()\n        val minPathIndexMap10\
    \ = new mutable.HashMap[Long, Int]()\n        val maxPathIndexMap10 = new mutable.HashMap[Long,\
    \ Int]()\n        val minPathIndexMap11 = new mutable.HashMap[Long, Int]()\n \
    \       val maxPathIndexMap11 = new mutable.HashMap[Long, Int]", "        val\
    \ N = grid.size\n        val m = mutable.HashMap[Long, List[Long]]()\n       \
    \ val lst_A = mutable.ArrayBuffer.empty[Long]\n        val lst_B = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_C = mutable.ArrayBuffer.empty[Long]\n        val lst_D = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_E = mutable.ArrayBuffer.empty[Long]\n        val lst_F = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_G = mutable.ArrayBuffer.empty[Long]\n        val lst_H = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_I = mutable.ArrayBuffer.empty[Long]\n        val lst_J = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_K = mutable.ArrayBuffer.empty[Long]\n        val lst_L = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_M = mutable.ArrayBuffer.empty[Long]\n        val lst_N = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_O = mutable.ArrayBuffer.empty[Long]\n        val lst_P = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_Q = mutable.ArrayBuffer.empty[Long]\n        val lst_R = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_S = mutable.ArrayBuffer.empty[Long]\n        val lst_T = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_U = mutable.ArrayBuffer.empty[Long]\n        val lst_V = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_W = mutable.ArrayBuffer.empty[Long]\n        val lst_X = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_Y = mutable.ArrayBuffer.empty[Long]\n        val lst_Z = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_A = mutable.ArrayBuffer.empty[Long]\n        val lst_B = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_C = mutable.ArrayBuffer.empty[Long]\n        val lst_D = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_E = mutable.ArrayBuffer.empty[Long]\n        val lst_F = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_G = mutable.ArrayBuffer.empty[Long]\n        val lst_H = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_I", "        val N = grid.size\n        val m = N * N\n     \
    \   val lst_A = new Array[Long](m)\n        val lst_B = new Array[Long](m)\n \
    \       var i = 0\n        var j = 0\n        var k = 0\n        var cnt = 0\n\
    \        var min = 0\n        var minPath = new Array[Long](k)\n        var temp\
    \ = 0\n        for(i <- 0 until N) {\n            for(j <- 0 until N) {\n    \
    \            if(grid(i)(j) == 1) {\n                    lst_A(i) = grid(i)(j)\n\
    \                    lst_B(j) = grid(i)(j)\n                    cnt += 1\n   \
    \             }\n            }\n        }\n        for(i = 1 until cnt) {\n  \
    \          for(j <- 0 until N) {\n                if(grid(i)(j) == 1) {\n    \
    \                if(lst_A(i) < lst_B(j)) {\n                        temp = lst_A(i)\n\
    \                        lst_A(i) = lst_B(j)\n                        lst_B(j)\
    \ = temp\n                    }\n                }\n            }\n        }\n\
    \        for(i = 1 until cnt) {\n            for(j <- 0 until N) {\n         \
    \       if(grid(i)(j) == 1) {\n                    if(lst_A(i) < lst_B(j)) {\n\
    \                        min = lst_A(i)\n                        minPath(0) =\
    \ grid(i)(j)\n                    }\n                }\n            }\n      \
    \  }\n        return minPath", "        val n = grid.length\n        val m = grid(0).length\n\
    \        val result = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array",
  "        val N = grid.size\n        val m = mutable.HashMap.empty[Long, List[Long]]\n\
    \        val visited = mutable.HashSet.empty[Long]\n        val ans = mutable.ArrayBuffer.empty[Long]\n\
    \        val queue = mutable.Queue.empty[Long]\n        for (i <- 1 to N) {\n\
    \            val row = grid(i)\n            val cell = row(0)\n            val\
    \ value = row(1)\n            val list = m.getOrElse(cell, mutable.ArrayBuffer.empty[Long])\n\
    \            list += value\n            m.put(cell, list)\n            visited.add(cell)\n\
    \            queue += cell\n        }\n        val minLength = queue.size\n  \
    \      val minValue = queue.dequeue\n        val visitedList = m.get(minValue)\n\
    \        val visitedSet = visited.toSet\n        val visitedSetSize = visitedSet.size\n\
    \        val visitedSetIterator = visitedSet.iterator\n        val visitedSetIteratorSize\
    \ = visitedSetIterator.size\n        val visitedSetIteratorIterator = visitedSetIterator.iterator\n\
    \        val visitedSetIteratorIteratorIterator = visitedSetIteratorIterator.iterator\n\
    \        val visitedSetIteratorIteratorIteratorIterator = visitedSetIteratorIteratorIterator.iterator\n\
    \        val visitedSetIteratorIteratorIteratorIteratorIterator = visitedSetIteratorIteratorIterator.iterator\n\
    \        val visitedSetIteratorIteratorIteratorIteratorIteratorIterator = visitedSetIteratorIteratorIterator.iterator\n\
    \        val visitedSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = visitedSetIteratorIteratorIterator.iterator\n        val visitedSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = visitedSetIteratorIteratorIterator.iterator\n        val visitedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = visitedSetIteratorIteratorIterator.iterator\n        val visitedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = visitedSetIteratorIteratorIterator.iterator\n        val visitedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = visitedSetIteratorIteratorIterator.iterator\n        val visitedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = visitedSetIteratorIteratorIterator.iterator\n        val visitedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = visitedSetIteratorIteratorIterator.iterator\n        val visitedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = visitedSetIteratorIteratorIterator.iterator\n        val visitedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = visitedSetIterator", "        val m = grid.length\n        val n = grid(0).length\n\
    \        val result = new mutable.ListBuffer[Long]()\n        val visited = new\
    \ mutable.HashSet[Long]()\n        val visitedList = new mutable.ListBuffer[Long]()\n\
    \        val visitedList2 = new mutable.ListBuffer[Long]()\n        val visitedList3\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList4 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList5 = new mutable.ListBuffer[Long]()\n        val visitedList6\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList7 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList8 = new mutable.ListBuffer[Long]()\n        val visitedList9\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList10 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList11 = new mutable.ListBuffer[Long]()\n        val visitedList12\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList13 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList14 = new mutable.ListBuffer[Long]()\n        val visitedList15\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList16 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList17 = new mutable.ListBuffer[Long]()\n        val visitedList18\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList19 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList20 = new mutable.ListBuffer[Long]()\n        val visitedList21\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList22 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList23 = new mutable.ListBuffer[Long]()\n        val visitedList24\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList25 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList26 = new mutable.ListBuffer[Long]()\n        val visitedList27\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList28 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList29 = new mutable.ListBuffer[Long]()\n        val visitedList30\
    \ = new mut", "        val N = grid.size\n        val M = N * N\n        val lst_A\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_B = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_C = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_D = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_E\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_F = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_G = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_H = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_I\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_J = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_K = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_L = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_M\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_N = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_O = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_P = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_Q\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_R = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_S = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_T = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_U\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_V = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_W = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_X = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_Y\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_Z = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_A = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_B = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_C\
    \ = scala.collection.mutable.ArrayBuffer.empty", "        val n = grid.length\n\
    \        val m = grid(0).length\n        val result = new Array[Long](k)\n   \
    \     var minPath = 0\n        var minPathIndex = 0\n        var minPathValue\
    \ = grid(0).head\n        var minPathValueIndex = 0\n        var minPathValueIndex\
    \ = grid(0).head\n        var minPathValueIndex = grid(0).head\n        var minPathValueIndex\
    \ = grid(0).head\n        var minPathValueIndex = grid(0).head\n        var minPathValueIndex\
    \ = grid(0).head\n        var minPathValueIndex = grid(0).head\n        var minPathValueIndex\
    \ = grid(0).head\n        var minPathValueIndex = grid(0).head\n        var minPathValueIndex\
    \ = grid(0).head\n        var minPathValueIndex = grid(0).head\n        var minPathValueIndex\
    \ = grid(0).head\n        var minPathValueIndex = grid(0).head\n        var minPathValueIndex\
    \ = grid(0).head\n        var minPathValueIndex = grid(0).head\n        var minPathValueIndex\
    \ = grid(0).head\n        var minPathValueIndex = grid(0).head\n        var minPathValueIndex\
    \ = grid(0).head\n        var minPathValueIndex = grid(0).head\n        var minPathValueIndex\
    \ = grid(0).head\n        var minPathValueIndex = grid(0).head\n        var minPathValueIndex\
    \ = grid(0).head\n        var minPathValueIndex = grid(0).head\n        var minPathValueIndex\
    \ = grid(0).head\n        var minPathValueIndex = grid(0).head\n        var minPathValueIndex\
    \ = grid(0).head\n        var minPathValueIndex = grid(0).head\n        var minPathValueIndex\
    \ = grid(0).head\n        var minPathValueIndex = grid(0).head\n        var minPathValueIndex\
    \ = grid(0).head\n        var minPathValueIndex = grid(0).head\n        var minPathValueIndex\
    \ = grid(0).head\n        var minPathValueIndex = grid(0).head\n        var minPathValueIndex\
    \ = grid(0).head\n        var minPathValueIndex = grid(0).head\n        var minPathValueIndex\
    \ = grid(0).head\n        var minPathValueIndex = grid(0).head\n        var minPathValueIndex\
    \ = grid(0).head\n        var minPathValueIndex = grid(0).head\n        var minPathValueIndex\
    \ = grid(0).head\n        var minPathValueIndex = grid(0).head\n        var minPathValueIndex\
    \ = grid(0).head\n        var minPathValueIndex = grid(0).head\n        var minPathValueIndex\
    \ = grid(0).head\n        var minPathValueIndex = grid(0).head\n        var minPathValueIndex\
    \ = grid(0).head\n        var minPathValueIndex = grid(0).head\n        var minPathValueIndex\
    \ = grid(0).head\n        var minPathValueIndex = grid(0).head\n        var minPathValueIndex\
    \ = grid(0).head\n        var minPathValueIndex = grid(0).head\n        var minPathValueIndex\
    \ = grid(0).head\n        var minPathValue", "        val m = grid.length\n  \
    \      val n = grid(0).length\n        val result = new Array[Long](k)\n     \
    \   val visited = new Array[Boolean](k)\n        val queue = new Array[Int](k)\n\
    \        val visitedMap = new mutable.HashMap[Int, Boolean]()\n        val queueMap\
    \ = new mutable.HashMap[Int, Int]()\n        val queueMap2 = new mutable.HashMap[Int,\
    \ Int]()\n        val queueMap3 = new mutable.HashMap[Int, Int]()\n        val\
    \ queueMap4 = new mutable.HashMap[Int, Int]()\n        val queueMap5 = new mutable.HashMap[Int,\
    \ Int]()\n        val queueMap6 = new mutable.HashMap[Int, Int]()\n        val\
    \ queueMap7 = new mutable.HashMap[Int, Int]()\n        val queueMap8 = new mutable.HashMap[Int,\
    \ Int]()\n        val queueMap9 = new mutable.HashMap[Int, Int]()\n        val\
    \ queueMap10 = new mutable.HashMap[Int, Int]()\n        val queueMap11 = new mutable.HashMap[Int,\
    \ Int]()\n        val queueMap12 = new mutable.HashMap[Int, Int]()\n        val\
    \ queueMap13 = new mutable.HashMap[Int, Int]()\n        val queueMap14 = new mutable.HashMap[Int,\
    \ Int]()\n        val queueMap15 = new mutable.HashMap[Int, Int]()\n        val\
    \ queueMap16 = new mutable.HashMap[Int, Int]()\n        val queueMap17 = new mutable.HashMap[Int,\
    \ Int]()\n        val queueMap18 = new mutable.HashMap[Int, Int]()\n        val\
    \ queueMap19 = new mutable.HashMap[Int, Int]()\n        val queueMap20 = new mutable.HashMap[Int,\
    \ Int]()\n        val queueMap21 = new mutable.HashMap[Int, Int]()\n        val\
    \ queueMap22 = new mutable.HashMap[Int, Int]()\n        val queueMap23 = new mutable.HashMap[Int,\
    \ Int]()\n        val queueMap24 = new mutable.HashMap[Int, Int]()\n        val\
    \ queueMap25 = new mutable.HashMap[Int, Int]()\n        val queueMap26 = new mutable.HashMap[Int,\
    \ Int]()\n        val queueMap27 = new mutable.HashMap[Int, Int]()\n        val\
    \ queueMap28 = new mutable.HashMap[Int, Int]()\n        val queueMap", "     \
    \   val N = grid.size\n        val m = N * N\n        val lst_A = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_B = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  var i = 0\n        var j = 0\n        var k = 0\n        var minPath = 0\n\
    \        var minPathIndex = 0\n        var minPathValue = 0\n        while(i <\
    \ N) {\n            while(j < N) {\n                if(grid[i][j] == k) {\n  \
    \                  lst_A += grid[i][j]\n                    lst_B += grid[i][j]\n\
    \                    k++\n                    j++\n                } else {\n\
    \                    j++\n                }\n            }\n            minPathValue\
    \ = lst_A.min\n            minPathIndex = lst_A.indexOf(minPathValue)\n      \
    \      minPath += minPathValue\n            minPathIndex += 1\n            minPathValue\
    \ -= minPathIndex\n            minPathIndex -= 1\n            minPathValue /=\
    \ N\n            minPathIndex += 1\n            lst_A.remove(minPathIndex)\n \
    \           lst_B.remove(minPathIndex)\n            i += 1\n            j += 1\n\
    \        }\n        minPath", "        val N = grid.length\n        val m = N\
    \ * N\n        val lst_A = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_B = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_C = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_D\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_E = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_F = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_G = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_H\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_I = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_J = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_K = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_L\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_M = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_N = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_O = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_P\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_Q = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_R = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_S = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_T\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_U = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_V = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_W = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_X\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_Y = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_Z = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_A = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_B\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_C = scala.collection.mutable.ArrayBuffer.empty",
  "        val m = grid.map(_.size).max\n        val n = grid.map(_.size).min\n  \
    \      val grid = grid.map(_.toArray).map(_.sorted)\n        val m = grid.map(_.size).max\n\
    \        val n = grid.map(_.size).min\n        val grid = grid.map(_.toArray).map(_.sorted)\n\
    \        val m = grid.map(_.size).max\n        val n = grid.map(_.size).min\n\
    \        val grid = grid.map(_.toArray).map(_.sorted)\n        val m = grid.map(_.size).max\n\
    \        val n = grid.map(_.size).min\n        val grid = grid.map(_.toArray).map(_.sorted)\n\
    \        val m = grid.map(_.size).max\n        val n = grid.map(_.size).min\n\
    \        val grid = grid.map(_.toArray).map(_.sorted)\n        val m = grid.map(_.size).max\n\
    \        val n = grid.map(_.size).min\n        val grid = grid.map(_.toArray).map(_.sorted)\n\
    \        val m = grid.map(_.size).max\n        val n = grid.map(_.size).min\n\
    \        val grid = grid.map(_.toArray).map(_.sorted)\n        val m = grid.map(_.size).max\n\
    \        val n = grid.map(_.size).min\n        val grid = grid.map(_.toArray).map(_.sorted)\n\
    \        val m = grid.map(_.size).max\n        val n = grid.map(_.size).min\n\
    \        val grid = grid.map(_.toArray).map(_.sorted)\n        val m = grid.map(_.size).max\n\
    \        val n = grid.map(_.size).min\n        val grid = grid.map(_.toArray).map(_.sorted)\n\
    \        val m = grid.map(_.size).max\n        val n = grid.map(_.size).min\n\
    \        val grid = grid.map(_.toArray).map(_.sorted)\n        val m = grid.map(_.size).max\n\
    \        val n = grid.map(_.size).min\n        val grid = grid.map(_.toArray).map(_.sorted)\n\
    \        val m = grid.map(_.size).max\n        val n = grid.map(_.size).min\n\
    \        val grid = grid.map(_.toArray).map(_.sorted)\n        val m = grid.map(_.size).max\n\
    \        val n = grid.map(_.size).min\n        val grid = grid.map(_.toArray).map(_.sorted)\n\
    \        val m = grid.map(_.size).max\n        val n = grid.map(_.size).min\n\
    \        val grid = grid.map(_.toArray).map(_.sorted)\n        val ", "      \
    \  val m = grid.map(_.size).max\n        val n = grid.map(_.size).min\n      \
    \  val grid = grid.map(_.map(_.toLong))\n        val m = grid.map(_.size).max\n\
    \        val n = grid.map(_.size).min\n        val grid = grid.map(_.map(_.toLong))\n\
    \        val m = grid.map(_.size).max\n        val n = grid.map(_.size).min\n\
    \        val grid = grid.map(_.map(_.toLong))\n        val m = grid.map(_.size).max\n\
    \        val n = grid.map(_.size).min\n        val grid = grid.map(_.map(_.toLong))\n\
    \        val m = grid.map(_.size).max\n        val n = grid.map(_.size).min\n\
    \        val grid = grid.map(_.map(_.toLong))\n        val m = grid.map(_.size).max\n\
    \        val n = grid.map(_.size).min\n        val grid = grid.map(_.map(_.toLong))\n\
    \        val m = grid.map(_.size).max\n        val n = grid.map(_.size).min\n\
    \        val grid = grid.map(_.map(_.toLong))\n        val m = grid.map(_.size).max\n\
    \        val n = grid.map(_.size).min\n        val grid = grid.map(_.map(_.toLong))\n\
    \        val m = grid.map(_.size).max\n        val n = grid.map(_.size).min\n\
    \        val grid = grid.map(_.map(_.toLong))\n        val m = grid.map(_.size).max\n\
    \        val n = grid.map(_.size).min\n        val grid = grid.map(_.map(_.toLong))\n\
    \        val m = grid.map(_.size).max\n        val n = grid.map(_.size).min\n\
    \        val grid = grid.map(_.map(_.toLong))\n        val m = grid.map(_.size).max\n\
    \        val n = grid.map(_.size).min\n        val grid = grid.map(_.map(_.toLong))\n\
    \        val m = grid.map(_.size).max\n        val n = grid.map(_.size).min\n\
    \        val grid = grid.map(_.map(_.toLong))\n        val m = grid.map(_.size).max\n\
    \        val n = grid.map(_.size).min\n        val grid = grid.map(_.map(_.toLong))\n\
    \        val m = grid.map(_.size).max\n        val n = grid.map(_.size).min\n\
    \        val grid = grid.map(_.map(_.toLong))\n        val m = grid.map(_.size).max\n\
    \        val n = grid.map(_.size).min\n        val grid = grid.map(_.map(_.toLong))\n",
  "        val n = grid.length\n        val m = grid(0).length\n        val grid =\
    \ mutable.ArrayBuffer.empty[List[Long]](m)\n        for (i <- 0 until n) {\n \
    \           val row = grid\n            val col = grid\n            val value\
    \ = grid\n            val list = grid\n            val list = grid\n         \
    \   val list = grid\n            val list = grid\n            val list = grid\n\
    \            val list = grid\n            val list = grid\n            val list\
    \ = grid\n            val list = grid\n            val list = grid\n         \
    \   val list = grid\n            val list = grid\n            val list = grid\n\
    \            val list = grid\n            val list = grid\n            val list\
    \ = grid\n            val list = grid\n            val list = grid\n         \
    \   val list = grid\n            val list = grid\n            val list = grid\n\
    \            val list = grid\n            val list = grid\n            val list\
    \ = grid\n            val list = grid\n            val list = grid\n         \
    \   val list = grid\n            val list = grid\n            val list = grid\n\
    \            val list = grid\n            val list = grid\n            val list\
    \ = grid\n            val list = grid\n            val list = grid\n         \
    \   val list = grid\n            val list = grid\n            val list = grid\n\
    \            val list = grid\n            val list = grid\n            val list\
    \ = grid\n            val list = grid\n            val list = grid\n         \
    \   val list = grid\n            val list = grid\n            val list = grid\n\
    \            val list = grid\n            val list = grid\n            val list\
    \ = grid\n            val list = grid\n            val list = grid\n         \
    \   val list = grid\n            val list = grid\n            val list = grid\n\
    \            val list = grid\n            val list = grid\n            val list\
    \ = grid\n            val list = grid\n            val list = grid\n         \
    \   val list = grid\n            val list = grid\n            val list = grid\n\
    \            val list = grid\n            val list = grid\n            val list\
    \ = grid\n            val list = grid\n            val list = grid\n         \
    \   val list = grid\n            val list = grid\n            val list = grid\n\
    \            val list = grid\n            val list = grid\n            val list\
    \ = grid\n            val list = grid\n            val list = grid\n         \
    \   val list = grid\n            val list = grid\n            val list = grid\n\
    \            val list = grid\n            val list = grid\n            val list\
    \ = grid\n            val list = grid\n            val list = grid\n         \
    \   val list = grid\n            val list = grid\n            val list = grid\n\
    \            val list = grid\n            val list = grid\n            val list\
    \ = grid\n            val list = grid\n            val list = grid\n         \
    \   val list = grid\n            val list = grid\n            val ", "       \
    \ val N = grid.length\n        val M = grid(0).length\n        val grid = mutable.ArrayBuffer.empty[List[Long]](N\
    \ * M)\n        for (i <- 0 until N) {\n            for (j <- 0 until M) {\n \
    \               grid(i * M + j) = grid(i).map(x => if (x == grid((i + 1) * M +\
    \ j)) x else x + 1).min\n            }\n        }\n        val result = grid.map(x\
    \ => x.min).distinct\n        result.sortWith((x, y) => x < y)", "        val\
    \ m = grid.length\n        val n = grid(0).length\n        val result = new Array[Long](k)\n\
    \        var index = 0\n        var minPath = 0\n        var minPathIndex = 0\n\
    \        var minPathValue = 0L\n        var minPathValueIndex = 0\n        var\
    \ minPathValueIndex2 = 0\n        var minPathValueIndex3 = 0\n        var minPathValueIndex4\
    \ = 0\n        var minPathValueIndex5 = 0\n        var minPathValueIndex6 = 0\n\
    \        var minPathValueIndex7 = 0\n        var minPathValueIndex8 = 0\n    \
    \    var minPathValueIndex9 = 0\n        var minPathValueIndex10 = 0\n       \
    \ var minPathValueIndex11 = 0\n        var minPathValueIndex12 = 0\n        var\
    \ minPathValueIndex13 = 0\n        var minPathValueIndex14 = 0\n        var minPathValueIndex15\
    \ = 0\n        var minPathValueIndex16 = 0\n        var minPathValueIndex17 =\
    \ 0\n        var minPathValueIndex18 = 0\n        var minPathValueIndex19 = 0\n\
    \        var minPathValueIndex20 = 0\n        var minPathValueIndex21 = 0\n  \
    \      var minPathValueIndex22 = 0\n        var minPathValueIndex23 = 0\n    \
    \    var minPathValueIndex24 = 0\n        var minPathValueIndex25 = 0\n      \
    \  var minPathValueIndex26 = 0\n        var minPathValueIndex27 = 0\n        var\
    \ minPathValueIndex28 = 0\n        var minPathValueIndex29 = 0\n        var minPathValueIndex30\
    \ = 0\n        var minPathValueIndex31 = 0\n        var minPathValueIndex32 =\
    \ 0\n        var minPathValueIndex33 = 0\n        var minPathValueIndex34 = 0\n\
    \        var minPathValueIndex35 = 0\n        var minPathValueIndex36 = 0\n  \
    \      var minPathValueIndex37 = 0\n        var minPathValueIndex38 = 0\n    \
    \    var minPathValueIndex39 = 0\n        var minPathValueIndex40 = 0\n      \
    \  var minPathValueIndex41 = 0\n        var minPathValueIndex42 = 0\n        var\
    \ minPathValueIndex43 = 0\n        var minPathValueIndex44 = 0\n        var minPathValueIndex45\
    \ = 0\n        var minPathValueIndex46 = 0\n        var minPathValueIndex47 =\
    \ 0\n        var minPathValueIndex48 = 0\n        var minPathValueIndex49 = 0\n\
    \        var minPathValueIndex50 = 0\n        var minPathValueIndex51 = 0\n  \
    \      var minPathValueIndex52 = 0\n        var minPathValueIndex53 = 0\n    \
    \    var minPathValueIndex54 = 0\n        var minPathValueIndex55 = 0\n      \
    \  var minPathValueIndex56 = 0\n        var minPathValueIndex57 = 0\n        var\
    \ minPathValueIndex58 = 0\n        var minPathValue", "        val N = grid.size\n\
    \        val m = N * N\n        val lst_A = new Array[Long](m)\n        val lst_B\
    \ = new Array[Long](m)\n        val lst_C = new Array[Long](m)\n        val lst_D\
    \ = new Array[Long](m)\n        val lst_E = new Array[Long](m)\n        val lst_F\
    \ = new Array[Long](m)\n        val lst_G = new Array[Long](m)\n        val lst_H\
    \ = new Array[Long](m)\n        val lst_I = new Array[Long](m)\n        val lst_J\
    \ = new Array[Long](m)\n        val lst_K = new Array[Long](m)\n        val lst_L\
    \ = new Array[Long](m)\n        val lst_M = new Array[Long](m)\n        val lst_N\
    \ = new Array[Long](m)\n        val lst_O = new Array[Long](m)\n        val lst_P\
    \ = new Array[Long](m)\n        val lst_Q = new Array[Long](m)\n        val lst_R\
    \ = new Array[Long](m)\n        val lst_S = new Array[Long](m)\n        val lst_T\
    \ = new Array[Long](m)\n        val lst_U = new Array[Long](m)\n        val lst_V\
    \ = new Array[Long](m)\n        val lst_W = new Array[Long](m)\n        val lst_X\
    \ = new Array[Long](m)\n        val lst_Y = new Array[Long](m)\n        val lst_Z\
    \ = new Array[Long](m)\n        val lst_AA = new Array[Long](m)\n        val lst_AB\
    \ = new Array[Long](m)\n        val lst_AC = new Array[Long](m)\n        val lst_AD\
    \ = new Array[Long](m)\n        val lst_AE = new Array[Long](m)\n        val lst_AF\
    \ = new Array[Long](m)\n        val lst_AG = new Array[Long](m)\n        val lst_AH\
    \ = new Array[Long](m)\n        val lst_AI = new Array[Long](m)\n        val lst_AJ\
    \ = new Array[Long](m)\n        val lst_AK = new Array[Long](m)\n        val lst_AL\
    \ = new Array[Long](m)\n        val lst_AM = new Array[Long](m)\n        val lst_AN\
    \ = new Array[Long](m)\n        val lst_AO = new Array[Long](m)\n        val lst_AP\
    \ = new ", "        val m = grid.length\n        val n = grid(0).length\n    \
    \    val grid = mutable.ArrayBuffer.empty[List[Long]](m)\n        for (i <- 0\
    \ until m) {\n            val row = grid(i)\n            for (j <- 0 until n)\
    \ {\n                row += grid(i)(j)\n            }\n            grid += row.toList\n\
    \        }\n        val visited = mutable.HashSet[Long]()\n        val result\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedCount = mutable.HashMap[Long,\
    \ Int]()\n        val visitedCount2 = mutable.HashMap[Long, Int]()\n        val\
    \ visitedCount3 = mutable.HashMap[Long, Int]()\n        val visitedCount4 = mutable.HashMap[Long,\
    \ Int]()\n        val visitedCount5 = mutable.HashMap[Long, Int]()\n        val\
    \ visitedCount6 = mutable.HashMap[Long, Int]()\n        val visitedCount7 = mutable.HashMap[Long,\
    \ Int]()\n        val visitedCount8 = mutable.HashMap[Long, Int]()\n        val\
    \ visitedCount9 = mutable.HashMap[Long, Int]()\n        val visitedCount10 = mutable.HashMap[Long,\
    \ Int]()\n        val visitedCount11 = mutable.HashMap[Long, Int]()\n        val\
    \ visitedCount12 = mutable.HashMap[Long, Int]()\n        val visitedCount13 =\
    \ mutable.HashMap[Long, Int]()\n        val visitedCount14 = mutable.HashMap[Long,\
    \ Int]()\n        val visitedCount15 = mutable.HashMap[Long, Int]()\n        val\
    \ visitedCount16 = mutable.HashMap[Long, Int]()\n        val visitedCount17 =\
    \ mutable.HashMap[Long, Int]()\n        val visitedCount18 = mutable.HashMap[Long,\
    \ Int]()\n        val visitedCount19 = mutable.HashMap[Long, Int]()\n        val\
    \ visitedCount20 = mutable.HashMap[Long, Int]()\n        val visitedCount21 =\
    \ mutable.HashMap[Long, Int]()\n        val visitedCount22 = mutable.HashMap[Long,\
    \ Int]()\n        val visitedCount23 = mutable.HashMap[Long, Int]()\n        val\
    \ visitedCount24 = mutable.HashMap[Long, Int]()\n        val visitedCount25 =\
    \ mutable.HashMap[Long, Int]()\n        val visitedCount26 = ", "        val m\
    \ = grid.length\n        val n = grid(0).length\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val visited = new mutable.HashSet[Long]()\n        val queue = new mutable.PriorityQueue[Long]()\n\
    \        val visitedCount = new mutable.HashMap[Long, Long]()\n        val queueCount\
    \ = new mutable.HashMap[Long, Long]()\n        val visitedCountCount = new mutable.HashMap[Long,\
    \ Long]()\n        val queueCountCount = new mutable.HashMap[Long, Long]()\n \
    \       val visitedCountCountCount = new mutable.HashMap[Long, Long]()\n     \
    \   val queueCountCountCount = new mutable.HashMap[Long, Long]()\n        val\
    \ queueCountCountCountCount = new mutable.HashMap[Long, Long]()\n        val queueCountCountCountCountCount\
    \ = new mutable.HashMap[Long, Long]()\n        val queueCountCountCountCountCountCount\
    \ = new mutable.HashMap[Long, Long]()\n        val queueCountCountCountCountCountCountCount\
    \ = new mutable.HashMap[Long, Long]()\n        val queueCountCountCountCountCountCountCountCount\
    \ = new mutable.HashMap[Long, Long]()\n        val queueCountCountCountCountCountCountCountCountCount\
    \ = new mutable.HashMap[Long, Long]()\n        val queueCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.HashMap[Long, Long]()\n        val queueCountCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.HashMap[Long, Long]()\n        val queueCountCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.HashMap[Long, Long]()\n        val queueCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.HashMap[Long, Long]()\n        val queueCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.HashMap[Long, Long]()\n        val queueCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.HashMap[Long, Long]()\n        val queueCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.HashMap[Long, Long]()\n        val queueCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.HashMap[Long, Long]()\n        val queueCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.HashMap[", "        val n = grid.size\n        val m = grid(0).size\n\
    \        val lst_A = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_B = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_C\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_D = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_E = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_F = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_G\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_H = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_I = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_J = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_K\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_L = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_M = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_N = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_O\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_P = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_Q = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_R = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_S\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_T = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_U = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_V = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_W\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_X = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_Y = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_Z = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_A\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_B = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_C = scala.collection.mutable.ArrayBuffer.empty", "        val\
    \ m = grid.length\n        val n = grid(0).length\n        val result = new mutable.ListBuffer[Long]\n\
    \        val visited = new mutable.HashSet[Long]\n        val visitedList = new\
    \ mutable.ListBuffer[Long]\n        val visitedList2 = new mutable.ListBuffer[Long]\n\
    \        val visitedList3 = new mutable.ListBuffer[Long]\n        val visitedList4\
    \ = new mutable.ListBuffer[Long]\n        val visitedList5 = new mutable.ListBuffer[Long]\n\
    \        val visitedList6 = new mutable.ListBuffer[Long]\n        val visitedList7\
    \ = new mutable.ListBuffer[Long]\n        val visitedList8 = new mutable.ListBuffer[Long]\n\
    \        val visitedList9 = new mutable.ListBuffer[Long]\n        val visitedList10\
    \ = new mutable.ListBuffer[Long]\n        val visitedList11 = new mutable.ListBuffer[Long]\n\
    \        val visitedList12 = new mutable.ListBuffer[Long]\n        val visitedList13\
    \ = new mutable.ListBuffer[Long]\n        val visitedList14 = new mutable.ListBuffer[Long]\n\
    \        val visitedList15 = new mutable.ListBuffer[Long]\n        val visitedList16\
    \ = new mutable.ListBuffer[Long]\n        val visitedList17 = new mutable.ListBuffer[Long]\n\
    \        val visitedList18 = new mutable.ListBuffer[Long]\n        val visitedList19\
    \ = new mutable.ListBuffer[Long]\n        val visitedList20 = new mutable.ListBuffer[Long]\n\
    \        val visitedList21 = new mutable.ListBuffer[Long]\n        val visitedList22\
    \ = new mutable.ListBuffer[Long]\n        val visitedList23 = new mutable.ListBuffer[Long]\n\
    \        val visitedList24 = new mutable.ListBuffer[Long]\n        val visitedList25\
    \ = new mutable.ListBuffer[Long]\n        val visitedList26 = new mutable.ListBuffer[Long]\n\
    \        val visitedList27 = new mutable.ListBuffer[Long]\n        val visitedList28\
    \ = new mutable.ListBuffer[Long]\n        val visitedList29 = new mutable.ListBuffer[Long]\n\
    \        val visitedList30 = new mutable.ListBuffer[Long]\n        val visitedList31\
    \ = new mutable.ListBuffer[Long]\n        val visitedList32 = new mut", "    \
    \    val m = grid.length\n        val n = grid(0).length\n        val result =\
    \ new Array[Long](k)\n        val visited = new Array[Boolean](k)\n        var\
    \ i = 0\n        var j = 0\n        var k = 0\n        var min = 0\n        var\
    \ minIndex = 0\n        var minPath = 0\n        var minPathIndex = 0\n      \
    \  var minPathValue = 0\n        var minPathValueIndex = 0\n        var minPathValueIndex2\
    \ = 0\n        var minPathValueIndex3 = 0\n        var minPathValueIndex4 = 0\n\
    \        var minPathValueIndex5 = 0\n        var minPathValueIndex6 = 0\n    \
    \    var minPathValueIndex7 = 0\n        var minPathValueIndex8 = 0\n        var\
    \ minPathValueIndex9 = 0\n        var minPathValueIndex10 = 0\n        var minPathValueIndex11\
    \ = 0\n        var minPathValueIndex12 = 0\n        var minPathValueIndex13 =\
    \ 0\n        var minPathValueIndex14 = 0\n        var minPathValueIndex15 = 0\n\
    \        var minPathValueIndex16 = 0\n        var minPathValueIndex17 = 0\n  \
    \      var minPathValueIndex18 = 0\n        var minPathValueIndex19 = 0\n    \
    \    var minPathValueIndex20 = 0\n        var minPathValueIndex21 = 0\n      \
    \  var minPathValueIndex22 = 0\n        var minPathValueIndex23 = 0\n        var\
    \ minPathValueIndex24 = 0\n        var minPathValueIndex25 = 0\n        var minPathValueIndex26\
    \ = 0\n        var minPathValueIndex27 = 0\n        var minPathValueIndex28 =\
    \ 0\n        var minPathValueIndex29 = 0\n        var minPathValueIndex30 = 0\n\
    \        var minPathValueIndex31 = 0\n        var minPathValueIndex32 = 0\n  \
    \      var minPathValueIndex33 = 0\n        var minPathValueIndex34 = 0\n    \
    \    var minPathValueIndex35 = 0\n        var minPathValueIndex36 = 0\n      \
    \  var minPathValueIndex37 = 0\n        var minPathValueIndex38 = 0\n        var\
    \ minPathValueIndex39 = 0\n        var minPathValueIndex40 = 0\n        var minPathValueIndex41\
    \ = 0\n        var minPathValueIndex42 = 0\n        var minPathValueIndex43 =\
    \ 0\n        var minPathValueIndex44 = 0\n        var minPathValueIndex45 = 0\n\
    \        var minPathValueIndex46 = 0\n        var minPathValueIndex47 = 0\n  \
    \      var minPathValueIndex48 = 0\n        var minPathValueIndex49 = 0\n    \
    \    var minPathValueIndex50 = 0\n        var minPathValueIndex51 = 0\n      \
    \  var minPathValueIndex52 = 0\n        var minPathValueIndex53 = 0\n        var\
    \ minPathValueIndex54 = 0\n        var minPathValueIndex55 = 0\n        var min",
  "        val n = grid.length\n        val m = grid(0).length\n        val result\
    \ = new Array[Long](k)\n        var i = 1\n        var j = 1\n        var k =\
    \ 1\n        var minPath = 0\n        var minPathIndex = 0\n        var minPathValue\
    \ = 0\n        var minPathValueIndex = 0\n        var minPathValueIndex2 = 0\n\
    \        var minPathValueIndex3 = 0\n        var minPathValueIndex4 = 0\n    \
    \    var minPathValueIndex5 = 0\n        var minPathValueIndex6 = 0\n        var\
    \ minPathValueIndex7 = 0\n        var minPathValueIndex8 = 0\n        var minPathValueIndex9\
    \ = 0\n        var minPathValueIndex10 = 0\n        var minPathValueIndex11 =\
    \ 0\n        var minPathValueIndex12 = 0\n        var minPathValueIndex13 = 0\n\
    \        var minPathValueIndex14 = 0\n        var minPathValueIndex15 = 0\n  \
    \      var minPathValueIndex16 = 0\n        var minPathValueIndex17 = 0\n    \
    \    var minPathValueIndex18 = 0\n        var minPathValueIndex19 = 0\n      \
    \  var minPathValueIndex20 = 0\n        var minPathValueIndex21 = 0\n        var\
    \ minPathValueIndex22 = 0\n        var minPathValueIndex23 = 0\n        var minPathValueIndex24\
    \ = 0\n        var minPathValueIndex25 = 0\n        var minPathValueIndex26 =\
    \ 0\n        var minPathValueIndex27 = 0\n        var minPathValueIndex28 = 0\n\
    \        var minPathValueIndex29 = 0\n        var minPathValueIndex30 = 0\n  \
    \      var minPathValueIndex31 = 0\n        var minPathValueIndex32 = 0\n    \
    \    var minPathValueIndex33 = 0\n        var minPathValueIndex34 = 0\n      \
    \  var minPathValueIndex35 = 0\n        var minPathValueIndex36 = 0\n        var\
    \ minPathValueIndex37 = 0\n        var minPathValueIndex38 = 0\n        var minPathValueIndex39\
    \ = 0\n        var minPathValueIndex40 = 0\n        var minPathValueIndex41 =\
    \ 0\n        var minPathValueIndex42 = 0\n        var minPathValueIndex43 = 0\n\
    \        var minPathValueIndex44 = 0\n        var minPathValueIndex45 = 0\n  \
    \      var minPathValueIndex46 = 0\n        var minPathValueIndex47 = 0\n    \
    \    var minPathValueIndex48 = 0\n        var minPathValueIndex49 = 0\n      \
    \  var minPathValueIndex50 = 0\n        var minPathValueIndex51 = 0\n        var\
    \ minPathValueIndex52 = 0\n        var minPathValueIndex53 = 0\n        var minPathValueIndex54\
    \ = 0\n        var minPathValueIndex55 = 0\n        var minPathValueIndex56 =\
    \ 0\n        var minPathValueIndex57 = 0\n        var minPathValueIndex", "  \
    \      val m = grid.size\n        val n = grid(0).size\n        val visited =\
    \ new mutable.HashSet[Long]()\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val stack = new mutable.Stack[Long]()\n        val stack2 = new mutable.Stack[Long]()\n\
    \        val stack3 = new mutable.Stack[Long]()\n        val stack4 = new mutable.Stack[Long]()\n\
    \        val stack5 = new mutable.Stack[Long]()\n        val stack6 = new mutable.Stack[Long]()\n\
    \        val stack7 = new mutable.Stack[Long]()\n        val stack8 = new mutable.Stack[Long]()\n\
    \        val stack9 = new mutable.Stack[Long]()\n        val stack10 = new mutable.Stack[Long]()\n\
    \        val stack11 = new mutable.Stack[Long]()\n        val stack12 = new mutable.Stack[Long]()\n\
    \        val stack13 = new mutable.Stack[Long]()\n        val stack14 = new mutable.Stack[Long]()\n\
    \        val stack15 = new mutable.Stack[Long]()\n        val stack16 = new mutable.Stack[Long]()\n\
    \        val stack17 = new mutable.Stack[Long]()\n        val stack18 = new mutable.Stack[Long]()\n\
    \        val stack19 = new mutable.Stack[Long]()\n        val stack20 = new mutable.Stack[Long]()\n\
    \        val stack21 = new mutable.Stack[Long]()\n        val stack22 = new mutable.Stack[Long]()\n\
    \        val stack23 = new mutable.Stack[Long]()\n        val stack24 = new mutable.Stack[Long]()\n\
    \        val stack25 = new mutable.Stack[Long]()\n        val stack26 = new mutable.Stack[Long]()\n\
    \        val stack27 = new mutable.Stack[Long]()\n        val stack28 = new mutable.Stack[Long]()\n\
    \        val stack29 = new mutable.Stack[Long]()\n        val stack30 = new mutable.Stack[Long]()\n\
    \        val stack31 = new mutable.Stack[Long]()\n        val stack32 = new mutable.Stack[Long]()\n\
    \        val stack33 = new mutable.Stack[Long]()\n        val stack34 = new mutable.Stack[Long]()\n\
    \        val stack35 = new mutable.Stack[Long]()\n        val stack36 = new mutable.Stack[Long]()\n\
    \        val stack", "        val m = grid.size\n        val n = grid(0).size\n\
    \        val grid = mutable.ArrayBuffer.empty[List[Long]]\n        val visited\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visitedList = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val visitedList2 = mutable.ArrayBuffer.empty[Boolean]\n        val visitedList3\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visitedList4 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val visitedList5 = mutable.ArrayBuffer.empty[Boolean]\n        val visitedList6\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visitedList7 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val visitedList8 = mutable.ArrayBuffer.empty[Boolean]\n        val visitedList9\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visitedList10 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val visitedList11 = mutable.ArrayBuffer.empty[Boolean]\n        val visitedList12\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visitedList13 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val visitedList14 = mutable.ArrayBuffer.empty[Boolean]\n        val visitedList15\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visitedList16 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val visitedList17 = mutable.ArrayBuffer.empty[Boolean]\n        val visitedList18\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visitedList19 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val visitedList20 = mutable.ArrayBuffer.empty[Boolean]\n        val visitedList21\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visitedList22 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val visitedList23 = mutable.ArrayBuffer.empty[Boolean]\n        val visitedList24\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visitedList25 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val visitedList26 = mutable.ArrayBuffer.empty[Boolean]\n        val visitedList27\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visitedList28 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val visitedList29 = mutable.ArrayBuffer.empty[Boolean]\n        val visitedList30\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visitedList3", "        val\
    \ m = grid.length\n        val n = grid(0).length\n        val grid = mutable.ArrayBuffer.empty[List[Long]](m)\n\
    \        for (i <- 0 until m) {\n            val row = grid(i)\n            for\
    \ (j <- 0 until n) {\n                val cell = row.getOrElse(j, 0)\n       \
    \         grid.append(cell :: row.toList)\n            }\n        }\n        val\
    \ visited = mutable.ArrayBuffer.empty[Boolean](m)\n        val ans = mutable.ArrayBuffer.empty[Long](m)\n\
    \        val stack = mutable.Stack.empty[Long]\n        val visitedStack = mutable.Stack.empty[Boolean]\n\
    \        val stackSize = mutable.Stack.empty[Long]\n        val visitedStackSize\
    \ = mutable.Stack.empty[Boolean]\n        val stackIndex = mutable.Stack.empty[Long]\n\
    \        val visitedStackIndex = mutable.Stack.empty[Boolean]\n        val stackSize\
    \ = mutable.Stack.empty[Long]\n        val visitedStackSize = mutable.Stack.empty[Boolean]\n\
    \        val stackIndex = mutable.Stack.empty[Long]\n        val visitedStackIndex\
    \ = mutable.Stack.empty[Boolean]\n        val stackSize = mutable.Stack.empty[Long]\n\
    \        val visitedStackSize = mutable.Stack.empty[Boolean]\n        val stackIndex\
    \ = mutable.Stack.empty[Long]\n        val visitedStackIndex = mutable.Stack.empty[Boolean]\n\
    \        val stackSize = mutable.Stack.empty[Long]\n        val visitedStackSize\
    \ = mutable.Stack.empty[Boolean]\n        val stackIndex = mutable.Stack.empty[Long]\n\
    \        val visitedStackIndex = mutable.Stack.empty[Boolean]\n        val stackSize\
    \ = mutable.Stack.empty[Long]\n        val visitedStackSize = mutable.Stack.empty[Boolean]\n\
    \        val stackIndex = mutable.Stack.empty[Long]\n        val visitedStackIndex\
    \ = mutable.Stack.empty[Boolean]\n        val stackSize = mutable.Stack.empty[Long]\n\
    \        val visitedStackSize = mutable.Stack.empty[Boolean]\n        val stackIndex\
    \ = mutable.Stack.empty[Long]\n        val visitedStackIndex = mutable.Stack.empty[Boolean]\n\
    \        val stackSize = mutable.Stack.empty[Long]\n        val visitedStackSize\
    \ = mutable.Stack.empty[Boolean]\n        val stackIndex = mutable.Stack.empty[Long]\n\
    \        val visitedStack", "        val m = grid.length\n        val n = grid(0).length\n\
    \        val result = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n\
    \        val stack = new Array[Int](k)\n        val stackPointer = 0\n       \
    \ val stackPointer2 = 1\n        val stackPointer3 = 2\n        val stackPointer4\
    \ = 3\n        val stackPointer5 = 4\n        val stackPointer6 = 5\n        val\
    \ stackPointer7 = 6\n        val stackPointer8 = 7\n        val stackPointer9\
    \ = 8\n        val stackPointer10 = 9\n        val stackPointer11 = 10\n     \
    \   val stackPointer12 = 11\n        val stackPointer13 = 12\n        val stackPointer14\
    \ = 13\n        val stackPointer15 = 14\n        val stackPointer16 = 15\n   \
    \     val stackPointer17 = 16\n        val stackPointer18 = 17\n        val stackPointer19\
    \ = 18\n        val stackPointer20 = 19\n        val stackPointer21 = 20\n   \
    \     val stackPointer22 = 21\n        val stackPointer23 = 22\n        val stackPointer24\
    \ = 23\n        val stackPointer25 = 24\n        val stackPointer26 = 25\n   \
    \     val stackPointer27 = 26\n        val stackPointer28 = 27\n        val stackPointer29\
    \ = 28\n        val stackPointer30 = 29\n        val stackPointer31 = 30\n   \
    \     val stackPointer32 = 31\n        val stackPointer33 = 32\n        val stackPointer34\
    \ = 33\n        val stackPointer35 = 34\n        val stackPointer36 = 35\n   \
    \     val stackPointer37 = 36\n        val stackPointer38 = 37\n        val stackPointer39\
    \ = 38\n        val stackPointer40 = 39\n        val stackPointer41 = 40\n   \
    \     val stackPointer42 = 41\n        val stackPointer43 = 42\n        val stackPointer44\
    \ = 43\n        val stackPointer45 = 44\n        val stackPointer46 = 45\n   \
    \     val stackPointer47 = 46\n        val stackPointer48 = 47\n        val stackPointer49\
    \ = 48\n        val stackPointer50 = 49\n        val stackPointer51 = 50\n   \
    \     val stackPointer52 = 51\n        val stackPointer53 = 52\n        val stackPointer54\
    \ = 53\n        val stackPointer55 = 54\n        val stackPointer56 = 55\n   \
    \     val stackPointer57 = 56\n        val stackPointer58 = 57\n        val stackPointer59\
    \ = 58\n        val stackPointer60 = 59\n        val stackPointer61 = 60\n", " \
    \       val m = grid.length\n        val n = grid(0).length\n        val grid\
    \ = mutable.ArrayBuffer.empty[List[Long]]\n        val visited = mutable.HashSet[Long]()\n\
    \        val visitedList = mutable.ArrayBuffer.empty[Long]\n        val visitedList2\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList3 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList4 = mutable.ArrayBuffer.empty[Long]\n        val visitedList5\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList6 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList7 = mutable.ArrayBuffer.empty[Long]\n        val visitedList8\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList9 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList10 = mutable.ArrayBuffer.empty[Long]\n        val visitedList11\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList12 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList13 = mutable.ArrayBuffer.empty[Long]\n        val visitedList14\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList15 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList16 = mutable.ArrayBuffer.empty[Long]\n        val visitedList17\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList18 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList19 = mutable.ArrayBuffer.empty[Long]\n        val visitedList20\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList21 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList22 = mutable.ArrayBuffer.empty[Long]\n        val visitedList23\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList24 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList25 = mutable.ArrayBuffer.empty[Long]\n        val visitedList26\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList27 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList28 = mutable.ArrayBuffer.empty[Long]\n        val visitedList29\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList30 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList3", "        val m = grid.length\n        val n = grid(0).length\n\
    \        val grid = mutable.ArrayBuffer.empty[List[Long]](m)\n        for (i <-\
    \ 0 until m) {\n            grid.append(mutable.ArrayBuffer.empty[List[Long]](n))\n\
    \            for (j <- 0 until n) {\n                grid(i).append(grid(i).last)\n\
    \            }\n        }\n        val visited = mutable.ArrayBuffer.empty[Int](m)\n\
    \        val ans = mutable.ArrayBuffer.empty[Long]\n        val visitedCount =\
    \ mutable.ArrayBuffer.empty[Int](m)\n        for (i <- 0 until m) {\n        \
    \    visited(i) = 0\n            visitedCount(i) = 0\n        }\n        val minPath\
    \ = new mutable.PriorityQueue[List[Long]]()\n        minPath.add(grid(0).last)\n\
    \        val minPathCount = new mutable.PriorityQueue[List[Long]]()\n        minPathCount.add(grid(0).last)\n\
    \        val minPathCount2 = new mutable.PriorityQueue[List[Long]]()\n       \
    \ minPathCount2.add(grid(0).last)\n        val minPathCount3 = new mutable.PriorityQueue[List[Long]]()\n\
    \        minPathCount3.add(grid(0).last)\n        val minPathCount4 = new mutable.PriorityQueue[List[Long]]()\n\
    \        minPathCount4.add(grid(0).last)\n        val minPathCount5 = new mutable.PriorityQueue[List[Long]]()\n\
    \        minPathCount5.add(grid(0).last)\n        val minPathCount6 = new mutable.PriorityQueue[List[Long]]()\n\
    \        minPathCount6.add(grid(0).last)\n        val minPathCount7 = new mutable.PriorityQueue[List[Long]]()\n\
    \        minPathCount7.add(grid(0).last)\n        val minPathCount8 = new mutable.PriorityQueue[List[Long]]()\n\
    \        minPathCount8.add(grid(0).last)\n        val minPathCount9 = new mutable.PriorityQueue[List[Long]]()\n\
    \        minPathCount9.add(grid(0).last)\n        val minPathCount10 = new mutable.PriorityQueue[List[Long]]()\n\
    \        minPathCount10.add(grid(0).last)\n        val minPathCount11 = new mutable.PriorityQueue[List[Long]]()\n\
    \        minPathCount11.add(grid(0).last)\n        val minPathCount12 = new mutable.PriorityQueue[List[Long]]()\n\
    \        minPathCount12.add(grid(0).last)\n        val minPathCount13 = new mutable.PriorityQueue[List[Long]]()\n\
    \        minPathCount13.add(grid(0).last)\n        ", "        val N = grid.size\n\
    \        val m = mutable.HashMap[Long, List[Long]]()\n        val l = mutable.ArrayBuffer.empty[Long]\n\
    \        val r = mutable.ArrayBuffer.empty[Long]\n        val d = mutable.HashMap[Long,\
    \ Long]()\n        val v = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.HashMap[Long,\
    \ List[Long]]()\n        val l = mutable.ArrayBuffer.empty[Long]\n        val\
    \ r = mutable.ArrayBuffer.empty[Long]\n        val d = mutable.HashMap[Long, Long]()\n\
    \        val v = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.HashMap[Long,\
    \ List[Long]]()\n        val l = mutable.ArrayBuffer.empty[Long]\n        val\
    \ r = mutable.ArrayBuffer.empty[Long]\n        val d = mutable.HashMap[Long, Long]()\n\
    \        val v = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.HashMap[Long,\
    \ List[Long]]()\n        val l = mutable.ArrayBuffer.empty[Long]\n        val\
    \ r = mutable.ArrayBuffer.empty[Long]\n        val d = mutable.HashMap[Long, Long]()\n\
    \        val v = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.HashMap[Long,\
    \ List[Long]]()\n        val l = mutable.ArrayBuffer.empty[Long]\n        val\
    \ r = mutable.ArrayBuffer.empty[Long]\n        val d = mutable.HashMap[Long, Long]()\n\
    \        val v = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.HashMap[Long,\
    \ List[Long]]()\n        val l = mutable.ArrayBuffer.empty[Long]\n        val\
    \ r = mutable.ArrayBuffer.empty[Long]\n        val d = mutable.HashMap[Long, Long]()\n\
    \        val v = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.HashMap[Long,\
    \ List[Long]]()\n        val l = mutable.ArrayBuffer.empty[Long]\n        val\
    \ r = mutable.ArrayBuffer.empty[Long]\n        val d = mutable.HashMap[Long, Long]()\n\
    \        val v = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.HashMap[Long,\
    \ List[Long]]()\n        val l = mutable.ArrayBuffer.empty[Long]\n        val\
    \ r = mutable.ArrayBuffer.empty[Long]\n        val d = mutable.HashMap[Long, Long]()\n\
    \        val v = mutable.ArrayBuffer.empty[Long]\n        val ", "        val\
    \ N = grid.length\n        val M = grid(0).length\n        val grid = mutable.ArrayBuffer.empty[List[Long]](N\
    \ * M)\n        for (i <- 0 until N) {\n            for (j <- 0 until M) {\n \
    \               grid.append(grid((i * N) + j).toList)\n            }\n       \
    \ }\n        val visited = mutable.ArrayBuffer.empty[Boolean](N * M)\n       \
    \ val ans = mutable.ArrayBuffer.empty[Long]\n        val stack = mutable.ArrayBuffer.empty[Long]\n\
    \        val stackSize = mutable.ArrayBuffer.empty[Long]\n        val stackIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val stackSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val stackIndex = mutable.ArrayBuffer.empty[Int]\n        val stackSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val stackIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val stackSize = mutable.ArrayBuffer.empty[Int]\n        val stackIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val stackSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val stackIndex = mutable.ArrayBuffer.empty[Int]\n        val stackSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val stackIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val stackSize = mutable.ArrayBuffer.empty[Int]\n        val stackIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val stackSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val stackIndex = mutable.ArrayBuffer.empty[Int]\n        val stackSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val stackIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val stackSize = mutable.ArrayBuffer.empty[Int]\n        val stackIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val stackSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val stackIndex = mutable.ArrayBuffer.empty[Int]\n        val stackSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val stackIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val stackSize = mutable.ArrayBuffer.empty[Int]\n        val stackIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val stackSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val stackIndex = mutable.ArrayBuffer.empty[Int]\n        val stackSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val stackIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val stackSize = mutable.ArrayBuffer.empty[Int]\n        val stackIndex\
    \ = ", "        val m = grid.length\n        val n = grid(0).length\n        val\
    \ result = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n \
    \       val visitedIndex = new Array[Int](k)\n        val visitedIndexIndex =\
    \ new Array[Int](k)\n        val visitedIndexIndexIndex = new Array[Int](k)\n\
    \        val visitedIndexIndexIndexIndex = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndex = new\
    \ Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndex = new\
    \ Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndex =\
    \ new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visite", "        val n = grid.size\n     \
    \   val m = grid(0).size\n        val result = new Array[Long](k)\n        val\
    \ visited = new Array[Boolean](k)\n        val visited_in = new Array[Boolean](k)\n\
    \        val visited_out = new Array[Boolean](k)\n        val visited_in2 = new\
    \ Array[Boolean](k)\n        val visited_out2 = new Array[Boolean](k)\n      \
    \  val visited_in3 = new Array[Boolean](k)\n        val visited_out3 = new Array[Boolean](k)\n\
    \        val visited_in4 = new Array[Boolean](k)\n        val visited_out4 = new\
    \ Array[Boolean](k)\n        val visited_in5 = new Array[Boolean](k)\n       \
    \ val visited_out5 = new Array[Boolean](k)\n        val visited_in6 = new Array[Boolean](k)\n\
    \        val visited_out6 = new Array[Boolean](k)\n        val visited_in7 = new\
    \ Array[Boolean](k)\n        val visited_out7 = new Array[Boolean](k)\n      \
    \  val visited_in8 = new Array[Boolean](k)\n        val visited_out8 = new Array[Boolean](k)\n\
    \        val visited_in9 = new Array[Boolean](k)\n        val visited_out9 = new\
    \ Array[Boolean](k)\n        val visited_in10 = new Array[Boolean](k)\n      \
    \  val visited_out10 = new Array[Boolean](k)\n        val visited_in11 = new Array[Boolean](k)\n\
    \        val visited_out11 = new Array[Boolean](k)\n        val visited_in12 =\
    \ new Array[Boolean](k)\n        val visited_out12 = new Array[Boolean](k)\n \
    \       val visited_in13 = new Array[Boolean](k)\n        val visited_out13 =\
    \ new Array[Boolean](k)\n        val visited_in14 = new Array[Boolean](k)\n  \
    \      val visited_out14 = new Array[Boolean](k)\n        val visited_in15 = new\
    \ Array[Boolean](k)\n        val visited_out15 = new Array[Boolean](k)\n     \
    \   val visited_in16 = new Array[Boolean](k)\n        val visited_out16 = new\
    \ Array[Boolean](k)\n        val visited_in17 = new Array[Boolean](k)\n      \
    \  val visited_out17 = new Array[Boolean](k)\n        val visited_in18 = new Array[Boolean](k)\n\
    \        val visited_out18 = new Array[Boolean](k)\n        val visited_in19 =\
    \ new Array[Boolean](k)", "        val m = grid.length\n        val n = grid(0).length\n\
    \        val result = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n\
    \        val stack = new Array[Int](k)\n        val stackPointer = 0\n       \
    \ val stackPointer2 = 1\n        val stackPointer3 = 2\n        val stackPointer4\
    \ = 3\n        val stackPointer5 = 4\n        val stackPointer6 = 5\n        val\
    \ stackPointer7 = 6\n        val stackPointer8 = 7\n        val stackPointer9\
    \ = 8\n        val stackPointer10 = 9\n        val stackPointer11 = 10\n     \
    \   val stackPointer12 = 11\n        val stackPointer13 = 12\n        val stackPointer14\
    \ = 13\n        val stackPointer15 = 14\n        val stackPointer16 = 15\n   \
    \     val stackPointer17 = 16\n        val stackPointer18 = 17\n        val stackPointer19\
    \ = 18\n        val stackPointer20 = 19\n        val stackPointer21 = 20\n   \
    \     val stackPointer22 = 21\n        val stackPointer23 = 22\n        val stackPointer24\
    \ = 23\n        val stackPointer25 = 24\n        val stackPointer26 = 25\n   \
    \     val stackPointer27 = 26\n        val stackPointer28 = 27\n        val stackPointer29\
    \ = 28\n        val stackPointer30 = 29\n        val stackPointer31 = 30\n   \
    \     val stackPointer32 = 31\n        val stackPointer33 = 32\n        val stackPointer34\
    \ = 33\n        val stackPointer35 = 34\n        val stackPointer36 = 35\n   \
    \     val stackPointer37 = 36\n        val stackPointer38 = 37\n        val stackPointer39\
    \ = 38\n        val stackPointer40 = 39\n        val stackPointer41 = 40\n   \
    \     val stackPointer42 = 41\n        val stackPointer43 = 42\n        val stackPointer44\
    \ = 43\n        val stackPointer45 = 44\n        val stackPointer46 = 45\n   \
    \     val stackPointer47 = 46\n        val stackPointer48 = 47\n        val stackPointer49\
    \ = 48\n        val stackPointer50 = 49\n        val stackPointer51 = 50\n   \
    \     val stackPointer52 = 51\n        val stackPointer53 = 52\n        val stackPointer54\
    \ = 53\n        val stackPointer55 = 54\n        val stackPointer56 = 55\n   \
    \     val stackPointer57 = 56\n        val stackPointer58 = 57\n        val stackPointer59\
    \ = 58\n        val stackPointer60 = 59\n        val stackPointer61 = 60\n", " \
    \       val N = grid.size\n        val m = N * N\n        val lst_A = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_B = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  var i = 0\n        var j = 0\n        var k = 0\n        var minPath = 0\n\
    \        while(i < N) {\n            while(j < N) {\n                if(grid(i).contains(grid(j)))\
    \ {\n                    lst_A += grid(i)\n                    lst_B += grid(j)\n\
    \                    i += 1\n                    j += 1\n                    k\
    \ += 1\n                }\n                else {\n                    i += 1\n\
    \                }\n            }\n            minPath = k\n            i = 0\n\
    \            j = 0\n            k += 1\n        }\n        lst_A.sortWith((x,\
    \ y) => x < y)\n        lst_B.sortWith((x, y) => x < y)\n        lst_A", "   \
    \     val n = grid.length\n        val m = grid(0).length\n        val result\
    \ = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n        val\
    \ stack = new Array[Long](k)\n        val stackPointer = 0\n        var minPath\
    \ = 0L\n        var minIndex = 0\n        var minValue = grid(0).head\n      \
    \  var index = 0\n        for (i <- 0 until k) {\n            visited(i) = false\n\
    \            stack(i) = -1\n        }\n        val stackPointers = 0 until k\n\
    \        val stackPointersIndex = 0\n        for (i <- 0 until k) {\n        \
    \    stack(i) = -1\n        }\n        for (i <- 0 until n) {\n            val\
    \ value = grid(i).head\n            if (value == minValue) {\n               \
    \ minPath = i\n                minIndex = i\n                minValue = value\n\
    \            }\n        }\n        val stackPointersIndexs = 0 until k\n     \
    \   for (i <- 0 until k) {\n            stack(i) = -1\n        }\n        for\
    \ (i <- 0 until n) {\n            val value = grid(i).head\n            if (value\
    \ == minValue) {\n                minPath = i\n                minIndex = i\n\
    \                minValue = value\n            }\n        }\n        val stackPointersIndexs2\
    \ = 0 until k\n        for (i <- 0 until k) {\n            stack(i) = -1\n   \
    \     }\n        for (i <- 0 until n) {\n            val value = grid(i).head\n\
    \            if (value == minValue) {\n                minPath = i\n         \
    \       minIndex = i\n                minValue = value\n            }\n      \
    \  }\n        val stackPointersIndexs3 = 0 until k\n        for (i <- 0 until\
    \ k) {\n            stack(i) = -1\n        }\n        for (i <- 0 until n) {\n\
    \            val value = grid(i).head\n            if (value == minValue) {\n\
    \                minPath = i\n                minIndex = i\n                minValue\
    \ = value\n            }\n        }\n        val stackPointersIndexs4 = 0 until\
    \ k\n        for (i <- 0 until k) {\n            stack(i) = -1\n        }\n  \
    \      for (i <- 0 until n) {\n            val value = grid(i).head\n        \
    \    if (value == minValue) {\n                minPath = i\n                minIndex\
    \ = i\n                minValue = value\n            }\n        }\n        val\
    \ stackPointersIndexs5 = 0 until k\n        for (i <- 0 until k) {\n         \
    \   stack(i) = -1\n        }\n        for (i <- 0 until n) {\n            val\
    \ value = grid(i).head\n            if (value == minValue) {\n               \
    \ minPath = i\n                minIndex = i\n                minValue = value\n\
    \            }\n        }\n        val stackPointersIndexs6 = 0 until k\n    \
    \    for (", "        val n = grid.length\n        val m = grid(0).length\n  \
    \      val result = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n\
    \        val queue = new Array[Int](k)\n        val visitedQueue = new Array[Boolean](k)\n\
    \        val queueLen = new Array[Int](k)\n        val visitedQueueLen = new Array[Boolean](k)\n\
    \        val queueLenLen = new Array[Int](k)\n        val visitedQueueLenLen =\
    \ new Array[Boolean](k)\n        val queueLenLenLen = new Array[Int](k)\n    \
    \    val visitedQueueLenLenLen = new Array[Boolean](k)\n        val queueLenLenLenLen\
    \ = new Array[Int](k)\n        val visitedQueueLenLenLenLen = new Array[Boolean](k)\n\
    \        val queueLenLenLenLenLen = new Array[Int](k)\n        val visitedQueueLenLenLenLenLen\
    \ = new Array[Boolean](k)\n        val queueLenLenLenLenLenLen = new Array[Int](k)\n\
    \        val visitedQueueLenLenLenLenLenLen = new Array[Boolean](k)\n        val\
    \ queueLenLenLenLenLenLenLenLen = new Array[Int](k)\n        val visitedQueueLenLenLenLenLenLenLenLen\
    \ = new Array[Boolean](k)\n        val queueLenLenLenLenLenLenLenLenLenLen = new\
    \ Array[Int](k)\n        val visitedQueueLenLenLenLenLenLenLenLenLen = new Array[Boolean](k)\n\
    \        val queueLenLenLenLenLenLenLenLenLenLenLen = new Array[Int](k)\n    \
    \    val visitedQueueLenLenLenLenLenLenLenLenLenLen = new Array[Boolean](k)\n\
    \        val queueLenLenLenLenLenLenLenLenLenLenLenLen = new Array[Int](k)\n \
    \       val visitedQueueLenLenLenLenLenLenLenLenLenLenLenLen = new Array[Boolean](k)\n\
    \        val queueLenLenLenLenLenLenLenLenLenLenLenLenLenLen = new Array[Int](k)\n\
    \        val visitedQueueLenLenLenLenLenLenLenLenLenLenLenLenLen = new Array[Boolean](k)\n\
    \        val queueLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen = new Array[Int](k)\n\
    \        val visitedQueueLenLenLenLenLenLenLenLenLenLenLenLenLenLen = new Array[Boolean](k)\n\
    \        val queueLenLenLenLenLenLenLenLenLenLenLen", "        val N = grid.length\n\
    \        val m = N * N\n        val lst_A = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_B = mutable.ArrayBuffer.empty[Long]\n        var i = 0\n    \
    \    var j = 0\n        var k = 0\n        while (i < N) {\n            while\
    \ (j < N) {\n                lst_A += grid(i)(j)\n                lst_B += grid(j)(i)\n\
    \                j += 1\n            }\n            i += 1\n            k += 1\n\
    \        }\n        lst_A.sortWith((x, y) => x < y)\n        lst_B.sortWith((x,\
    \ y) => x < y)\n        val ans = lst_A.take(k).toList\n        ans.sortWith((x,\
    \ y) => x < y)\n        ans", "        val grid = mutable.ArrayBuffer(grid)\n\
    \        val visited = mutable.HashSet[Long]()\n        val result = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList = mutable.ArrayBuffer.empty[Long]\n        val resultList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val resultListSize = mutable.ArrayBuffer.empty[Long]\n        val visitedListSizeSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val resultListSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n     \
    \   val resultListSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n        val\
    \ visitedListSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n        val resultListSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSizeSizeSizeSize =\
    \ mutable.ArrayBuffer.empty[Long]\n        val resultListSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val resultListSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val resultListSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val resultListSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val resultListSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val resultListSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val resultListSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val resultListSizeSizeSizeSizeSizeSize", "        val n = grid.size\n\
    \        val m = grid(0).size\n        val lst_A = Array.ofDim[Long](k + 1)\n\
    \        val lst_B = Array.ofDim[Long](k + 1)\n        val lst_C = Array.ofDim[Long](k\
    \ + 1)\n        val lst_D = Array.ofDim[Long](k + 1)\n        val lst_E = Array.ofDim[Long](k\
    \ + 1)\n        val lst_F = Array.ofDim[Long](k + 1)\n        val lst_G = Array.ofDim[Long](k\
    \ + 1)\n        val lst_H = Array.ofDim[Long](k + 1)\n        val lst_I = Array.ofDim[Long](k\
    \ + 1)\n        val lst_J = Array.ofDim[Long](k + 1)\n        val lst_K = Array.ofDim[Long](k\
    \ + 1)\n        val lst_L = Array.ofDim[Long](k + 1)\n        val lst_M = Array.ofDim[Long](k\
    \ + 1)\n        val lst_N = Array.ofDim[Long](k + 1)\n        val lst_O = Array.ofDim[Long](k\
    \ + 1)\n        val lst_P = Array.ofDim[Long](k + 1)\n        val lst_Q = Array.ofDim[Long](k\
    \ + 1)\n        val lst_R = Array.ofDim[Long](k + 1)\n        val lst_S = Array.ofDim[Long](k\
    \ + 1)\n        val lst_T = Array.ofDim[Long](k + 1)\n        val lst_U = Array.ofDim[Long](k\
    \ + 1)\n        val lst_V = Array.ofDim[Long](k + 1)\n        val lst_W = Array.ofDim[Long](k\
    \ + 1)\n        val lst_X = Array.ofDim[Long](k + 1)\n        val lst_Y = Array.ofDim[Long](k\
    \ + 1)\n        val lst_Z = Array.ofDim[Long](k + 1)\n        val lst_A = Array.ofDim[Long](k\
    \ + 1)\n        val lst_B = Array.ofDim[Long](k + 1)\n        val lst_C = Array.ofDim[Long](k\
    \ + 1)\n        val lst_D = Array.ofDim[Long](k + 1)\n        val lst_E = Array.ofDim[Long](k\
    \ + 1)\n        val lst_F = Array.ofDim[Long](k + 1)\n        val lst_G = Array.ofDim[Long](k\
    \ + 1)\n        val lst_H = Array.ofDim[Long](k + 1)\n        val lst_I = Array.ofDim[Long](",
  "        val n = grid.length\n        val m = grid(0).length\n        val result\
    \ = new Array[Long](k)\n        var minPath = 0\n        var minPathIndex = 0\n\
    \        var minPathValue = grid(0).head\n        var minPathValueIndex = 0\n\
    \        var minPathValueIndex2 = 0\n        var minPathValueIndex3 = 0\n    \
    \    var minPathValueIndex4 = 0\n        var minPathValueIndex5 = 0\n        var\
    \ minPathValueIndex6 = 0\n        var minPathValueIndex7 = 0\n        var minPathValueIndex8\
    \ = 0\n        var minPathValueIndex9 = 0\n        var minPathValueIndex10 = 0\n\
    \        var minPathValueIndex11 = 0\n        var minPathValueIndex12 = 0\n  \
    \      var minPathValueIndex13 = 0\n        var minPathValueIndex14 = 0\n    \
    \    var minPathValueIndex15 = 0\n        var minPathValueIndex16 = 0\n      \
    \  var minPathValueIndex17 = 0\n        var minPathValueIndex18 = 0\n        var\
    \ minPathValueIndex19 = 0\n        var minPathValueIndex20 = 0\n        var minPathValueIndex21\
    \ = 0\n        var minPathValueIndex22 = 0\n        var minPathValueIndex23 =\
    \ 0\n        var minPathValueIndex24 = 0\n        var minPathValueIndex25 = 0\n\
    \        var minPathValueIndex26 = 0\n        var minPathValueIndex27 = 0\n  \
    \      var minPathValueIndex28 = 0\n        var minPathValueIndex29 = 0\n    \
    \    var minPathValueIndex30 = 0\n        var minPathValueIndex31 = 0\n      \
    \  var minPathValueIndex32 = 0\n        var minPathValueIndex33 = 0\n        var\
    \ minPathValueIndex34 = 0\n        var minPathValueIndex35 = 0\n        var minPathValueIndex36\
    \ = 0\n        var minPathValueIndex37 = 0\n        var minPathValueIndex38 =\
    \ 0\n        var minPathValueIndex39 = 0\n        var minPathValueIndex40 = 0\n\
    \        var minPathValueIndex41 = 0\n        var minPathValueIndex42 = 0\n  \
    \      var minPathValueIndex43 = 0\n        var minPathValueIndex44 = 0\n    \
    \    var minPathValueIndex45 = 0\n        var minPathValueIndex46 = 0\n      \
    \  var minPathValueIndex47 = 0\n        var minPathValueIndex48 = 0\n        var\
    \ minPathValueIndex49 = 0\n        var minPathValueIndex50 = 0\n        var minPathValueIndex51\
    \ = 0\n        var minPathValueIndex52 = 0\n        var minPathValueIndex53 =\
    \ 0\n        var minPathValueIndex54 = 0\n        var minPathValueIndex55 = 0\n\
    \        var minPathValueIndex56 = 0\n        var minPathValueIndex57 = 0\n  \
    \      var minPathValueIndex58 = 0\n        var minPathValueIndex59 = 0", "  \
    \      val n = grid.length\n        val m = grid(0).length\n        val visited\
    \ = new Array[Boolean](n)\n        val result = new Array[Long](k)\n        val\
    \ stack = new Array[Long](k)\n        val stackSize = new Array[Int](k)\n    \
    \    val stackSize_ = new Array[Int](k)\n        val stackSize_2 = new Array[Int](k)\n\
    \        val stackSize_3 = new Array[Int](k)\n        val stackSize_4 = new Array[Int](k)\n\
    \        val stackSize_5 = new Array[Int](k)\n        val stackSize_6 = new Array[Int](k)\n\
    \        val stackSize_7 = new Array[Int](k)\n        val stackSize_8 = new Array[Int](k)\n\
    \        val stackSize_9 = new Array[Int](k)\n        val stackSize_10 = new Array[Int](k)\n\
    \        val stackSize_11 = new Array[Int](k)\n        val stackSize_12 = new\
    \ Array[Int](k)\n        val stackSize_13 = new Array[Int](k)\n        val stackSize_14\
    \ = new Array[Int](k)\n        val stackSize_15 = new Array[Int](k)\n        val\
    \ stackSize_16 = new Array[Int](k)\n        val stackSize_17 = new Array[Int](k)\n\
    \        val stackSize_18 = new Array[Int](k)\n        val stackSize_19 = new\
    \ Array[Int](k)\n        val stackSize_20 = new Array[Int](k)\n        val stackSize_21\
    \ = new Array[Int](k)\n        val stackSize_22 = new Array[Int](k)\n        val\
    \ stackSize_23 = new Array[Int](k)\n        val stackSize_24 = new Array[Int](k)\n\
    \        val stackSize_25 = new Array[Int](k)\n        val stackSize_26 = new\
    \ Array[Int](k)\n        val stackSize_27 = new Array[Int](k)\n        val stackSize_28\
    \ = new Array[Int](k)\n        val stackSize_29 = new Array[Int](k)\n        val\
    \ stackSize_30 = new Array[Int](k)\n        val stackSize_31 = new Array[Int](k)\n\
    \        val stackSize_32 = new Array[Int](k)\n        val stackSize_33 = new\
    \ Array[Int](k)\n        val stackSize_34 = new Array[Int](k)\n        val stackSize_35\
    \ = new Array[Int](k)\n        val stackSize_", "        val m = grid.size\n \
    \       val n = grid(0).size\n        val grid = mutable.ArrayBuffer.empty[List[Long]](m)\n\
    \        val visited = mutable.HashSet.empty[Long]\n        val result = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedCount = mutable.HashMap.empty[Long, Int]\n        val visitedCount2\
    \ = mutable.HashMap.empty[Long, Int]\n        val visitedCount3 = mutable.HashMap.empty[Long,\
    \ Int]\n        val visitedCount4 = mutable.HashMap.empty[Long, Int]\n       \
    \ val visitedCount5 = mutable.HashMap.empty[Long, Int]\n        val visitedCount6\
    \ = mutable.HashMap.empty[Long, Int]\n        val visitedCount7 = mutable.HashMap.empty[Long,\
    \ Int]\n        val visitedCount8 = mutable.HashMap.empty[Long, Int]\n       \
    \ val visitedCount9 = mutable.HashMap.empty[Long, Int]\n        val visitedCount10\
    \ = mutable.HashMap.empty[Long, Int]\n        val visitedCount11 = mutable.HashMap.empty[Long,\
    \ Int]\n        val visitedCount12 = mutable.HashMap.empty[Long, Int]\n      \
    \  val visitedCount13 = mutable.HashMap.empty[Long, Int]\n        val visitedCount14\
    \ = mutable.HashMap.empty[Long, Int]\n        val visitedCount15 = mutable.HashMap.empty[Long,\
    \ Int]\n        val visitedCount16 = mutable.HashMap.empty[Long, Int]\n      \
    \  val visitedCount17 = mutable.HashMap.empty[Long, Int]\n        val visitedCount18\
    \ = mutable.HashMap.empty[Long, Int]\n        val visitedCount19 = mutable.HashMap.empty[Long,\
    \ Int]\n        val visitedCount20 = mutable.HashMap.empty[Long, Int]\n      \
    \  val visitedCount21 = mutable.HashMap.empty[Long, Int]\n        val visitedCount22\
    \ = mutable.HashMap.empty[Long, Int]\n        val visitedCount23 = mutable.HashMap.empty[Long,\
    \ Int]\n        val visitedCount24 = mutable.HashMap.empty[Long, Int]\n      \
    \  val visitedCount25 = mutable.HashMap.empty[Long, Int]\n        val visitedCount26\
    \ = mutable.HashMap.empty[Long, Int]\n        val visited", "        val m = grid.length\n\
    \        val n = grid(0).length\n        val result = new Array[Long](k)\n   \
    \     var minPath = 0\n        var minPathIndex = 0\n        var minPathValue\
    \ = 0\n        var minPathValueIndex = 0\n        var minPathValueIndex2 = 0\n\
    \        var minPathValueIndex3 = 0\n        var minPathValueIndex4 = 0\n    \
    \    var minPathValueIndex5 = 0\n        var minPathValueIndex6 = 0\n        var\
    \ minPathValueIndex7 = 0\n        var minPathValueIndex8 = 0\n        var minPathValueIndex9\
    \ = 0\n        var minPathValueIndex10 = 0\n        var minPathValueIndex11 =\
    \ 0\n        var minPathValueIndex12 = 0\n        var minPathValueIndex13 = 0\n\
    \        var minPathValueIndex14 = 0\n        var minPathValueIndex15 = 0\n  \
    \      var minPathValueIndex16 = 0\n        var minPathValueIndex17 = 0\n    \
    \    var minPathValueIndex18 = 0\n        var minPathValueIndex19 = 0\n      \
    \  var minPathValueIndex20 = 0\n        var minPathValueIndex21 = 0\n        var\
    \ minPathValueIndex22 = 0\n        var minPathValueIndex23 = 0\n        var minPathValueIndex24\
    \ = 0\n        var minPathValueIndex25 = 0\n        var minPathValueIndex26 =\
    \ 0\n        var minPathValueIndex27 = 0\n        var minPathValueIndex28 = 0\n\
    \        var minPathValueIndex29 = 0\n        var minPathValueIndex30 = 0\n  \
    \      var minPathValueIndex31 = 0\n        var minPathValueIndex32 = 0\n    \
    \    var minPathValueIndex33 = 0\n        var minPathValueIndex34 = 0\n      \
    \  var minPathValueIndex35 = 0\n        var minPathValueIndex36 = 0\n        var\
    \ minPathValueIndex37 = 0\n        var minPathValueIndex38 = 0\n        var minPathValueIndex39\
    \ = 0\n        var minPathValueIndex40 = 0\n        var minPathValueIndex41 =\
    \ 0\n        var minPathValueIndex42 = 0\n        var minPathValueIndex43 = 0\n\
    \        var minPathValueIndex44 = 0\n        var minPathValueIndex45 = 0\n  \
    \      var minPathValueIndex46 = 0\n        var minPathValueIndex47 = 0\n    \
    \    var minPathValueIndex48 = 0\n        var minPathValueIndex49 = 0\n      \
    \  var minPathValueIndex50 = 0\n        var minPathValueIndex51 = 0\n        var\
    \ minPathValueIndex52 = 0\n        var minPathValueIndex53 = 0\n        var minPathValueIndex54\
    \ = 0\n        var minPathValueIndex55 = 0\n        var minPathValueIndex56 =\
    \ 0\n        var minPathValueIndex57 = 0\n        var minPathValueIndex58 = 0\n\
    \        var minPathValueIndex59 = 0\n        var ", "        val N = grid.length\n\
    \        val M = grid(0).length\n        val grid = mutable.ArrayBuffer.empty[List[Long]](N)\n\
    \        for (i <- 0 until N) {\n            val row = grid(i)\n            val\
    \ col = grid(0).zipWithIndex.filter(_._1 == i).map(_._2).max\n            row\
    \ += col\n            grid += row\n        }\n        val result = new mutable.ArrayBuffer.empty[Long]\n\
    \        var min = 0\n        var max = 0\n        var minIndex = 0\n        var\
    \ maxIndex = 0\n        var minPath = 0\n        var maxPath = 0\n        var\
    \ minPathIndex = 0\n        var maxPathIndex = 0\n        var minPathValue = 0\n\
    \        var maxPathValue = 0\n        var minPathValueIndex = 0\n        var\
    \ maxPathValueIndex = 0\n        var minPathValueIndex = 0\n        var minPathValueIndex\
    \ = 0\n        var minPathValueIndex = 0\n        var minPathValueIndex = 0\n\
    \        var minPathValueIndex = 0\n        var minPathValueIndex = 0\n      \
    \  var minPathValueIndex = 0\n        var minPathValueIndex = 0\n        var minPathValueIndex\
    \ = 0\n        var minPathValueIndex = 0\n        var minPathValueIndex = 0\n\
    \        var minPathValueIndex = 0\n        var minPathValueIndex = 0\n      \
    \  var minPathValueIndex = 0\n        var minPathValueIndex = 0\n        var minPathValueIndex\
    \ = 0\n        var minPathValueIndex = 0\n        var minPathValueIndex = 0\n\
    \        var minPathValueIndex = 0\n        var minPathValueIndex = 0\n      \
    \  var minPathValueIndex = 0\n        var minPathValueIndex = 0\n        var minPathValueIndex\
    \ = 0\n        var minPathValueIndex = 0\n        var minPathValueIndex = 0\n\
    \        var minPathValueIndex = 0\n        var minPathValueIndex = 0\n      \
    \  var minPathValueIndex = 0\n        var minPathValueIndex = 0\n        var minPathValueIndex\
    \ = 0\n        var minPathValueIndex = 0\n        var minPathValueIndex = 0\n\
    \        var minPathValueIndex = 0\n        var minPathValueIndex = 0\n      \
    \  var minPathValueIndex = 0\n        var minPathValueIndex = 0\n        var minPathValueIndex\
    \ = 0\n        var minPathValueIndex = 0\n        var minPathValueIndex = 0\n\
    \        var minPathValueIndex = 0\n        var minPathValueIndex = 0\n      \
    \  var minPathValueIndex = 0\n        var minPathValueIndex = 0\n        var minPathValueIndex\
    \ = 0\n        var minPathValueIndex = 0\n        var minPathValueIndex = 0\n\
    \        var minPathValueIndex = 0\n        var minPathValueIndex = 0\n      \
    \  var minPathValueIndex = 0\n        var minPathValueIndex = 0\n        var minPathValueIndex\
    \ = 0\n        var ", "        val m = grid.length\n        val n = grid(0).length\n\
    \        val result = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n\
    \        val visitedMap = new mutable.HashMap[Long, Boolean]()\n        val visitedMap2\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap3 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap4 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap5 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap6\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap7 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap8 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap9 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap10\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap11 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap12 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap13 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap14 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap15\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap16 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap17 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap18 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap19 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap20\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap21 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap22 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap23 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap24 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap25\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap26 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap27 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap28 = new mutable.HashMap[Long, Boolean]()\n        val ",
  "        val m = grid.size\n        val n = grid(0).size\n        val grid = mutable.ArrayBuffer.empty[List[Long]](m)\n\
    \        for (i <- 0 until m) {\n            val row = grid(i)\n            for\
    \ (j <- 0 until n) {\n                val cell = row.get(j)\n                val\
    \ list = if (cell == -1) List(j) else List(j, cell)\n                grid.append(list)\n\
    \            }\n        }\n        val visited = mutable.ArrayBuffer.empty[Int](m)\n\
    \        val result = mutable.ArrayBuffer.empty[Long](k)\n        val stack =\
    \ mutable.ArrayBuffer.empty[Int](k)\n        val stackSize = mutable.ArrayBuffer.empty[Int](k)\n\
    \        val stackIndex = mutable.ArrayBuffer.empty[Int](k)\n        val stackIndex\
    \ = mutable.ArrayBuffer.empty[Int](k)\n        val stackIndex = mutable.ArrayBuffer.empty[Int](k)\n\
    \        val stackIndex = mutable.ArrayBuffer.empty[Int](k)\n        val stackIndex\
    \ = mutable.ArrayBuffer.empty[Int](k)\n        val stackIndex = mutable.ArrayBuffer.empty[Int](k)\n\
    \        val stackIndex = mutable.ArrayBuffer.empty[Int](k)\n        val stackIndex\
    \ = mutable.ArrayBuffer.empty[Int](k)\n        val stackIndex = mutable.ArrayBuffer.empty[Int](k)\n\
    \        val stackIndex = mutable.ArrayBuffer.empty[Int](k)\n        val stackIndex\
    \ = mutable.ArrayBuffer.empty[Int](k)\n        val stackIndex = mutable.ArrayBuffer.empty[Int](k)\n\
    \        val stackIndex = mutable.ArrayBuffer.empty[Int](k)\n        val stackIndex\
    \ = mutable.ArrayBuffer.empty[Int](k)\n        val stackIndex = mutable.ArrayBuffer.empty[Int](k)\n\
    \        val stackIndex = mutable.ArrayBuffer.empty[Int](k)\n        val stackIndex\
    \ = mutable.ArrayBuffer.empty[Int](k)\n        val stackIndex = mutable.ArrayBuffer.empty[Int](k)\n\
    \        val stackIndex = mutable.ArrayBuffer.empty[Int](k)\n        val stackIndex\
    \ = mutable.ArrayBuffer.empty[Int](k)\n        val stackIndex = mutable.ArrayBuffer.empty[Int](k)\n\
    \        val stackIndex = mutable.ArrayBuffer.empty[Int](k)\n        val stackIndex\
    \ = mutable.ArrayBuffer.empty[Int](k)\n        val stackIndex = mutable.ArrayBuffer.empty[Int](k)\n\
    \        val stackIndex = mutable.ArrayBuffer.empty[Int](k)\n        val stackIndex\
    \ = mutable.ArrayBuffer.empty[Int](k)\n        val stackIndex = mutable.ArrayBuffer.empty[Int](",
  "        val n = grid.size\n        val m = grid(0).size\n        val visited =\
    \ new Array[Boolean](m * n)\n        val path = new Array[Long](k + 1)\n     \
    \   val minPath = new Array[Long](k)\n        val minPathIndex = new Array[Int](k)\n\
    \        val minPathIndexSet = new mutable.HashSet[Int]\n        val minPathIndexSetSet\
    \ = new mutable.HashSet[Int]\n        val minPathIndexSetSetSet = new mutable.HashSet[Int]\n\
    \        val minPathIndexSetSetSetSet = new mutable.HashSet[Int]\n        val\
    \ minPathIndexSetSetSetSetSet = new mutable.HashSet[Int]\n        val minPathIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]\n        val minPathIndexSetSetSetSetSet = new mutable.HashSet[Int]\n\
    \        val minPathIndexSetSetSetSetSet = new mutable.HashSet[Int]\n        val\
    \ minPathIndexSetSetSetSetSet = new mutable.HashSet[Int]\n        val minPathIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]\n        val minPathIndexSetSetSetSetSet = new mutable.HashSet[Int]\n\
    \        val minPathIndexSetSetSetSetSet = new mutable.HashSet[Int]\n        val\
    \ minPathIndexSetSetSetSetSetSet = new mutable.HashSet[Int]\n        val minPathIndexSetSetSetSetSetSet\
    \ = new mutable.HashSet[Int]\n        val minPathIndexSetSetSetSetSetSet = new\
    \ mutable.HashSet[Int]\n        val minPathIndexSetSetSetSetSetSet = new mutable.HashSet[Int]\n\
    \        val minPathIndexSetSetSetSetSetSet = new mutable.HashSet[Int]\n     \
    \   val minPathIndexSetSetSetSetSetSet = new mutable.HashSet[Int]\n        val\
    \ minPathIndexSetSetSetSetSetSet = new mutable.HashSet[Int]\n        val minPathIndexSetSetSetSetSetSetSet\
    \ = new mutable.HashSet[Int]\n        val minPathIndexSetSetSetSetSetSetSet =\
    \ new mutable.HashSet[Int]\n        val minPathIndexSetSetSetSetSetSetSet = new\
    \ mutable.HashSet[Int]\n        val minPathIndexSetSetSetSetSetSetSet = new mutable.HashSet[Int]\n\
    \        val minPathIndexSetSetSetSetSet", "        val m = grid.size\n      \
    \  val n = grid(0).size\n        val lst_A = new Array[Long](k)\n        val lst_B\
    \ = new Array[Long](k)\n        val lst_C = new Array[Long](k)\n        val lst_D\
    \ = new Array[Long](k)\n        val lst_E = new Array[Long](k)\n        val lst_F\
    \ = new Array[Long](k)\n        val lst_G = new Array[Long](k)\n        val lst_H\
    \ = new Array[Long](k)\n        val lst_I = new Array[Long](k)\n        val lst_J\
    \ = new Array[Long](k)\n        val lst_K = new Array[Long](k)\n        val lst_L\
    \ = new Array[Long](k)\n        val lst_M = new Array[Long](k)\n        val lst_N\
    \ = new Array[Long](k)\n        val lst_O = new Array[Long](k)\n        val lst_P\
    \ = new Array[Long](k)\n        val lst_Q = new Array[Long](k)\n        val lst_R\
    \ = new Array[Long](k)\n        val lst_S = new Array[Long](k)\n        val lst_T\
    \ = new Array[Long](k)\n        val lst_U = new Array[Long](k)\n        val lst_V\
    \ = new Array[Long](k)\n        val lst_W = new Array[Long](k)\n        val lst_X\
    \ = new Array[Long](k)\n        val lst_Y = new Array[Long](k)\n        val lst_Z\
    \ = new Array[Long](k)\n        val lst_AA = new Array[Long](k)\n        val lst_AB\
    \ = new Array[Long](k)\n        val lst_AC = new Array[Long](k)\n        val lst_AD\
    \ = new Array[Long](k)\n        val lst_AE = new Array[Long](k)\n        val lst_AF\
    \ = new Array[Long](k)\n        val lst_AG = new Array[Long](k)\n        val lst_AH\
    \ = new Array[Long](k)\n        val lst_AI = new Array[Long](k)\n        val lst_AJ\
    \ = new Array[Long](k)\n        val lst_AK = new Array[Long](k)\n        val lst_AL\
    \ = new Array[Long](k)\n        val lst_AM = new Array[Long](k)\n        val lst_AN\
    \ = new Array[Long](k)\n        val lst_AO = new Array[Long](k)\n        val lst_AP\
    \ = new ", "        val N = grid.size\n        val m = N * N\n        val lst_A\
    \ = mutable.ArrayBuffer.empty[Long]\n        val lst_B = mutable.ArrayBuffer.empty[Long]\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var ans = List[Long]()\n\
    \        while (i < N) {\n            while (j < N) {\n                if (grid[i][j]\
    \ == k) {\n                    lst_A += grid[i][j]\n                    lst_B\
    \ += grid[i][j]\n                    i += 1\n                    j += 1\n    \
    \                k += 1\n                } else if (grid[i][j] < k) {\n      \
    \              lst_A += grid[i][j]\n                    i += 1\n             \
    \   } else {\n                    lst_B += grid[i][j]\n                    j +=\
    \ 1\n                }\n            }\n            ans = lst_A.sorted\n      \
    \      ans = ans.take(k).toList ++ ans\n            i = 0\n            j = 0\n\
    \            k = 0\n        }\n        return ans", "        val m = grid.size\n\
    \        val n = grid(0).size\n        val lst_A = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_B = mutable.ArrayBuffer.empty[Long]\n        val lst_C = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_D = mutable.ArrayBuffer.empty[Long]\n        val lst_E = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_F = mutable.ArrayBuffer.empty[Long]\n        val lst_G = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_H = mutable.ArrayBuffer.empty[Long]\n        val lst_I = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_J = mutable.ArrayBuffer.empty[Long]\n        val lst_K = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_L = mutable.ArrayBuffer.empty[Long]\n        val lst_M = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_N = mutable.ArrayBuffer.empty[Long]\n        val lst_O = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_P = mutable.ArrayBuffer.empty[Long]\n        val lst_Q = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_R = mutable.ArrayBuffer.empty[Long]\n        val lst_S = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_T = mutable.ArrayBuffer.empty[Long]\n        val lst_U = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_V = mutable.ArrayBuffer.empty[Long]\n        val lst_W = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_X = mutable.ArrayBuffer.empty[Long]\n        val lst_Y = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_Z = mutable.ArrayBuffer.empty[Long]\n        val lst_A = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_B = mutable.ArrayBuffer.empty[Long]\n        val lst_C = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_D = mutable.ArrayBuffer.empty[Long]\n        val lst_E = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_F = mutable.ArrayBuffer.empty[Long]\n        val lst_G = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_H = mutable.ArrayBuffer.empty[Long]\n        val lst_I = mutable.ArrayBuffer.empty[",
  "        val N = grid.size\n        val m = mutable.HashMap[Long, List[Long]]()\n\
    \        val visited = mutable.HashSet[Long]()\n        val queue = mutable.PriorityQueue[Long]()\n\
    \        val ans = mutable.ArrayBuffer.empty[Long]\n        val visitedMap = mutable.HashMap[Long,\
    \ Boolean]()\n        val queueMap = mutable.HashMap[Long, Boolean]()\n      \
    \  val queueSize = mutable.HashMap[Long, Long]()\n        val queueSizeMap = mutable.HashMap[Long,\
    \ Long]()\n        val queueSizeMap2 = mutable.HashMap[Long, Long]()\n       \
    \ val queueSizeMap3 = mutable.HashMap[Long, Long]()\n        val queueSizeMap4\
    \ = mutable.HashMap[Long, Long]()\n        val queueSizeMap5 = mutable.HashMap[Long,\
    \ Long]()\n        val queueSizeMap6 = mutable.HashMap[Long, Long]()\n       \
    \ val queueSizeMap7 = mutable.HashMap[Long, Long]()\n        val queueSizeMap8\
    \ = mutable.HashMap[Long, Long]()\n        val queueSizeMap9 = mutable.HashMap[Long,\
    \ Long]()\n        val queueSizeMap10 = mutable.HashMap[Long, Long]()\n      \
    \  val queueSizeMap11 = mutable.HashMap[Long, Long]()\n        val queueSizeMap12\
    \ = mutable.HashMap[Long, Long]()\n        val queueSizeMap13 = mutable.HashMap[Long,\
    \ Long]()\n        val queueSizeMap14 = mutable.HashMap[Long, Long]()\n      \
    \  val queueSizeMap15 = mutable.HashMap[Long, Long]()\n        val queueSizeMap16\
    \ = mutable.HashMap[Long, Long]()\n        val queueSizeMap17 = mutable.HashMap[Long,\
    \ Long]()\n        val queueSizeMap18 = mutable.HashMap[Long, Long]()\n      \
    \  val queueSizeMap19 = mutable.HashMap[Long, Long]()\n        val queueSizeMap20\
    \ = mutable.HashMap[Long, Long]()\n        val queueSizeMap21 = mutable.HashMap[Long,\
    \ Long]()\n        val queueSizeMap22 = mutable.HashMap[Long, Long]()\n      \
    \  val queueSizeMap23 = mutable.HashMap[Long, Long]()\n        val queueSizeMap24\
    \ = mutable.HashMap[Long, Long]()\n        val queueSizeMap25 = mutable.HashMap[Long,\
    \ Long]()", "        val n = grid.length\n        val m = grid(0).length\n   \
    \     val visited = new Array[Boolean](m * n)\n        val ans = new Array[Long](k)\n\
    \        val lst_A = new Array[Long](k)\n        val lst_B = new Array[Long](k)\n\
    \        val lst_C = new Array[Long](k)\n        val lst_D = new Array[Long](k)\n\
    \        val lst_E = new Array[Long](k)\n        val lst_F = new Array[Long](k)\n\
    \        val lst_G = new Array[Long](k)\n        val lst_H = new Array[Long](k)\n\
    \        val lst_I = new Array[Long](k)\n        val lst_J = new Array[Long](k)\n\
    \        val lst_K = new Array[Long](k)\n        val lst_L = new Array[Long](k)\n\
    \        val lst_M = new Array[Long](k)\n        val lst_N = new Array[Long](k)\n\
    \        val lst_O = new Array[Long](k)\n        val lst_P = new Array[Long](k)\n\
    \        val lst_Q = new Array[Long](k)\n        val lst_R = new Array[Long](k)\n\
    \        val lst_S = new Array[Long](k)\n        val lst_T = new Array[Long](k)\n\
    \        val lst_U = new Array[Long](k)\n        val lst_V = new Array[Long](k)\n\
    \        val lst_W = new Array[Long](k)\n        val lst_X = new Array[Long](k)\n\
    \        val lst_Y = new Array[Long](k)\n        val lst_Z = new Array[Long](k)\n\
    \        val lst_AA = new Array[Long](k)\n        val lst_AB = new Array[Long](k)\n\
    \        val lst_AC = new Array[Long](k)\n        val lst_AD = new Array[Long](k)\n\
    \        val lst_AE = new Array[Long](k)\n        val lst_AF = new Array[Long](k)\n\
    \        val lst_AG = new Array[Long](k)\n        val lst_AH = new Array[Long](k)\n\
    \        val lst_AI = new Array[Long](k)\n        val lst_AJ = new Array[Long](k)\n\
    \        val lst_AK = new Array[Long](k)\n        val lst_AL = new Array[Long](k)\n\
    \        val lst_AM = new Array[Long](k)\n        val lst_AN = new Array[", " \
    \       val grid = mutable.ArrayBuffer.empty[List[Long]]\n        val visited\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visitedCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val visitedCounts = mutable.ArrayBuffer.empty[Int]\n        val visitedCounts\
    \ = mutable.ArrayBuffer.empty[Int]\n        val visitedCounts = mutable.ArrayBuffer.empty[Int]\n\
    \        val visitedCounts = mutable.ArrayBuffer.empty[Int]\n        val visitedCounts\
    \ = mutable.ArrayBuffer.empty[Int]\n        val visitedCounts = mutable.ArrayBuffer.empty[Int]\n\
    \        val visitedCounts = mutable.ArrayBuffer.empty[Int]\n        val visitedCounts\
    \ = mutable.ArrayBuffer.empty[Int]\n        val visitedCounts = mutable.ArrayBuffer.empty[Int]\n\
    \        val visitedCounts = mutable.ArrayBuffer.empty[Int]\n        val visitedCounts\
    \ = mutable.ArrayBuffer.empty[Int]\n        val visitedCounts = mutable.ArrayBuffer.empty[Int]\n\
    \        val visitedCounts = mutable.ArrayBuffer.empty[Int]\n        val visitedCounts\
    \ = mutable.ArrayBuffer.empty[Int]\n        val visitedCounts = mutable.ArrayBuffer.empty[Int]\n\
    \        val visitedCounts = mutable.ArrayBuffer.empty[Int]\n        val visitedCounts\
    \ = mutable.ArrayBuffer.empty[Int]\n        val visitedCounts = mutable.ArrayBuffer.empty[Int]\n\
    \        val visitedCounts = mutable.ArrayBuffer.empty[Int]\n        val visitedCounts\
    \ = mutable.ArrayBuffer.empty[Int]\n        val visitedCounts = mutable.ArrayBuffer.empty[Int]\n\
    \        val visitedCounts = mutable.ArrayBuffer.empty[Int]\n        val visitedCounts\
    \ = mutable.ArrayBuffer.empty[Int]\n        val visitedCounts = mutable.ArrayBuffer.empty[Int]\n\
    \        val visitedCounts = mutable.ArrayBuffer.empty[Int]\n        val visitedCounts\
    \ = mutable.ArrayBuffer.empty[Int]\n        val visitedCounts = mutable.ArrayBuffer.empty[Int]\n\
    \        val visitedCounts = mutable.ArrayBuffer.empty[Int]\n        val visitedCounts\
    \ = mutable.ArrayBuffer.empty[Int]\n        val visitedCounts = mutable.ArrayBuffer.empty[Int]\n\
    \        val visitedCounts = mutable.ArrayBuffer.empty[Int]\n        val visitedCounts\
    \ = mut", "        val n = grid.length\n        val m = grid(0).length\n     \
    \   val visited = new Array[Boolean](n * m)\n        val result = new Array[Long](k)\n\
    \        val stack = new Array[Int](k)\n        val stackSize = new Array[Int](k)\n\
    \        val stackInd = new Array[Int](k)\n        val stackIndSize = new Array[Int](k)\n\
    \        val stackIndInd = new Array[Int](k)\n        val stackIndIndSize = new\
    \ Array[Int](k)\n        val stackIndIndInd = new Array[Int](k)\n        val stackIndIndIndSize\
    \ = new Array[Int](k)\n        val stackIndIndIndInd = new Array[Int](k)\n   \
    \     val stackIndIndIndIndSize = new Array[Int](k)\n        val stackIndIndIndIndInd\
    \ = new Array[Int](k)\n        val stackIndIndIndIndIndSize = new Array[Int](k)\n\
    \        val stackIndIndIndIndIndInd = new Array[Int](k)\n        val stackIndIndIndIndIndIndSize\
    \ = new Array[Int](k)\n        val stackIndIndIndIndIndIndInd = new Array[Int](k)\n\
    \        val stackIndIndIndIndIndIndIndSize = new Array[Int](k)\n        val stackIndIndIndIndIndIndIndInd\
    \ = new Array[Int](k)\n        val stackIndIndIndIndIndIndIndIndSize = new Array[Int](k)\n\
    \        val stackIndIndIndIndIndIndIndIndIndInd = new Array[Int](k)\n       \
    \ val stackIndIndIndIndIndIndIndIndIndIndSize = new Array[Int](k)\n        val\
    \ stackIndIndIndIndIndIndIndIndIndIndIndInd = new Array[Int](k)\n        val stackIndIndIndIndIndIndIndIndIndIndIndIndSize\
    \ = new Array[Int](k)\n        val stackIndIndIndIndInd", "        val m = grid.length\n\
    \        val n = grid(0).length\n        val result = new Array[Long](k)\n   \
    \     val visited = new Array[Boolean](k)\n        val stack = new Array[Int](k)\n\
    \        val stackSize = new Array[Int](k)\n        val stackIndex = new Array[Int](k)\n\
    \        val stackPointer = new Array[Int](k)\n        val stackPointerIndex =\
    \ new Array[Int](k)\n        val stackPointerPointer = new Array[Int](k)\n   \
    \     val stackPointerPointerIndex = new Array[Int](k)\n        val stackPointerPointerPointer\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerIndex = new Array[Int](k)\n\
    \        val stackPointerPointerPointerPointer = new Array[Int](k)\n        val\
    \ stackPointerPointerPointerPointerIndex = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointer\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerIndex = new\
    \ Array[Int](k)\n        val stackPointerPointerPointerPointerPointer = new Array[Int](k)\n\
    \        val stackPointerPointerPointerPointerIndex = new Array[Int](k)\n    \
    \    val stackPointerPointerPointerPointerPointer = new Array[Int](k)\n      \
    \  val stackPointerPointerPointerPointerIndex = new Array[Int](k)\n        val\
    \ stackPointerPointerPointerPointerPointer = new Array[Int](k)\n        val stackPointerPointerPointerPointerIndex\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointer =\
    \ new Array[Int](k)\n        val stackPointerPointerPointerPointerIndex = new\
    \ Array[Int](k)\n        val stackPointerPointerPointerPointerPointer = new Array[Int](k)\n\
    \        val stackPointerPointerPointerPointerIndex = new Array[Int](k)\n    \
    \    val stackPointerPointerPointerPointerPointer = new Array[Int](k)\n      \
    \  val stackPointerPointerPointerPointerIndex = new Array[Int](k)\n        val\
    \ stackPointerPointerPointerPointerPointer = new Array[Int](k)\n        val stackPointerPointerPointerPointerIndex\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointer =\
    \ new Array[Int](k)\n        val stackPointerPointerPointerPointerPointerIndex\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointer =\
    \ new Array[Int](k)\n        val stackPointerPointerPointerPointerPointerIndex\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointerPointer\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointerIndex\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointer",
  "        val n = grid.length\n        val m = grid(0).length\n        val grid =\
    \ mutable.ArrayBuffer.empty[List[Long]](m)\n        for (i <- 0 until n) {\n \
    \           val row = grid\n            val col = grid\n            val rowList\
    \ = row(i)\n            val colList = col(i)\n            val rowList2 = rowList.map(x\
    \ => x + 1)\n            val colList2 = colList.map(x => x + 1)\n            val\
    \ rowList3 = rowList.map(x => x + 2)\n            val colList3 = colList.map(x\
    \ => x + 2)\n            val rowList4 = rowList.map(x => x + 3)\n            val\
    \ colList4 = colList.map(x => x + 3)\n            val rowList5 = rowList.map(x\
    \ => x + 4)\n            val colList5 = colList.map(x => x + 4)\n            val\
    \ rowList6 = rowList.map(x => x + 5)\n            val colList6 = colList.map(x\
    \ => x + 5)\n            val rowList7 = rowList.map(x => x + 6)\n            val\
    \ colList7 = colList.map(x => x + 6)\n            val rowList8 = rowList.map(x\
    \ => x + 7)\n            val colList8 = colList.map(x => x + 7)\n            val\
    \ rowList9 = rowList.map(x => x + 8)\n            val colList9 = colList.map(x\
    \ => x + 8)\n            val rowList10 = rowList.map(x => x + 9)\n           \
    \ val colList10 = colList.map(x => x + 9)\n            val rowList11 = rowList.map(x\
    \ => x + 10)\n            val colList11 = colList.map(x => x + 10)\n         \
    \   val rowList12 = rowList.map(x => x + 11)\n            val colList12 = colList.map(x\
    \ => x + 11)\n            val rowList13 = rowList.map(x => x + 12)\n         \
    \   val colList13 = colList.map(x => x + 12)\n            val rowList14 = rowList.map(x\
    \ => x + 13)\n            val colList14 = colList.map(x => x + 13)\n         \
    \   val rowList15 = rowList.map(x => x + 14)\n            val colList15 = colList.map(x\
    \ => x + 14)\n            val rowList16 = rowList.map(x => x + 15)\n         \
    \   val colList16 = colList.map(x => x + 15)\n            val rowList17 = rowList.map(x\
    \ => x + 16)\n            val colList17 = colList.map(x => x + 16)\n         \
    \   val rowList18 = rowList.map(x => x + 17)\n            val colList18 = colList.map(x\
    \ => x + 17)", "        val n = grid.length\n        val m = grid(0).length\n\
    \        val lst_A = new Array[Long](k)\n        val lst_B = new Array[Long](k)\n\
    \        val lst_C = new Array[Long](k)\n        val lst_D = new Array[Long](k)\n\
    \        val lst_E = new Array[Long](k)\n        val lst_F = new Array[Long](k)\n\
    \        val lst_G = new Array[Long](k)\n        val lst_H = new Array[Long](k)\n\
    \        val lst_I = new Array[Long](k)\n        val lst_J = new Array[Long](k)\n\
    \        val lst_K = new Array[Long](k)\n        val lst_L = new Array[Long](k)\n\
    \        val lst_M = new Array[Long](k)\n        val lst_N = new Array[Long](k)\n\
    \        val lst_O = new Array[Long](k)\n        val lst_P = new Array[Long](k)\n\
    \        val lst_Q = new Array[Long](k)\n        val lst_R = new Array[Long](k)\n\
    \        val lst_S = new Array[Long](k)\n        val lst_T = new Array[Long](k)\n\
    \        val lst_U = new Array[Long](k)\n        val lst_V = new Array[Long](k)\n\
    \        val lst_W = new Array[Long](k)\n        val lst_X = new Array[Long](k)\n\
    \        val lst_Y = new Array[Long](k)\n        val lst_Z = new Array[Long](k)\n\
    \        val lst_AA = new Array[Long](k)\n        val lst_AB = new Array[Long](k)\n\
    \        val lst_AC = new Array[Long](k)\n        val lst_AD = new Array[Long](k)\n\
    \        val lst_AE = new Array[Long](k)\n        val lst_AF = new Array[Long](k)\n\
    \        val lst_AG = new Array[Long](k)\n        val lst_AH = new Array[Long](k)\n\
    \        val lst_AI = new Array[Long](k)\n        val lst_AJ = new Array[Long](k)\n\
    \        val lst_AK = new Array[Long](k)\n        val lst_AL = new Array[Long](k)\n\
    \        val lst_AM = new Array[Long](k)\n        val lst_AN = new Array[Long](k)\n\
    \        val lst_AO = new Array[Long](k)\n        val lst_AP = new ", "      \
    \  val n = grid.length\n        val m = grid(0).length\n        val lst_A = new\
    \ Array[Long](k + 1)\n        val lst_B = new Array[Long](k + 1)\n        var\
    \ i : Int = 0\n        var j : Int = 0\n        var cnt : Int = 0\n        var\
    \ cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n      \
    \  var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n \
    \       var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int =\
    \ 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int\
    \ = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt :\
    \ Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt\
    \ : Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var\
    \ cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n      \
    \  var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n \
    \       var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int =\
    \ 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int\
    \ = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt :\
    \ Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt\
    \ : Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var\
    \ cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n      \
    \  var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n \
    \       var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int =\
    \ 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int\
    \ = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt :\
    \ Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt\
    \ : Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var\
    \ cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n      \
    \  var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n \
    \       var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int =\
    \ 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int\
    \ = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt :\
    \ Int = 0\n        var cnt : Int = 0", "        val m = grid.size\n        val\
    \ n = grid(0).size\n        val result = new Array[Long](k)\n        var i = 1\n\
    \        var j = 1\n        var k = 1\n        var min = 0\n        var minIndex\
    \ = 0\n        var minPath = 0\n        var isMinPath = 0\n        var isMinPath2\
    \ = 0\n        var isMinPath3 = 0\n        var isMinPath4 = 0\n        var isMinPath5\
    \ = 0\n        var isMinPath6 = 0\n        var isMinPath7 = 0\n        var isMinPath8\
    \ = 0\n        var isMinPath9 = 0\n        var isMinPath10 = 0\n        var isMinPath11\
    \ = 0\n        var isMinPath12 = 0\n        var isMinPath13 = 0\n        var isMinPath14\
    \ = 0\n        var isMinPath15 = 0\n        var isMinPath16 = 0\n        var isMinPath17\
    \ = 0\n        var isMinPath18 = 0\n        var isMinPath19 = 0\n        var isMinPath20\
    \ = 0\n        var isMinPath21 = 0\n        var isMinPath22 = 0\n        var isMinPath23\
    \ = 0\n        var isMinPath24 = 0\n        var isMinPath25 = 0\n        var isMinPath26\
    \ = 0\n        var isMinPath27 = 0\n        var isMinPath28 = 0\n        var isMinPath29\
    \ = 0\n        var isMinPath30 = 0\n        var isMinPath31 = 0\n        var isMinPath32\
    \ = 0\n        var isMinPath33 = 0\n        var isMinPath34 = 0\n        var isMinPath35\
    \ = 0\n        var isMinPath36 = 0\n        var isMinPath37 = 0\n        var isMinPath38\
    \ = 0\n        var isMinPath39 = 0\n        var isMinPath40 = 0\n        var isMinPath41\
    \ = 0\n        var isMinPath42 = 0\n        var isMinPath43 = 0\n        var isMinPath44\
    \ = 0\n        var isMinPath45 = 0\n        var isMinPath46 = 0\n        var isMinPath47\
    \ = 0\n        var isMinPath48 = 0\n        var isMinPath49 = 0\n        var isMinPath50\
    \ = 0\n        var isMinPath51 = 0\n        var isMinPath52 = 0\n        var isMinPath53\
    \ = 0\n        var isMinPath54 = 0\n        var isMinPath55 = 0\n        var isMinPath56\
    \ = 0\n        var isMinPath57 = 0\n        var isMinPath58 = 0\n        var isMinPath59\
    \ = 0\n        var isMinPath60 = 0\n        var isMinPath61 = 0\n        var isMinPath62\
    \ = 0\n        var isMinPath63 = 0\n        var isMinPath64 = 0\n        var isMinPath65\
    \ = 0\n        var isMinPath66 = 0\n        var is", "        val m = grid.length\n\
    \        val n = grid(0).length\n        val result = new Array[Long](k)\n   \
    \     val visited = new Array[Boolean](k)\n        val visitedIndex = new Array[Int](k)\n\
    \        val visitedIndexIndex = new Array[Int](k)\n        val visitedIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val visitedIndexIndexIndexIndexIndex = new Array[Int](k)\n        val\
    \ visitedIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val ", "        val n = grid.size\n        val\
    \ m = grid(0).size\n        val result = new mutable.ListBuffer[Long]()\n    \
    \    val visited = new mutable.HashSet[Long]()\n        val visitedMap = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap2 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap3 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap4\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap5 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap6 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap7 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap8\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap9 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap10 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap11 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap12 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap13\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap14 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap15 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap16 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap17 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap18\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap19 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap20 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap21 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap22 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap23\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap24 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap25 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap26 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap27 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap28\
    \ = new mutable.HashMap[Long, ", "        val n = grid.size\n        val m = grid(0).size\n\
    \        val lst_A = Array.ofDim[Long](k)\n        val lst_B = Array.ofDim[Long](k)\n\
    \        var i : Int = 0\n        var j : Int = 0\n        var k : Long = 0\n\
    \        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int =\
    \ 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int\
    \ = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt :\
    \ Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt\
    \ : Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var\
    \ cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n      \
    \  var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n \
    \       var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int =\
    \ 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int\
    \ = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt :\
    \ Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt\
    \ : Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var\
    \ cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n      \
    \  var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n \
    \       var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int =\
    \ 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int\
    \ = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt :\
    \ Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt\
    \ : Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var\
    \ cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n      \
    \  var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n \
    \       var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int =\
    \ 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt : Int\
    \ = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt :\
    \ Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var cnt\
    \ : Int = 0\n        var cnt : Int = 0\n        var cnt : Int = 0\n        var\
    \ cnt : Int = 0\n        var cnt : Int = 0", "        val n = grid.size\n    \
    \    val m = grid.head.length\n        val lst_A = grid.map(_.toList).map(_.sorted)\n\
    \        val lst_B = grid.map(_.toList).map(_.sorted)\n        val lst_C = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2))\n        val lst_D = lst_C.map(x => (x._1, x._2))\n       \
    \ val lst_E = lst_D.map(x => (x._1, x._2))\n        val lst_F = lst_E.map(x =>\
    \ (x._1, x._2))\n        val lst_G = lst_F.map(x => (x._1, x._2))\n        val\
    \ lst_H = lst_G.map(x => (x._1, x._2))\n        val lst_I = lst_H.map(x => (x._1,\
    \ x._2))\n        val lst_J = lst_I.map(x => (x._1, x._2))\n        val lst_K\
    \ = lst_J.map(x => (x._1, x._2))\n        val lst_L = lst_K.map(x => (x._1, x._2))\n\
    \        val lst_M = lst_L.map(x => (x._1, x._2))\n        val lst_N = lst_M.map(x\
    \ => (x._1, x._2))\n        val lst_O = lst_N.map(x => (x._1, x._2))\n       \
    \ val lst_P = lst_O.map(x => (x._1, x._2))\n        val lst_Q = lst_P.map(x =>\
    \ (x._1, x._2))\n        val lst_R = lst_Q.map(x => (x._1, x._2))\n        val\
    \ lst_S = lst_R.map(x => (x._1, x._2))\n        val lst_T = lst_S.map(x => (x._1,\
    \ x._2))\n        val lst_U = lst_T.map(x => (x._1, x._2))\n        val lst_V\
    \ = lst_U.map(x => (x._1, x._2))\n        val lst_W = lst_V.map(x => (x._1, x._2))\n\
    \        val lst_X = lst_W.map(x => (x._1, x._2))\n        val lst_Y = lst_X.map(x\
    \ => (x._1, x._2))\n        val lst_Z = lst_Y.map(x => (x._1, x._2))\n       \
    \ val lst_A = lst_Z.map(x => (x._1, x._", "        val m = grid.size\n       \
    \ val n = grid(0).size\n        val grid = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        val visited = mutable.HashSet.empty[Long]\n        val visitedSet = mutable.HashSet.empty[Long]\n\
    \        val visitedList = mutable.ArrayBuffer.empty[Long]\n        val visitedListSet\
    \ = mutable.HashSet.empty[Long]\n        val visitedListSet2 = mutable.HashSet.empty[Long]\n\
    \        val visitedListSet3 = mutable.HashSet.empty[Long]\n        val visitedListSet4\
    \ = mutable.HashSet.empty[Long]\n        val visitedListSet5 = mutable.HashSet.empty[Long]\n\
    \        val visitedListSet6 = mutable.HashSet.empty[Long]\n        val visitedListSet7\
    \ = mutable.HashSet.empty[Long]\n        val visitedListSet8 = mutable.HashSet.empty[Long]\n\
    \        val visitedListSet9 = mutable.HashSet.empty[Long]\n        val visitedListSet10\
    \ = mutable.HashSet.empty[Long]\n        val visitedListSet11 = mutable.HashSet.empty[Long]\n\
    \        val visitedListSet12 = mutable.HashSet.empty[Long]\n        val visitedListSet13\
    \ = mutable.HashSet.empty[Long]\n        val visitedListSet14 = mutable.HashSet.empty[Long]\n\
    \        val visitedListSet15 = mutable.HashSet.empty[Long]\n        val visitedListSet16\
    \ = mutable.HashSet.empty[Long]\n        val visitedListSet17 = mutable.HashSet.empty[Long]\n\
    \        val visitedListSet18 = mutable.HashSet.empty[Long]\n        val visitedListSet19\
    \ = mutable.HashSet.empty[Long]\n        val visitedListSet20 = mutable.HashSet.empty[Long]\n\
    \        val visitedListSet21 = mutable.HashSet.empty[Long]\n        val visitedListSet22\
    \ = mutable.HashSet.empty[Long]\n        val visitedListSet23 = mutable.HashSet.empty[Long]\n\
    \        val visitedListSet24 = mutable.HashSet.empty[Long]\n        val visitedListSet25\
    \ = mutable.HashSet.empty[Long]\n        val visitedListSet26 = mutable.HashSet.empty[Long]\n\
    \        val visitedListSet27 = mutable.HashSet.empty[", "        val n = grid.size\n\
    \        val m = grid(0).size\n        val visited = new mutable.HashSet[Long]()\n\
    \        val result = new mutable.ListBuffer[Long]()\n        val visitedList\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList2 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList3 = new mutable.ListBuffer[Long]()\n        val visitedList4\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList5 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList6 = new mutable.ListBuffer[Long]()\n        val visitedList7\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList8 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList9 = new mutable.ListBuffer[Long]()\n        val visitedList10\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList11 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList12 = new mutable.ListBuffer[Long]()\n        val visitedList13\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList14 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList15 = new mutable.ListBuffer[Long]()\n        val visitedList16\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList17 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList18 = new mutable.ListBuffer[Long]()\n        val visitedList19\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList20 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList21 = new mutable.ListBuffer[Long]()\n        val visitedList22\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList23 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList24 = new mutable.ListBuffer[Long]()\n        val visitedList25\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList26 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList27 = new mutable.ListBuffer[Long]()\n        val visitedList28\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList29 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList30 = new mut", "        val grid = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        val visited = mutable.HashSet[List[Long]]()\n        val visitedList\
    \ = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedListSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val visitedListSize = grid.length\n        val visitedListSize = visitedListSize.toList\n\
    \        val visitedListSize = visitedListSize.toList\n        val visitedListSize\
    \ = visitedListSize.toList\n        val visitedListSize = visitedListSize.toList\n\
    \        val visitedListSize = visitedListSize.toList\n        val visitedListSize\
    \ = visitedListSize.toList\n        val visitedListSize = visitedListSize.toList\n\
    \        val visitedListSize = visitedListSize.toList\n        val visitedListSize\
    \ = visitedListSize.toList\n        val visitedListSize = visitedListSize.toList\n\
    \        val visitedListSize = visitedListSize.toList\n        val visitedListSize\
    \ = visitedListSize.toList\n        val visitedListSize = visitedListSize.toList\n\
    \        val visitedListSize = visitedListSize.toList\n        val visitedListSize\
    \ = visitedListSize.toList\n        val visitedListSize = visitedListSize.toList\n\
    \        val visitedListSize = visitedListSize.toList\n        val visitedListSize\
    \ = visitedListSize.toList\n        val visitedListSize = visitedListSize.toList\n\
    \        val visitedListSize = visitedListSize.toList\n        val visitedListSize\
    \ = visitedListSize.toList\n        val visitedListSize = visitedListSize.toList\n\
    \        val visitedListSize = visitedListSize.toList\n        val visitedListSize\
    \ = visitedListSize.toList\n        val visitedListSize = visitedListSize.toList\n\
    \        val visitedListSize = visitedListSize.toList\n        val visitedListSize\
    \ = visitedListSize.toList\n        val visitedListSize = visitedListSize.toList\n\
    \        val visitedListSize = visitedListSize.toList\n        val visitedListSize\
    \ = visitedListSize.toList\n        val visitedListSize = visitedListSize.toList\n\
    \        val visitedListSize = visitedListSize.toList\n        val visitedListSize\
    \ = visitedListSize.toList\n        val visitedListSize = visitedListSize.toList\n\
    \        val visited", "        val m = grid.size\n        val n = grid(0).size\n\
    \        val lst_A = new Array[Long](k + 1)\n        val lst_B = new Array[Long](k\
    \ + 1)\n        var i = 0\n        var j = 0\n        var k = 0\n        var minPath\
    \ = 0\n        var minPathIndex = 0\n        var minPathValue = 0\n        var\
    \ minPathValueIndex = 0\n        var minPathValueIndex2 = 0\n        var minPathValueIndex3\
    \ = 0\n        var minPathValueIndex4 = 0\n        var minPathValueIndex5 = 0\n\
    \        var minPathValueIndex6 = 0\n        var minPathValueIndex7 = 0\n    \
    \    var minPathValueIndex8 = 0\n        var minPathValueIndex9 = 0\n        var\
    \ minPathValueIndex10 = 0\n        var minPathValueIndex11 = 0\n        var minPathValueIndex12\
    \ = 0\n        var minPathValueIndex13 = 0\n        var minPathValueIndex14 =\
    \ 0\n        var minPathValueIndex15 = 0\n        var minPathValueIndex16 = 0\n\
    \        var minPathValueIndex17 = 0\n        var minPathValueIndex18 = 0\n  \
    \      var minPathValueIndex19 = 0\n        var minPathValueIndex20 = 0\n    \
    \    var minPathValueIndex21 = 0\n        var minPathValueIndex22 = 0\n      \
    \  var minPathValueIndex23 = 0\n        var minPathValueIndex24 = 0\n        var\
    \ minPathValueIndex25 = 0\n        var minPathValueIndex26 = 0\n        var minPathValueIndex27\
    \ = 0\n        var minPathValueIndex28 = 0\n        var minPathValueIndex29 =\
    \ 0\n        var minPathValueIndex30 = 0\n        var minPathValueIndex31 = 0\n\
    \        var minPathValueIndex32 = 0\n        var minPathValueIndex33 = 0\n  \
    \      var minPathValueIndex34 = 0\n        var minPathValueIndex35 = 0\n    \
    \    var minPathValueIndex36 = 0\n        var minPathValueIndex37 = 0\n      \
    \  var minPathValueIndex38 = 0\n        var minPathValueIndex39 = 0\n        var\
    \ minPathValueIndex40 = 0\n        var minPathValueIndex41 = 0\n        var minPathValueIndex42\
    \ = 0\n        var minPathValueIndex43 = 0\n        var minPathValueIndex44 =\
    \ 0\n        var minPathValueIndex45 = 0\n        var minPathValueIndex46 = 0\n\
    \        var minPathValueIndex47 = 0\n        var minPathValueIndex48 = 0\n  \
    \      var minPathValueIndex49 = 0\n        var minPathValueIndex50 = 0\n    \
    \    var minPathValueIndex51 = 0\n        var minPathValueIndex52 = 0\n      \
    \  var minPathValueIndex53 = 0\n        var minPathValueIndex54 = 0\n        var\
    \ minPathValueIndex55 = 0\n        var minPathValueIndex56", "        val n =\
    \ grid.size\n        val m = grid(0).size\n        val grid = mutable.ArrayBuffer.empty[List[Long]](m)\n\
    \        val visited = mutable.ArrayBuffer.empty[Boolean](m)\n        val queue\
    \ = mutable.Queue[List[Long]]()\n        val ans = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedCount = mutable.ArrayBuffer.empty[Int](m)\n        val queueCount\
    \ = mutable.Queue[Int]()\n        val queueSize = mutable.Queue[Int]()\n     \
    \   val queueSizeCount = mutable.Queue[Int]()\n        val queueSizeCount2 = mutable.Queue[Int]()\n\
    \        val queueSizeCount3 = mutable.Queue[Int]()\n        val queueSizeCount4\
    \ = mutable.Queue[Int]()\n        val queueSizeCount5 = mutable.Queue[Int]()\n\
    \        val queueSizeCount6 = mutable.Queue[Int]()\n        val queueSizeCount7\
    \ = mutable.Queue[Int]()\n        val queueSizeCount8 = mutable.Queue[Int]()\n\
    \        val queueSizeCount9 = mutable.Queue[Int]()\n        val queueSizeCount10\
    \ = mutable.Queue[Int]()\n        val queueSizeCount11 = mutable.Queue[Int]()\n\
    \        val queueSizeCount12 = mutable.Queue[Int]()\n        val queueSizeCount13\
    \ = mutable.Queue[Int]()\n        val queueSizeCount14 = mutable.Queue[Int]()\n\
    \        val queueSizeCount15 = mutable.Queue[Int]()\n        val queueSizeCount16\
    \ = mutable.Queue[Int]()\n        val queueSizeCount17 = mutable.Queue[Int]()\n\
    \        val queueSizeCount18 = mutable.Queue[Int]()\n        val queueSizeCount19\
    \ = mutable.Queue[Int]()\n        val queueSizeCount20 = mutable.Queue[Int]()\n\
    \        val queueSizeCount21 = mutable.Queue[Int]()\n        val queueSizeCount22\
    \ = mutable.Queue[Int]()\n        val queueSizeCount23 = mutable.Queue[Int]()\n\
    \        val queueSizeCount24 = mutable.Queue[Int]()\n        val queueSizeCount25\
    \ = mutable.Queue[Int]()\n        val queueSizeCount26 = mutable.Queue[Int]()\n\
    \        val queueSizeCount27 = mutable.Queue[Int]()\n        val queueSizeCount28\
    \ = mutable.Queue[Int]()", "        val N = grid.length\n        val M = grid(0).length\n\
    \        val grid = mutable.ArrayBuffer.empty[List[Long]](N * M)\n        for\
    \ (i <- 0 until N) {\n            for (j <- 0 until M) {\n                grid(i\
    \ * M + j) = grid(i).head + grid(j).head\n            }\n        }\n        val\
    \ lst_A = grid.toList\n        val lst_B = grid.reverse.toList\n        val ans\
    \ = lst_A.sortWith((x, y) => lst_A(x) < lst_B(y))\n        val ans = ans.take(k)\n\
    \        ans", "        val n = grid.size\n        val m = grid(0).size\n    \
    \    val lst_A = new Array[Long](k + 1)\n        val lst_B = new Array[Long](k\
    \ + 1)\n        var i : Int = 0\n        var j : Int = 0\n        var min : Long\
    \ = grid(0).head\n        var index : Int = 0\n        var flag : Boolean = true\n\
    \        while (i < n && j < m) {\n            if (grid((i).toInt)((j).toInt)\
    \ < min) {\n                min = grid((i).toInt)((j).toInt)\n               \
    \ index = i\n                flag = true\n            }\n            if (grid((i).toInt)((j).toInt)\
    \ == min) {\n                lst_A(i) = grid((i).toInt)((j).toInt)\n         \
    \       i += 1\n                j += 1\n            }\n            if (grid((i).toInt)((j).toInt)\
    \ > min) {\n                min = grid((i).toInt)((j).toInt)\n               \
    \ index = i\n                flag = true\n            }\n            if (grid((i).toInt)((j).toInt)\
    \ == min && flag) {\n                lst_B(i) = grid((i).toInt)((j).toInt)\n \
    \               i += 1\n                j += 1\n            }\n            if\
    \ (grid((i).toInt)((j).toInt) > min && flag) {\n                min = grid((i).toInt)((j).toInt)\n\
    \                index = i\n                flag = true\n            }\n     \
    \       if (grid((i).toInt)((j).toInt) == min && flag) {\n                lst_B(i)\
    \ = grid((i).toInt)((j).toInt)\n                i += 1\n                j += 1\n\
    \            }\n        }\n        if (min == grid((i).toInt)((j).toInt)) {\n\
    \            val lst_C = lst_A.filter(_ < min)\n            val lst_D = lst_B.filter(_\
    \ < min)\n            val lst_E = lst_C.filter(_ < min)\n            val lst_F\
    \ = lst_D.filter(_ < min)\n            val lst_G = lst_E.filter(_ < min)\n   \
    \         val lst_H = lst_F.filter(_ < min)\n            val lst_I = lst_G.filter(_\
    \ < min)\n            val lst_J = lst_H.filter(_ < min)\n            val lst_K\
    \ = lst_I.filter(_ < min)\n            val lst_L = lst_J.filter(_ < min)\n   \
    \         val lst_M = lst_K.filter(_ < min)\n            val lst_N = lst_L.filter(_\
    \ < min)\n            val lst_O = lst_M.", "        val N = grid.size\n      \
    \  val m = N * N\n        val lst_A = mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_B = mutable.ArrayBuffer.empty[Long]\n        val lst_C = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_D = mutable.ArrayBuffer.empty[Long]\n        val lst_E = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_F = mutable.ArrayBuffer.empty[Long]\n        val lst_G = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_H = mutable.ArrayBuffer.empty[Long]\n        val lst_I = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_J = mutable.ArrayBuffer.empty[Long]\n        val lst_K = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_L = mutable.ArrayBuffer.empty[Long]\n        val lst_M = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_N = mutable.ArrayBuffer.empty[Long]\n        val lst_O = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_P = mutable.ArrayBuffer.empty[Long]\n        val lst_Q = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_R = mutable.ArrayBuffer.empty[Long]\n        val lst_S = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_T = mutable.ArrayBuffer.empty[Long]\n        val lst_U = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_V = mutable.ArrayBuffer.empty[Long]\n        val lst_W = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_X = mutable.ArrayBuffer.empty[Long]\n        val lst_Y = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_Z = mutable.ArrayBuffer.empty[Long]\n        val lst_A = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_B = mutable.ArrayBuffer.empty[Long]\n        val lst_C = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_D = mutable.ArrayBuffer.empty[Long]\n        val lst_E = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_F = mutable.ArrayBuffer.empty[Long]\n        val lst_G = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_H = mutable.ArrayBuffer.empty[Long]\n        val lst_I = mutable.ArrayBuffer.empty[",
  "        val n = grid.size\n        val m = grid(0).size\n        val grid = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        val visited = mutable.HashSet.empty[Long]\n        val queue = mutable.Queue[Long]()\n\
    \        val lst_A = mutable.ArrayBuffer.empty[Long]\n        val lst_B = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 1 to n) {\n            val row = grid(i)\n            val col\
    \ = grid(0).indexOf(i)\n            val val = row.toLong + col.toLong\n      \
    \      if (visited.contains(val)) {\n                continue\n            }\n\
    \            visited.add(val)\n            val lst_A = lst_A :+ val\n        \
    \    val lst_B = lst_B :+ val\n            queue.enqueue(val)\n        }\n   \
    \     val ans = lst_A.toList\n        val lst_B = lst_B.toList\n        var i\
    \ = 0\n        while (i < k) {\n            val v = queue.poll()\n           \
    \ val row = grid(v)\n            val col = grid(0).indexOf(v)\n            val\
    \ val = row.toLong + col.toLong\n            if (lst_A.contains(val) && lst_B.contains(val))\
    \ {\n                val lst_A = lst_A :+ val\n                val lst_B = lst_B\
    \ :+ val\n                ans = ans :+ val\n                i = i + 1\n      \
    \      } else {\n                lst_A = lst_A :+ val\n                lst_B =\
    \ lst_B :+ val\n            }\n        }\n        ans", "        val m = grid.length\n\
    \        val n = grid(0).length\n        val result = new Array[Long](k)\n   \
    \     val visited = new Array[Boolean](k)\n        val stack = new Array[Long](k)\n\
    \        val stackSize = new Array[Int](k)\n        val stackIndex = new Array[Int](k)\n\
    \        val stackIndexSize = new Array[Int](k)\n        val stackIndexIndex =\
    \ new Array[Int](k)\n        val stackIndexIndexSize = new Array[Int](k)\n   \
    \     val stackIndexIndexIndex = new Array[Int](k)\n        val stackIndexIndexIndexSize\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexSize = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexSize = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndex = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexSize\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexSize = new Array[Int](k)\n   \
    \     val stackIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n     \
    \   val stackIndexIndexIndexIndexIndexIndexIndexSize = new Array[Int](k)\n   \
    \     val stackIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexSize = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndexSize = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexSize = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexSize = new\
    \ Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexSize\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndex", "        val\
    \ m = grid.length\n        val n = grid(0).length\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var cur = 0\n        var min = 0\n        var max = 0\n        var curVal\
    \ = 0\n        var minVal = 0\n        var maxVal = 0\n        var curRow = 0\n\
    \        var curCol = 0\n        var minRow = 0\n        var minCol = 0\n    \
    \    var maxRow = 0\n        var maxCol = 0\n        var curRowMax = 0\n     \
    \   var curColMax = 0\n        var minRowMax = 0\n        var minColMax = 0\n\
    \        var maxRowMax = 0\n        var maxColMax = 0\n        var curRowMin =\
    \ 0\n        var curColMin = 0\n        var minRowMin = 0\n        var minColMin\
    \ = 0\n        var maxRowMin = 0\n        var maxColMin = 0\n        var curRowMinMax\
    \ = 0\n        var curColMinMax = 0\n        var minRowMinMax = 0\n        var\
    \ minColMinMax = 0\n        var maxRowMinMax = 0\n        var maxColMinMax = 0\n\
    \        var curRowMinMin = 0\n        var curColMinMin = 0\n        var minRowMinMin\
    \ = 0\n        var minColMinMin = 0\n        var maxRowMinMin = 0\n        var\
    \ maxColMinMin = 0\n        var curRowMinMinMax = 0\n        var curColMinMinMax\
    \ = 0\n        var minRowMinMinMax = 0\n        var minColMinMinMax = 0\n    \
    \    var maxRowMinMinMax = 0\n        var maxColMinMinMax = 0\n        var curRowMinMinMin\
    \ = 0\n        var curColMinMinMin = 0\n        var minRowMinMinMin = 0\n    \
    \    var minColMinMinMin = 0\n        var maxRowMinMinMin = 0\n        var maxColMinMinMin\
    \ = 0\n        var curRowMinMinMinMax = 0\n        var curColMinMinMinMax = 0\n\
    \        var minRowMinMinMinMax = 0\n        var minColMinMinMinMax = 0\n    \
    \    var maxRowMinMinMinMax = 0\n        var maxColMinMinMinMax = 0\n        var\
    \ curRowMinMinMinMin = 0\n        var curColMinMinMinMin = 0\n        var minRowMinMinMinMin\
    \ = 0\n        var minColMinMinMin = 0\n        var maxRowMinMinMinMin = 0\n \
    \       var maxColMinMinMinMin = 0\n        var curRowMinMinMinMinMax = 0\n  \
    \      var curColMinMinMinMinMax = 0\n        var minRowMinMinMinMinMax = 0\n\
    \        var minColMinMinMinMax = 0\n        var maxRowMinMinMinMinMax = 0\n \
    \       var maxColMinMinMinMinMax = 0\n        var curRowMinMinMinMinMin = 0\n\
    \        var ", "        val m = grid.length\n        val n = grid(0).length\n\
    \        val result = new mutable.ListBuffer[Long]()\n        val visited = new\
    \ mutable.HashSet[Long]()\n        val visitedMap = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap2 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap3 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap4\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap5 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap6 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap7 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap8\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap9 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap10 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap11 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap12 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap13\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap14 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap15 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap16 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap17 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap18\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap19 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap20 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap21 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap22 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap23\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap24 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap25 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap26 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap27 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap28\
    \ = new mutable.HashMap[Long, ", "        val n = grid.size\n        val m = grid(0).size\n\
    \        val result = new mutable.ArrayBuffer[Long]()\n        val visited = new\
    \ mutable.HashSet[Long]()\n        val queue = new mutable.PriorityQueue[Long]()\n\
    \        val visitedCount = new mutable.HashMap[Long, Int]()\n        for (i <-\
    \ 1 to n) {\n            val row = grid(i)\n            val rowCount = row.size\n\
    \            val rowMax = rowCount - 1\n            for (j <- 1 to m) {\n    \
    \            val col = grid(j)\n                val colCount = col.size\n    \
    \            val colMax = colCount - 1\n                val cellMax = rowMax +\
    \ colMax\n                val cellCount = rowCount + colCount\n              \
    \  val cellMin = cellCount - 1\n                val cellMinMax = cellMin * cellMin\n\
    \                val cellMinMaxCount = cellMin * cellMax\n                val\
    \ cellMinMaxCount2 = cellMin * cellMax * cellMax\n                val cellMinMaxCount3\
    \ = cellMin * cellMax * cellMax * cellMax\n                val cellMinMaxCount4\
    \ = cellMin * cellMax * cellMax * cellMax * cellMax\n                val cellMinMaxCount5\
    \ = cellMin * cellMax * cellMax * cellMax * cellMax * cellMax * cellMax\n    \
    \            val cellMinMaxCount6 = cellMin * cellMax * cellMax * cellMax * cellMax\
    \ * cellMax * cellMax * cellMax * cellMax\n                val cellMinMaxCount7\
    \ = cellMin * cellMax * cellMax * cellMax * cellMax * cellMax * cellMax * cellMax\
    \ * cellMax * cellMax * cellMax * cellMax\n                val cellMinMaxCount8\
    \ = cellMin * cellMax * cellMax * cellMax * cellMax * cellMax * cellMax * cellMax\
    \ * cellMax * cellMax * cellMax * cellMax * cellMax * cellMax * cellMax * cellMax\
    \ * cellMax * cellMax * cellMax * cellMax * cellMax * cellMax * cellMax * cellMax\
    \ * cellMax * cellMax * cellMax * cellMax * cellMax * cellMax * cellMax * cellMax\
    \ * cellMax * cellMax * cellMax * cellMax * cellMax * cellMax * cellMax * cellMax\
    \ * cellMax * cellMax * cellMax * cellMax * cellMax * cellMax * cellMax * cellMax\
    \ * cellMax * cellMax * cellMax * cellMax * cellMax * cellMax * cell", "     \
    \   val m = grid.size\n        val n = grid(0).size\n        val grid = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        val visited = mutable.HashSet[Long]()\n        val queue = mutable.Queue[Long]()\n\
    \        val ans = mutable.ArrayBuffer.empty[Long]\n        val visitedCount =\
    \ mutable.HashSet[Long]()\n        val queueCount = mutable.Queue[Long]()\n  \
    \      val ans = mutable.ArrayBuffer.empty[Long]\n        val visitedCount = mutable.HashSet[Long]()\n\
    \        val queueCount = mutable.Queue[Long]()\n        val queue = mutable.Queue[Long]()\n\
    \        val visited = mutable.HashSet[Long]()\n        val queueCount = mutable.Queue[Long]()\n\
    \        val visited = mutable.HashSet[Long]()\n        val queueCount = mutable.Queue[Long]()\n\
    \        val visited = mutable.HashSet[Long]()\n        val queueCount = mutable.Queue[Long]()\n\
    \        val visited = mutable.HashSet[Long]()\n        val queueCount = mutable.Queue[Long]()\n\
    \        val visited = mutable.HashSet[Long]()\n        val queueCount = mutable.Queue[Long]()\n\
    \        val visited = mutable.HashSet[Long]()\n        val queueCount = mutable.Queue[Long]()\n\
    \        val visited = mutable.HashSet[Long]()\n        val queueCount = mutable.Queue[Long]()\n\
    \        val visited = mutable.HashSet[Long]()\n        val queueCount = mutable.Queue[Long]()\n\
    \        val visited = mutable.HashSet[Long]()\n        val queueCount = mutable.Queue[Long]()\n\
    \        val visited = mutable.HashSet[Long]()\n        val queueCount = mutable.Queue[Long]()\n\
    \        val visited = mutable.HashSet[Long]()\n        val queueCount = mutable.Queue[Long]()\n\
    \        val visited = mutable.HashSet[Long]()\n        val queueCount = mutable.Queue[Long]()\n\
    \        val visited = mutable.HashSet[Long]()\n        val queueCount = mutable.Queue[Long]()\n\
    \        val visited = mutable.HashSet[Long]()\n        val queueCount = mutable.Queue[Long]()\n\
    \        val visited = mutable.HashSet[Long]()\n        val queueCount = mutable.Queue[Long]",
  "        val n = grid.length\n        val m = grid(0).length\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val visited = new mutable.HashSet[Long]()\n\
    \        val visitedEdge = new mutable.HashMap[Long, List[Long]]()\n        val\
    \ visitedEdge2 = new mutable.HashMap[Long, List[Long]]()\n        val visitedEdge3\
    \ = new mutable.HashMap[Long, List[Long]]()\n        val visitedEdge4 = new mutable.HashMap[Long,\
    \ List[Long]]()\n        val visitedEdge5 = new mutable.HashMap[Long, List[Long]]()\n\
    \        val visitedEdge6 = new mutable.HashMap[Long, List[Long]]()\n        val\
    \ visitedEdge7 = new mutable.HashMap[Long, List[Long]]()\n        val visitedEdge8\
    \ = new mutable.HashMap[Long, List[Long]]()\n        val visitedEdge9 = new mutable.HashMap[Long,\
    \ List[Long]]()\n        val visitedEdge10 = new mutable.HashMap[Long, List[Long]]()\n\
    \        val visitedEdge11 = new mutable.HashMap[Long, List[Long]]()\n       \
    \ val visitedEdge12 = new mutable.HashMap[Long, List[Long]]()\n        val visitedEdge13\
    \ = new mutable.HashMap[Long, List[Long]]()\n        val visitedEdge14 = new mutable.HashMap[Long,\
    \ List[Long]]()\n        val visitedEdge15 = new mutable.HashMap[Long, List[Long]]()\n\
    \        val visitedEdge16 = new mutable.HashMap[Long, List[Long]]()\n       \
    \ val visitedEdge17 = new mutable.HashMap[Long, List[Long]]()\n        val visitedEdge18\
    \ = new mutable.HashMap[Long, List[Long]]()\n        val visitedEdge19 = new mutable.HashMap[Long,\
    \ List[Long]]()\n        val visitedEdge20 = new mutable.HashMap[Long, List[Long]]()\n\
    \        val visitedEdge21 = new mutable.HashMap[Long, List[Long]]()\n       \
    \ val visitedEdge22 = new mutable.HashMap[Long, List[Long]]()\n        val visitedEdge23\
    \ = new mutable.HashMap[Long, List[Long]]()\n        val visitedEdge24 = new mutable.HashMap[Long,\
    \ List[Long]]()\n        val visitedEdge25 = new mutable.HashMap[Long, List[Long]]()\n\
    \        val visitedEdge26 = new mutable.HashMap[Long, List[Long]]()\n       \
    \ val visited", "        val N = grid.size\n        val m = N * N\n        val\
    \ lst_A = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_B\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_C = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_D = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_E = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_F\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_G = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_H = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_I = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_J\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_K = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_L = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_M = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_N\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_O = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_P = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_Q = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_R\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_S = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_T = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_U = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_V\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_W = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_X = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_Y = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_Z\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_A = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_B = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_C = scala.collection.mutable.ArrayBuffer.empty", "        val m = grid.size\n\
    \        val n = grid(0).size\n        val path = new Array[Long](k)\n       \
    \ var minPath = 0\n        val visited = new Array[Boolean](k)\n        val visitedList\
    \ = new Array[Boolean](k)\n        var index = 0\n        val lst_A = new Array[Long](n)\n\
    \        val lst_B = new Array[Long](n)\n        var i = 1\n        val j = 1\n\
    \        while (i <= m && j <= n) {\n            if (visited(i) && visited(j))\
    \ {\n                path(i) = index(j)\n                minPath = min(minPath,\
    \ path(i))\n                visitedList(index) = false\n                visitedList(index\
    \ + 1) = false\n                index += 2\n                i += 1\n         \
    \       j += 1\n            } else if (visited(i)) {\n                path(i)\
    \ = index(j)\n                minPath = min(minPath, path(i))\n              \
    \  visitedList(index) = false\n                visitedList(index + 1) = false\n\
    \                index += 2\n                i += 1\n            } else if (visited(j))\
    \ {\n                path(j) = index(i)\n                minPath = min(minPath,\
    \ path(j))\n                visitedList(index) = false\n                visitedList(index\
    \ + 1) = false\n                index += 2\n                j += 1\n         \
    \   } else {\n                lst_A(i) = grid(i)(j)\n                lst_B(j)\
    \ = grid(i)(j)\n                i += 1\n                j += 1\n            }\n\
    \        }\n        if (minPath == 0) {\n            minPath = 1\n        }\n\
    \        val result = new Array[Long](k)\n        var index = 0\n        while\
    \ (index <= k) {\n            if (visitedList(index)) {\n                result(index)\
    \ = minPath\n                index += 1\n            } else {\n              \
    \  index += 1\n            }\n        }\n        return result", "        val\
    \ m = grid.length\n        val n = grid(0).length\n        val result = new Array[Long](k)\n\
    \        val visited = new Array[Boolean](k)\n        val visitedIndex = new Array[Int](k)\n\
    \        val visitedIndexIndex = new Array[Int](k)\n        val visitedIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val visitedIndexIndexIndexIndexIndex = new Array[Int](k)\n        val\
    \ visitedIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visited", "        val m = grid.length\n  \
    \      val n = grid(0).length\n        val grid = mutable.ArrayBuffer.empty[List[Long]](m)\n\
    \        for (i <- 0 until m) {\n            val row = grid(i)\n            for\
    \ (j <- 0 until n) {\n                val cell = row[j]\n                val list\
    \ = if (cell == k) List(cell) else List(cell)\n                grid += list\n\
    \            }\n        }\n        val sorted = grid.toList.sortBy(x => x)\n \
    \       val result = sorted.take(k)\n        result", "        val m = grid.length\n\
    \        val n = grid(0).length\n        val visited = new mutable.HashSet[Long]()\n\
    \        val result = new mutable.ListBuffer[Long]()\n        val visitedList\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList2 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList3 = new mutable.ListBuffer[Long]()\n        val visitedList4\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList5 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList6 = new mutable.ListBuffer[Long]()\n        val visitedList7\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList8 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList9 = new mutable.ListBuffer[Long]()\n        val visitedList10\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList11 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList12 = new mutable.ListBuffer[Long]()\n        val visitedList13\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList14 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList15 = new mutable.ListBuffer[Long]()\n        val visitedList16\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList17 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList18 = new mutable.ListBuffer[Long]()\n        val visitedList19\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList20 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList21 = new mutable.ListBuffer[Long]()\n        val visitedList22\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList23 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList24 = new mutable.ListBuffer[Long]()\n        val visitedList25\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList26 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList27 = new mutable.ListBuffer[Long]()\n        val visitedList28\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList29 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList30 = new mut", "        val N = grid.size\n        val\
    \ M = grid(0).size\n        val result = new Array[Long](k)\n        val visited\
    \ = new Array[Boolean](N)\n        val queue = new Array[Int](N)\n        val\
    \ queueIndex = new Array[Int](N)\n        val queueIndex2 = new Array[Int](N)\n\
    \        val queueIndex3 = new Array[Int](N)\n        val queueIndex4 = new Array[Int](N)\n\
    \        val queueIndex5 = new Array[Int](N)\n        val queueIndex6 = new Array[Int](N)\n\
    \        val queueIndex7 = new Array[Int](N)\n        val queueIndex8 = new Array[Int](N)\n\
    \        val queueIndex9 = new Array[Int](N)\n        val queueIndex10 = new Array[Int](N)\n\
    \        val queueIndex11 = new Array[Int](N)\n        val queueIndex12 = new\
    \ Array[Int](N)\n        val queueIndex13 = new Array[Int](N)\n        val queueIndex14\
    \ = new Array[Int](N)\n        val queueIndex15 = new Array[Int](N)\n        val\
    \ queueIndex16 = new Array[Int](N)\n        val queueIndex17 = new Array[Int](N)\n\
    \        val queueIndex18 = new Array[Int](N)\n        val queueIndex19 = new\
    \ Array[Int](N)\n        val queueIndex20 = new Array[Int](N)\n        val queueIndex21\
    \ = new Array[Int](N)\n        val queueIndex22 = new Array[Int](N)\n        val\
    \ queueIndex23 = new Array[Int](N)\n        val queueIndex24 = new Array[Int](N)\n\
    \        val queueIndex25 = new Array[Int](N)\n        val queueIndex26 = new\
    \ Array[Int](N)\n        val queueIndex27 = new Array[Int](N)\n        val queueIndex28\
    \ = new Array[Int](N)\n        val queueIndex29 = new Array[Int](N)\n        val\
    \ queueIndex30 = new Array[Int](N)\n        val queueIndex31 = new Array[Int](N)\n\
    \        val queueIndex32 = new Array[Int](N)\n        val queueIndex33 = new\
    \ Array[Int](N)\n        val queueIndex34 = new Array[Int](N)\n        val queueIndex35\
    \ = new Array[Int](N)\n        val queueIndex36 = new Array[Int](N)\n        val\
    \ queueIndex37 = new Array[Int](N)\n        val queueIndex38 = new Array[Int](N)\n\
    \        val queueIndex39 = new Array[Int](N)", "        val n = grid.size\n \
    \       val m = grid(0).size\n        val lst_A = new Array[Long](n)\n       \
    \ val lst_B = new Array[Long](m)\n        var i = 0\n        var j = 0\n     \
    \   var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n     \
    \   var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n     \
    \   var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n     \
    \   var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n     \
    \   var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n     \
    \   var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n     \
    \   var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n     \
    \   var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n     \
    \   var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n     \
    \   var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n     \
    \   var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n     \
    \   var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n     \
    \   var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n     \
    \   var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n     \
    \   var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n     \
    \   var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n     \
    \   var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n     \
    \   var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n     \
    \   var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n     \
    \   var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n     \
    \   var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n     \
    \   var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n     \
    \   var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n     \
    \   var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n     \
    \   var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n     \
    \   var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n     \
    \   var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n     \
    \   var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n     \
    \   var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n     \
    \   var k = 0\n", "        val N = grid.size\n        val m = mutable.HashMap.empty[Long,\
    \ List[Long]]\n        for (i <- 1 to N) {\n            for (j <- 1 to N) {\n\
    \                val key = grid((i - 1).toInt, (j - 1).toInt)\n              \
    \  if (m.contains(key)) {\n                    val list = m(key)\n           \
    \         list :+ grid((i - 1).toInt, (j - 1).toInt)\n                } else {\n\
    \                    val list = mutable.ArrayBuffer.empty[Long]\n            \
    \        list :+ grid((i - 1).toInt, (j - 1).toInt)\n                    m(key)\
    \ = list\n                }\n            }\n        }\n        val result = m.values.toList\n\
    \        result.sortWith((x, y) => x._1 < y._1)\n        result", "        val\
    \ n = grid.size\n        val m = grid(0).size\n        val visited = new mutable.HashSet[Long]\n\
    \        val result = new mutable.ListBuffer[Long]\n        val queue = new mutable.PriorityQueue[Long]((a,\
    \ b) => math.min(a, b))\n        val start = new mutable.HashSet[Long]\n     \
    \   val end = new mutable.HashSet[Long]\n        start.add(0)\n        end.add(0)\n\
    \        queue.add(0)\n        while(queue.nonEmpty) {\n            val cur =\
    \ queue.poll\n            val curRow = cur / m\n            val curCol = cur %\
    \ m\n            val curValue = grid(curRow)(curCol)\n            val curRowIndex\
    \ = curRow - 1\n            val curColIndex = curCol - 1\n            val curRowIndex2\
    \ = curRowIndex - 1\n            val curColIndex2 = curColIndex - 1\n        \
    \    val curRowIndex3 = curRowIndex - 1\n            val curColIndex3 = curColIndex\
    \ - 1\n            val curRowIndex4 = curRowIndex - 1\n            val curColIndex4\
    \ = curColIndex - 1\n            val curRowIndex5 = curRowIndex - 1\n        \
    \    val curColIndex5 = curColIndex - 1\n            val curRowIndex6 = curRowIndex\
    \ - 1\n            val curColIndex6 = curColIndex - 1\n            val curRowIndex7\
    \ = curRowIndex - 1\n            val curColIndex7 = curColIndex - 1\n        \
    \    val curRowIndex8 = curRowIndex - 1\n            val curColIndex8 = curColIndex\
    \ - 1\n            val curRowIndex9 = curRowIndex - 1\n            val curColIndex9\
    \ = curColIndex - 1\n            val curRowIndex10 = curRowIndex - 1\n       \
    \     val curColIndex10 = curColIndex - 1\n            val curRowIndex11 = curRowIndex\
    \ - 1\n            val curColIndex11 = curColIndex - 1\n            val curRowIndex12\
    \ = curRowIndex - 1\n            val curColIndex12 = curColIndex - 1\n       \
    \     val curRowIndex13 = curRowIndex - 1\n            val curColIndex13 = curColIndex\
    \ - 1\n            val curRowIndex14 = curRowIndex - 1\n            val curColIndex14\
    \ = curColIndex - 1\n            val curRowIndex15 = curRowIndex - 1\n       \
    \     val curColIndex15 = curColIndex - 1\n            val curRowIndex16 = curRowIndex\
    \ - 1\n            val curColIndex16 = curColIndex - 1\n            val curRowIndex17\
    \ = curRowIndex - 1\n            val ", "        val m = grid.length\n       \
    \ val n = grid(0).length\n        val visited = new mutable.HashSet[Long]()\n\
    \        val path = new mutable.ArrayList[Long]()\n        val lst_A = new mutable.ArrayList[Long]()\n\
    \        val lst_B = new mutable.ArrayList[Long]()\n        val lst_C = new mutable.ArrayList[Long]()\n\
    \        val lst_D = new mutable.ArrayList[Long]()\n        val lst_E = new mutable.ArrayList[Long]()\n\
    \        val lst_F = new mutable.ArrayList[Long]()\n        val lst_G = new mutable.ArrayList[Long]()\n\
    \        val lst_H = new mutable.ArrayList[Long]()\n        val lst_I = new mutable.ArrayList[Long]()\n\
    \        val lst_J = new mutable.ArrayList[Long]()\n        val lst_K = new mutable.ArrayList[Long]()\n\
    \        val lst_L = new mutable.ArrayList[Long]()\n        val lst_M = new mutable.ArrayList[Long]()\n\
    \        val lst_N = new mutable.ArrayList[Long]()\n        val lst_O = new mutable.ArrayList[Long]()\n\
    \        val lst_P = new mutable.ArrayList[Long]()\n        val lst_Q = new mutable.ArrayList[Long]()\n\
    \        val lst_R = new mutable.ArrayList[Long]()\n        val lst_S = new mutable.ArrayList[Long]()\n\
    \        val lst_T = new mutable.ArrayList[Long]()\n        val lst_U = new mutable.ArrayList[Long]()\n\
    \        val lst_V = new mutable.ArrayList[Long]()\n        val lst_W = new mutable.ArrayList[Long]()\n\
    \        val lst_X = new mutable.ArrayList[Long]()\n        val lst_Y = new mutable.ArrayList[Long]()\n\
    \        val lst_Z = new mutable.ArrayList[Long]()\n        val lst_AA = new mutable.ArrayList[Long]()\n\
    \        val lst_AB = new mutable.ArrayList[Long]()\n        val lst_AC = new\
    \ mutable.ArrayList[Long]()\n        val lst_AD = new mutable.ArrayList[Long]()\n\
    \        val lst_AE = new mutable.ArrayList[Long]()\n        val lst_AF = new\
    \ mutable.ArrayList[Long]()\n        val lst_AG = new mutable.ArrayList[Long]()\n\
    \        val lst_AH = new mutable.ArrayList[Long", "        val n = grid.size\n\
    \        val m = grid(0).size\n        val visited = new mutable.HashSet[Long]()\n\
    \        val result = new mutable.ArrayList[Long]()\n        val stack = new mutable.ArrayList[Long]()\n\
    \        val stack2 = new mutable.ArrayList[Long]()\n        val stack3 = new\
    \ mutable.ArrayList[Long]()\n        val stack4 = new mutable.ArrayList[Long]()\n\
    \        val stack5 = new mutable.ArrayList[Long]()\n        val stack6 = new\
    \ mutable.ArrayList[Long]()\n        val stack7 = new mutable.ArrayList[Long]()\n\
    \        val stack8 = new mutable.ArrayList[Long]()\n        val stack9 = new\
    \ mutable.ArrayList[Long]()\n        val stack10 = new mutable.ArrayList[Long]()\n\
    \        val stack11 = new mutable.ArrayList[Long]()\n        val stack12 = new\
    \ mutable.ArrayList[Long]()\n        val stack13 = new mutable.ArrayList[Long]()\n\
    \        val stack14 = new mutable.ArrayList[Long]()\n        val stack15 = new\
    \ mutable.ArrayList[Long]()\n        val stack16 = new mutable.ArrayList[Long]()\n\
    \        val stack17 = new mutable.ArrayList[Long]()\n        val stack18 = new\
    \ mutable.ArrayList[Long]()\n        val stack19 = new mutable.ArrayList[Long]()\n\
    \        val stack20 = new mutable.ArrayList[Long]()\n        val stack21 = new\
    \ mutable.ArrayList[Long]()\n        val stack22 = new mutable.ArrayList[Long]()\n\
    \        val stack23 = new mutable.ArrayList[Long]()\n        val stack24 = new\
    \ mutable.ArrayList[Long]()\n        val stack25 = new mutable.ArrayList[Long]()\n\
    \        val stack26 = new mutable.ArrayList[Long]()\n        val stack27 = new\
    \ mutable.ArrayList[Long]()\n        val stack28 = new mutable.ArrayList[Long]()\n\
    \        val stack29 = new mutable.ArrayList[Long]()\n        val stack30 = new\
    \ mutable.ArrayList[Long]()\n        val stack31 = new mutable.ArrayList[Long]()\n\
    \        val stack32 = new mutable.ArrayList[Long]()\n        val stack33 = new\
    \ mutable.ArrayList[Long]()\n        val stack34 = new mutable.ArrayList[Long]()\n\
    \        val stack35 = new mutable.ArrayList[Long]()\n        val stack36 = new\
    \ mutable.ArrayList[Long]()\n        val stack37", "        val N = grid.length\n\
    \        val m = grid.head\n        val n = grid.last\n        val list = mutable.ArrayBuffer.empty[Long]\n\
    \        val visited = mutable.HashSet.empty[Long]\n        val visitedList =\
    \ mutable.ArrayBuffer.empty[Long]\n        val visitedList2 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList3 = mutable.ArrayBuffer.empty[Long]\n        val visitedList4\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList5 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList6 = mutable.ArrayBuffer.empty[Long]\n        val visitedList7\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList8 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList9 = mutable.ArrayBuffer.empty[Long]\n        val visitedList10\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList11 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList12 = mutable.ArrayBuffer.empty[Long]\n        val visitedList13\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList14 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList15 = mutable.ArrayBuffer.empty[Long]\n        val visitedList16\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList17 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList18 = mutable.ArrayBuffer.empty[Long]\n        val visitedList19\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList20 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList21 = mutable.ArrayBuffer.empty[Long]\n        val visitedList22\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList23 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList24 = mutable.ArrayBuffer.empty[Long]\n        val visitedList25\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList26 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList27 = mutable.ArrayBuffer.empty[Long]\n        val visitedList28\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList29 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList30 = mutable.ArrayBuffer.empty[Long]\n        val ", " \
    \       val m = grid.length\n        val n = grid(0).length\n        val grid\
    \ = mutable.ArrayBuffer.empty[List[Long]]\n        val visited = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val queue = mutable.Queue[List[Long]]()\n        val lst_A = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_B = mutable.ArrayBuffer.empty[Long]\n        val lst_C = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_D = mutable.ArrayBuffer.empty[Long]\n        val lst_E = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_F = mutable.ArrayBuffer.empty[Long]\n        val lst_G = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_H = mutable.ArrayBuffer.empty[Long]\n        val lst_I = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_J = mutable.ArrayBuffer.empty[Long]\n        val lst_K = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_L = mutable.ArrayBuffer.empty[Long]\n        val lst_M = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_N = mutable.ArrayBuffer.empty[Long]\n        val lst_O = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_P = mutable.ArrayBuffer.empty[Long]\n        val lst_Q = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_R = mutable.ArrayBuffer.empty[Long]\n        val lst_S = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_T = mutable.ArrayBuffer.empty[Long]\n        val lst_U = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_V = mutable.ArrayBuffer.empty[Long]\n        val lst_W = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_X = mutable.ArrayBuffer.empty[Long]\n        val lst_Y = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_Z = mutable.ArrayBuffer.empty[Long]\n        val lst_A = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_B = mutable.ArrayBuffer.empty[Long]\n        val lst_C = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_D = mutable.ArrayBuffer.empty[Long]\n        val lst_E = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_F = mutable.ArrayBuffer.empty[Long]\n        val ", "       \
    \ val n = grid.length\n        val m = grid(0).length\n        val lst_A = new\
    \ Array[Long](k + 1)\n        val lst_B = new Array[Long](k + 1)\n        val\
    \ lst_C = new Array[Long](k + 1)\n        val lst_D = new Array[Long](k + 1)\n\
    \        val lst_E = new Array[Long](k + 1)\n        val lst_F = new Array[Long](k\
    \ + 1)\n        val lst_G = new Array[Long](k + 1)\n        val lst_H = new Array[Long](k\
    \ + 1)\n        val lst_I = new Array[Long](k + 1)\n        val lst_J = new Array[Long](k\
    \ + 1)\n        val lst_K = new Array[Long](k + 1)\n        val lst_L = new Array[Long](k\
    \ + 1)\n        val lst_M = new Array[Long](k + 1)\n        val lst_N = new Array[Long](k\
    \ + 1)\n        val lst_O = new Array[Long](k + 1)\n        val lst_P = new Array[Long](k\
    \ + 1)\n        val lst_Q = new Array[Long](k + 1)\n        val lst_R = new Array[Long](k\
    \ + 1)\n        val lst_S = new Array[Long](k + 1)\n        val lst_T = new Array[Long](k\
    \ + 1)\n        val lst_U = new Array[Long](k + 1)\n        val lst_V = new Array[Long](k\
    \ + 1)\n        val lst_W = new Array[Long](k + 1)\n        val lst_X = new Array[Long](k\
    \ + 1)\n        val lst_Y = new Array[Long](k + 1)\n        val lst_Z = new Array[Long](k\
    \ + 1)\n        val lst_A = Array.fill(k)((1L: Long))\n        val lst_B = Array.fill(k)((1L:\
    \ Long))\n        val lst_C = Array.fill(k)((1L: Long))\n        val lst_D = Array.fill(k)((1L:\
    \ Long))\n        val lst_E = Array.fill(k)((1L: Long))\n        val lst_F = Array.fill(k)((1L:\
    \ Long))\n        val lst_G = Array.fill(k)((1L: Long))\n        val lst_H = Array.fill(k)((1L:\
    \ Long))\n        val lst_I = Array.fill(k)((1L: Long))\n        val lst_J = Array.fill(k)((1L:\
    \ Long))\n        val lst_K = Array.fill(", "        val m = grid.size\n     \
    \   val n = grid(0).size\n        val lst_A = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_B = mutable.ArrayBuffer.empty[Long]\n        val lst_C = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_D = mutable.ArrayBuffer.empty[Long]\n        val lst_E = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_F = mutable.ArrayBuffer.empty[Long]\n        val lst_G = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_H = mutable.ArrayBuffer.empty[Long]\n        val lst_I = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_J = mutable.ArrayBuffer.empty[Long]\n        val lst_K = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_L = mutable.ArrayBuffer.empty[Long]\n        val lst_M = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_N = mutable.ArrayBuffer.empty[Long]\n        val lst_O = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_P = mutable.ArrayBuffer.empty[Long]\n        val lst_Q = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_R = mutable.ArrayBuffer.empty[Long]\n        val lst_S = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_T = mutable.ArrayBuffer.empty[Long]\n        val lst_U = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_V = mutable.ArrayBuffer.empty[Long]\n        val lst_W = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_X = mutable.ArrayBuffer.empty[Long]\n        val lst_Y = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_Z = mutable.ArrayBuffer.empty[Long]\n        val lst_AA = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_AB = mutable.ArrayBuffer.empty[Long]\n        val lst_AC = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_AD = mutable.ArrayBuffer.empty[Long]\n        val lst_AE = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_AF = mutable.ArrayBuffer.empty[Long]\n        val lst_AG = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_AH = mutable.ArrayBuffer.empty[Long]\n        val lst_AI"]
stop_tokens:
- "\n    }\n"
