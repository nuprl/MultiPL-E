name: HumanEval_129_minPath
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a grid with N rows and N columns (N >= 2) and a positive integer k,\
  \ \n    // each cell of the grid contains a value. Every integer in the range [1,\
  \ N * N]\n    // inclusive appears exactly once on the cells of the grid.\n    //\
  \ You have to find the minimum path of length k in the grid. You can start\n   \
  \ // from any cell, and in each step you can move to any of the neighbor cells,\n\
  \    // in other words, you can go to cells which share an edge with you current\n\
  \    // cell.\n    // Please note that a path of length k means visiting exactly\
  \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
  \    // A path A (of length k) is considered less than a path B (of length k) if\n\
  \    // after making the ordered lists of the values on the cells that A and B go\n\
  \    // through (let's call them lst_A and lst_B), lst_A is lexicographically less\n\
  \    // than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n\
  \    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    //\
  \ lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is unique.\n   \
  \ // Return an ordered list of the values on the cells that the minimum path go\
  \ through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6], [7,8,9]],\
  \ k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6], [7,8,2]],\
  \ k = 1\n    // Output: [1]\n    def minPath(grid : List[List[Long]], k : Long)\
  \ : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
  \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
  \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
  \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
  \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
  \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
  \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
  \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
  \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
  \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
  \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
  \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
  \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
  \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
  \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
  \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
  \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
  \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
  \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
  \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
  \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
  \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
  \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
  \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
  \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong))));\n\
  \    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong, 4l.toLong),\
  \ List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong, 8l.toLong,\
  \ 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
  \ 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
  \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
  \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
  \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
  \ 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 3l.toLong),\
  \ List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong, 3l.toLong,\
  \ 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n\
  \    }\n\n}\n"
completions: ["        val n = grid.length\n        val m = grid(0).length\n     \
    \   val result = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n\
    \        val visitedCount = new Array[Int](k)\n        val visitedCountTemp =\
    \ new Array[Int](k)\n        val visitedCountTemp2 = new Array[Int](k)\n     \
    \   val visitedCountTemp3 = new Array[Int](k)\n        val visitedCountTemp4 =\
    \ new Array[Int](k)\n        val visitedCountTemp5 = new Array[Int](k)\n     \
    \   val visitedCountTemp6 = new Array[Int](k)\n        val visitedCountTemp7 =\
    \ new Array[Int](k)\n        val visitedCountTemp8 = new Array[Int](k)\n     \
    \   val visitedCountTemp9 = new Array[Int](k)\n        val visitedCountTemp10\
    \ = new Array[Int](k)\n        val visitedCountTemp11 = new Array[Int](k)\n  \
    \      val visitedCountTemp12 = new Array[Int](k)\n        val visitedCountTemp13\
    \ = new Array[Int](k)\n        val visitedCountTemp14 = new Array[Int](k)\n  \
    \      val visitedCountTemp15 = new Array[Int](k)\n        val visitedCountTemp16\
    \ = new Array[Int](k)\n        val visitedCountTemp17 = new Array[Int](k)\n  \
    \      val visitedCountTemp18 = new Array[Int](k)\n        val visitedCountTemp19\
    \ = new Array[Int](k)\n        val visitedCountTemp20 = new Array[Int](k)\n  \
    \      val visitedCountTemp21 = new Array[Int](k)\n        val visitedCountTemp22\
    \ = new Array[Int](k)\n        val visitedCountTemp23 = new Array[Int](k)\n  \
    \      val visitedCountTemp24 = new Array[Int](k)\n        val visitedCountTemp25\
    \ = new Array[Int](k)\n        val visitedCountTemp26 = new Array[Int](k)\n  \
    \      val visitedCountTemp27 = new Array[Int](k)\n        val visitedCountTemp28\
    \ = new Array[Int](k)\n        val visitedCountTemp29 = new Array[Int](k)\n  \
    \      val visitedCountTemp30 = new Array[Int](k)\n        val visitedCountTemp31\
    \ = new Array[Int](k)\n        val visitedCountTemp32 = new Array[Int](k)\n  \
    \      val visitedCountTemp33 = new Array[Int](k)\n        val visite", "    \
    \    val N = grid.length\n        val m = N * N\n        val lst_A = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_B = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_C = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_D\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_E = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_F = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_G = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_H\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_I = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_J = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_K = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_L\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_M = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_N = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_O = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_P\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_Q = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_R = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_S = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_T\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_U = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_V = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_W = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_X\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_Y = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_Z = scala.collection.mutable.ArrayBuffer.empty[Long]\n      \
    \  val lst_A = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_B\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val lst_C = scala.collection.mutable.ArrayBuffer.empty",
  "        val n = grid.length\n        val m = grid(0).length\n        val result\
    \ = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n        var\
    \ min = 0L\n        var index = 0\n        var minIndex = 0\n        var minPath\
    \ = 0L\n        val visitedIndex = new Array[Int](k)\n        var index2 = 0\n\
    \        var minIndex2 = 0\n        var minPath2 = 0L\n        val visitedIndex2\
    \ = new Array[Int](k)\n        var index3 = 0\n        var minIndex3 = 0\n   \
    \     var minPath3 = 0L\n        val visitedIndex3 = new Array[Int](k)\n     \
    \   var index4 = 0\n        var minIndex4 = 0\n        var minPath4 = 0L\n   \
    \     val visitedIndex4 = new Array[Int](k)\n        var index5 = 0\n        var\
    \ minIndex5 = 0\n        var minPath5 = 0L\n        val visitedIndex5 = new Array[Int](k)\n\
    \        var index6 = 0\n        var minIndex6 = 0\n        var minPath6 = 0L\n\
    \        val visitedIndex6 = new Array[Int](k)\n        var index7 = 0\n     \
    \   var minIndex7 = 0\n        var minPath7 = 0L\n        val visitedIndex7 =\
    \ new Array[Int](k)\n        var index8 = 0\n        var minIndex8 = 0\n     \
    \   var minPath8 = 0L\n        val visitedIndex8 = new Array[Int](k)\n       \
    \ var index9 = 0\n        var minIndex9 = 0\n        var minPath9 = 0L\n     \
    \   val visitedIndex9 = new Array[Int](k)\n        var index10 = 0\n        var\
    \ minIndex10 = 0\n        var minPath10 = 0L\n        val visitedIndex10 = new\
    \ Array[Int](k)\n        var index11 = 0\n        var minIndex11 = 0\n       \
    \ var minPath11 = 0L\n        val visitedIndex11 = new Array[Int](k)\n       \
    \ var index12 = 0\n        var minIndex12 = 0\n        var minPath12 = 0L\n  \
    \      val visitedIndex12 = new Array[Int](k)\n        var index13 = 0\n     \
    \   var minIndex13 = 0\n        var minPath13 = 0L\n        val visitedIndex13\
    \ = new Array[Int](k)\n        var index14 = 0\n        var minIndex14 = 0\n \
    \       var minPath14 = 0L\n        val visitedIndex14 = new Array[Int](k)\n \
    \       var index15 = 0\n        var minIndex15 = 0\n        var minPath15 = 0L\n\
    \        val visitedIndex15 = new Array[Int](k)\n        var index16 = 0\n   \
    \     var minIndex16 = 0\n        var ", "        val N = grid.size\n        val\
    \ lst_A = grid.map(_.toList).toList\n        val lst_B = grid.map(_.toList).reverse.toList\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => x._1 compare x._2)\n        val\
    \ lst_D = lst_A.zip(lst_B).map(x => x._1 compare x._2).reverse\n        val lst_E\
    \ = lst_A.zip(lst_B).map(x => x._1 compare x._2).reverse\n        val lst_F =\
    \ lst_A.zip(lst_B).map(x => x._1 compare x._2).reverse\n        val lst_G = lst_A.zip(lst_B).map(x\
    \ => x._1 compare x._2).reverse\n        val lst_H = lst_A.zip(lst_B).map(x =>\
    \ x._1 compare x._2).reverse\n        val lst_I = lst_A.zip(lst_B).map(x => x._1\
    \ compare x._2).reverse\n        val lst_J = lst_A.zip(lst_B).map(x => x._1 compare\
    \ x._2).reverse\n        val lst_K = lst_A.zip(lst_B).map(x => x._1 compare x._2).reverse\n\
    \        val lst_L = lst_A.zip(lst_B).map(x => x._1 compare x._2).reverse\n  \
    \      val lst_M = lst_A.zip(lst_B).map(x => x._1 compare x._2).reverse\n    \
    \    val lst_N = lst_A.zip(lst_B).map(x => x._1 compare x._2).reverse\n      \
    \  val lst_O = lst_A.zip(lst_B).map(x => x._1 compare x._2).reverse\n        val\
    \ lst_P = lst_A.zip(lst_B).map(x => x._1 compare x._2).reverse\n        val lst_Q\
    \ = lst_A.zip(lst_B).map(x => x._1 compare x._2).reverse\n        val lst_R =\
    \ lst_A.zip(lst_B).map(x => x._1 compare x._2).reverse\n        val lst_S = lst_A.zip(lst_B).map(x\
    \ => x._1 compare x._2).reverse\n        val lst_T = lst_A.zip(lst_B).map(x =>\
    \ x._1 compare x._2).reverse\n        val lst_U = lst_A.zip(lst_B).map(x => x._1\
    \ compare x.", "        val m = grid.length\n        val n = grid(0).length\n\
    \        val result = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n\
    \        val visitedIndex = new Array[Int](k)\n        val visitedIndexIndex =\
    \ new Array[Int](k)\n        val visitedIndexIndexIndex = new Array[Int](k)\n\
    \        val visitedIndexIndexIndexIndex = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndex = new\
    \ Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndex = new\
    \ Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndex =\
    \ new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndex",
  "        val grid = mutable.ArrayBuffer.empty[List[Long]]\n        val visited =\
    \ mutable.ArrayBuffer.empty[Boolean]\n        val visitedList = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        val visitedList2 = mutable.ArrayBuffer.empty[List[Long]]\n        val\
    \ visitedList3 = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList4\
    \ = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList5 = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        val visitedList6 = mutable.ArrayBuffer.empty[List[Long]]\n        val\
    \ visitedList7 = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList8\
    \ = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList9 = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        val visitedList10 = mutable.ArrayBuffer.empty[List[Long]]\n        val\
    \ visitedList11 = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList12\
    \ = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList13 = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        val visitedList14 = mutable.ArrayBuffer.empty[List[Long]]\n        val\
    \ visitedList15 = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList16\
    \ = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList17 = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        val visitedList18 = mutable.ArrayBuffer.empty[List[Long]]\n        val\
    \ visitedList19 = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList20\
    \ = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList21 = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        val visitedList22 = mutable.ArrayBuffer.empty[List[Long]]\n        val\
    \ visitedList23 = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList24\
    \ = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList25 = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        val visitedList26 = mutable.ArrayBuffer.empty[List[Long]]\n        val\
    \ visitedList27 = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList28\
    \ = mutable.ArrayBuffer.empty[List[Long]]\n        val visitedList29 = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        val visitedList30", "        val grid = mutable.ArrayBuffer(grid)\n \
    \       val visited = mutable.HashSet[Long]()\n        val result = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize2 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize3 = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize4\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize5 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize6 = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize7\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize8 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize9 = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize10\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize11 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize12 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ visitedListSize13 = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize14\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize15 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize16 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ visitedListSize17 = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize18\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize19 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize20 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ visitedListSize21 = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize22\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize23 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize24 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ visitedListSize25 = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize26\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize27 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize28 = mutable.ArrayBuffer.empty[Long]\n", "       \
    \ val m = grid.length\n        val n = grid(0).length\n        val result = new\
    \ mutable.ListBuffer[Long]()\n        val visited = new mutable.HashSet[Long]()\n\
    \        val visitedList = new mutable.ListBuffer[Long]()\n        val visitedList2\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList3 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList4 = new mutable.ListBuffer[Long]()\n        val visitedList5\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList6 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList7 = new mutable.ListBuffer[Long]()\n        val visitedList8\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList9 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList10 = new mutable.ListBuffer[Long]()\n        val visitedList11\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList12 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList13 = new mutable.ListBuffer[Long]()\n        val visitedList14\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList15 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList16 = new mutable.ListBuffer[Long]()\n        val visitedList17\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList18 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList19 = new mutable.ListBuffer[Long]()\n        val visitedList20\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList21 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList22 = new mutable.ListBuffer[Long]()\n        val visitedList23\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList24 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList25 = new mutable.ListBuffer[Long]()\n        val visitedList26\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList27 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList28 = new mutable.ListBuffer[Long]()\n        val visitedList29\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList30 = new mut", "  \
    \      val n = grid.size\n        val m = grid(0).size\n        val grid = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        val visited = mutable.HashSet.empty[Long]\n        val visitedList =\
    \ mutable.ArrayBuffer.empty[Long]\n        val visitedList = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList = mutable.ArrayBuffer.empty[Long]\n        val visitedList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList = mutable.ArrayBuffer.empty[Long]\n        val visitedList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList = mutable.ArrayBuffer.empty[Long]\n        val visitedList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList = mutable.ArrayBuffer.empty[Long]\n        val visitedList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList = mutable.ArrayBuffer.empty[Long]\n        val visitedList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList = mutable.ArrayBuffer.empty[Long]\n        val visitedList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList = mutable.ArrayBuffer.empty[Long]\n        val visitedList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList = mutable.ArrayBuffer.empty[Long]\n        val visitedList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList = mutable.ArrayBuffer.empty[Long]\n        val visitedList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList = mutable.ArrayBuffer.empty[Long]\n        val visitedList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList = mutable.ArrayBuffer.empty[Long]\n        val visitedList\
    \ = mutable.ArrayBuffer.empty[", "        val m = grid.length\n        val n =\
    \ grid(0).length\n        val result = new Array[Long](k)\n        var index =\
    \ 0\n        var min = 0L\n        var minIndex = 0\n        var minValue = 0L\n\
    \        var minValueIndex = 0\n        var minValueIndex2 = 0\n        var minValueIndex3\
    \ = 0\n        var minValueIndex4 = 0\n        var minValueIndex5 = 0\n      \
    \  var minValueIndex6 = 0\n        var minValueIndex7 = 0\n        var minValueIndex8\
    \ = 0\n        var minValueIndex9 = 0\n        var minValueIndex10 = 0\n     \
    \   var minValueIndex11 = 0\n        var minValueIndex12 = 0\n        var minValueIndex13\
    \ = 0\n        var minValueIndex14 = 0\n        var minValueIndex15 = 0\n    \
    \    var minValueIndex16 = 0\n        var minValueIndex17 = 0\n        var minValueIndex18\
    \ = 0\n        var minValueIndex19 = 0\n        var minValueIndex20 = 0\n    \
    \    var minValueIndex21 = 0\n        var minValueIndex22 = 0\n        var minValueIndex23\
    \ = 0\n        var minValueIndex24 = 0\n        var minValueIndex25 = 0\n    \
    \    var minValueIndex26 = 0\n        var minValueIndex27 = 0\n        var minValueIndex28\
    \ = 0\n        var minValueIndex29 = 0\n        var minValueIndex30 = 0\n    \
    \    var minValueIndex31 = 0\n        var minValueIndex32 = 0\n        var minValueIndex33\
    \ = 0\n        var minValueIndex34 = 0\n        var minValueIndex35 = 0\n    \
    \    var minValueIndex36 = 0\n        var minValueIndex37 = 0\n        var minValueIndex38\
    \ = 0\n        var minValueIndex39 = 0\n        var minValueIndex40 = 0\n    \
    \    var minValueIndex41 = 0\n        var minValueIndex42 = 0\n        var minValueIndex43\
    \ = 0\n        var minValueIndex44 = 0\n        var minValueIndex45 = 0\n    \
    \    var minValueIndex46 = 0\n        var minValueIndex47 = 0\n        var minValueIndex48\
    \ = 0\n        var minValueIndex49 = 0\n        var minValueIndex50 = 0\n    \
    \    var minValueIndex51 = 0\n        var minValueIndex52 = 0\n        var minValueIndex53\
    \ = 0\n        var minValueIndex54 = 0\n        var minValueIndex55 = 0\n    \
    \    var minValueIndex56 = 0\n        var minValueIndex57 = 0\n        var minValueIndex58\
    \ = 0\n        var minValueIndex59 = 0\n        var minValueIndex60 = 0\n    \
    \    var minValueIndex61 = 0\n        var minValueIndex62 = 0\n        var minValueIndex63\
    \ = 0\n        var minValueIndex64 = 0\n        var minValueIndex65 = 0\n    \
    \    var minValueIndex66 = 0\n        var minValueIndex67 = 0\n        var ",
  "        val n = grid.length\n        val m = grid(0).length\n        val grid =\
    \ mutable.ArrayBuffer.empty[List[Long]](m)\n        for (i <- 0 until n) {\n \
    \           val row = grid\n            val col = grid.map(_.toList)\n       \
    \     val rowIndex = i\n            val colIndex = i\n            val rowValue\
    \ = rowIndex * n + i\n            val colValue = colIndex * n + i\n          \
    \  row += List(rowValue)\n            col += List(colValue)\n        }\n     \
    \   val visited = mutable.HashSet[Long]()\n        val ans = mutable.ArrayBuffer.empty[Long]\n\
    \        val minPath = mutable.ArrayBuffer.empty[Long]\n        val minPathIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val minPathLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val minPathLength = mutable.ArrayBuffer.empty[Int]\n        val minPathLength\
    \ = mutable.ArrayBuffer.empty[Int]\n        val minPathLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val minPathLength = mutable.ArrayBuffer.empty[Int]\n        val minPathLength\
    \ = mutable.ArrayBuffer.empty[Int]\n        val minPathLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val minPathLength = mutable.ArrayBuffer.empty[Int]\n        val minPathLength\
    \ = mutable.ArrayBuffer.empty[Int]\n        val minPathLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val minPathLength = mutable.ArrayBuffer.empty[Int]\n        val minPathLength\
    \ = mutable.ArrayBuffer.empty[Int]\n        val minPathLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val minPathLength = mutable.ArrayBuffer.empty[Int]\n        val minPathLength\
    \ = mutable.ArrayBuffer.empty[Int]\n        val minPathLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val minPathLength = mutable.ArrayBuffer.empty[Int]\n        val minPathLength\
    \ = mutable.ArrayBuffer.empty[Int]\n        val minPathLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val minPathLength = mutable.ArrayBuffer.empty[Int]\n        val minPathLength\
    \ = mutable.ArrayBuffer.empty[Int]\n        val minPathLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val minPathLength = mutable.ArrayBuffer.empty[Int]\n        val minPathLength\
    \ = mutable.ArrayBuffer.empty[Int]\n        val minPathLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val minPathLength = mutable.ArrayBuffer.empty[Int]", "        val n =\
    \ grid.length\n        val m = grid(0).length\n        val lst_A = Array.ofDim[Long](k)\n\
    \        val lst_B = Array.ofDim[Long](k)\n        val lst_C = Array.ofDim[Long](k)\n\
    \        val lst_D = Array.ofDim[Long](k)\n        val lst_E = Array.ofDim[Long](k)\n\
    \        val lst_F = Array.ofDim[Long](k)\n        val lst_G = Array.ofDim[Long](k)\n\
    \        val lst_H = Array.ofDim[Long](k)\n        val lst_I = Array.ofDim[Long](k)\n\
    \        val lst_J = Array.ofDim[Long](k)\n        val lst_K = Array.ofDim[Long](k)\n\
    \        val lst_L = Array.ofDim[Long](k)\n        val lst_M = Array.ofDim[Long](k)\n\
    \        val lst_N = Array.ofDim[Long](k)\n        val lst_O = Array.ofDim[Long](k)\n\
    \        val lst_P = Array.ofDim[Long](k)\n        val lst_Q = Array.ofDim[Long](k)\n\
    \        val lst_R = Array.ofDim[Long](k)\n        val lst_S = Array.ofDim[Long](k)\n\
    \        val lst_T = Array.ofDim[Long](k)\n        val lst_U = Array.ofDim[Long](k)\n\
    \        val lst_V = Array.ofDim[Long](k)\n        val lst_W = Array.ofDim[Long](k)\n\
    \        val lst_X = Array.ofDim[Long](k)\n        val lst_Y = Array.ofDim[Long](k)\n\
    \        val lst_Z = Array.ofDim[Long](k)\n        val lst_A = Array.ofDim[Long](k)\n\
    \        val lst_B = Array.ofDim[Long](k)\n        val lst_C = Array.ofDim[Long](k)\n\
    \        val lst_D = Array.ofDim[Long](k)\n        val lst_E = Array.ofDim[Long](k)\n\
    \        val lst_F = Array.ofDim[Long](k)\n        val lst_G = Array.ofDim[Long](k)\n\
    \        val lst_H = Array.ofDim[Long](k)\n        val lst_I = Array.ofDim[Long](k)\n\
    \        val lst_J = Array.ofDim[Long](k)\n        val lst_K = Array.ofDim[Long](k)\n\
    \        val lst_", "        val grid = mutable.ArrayBuffer(grid)\n        val\
    \ visited = mutable.HashSet[Long]()\n        val result = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedCount = mutable.HashSet[Long]()\n        val resultCount =\
    \ mutable.HashSet[Long]()\n        val visitedCount2 = mutable.HashSet[Long]()\n\
    \        val resultCount2 = mutable.HashSet[Long]()\n        val visitedCount3\
    \ = mutable.HashSet[Long]()\n        val resultCount3 = mutable.HashSet[Long]()\n\
    \        val visitedCount4 = mutable.HashSet[Long]()\n        val resultCount4\
    \ = mutable.HashSet[Long]()\n        val visitedCount5 = mutable.HashSet[Long]()\n\
    \        val resultCount5 = mutable.HashSet[Long]()\n        val visitedCount6\
    \ = mutable.HashSet[Long]()\n        val resultCount6 = mutable.HashSet[Long]()\n\
    \        val visitedCount7 = mutable.HashSet[Long]()\n        val resultCount7\
    \ = mutable.HashSet[Long]()\n        val visitedCount8 = mutable.HashSet[Long]()\n\
    \        val resultCount8 = mutable.HashSet[Long]()\n        val visitedCount9\
    \ = mutable.HashSet[Long]()\n        val resultCount9 = mutable.HashSet[Long]()\n\
    \        val visitedCount10 = mutable.HashSet[Long]()\n        val resultCount10\
    \ = mutable.HashSet[Long]()\n        val visitedCount11 = mutable.HashSet[Long]()\n\
    \        val resultCount11 = mutable.HashSet[Long]()\n        val visitedCount12\
    \ = mutable.HashSet[Long]()\n        val resultCount12 = mutable.HashSet[Long]()\n\
    \        val visitedCount13 = mutable.HashSet[Long]()\n        val resultCount13\
    \ = mutable.HashSet[Long]()\n        val visitedCount14 = mutable.HashSet[Long]()\n\
    \        val resultCount14 = mutable.HashSet[Long]()\n        val visitedCount15\
    \ = mutable.HashSet[Long]()\n        val resultCount15 = mutable.HashSet[Long]()\n\
    \        val visitedCount16 = mutable.HashSet[Long]()\n        val resultCount16\
    \ = mutable.HashSet[Long]()\n        val visitedCount17 = ", "        val m =\
    \ grid.size\n        val n = grid(0).size\n        val path = new Array[Long](k)\n\
    \        val visited = new Array[Boolean](k)\n        val stack = new Array[Long](k)\n\
    \        val lst_A = new Array[Long](k)\n        val lst_B = new Array[Long](k)\n\
    \        val lst_C = new Array[Long](k)\n        val lst_D = new Array[Long](k)\n\
    \        val lst_E = new Array[Long](k)\n        val lst_F = new Array[Long](k)\n\
    \        val lst_G = new Array[Long](k)\n        val lst_H = new Array[Long](k)\n\
    \        val lst_I = new Array[Long](k)\n        val lst_J = new Array[Long](k)\n\
    \        val lst_K = new Array[Long](k)\n        val lst_L = new Array[Long](k)\n\
    \        val lst_M = new Array[Long](k)\n        val lst_N = new Array[Long](k)\n\
    \        val lst_O = new Array[Long](k)\n        val lst_P = new Array[Long](k)\n\
    \        val lst_Q = new Array[Long](k)\n        val lst_R = new Array[Long](k)\n\
    \        val lst_S = new Array[Long](k)\n        val lst_T = new Array[Long](k)\n\
    \        val lst_U = new Array[Long](k)\n        val lst_V = new Array[Long](k)\n\
    \        val lst_W = new Array[Long](k)\n        val lst_X = new Array[Long](k)\n\
    \        val lst_Y = new Array[Long](k)\n        val lst_Z = new Array[Long](k)\n\
    \        val lst_AA = new Array[Long](k)\n        val lst_AB = new Array[Long](k)\n\
    \        val lst_AC = new Array[Long](k)\n        val lst_AD = new Array[Long](k)\n\
    \        val lst_AE = new Array[Long](k)\n        val lst_AF = new Array[Long](k)\n\
    \        val lst_AG = new Array[Long](k)\n        val lst_AH = new Array[Long](k)\n\
    \        val lst_AI = new Array[Long](k)\n        val lst_AJ = new Array[Long](k)\n\
    \        val lst_AK = new Array[Long](k)\n        val lst_AL = new Array[Long](k)\n\
    \        val lst_AM = new Array[Long](k)\n", "        val N = grid.length\n  \
    \      val m = grid.head\n        val n = grid.last\n        val lst_A = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_B = mutable.ArrayBuffer.empty[Long]\n        var i = 0\n    \
    \    var j = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0\n    \
    \    var k = 0\n        var k = 0\n        var k = 0\n        var k = 0", "  \
    \      val N = grid.length\n        val m = N * N\n        val lst_A = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_B = mutable.ArrayBuffer.empty[Long]\n        val lst_C = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_D = mutable.ArrayBuffer.empty[Long]\n        val lst_E = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_F = mutable.ArrayBuffer.empty[Long]\n        val lst_G = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_H = mutable.ArrayBuffer.empty[Long]\n        val lst_I = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_J = mutable.ArrayBuffer.empty[Long]\n        val lst_K = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_L = mutable.ArrayBuffer.empty[Long]\n        val lst_M = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_N = mutable.ArrayBuffer.empty[Long]\n        val lst_O = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_P = mutable.ArrayBuffer.empty[Long]\n        val lst_Q = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_R = mutable.ArrayBuffer.empty[Long]\n        val lst_S = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_T = mutable.ArrayBuffer.empty[Long]\n        val lst_U = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_V = mutable.ArrayBuffer.empty[Long]\n        val lst_W = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_X = mutable.ArrayBuffer.empty[Long]\n        val lst_Y = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_Z = mutable.ArrayBuffer.empty[Long]\n        val lst_A = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_B = mutable.ArrayBuffer.empty[Long]\n        val lst_C = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_D = mutable.ArrayBuffer.empty[Long]\n        val lst_E = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_F = mutable.ArrayBuffer.empty[Long]\n        val lst_G = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_H = mutable.ArrayBuffer.empty[Long]\n        val lst_I = mutable.ArrayBuffer.empty[",
  "        val n = grid.length\n        val m = grid(0).length\n        val visited\
    \ = new Array[Boolean](n)\n        val result = new Array[Long](k)\n        val\
    \ stack = new Array[Long](k)\n        val stackPointer = 0\n        var minPath\
    \ = 0\n        var minPathIndex = 0\n        var minPathValue = 0L\n        var\
    \ minPathValueIndex = 0\n        var minPathValueIndex2 = 0\n        var minPathValueIndex3\
    \ = 0\n        var minPathValueIndex4 = 0\n        var minPathValueIndex5 = 0\n\
    \        var minPathValueIndex6 = 0\n        var minPathValueIndex7 = 0\n    \
    \    var minPathValueIndex8 = 0\n        var minPathValueIndex9 = 0\n        var\
    \ minPathValueIndex10 = 0\n        var minPathValueIndex11 = 0\n        var minPathValueIndex12\
    \ = 0\n        var minPathValueIndex13 = 0\n        var minPathValueIndex14 =\
    \ 0\n        var minPathValueIndex15 = 0\n        var minPathValueIndex16 = 0\n\
    \        var minPathValueIndex17 = 0\n        var minPathValueIndex18 = 0\n  \
    \      var minPathValueIndex19 = 0\n        var minPathValueIndex20 = 0\n    \
    \    var minPathValueIndex21 = 0\n        var minPathValueIndex22 = 0\n      \
    \  var minPathValueIndex23 = 0\n        var minPathValueIndex24 = 0\n        var\
    \ minPathValueIndex25 = 0\n        var minPathValueIndex26 = 0\n        var minPathValueIndex27\
    \ = 0\n        var minPathValueIndex28 = 0\n        var minPathValueIndex29 =\
    \ 0\n        var minPathValueIndex30 = 0\n        var minPathValueIndex31 = 0\n\
    \        var minPathValueIndex32 = 0\n        var minPathValueIndex33 = 0\n  \
    \      var minPathValueIndex34 = 0\n        var minPathValueIndex35 = 0\n    \
    \    var minPathValueIndex36 = 0\n        var minPathValueIndex37 = 0\n      \
    \  var minPathValueIndex38 = 0\n        var minPathValueIndex39 = 0\n        var\
    \ minPathValueIndex40 = 0\n        var minPathValueIndex41 = 0\n        var minPathValueIndex42\
    \ = 0\n        var minPathValueIndex43 = 0\n        var minPathValueIndex44 =\
    \ 0\n        var minPathValueIndex45 = 0\n        var minPathValueIndex46 = 0\n\
    \        var minPathValueIndex47 = 0\n        var minPathValueIndex48 = 0\n  \
    \      var minPathValueIndex49 = 0\n        var minPathValueIndex50 = 0\n    \
    \    var minPathValueIndex51 = 0\n        var minPathValueIndex52 = 0\n      \
    \  var minPathValueIndex53 = 0\n        var minPathValueIndex54 = 0\n        var\
    \ minPathValueIndex55 = 0\n        var minPathValueIndex", "        val m = grid.size\n\
    \        val n = grid(0).size\n        val result = new Array[Long](k)\n     \
    \   val visited = new Array[Boolean](k)\n        val stack = new Array[Int](k)\n\
    \        val stackIndex = new Array[Int](k)\n        val stackIndexIndex = new\
    \ Array[Int](k)\n        val stackIndexIndexIndex = new Array[Int](k)\n      \
    \  val stackIndexIndexIndexIndex = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n  \
    \      val stackIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = new\
    \ Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array", "        val m = grid.length\n        val n = grid(0).length\n\
    \        val grid = mutable.ArrayBuffer.empty[List[Long]](m)\n        for (i <-\
    \ 0 until m) {\n            val row = grid(i)\n            val col = grid(0).zipWithIndex.filter(_._1\
    \ == i).map(_._2).max\n            row += col\n            grid += row\n     \
    \   }\n        val visited = mutable.ArrayBuffer.empty[Boolean](m)\n        val\
    \ result = mutable.ArrayBuffer.empty[Long]\n        val visitedList = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val resultList = mutable.ArrayBuffer.empty[Long]\n        val visitedListList\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val resultListList = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListListList = mutable.ArrayBuffer.empty[Boolean](m)\n   \
    \     val resultListListList = mutable.ArrayBuffer.empty[Long]\n        val visitedListListListList\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val resultListListListList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListListListListList =\
    \ mutable.ArrayBuffer.empty[Boolean](m)\n        val resultListListListListList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListListListListListList\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val resultListListListListListList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListListListListListListList\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val resultListListListListListListList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListListListListListListListList\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val resultListListListListListListListList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListListListListListListListListList\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val resultListListListListListListListListList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListListListListListListListListList\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val resultListListListListListListListListListList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListListListListListListListListListList\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val resultListListListListListListListListListList\
    \ = mutable.ArrayBuffer.empty[", "        val N = grid.length\n        val M =\
    \ grid(0).length\n        val result = new Array[Long](k)\n        val visited\
    \ = new Array[Boolean](k)\n        val stack = new Array[Int](k)\n        val\
    \ stackSize = new Array[Int](k)\n        val stackIndex = new Array[Int](k)\n\
    \        val stackPointer = new Array[Int](k)\n        val stackPointerIndex =\
    \ new Array[Int](k)\n        val stackPointerPointer = new Array[Int](k)\n   \
    \     val stackPointerPointerIndex = new Array[Int](k)\n        val stackPointerPointerPointer\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerIndex = new Array[Int](k)\n\
    \        val stackPointerPointerPointerPointer = new Array[Int](k)\n        val\
    \ stackPointerPointerPointerPointerIndex = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointer\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerIndex = new\
    \ Array[Int](k)\n        val stackPointerPointerPointerPointerPointer = new Array[Int](k)\n\
    \        val stackPointerPointerPointerPointerIndex = new Array[Int](k)\n    \
    \    val stackPointerPointerPointerPointerPointer = new Array[Int](k)\n      \
    \  val stackPointerPointerPointerPointerIndex = new Array[Int](k)\n        val\
    \ stackPointerPointerPointerPointerPointer = new Array[Int](k)\n        val stackPointerPointerPointerPointerIndex\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointer =\
    \ new Array[Int](k)\n        val stackPointerPointerPointerPointerIndex = new\
    \ Array[Int](k)\n        val stackPointerPointerPointerPointerPointer = new Array[Int](k)\n\
    \        val stackPointerPointerPointerPointerIndex = new Array[Int](k)\n    \
    \    val stackPointerPointerPointerPointerPointer = new Array[Int](k)\n      \
    \  val stackPointerPointerPointerPointerIndex = new Array[Int](k)\n        val\
    \ stackPointerPointerPointerPointerPointer = new Array[Int](k)\n        val stackPointerPointerPointerPointerIndex\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointer =\
    \ new Array[Int](k)\n        val stackPointerPointerPointerPointerPointerIndex\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointer =\
    \ new Array[Int](k)\n        val stackPointerPointerPointerPointerPointerIndex\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointerPointer\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointerIndex\
    \ = new Array[Int](k)\n        val stackPointerPointerPointerPointerPointer"]
stop_tokens:
- "\n    }\n"
