language: scala
name: HumanEval_134_check_if_last_char_is_a_letter
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.forall(_.isLetter)\n\
    \        val isNotWord = words.last.forall(_.contains(lastChar))\n        isLetter\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3y59tyrp.scala:17:44 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = words.last.forall(_.contains(lastChar))\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  value contains is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.toString.isLetter\n\
    \        val lastCharIsNotWord = words.last.forall(_.toString.isLetter)\n    \
    \    lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpky2sdqi3.scala:16:49 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsLetter\e[0m =\
    \ lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                          \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \        value isLetter is not a member of String\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpky2sdqi3.scala:17:61 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m = words.last.forall(_.toString.isLetter)\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.matches(\"[a-zA-Z]+\"\
    )\n        !isLetter\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpc2suqrgx.scala:15)\n\tat Problem$.main(tmpc2suqrgx.scala:20)\n\
    \tat Problem.main(tmpc2suqrgx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastWord\
    \ = words(words.length-1)\n        val lastChar = lastWord.last\n        val isLetter\
    \ = lastChar.toString.isLetter\n        !isLetter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpym97c9_8.scala:17:41 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misLetter\e[0m = lastChar.toString.isLetter\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       value isLetter is not a member of String\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3up1_2m4.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val lastCharIsLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val lastCharIsNotWord = lastChar\
    \ != ' ' && lastChar != '\\t'\n        lastCharIsLetter && lastCharIsNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpabtx0qpf.scala:20)\n\tat Problem.main(tmpabtx0qpf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3up1_2m4.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val lastCharIsLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val lastCharIsNotWord = lastChar\
    \ != ' ' && lastChar != '-' && lastChar != '_'\n        lastCharIsLetter && lastCharIsNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbbkeoygj.scala:20)\n\tat Problem.main(tmpbbkeoygj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastWord\
    \ = words(words.length-1)\n        val lastChar = lastWord.charAt(lastWord.length-1)\n\
    \        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n        !isLetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp715rounv.scala:22)\n\tat Problem.main(tmp715rounv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \").toList\n     \
    \   val lastChar = words(txt.length-1)\n        val lastCharIsLetter = lastChar.toString.isLetter\n\
    \        val lastCharIsNotWord = words.last.contains(lastChar)\n        lastCharIsLetter\
    \ && !lastCharIsNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpss2vp70g.scala:16:49 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsLetter\e[0m =\
    \ lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                          \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \        value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \").toList\n     \
    \   val lastWord = words(words.length-1)\n        val lastChar = lastWord.last\n\
    \        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n        !isLetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi006vy6b.scala:22)\n\tat Problem.main(tmpi006vy6b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3up1_2m4.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val lastCharIsLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val lastCharIsNotWord = lastChar\
    \ != ' ' && lastChar != '-' && lastChar != '_'\n        lastCharIsLetter && !lastCharIsNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx8v1mmfy.scala:21)\n\tat Problem.main(tmpx8v1mmfy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.forall(x => x.isLetter)\n\
    \        val isNotWord = words.last.forall(x => x.contains(lastChar))\n      \
    \  isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8a2dfdnp.scala:17:49 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = words.last.forall(\e\
    [36mx\e[0m => x.contains(lastChar))\n\e[31m\e[31m   |\e[0m                   \
    \                            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                  value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        if(lastChar.isLetter)\
    \ {\n            val words = txt.split(\" \").filter(_.nonEmpty)\n           \
    \ val lastWord = words.last\n            val lastWordChar = lastWord.last\n  \
    \          if(lastWordChar != lastChar) {\n                return false\n    \
    \        }\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeqiahty8.scala:26)\n\tat Problem.main(tmpeqiahty8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = txt.last\n        val lastCharIsLetter = lastChar.toString.isLetter\n    \
    \    val lastCharIsNotWord = words.last.contains(lastChar)\n        val lastCharIsNotWordButLastCharIsALetter\
    \ = lastCharIsNotWord && !lastCharIsLetter\n        lastCharIsNotWordButLastCharIsALetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpslfaptue.scala:16:49 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsLetter\e[0m =\
    \ lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                          \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \        value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n\
    \        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd1duts6r.scala:23)\n\tat Problem.main(tmpd1duts6r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3up1_2m4.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \").toList\n     \
    \   val lastChar = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(Character.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(Character.isLetter) && !words.last.contains(lastChar)\n\
    \        !lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.checkIfLastCharIsALetter(tmpgqfz2pja.scala:15)\n\tat Problem$.main(tmpgqfz2pja.scala:21)\n\
    \tat Problem.main(tmpgqfz2pja.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792985
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastWord\
    \ = words(words.length-1)\n        val lastChar = lastWord.charAt(lastWord.length-1)\n\
    \        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n        !isLetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp715rounv.scala:22)\n\tat Problem.main(tmp715rounv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastWord\
    \ = words(words.length-1)\n        val lastChar = lastWord.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        !isLetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpie6mmher.scala:22)\n\tat Problem.main(tmpie6mmher.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastWord\
    \ = words(words.length-1)\n        val lastChar = lastWord.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = lastWord.forall(x\
    \ => x != lastChar)\n        isLetter && !isNotWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp39a84pfs.scala:22)\n\tat Problem.main(tmp39a84pfs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        var lastChar = txt.last\n        var isLastCharAlpha\
    \ = false\n        for(i <- 0 until txt.length){\n            if(txt(i) == lastChar){\n\
    \                isLastCharAlpha = true\n            }\n        }\n        if(isLastCharAlpha\
    \ == false){\n            return false\n        }\n        else{\n           \
    \ return true\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfwrgd8wm.scala:29)\n\tat Problem.main(tmpfwrgd8wm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.matches(\"[a-zA-Z]\"\
    )\n        val isNotWord = words.last.contains(lastChar)\n        !isLetter &&\
    \ !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpj20_lam0.scala:15)\n\tat Problem$.main(tmpj20_lam0.scala:21)\n\
    \tat Problem.main(tmpj20_lam0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3up1_2m4.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.matches(\"[a-zA-Z]\"\
    )\n        val isNotWord = words.last.contains(lastChar)\n        !isLetter &&\
    \ !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpj20_lam0.scala:15)\n\tat Problem$.main(tmpj20_lam0.scala:21)\n\
    \tat Problem.main(tmpj20_lam0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val lastCharIsLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val lastCharIsNotWord = lastChar\
    \ != ' ' && lastChar != '\\t'\n        lastCharIsLetter && lastCharIsNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpabtx0qpf.scala:20)\n\tat Problem.main(tmpabtx0qpf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.toString.matches(\"\
    [a-zA-Z]\")\n        val lastCharIsNotWord = words.lastOption.map(_.toString.trim).forall(!_.matches(\"\
    [a-zA-Z]\"))\n        lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpkg1iw91w.scala:15)\n\tat Problem$.main(tmpkg1iw91w.scala:21)\n\
    \tat Problem.main(tmpkg1iw91w.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastWord\
    \ = words(words.length-1)\n        val lastChar = lastWord.charAt(lastWord.length-1)\n\
    \        val isLetter = lastChar.isLetter\n        val isNotWord = lastWord.contains(\"\
    \ \")\n        val isNotLastChar = lastChar.isNotLetter\n        isLetter && isNotWord\
    \ && isNotLastChar\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7qli4rcd.scala:19:37 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misNotLastChar\e[0m = lastChar.isNotLetter\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                            value isNotLetter is not a member of\
    \ Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3up1_2m4.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3up1_2m4.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.matches(\"[a-zA-Z]+\"\
    )\n        val isNotWord = words.last.contains(lastChar)\n        isLetter &&\
    \ !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpnol7eph3.scala:15)\n\tat Problem$.main(tmpnol7eph3.scala:21)\n\
    \tat Problem.main(tmpnol7eph3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        var lastChar = txt.last\n        var isLetter\
    \ = true\n        for(i <- 0 until txt.length){\n            if(!Character.isLetter(txt.charAt(i))){\n\
    \                isLetter = false\n            }\n        }\n        return isLetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp09hv3bit.scala:24)\n\tat Problem.main(tmp09hv3bit.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792989
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar match {\n            case c if c.isLetter => true\n            case\
    \ _ => false\n        }\n        val isNotWord = txt.split(\" \").map(_.last).contains(lastChar)\n\
    \        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsbdd7z_t.scala:24)\n\tat Problem.main(tmpsbdd7z_t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastWord\
    \ = words(words.length-1)\n        val lastChar = lastWord.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        !isLetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpie6mmher.scala:22)\n\tat Problem.main(tmpie6mmher.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.matches(\"[a-zA-Z]\"\
    )\n        val isNotWord = words.last.contains(lastChar)\n        !isLetter &&\
    \ !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpj20_lam0.scala:15)\n\tat Problem$.main(tmpj20_lam0.scala:21)\n\
    \tat Problem.main(tmpj20_lam0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4vas0bcm.scala:21)\n\tat Problem.main(tmp4vas0bcm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.matches(\"[a-zA-Z]\"\
    )\n        val isNotWord = words.lastOption.map(_.last).exists(!_.matches(\"[a-zA-Z]\"\
    ))\n        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp99op2voy.scala:17:63 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = words.lastOption.map(_.last).exists(!_.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m))\n\e[31m\e[31m   |\e[0m                               \
    \                              ^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                    value matches is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792989
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastWord\
    \ = words(words.length-1)\n        val lastChar = lastWord.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        !isLetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpie6mmher.scala:22)\n\tat Problem.main(tmpie6mmher.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3up1_2m4.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.matches(\"[a-zA-Z]+\"\
    )\n        val isNotWord = words.last.contains(lastChar)\n        isLetter &&\
    \ !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpnol7eph3.scala:15)\n\tat Problem$.main(tmpnol7eph3.scala:21)\n\
    \tat Problem.main(tmpnol7eph3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \").toList\n     \
    \   val lastChar = words(txt.length-1)\n        val isLetter = lastChar.matches(\"\
    [a-zA-Z]\")\n        val isNotWord = words.last.contains(lastChar)\n        !isLetter\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.checkIfLastCharIsALetter(tmpwbuish72.scala:15)\n\tat Problem$.main(tmpwbuish72.scala:21)\n\
    \tat Problem.main(tmpwbuish72.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.matches(\"[a-zA-Z]+\"\
    )\n        !isLetter\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpc2suqrgx.scala:15)\n\tat Problem$.main(tmpc2suqrgx.scala:20)\n\
    \tat Problem.main(tmpc2suqrgx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar match {\n            case c if c.isLetter => true\n            case\
    \ _ => false\n        }\n        val isNotWord = txt.split(\" \").lastOption match\
    \ {\n            case Some(word) => !word.contains(lastChar)\n            case\
    \ _ => false\n        }\n        isLetter && !isNotWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppkxrz8bs.scala:26)\n\tat Problem.main(tmppkxrz8bs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.forall(_.isLetter)\n\
    \        val isNotWord = words.last.forall(_.contains(lastChar))\n        isLetter\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3y59tyrp.scala:17:44 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = words.last.forall(_.contains(lastChar))\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  value contains is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \").toList\n     \
    \   val lastChar = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkv7c6l4r.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792989
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.matches(\"[a-zA-Z]+\"\
    )\n        val isNotWord = words.last.contains(lastChar)\n        isLetter &&\
    \ !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpnol7eph3.scala:15)\n\tat Problem$.main(tmpnol7eph3.scala:21)\n\
    \tat Problem.main(tmpnol7eph3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.matches(\"[a-zA-Z]+\"\
    )\n        !isLetter\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpc2suqrgx.scala:15)\n\tat Problem$.main(tmpc2suqrgx.scala:20)\n\
    \tat Problem.main(tmpc2suqrgx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.forall(_.isLetter)\n\
    \        val isNotWord = words.last.forall(_.contains(lastChar))\n        isLetter\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3y59tyrp.scala:17:44 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = words.last.forall(_.contains(lastChar))\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  value contains is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.matches(\"[a-zA-Z]\"\
    )\n        val isNotWord = words.last.contains(lastChar)\n        isLetter &&\
    \ !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmp7kateinu.scala:15)\n\tat Problem$.main(tmp7kateinu.scala:21)\n\
    \tat Problem.main(tmp7kateinu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.toString.isLetter\n\
    \        val lastCharIsNotWord = words.last.contains(lastChar)\n        lastCharIsLetter\
    \ && !lastCharIsNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3a0w0grg.scala:16:49 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsLetter\e[0m =\
    \ lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                          \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \        value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659792989
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4vas0bcm.scala:21)\n\tat Problem.main(tmp4vas0bcm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.matches(\"[a-zA-Z]+\"\
    )\n        val isNotWord = words.last.contains(lastChar)\n        !isLetter &&\
    \ !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpso54j8ch.scala:15)\n\tat Problem$.main(tmpso54j8ch.scala:21)\n\
    \tat Problem.main(tmpso54j8ch.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.matches(\"[a-zA-Z]\"\
    )\n        !isLetter\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmp1z5148pn.scala:15)\n\tat Problem$.main(tmp1z5148pn.scala:20)\n\
    \tat Problem.main(tmp1z5148pn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3up1_2m4.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(Character.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(word => word.contains(lastChar))\n\
    \        lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu_wfav7g.scala:17:63 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(\e[36mword\e[0m => word.contains(lastChar))\n\e[31m\e[31m\
    \   |\e[0m                                                          ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value contains is not a\
    \ member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.matches(\"[a-zA-Z]+\"\
    )\n        !isLetter\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpc2suqrgx.scala:15)\n\tat Problem$.main(tmpc2suqrgx.scala:20)\n\
    \tat Problem.main(tmpc2suqrgx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val lastCharIsLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val lastCharIsNotWord = lastChar\
    \ != ' ' && lastChar != '-' && lastChar != '_'\n        val lastCharIsNotWordOrLetter\
    \ = lastCharIsWord || lastCharIsLetter\n        val lastCharIsNotWordOrLetterOrSpace\
    \ = lastCharIsNotWord || lastCharIsLetter\n        val lastCharIsNotWordOrLetterOrSpaceOrEnd\
    \ = lastCharIsNotWord || lastCharIsLetter\n        val lastCharIsNotWordOrLetterOrSpaceOrEndOrNewline\
    \ = lastCharIsNotWord || lastCharIsLetter\n        val lastCharIsNotWordOrLetterOrSpaceOrEndOrNewlineOrNewline\
    \ = lastCharIsNotWord || lastCharIsLetter\n        val lastCharIsNotWordOrLetterOrSpaceOrEndOrNewlineOrNewlineOrNewline\
    \ = lastCharIsNotWord || lastCharIsLetter\n        val lastCharIsNotWordOrLetterOrSpaceOrEndOrNewlineOrNewlineOrNewlineOrNewline\
    \ = lastCharIsNotWord || lastCharIsLetter\n        val lastCharIsNotWordOrLetterOrSpaceOrEndOrNewlineOrNewlineOrNewlineOrNewlineOrNewline\
    \ = lastCharIsNotWord || lastCharIsLetter\n        val lastCharIsNotWordOrLetterOrSpaceOrEndOrNewlineOrNewlineOrNewlineOrNewlineOrNewlineOrNewline\
    \ = lastCharIsNotWord || lastCharIsLetter\n        val lastCharIsNotWordOrLetterOrSpaceOrEndOrNewlineOrNewlineOrNewlineOrNewlineOrNewlineOrNewlineOrNewline\
    \ = lastCharIsNotWord || lastCharIsLetter\n        val lastCharIsNotWordOrLetterOrSpaceOrEndOrNewlineOrNewlineOrNewlineOrNewlineOrNewlineOrNewlineOrNewlineOrNewline\
    \ = lastCharIsNotWord || lastCharIsLetter\n        val lastCharIsNotWordOrLetterOrSpaceOrEndOrNewlineOrNewlineOrNewlineOrNewlineOrNewlineOrNewlineOrNewlineOrNewlineOrNewline\
    \ = lastCharIsNotWord || lastCharIsLetter\n        val lastCharIsNotWordOrLetterOrSpaceOrEndOrNewlineOrNewlineOrNewlineOrNewlineOrNewlineOrNewlineOrNewlineOrNewline\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgosbwy_y.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgosbwy_y.scala:17:40\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mlastCharIsNotWordOrLetter\e[0m = lastCharIsWord || lastCharIsLetter\n\e[31m\e\
    [31m   |\e[0m                                        ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                        Not found: lastCharIsWord\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgosbwy_y.scala:30:5\
    \ ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659792989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \").toList\n     \
    \   val lastChar = words(txt.length-1)\n        val lastCharIsLetter = lastChar.toString.isLetter\n\
    \        val lastCharIsNotWord = words.last.forall(_.toString.isLetter)\n    \
    \    val isLastCharNotWord = lastCharIsLetter && !lastCharIsNotWord\n        !isLastCharNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcvreyz3a.scala:16:49 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsLetter\e[0m =\
    \ lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                          \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \        value isLetter is not a member of String\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpcvreyz3a.scala:17:61 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m = words.last.forall(_.toString.isLetter)\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.matches(\"[a-zA-Z]+\"\
    )\n        !isLetter\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpc2suqrgx.scala:15)\n\tat Problem$.main(tmpc2suqrgx.scala:20)\n\
    \tat Problem.main(tmpc2suqrgx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4vas0bcm.scala:21)\n\tat Problem.main(tmp4vas0bcm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9xn6lz6g.scala:16:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.forall(_.isLetter)\n\
    \        val isNotWord = words.last.forall(_.contains(lastChar))\n        isLetter\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3y59tyrp.scala:17:44 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = words.last.forall(_.contains(lastChar))\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  value contains is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.matches(\"[a-zA-Z]+\"\
    )\n        val isNotWord = words.last.contains(lastChar)\n        isLetter &&\
    \ !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpnol7eph3.scala:15)\n\tat Problem$.main(tmpnol7eph3.scala:21)\n\
    \tat Problem.main(tmpnol7eph3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.forall(_.isLetter)\n\
    \        val isNotWord = words.last.forall(_.contains(lastChar))\n        isLetter\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3y59tyrp.scala:17:44 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = words.last.forall(_.contains(lastChar))\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  value contains is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLastCharAlpha = lastChar.forall(_.isLetter)\n\
    \        val isLastCharNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     isLastCharAlpha && !isLastCharNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx6e95zse.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792989
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastWord\
    \ = words(words.length-1)\n        val lastChar = lastWord.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        !isLetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpie6mmher.scala:22)\n\tat Problem.main(tmpie6mmher.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     !lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0rh2o45m.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.matches(\"[a-zA-Z]\"\
    )\n        !isLetter\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmp1z5148pn.scala:15)\n\tat Problem$.main(tmp1z5148pn.scala:20)\n\
    \tat Problem.main(tmp1z5148pn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.matches(\"[a-zA-Z]\"\
    )\n        val isNotWord = words.lastOption.map(_.last).exists(!_.matches(\"[a-zA-Z]\"\
    ))\n        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp99op2voy.scala:17:63 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = words.lastOption.map(_.last).exists(!_.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m))\n\e[31m\e[31m   |\e[0m                               \
    \                              ^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                    value matches is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     !lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0rh2o45m.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.matches(\"[a-zA-Z]\"\
    )\n        val isNotWord = words.last.contains(lastChar)\n        isLetter &&\
    \ !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmp7kateinu.scala:15)\n\tat Problem$.main(tmp7kateinu.scala:21)\n\
    \tat Problem.main(tmp7kateinu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \").toList\n     \
    \   val lastChar = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkv7c6l4r.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792989
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastWord\
    \ = words(words.length-1)\n        val lastChar = lastWord.charAt(lastWord.length-1)\n\
    \        val isLetter = lastChar.isLetter\n        val isNotWord = lastWord.contains(\"\
    \ \")\n        isLetter && !isNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp62nxd4b1.scala:22)\n\tat Problem.main(tmp62nxd4b1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     !lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0rh2o45m.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.matches(\"[a-zA-Z]\"\
    )\n        val isNotWord = words.last.contains(lastChar)\n        isLetter &&\
    \ !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmp7kateinu.scala:15)\n\tat Problem$.main(tmp7kateinu.scala:21)\n\
    \tat Problem.main(tmp7kateinu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9xn6lz6g.scala:16:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption match {\n            case Some(word) => !word.contains(lastChar)\n\
    \            case None => false\n        }\n        isLetter && !isNotWord\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk5j41wqv.scala:23)\n\tat Problem.main(tmpk5j41wqv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastWord\
    \ = words(words.length-1)\n        val lastChar = lastWord.last\n        val isLetter\
    \ = lastChar.isLetter\n        val isNotWord = lastWord.forall(_.isLetter)\n \
    \       !isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1mt135o_.scala:23)\n\tat Problem.main(tmp1mt135o_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792991
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3up1_2m4.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.toString.isLetter\n \
    \       val isNotWord = words.last.contains(lastChar)\n        isLetter && !isNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvlueei46.scala:16:41 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36misLetter\e[0m = lastChar.toString.isLetter\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       value isLetter is not a member of String\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val lastCharIsLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val lastCharIsNotWord = lastChar\
    \ != ' ' && lastChar != '-' && lastChar != '_'\n        lastCharIsLetter && lastCharIsNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbbkeoygj.scala:20)\n\tat Problem.main(tmpbbkeoygj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.toString.matches(\"[a-zA-Z]+\"\
    )\n        !isLetter\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmp28oy5oh_.scala:15)\n\tat Problem$.main(tmp28oy5oh_.scala:20)\n\
    \tat Problem.main(tmp28oy5oh_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastWord\
    \ = words(words.length-1)\n        val lastChar = lastWord.last\n        val isLetter\
    \ = lastChar.isLetter\n        val isNotWord = lastChar.isLetterOrDigit\n    \
    \    !isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsv3_1mjy.scala:23)\n\tat Problem.main(tmpsv3_1mjy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.matches(\"[a-zA-Z]\"\
    )\n        val isNotWord = words.last.contains(lastChar)\n        !isLetter &&\
    \ !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpj20_lam0.scala:15)\n\tat Problem$.main(tmpj20_lam0.scala:21)\n\
    \tat Problem.main(tmpj20_lam0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(Character.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(word => !word.contains(lastChar))\n\
    \        lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp81pil2ad.scala:17:64 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(\e[36mword\e[0m => !word.contains(lastChar))\n\e[31m\e[31m\
    \   |\e[0m                                                           ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value contains is not a\
    \ member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792994
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.matches(\"[a-zA-Z]\"\
    )\n        val isNotWord = words.last.contains(lastChar)\n        !isLetter &&\
    \ !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpj20_lam0.scala:15)\n\tat Problem$.main(tmpj20_lam0.scala:21)\n\
    \tat Problem.main(tmpj20_lam0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastWord\
    \ = words(words.length-1)\n        val lastChar = lastWord.charAt(lastWord.length-1)\n\
    \        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n        !isLetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp715rounv.scala:22)\n\tat Problem.main(tmp715rounv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.forall(x => x.isLetter)\n\
    \        val isNotWord = words.last.forall(x => !x.contains(\" \"))\n        isLetter\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_riohecw.scala:17:50 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = words.last.forall(\e\
    [36mx\e[0m => !x.contains(\e[31m\" \"\e[0m))\n\e[31m\e[31m   |\e[0m          \
    \                                      ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                            value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792995
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val lastCharIsLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val lastCharIsNotWord = lastChar\
    \ != ' ' && lastChar != '-' && lastChar != '_'\n        lastCharIsLetter && lastCharIsNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbbkeoygj.scala:20)\n\tat Problem.main(tmpbbkeoygj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \").toList\n     \
    \   val lastChar = words(txt.length-1)\n        val lastCharIsLetter = lastChar.toString.matches(\"\
    [a-zA-Z]\")\n        val lastCharIsNotWord = words.last.contains(lastChar)\n \
    \       lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.checkIfLastCharIsALetter(tmpze4fvr0b.scala:15)\n\tat Problem$.main(tmpze4fvr0b.scala:21)\n\
    \tat Problem.main(tmpze4fvr0b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastWord\
    \ = words(words.length-1)\n        val lastChar = lastWord.charAt(lastWord.length-1)\n\
    \        val isLetter = lastChar.isLetter\n        val isNotWord = lastWord.indexOf(\"\
    _\") != -1\n        isLetter && !isNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9r8h1c50.scala:22)\n\tat Problem.main(tmp9r8h1c50.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \").toList\n     \
    \   val lastChar = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(Character.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(Character.isLetter)\n     \
    \   lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.checkIfLastCharIsALetter(tmpf0g2ioeb.scala:15)\n\tat Problem$.main(tmpf0g2ioeb.scala:21)\n\
    \tat Problem.main(tmpf0g2ioeb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val lastCharIsLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val lastCharIsNotWord = lastChar\
    \ != ' ' && lastChar != '\\n'\n        lastCharIsLetter && lastCharIsNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp703w2o_h.scala:20)\n\tat Problem.main(tmp703w2o_h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792996
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     !lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0rh2o45m.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.toString.matches(\"\
    [a-zA-Z]\")\n        val lastCharIsNotWord = words.last.contains(lastChar)\n \
    \       val isLastCharNotWord = lastCharIsNotWord && lastCharIsLetter\n      \
    \  !isLastCharNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmp9tk7811_.scala:15)\n\tat Problem$.main(tmp9tk7811_.scala:22)\n\
    \tat Problem.main(tmp9tk7811_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val lastCharIsLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val lastCharIsNotWord = lastChar\
    \ != ' ' && lastChar != '\\t'\n        lastCharIsLetter && lastCharIsNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpabtx0qpf.scala:20)\n\tat Problem.main(tmpabtx0qpf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.toString.isLetter\n\
    \        val lastCharIsNotWord = words.last.contains(lastChar)\n        val lastCharIsNotWordButLastIsLetter\
    \ = lastCharIsNotWord && lastChar.isLetter\n        lastCharIsLetter && !lastCharIsNotWord\
    \ && !lastCharIsNotWordButLastIsLetter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxh1fs6cy.scala:16:49 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsLetter\e[0m =\
    \ lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                          \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \        value isLetter is not a member of String\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpxh1fs6cy.scala:18:77 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWordButLastIsLetter\e[0m = lastCharIsNotWord\
    \ && lastChar.isLetter\n\e[31m\e[31m   |\e[0m                                \
    \                                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                               value isLetter is not a member of String\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659792996
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \").toList\n     \
    \   val lastChar = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkv7c6l4r.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792989
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastWord\
    \ = words(words.length-1)\n        val lastChar = lastWord.charAt(lastWord.length-1)\n\
    \        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n        !isLetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp715rounv.scala:22)\n\tat Problem.main(tmp715rounv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4vas0bcm.scala:21)\n\tat Problem.main(tmp4vas0bcm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastWord\
    \ = words(words.length-1)\n        val lastChar = lastWord.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        !isLetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpie6mmher.scala:22)\n\tat Problem.main(tmpie6mmher.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val lastCharIsLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val lastCharIsNotWord = lastChar\
    \ != ' ' && lastChar != '-' && lastChar != '_'\n        val lastCharIsNotLetterOrWord\
    \ = lastCharIsLetter || lastCharIsNotWord\n        lastCharIsLetter == lastCharIsNotLetterOrWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpebvowp_w.scala:21)\n\tat Problem.main(tmpebvowp_w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastWord\
    \ = words(words.length-1)\n        val lastChar = lastWord.charAt(words.length-1)\n\
    \        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord\
    \ = lastWord.indexOf(\",\") < 0\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 2\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.checkIfLastCharIsALetter(tmpmlxcno_7.scala:16)\n\tat Problem$.main(tmpmlxcno_7.scala:23)\n\
    \tat Problem.main(tmpmlxcno_7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792995
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4vas0bcm.scala:21)\n\tat Problem.main(tmp4vas0bcm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3up1_2m4.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4vas0bcm.scala:21)\n\tat Problem.main(tmp4vas0bcm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3up1_2m4.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastWord\
    \ = words(words.length-1)\n        val lastChar = lastWord.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        !isLetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpie6mmher.scala:22)\n\tat Problem.main(tmpie6mmher.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.forall(_.isLetter)\n\
    \        val isNotWord = words.last.forall(_.contains(lastChar))\n        isLetter\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3y59tyrp.scala:17:44 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = words.last.forall(_.contains(lastChar))\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  value contains is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.forall(_.isLetter)\n\
    \        val isNotWord = words.last.forall(_.contains(lastChar))\n        !isLetter\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmgm_x67v.scala:17:44 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = words.last.forall(_.contains(lastChar))\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  value contains is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.forall(x => x.isLetter)\n\
    \        val isNotWord = words.last.forall(x => !x.contains(\" \"))\n        isLetter\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_riohecw.scala:17:50 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = words.last.forall(\e\
    [36mx\e[0m => !x.contains(\e[31m\" \"\e[0m))\n\e[31m\e[31m   |\e[0m          \
    \                                      ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                            value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792995
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastWord\
    \ = words(words.length-1)\n        val lastChar = lastWord.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = lastWord.forall(_.isLetter)\n\
    \        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpatslwxrt.scala:23)\n\tat Problem.main(tmpatslwxrt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastWord\
    \ = words(words.length-1)\n        val lastChar = lastWord.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = lastWord.forall(c\
    \ => c != ' ')\n        isLetter && !isNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8ls_wqzj.scala:23)\n\tat Problem.main(tmp8ls_wqzj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(Character.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(Character.isLetter)\n     \
    \   !lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmp9zph26o5.scala:15)\n\tat Problem$.main(tmp9zph26o5.scala:21)\n\
    \tat Problem.main(tmp9zph26o5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792996
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3up1_2m4.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.matches(\"[a-zA-Z]\"\
    )\n        val isNotWord = words.last.contains(lastChar)\n        isLetter &&\
    \ !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmp7kateinu.scala:15)\n\tat Problem$.main(tmp7kateinu.scala:21)\n\
    \tat Problem.main(tmp7kateinu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.toString.isLetter\n \
    \       val isNotWord = words.last.forall(_.toString.isLetter)\n        isLetter\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpehhumprz.scala:16:41 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36misLetter\e[0m = lastChar.toString.isLetter\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       value isLetter is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpehhumprz.scala:17:53 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = words.last.forall(_.toString.isLetter)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4vas0bcm.scala:21)\n\tat Problem.main(tmp4vas0bcm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastWord\
    \ = words(words.length-1)\n        val lastChar = lastWord.last\n        val isLetter\
    \ = lastChar.isLetter\n        val isNotWord = lastChar.isAlpha\n        isLetter\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk7q3zsme.scala:18:33 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = lastChar.isAlpha\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        value isAlpha is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792996
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.forall(_.isLetter)\n\
    \        val isNotWord = words.last.forall(_.contains(lastChar))\n        isLetter\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3y59tyrp.scala:17:44 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = words.last.forall(_.contains(lastChar))\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  value contains is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \").toList\n     \
    \   val lastWord = words(words.length-1)\n        val lastChar = lastWord.last\n\
    \        val isLetter = lastChar.isLetter\n        val isNotWord = lastWord.forall(_.isLetter)\n\
    \        !isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpakrqtw2a.scala:23)\n\tat Problem.main(tmpakrqtw2a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792996
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.forall(_.isLetter)\n\
    \        val isNotWord = words.last.forall(_.contains(lastChar))\n        isLetter\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3y59tyrp.scala:17:44 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = words.last.forall(_.contains(lastChar))\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  value contains is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.toString.isLetter\n\
    \        val lastCharIsNotWord = words.last.last.isLetter\n        val result\
    \ = lastCharIsLetter && !lastCharIsNotWord\n        return result\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9ksiqolr.scala:16:49 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsLetter\e[0m =\
    \ lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                          \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \        value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastWord\
    \ = words(words.length-1)\n        val lastChar = lastWord.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = lastWord.forall(_.isLetter)\n\
    \        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpatslwxrt.scala:23)\n\tat Problem.main(tmpatslwxrt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792996
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     !lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0rh2o45m.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3up1_2m4.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     !lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0rh2o45m.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.toString.isLetter\n\
    \        val lastCharIsNotWord = lastChar.tail.forall(_.isLetter)\n        !lastCharIsWord\
    \ && !lastCharIsLetter\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiv10lpf8.scala:16:49 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsLetter\e[0m =\
    \ lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                          \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \        value isLetter is not a member of String\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpiv10lpf8.scala:18:9 -------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        !lastCharIsWord && !lastCharIsLetter\n\e[31m\e[31m   |\e[0m  \
    \       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Not found: lastCharIsWord\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.toString.matches(\"[a-zA-Z]\"\
    )\n        val isNotWord = words.last.contains(lastChar)\n        isLetter &&\
    \ !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpu7k5z7fs.scala:15)\n\tat Problem$.main(tmpu7k5z7fs.scala:21)\n\
    \tat Problem.main(tmpu7k5z7fs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792996
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.forall(_.isLetter)\n\
    \        val isNotWord = words.last.forall(_.contains(lastChar))\n        isLetter\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3y59tyrp.scala:17:44 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = words.last.forall(_.contains(lastChar))\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  value contains is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.matches(\"[a-zA-Z]\"\
    )\n        !isLetter\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmp1z5148pn.scala:15)\n\tat Problem$.main(tmp1z5148pn.scala:20)\n\
    \tat Problem.main(tmp1z5148pn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3up1_2m4.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4vas0bcm.scala:21)\n\tat Problem.main(tmp4vas0bcm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3up1_2m4.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \").toList\n     \
    \   val lastChar = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(Character.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(word => !word.contains(lastChar))\n\
    \        lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbxqkcopu.scala:17:64 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(\e[36mword\e[0m => !word.contains(lastChar))\n\e[31m\e[31m\
    \   |\e[0m                                                           ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value contains is not a\
    \ member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792996
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastWord\
    \ = words(words.length-1)\n        val lastChar = lastWord.last\n        val isLetter\
    \ = lastChar.matches(\"[a-zA-Z]+\")\n        !isLetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqucciqd2.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misLetter\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]+\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       value matches is not a member of Char\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792996
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     !lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0rh2o45m.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastWord\
    \ = words(words.length-1)\n        val lastChar = lastWord.last\n        val isLetter\
    \ = lastChar.toString.isLetter\n        !isLetter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpym97c9_8.scala:17:41 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misLetter\e[0m = lastChar.toString.isLetter\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       value isLetter is not a member of String\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.forall(_.isLetter)\n\
    \        val isNotWord = words.last.forall(_.contains(lastChar))\n        isLetter\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3y59tyrp.scala:17:44 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = words.last.forall(_.contains(lastChar))\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  value contains is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.toString.matches(\"\
    [a-zA-Z]\")\n        val lastCharIsNotWord = words.last.contains(lastChar)\n \
    \       val result = lastCharIsLetter && !lastCharIsNotWord\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpemayxbl_.scala:15)\n\tat Problem$.main(tmpemayxbl_.scala:22)\n\
    \tat Problem.main(tmpemayxbl_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastWord\
    \ = words(words.length-1)\n        val lastChar = lastWord.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        !isLetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpie6mmher.scala:22)\n\tat Problem.main(tmpie6mmher.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \").toList\n     \
    \   val lastChar = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkv7c6l4r.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792989
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val lastCharIsLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val lastCharIsNotWord = lastChar\
    \ != ' ' && lastChar != 'a'\n        lastCharIsLetter && lastCharIsNotWord\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfveu0_xu.scala:20)\n\tat Problem.main(tmpfveu0_xu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792999
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.forall(x => x.isLetter)\n\
    \        val isNotWord = words.last.forall(x => x.contains(lastChar))\n      \
    \  isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8a2dfdnp.scala:17:49 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = words.last.forall(\e\
    [36mx\e[0m => x.contains(lastChar))\n\e[31m\e[31m   |\e[0m                   \
    \                            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                  value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.forall(_.isLetter)\n\
    \        val isNotWord = words.last.forall(_.contains(lastChar))\n        isLetter\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3y59tyrp.scala:17:44 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = words.last.forall(_.contains(lastChar))\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  value contains is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.matches(\"[a-zA-Z]+\"\
    )\n        val isNotWord = words.last.contains(lastChar)\n        !isLetter &&\
    \ !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpso54j8ch.scala:15)\n\tat Problem$.main(tmpso54j8ch.scala:21)\n\
    \tat Problem.main(tmpso54j8ch.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.forall(_.isLetter)\n\
    \        val isNotWord = words.last.forall(_.contains(lastChar))\n        isLetter\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3y59tyrp.scala:17:44 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = words.last.forall(_.contains(lastChar))\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  value contains is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.matches(\"[a-zA-Z]+\"\
    )\n        val isNotWord = words.last.contains(lastChar)\n        isLetter &&\
    \ !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpnol7eph3.scala:15)\n\tat Problem$.main(tmpnol7eph3.scala:21)\n\
    \tat Problem.main(tmpnol7eph3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val lastCharIsLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val lastCharIsNotWord = lastChar\
    \ != ' ' && lastChar != '?'\n        lastCharIsLetter && !lastCharIsNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps8kwufaq.scala:21)\n\tat Problem.main(tmps8kwufaq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793001
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \").toList\n     \
    \   val lastChar = words(txt.length-1)\n        val isLetter = lastChar.forall(_.isLetter)\n\
    \        val isNotWord = words.last.forall(_.contains(lastChar))\n        isLetter\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0fasq4hv.scala:17:44 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = words.last.forall(_.contains(lastChar))\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  value contains is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659793000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \").toList\n     \
    \   val lastChar = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkv7c6l4r.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792989
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \").toList\n     \
    \   val lastChar = words(txt.length-1)\n        val isLetter = lastChar.matches(\"\
    [a-zA-Z]\")\n        val isNotWord = words.exists(word => word.contains(lastChar))\n\
    \        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.checkIfLastCharIsALetter(tmptrc_ki5h.scala:15)\n\tat Problem$.main(tmptrc_ki5h.scala:21)\n\
    \tat Problem.main(tmptrc_ki5h.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.forall(Character.isLetter)\n\
    \        val isNotWord = words.last.forall(Character.isLetter)\n        !isLetter\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpqqk0e_v2.scala:15)\n\tat Problem$.main(tmpqqk0e_v2.scala:21)\n\
    \tat Problem.main(tmpqqk0e_v2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastWord\
    \ = words(words.length-1)\n        val lastChar = lastWord.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = lastWord.forall(x\
    \ => x != lastChar)\n        isLetter && !isNotWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp39a84pfs.scala:22)\n\tat Problem.main(tmp39a84pfs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastWord\
    \ = words(words.length-1)\n        val lastChar = lastWord.last\n        val lastCharIsLetter\
    \ = lastChar.isLetter\n        val lastCharIsNotWord = lastChar.isLetterOrDigit\n\
    \        val lastCharIsNotWordOrSpace = lastChar.isLetterOrDigit && !lastChar.isSpace\n\
    \        val lastCharIsNotWordOrSpaceOrNewLine = lastChar.isLetterOrDigit && !lastChar.isSpace\
    \ && !lastChar.isNewLine\n        val lastCharIsNotWordOrSpaceOrNewLineOrNewLine\
    \ = lastChar.isLetterOrDigit && !lastChar.isSpace && !lastChar.isNewLine && !lastChar.isNewLine\n\
    \        val lastCharIsNotWordOrSpaceOrNewLineOrNewLineOrNewLine = lastChar.isLetterOrDigit\
    \ && !lastChar.isSpace && !lastChar.isNewLine && !lastChar.isNewLine && !lastChar.isNewLine\n\
    \        val lastCharIsNotWordOrSpaceOrNewLineOrNewLineOrNewLineOrNewLine = lastChar.isLetterOrDigit\
    \ && !lastChar.isSpace && !lastChar.isNewLine && !lastChar.isNewLine && !lastChar.isNewLine\
    \ && !lastChar.isNewLine\n        val lastCharIsNotWordOrSpaceOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine\
    \ = lastChar.isLetterOrDigit && !lastChar.isSpace && !lastChar.isNewLine && !lastChar.isNewLine\
    \ && !lastChar.isNewLine && !lastChar.isNewLine && !lastChar.isNewLine\n     \
    \   val lastCharIsNotWordOrSpaceOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine\
    \ = lastChar.isLetterOrDigit && !lastChar.isSpace && !lastChar.isNewLine && !lastChar.isNewLine\
    \ && !lastChar.isNewLine && !lastChar.isNewLine && !lastChar.isNewLine && !lastChar.isNewLine\n\
    \        val lastCharIsNotWordOrSpaceOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine\
    \ = lastChar.isLetterOrDigit && !lastChar.isSpace && !lastChar.isNewLine && !lastChar.isNewLine\
    \ && !lastChar.isNewLine && !lastChar.isNewLine && !lastChar.isNewLine && !lastChar.isNewLine\
    \ && !lastChar.isNewLine\n        val lastCharIsNotWordOrSpaceOrNewLineOrNewLine\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp52xy7004.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp52xy7004.scala:19:77\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mlastCharIsNotWordOrSpace\e[0m = lastChar.isLetterOrDigit && !lastChar.isSpace\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \         value isSpace is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp52xy7004.scala:20:86 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWordOrSpaceOrNewLine\e[0m =\
    \ lastChar.isLetterOrDigit && !lastChar.isSpace && !lastChar.isNewLine\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \          value isSpace is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp52xy7004.scala:20:107 -----------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWordOrSpaceOrNewLine\e[0m =\
    \ lastChar.isLetterOrDigit && !lastChar.isSpace && !lastChar.isNewLine\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                  ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                               value isNewLine is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp52xy7004.scala:21:95 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWordOrSpaceOrNewLineOrNewLine\e\
    [0m = lastChar.isLetterOrDigit && !lastChar.isSpace && !lastChar.isNewLine &&\
    \ !lastChar.isNewLine\n\e[31m\e[31m   |\e[0m                                 \
    \                                                     ^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                   value isSpace is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /"
  stdout: ''
  timestamp: 1659793002
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.toString.matches(\"\
    [a-zA-Z]\")\n        val lastCharIsNotWord = words.last.forall(_.toString.matches(\"\
    [a-zA-Z]\"))\n        !lastCharIsLetter && !lastCharIsNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpkyzlo3kv.scala:15)\n\tat Problem$.main(tmpkyzlo3kv.scala:21)\n\
    \tat Problem.main(tmpkyzlo3kv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793001
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.forall(_.isLetter)\n\
    \        val isNotWord = words.last.forall(_.contains(lastChar))\n        isLetter\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3y59tyrp.scala:17:44 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = words.last.forall(_.contains(lastChar))\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  value contains is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3up1_2m4.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        var lastChar = txt.last\n        var isLetter\
    \ = true\n        for (c <- txt.dropRight(1)) {\n            if (c.toString.toLowerCase\
    \ != lastChar.toString.toLowerCase && c.toString.toLowerCase != \" \") {\n   \
    \             isLetter = false\n            }\n            lastChar = c\n    \
    \    }\n        return isLetter\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbt_fbzc9.scala:26)\n\tat Problem.main(tmpbt_fbzc9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar match {\n            case c if c.isLetter => true\n            case\
    \ _ => false\n        }\n        val isNotWord = txt.split(\" \").lastOption match\
    \ {\n            case Some(word) if word.contains(lastChar) => false\n       \
    \     case _ => true\n        }\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb0k7aao2.scala:26)\n\tat Problem.main(tmpb0k7aao2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793002
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3up1_2m4.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.matches(\"[a-zA-Z]\"\
    )\n        val isNotWord = words.lastOption.exists(word => word.contains(lastChar))\n\
    \        !isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpmdz4vel8.scala:15)\n\tat Problem$.main(tmpmdz4vel8.scala:21)\n\
    \tat Problem.main(tmpmdz4vel8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793002
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val lastCharIsLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val lastCharIsNotWord = lastChar\
    \ != ' ' && lastChar != '\\t'\n        lastCharIsLetter && lastCharIsNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpabtx0qpf.scala:20)\n\tat Problem.main(tmpabtx0qpf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     !lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0rh2o45m.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.matches(\"[a-zA-Z]\"\
    )\n        val isNotWord = words.last.contains(lastChar)\n        !isLetter &&\
    \ !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpj20_lam0.scala:15)\n\tat Problem$.main(tmpj20_lam0.scala:21)\n\
    \tat Problem.main(tmpj20_lam0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.toString.isLetter\n\
    \        val lastCharIsNotWord = words.last.contains(lastChar)\n        lastCharIsLetter\
    \ && !lastCharIsNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3a0w0grg.scala:16:49 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsLetter\e[0m =\
    \ lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                          \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \        value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659792989
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.matches(\"[a-zA-Z]\"\
    )\n        !isLetter\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmp1z5148pn.scala:15)\n\tat Problem$.main(tmp1z5148pn.scala:20)\n\
    \tat Problem.main(tmp1z5148pn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792989
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \").toList\n     \
    \   val lastWord = words(words.length-1)\n        val lastChar = lastWord.last\n\
    \        val isLetter = lastChar.isLetter\n        val isNotWord = lastWord.forall(_.isLetter)\n\
    \        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8i4xk7d2.scala:23)\n\tat Problem.main(tmp8i4xk7d2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793002
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = txt.last\n        val lastCharIsLetter = lastChar.toString.isLetter\n    \
    \    val lastCharIsNotWord = words.last.contains(lastChar)\n        val lastCharIsNotWordButNotLastChar\
    \ = words.last.contains(lastChar) && !lastChar.isLetter\n        val lastCharIsNotWordButNotLastCharButNotFirstChar\
    \ = words.last.contains(lastChar) && !lastChar.isLetter && !words.last.contains(txt.head)\n\
    \        val lastCharIsNotWordButNotLastCharButNotFirstCharButNotLastChar = words.last.contains(lastChar)\
    \ && !lastChar.isLetter && !words.last.contains(txt.head) && !txt.last.isLetter\n\
    \        val lastCharIsNotWordButNotLastCharButNotFirstCharButNotLastCharButNotFirstChar\
    \ = words.last.contains(lastChar) && !lastChar.isLetter && !words.last.contains(txt.head)\
    \ && !txt.last.isLetter && !txt.head.isLetter\n        val lastCharIsNotWordButNotLastCharButNotFirstCharButNotLastCharButNotFirstCharButNotLastChar\
    \ = words.last.contains(lastChar) && !lastChar.isLetter && !words.last.contains(txt.head)\
    \ && !txt.last.isLetter && !txt.head.isLetter && !txt.last.isLetter\n        val\
    \ lastCharIsNotWordButNotLastCharButNotFirstCharButNotLastCharButNotFirstCharButNotLastCharButNotFirstChar\
    \ = words.last.contains(lastChar) && !lastChar.isLetter && !words.last.contains(txt.head)\
    \ && !txt.last.isLetter && !txt.head.isLetter && !txt.last.isLetter && !txt.head.isLetter\n\
    \        val lastCharIsNotWordButNotLastCharButNotFirstCharButNotLastCharButNotFirstCharButNotLastCharButNotFirstCharButNotLastChar\
    \ = words.last.contains(lastChar) && !lastChar.isLetter && !words.last.contains(txt.head)\
    \ && !txt.last.isLetter && !txt.head.isLetter && !txt.last.isLetter && !txt.head.isLetter\
    \ && !txt.last.isLetter\n        val lastCharIsNotWordButNotLastCharButNotFirstCharButNotLastCharButNotFirstCharButNotLastCharButNotFirstCharButNotLastCharButNotFirstChar\
    \ = words.last.contains(lastChar) && !lastChar.isLetter && !words.last.contains(txt.head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7kwi0mz9.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7kwi0mz9.scala:16:49\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mlastCharIsLetter\e[0m = lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value isLetter is not a member of String\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7kwi0mz9.scala:26:5 ---------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659793001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastWord\
    \ = words(words.length-1)\n        val lastChar = lastWord.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        !isLetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpie6mmher.scala:22)\n\tat Problem.main(tmpie6mmher.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val lastCharIsLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val lastCharIsNotWord = lastChar\
    \ != ' ' && lastChar != '\\t'\n        lastCharIsLetter && !lastCharIsNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcj1ckwip.scala:21)\n\tat Problem.main(tmpcj1ckwip.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793002
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9xn6lz6g.scala:16:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.matches(\"[a-zA-Z]+\"\
    )\n        !isLetter\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpc2suqrgx.scala:15)\n\tat Problem$.main(tmpc2suqrgx.scala:20)\n\
    \tat Problem.main(tmpc2suqrgx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4vas0bcm.scala:21)\n\tat Problem.main(tmp4vas0bcm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4vas0bcm.scala:21)\n\tat Problem.main(tmp4vas0bcm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).last.contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt49y5z1d.scala:21)\n\tat Problem.main(tmpt49y5z1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793002
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastWord\
    \ = words(words.length-1)\n        val lastChar = lastWord.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        !isLetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpie6mmher.scala:22)\n\tat Problem.main(tmpie6mmher.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.toString.matches(\"\
    [a-zA-Z]\")\n        val lastCharIsNotWord = words.last.contains(lastChar)\n \
    \       lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpi6azhh46.scala:15)\n\tat Problem$.main(tmpi6azhh46.scala:21)\n\
    \tat Problem.main(tmpi6azhh46.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793001
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.toString.isLetter\n\
    \        val lastCharIsNotWord = lastChar.isLetter\n        val lastCharIsNotWordOrSpace\
    \ = lastChar.isLetter && !lastChar.isSpace\n        val lastCharIsNotWordOrSpaceOrEmpty\
    \ = lastChar.isLetter && !lastChar.isSpace && !lastChar.isEmpty\n        val lastCharIsNotWordOrSpaceOrEmptyOrNull\
    \ = lastChar.isLetter && !lastChar.isSpace && !lastChar.isEmpty && !lastChar.isNull\n\
    \        val lastCharIsNotWordOrSpaceOrEmptyOrNullOrEmpty = lastChar.isLetter\
    \ && !lastChar.isSpace && !lastChar.isEmpty && !lastChar.isNull && !lastChar.isEmpty\n\
    \        val lastCharIsNotWordOrSpaceOrEmptyOrNullOrEmptyOrNull = lastChar.isLetter\
    \ && !lastChar.isSpace && !lastChar.isEmpty && !lastChar.isNull && !lastChar.isEmpty\
    \ && !lastChar.isNull\n        val lastCharIsNotWordOrSpaceOrEmptyOrNullOrEmptyOrNull\
    \ = lastChar.isLetter && !lastChar.isSpace && !lastChar.isEmpty && !lastChar.isNull\
    \ && !lastChar.isEmpty && !lastChar.isNull && !lastChar.isEmpty\n        val lastCharIsNotWordOrSpaceOrEmptyOrNullOrEmptyOrNull\
    \ = lastChar.isLetter && !lastChar.isSpace && !lastChar.isEmpty && !lastChar.isNull\
    \ && !lastChar.isEmpty && !lastChar.isNull && !lastChar.isEmpty && !lastChar.isNull\n\
    \        val lastCharIsNotWordOrSpaceOrEmptyOrNullOrEmptyOrNullOrEmpty = lastChar.isLetter\
    \ && !lastChar.isSpace && !lastChar.isEmpty && !lastChar.isNull && !lastChar.isEmpty\
    \ && !lastChar.isNull && !lastChar.isEmpty && !lastChar.isNull && !lastChar.isEmpty\n\
    \        val lastCharIsNotWordOrSpaceOrEmptyOrNullOrEmptyOrNullOrEmpty = lastChar.isLetter\
    \ && !lastChar.isSpace && !lastChar.isEmpty && !lastChar.isNull && !lastChar.isEmpty\
    \ && !lastChar.isNull && !lastChar.isEmpty && !lastChar.isNull && !lastChar.isEmpty\
    \ && !lastChar.isNull\n        val lastCharIsNotWordOrSpaceOrEmptyOrNullOrEmptyOrNullOrEmpty\
    \ = lastChar.is\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprho6prti.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWordOrSpaceOrEmptyOrNullOrEmptyOrNull\e\
    [0m = lastChar.isLetter && !lastChar.isSpace && !lastChar.isEmpty && !lastChar.isNull\
    \ && !lastChar.isEmpty && !lastChar.isNull && !lastChar.isEmpty\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsNotWordOrSpaceOrEmptyOrNullOrEmptyOrNull is already\
    \ defined as \e[33mvalue\e[0m \e[35mlastCharIsNotWordOrSpaceOrEmptyOrNullOrEmptyOrNull\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprho6prti.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWordOrSpaceOrEmptyOrNullOrEmptyOrNull\e\
    [0m = lastChar.isLetter && !lastChar.isSpace && !lastChar.isEmpty && !lastChar.isNull\
    \ && !lastChar.isEmpty && !lastChar.isNull && !lastChar.isEmpty && !lastChar.isNull\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsNotWordOrSpaceOrEmptyOrNullOrEmptyOrNull is already\
    \ defined as \e[33mvalue\e[0m \e[35mlastCharIsNotWordOrSpaceOrEmptyOrNullOrEmptyOrNull\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprho6prti.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWordOrSpaceOrEmptyOrNullOrEmptyOrNullOrEmpty\e\
    [0m = lastChar.isLetter && !lastChar.isSpace && !lastChar.isEmpty && !lastChar.isNull\
    \ && !lastChar.isEmpty && !lastChar.is"
  stdout: ''
  timestamp: 1659793002
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastWord\
    \ = words(words.length-1)\n        val lastChar = lastWord.charAt(lastWord.length-1)\n\
    \        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n        !isLetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp715rounv.scala:22)\n\tat Problem.main(tmp715rounv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val lastCharIsLetter\
    \ = lastChar match {\n            case c if c.isLetter => true\n            case\
    \ _ => false\n        }\n        val lastCharIsNotWord = lastChar match {\n  \
    \          case c if c.isLetter && c.isLetter && c.isLetter => false\n       \
    \     case _ => true\n        }\n        lastCharIsLetter && !lastCharIsNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprqh49hu9.scala:26)\n\tat Problem.main(tmprqh49hu9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793002
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.toString.matches(\"\
    [a-zA-Z]\")\n        val lastCharIsNotWord = words.last.forall(_.toString.matches(\"\
    [a-zA-Z]\"))\n        !lastCharIsLetter && !lastCharIsNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpkyzlo3kv.scala:15)\n\tat Problem$.main(tmpkyzlo3kv.scala:21)\n\
    \tat Problem.main(tmpkyzlo3kv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastWord\
    \ = words(words.length-1)\n        val lastChar = lastWord.last\n        val isLetter\
    \ = lastChar.isLetter\n        val isNotWord = lastWord.forall(_.isLetter)\n \
    \       isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqjp678k6.scala:23)\n\tat Problem.main(tmpqjp678k6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793002
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val lastCharIsLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val lastCharIsNotWord = lastChar\
    \ != ' ' && lastChar != '\\t'\n        lastCharIsLetter && lastCharIsNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpabtx0qpf.scala:20)\n\tat Problem.main(tmpabtx0qpf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     !lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0rh2o45m.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     !lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0rh2o45m.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3up1_2m4.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val isLetter = lastChar.forall(_.isLetter)\n\
    \        val isNotWord = words.last.forall(_.contains(lastChar))\n        isLetter\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3y59tyrp.scala:17:44 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = words.last.forall(_.contains(lastChar))\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  value contains is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3up1_2m4.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        if(lastChar.isLetter)\
    \ {\n            val words = txt.split(\" \").filter(_.nonEmpty)\n           \
    \ val lastWord = words.last\n            val lastWordChar = lastWord.last\n  \
    \          if(lastWordChar.isLetter) {\n                val lastWordChars = lastWord.dropRight(1).mkString\n\
    \                if(lastWordChars.contains(lastChar)) {\n                    return\
    \ false\n                }\n            }\n        }\n        return true\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9zp8ljmr.scala:29)\n\tat Problem.main(tmp9zp8ljmr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793002
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastWord\
    \ = words(words.length-1)\n        val lastChar = lastWord.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        !isLetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpie6mmher.scala:22)\n\tat Problem.main(tmpie6mmher.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3up1_2m4.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \").toList\n     \
    \   val lastChar = words(txt.length-1)\n        val lastCharIsLetter = lastChar.toString.isLetter\n\
    \        val lastCharIsNotWord = words.last.contains(lastChar)\n        val isLastCharNotWord\
    \ = lastCharIsNotWord && lastCharIsLetter\n        isLastCharNotWord\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpulih86gz.scala:16:49 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsLetter\e[0m =\
    \ lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                          \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \        value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659793001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4vas0bcm.scala:21)\n\tat Problem.main(tmp4vas0bcm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9xn6lz6g.scala:16:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659792990
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val lastCharIsLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val lastCharIsNotWord = lastChar\
    \ != ' ' && lastChar != '\\n'\n        lastCharIsLetter && !lastCharIsNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptaf8ggka.scala:21)\n\tat Problem.main(tmptaf8ggka.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793002
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.toString.matches(\"\
    [a-zA-Z]\")\n        val lastCharIsNotWord = words.last.forall(_.toString.matches(\"\
    [a-zA-Z]\"))\n        !lastCharIsLetter && !lastCharIsNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpkyzlo3kv.scala:15)\n\tat Problem$.main(tmpkyzlo3kv.scala:21)\n\
    \tat Problem.main(tmpkyzlo3kv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(Character.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(Character.isLetter)\n     \
    \   !lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmp9zph26o5.scala:15)\n\tat Problem$.main(tmp9zph26o5.scala:21)\n\
    \tat Problem.main(tmp9zph26o5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792996
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
    apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
    ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
    \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val words = txt.split(\" \")\n        val lastChar\
    \ = words(txt.length-1)\n        val lastCharIsLetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotWord = words.last.forall(_.contains(lastChar))\n   \
    \     !lastCharIsLetter && !lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0rh2o45m.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792990
