name: HumanEval_111_histogram
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n    // of the letter with the most repetition and containing the\
  \ corresponding count.\n    // If several letters have the same occurrence, return\
  \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1, 'c':\
  \ 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a b c a\
  \ b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n    // histogram('')\
  \ == {}\n    def histogram(test : String) : Map[String,Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b\
  \ b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
  a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
  a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"\
  d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
  r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"\
  b\" -> 4l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\"\
  \ -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
  \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n    }\n\
  \n}\n"
completions: ["        val letters = test.split(\" \").toList\n        val histogram\
    \ = mutable.Map[String,Long]()\n        letters.foreach(letter => {\n        \
    \    val count = histogram.getOrElse(letter, 0)\n            histogram.put(letter,\
    \ count + 1)\n        })\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        for\
    \ (letter <- letters) {\n            histogram.put(letter, histogram.getOrElse(letter,\
    \ 0L) + 1)\n        }\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            map.put(letter,map.getOrElse(letter,0)+1)\n        })\n  \
    \      map.toMap", "        val letters = test.split(\" \").toList\n        val\
    \ histogram = mutable.Map[String,Long]()\n        for (letter <- letters) {\n\
    \            val count = histogram.getOrElse(letter, 0)\n            histogram.put(letter,\
    \ count + 1)\n        }\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            histogram.update(letter,histogram.getOrElse(letter,0L) + 1L)\n\
    \        })\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            histogram.put(letter,histogram.getOrElse(letter,0L)+1L)\n\
    \        })\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = histogram.getOrElse(letter, 0)\n            histogram.put(letter,\
    \ count + 1)\n        })\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => counts(letter) += 1)\n        counts.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        for\
    \ (letter <- letters) {\n            val count = histogram.getOrElse(letter, 0)\n\
    \            histogram.put(letter, count + 1)\n        }\n        histogram.toMap",
  "        val letters = test.toCharArray.distinct\n        val histogram = mutable.HashMap.empty[String,Long]\n\
    \        for (letter <- letters) {\n            histogram.put(letter, histogram.getOrElse(letter,0L)\
    \ + 1)\n        }\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val letterCounts = mutable.Map[String,Long]()\n        for\
    \ (letter <- letters) {\n            val count = letterCounts.getOrElse(letter,0)\n\
    \            letterCounts += letter -> count + 1\n        }\n        letterCounts.toMap",
  "        val letters = test.toCharArray\n        val histogram = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = histogram.getOrElse(letter,\
    \ 0)\n            histogram.put(letter, count + 1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = histogram.getOrElse(letter,\
    \ 0)\n            histogram.put(letter, count + 1)\n        })\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val letterCounts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = letterCounts.maxBy(_._2)._1\n\
    \        val maxLetters = letterCounts.filter(_._2 == maxCount).map(_._1)\n  \
    \      val histogram = letterCounts.filter(_._2 != maxCount).map(_._1)\n     \
    \   letterCounts.filter(_._2 == maxCount).map(_._1)", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.HashMap.empty[String,Long]\n   \
    \     for (letter <- letters) {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        }\n        histogram.toMap",
  "        val histogram = mutable.Map[String,Long]()\n        test.split(' ').foreach(letter\
    \ => {\n            val count = histogram.getOrElse(letter, 0)\n            histogram.put(letter,\
    \ count + 1)\n        })\n        histogram.toMap", "        val histogram = mutable.HashMap.empty[String,Long]\n\
    \        test.split(\" \").foreach(letter => {\n            histogram.put(letter,\
    \ histogram.getOrElse(letter, 0L) + 1)\n        })\n        histogram.toMap",
  "        val histogram = mutable.HashMap.empty[String,Long]\n        test.split('\
    \ ').foreach(letter => histogram.update(letter, histogram.getOrElse(letter,0L)\
    \ + 1L))\n        histogram.toMap", "        val letters = test.split(\" \").toList\n\
    \        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = histogram.getOrElse(letter,0)\n            histogram.put(letter,count+1)\n\
    \        })\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = histogram.getOrElse(letter,0)\n            histogram.put(letter,count+1)\n\
    \        })\n        histogram.toMap"]
stop_tokens:
- "\n    }\n"
