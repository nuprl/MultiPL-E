name: HumanEval_111_histogram
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n    // of the letter with the most repetition and containing the\
  \ corresponding count.\n    // If several letters have the same occurrence, return\
  \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1, 'c':\
  \ 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a b c a\
  \ b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n    // histogram('')\
  \ == {}\n    def histogram(test : String) : Map[String,Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b\
  \ b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
  a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
  a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"\
  d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
  r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"\
  b\" -> 4l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\"\
  \ -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
  \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n    }\n\
  \n}\n"
completions: ["        val letters = test.split(\" \").toList\n        val histogram\
    \ = mutable.Map[String,Long]()\n        letters.foreach(letter => {\n        \
    \    val count = histogram.getOrElse(letter, 0)\n            histogram.put(letter,\
    \ count + 1)\n        })\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        for\
    \ (letter <- letters) {\n            histogram.put(letter, histogram.getOrElse(letter,\
    \ 0L) + 1)\n        }\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            map.put(letter,map.getOrElse(letter,0)+1)\n        })\n  \
    \      map.toMap", "        val letters = test.split(\" \").toList\n        val\
    \ histogram = mutable.Map[String,Long]()\n        for (letter <- letters) {\n\
    \            val count = histogram.getOrElse(letter, 0)\n            histogram.put(letter,\
    \ count + 1)\n        }\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            histogram.update(letter,histogram.getOrElse(letter,0L) + 1L)\n\
    \        })\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            histogram.put(letter,histogram.getOrElse(letter,0L)+1L)\n\
    \        })\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = histogram.getOrElse(letter, 0)\n            histogram.put(letter,\
    \ count + 1)\n        })\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => counts(letter) += 1)\n        counts.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        for\
    \ (letter <- letters) {\n            val count = histogram.getOrElse(letter, 0)\n\
    \            histogram.put(letter, count + 1)\n        }\n        histogram.toMap",
  "        val letters = test.toCharArray.distinct\n        val histogram = mutable.HashMap.empty[String,Long]\n\
    \        for (letter <- letters) {\n            histogram.put(letter, histogram.getOrElse(letter,0L)\
    \ + 1)\n        }\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val letterCounts = mutable.Map[String,Long]()\n        for\
    \ (letter <- letters) {\n            val count = letterCounts.getOrElse(letter,0)\n\
    \            letterCounts += letter -> count + 1\n        }\n        letterCounts.toMap",
  "        val letters = test.toCharArray\n        val histogram = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = histogram.getOrElse(letter,\
    \ 0)\n            histogram.put(letter, count + 1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = histogram.getOrElse(letter,\
    \ 0)\n            histogram.put(letter, count + 1)\n        })\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val letterCounts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = letterCounts.maxBy(_._2)._1\n\
    \        val maxLetters = letterCounts.filter(_._2 == maxCount).map(_._1)\n  \
    \      val histogram = letterCounts.filter(_._2 != maxCount).map(_._1)\n     \
    \   letterCounts.filter(_._2 == maxCount).map(_._1)", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.HashMap.empty[String,Long]\n   \
    \     for (letter <- letters) {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        }\n        histogram.toMap",
  "        val histogram = mutable.Map[String,Long]()\n        test.split(' ').foreach(letter\
    \ => {\n            val count = histogram.getOrElse(letter, 0)\n            histogram.put(letter,\
    \ count + 1)\n        })\n        histogram.toMap", "        val histogram = mutable.HashMap.empty[String,Long]\n\
    \        test.split(\" \").foreach(letter => {\n            histogram.put(letter,\
    \ histogram.getOrElse(letter, 0L) + 1)\n        })\n        histogram.toMap",
  "        val histogram = mutable.HashMap.empty[String,Long]\n        test.split('\
    \ ').foreach(letter => histogram.update(letter, histogram.getOrElse(letter,0L)\
    \ + 1L))\n        histogram.toMap", "        val letters = test.split(\" \").toList\n\
    \        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = histogram.getOrElse(letter,0)\n            histogram.put(letter,count+1)\n\
    \        })\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = histogram.getOrElse(letter,0)\n            histogram.put(letter,count+1)\n\
    \        })\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val counts = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = letters.count(_ == letter)\n        \
    \    counts(letter) = count\n        }\n        counts.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n \
    \       letters.foreach(letter => {\n            map.put(letter,map.getOrElse(letter,0)+1)\n\
    \        })\n        map.toMap", "        val letters = test.split(\" \").toList\n\
    \        val counts = mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            counts(letter) += letters.length\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map.empty[String,Long]\n\
    \        letters.foreach(letter => {\n            histogram.update(letter,histogram.getOrElse(letter,0)+1)\n\
    \        })\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val counts = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            counts(letter) match {\n                case None\
    \ => {\n                    counts += letter -> (1L)\n                }\n    \
    \            case Some(count) => {\n                    counts(letter) += 1\n\
    \                }\n            }\n        }\n        counts.toMap", "       \
    \ val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            histogram.update(letter, histogram.getOrElse(letter,\
    \ 0L) + 1L)\n        })\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = histogram.getOrElse(letter,0)\n            histogram.put(letter,count+1)\n\
    \        })\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val histogram = mutable.HashMap.empty[String,Long]\n       \
    \ letters.foreach(letter => {\n            histogram.put(letter,histogram.getOrElse(letter,0L)+1L)\n\
    \        })\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            histogram.put(letter,histogram.getOrElse(letter,0L)+1L)\n\
    \        })\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val letterCounts = letters.groupBy(x => x).mapValues(_.size)\n\
    \        val maxCount = letterCounts.max\n        val maxLetter = letterCounts.maxBy(_._2)._1\n\
    \        val maxLetterCount = letterCounts.maxBy(_._2)._2\n        val maxLetterCounts\
    \ = letterCounts.filter(x => x._2 == maxLetterCount)\n        val maxLetterCountMap\
    \ : Map[String,Long] = maxLetterCounts.map{case (k, v) => k -> v}.toMap\n    \
    \    val maxLetterCountMapWithMaxCount : Map[String,Long] = maxLetterCountMap\
    \ + (maxLetter -> maxCount)\n        val maxLetterCountMapWithMaxCountWithMaxCount\
    \ : Map[String,Long] = maxLetterCountMapWithMaxCount.filter(_._2 > maxCount)\n\
    \        val maxLetterCountMapWithMaxCountWithMaxCountWithMaxCount : Map[String,Long]\
    \ = maxLetterCountMapWithMaxCountWithMaxCount.filter(_._2 > maxCount)\n      \
    \  val maxLetterCountMapWithMaxCountWithMaxCountWithMaxCountWithMaxCount : Map[String,Long]\
    \ = maxLetterCountMapWithMaxCountWithMaxCountWithMaxCount.filter(_._2 > maxCount)\n\
    \        val maxLetterCountMapWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ : Map[String,Long] = maxLetterCountMapWithMaxCountWithMaxCountWithMaxCount.filter(_._2\
    \ > maxCount)\n        val maxLetterCountMapWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ : Map[String,Long] = maxLetterCountMapWithMaxCountWithMaxCountWithMaxCountWithMaxCount.filter(_._2\
    \ > maxCount)\n        val maxLetterCountMapWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ : Map[String,Long] = maxLetterCountMapWithMaxCountWithMaxCountWithMaxCountWithMaxCount.filter(_._2\
    \ > maxCount)\n        val maxLetterCountMapWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ : Map[String,Long] = maxLetterCountMapWithMaxCountWithMaxCountWithMaxCountWithMaxCount.filter(_._2\
    \ > maxCount)\n        val maxLetterCountMapWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMax",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            histogram.put(letter, histogram.getOrElse(letter,\
    \ 0L) + 1)\n        })\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = histogram.getOrElse(letter, 0)\n            histogram.put(letter,\
    \ count + 1)\n        })\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        for\
    \ (letter <- letters) {\n            histogram(letter) += letters.length\n   \
    \     }\n        histogram.toMap", "        val letters = test.split(\" \").toList\n\
    \        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = histogram.getOrElse(letter,0)\n            histogram.put(letter,count+1)\n\
    \        })\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            histogram.put(letter, histogram.getOrElse(letter, 0L) + 1)\n\
    \        })\n        histogram.toMap", "        val letters = test.toCharArray.distinct\n\
    \        val counts = mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            val count = letters.count(_ == letter)\n            counts +=\
    \ letter -> count\n        }\n        counts.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map.empty[String,Long]\n       \
    \ letters.foreach(letter => {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        })\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        })\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = histogram.getOrElse(letter,\
    \ 0)\n            histogram.put(letter, count + 1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map.empty[String,Long]\n\
    \        letters.foreach(letter => {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        })\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> (count + 1))\n        }\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = histogram.getOrElse(letter,\
    \ 0)\n            histogram.put(letter, count + 1)\n        })\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map.empty[String,Long]\n\
    \        for (letter <- letters) {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> (count + 1))\n        }\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = letters.count(_\
    \ == letter)\n            counts += letter -> count\n        })\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.HashMap.empty[String,Long]\n\
    \        for (letter <- letters) {\n            val count = histogram.getOrElse(letter,\
    \ 0)\n            histogram.put(letter, count + 1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.HashMap[String,Long]()\n\
    \        letters.foreach(letter => {\n            histogram.put(letter,histogram.getOrElse(letter,0L)+1)\n\
    \        })\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter, 0)\n            map += (letter\
    \ -> (count + 1))\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = histogram.getOrElse(letter, 0)\n            histogram.put(letter,\
    \ count + 1)\n        })\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = histogram.getOrElse(letter,0)\n            histogram.put(letter,count+1)\n\
    \        })\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val histogram = mutable.Map.empty[String,Long]\n        for\
    \ (letter <- letters) {\n            val count = histogram.getOrElse(letter, 0)\n\
    \            histogram.put(letter, count + 1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = histogram.getOrElse(letter,\
    \ 0)\n            histogram.put(letter, count+1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val map = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = map.maxBy(_._2)._2\n       \
    \ val maxLetters = map.filter(_._2 == maxCount).map(_._1)\n        val maxLettersCount\
    \ = maxLetters.map(x => x -> map.get(x))\n        val maxLettersCountMap = maxLettersCount.toMap\n\
    \        val maxLettersCountMapSorted = maxLettersCountMap.sortBy(_._1).reverse\n\
    \        val maxLettersCountMapSortedKeys = maxLettersCountMapSorted.map(_._1)\n\
    \        val maxLettersCountMapSortedValues = maxLettersCountMapSorted.map(_._2)\n\
    \        val maxLettersCountMapSortedKeysAndValues = maxLettersCountMapSorted.map{case\
    \ (k,v) => (k,v)}\n        val maxLettersCountMapSortedKeysAndValuesSorted = maxLettersCountMapSortedKeysAndValues.sortBy(_._1).reverse\n\
    \        val maxLettersCountMapSortedKeysAndValuesSortedKeys = maxLettersCountMapSortedKeysAndValuesSorted.map(_._1)\n\
    \        val maxLettersCountMapSortedKeysAndValuesSortedValues = maxLettersCountMapSortedKeysAndValuesSorted.map(_._2)\n\
    \        val maxLettersCountMapSortedKeysAndValuesSortedKeysAndValues = maxLettersCountMapSortedKeysAndValuesSorted.map{case\
    \ (k,v) => (k,v)}\n        val maxLettersCountMapSortedKeysAndValuesSortedKeysAndValuesSorted\
    \ = maxLettersCountMapSortedKeysAndValuesSortedKeysAndValues.sortBy(_._1).reverse\n\
    \        val maxLettersCountMapSortedKeysAndValuesSortedKeysAndValuesSortedKeys\
    \ = maxLettersCountMapSortedKeysAndValuesSortedKeysAndValuesSorted.map(_._1)\n\
    \        val maxLettersCountMapSortedKeysAndValuesSortedKeysAndValuesSortedValues\
    \ = maxLettersCountMapSortedKeysAndValuesSortedKeysAndValuesSorted.map(_._2)\n\
    \        val maxLettersCountMapSortedKeysAndValuesSortedKeysAndValuesSortedKeysAndValues\
    \ = maxLettersCountMapSortedKeysAndValuesSortedKeysAndValuesSorted.map{case (k,v)\
    \ => (k,v)}\n        val maxLettersCountMapSortedKeysAndValuesSortedKeysAndValuesSortedKeysAndValuesSorted\
    \ = maxLettersCountMapSortedKeysAndValuesSortedKeysAndValuesSortedKeysAndValues.",
  "        val histogram = mutable.Map[String,Long]()\n        test.split(\" \").foreach(letter\
    \ => {\n            histogram.put(letter, histogram.getOrElse(letter, 0L) + 1)\n\
    \        })\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = histogram.getOrElse(letter,0)\n            histogram.put(letter,count+1)\n\
    \        })\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0)\n            map += (letter\
    \ -> (count+1))\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = histogram.getOrElse(letter, 0)\n            histogram.put(letter,\
    \ count + 1)\n        })\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        for\
    \ (letter <- letters) {\n            val count = histogram.getOrElse(letter, 0)\n\
    \            histogram.put(letter, count + 1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            histogram.update(letter,histogram.getOrElse(letter,0)+1)\n\
    \        })\n        histogram.toMap", "        val histogram = mutable.Map[String,Long]()\n\
    \        test.toList.flatMap(x => x.toList).groupBy(x => x).mapValues(_.size).foreach(x\
    \ => histogram += x -> x._2)\n        histogram.toMap", "        val letters =\
    \ test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            histogram.put(letter, histogram.getOrElse(letter,\
    \ 0L) + 1)\n        })\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        for\
    \ (letter <- letters) {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = histogram.getOrElse(letter,\
    \ 0L)\n            histogram.put(letter, count + 1L)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = letters.count(_ ==\
    \ letter)\n            counts += letter -> count\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val letterCounts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = letterCounts.maxBy(_._2)._2\n\
    \        val maxLetters = letterCounts.filter(_._2 == maxCount).map(_._1)\n  \
    \      val maxLetterCounts = letterCounts.filter(_._2 == maxCount)\n        val\
    \ maxLetterCountMap = new mutable.HashMap[String,Long]()\n        for (letter\
    \ <- maxLetters) {\n            maxLetterCountMap.put(letter, letterCounts(letter).max)\n\
    \        }\n        maxLetterCountMap", "        val letters = test.split(\" \"\
    ).toList\n        val histogram = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            histogram.put(letter, histogram.getOrElse(letter,\
    \ 0L) + 1)\n        }\n        histogram.toMap", "        val histogram = mutable.Map[String,Long]()\n\
    \        test.split(\" \").foreach(letter => {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        })\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            histogram.put(letter, histogram.getOrElse(letter,0L)\
    \ + 1)\n        })\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        for\
    \ (letter <- letters) {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            counts(letter) += 1\n      \
    \  })\n        counts.toMap", "        val letters = test.split(\" \").toList\n\
    \        val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            counts(letter) += 1\n        })\n        counts.toMap", " \
    \       val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = histogram.getOrElse(letter,\
    \ 0)\n            histogram.put(letter, count + 1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            map.put(letter, map.getOrElse(letter,\
    \ 0L) + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        for\
    \ (letter <- letters) {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            histogram.put(letter, histogram.getOrElse(letter,\
    \ 0L) + 1)\n        })\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        for\
    \ (letter <- letters) {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val letterCounts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = letterCounts.maxBy(_._2)._2\n\
    \        val maxLetters = letterCounts.filter(_._2 == maxCount).map(_._1)\n  \
    \      val histogram = letterCounts.filter(_._2 > 1).map(_._1).groupBy(x => x).mapValues(_.size)\n\
    \        val maxHistogram = histogram.maxBy(_._2)._2\n        val maxLettersHistogram\
    \ = histogram.filter(_._2 == maxCount).map(_._1)\n        val maxLettersHistogramWithMaxCount\
    \ = maxLettersHistogram.filter(_._2 == maxCount)\n        val maxLettersHistogramWithMaxCountWithMaxLetter\
    \ = maxLettersHistogramWithMaxCount.filter(_._2 == maxLetters.max)\n        val\
    \ maxLettersHistogramWithMaxCountWithMaxLetterWithMaxHistogram = maxLettersHistogramWithMaxCountWithMaxLetter.filter(_._2\
    \ == maxHistogram)\n        val maxLettersHistogramWithMaxCountWithMaxLetterWithMaxHistogramWithMaxCount\
    \ = maxLettersHistogramWithMaxCountWithMaxLetterWithMaxHistogram.filter(_._2 ==\
    \ maxCount)\n        val maxLettersHistogramWithMaxCountWithMaxLetterWithMaxHistogramWithMaxCountWithMaxLetter\
    \ = maxLettersHistogramWithMaxCountWithMaxLetterWithMaxHistogramWithMaxCount.filter(_._2\
    \ == maxLetters.max)\n        val maxLettersHistogramWithMaxCountWithMaxLetterWithMaxHistogramWithMaxCountWithMaxLetterWithMaxHistogram\
    \ = maxLettersHistogramWithMaxCountWithMaxLetterWithMaxHistogramWithMaxCountWithMaxLetter.filter(_._2\
    \ == maxHistogram)\n        val maxLettersHistogramWithMaxCountWithMaxLetterWithMaxHistogramWithMaxCountWithMaxLetterWithMaxHistogramWithMaxCount\
    \ = maxLettersHistogramWithMaxCountWithMaxLetterWithMaxHistogramWithMaxCountWithMaxLetter.filter(_._2\
    \ == maxCount)\n        val maxLettersHistogramWithMaxCountWithMaxLetterWithMaxHistogramWithMaxCountWithMaxLetterWithMaxHistogramWithMaxCountWithMaxLetter\
    \ = maxLettersHistogramWithMaxCountWithMaxLetterWithMaxHistogramWithMaxCountWithMaxLetterWithMaxHistogram.filter(_._2\
    \ == maxLetters.max)\n        val maxLettersHistogramWithMaxCountWithMaxLetterWithMaxHistogramWithMaxCountWithMaxLetterWithMaxHistogramWithMaxCountWithMaxLetterWithMaxHistogram\
    \ = maxLettersHistogramWithMaxCountWithMaxLetter", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter, 0)\n            map += (letter\
    \ -> (count + 1))\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = histogram.getOrElse(letter, 0)\n            histogram.put(letter,\
    \ count + 1)\n        })\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = histogram.getOrElse(letter, 0)\n            histogram.put(letter,\
    \ count + 1)\n        })\n        histogram.toMap", "        val histogram = mutable.HashMap.empty[String,Long]\n\
    \        test.split(\" \").foreach(letter => {\n            histogram.updated(letter,\
    \ histogram.getOrElse(letter, 0L) + 1)\n        })\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = histogram.getOrElse(letter,\
    \ 0)\n            histogram.put(letter, count + 1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map.empty[String,Long]\n\
    \        letters.foreach(letter => {\n            val count = histogram.getOrElse(letter,\
    \ 0)\n            histogram.put(letter, count + 1)\n        })\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            histogram.put(letter, histogram.getOrElse(letter,\
    \ 0L) + 1)\n        }\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = histogram.getOrElse(letter,0)\n            histogram.put(letter,count+1)\n\
    \        })\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val histogram = mutable.HashMap.empty[String,Long]\n       \
    \ letters.foreach(letter => {\n            val count = histogram.getOrElse(letter,\
    \ 0)\n            histogram.put(letter, count + 1)\n        })\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.HashMap.empty[String,Long]\n\
    \        for (letter <- letters) {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map.empty[String,Long]\n\
    \        letters.foreach(letter => {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        })\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> (count+1))\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            histogram.put(letter, histogram.getOrElse(letter,0L)\
    \ + 1)\n        })\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        for\
    \ (letter <- letters) {\n            histogram.put(letter, histogram.getOrElse(letter,0L)\
    \ + 1)\n        }\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = histogram.getOrElse(letter, 0)\n            histogram.put(letter,\
    \ count+1)\n        })\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        for\
    \ (letter <- letters) {\n            val count = histogram.getOrElse(letter, 0)\n\
    \            histogram.put(letter, count + 1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,\
    \ 0)\n            map += (letter -> count + 1)\n        }\n        map.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        })\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = histogram.getOrElse(letter,\
    \ 0)\n            histogram.put(letter, count + 1)\n        })\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = histogram.getOrElse(letter,\
    \ 0)\n            histogram.put(letter, count + 1)\n        })\n        histogram.toMap",
  "        val histogram = mutable.HashMap.empty[String,Long]\n        test.split(\"\
    \ \").foreach(letter => histogram.put(letter, histogram.getOrElse(letter, 0L)\
    \ + 1))\n        histogram.toMap", "        val letters = test.split(\" \").toList\n\
    \        val histogram = mutable.HashMap.empty[String,Long]\n        for (letter\
    \ <- letters) {\n            histogram.put(letter, histogram.getOrElse(letter,\
    \ 0L) + 1)\n        }\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter, 0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = histogram.getOrElse(letter,0)\n            histogram.put(letter,count+1)\n\
    \        })\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val map = mutable.Map[String,Long]()\n        for (letter <-\
    \ letters) {\n            val count = map.getOrElse(letter,0)\n            map\
    \ += (letter -> count + 1)\n        }\n        map.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = histogram.getOrElse(letter,\
    \ 0)\n            histogram.put(letter, count + 1)\n        })\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.HashMap[String,Long]()\n\
    \        letters.foreach(letter => {\n            histogram.put(letter,histogram.getOrElse(letter,0L)+1)\n\
    \        })\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val histogram = mutable.HashMap.empty[String,Long]\n       \
    \ for (letter <- letters) {\n            val count = histogram.getOrElse(letter,\
    \ 0)\n            histogram.put(letter, count + 1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => map.update(letter,map.getOrElse(letter,0L)+1))\n\
    \        map.toMap", "        val letters = test.split(\" \").toList\n       \
    \ val histogram = mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            val count = histogram.getOrElse(letter,0)\n            histogram.put(letter,count+1)\n\
    \        }\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            histogram.put(letter, histogram.getOrElse(letter, 0L) + 1)\n\
    \        })\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = histogram.getOrElse(letter,0)\n            histogram.put(letter,count+1)\n\
    \        })\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val histogram = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = histogram.getOrElse(letter, 0)\n    \
    \        histogram.put(letter, count + 1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = histogram.getOrElse(letter,\
    \ 0) + 1\n            histogram.put(letter, count)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            map.update(letter,map.getOrElse(letter,0)+1)\n\
    \        })\n        map.toMap", "        val letters = test.split(\" \").toList\n\
    \        val histogram = mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            val count = histogram.getOrElse(letter, 0)\n            histogram.put(letter,\
    \ count + 1)\n        }\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        for\
    \ (letter <- letters) {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = histogram.getOrElse(letter,\
    \ 0)\n            histogram.put(letter, count+1)\n        })\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            histogram.put(letter,histogram.getOrElse(letter,0L)+1L)\n\
    \        })\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            map.update(letter, map.getOrElse(letter,0L) + 1L)\n      \
    \  })\n        map.toMap", "        val letters = test.split(\" \").toList\n \
    \       val histogram = mutable.HashMap[String,Long]()\n        letters.foreach(letter\
    \ => {\n            histogram.put(letter,histogram.getOrElse(letter,0L)+1L)\n\
    \        })\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = histogram.getOrElse(letter, 0)\n            histogram.put(letter,\
    \ count + 1)\n        })\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = histogram.getOrElse(letter, 0)\n            histogram.put(letter,\
    \ count + 1)\n        })\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            histogram.put(letter,histogram.getOrElse(letter,0)+1)\n  \
    \      })\n        histogram.toMap", "        val letters = test.split(\" \").toList\n\
    \        val histogram = mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            val count = histogram.getOrElse(letter, 0)\n            histogram.put(letter,\
    \ count + 1)\n        }\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        for\
    \ (letter <- letters) {\n            histogram(letter) += letters.length\n   \
    \     }\n        histogram.toMap", "        val histogram = mutable.Map[String,Long]()\n\
    \        test.split(\" \").foreach(letter => {\n            histogram.put(letter,\
    \ histogram.getOrElse(letter, 0L) + 1)\n        })\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => map.updated(letter,map.getOrElse(letter,0)+1))\n\
    \        map.toMap", "        val letters = test.split(\" \").toList\n       \
    \ val histogram = mutable.Map.empty[String,Long]\n        letters.foreach(letter\
    \ => {\n            histogram.update(letter, histogram.getOrElse(letter,0L) +\
    \ 1L)\n        })\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        for\
    \ (letter <- letters) {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.HashMap.empty[String,Long]\n\
    \        for (letter <- letters) {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.HashMap[String,Long]()\n\
    \        letters.foreach(letter => {\n            histogram.put(letter, histogram.getOrElse(letter,\
    \ 0L) + 1)\n        })\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            histogram.put(letter,histogram.getOrElse(letter,0L)+1L)\n\
    \        })\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val histogram = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = histogram.getOrElse(letter, 0L)\n   \
    \         histogram.put(letter, count + 1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        })\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        })\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            histogram(letter) += letters.length\n\
    \        }\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = histogram.getOrElse(letter, 0)\n            histogram.put(letter,\
    \ count + 1)\n        })\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        for\
    \ (letter <- letters) {\n            val count = histogram.getOrElse(letter, 0)\n\
    \            histogram.put(letter, count + 1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            histogram.put(letter, histogram.getOrElse(letter,0L)\
    \ + 1)\n        })\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val letterCounts = mutable.Map[String,Long]()\n        for\
    \ (letter <- letters) {\n            val count = letterCounts.getOrElse(letter,0)\n\
    \            letterCounts += letter -> count+1\n        }\n        letterCounts.toMap",
  "        val letters = test.toCharArray.distinct\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = letters.count(_\
    \ == letter)\n            counts(letter) = count\n        })\n        counts.toMap",
  "        val histogram = mutable.Map[String,Long]()\n        test.split(\" \").foreach(letter\
    \ => {\n            histogram.put(letter, histogram.getOrElse(letter, 0L) + 1)\n\
    \        })\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val histogram = mutable.Map.empty[String,Long]\n        letters.foreach(letter\
    \ => {\n            val count = histogram.getOrElse(letter, 0)\n            histogram.put(letter,\
    \ count + 1)\n        })\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = map.getOrElse(letter,0)\n           \
    \ map += (letter -> (count+1))\n        }\n        map.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n \
    \       letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> (count+1))\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = histogram.getOrElse(letter,\
    \ 0)\n            histogram.put(letter, count+1)\n        }\n        histogram.toMap",
  "        val histogram = mutable.Map[String,Long]()\n        test.split(' ').foreach(letter\
    \ => {\n            histogram.put(letter, histogram.getOrElse(letter, 0L) + 1L)\n\
    \        })\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val histogram = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = histogram.getOrElse(letter,0)\n     \
    \       histogram.put(letter,count+1)\n        }\n        histogram.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count + 1)\n        }\n        map.toMap", "  \
    \      val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = histogram.getOrElse(letter,\
    \ 0)\n            histogram.put(letter, count + 1)\n        })\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = histogram.getOrElse(letter,\
    \ 0)\n            histogram.put(letter, count + 1)\n        })\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        })\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            histogram.put(letter,histogram.getOrElse(letter,0L)+1)\n\
    \        })\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = histogram.getOrElse(letter,0)\n            histogram.put(letter,count+1)\n\
    \        })\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val histogram = mutable.HashMap[String,Long]()\n        for\
    \ (letter <- letters) {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        })\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = histogram.getOrElse(letter,\
    \ 0)\n            histogram.put(letter, count + 1)\n        })\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.HashMap.empty[String,Long]\n\
    \        letters.foreach(letter => {\n            histogram.put(letter,histogram.getOrElse(letter,0L)+1L)\n\
    \        })\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val map = mutable.Map[String,Long]()\n        for (letter <-\
    \ letters) {\n            val count = map.getOrElse(letter, 0)\n            map\
    \ += letter -> (count + 1)\n        }\n        map.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = histogram.getOrElse(letter,\
    \ 0)\n            histogram.put(letter, count + 1)\n        })\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = letters.count(_\
    \ == letter)\n            counts += letter -> count\n        })\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val letterCounts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = letterCounts.max\n        val\
    \ maxLetter = letterCounts.maxBy(_._2)\n        val maxLetterCount = maxLetter._2\n\
    \        val maxLetterKey = maxLetter._1\n        val maxLetterValue = maxLetter._2\n\
    \        val maxLetterKeyCount = letterCounts.filter(x => x._1 == maxLetterKey).maxBy(_._2)._2\n\
    \        val maxLetterValueCount = letterCounts.filter(x => x._1 == maxLetterKey).maxBy(_._2)._2\n\
    \        val maxLetterKeyValueCount = letterCounts.filter(x => x._1 == maxLetterKey).maxBy(_._2)._2\n\
    \        val maxLetterKeyValueCount2 = letterCounts.filter(x => x._1 == maxLetterKey).maxBy(_._2)._2\n\
    \        val maxLetterKeyValueCount3 = letterCounts.filter(x => x._1 == maxLetterKey).maxBy(_._2)._2\n\
    \        val maxLetterKeyValueCount4 = letterCounts.filter(x => x._1 == maxLetterKey).maxBy(_._2)._2\n\
    \        val maxLetterKeyValueCount5 = letterCounts.filter(x => x._1 == maxLetterKey).maxBy(_._2)._2\n\
    \        val maxLetterKeyValueCount6 = letterCounts.filter(x => x._1 == maxLetterKey).maxBy(_._2)._2\n\
    \        val maxLetterKeyValueCount7 = letterCounts.filter(x => x._1 == maxLetterKey).maxBy(_._2)._2\n\
    \        val maxLetterKeyValueCount8 = letterCounts.filter(x => x._1 == maxLetterKey).maxBy(_._2)._2\n\
    \        val maxLetterKeyValueCount9 = letterCounts.filter(x => x._1 == maxLetterKey).maxBy(_._2)._2\n\
    \        val maxLetterKeyValueCount10 = letterCounts.filter(x => x._1 == maxLetterKey).maxBy(_._2)._2\n\
    \        val maxLetterKeyValueCount11 = letterCounts.filter(x => x._1 == maxLetterKey).maxBy(_._2)._2\n\
    \        val maxLetterKeyValueCount12 = letterCounts.filter(x => x._1 == maxLetterKey).maxBy(_._2)._2\n\
    \        val maxLetterKeyValueCount13 = letterCounts.filter(x => x._1 == maxLetterKey).maxBy(_._2)._2\n\
    \        val maxLetterKeyValueCount14 = letterCounts.filter(x => x._", "     \
    \   val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        })\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> (count + 1))\n        }\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = histogram.getOrElse(letter,\
    \ 0)\n            histogram.put(letter, count + 1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            histogram.update(letter,histogram.getOrElse(letter,0L)\
    \ + 1L)\n        })\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = map.getOrElse(letter, 0)\n          \
    \  map += (letter -> count + 1)\n        }\n        map.toMap", "        val histogram\
    \ = mutable.HashMap.empty[String,Long]\n        test.split(' ').foreach(letter\
    \ => {\n            histogram.update(letter, histogram.getOrElse(letter, 0L) +\
    \ 1L)\n        })\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = letters.count(_ == letter)\n            counts\
    \ += letter -> count\n        })\n        counts.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        })\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = letters.count(_ ==\
    \ letter)\n            counts += letter -> count\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            map.update(letter,map.getOrElse(letter,0)+1)\n\
    \        })\n        map.toMap", "        val letters = test.split(\" \").toList\n\
    \        val histogram = mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            histogram.put(letter, histogram.getOrElse(letter,0L) + 1)\n \
    \       }\n        histogram.toMap", "        val letters = test.split(\" \").toList\n\
    \        val histogram = mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            val count = histogram.getOrElse(letter, 0)\n            histogram.put(letter,\
    \ count + 1)\n        }\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val letterCounts = letters.groupBy(x => x).mapValues(_.size)\n\
    \        val maxCount = letterCounts.max\n        val maxLetter = letterCounts.maxBy(_._2)._1\n\
    \        val maxLetterCount = letterCounts.maxBy(_._2)._2\n        val maxLetterCounts\
    \ = letterCounts.filter(_._2 == maxLetterCount).map(_._1)\n        val maxLetterCountSet\
    \ = maxLetterCounts.toSet\n        val maxLetterCountSetSet = maxLetterCountSet.toSet\n\
    \        val maxLetterCountSetSetSet = maxLetterCountSetSet.toSet\n        val\
    \ maxLetterCountSetSetSetSet = maxLetterCountSetSetSet.toSet\n        val maxLetterCountSetSetSetSetSet\
    \ = maxLetterCountSetSetSetSet.toSet\n        val maxLetterCountSetSetSetSetSetSet\
    \ = maxLetterCountSetSetSetSetSet.toSet\n        val maxLetterCountSetSetSetSetSetSet\
    \ = maxLetterCountSetSetSetSetSetSet.toSet\n        val maxLetterCountSetSetSetSetSetSetSet\
    \ = maxLetterCountSetSetSetSetSetSetSet.toSet\n        val maxLetterCountSetSetSetSetSetSetSetSet\
    \ = maxLetterCountSetSetSetSetSetSetSet.toSet\n        val maxLetterCountSetSetSetSetSetSetSetSet\
    \ = maxLetterCountSetSetSetSetSetSetSet.toSet\n        val maxLetterCountSetSetSetSetSetSetSetSet\
    \ = maxLetterCountSetSetSetSetSetSetSetSet.toSet\n        val maxLetterCountSetSetSetSetSetSetSetSetSet\
    \ = maxLetterCountSetSetSetSetSetSetSetSetSet.toSet\n        val maxLetterCountSetSetSetSetSetSetSetSetSetSet\
    \ = maxLetterCountSetSetSetSetSetSetSetSetSet.toSet\n        val maxLetterCountSetSetSetSetSetSetSetSetSetSet\
    \ = maxLetterCountSetSetSetSetSetSetSetSetSet.toSet\n        val maxLetterCountSetSetSetSetSetSetSetSetSetSet\
    \ = maxLetterCountSetSetSetSetSetSetSetSetSet.toSet\n        val maxLetterCountSetSetSetSetSetSetSetSetSetSet\
    \ = maxLetterCountSetSetSetSetSetSetSetSetSet.toSet\n        val maxLetterCountSetSetSetSetSetSetSetSetSetSetSet\
    \ = maxLetterCountSetSetSetSetSetSetSetSetSetSet", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = histogram.getOrElse(letter,0)\n            histogram.put(letter,count+1)\n\
    \        })\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val counts = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = letters.count(_ == letter)\n        \
    \    counts += letter -> count\n        }\n        counts.toMap", "        val\
    \ letters = test.split(\" \").toList\n        val histogram = mutable.Map.empty[String,Long]\n\
    \        letters.foreach(letter => {\n            val count = histogram.getOrElse(letter,\
    \ 0)\n            histogram.put(letter, count + 1)\n        })\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            map.updated(letter, map.getOrElse(letter,0L)\
    \ + 1L)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = histogram.getOrElse(letter, 0)\n            histogram.put(letter,\
    \ count + 1)\n        })\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = histogram.getOrElse(letter,0)\n            histogram.put(letter,count+1)\n\
    \        })\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = histogram.getOrElse(letter, 0)\n            histogram.put(letter,\
    \ count + 1)\n        })\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val letterMap = new mutable.HashMap[String,Long]()\n   \
    \     for (letter <- letters) {\n            val count = letterMap.getOrElse(letter,0)\n\
    \            letterMap.put(letter,count+1)\n        }\n        letterMap.toMap",
  "        val letters = test.split(\" \").toList\n        val letterCounts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = letterCounts.maxBy(_._2)._2\n\
    \        val maxLetters = letterCounts.filter(_._2 == maxCount).map(_._1)\n  \
    \      val maxLetterCounts = letterCounts.filter(_._2 == maxCount)\n        val\
    \ maxLetterCountPairs = maxLetterCounts.map(_._1)\n        val maxLetterCountPairsCount\
    \ = maxLetterCountPairs.map(x => x._2.size)\n        val maxLetterCountPairsCount\
    \ = maxLetterCountPairsCount.reduce((x,y) => x + y)\n        val maxLetterCountPairsCount\
    \ = maxLetterCountPairsCount.toInt\n        val maxLetterCountPairsCount = maxLetterCountPairsCount.toLong\n\
    \        val maxLetterCountPairsCount = maxLetterCountPairsCount.toFloat\n   \
    \     val maxLetterCountPairsCount = maxLetterCountPairsCount.toDouble\n     \
    \   val maxLetterCountPairsCount = maxLetterCountPairsCount.toBoolean\n      \
    \  val maxLetterCountPairsCount = maxLetterCountPairsCount.toChar\n        val\
    \ maxLetterCountPairsCount = maxLetterCountPairsCount.toShort\n        val maxLetterCountPairsCount\
    \ = maxLetterCountPairsCount.toByte\n        val maxLetterCountPairsCount = maxLetterCountPairsCount.toInt\n\
    \        val maxLetterCountPairsCount = maxLetterCountPairsCount.toLong\n    \
    \    val maxLetterCountPairsCount = maxLetterCountPairsCount.toFloat\n       \
    \ val maxLetterCountPairsCount = maxLetterCountPairsCount.toDouble\n        val\
    \ maxLetterCountPairsCount = maxLetterCountPairsCount.toBoolean\n        val maxLetterCountPairsCount\
    \ = maxLetterCountPairsCount.toChar\n        val maxLetterCountPairsCount = maxLetterCountPairsCount.toShort\n\
    \        val maxLetterCountPairsCount = maxLetterCountPairsCount.toByte\n    \
    \    val maxLetterCountPairsCount = maxLetterCountPairsCount.toInt\n        val\
    \ maxLetterCountPairsCount = maxLetterCountPairsCount.toLong\n        val maxLetterCountPairsCount\
    \ = maxLetterCountPairsCount.toFloat\n        val maxLetterCountPairsCount = maxLetterCountPairsCount.toDouble\n\
    \        val maxLetterCountPairsCount = maxLetterCountPairsCount.", "        val\
    \ letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            histogram.put(letter, histogram.getOrElse(letter,\
    \ 0L) + 1)\n        })\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.HashMap.empty[String,Long]\n   \
    \     for (letter <- letters) {\n            histogram.put(letter, histogram.getOrElse(letter,0L)\
    \ + 1)\n        }\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = letters.count(x => x == letter)\n            counts\
    \ += letter -> count\n        })\n        counts.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n \
    \       for (letter <- letters) {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count + 1)\n        }\n        map.toMap", "  \
    \      val histogram = mutable.Map[String,Long]()\n        test.split(' ').foreach(letter\
    \ => {\n            val count = histogram.getOrElse(letter, 0)\n            histogram.put(letter,\
    \ count + 1)\n        })\n        histogram.toMap"]
stop_tokens:
- "\n    }\n"
