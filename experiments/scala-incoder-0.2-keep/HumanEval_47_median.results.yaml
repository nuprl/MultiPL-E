language: scala
name: HumanEval_47_median
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.groupBy(x => x).mapValues(_.size).maxBy(_._2)._1\n        val median\
    \ = (l.take(n - 1) + l.take(n - 2)).sortBy(x => x).last\n        val m1 = l.take(n\
    \ - 1).sortBy(x => x).last\n        val m2 = l.take(n - 2).sortBy(x => x).last\n\
    \        val m3 = l.take(n - 3).sortBy(x => x).last\n        val m4 = l.take(n\
    \ - 4).sortBy(x => x).last\n        val m5 = l.take(n - 5).sortBy(x => x).last\n\
    \        val m6 = l.take(n - 6).sortBy(x => x).last\n        val m7 = l.take(n\
    \ - 7).sortBy(x => x).last\n        val m8 = l.take(n - 8).sortBy(x => x).last\n\
    \        val m9 = l.take(n - 9).sortBy(x => x).last\n        val m10 = l.take(n\
    \ - 10).sortBy(x => x).last\n        val m11 = l.take(n - 11).sortBy(x => x).last\n\
    \        val m12 = l.take(n - 12).sortBy(x => x).last\n        val m13 = l.take(n\
    \ - 13).sortBy(x => x).last\n        val m14 = l.take(n - 14).sortBy(x => x).last\n\
    \        val m15 = l.take(n - 15).sortBy(x => x).last\n        val m16 = l.take(n\
    \ - 16).sortBy(x => x).last\n        val m17 = l.take(n - 17).sortBy(x => x).last\n\
    \        val m18 = l.take(n - 18).sortBy(x => x).last\n        val m19 = l.take(n\
    \ - 19).sortBy(x => x).last\n        val m20 = l.take(n - 20).sortBy(x => x).last\n\
    \        val m21 = 0\n        val m22 = 0\n        val m23 = 0\n        val m24\
    \ = 0\n        val m25 = 0\n        val m26 = 0\n        val m27 = 0\n       \
    \ val m28 = 0\n        val m29 = 0\n        val m30 = 0\n        val m31 = 0\n\
    \        val m32 = 0\n        val m33 = 0\n        val m34 = 0\n        val m35\
    \ = 0\n        val m36 = 0\n        val m37 = 0\n        val m38 = 0\n       \
    \ val m39 = 0\n        val m40\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp85blfr4q.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp85blfr4q.scala:12:36\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mmedian\e[0m = (l.take(n - \e[31m1\e[0m) + l.take(n - \e[31m2\e[0m)).sortBy(\e\
    [36mx\e[0m => x).last\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp85blfr4q.scala:53:5 ---------------------\e[0m\e\
    [0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.max\n        val half = n / 2\n        val left = l.take(half)\n\
    \        val right = l.drop(half)\n        val median = (left + right).sorted.last\n\
    \        val diff = (median - m) / n\n        diff * n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl9v0il3n.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sorted.last\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0mvalue +\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.size / 2\n        val median = (l take m).sum / m\n        median\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxp_cset4.scala:16)\n\tat Problem.main(tmpxp_cset4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        if (sorted.length % 2 == 0) sorted.apply(mid)\
    \ else (sorted.apply(mid) + sorted.apply(mid - 1)).toFloat\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8v7l2rrw.scala:15)\n\tat Problem.main(tmp8v7l2rrw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ low = l.take(mid)\n            val high = l.drop(mid)\n            val m1 =\
    \ median(low)\n            val m2 = median(high)\n            (m1 + m2) / 2\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_gonb15l.scala:22)\n\tat Problem.main(tmp_gonb15l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n <= 1) 0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = math.max(left, right).asInstanceOf[Float]\n            median\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmphm6x4asi.scala:16:30 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = math.max(left,\
    \ right).asInstanceOf[\e[35mFloat\e[0m]\n\e[31m\e[31m   |\e[0m               \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m\
    \ with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments ((left : List[Long]),\
    \ (right : List[Long]))\n1 error found\n"
  stdout: ''
  timestamp: 1659792612
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.sortWith(_ < _).length\n        val half = m / 2\n        val median\
    \ = (l take half).sum / half\n        if (n < 2) median\n        else median\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp029zzrsc.scala:18)\n\tat Problem.main(tmp029zzrsc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.groupBy(x => x).mapValues(_.length).max\n        val median = (m\
    \ / 2).toFloat\n        l.map(_ - median).sum / n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvrpu5sn5.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (m / \e[31m2\e\
    [0m).toFloat\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m   |\e\
    [0mvalue / is not a member of (Long, Int), but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpvrpu5sn5.scala:13:29 -----------------------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        l.map(_ - median).sum / n\n\e[31m\e[31m   |\e[0m \
    \                            ^\e[0m\n\e[31m   |\e[0mambiguous given instances:\
    \ both \e[33mobject\e[0m \e[35mFloatIsFractional\e[0m in \e[33mobject\e[0m \e\
    [35mNumeric\e[0m and \e[33mobject\e[0m \e[35mBigIntIsIntegral\e[0m in \e[33mobject\e\
    [0m \e[35mNumeric\e[0m match type Numeric[B] of parameter num of \e[33mmethod\e\
    [0m \e[35msum\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val middle = sorted.length / 2\n        val median = if (sorted.length\
    \ % 2 == 0) sorted.apply(middle) else (sorted.apply(middle - 1) + sorted.apply(middle))\
    \ / 2.0\n        median\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp99jyyt14.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        median\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (median : AnyVal)\n\
    \e[31m   |\e[0m        Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = if (sorted.length %\
    \ 2 == 0) sorted.apply(mid) else sorted.apply(mid + 1)\n        median\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmzf3013q.scala:16)\n\tat Problem.main(tmpmzf3013q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        val median = (l take half).sorted take half\n   \
    \     val left = (l drop half).sorted take half\n        val right = (l drop half).sorted\
    \ drop half\n        val median1 = (left take half).sorted take half\n       \
    \ val median2 = (right take half).sorted take half\n        val median3 = (left\
    \ drop half).sorted drop half\n        val median4 = (right drop half).sorted\
    \ drop half\n        val median5 = median.head + median1.head + median2.head +\
    \ median3.head + median4.head\n        val median6 = median.last + median1.last\
    \ + median2.last + median3.last + median4.last\n        val median7 = median.head\
    \ + median1.head + median2.head + median3.head + median4.head + median5.head +\
    \ median6.head\n        val median8 = median.last + median1.last + median2.last\
    \ + median3.last + median4.last + median5.last + median6.last\n        val median9\
    \ = median.head + median1.head + median2.head + median3.head + median4.head +\
    \ median5.head + median6.head + median7.head\n        val median10 = median.last\
    \ + median1.last + median2.last + median3.last + median4.last + median5.last +\
    \ median6.last + median7.last + median8.head\n        val median11 = median.head\
    \ + median1.head + median2.head + median3.head + median4.head + median5.head +\
    \ median6.head + median7.head + median8.head + median9.head\n        val median12\
    \ = median.last + median1.last + median2.last + median3.last + median4.last +\
    \ median5.last + median6.last + median7.last + median8.last + median9.last + median10.head\n\
    \        val median13 = median.head + median1.head + median2.head + median3.head\
    \ + median4.head + median5.head + median6.head + median7.head + median8.head +\
    \ median9.head + median10.head + median11.head\n        val median14 = median.last\
    \ + median1.last + median2.last + median3.last + median4.last + median5.last +\
    \ median6.last + median7.last + median8.last + median9.last + median10.last +\
    \ median11.last + median12.head\n        val median15 = median.head + median1.head\
    \ + median2.head + median3.head + \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpuq8pkf4i.scala:29:81 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmedian15\e[0m = median.head\
    \ + median1.head + median2.head + median3.head + \n\e[31m\e[31m   |\e[0m     \
    \                                                                            ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpuq8pkf4i.scala:21:104 -----------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mmedian7\e[0m = median.head + median1.head + median2.head\
    \ + median3.head + median4.head + median5.head + median6.head\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                       value head is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpuq8pkf4i.scala:22:104 -----------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmedian8\e[0m = median.last +\
    \ median1.last + median2.last + median3.last + median4.last + median5.last + median6.last\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                    value last is not a member of Long\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpuq8pkf4i.scala:23:104 -----------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmedian9\e[0m = median.head\
    \ + median1.head + median2.head + median3.head + median4.head + median5.head +\
    \ median6.head + median7.head\n\e[31m\e[31m   |\e[0m                         \
    \                                                                       ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value head is not a\
    \ member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuq8pkf4i.scala:24:105\
    \ -----------------------\e[0m\e[0m\n\e[31m24 |\e[0m       "
  stdout: ''
  timestamp: 1659792613
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val sorted = l.sortWith(_ < _)\n        val half = n / 2\n        if (n % 2\
    \ == 0) {\n            sorted.last\n        } else {\n            val m1 = sorted.head\n\
    \            val m2 = sorted.last\n            (m1 + m2) / 2\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk8r2jxsw.scala:23)\n\tat Problem.main(tmpk8r2jxsw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = new Array[Long](n)\n        val right =\
    \ new Array[Long](n)\n        var i = 0\n        var j = 0\n        while (i <\
    \ n) {\n            while (j < n && l(i) < l(j)) {\n                j += 1\n \
    \           }\n            right(i) = l(j)\n            i += 1\n            j\
    \ += 1\n        }\n        while (i < n) {\n            while (j < n && l(i) >\
    \ l(j)) {\n                j += 1\n            }\n            left(i) = l(j)\n\
    \            i += 1\n            j += 1\n        }\n        val median = if (n\
    \ % 2 == 0) (left + right).sorted else (right + left).sorted\n        median(mid)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpavp627sa.scala:32:43 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = \e[33mif\e\
    [0m (n % \e[31m2\e[0m == \e[31m0\e[0m) (left + right).sorted \e[33melse\e[0m (right\
    \ + left).sorted\n\e[31m\e[31m   |\e[0m                                      ^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of Array[Long], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpavp627sa.scala:32:71 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = \e[33mif\e\
    [0m (n % \e[31m2\e[0m == \e[31m0\e[0m) (left + right).sorted \e[33melse\e[0m (right\
    \ + left).sorted\n\e[31m\e[31m   |\e[0m                                      \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member\
    \ of Array[Long], but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val median = if (n == 1) left else (left + right) / 2\n        median\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuf6j7yq2.scala:14:49 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = \e[33mif\e\
    [0m (n == \e[31m1\e[0m) left \e[33melse\e[0m (left + right) / \e[31m2\e[0m\n\e\
    [31m\e[31m   |\e[0m                                            ^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpuf6j7yq2.scala:15:8 ---------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        median\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    (median : List[Long])\n\e[31m   |\e[0m      \
    \  Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.toArray\n        val sorted = m.sortWith(_ < _)\n        val mid\
    \ = sorted.length / 2\n        if (sorted.length % 2 == 0) sorted.last else sorted.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6y44ska4.scala:17)\n\tat Problem.main(tmp6y44ska4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.min\n        val h = (n - 1) / 2\n        val i = h\n        val\
    \ j = n - 1\n        val k = (i + j) / 2\n        val median = if (l contains\
    \ k) k else 0\n        val lower = if (l contains i) i else 0\n        val upper\
    \ = if (l contains j) j else 0\n        val median = if (lower < upper) lower\
    \ else upper\n        val median = if (median == 0) 0 else median\n        median\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjr_aii4h.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = \e[33mif\e\
    [0m (lower < upper) lower \e[33melse\e[0m upper\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmedian\
    \ is already defined as \e[33mvalue\e[0m \e[35mmedian\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjr_aii4h.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmedian\e[0m = \e[33mif\e[0m (median == \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e\
    [0m median\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmedian is already defined as \e[33mvalue\e[0m \e[35mmedian\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659792612
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        median\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpofqun_b_.scala:16)\n\tat Problem.main(tmpofqun_b_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = if (left.length == 0) right else left\n            val medianValue = median.sum\
    \ / median.length\n            medianValue\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgqsysl8h.scala:22)\n\tat Problem.main(tmpgqsysl8h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val sorted = l.sorted\n        val mid = n / 2\n        val median = (sorted\
    \ take mid) match {\n            case x :: xs => x\n            case _ => sorted[mid]\n\
    \        }\n        (sorted take n) match {\n            case x :: xs => median\n\
    \            case _ => median\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpac4qcug2.scala:15:29 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m _ => sorted[mid]\n\e[31m\e\
    [31m   |\e[0m                             ^^^\e[0m\n\e[31m   |\e[0m          \
    \                   Not found: type mid\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = left.sorted match {\n                case a :: b :: Nil => math.round((a +\
    \ b) / 2)\n                case a :: b => math.round((a + b) / 2)\n          \
    \      case _ => 0\n            }\n            math.round(median)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpzwmsa57l.scala:18:45 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mcase\e[0m a :: b => math.round((a\
    \ + b) / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \           ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e\
    [33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e\
    [31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m \
    \  |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x:\
    \ Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\
    \e[31m   |\e[0m (x: String): String\n\e[31m   |\e[0mmatch arguments ((b : List[Long]))\n\
    \e[31m\e[31m-- [E134] Type Error: /tmp/tmpzwmsa57l.scala:21:17 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            math.round(median)\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mround\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Long\n\e[31m   |\e[0m (x: Float):\
    \ Int\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0mmatch arguments ((median\
    \ : AnyVal))\n2 errors found\n"
  stdout: ''
  timestamp: 1659792612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val median = (left + right).sorted.last\n        median\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe4ojomfp.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sorted.last\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0mvalue +\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val leftHalf = sorted.take(mid)\n        val rightHalf = sorted.drop(mid)\n\
    \        val medianOfLeftHalf = median(leftHalf)\n        val medianOfRightHalf\
    \ = median(rightHalf)\n        val medianOfBothHalfs = medianOfLeftHalf + medianOfRightHalf\n\
    \        val medianOfBothHalfsIsBetterThanMedian = medianOfBothHalfs > median\n\
    \        if (medianOfBothHalfsIsBetterThanMedian)\n            medianOfBothHalfs\n\
    \        else\n            median\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmp6d9tizlf.scala:15:31 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmedianOfLeftHalf\e[0m =\
    \ median(leftHalf)\n\e[31m\e[31m   |\e[0m                               ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               \e[33mvalue\e[0m \e[35mmedian\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmp6d9tizlf.scala:16:32 -----------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mmedianOfRightHalf\e[0m = median(rightHalf)\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                \e[33mvalue\e[0m \e[35mmedian\e[0m does not\
    \ take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val median = (left + right).sorted\n        median.last\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpazllszq3.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sorted\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0mvalue +\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = new Array[Long](n)\n        val right =\
    \ new Array[Long](n)\n        var i = 0\n        var j = 0\n        while (i <\
    \ n) {\n            while (j < n) {\n                if (j == mid) {\n       \
    \             right(j) = l(j)\n                    j += 1\n                } else\
    \ {\n                    left(i) = l(j)\n                    i += 1\n        \
    \        }\n            }\n            val mid1 = (left + right).sum / 2\n   \
    \         val mid2 = (left + right).sum\n            val leftSum = left.sum\n\
    \            val rightSum = right.sum\n            val leftSum2 = left.sum * left.sum\n\
    \            val rightSum2 = right.sum * right.sum\n            val leftSum3 =\
    \ left.sum * left.sum * left.sum\n            val rightSum3 = right.sum * right.sum\
    \ * right.sum\n            val leftSum4 = left.sum * left.sum * left.sum * left.sum\n\
    \            val rightSum4 = right.sum * right.sum * right.sum * right.sum\n \
    \           val leftSum5 = left.sum * left.sum * left.sum * left.sum * left.sum\n\
    \            val rightSum5 = right.sum * right.sum * right.sum * right.sum * right.sum\n\
    \            val leftSum6 = left.sum * left.sum * left.sum * left.sum * left.sum\
    \ * left.sum\n            val rightSum6 = right.sum * right.sum * right.sum *\
    \ right.sum * right.sum * right.sum\n            val leftSum7 = left.sum * left.sum\
    \ * left.sum * left.sum * left.sum * left.sum * left.sum * left.sum\n        \
    \    val rightSum7 = right.sum * right.sum * right.sum * right.sum * right.sum\
    \ * right.sum * right.sum * right.sum\n            val leftSum8 = left.sum * left.sum\
    \ * left.sum * left.sum * left.sum * left.sum * left.sum * left.sum * left.sum\
    \ * left.sum * left.sum * left.sum * left.sum * left.sum * left.sum * left.sum\
    \ * left.sum * left.sum * left.sum * left.sum * left.sum * left.sum * left.sum\
    \ * left.sum * left.sum * left.sum * left.sum * left.sum * left.sum * left.sum\
    \ * left.sum * left.sum * left.sum * left.sum * left.sum * left.sum * left.sum\
    \ * left.sum * left.sum * left.sum * left.sum * left.sum * left.sum * left.sum\
    \ * left.sum * left.sum * left.sum * left.sum * left.sum * left.sum * left.sum\
    \ * left.sum * left.sum\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvmuhfpa0.scala:53:0 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvmuhfpa0.scala:26:29\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m\
    \ \e[36mmid1\e[0m = (left + right).sum / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m \
    \                       ^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of\
    \ Array[Long], but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpvmuhfpa0.scala:27:29 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mmid2\e[0m = (left +\
    \ right).sum\n\e[31m\e[31m   |\e[0m                        ^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue + is not a member of Array[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpvmuhfpa0.scala:52:1 ---------------------\e[0m\e\
    [0m\n\e[31m52 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:  \
    \  Unit\n\e[31m   |\e[0m Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmpvmuhfpa0.scala:44:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m44 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far "
  stdout: ''
  timestamp: 1659792616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val low = sorted.drop(mid)\n        val high = sorted.takeRight(mid)\n\
    \        val lowMedian = median(low)\n        val highMedian = median(high)\n\
    \        val medianMedian = (lowMedian + highMedian) / 2\n        medianMedian\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpxxhnu9xz.scala:15:24 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlowMedian\e[0m = median(low)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                    \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpxxhnu9xz.scala:16:25 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mhighMedian\e[0m = median(high)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                      \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val leftHalf = sorted.drop(mid)\n        val rightHalf = sorted.takeRight(mid)\n\
    \        val leftMedian = median(leftHalf)\n        val rightMedian = median(rightHalf)\n\
    \        val medianOfMedians = leftMedian + rightMedian\n        val medianOfMediansIsEven\
    \ = medianOfMedians.toDouble % 2 == 0\n        if (medianOfMediansIsEven) {\n\
    \            medianOfMedians\n        } else {\n            medianOfMedians\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmp687_n4ob.scala:15:25 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mleftMedian\e[0m = median(leftHalf)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                      \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp687_n4ob.scala:16:26 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mrightMedian\e[0m = median(rightHalf)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                        \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = (left + right).sorted\n            median.last\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp7t96jcx_.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp7t96jcx_.scala:16:31 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sorted\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659792615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.slice(0, mid)\n        val right = l.slice(mid)\n\
    \        val median = (left + right).sorted\n        val medianIndex = median.indexWhere(_\
    \ > median.last)\n        median(medianIndex.toFloat)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp2qe7hlrb.scala:13:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp2qe7hlrb.scala:14:27 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sorted\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0mvalue +\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659792615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = new Array[Long](n)\n            val right = new Array[Long](n)\n    \
    \        for (i <- 0 until n) {\n                left(i) = l(i)\n            \
    \    right(i) = l(mid + i)\n            }\n            val leftMedian = median(left)\n\
    \            val rightMedian = median(right)\n            val median = (leftMedian\
    \ + rightMedian) / 2\n            median\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1yc4wor0.scala:22:26 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (leftMedian\
    \ + rightMedian) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \   ^\e[0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e[0m\
    \ \e[35mleftMedian\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val leftHalf = sorted.drop(mid)\n        val rightHalf = sorted.takeRight(mid)\n\
    \        val medianOfLeftHalf = median(leftHalf)\n        val medianOfRightHalf\
    \ = median(rightHalf)\n        val medianOfBothHalfs = medianOfLeftHalf + medianOfRightHalf\n\
    \        val medianOfBothHalfsIsBetter = (medianOfLeftHalf < medianOfRightHalf)\n\
    \        if (medianOfBothHalfsIsBetter) {\n            medianOfBothHalfs\n   \
    \     } else {\n            medianOfBothHalfsIsBetter ? medianOfLeftHalf : medianOfRightHalf\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpn1vc6shl.scala:15:31 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmedianOfLeftHalf\e[0m =\
    \ median(leftHalf)\n\e[31m\e[31m   |\e[0m                               ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               \e[33mvalue\e[0m \e[35mmedian\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmpn1vc6shl.scala:16:32 -----------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mmedianOfRightHalf\e[0m = median(rightHalf)\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                \e[33mvalue\e[0m \e[35mmedian\e[0m does not\
    \ take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1vc6shl.scala:22:59\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            medianOfBothHalfsIsBetter\
    \ ? medianOfLeftHalf : \e[35mmedianOfRightHalf\e[0m\n\e[31m\e[31m   |\e[0m   \
    \                                                        ^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                       Not found: type medianOfRightHalf\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659792615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n <= 1) return l(0)\n        val mid = n / 2\n        val left = l.take(mid)\n\
    \        val right = l.drop(mid)\n        val median = (left + right).sorted\n\
    \        val medianIndex = median.indexWhere(_ > median.last)\n        median(medianIndex\
    \ + mid)\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyepzn3v2.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sorted\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0mvalue +\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = new Array[Long](n)\n            val right = new Array[Long](n)\n    \
    \        for (i <- 0 until n) {\n                left(i) = l(i)\n            \
    \    right(i) = (i + 1) % n\n            }\n            val leftMedian = median(left)\n\
    \            val rightMedian = median(right)\n            val median = (leftMedian\
    \ + rightMedian) / 2\n            if (n == 1) median\n            else (leftMedian\
    \ + rightMedian) / 2.0\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmzy3tf2g.scala:22:26 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (leftMedian\
    \ + rightMedian) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \   ^\e[0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e[0m\
    \ \e[35mleftMedian\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n\
    \        val mid = left match {\n            case Nil => right\n            case\
    \ x :: xs => x\n        }\n        val median = (left + right) match {\n     \
    \       case Nil => mid\n            case x :: xs => x\n        }\n        median.toFloat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7ew7e0og.scala:18:27 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (left + right)\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7ew7e0og.scala:20:28 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m x :: xs => x\n\e[31m\e[31m   |\e\
    [0m                            ^\e[0m\n\e[31m   |\e[0m                       \
    \     Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7ew7e0og.scala:22:15\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        median.toFloat\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toFloat is\
    \ not a member of Matchable, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659792617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val median = (left + right).sorted\n        val medianIndex = median.indexOf(0)\n\
    \        median(medianIndex)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpds3hwgqk.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sorted\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0mvalue +\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        if (n < 2) {\n            l.head\n        } else\
    \ {\n            val median = (l.head + l.last) / 2\n            val left  = l.take(half)\n\
    \            val right = l.drop(half)\n            val median1 = median(left)\n\
    \            val median2 = median(right)\n            val median3 = median(left\
    \ + right)\n            if (median1 < median2) {\n                median1\n  \
    \          } else if (median2 < median3) {\n                median2\n        \
    \    } else {\n                median3\n            }\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpluygzx6e.scala:18:26 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mmedian1\e[0m = median(left)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                        \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpluygzx6e.scala:19:26 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mmedian2\e[0m = median(right)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                        \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpluygzx6e.scala:20:26 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mmedian3\e[0m = median(left\
    \ + right)\n\e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          \e[33mvalue\e[0m \e[35mmedian\e[0m does not\
    \ take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpluygzx6e.scala:20:38\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m\
    \ \e[36mmedian3\e[0m = median(left + right)\n\e[31m\e[31m   |\e[0m           \
    \                      ^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of\
    \ List[Long], but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659792617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.slice(0, mid)\n        val right = l.slice(mid)\n\
    \        val leftMedian = median(left)\n        val rightMedian = median(right)\n\
    \        val median = (leftMedian + rightMedian) / 2\n        median\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp3q2_zkgd.scala:13:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp3q2_zkgd.scala:16:22 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (leftMedian + rightMedian)\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m  \
    \ |\e[0m                      Recursive \e[33mvalue\e[0m \e[35mleftMedian\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n\
    \        val mid = math.round((left + right) / 2)\n        val median = if (n\
    \ == 1) mid else (left + right) / 2\n        median\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6w5hvk85.scala:14:35 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmid\e[0m = math.round((left\
    \ + right) / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                            \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp6w5hvk85.scala:15:48 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = \e[33mif\e\
    [0m (n == \e[31m1\e[0m) mid \e[33melse\e[0m (left + right) / \e[31m2\e[0m\n\e\
    [31m\e[31m   |\e[0m                                           ^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659792617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ low = l.take(mid)\n            val high = l.drop(mid)\n            val lowMedian\
    \ = median(low)\n            val highMedian = median(high)\n            val median\
    \ = (lowMedian + highMedian) / 2\n            median\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpb3i34js3.scala:18:26 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (lowMedian\
    \ + highMedian) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \  ^\e[0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e[0m\
    \ \e[35mlowMedian\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val median = if (n == 1) left else (left + right) / 2\n        median\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuf6j7yq2.scala:14:49 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = \e[33mif\e\
    [0m (n == \e[31m1\e[0m) left \e[33melse\e[0m (left + right) / \e[31m2\e[0m\n\e\
    [31m\e[31m   |\e[0m                                            ^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpuf6j7yq2.scala:15:8 ---------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        median\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    (median : List[Long])\n\e[31m   |\e[0m      \
    \  Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ lower = l filter (_ < mid)\n            val upper = l filter (_ >= mid)\n  \
    \          val median = (lower + upper) reduce { (x, y) => x + y } / 2\n     \
    \       median\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplv7zwpn_.scala:16:32 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (lower\
    \ + upper) reduce { (\e[36mx\e[0m, \e[36my\e[0m) => x + y } / \e[31m2\e[0m\n\e\
    [31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792617
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = if (sorted.length %\
    \ 2 == 0) sorted.apply(mid) else sorted.apply(mid - 1)\n        median\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpggkh04z9.scala:16)\n\tat Problem.main(tmpggkh04z9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = (left + right).sorted.last\n            median\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp3g1xnue_.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp3g1xnue_.scala:16:31 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sorted.last\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659792617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val sorted = l.sortWith(_ < _)\n        val half = n / 2\n        if (n < 2)\
    \ 0.0\n        else if (n == 2) sorted.head\n        else (sorted.head + sorted.last)\
    \ / 2.0\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpivfzloyi.scala:15:13\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (sorted.head\
    \ + sorted.last) / \e[31m2.0\e[0m\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    Double\n\e[31m   |\e[0m           \
    \  Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792616
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = if (sorted.length %\
    \ 2 == 0) sorted.apply(mid) else sorted.apply(mid + 1)\n        median\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmzf3013q.scala:16)\n\tat Problem.main(tmpmzf3013q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = left.sorted match {\n                case Nil => right(0)\n              \
    \  case h :: t => h\n            }\n            val median2 = right.sorted match\
    \ {\n                case Nil => median\n                case h :: t => h\n  \
    \          }\n            val median3 = median2.sorted match {\n             \
    \   case Nil => median2\n                case h :: t => h\n            }\n   \
    \         val median4 = median3.sorted match {\n                case Nil => median3\n\
    \                case h :: t => h\n            }\n            val median5 = median4.sorted\
    \ match {\n                case Nil => median4\n                case h :: t =>\
    \ h\n            }\n            val median6 = median5.sorted match {\n       \
    \         case Nil => median5\n                case h :: t => h\n            }\n\
    \            val median7 = median6.sorted match {\n                case Nil =>\
    \ median6\n                case h :: t => h\n            }\n            val median8\
    \ = median7.sorted match {\n                case Nil => median7\n            \
    \    case h :: t => h\n            }\n            val median9 = median8.sorted\
    \ match {\n                case Nil => median8\n                case h :: t =>\
    \ h\n            }\n            val median10 = median9.sorted match {\n      \
    \          case Nil => median9\n                case h :: t => h\n           \
    \ }\n            val median11 = median10.sorted match {\n                case\
    \ Nil => median10\n                case h :: t => h\n            }\n         \
    \   val median12 = median11.sorted match {\n                case Nil => median11\n\
    \                case h :: t => h\n            }\n            val median13 = median12.sorted\
    \ match {\n                case Nil => median12\n                case h :: t =>\
    \ h\n            }\n            val median14 = median13.sorted match {\n     \
    \           case Nil => median13\n                case h :: t => h\n         \
    \   }\n            val median15 = median14.sorted match {\n                case\
    \ Nil => median14\n                case h :: t => h\n            }\n         \
    \   val median16 = median15.sorted match {\n                case Nil => median15\n\
    \                case h :: t => h\n            }\n            val median17 = median16.sorted\
    \ match {\n                case Nil => median16\n                case h :: t =>\
    \ h\n            }\n            val median18 = median17.sorted match {\n     \
    \           case Nil => median17\n                case h :: t => h\n         \
    \   }\n            val \n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp7z8d3p7_.scala:88:15 ---------------------------\e\
    [0m\e[0m\n\e[31m88 |\e[0m            \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m  \
    \             ^\e[0m\n\e[31m   |\e[0m               pattern expected\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7z8d3p7_.scala:99:0 ----------------------------\e\
    [0m\e[0m\n\e[31m99 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7z8d3p7_.scala:24:34\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m\
    \ \e[36mmedian3\e[0m = median2.sorted \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \            value sorted is not a member of Long\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp7z8d3p7_.scala:26:31 ------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m                \e[33mcase\e[0m h :: t => h\n\e[31m\e[31m   |\e[0m   \
    \                            ^\e[0m\n\e[31m   |\e[0m                         \
    \      Not found: h\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7z8d3p7_.scala:28:34\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m\
    \ \e[36mmedian4\e[0m = median3.sorted \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \            value sorted is not a member of Long\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp7z8d3p7_.scala:30:31 ------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m                \e[33mcase\e[0m h :: t => h\n\e[31m\e[31m   |\e[0m   \
    \                            ^\e[0m\n\e[31m   |\e[0m                         \
    \      Not found: h\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7z8d3p7_.scala:32:34\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m            \e[33mval\e[0m\
    \ \e[36mmedian5\e[0m = median4.sorted \e[33mmatch\e[0m {\n\e[31m\e[31m"
  stdout: ''
  timestamp: 1659792618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val half = sorted.length / 2\n        val median = sorted.take(half).last\n\
    \        val rest = sorted.drop(half)\n        val medianOfRest = median(rest)\n\
    \        val medianOfRestAndRest = medianOfRest + median(l.tail)\n        medianOfRestAndRest\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpofymmyqi.scala:14:27 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedianOfRest\e[0m = median(rest)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                          \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = (left + right).sorted\n            median.last\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp30b_b5va.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left\
    \ + right).sorted\n\e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.min\n        val h = (n - 1) / 2\n        val lo = l.take(h)\n  \
    \      val hi = l.drop(h)\n        val mid = lo.take(h).zip(hi).map { case (x,\
    \ y) => x + y }.sum / 2\n        val median = if (n == 1) mid else (lo.take(h)\
    \ + hi).sum / 2\n        median\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcxs6pv9f.scala:16:54 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = \e[33mif\e\
    [0m (n == \e[31m1\e[0m) mid \e[33melse\e[0m (lo.take(h) + hi).sum / \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m                                           ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n <= 1) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = new Array[Long](n)\n            val right = new Array[Long](n)\n    \
    \        System.arraycopy(l, 0, left, 0, mid)\n            System.arraycopy(l,\
    \ mid, right, 0, n - mid)\n            val lMedian = median(left)\n          \
    \  val rMedian = median(right)\n            (lMedian + rMedian) / 2\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsbp1uder.scala:18:33\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e\
    [36mlMedian\e[0m = median(left)\n\e[31m\e[31m   |\e[0m                       \
    \          ^^^^\e[0m\n\e[31m   |\e[0m                                 Found: \
    \   (left : Array[Long])\n\e[31m   |\e[0m                                 Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsbp1uder.scala:19:33\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e\
    [36mrMedian\e[0m = median(right)\n\e[31m\e[31m   |\e[0m                      \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (right : Array[Long])\n\e[31m   |\e[0m                                 Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = if (sorted.length %\
    \ 2 == 0) sorted.apply(mid) else sorted.apply(mid + 1)\n        median\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmzf3013q.scala:16)\n\tat Problem.main(tmpmzf3013q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = if (left.length < right.length) left else right\n            median.sum /\
    \ median.length\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp789vmych.scala:21)\n\tat Problem.main(tmp789vmych.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = new Array[Long](n)\n            val right = new Array[Long](n)\n    \
    \        System.arraycopy(l, 0, left, 0, mid)\n            System.arraycopy(l,\
    \ mid, right, 0, n - mid)\n            val leftMedian = median(left)\n       \
    \     val rightMedian = median(right)\n            val median = (leftMedian +\
    \ rightMedian) / 2\n            median\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprgcdos7_.scala:20:26 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (leftMedian\
    \ + rightMedian) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \   ^\e[0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e[0m\
    \ \e[35mleftMedian\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        val median = (l take half).sorted match {\n     \
    \       case Nil => 0\n            case h :: t => h\n        }\n        val left\
    \ = (l drop half).sorted match {\n            case Nil => 0\n            case\
    \ h :: t => h\n        }\n        val right = (l drop half).sorted match {\n \
    \           case Nil => 0\n            case h :: t => h\n        }\n        val\
    \ medianOfLeft = (left take half).sorted match {\n            case Nil => 0\n\
    \            case h :: t => h\n        }\n        val medianOfRight = (right take\
    \ half).sorted match {\n            case Nil => 0\n            case h :: t =>\
    \ h\n        }\n        val medianOfLeftAndRight = (left drop half).sorted match\
    \ {\n            case Nil => 0\n            case h :: t => h\n        }\n    \
    \    val medianOfLeftAndRightAndMedian = (left drop half).sorted match {\n   \
    \         case Nil => 0\n            case h :: t => h\n        }\n        val\
    \ medianOfLeftAndRightAndMedianAndMedian = (left drop half).sorted match {\n \
    \           case Nil => 0\n            case h :: t => h\n        }\n        val\
    \ medianOfLeftAndRightAndMedianAndMedianAndMedian = (left drop half).sorted match\
    \ {\n            case Nil => 0\n            case h :: t => h\n        }\n    \
    \    val medianOfLeftAndRightAndMedianAndMedianAndMedianAndMedian = (left drop\
    \ half).sorted match {\n            case Nil => 0\n            case h :: t =>\
    \ h\n        }\n        val medianOfLeftAndRightAndMedianAndMedianAndMedianAndMedianAndMedian\
    \ = (left drop half).sorted match {\n            case Nil => 0\n            case\
    \ h :: t => h\n        }\n        val medianOfLeftAndRightAndMedianAndMedianAndMedianAndMedianAndMedianAndMedian\
    \ = (left drop half).sorted match {\n            case Nil => 0\n            case\
    \ h :: t => h\n        }\n        val medianOfLeftAndRightAndMedianAndMedianAndMedianAndMedianAndMedianAndMedianAndMedian\
    \ = (left drop half).sorted match {\n            case Nil => 0\n            case\
    \ h :: t => h\n        }\n        val medianOfLeftAndRightAndMedianAndMedianAndMedianAndMedianAndMedianAndMedianAndMe\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbkkox9f7.scala:65:4 ----------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbkkox9f7.scala:24:33\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mmedianOfLeft\e[0m = (left take half).sorted \e[33mmatch\e[0m {\n\e[31m\e[31m\
    \   |\e[0m                            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                    value take is not a member of Long\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpbkkox9f7.scala:26:27 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m            \e[33mcase\e[0m h :: t => h\n\e[31m\e[31m   |\e\
    [0m                           ^\e[0m\n\e[31m   |\e[0m                        \
    \   Not found: h\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbkkox9f7.scala:28:35\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mmedianOfRight\e[0m = (right take half).sorted \e[33mmatch\e[0m {\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                          value take is not a member of Long\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbkkox9f7.scala:30:27 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mcase\e[0m h :: t => h\n\e[31m\e[31m\
    \   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m                 \
    \          Not found: h\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbkkox9f7.scala:32:41\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e\
    [36mmedianOfLeftAndRight\e[0m = (left drop half).sorted \e[33mmatch\e[0m {\n\e\
    [31m\e[31m   |\e[0m                                    ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                    value drop is not a member of Long\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbkkox9f7.scala:34:27 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            \e[33mcase\e[0m h ::"
  stdout: ''
  timestamp: 1659792619
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = l.length / 2\n      \
    \      val l1 = l.take(mid)\n            val l2 = l.drop(mid)\n            val\
    \ m1 = median(l1)\n            val m2 = median(l2)\n            val m = (m1 +\
    \ m2) / 2\n            if (m1 < 0) m else -m\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc59l6skk.scala:23)\n\tat Problem.main(tmpc59l6skk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = new Array[Long](n)\n            val right = new Array[Long](n)\n    \
    \        Array.copy(l, 0, left, 0, mid)\n            Array.copy(l, mid, right,\
    \ 0, n - mid)\n            val leftMedian = median(left)\n            val rightMedian\
    \ = median(right)\n            val median = leftMedian + rightMedian / 2.0\n \
    \           median\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpnct5_6f2.scala:20:25 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = leftMedian\
    \ + rightMedian / \e[31m2.0\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \   ^\e[0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e[0m\
    \ \e[35mleftMedian\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val median = (left + right).sorted\n        median.last\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpazllszq3.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sorted\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0mvalue +\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.sortWith(_ < _).length / 2\n        if (m == 0) 0\n        else l.sortWith(_\
    \ < _).length / 2 * 0.5\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp04o2cx24.scala:13:13\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m l.sortWith(_\
    \ < _).length / \e[31m2\e[0m * \e[31m0.5\e[0m\n\e[31m\e[31m   |\e[0m         \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             Found:\
    \    Double\n\e[31m   |\e[0m             Required: Float\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659792619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        if (sorted.length % 2 == 0) sorted.apply(mid)\
    \ else (sorted.apply(mid) + sorted.apply(mid - 1)).toFloat/2.0\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6qr94u_g.scala:12:59\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (sorted.length\
    \ % \e[31m2\e[0m == \e[31m0\e[0m) sorted.apply(mid) \e[33melse\e[0m (sorted.apply(mid)\
    \ + sorted.apply(mid - \e[31m1\e[0m)).toFloat/\e[31m2.0\e[0m\n\e[31m\e[31m   |\e\
    [0m                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        Found:\
    \    Double\n\e[31m   |\e[0m                                                 \
    \       Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792619
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.max\n        val median = (m + n) / 2\n        l.filter(_ < median).length\
    \ / 2\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsktxnl7n.scala:16)\n\tat Problem.main(tmpsktxnl7n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ m1 = l.take(mid)\n            val m2 = l.drop(mid)\n            val m = (m1\
    \ + m2).sorted\n            val midPoint = (m.head + m.last) / 2\n           \
    \ val median = (m1.head + m2.head) / 2\n            val medianIndex = (m1.length\
    \ + m2.length) / 2\n            val medianValue = m.last\n            val medianIndexValue\
    \ = midPoint\n            val medianValueValue = median\n            val medianIndexValueValue\
    \ = medianIndex\n            val medianValueValueValue = medianValue\n       \
    \     val medianIndexValueValueValue = medianIndexValue\n            val medianValueValueValueValue\
    \ = medianValueValue\n            val medianIndexValueValueValueValue = medianIndexValueValue\n\
    \            val medianValueValueValueValueValue = medianValueValueValue\n   \
    \         val medianIndexValueValueValueValueValue = medianIndexValueValueValue\n\
    \            val medianValueValueValueValueValueValue = medianValueValueValueValueValue\n\
    \            val medianIndexValueValueValueValueValueValue = medianIndexValueValueValueValueValue\n\
    \            val medianValueValueValueValueValueValueValue = medianValueValueValueValueValueValueValue\n\
    \            val medianIndexValueValueValueValueValueValueValue = medianIndexValueValueValueValueValueValueValueValue\n\
    \            val medianValueValueValueValueValueValueValueValueValue = medianValueValueValueValueValueValueValueValueValueValue\n\
    \            val medianIndexValueValueValueValueValueValueValueValueValue = medianIndexValueValueValueValueValueValueValueValueValueValueValueValue\n\
    \            val medianValueValueValueValueValueValueValueValueValueValueValue\
    \ = medianValueValueValueValueValueValueValueValueValueValueValueValueValue\n\
    \            val medianIndexValueValueValueValueValueValueValueValueValueValue\
    \ = medianIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValue\n\
    \            val medianValueValueValueValueValueValueValueValueValueValueValueValue\
    \ = medianValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue\n\
    \            val medianIndexValueValueValueValueValueValueValueValueValueValueValueValue\
    \ = medianIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue\n\
    \            val medianValueValueValueValueValueValueValueValueValueValueValueValueValueValue\
    \ = medianValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue\n\
    \            val medianIndexValueValueValueValueValueValueValueValueValueValueValueValueValue\
    \ = medianIndexValueValueValueValueValueValueValueValueValue\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppzie77ql.scala:52:0 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppzie77ql.scala:16:24\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m\
    \ \e[36mm\e[0m = (m1 + m2).sorted\n\e[31m\e[31m   |\e[0m                     ^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmppzie77ql.scala:32:60 ---------------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m            \e[33mval\e[0m \e[36mmedianValueValueValueValueValueValueValue\e\
    [0m = medianValueValueValueValueValueValueValue\n\e[31m\e[31m   |\e[0m       \
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \    Recursive \e[33mvalue\e[0m \e[35mmedianValueValueValueValueValueValueValue\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppzie77ql.scala:33:65\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m            \e[33mval\e[0m\
    \ \e[36mmedianIndexValueValueValueValueValueValueValue\e[0m = medianIndexValueValueValueValueValueValueValueValue\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m          Not found: medianIndexValueValueValueValueValueValueValueValue\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppzie77ql.scala:34:70\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m            \e[33mval\e[0m\
    \ \e[36mmedianValueValueVa"
  stdout: ''
  timestamp: 1659792620
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val half = sorted.length / 2\n        if (sorted.length%2 == 0) sorted.last\n\
    \        else sorted.last+sorted.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5aft91bc.scala:16)\n\tat Problem.main(tmp5aft91bc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = if (left.length < right.length) median(left) else median(right)\n \
    \           val m1 = median(left)\n            val m2 = median(right)\n      \
    \      val m = (m1 + m2) / 2\n            if (m1 < m) m1 else m\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpebryxsxq.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpebryxsxq.scala:16:57 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = \e[33mif\e\
    [0m (left.length < right.length) median(left) \e[33melse\e[0m median(right)\n\e\
    [31m\e[31m   |\e[0m                                                         ^\e\
    [0m\n\e[31m   |\e[0m                                       Recursive \e[33mvalue\e\
    [0m \e[35mmedian\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpebryxsxq.scala:16:75 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = \e[33mif\e[0m (left.length\
    \ < right.length) median(left) \e[33melse\e[0m median(right)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \ ^\e[0m\n\e[31m   |\e[0m                                       Recursive \e[33mvalue\e\
    [0m \e[35mmedian\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659792619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val median = (left.length + right.length) / 2\n        if (left.length\
    \ < right.length) median\n        else (right + left) / 2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpatu3yh5q.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33melse\e[0m (right + left) / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not\
    \ a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = (left + right).sorted.last\n            median\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp8u3_erku.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp8u3_erku.scala:16:31 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sorted.last\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659792620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = median(left) + median(right)\n            median\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_mj5axct.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\
    \ + median(right)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m\
    \   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792619
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = if (sorted.length %\
    \ 2 == 0) sorted.apply(mid) else sorted.apply(mid + 1)\n        median\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmzf3013q.scala:16)\n\tat Problem.main(tmpmzf3013q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = (left + right).sorted\n            median.last\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqu9zpj3l.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left\
    \ + right).sorted\n\e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = (left + right).sorted\n            val medianIndex = median.indexWhere(_\
    \ > median(mid))\n            median(medianIndex)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpx2uo12a_.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpx2uo12a_.scala:16:31 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sorted\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659792621
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = if (sorted.length %\
    \ 2 == 0) sorted.apply(mid) else sorted.apply(mid + 1)\n        median\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmzf3013q.scala:16)\n\tat Problem.main(tmpmzf3013q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        if (sorted.length % 2 == 0) sorted.apply(mid)\
    \ else (sorted.apply(mid - 1) + sorted.apply(mid))/2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc0h_p4_l.scala:15)\n\tat Problem.main(tmpc0h_p4_l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792621
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        median\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpofqun_b_.scala:16)\n\tat Problem.main(tmpofqun_b_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = new Array[Long](n)\n            val right = new Array[Long](n)\n    \
    \        l.foreach(x => if (x < mid) left(x) else right(x))\n            val leftMedian\
    \ = median(left)\n            val rightMedian = median(right)\n            val\
    \ median = (leftMedian + rightMedian) / 2\n            median\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp997awxo2.scala:16:45\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            l.foreach(\e[36mx\e\
    [0m => \e[33mif\e[0m (x < mid) left(x) \e[33melse\e[0m right(x))\n\e[31m\e[31m\
    \   |\e[0m                                             ^\e[0m\n\e[31m   |\e[0m\
    \                                             Found:    (x : Long)\n\e[31m   |\e\
    [0m                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp997awxo2.scala:16:59 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            l.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ < mid) left(x) \e[33melse\e[0m right(x))\n\e[31m\e[31m   |\e[0m            \
    \                                               ^\e[0m\n\e[31m   |\e[0m      \
    \                                              Found:    (x : Long)\n\e[31m  \
    \ |\e[0m                                                    Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp997awxo2.scala:19:26\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e\
    [0m \e[36mmedian\e[0m = (leftMedian + rightMedian) / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m                  \
    \        Recursive \e[33mvalue\e[0m \e[35mleftMedian\e[0m needs type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659792621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val leftHalf = sorted.drop(mid)\n        val rightHalf = sorted.takeRight(mid)\n\
    \        val medianOfLeftHalf = median(leftHalf)\n        val medianOfRightHalf\
    \ = median(rightHalf)\n        val medianOfBothHalfs = medianOfLeftHalf + medianOfRightHalf\n\
    \        val medianOfBothHalfsIfEven = medianOfBothHalfs % 2 == 0\n        if\
    \ (medianOfBothHalfsIfEven) {\n            medianOfBothHalfs\n        } else {\n\
    \            medianOfBothHalfsIfEven\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpp5ng1o64.scala:15:31 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmedianOfLeftHalf\e[0m =\
    \ median(leftHalf)\n\e[31m\e[31m   |\e[0m                               ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               \e[33mvalue\e[0m \e[35mmedian\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmpp5ng1o64.scala:16:32 -----------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mmedianOfRightHalf\e[0m = median(rightHalf)\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                \e[33mvalue\e[0m \e[35mmedian\e[0m does not\
    \ take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n\
    \        val median = (left + right).sorted\n        median.last\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuuo3skbr.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sorted\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0mvalue +\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792621
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n\
    \        val mid = left.zip(right).map {\n            case (l, r) => l + r\n \
    \       }.sum / 2\n        mid\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphokp_oii.scala:20)\n\tat Problem.main(tmphokp_oii.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0\n        else {\n            val half = n / 2\n            val\
    \ left = l.take(half)\n            val right = l.drop(half)\n            val mid\
    \ = math.round((left + right) / 2)\n            mid\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdx77uvxu.scala:16:39 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmid\e[0m = math.round((left\
    \ + right) / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                            \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = math.max(median(left), median(right))\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpdd33eyxw.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpdd33eyxw.scala:16:34 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = math.max(median(left),\
    \ median(right))\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\
    \e[31m   |\e[0m                                  Recursive \e[33mvalue\e[0m \e\
    [35mmedian\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpdd33eyxw.scala:16:48 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = math.max(median(left),\
    \ median(right))\n\e[31m\e[31m   |\e[0m                                      \
    \          ^\e[0m\n\e[31m   |\e[0m                                       Recursive\
    \ \e[33mvalue\e[0m \e[35mmedian\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdd33eyxw.scala:17:9 ---------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        }\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m\
    \   |\e[0m         Found:    Unit\n\e[31m   |\e[0m         Required: Float\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659792621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = new Array[Long](n)\n            val right = new Array[Long](n)\n    \
    \        for (i <- 0 until n) {\n                left(i) = l(i)\n            \
    \    right(i) = l(i + mid)\n            }\n            val lMedian = median(left)\n\
    \            val rMedian = median(right)\n            val median = (lMedian +\
    \ rMedian) / 2\n            if (median == 0.0) 0.0\n            else median\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmh95eiw9.scala:22:26 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (lMedian\
    \ + rMedian) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e[0m \e[35mlMedian\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n\
    \        val median = (left + right).sorted\n        val medianIndex = median.indexOf(0)\n\
    \        median(medianIndex)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbdcaytja.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sorted\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0mvalue +\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.slice(0, mid)\n        val right = l.slice(mid)\n\
    \        val median = (left.length + right.length) / 2\n        val medianValue\
    \ = left.length match {\n            case 0 => right(0)\n            case 1 =>\
    \ right(0) + (right(1) + right(2))/2\n            case 2 => right(0) + (right(1)\
    \ + right(2))/2\n            case _ => right(0) + (right(1) + right(2))/2\n  \
    \      }\n        medianValue\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp2v9evwka.scala:13:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n1 error found\n"
  stdout: ''
  timestamp: 1659792621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val half = n / 2\n            val\
    \ left = l.take(half)\n            val right = l.drop(half)\n            val mid\
    \ = left.zip(right).map(_._1).sum / 2\n            val median = if (n == 1) mid\
    \ else (left + right) / 2.0\n            median\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt1_c43w4.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = \e[33mif\e\
    [0m (n == \e[31m1\e[0m) mid \e[33melse\e[0m (left + right) / \e[31m2.0\e[0m\n\e\
    [31m\e[31m   |\e[0m                                               ^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n\
    \        val mid = left match {\n            case Nil => right\n            case\
    \ x :: xs => x\n        }\n        val median = (left + right) match {\n     \
    \       case Nil => mid\n            case x :: xs => x match {\n             \
    \   case x if x < mid => x\n                case x if x > mid => mid\n       \
    \         case _ => median\n            }\n        }\n        median.toFloat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyp6kzmw0.scala:18:27 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (left + right)\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpyp6kzmw0.scala:20:28 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m x :: xs => x \e[33mmatch\e[0m\
    \ {\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpyp6kzmw0.scala:23:26 ---------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m                \e[33mcase\e[0m _ => median\n\e[31m\e[31m\
    \   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m                  \
    \        Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659792622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ low = l.take(mid)\n            val high = l.drop(mid)\n            val lowMedian\
    \ = median(low)\n            val highMedian = median(high)\n            val median\
    \ = (lowMedian + highMedian) / 2\n            median\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpb3i34js3.scala:18:26 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (lowMedian\
    \ + highMedian) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \  ^\e[0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e[0m\
    \ \e[35mlowMedian\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n <= 1) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = (left + right).sorted match {\n                case Nil => 0.0\n         \
    \       case x :: xs => xs.last\n            }\n            median\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplhmewym0.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left\
    \ + right).sorted \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                  \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmplhmewym0.scala:18:32 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mcase\e[0m x :: xs => xs.last\n\e\
    [31m\e[31m   |\e[0m                                ^^\e[0m\n\e[31m   |\e[0m  \
    \                              Not found: xs\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmplhmewym0.scala:20:12 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            median\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (median : Double)\n\e[31m\
    \   |\e[0m            Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659792623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = if (sorted.length %\
    \ 2 == 0) sorted[mid] else sorted[mid-1]\n        median\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpga6qp8dh.scala:12:56 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = \e[33mif\e\
    [0m (sorted.length % \e[31m2\e[0m == \e[31m0\e[0m) sorted[\e[35mmid\e[0m] \e[33melse\e\
    [0m sorted[\e[35mmid-\e[31m1\e[0m]\n\e[31m\e[31m   |\e[0m                    \
    \                                    ^^^\e[0m\n\e[31m   |\e[0m               \
    \                                      Not found: type mid\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpga6qp8dh.scala:12:76 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = \e[33mif\e\
    [0m (sorted.length % \e[31m2\e[0m == \e[31m0\e[0m) sorted[\e[35mmid\e[0m] \e[33melse\e\
    [0m sorted[\e[35mmid-\e[31m1\e[0m]\n\e[31m\e[31m   |\e[0m                    \
    \                                                        ^\e[0m\n\e[31m   |\e\
    [0m                                                       Not found: type -\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0\n        else if (n % 2 == 0) l.sorted take (n / 2) reduce (_\
    \ + _) / 2.0\n        else l.sorted take (n / 2 - 1) reduce (_ + _) / 2.0\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmphbncsxw0.scala:12:59 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (n % \e[31m2\e\
    [0m == \e[31m0\e[0m) l.sorted take (n / \e[31m2\e[0m) reduce (_ + _) / \e[31m2.0\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   \
    \        ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m   I could not infer the type of the parameter _$1 of expanded function:\n\
    \e[31m   |\e[0m   (_$1, _$2) => _$1 + _$2.\n\e[31m\e[31m-- [E081] Type Error:\
    \ /tmp/tmphbncsxw0.scala:12:63 -----------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (n % \e[31m2\e[0m == \e[31m0\e[0m)\
    \ l.sorted take (n / \e[31m2\e[0m) reduce (_ + _) / \e[31m2.0\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                                               ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$2 of expanded function:\n\e[31m\
    \   |\e[0m   (_$1, _$2) => _$1 + _$2.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmphbncsxw0.scala:13:47\
    \ -----------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e\
    [0m l.sorted take (n / \e[31m2\e[0m - \e[31m1\e[0m) reduce (_ + _) / \e[31m2.0\e\
    [0m\n\e[31m\e[31m   |\e[0m                                               ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$3 of expanded function:\n\e[31m\
    \   |\e[0m   (_$3, _$4) => _$3 + _$4.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmphbncsxw0.scala:13:51\
    \ -----------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e\
    [0m l.sorted take (n / \e[31m2\e[0m - \e[31m1\e[0m) reduce (_ + _) / \e[31m2.0\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   ^\e\
    [0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \   I could not infer the type of the parameter _$4 of expanded function:\n\e\
    [31m   |\e[0m   (_$3, _$4) => _$3 + _$4.\n4 errors found\n"
  stdout: ''
  timestamp: 1659792622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = l.length / 2\n      \
    \      val left = l.slice(0, mid)\n            val right = l.slice(mid)\n    \
    \        val m1 = median(left)\n            val m2 = median(right)\n         \
    \   val m = (m1 + m2) / 2\n            if (m1 < m) m1 else m\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpy_emnfqc.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n1 error found\n"
  stdout: ''
  timestamp: 1659792622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = l.length / 2\n      \
    \      val left = l.slice(0, mid)\n            val right = l.slice(mid)\n    \
    \        val midVal = median(left)\n            val rightVal = median(right)\n\
    \            val median = (midVal + rightVal) / 2\n            median\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpyv45gip9.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpyv45gip9.scala:18:26 ---------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (midVal + rightVal)\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m\
    \   |\e[0m                          Recursive \e[33mvalue\e[0m \e[35mmidVal\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val left  = sorted.drop(mid)\n        val right = sorted.takeRight(mid)\n\
    \        val medianOfLeft = median(left)\n        val medianOfRight = median(right)\n\
    \        val medianOfBoth = median(left + right)\n        val medianOfBoth = median(left\
    \ + right)\n        val medianOfBoth = median(left + right)\n        val medianOfBoth\
    \ = median(left + right)\n        val medianOfBoth = median(left + right)\n  \
    \      val medianOfBoth = median(left + right)\n        val medianOfBoth = median(left\
    \ + right)\n        val medianOfBoth = median(left + right)\n        val medianOfBoth\
    \ = median(left + right)\n        val medianOfBoth = median(left + right)\n  \
    \      val medianOfBoth = median(left + right)\n        val medianOfBoth = median(left\
    \ + right)\n        val medianOfBoth = median(left + right)\n        val medianOfBoth\
    \ = median(left + right)\n        val medianOfBoth = median(left + right)\n  \
    \      val medianOfBoth = median(left + right)\n        val medianOfBoth = median(left\
    \ + right)\n        val medianOfBoth = median(left + right)\n        val medianOfBoth\
    \ = median(left + right)\n        val medianOfBoth = median(left + right)\n  \
    \      val medianOfBoth = median(left + right)\n        val medianOfBoth = median(left\
    \ + right)\n        val medianOfBoth = median(left + right)\n        val medianOfBoth\
    \ = median(left + right)\n        val medianOfBoth = median(left + right)\n  \
    \      val medianOfBoth = median(left + right)\n        val medianOfBoth = median(left\
    \ + right)\n        val medianOfBoth = median(left + right)\n        val medianOfBoth\
    \ = median(left + right)\n        val medianOfBoth = median(left + right)\n  \
    \      val medianOfBoth = median(left + right)\n        val medianOfBoth = median(left\
    \ + right)\n        val medianOfBoth = median(left + right)\n        val medianOfBoth\
    \ = median(left + right)\n        val medianOfBoth = median(left + right)\n  \
    \      val medianOfBoth = median(left + right)\n        val medianOfBoth = median(left\
    \ + right)\n        val medianOfBoth = median(left + right)\n        val medianOfBoth\
    \ = median(left + right)\n        val medianOfBoth = median(left + right)\n  \
    \      val \n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpe4pzkk9n.scala:57:11 ---------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpe4pzkk9n.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmedianOfBoth\e[0m = median(left\
    \ + right)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmedianOfBoth is already defined as \e[33mvalue\e[0m \e[35mmedianOfBoth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe4pzkk9n.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mmedianOfBoth\e[0m = median(left + right)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmedianOfBoth is already defined as \e[33mvalue\e[0m \e[35mmedianOfBoth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe4pzkk9n.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mmedianOfBoth\e[0m = median(left + right)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmedianOfBoth is already defined as \e[33mvalue\e[0m \e[35mmedianOfBoth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe4pzkk9n.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmedianOfBoth\e[0m = median(left + right)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmedianOfBoth is already defined as \e[33mvalue\e[0m \e[35mmedianOfBoth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all"
  stdout: ''
  timestamp: 1659792624
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val sorted = l.sortWith(_ < _)\n        val mid = n / 2\n        if (n < 3)\
    \ {\n            sorted.last\n        } else {\n            val median = (sorted\
    \ take mid).sum / mid\n            val left = (sorted drop (mid)).sum / mid\n\
    \            val right = (sorted drop (mid + 1)).sum / mid\n            (median\
    \ + left + right) / 2\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr4u5i4s9.scala:23)\n\tat Problem.main(tmpr4u5i4s9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 1) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ low = l.take(mid)\n            val high = l.drop(mid)\n            val m1 =\
    \ median(low)\n            val m2 = median(high)\n            (m1 + m2) / 2\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.collection.immutable.List.length(List.scala:365)\n\
    \tat Problem$.median(tmpj7s1kxdp.scala:10)\n\tat Problem$.median(tmpj7s1kxdp.scala:17)\n\
    \tat Problem$.median(tmpj7s1kxdp.scala:17)\n\tat Problem$.median(tmpj7s1kxdp.scala:17)\n\
    \tat Problem$.median(tmpj7s1kxdp.scala:17)\n\tat Problem$.median(tmpj7s1kxdp.scala:17)\n\
    \tat Problem$.median(tmpj7s1kxdp.scala:17)\n\tat Problem$.median(tmpj7s1kxdp.scala:17)\n\
    \tat Problem$.median(tmpj7s1kxdp.scala:17)\n\tat Problem$.median(tmpj7s1kxdp.scala:17)\n\
    \tat Problem$.median(tmpj7s1kxdp.scala:17)\n\tat Problem$.median(tmpj7s1kxdp.scala:17)\n\
    \tat Problem$.median(tmpj7s1kxdp.scala:17)\n\tat Problem$.median(tmpj7s1kxdp.scala:17)\n\
    \tat Problem$.median(tmpj7s1kxdp.scala:17)\n\tat Problem$.median(tmpj7s1kxdp.scala:17)\n\
    \tat Problem$.median(tmpj7s1kxdp.scala:17)\n\tat Problem$.median(tmpj7s1kxdp.scala:17)\n\
    \tat Problem$.median(tmpj7s1kxdp.scala:17)\n\tat Problem$.median(tmpj7s1kxdp.scala:17)\n\
    \tat Problem$.median(tmpj7s1kxdp.scala:17)\n\tat Problem$.median(tmpj7s1kxdp.scala:17)\n\
    \tat Problem$.median(tmpj7s1kxdp.scala:17)\n\tat Problem$.median(tmpj7s1kxdp.scala:17)\n\
    \tat Problem$.median(tmpj7s1kxdp.scala:17)\n\tat Problem$.median(tmpj7s1kxdp.scala:17)\n\
    \tat Problem$.median(tmpj7s1kxdp.scala:17)\n\tat Problem$.median(tmpj7s1kxdp.scala:17)\n\
    \tat Problem$.median(tmpj7s1kxdp.scala:17)\n\tat Problem$.median(tmpj7s1kxdp.scala:17)\n\
    \tat Problem$.median(tmpj7s1kxdp.scala:17)\n\tat Problem$.median(tmpj7s1kxdp.scala:17)\n\
    \tat Problem$.median(tmpj7s1kxdp.scala:17)\n\tat Problem$.median(tmpj7s1kxdp.scala:17)\n\
    \tat Problem$.median(tmpj7s1kxdp.scala:17)\n\tat Problem$.median(tmpj7s1kxdp.scala:17)\n\
    \tat Problem$.median(tmpj7s1kxdp.scala:17)\n\tat Problem$.median(tmpj7s1kxdp.scala:17)\n\
    \tat Problem$.median(tmpj7s1kxdp.scala:17)\n\tat Problem$.median(tmpj7s1kxdp.scala:17)\n\
    \tat Problem$.median(tmpj7s1kxdp.scala:17)\n\tat Problem$.median(tmpj7s1kxdp.scala:17)\n\
    \tat Problem$.median(tmpj7s1kxdp.scala:17)\n\tat Problem$.median(tmpj7s1kxdp.scala:17)\n\
    \tat Problem$.median(tmpj7s1kxdp.scala:17)\n\tat Problem$.median(tmpj7s1kxdp.scala:17)\n\
    \t"
  stdout: ''
  timestamp: 1659792624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = if (sorted.length %\
    \ 2 == 0) sorted.apply(mid) else (sorted.apply(mid) + sorted.apply(mid - 1)).toFloat\n\
    \        median\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5eobe5ch.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        median\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (median : AnyVal)\n\
    \e[31m   |\e[0m        Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.groupBy(x => x).mapValues(_.length).max\n        val median = (m\
    \ / 2).toFloat\n        l.map(x => (x - median)).sum / n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptmp636_j.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (m / \e[31m2\e\
    [0m).toFloat\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m   |\e\
    [0mvalue / is not a member of (Long, Int), but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- Error:\
    \ /tmp/tmptmp636_j.scala:13:36 -----------------------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        l.map(\e[36mx\e[0m => (x - median)).sum / n\n\e[31m\e\
    [31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e[0mambiguous\
    \ given instances: both \e[33mobject\e[0m \e[35mFloatIsFractional\e[0m in \e[33mobject\e\
    [0m \e[35mNumeric\e[0m and \e[33mobject\e[0m \e[35mBigIntIsIntegral\e[0m in \e\
    [33mobject\e[0m \e[35mNumeric\e[0m match type Numeric[B] of parameter num of \e\
    [33mmethod\e[0m \e[35msum\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659792624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        if (n < 2) {\n            0f\n        } else {\n\
    \            val median = l.sortWith(_ < _).take(half).last\n            val lower\
    \ = l.sortWith(_ < _).take(half).head\n            val upper = l.sortWith(_ <\
    \ _).drop(half).last\n            val median1 = l.sortWith(_ < _).take(half).last\n\
    \            val median2 = l.sortWith(_ < _).drop(half).last\n            val\
    \ median3 = l.sortWith(_ < _).take(half).last\n            val median4 = l.sortWith(_\
    \ < _).drop(half).last\n            val median5 = l.sortWith(_ < _).take(half).last\n\
    \            val median6 = l.sortWith(_ < _).drop(half).last\n            val\
    \ median7 = l.sortWith(_ < _).take(half).last\n            val median8 = l.sortWith(_\
    \ < _).drop(half).last\n            val median9 = l.sortWith(_ < _).take(half).last\n\
    \            val median10 = l.sortWith(_ < _).drop(half).last\n            val\
    \ median11 = l.sortWith(_ < _).take(half).last\n            val median12 = l.sortWith(_\
    \ < _).drop(half).last\n            val median13 = l.sortWith(_ < _).take(half).last\n\
    \            val median14 = l.sortWith(_ < _).drop(half).last\n            val\
    \ median15 = l.sortWith(_ < _).take(half).last\n            val median16 = l.sortWith(_\
    \ < _).drop(half).last\n            val median17 = l.sortWith(_ < _).take(half).last\n\
    \            val median18 = l.sortWith(_ < _).drop(half).last\n            val\
    \ median19 = l.sortWith(_ < _).take(half).last\n            val median20 = l.sortWith(_\
    \ < _).drop(half).last\n            val median21 = l.sortWith(_ < _).take(half).last\n\
    \            val median22 = l.sortWith(_ < _).drop(half).last\n            val\
    \ median23 = l.sortWith(_ < _).take(half).last\n            val median24 = l.sortWith(_\
    \ < _).drop(half).last\n            val median25 = l.sortWith(_ < _).take(half).last\n\
    \            val median26 = l.sortWith(_ < _).drop(half).last\n            val\
    \ median27 = l.sortWith(_ < \n    }\n    def main(args: Array[String]) = {\n \
    \   assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpyzl32aid.scala:44:41 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m            \e[33mval\e[0m \e[36mmedian27\e[0m = l.sortWith(_\
    \ < \n\e[31m\e[31m   |\e[0m                                         ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyzl32aid.scala:55:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m55 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpyzl32aid.scala:54:1 ---------------------\e[0m\e[0m\n\
    \e[31m54 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpyzl32aid.scala:46:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m46 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1659792624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = if (left.isEmpty) right else left\n            val medianOfLeft = median(left)\n\
    \            val medianOfRight = median(right)\n            val medianOfMedian\
    \ = medianOfLeft + medianOfRight\n            medianOfMedian\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpukapty_c.scala:17:38\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e\
    [36mmedianOfLeft\e[0m = median(left)\n\e[31m\e[31m   |\e[0m                  \
    \                    ^^^^\e[0m\n\e[31m   |\e[0m                              \
    \        Found:    (left : List[Long])\n\e[31m   |\e[0m                      \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpukapty_c.scala:18:39 --------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m            \e[33mval\e[0m \e[36mmedianOfRight\e[0m = median(right)\n\e\
    [31m\e[31m   |\e[0m                                       ^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                       Found:    (right : List[Long])\n\
    \e[31m   |\e[0m                                       Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659792624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.head\n        val half = n / 2\n        val left = l.drop(half)\n\
    \        val right = l.take(half)\n        val median = (left + right).sorted\n\
    \        val mid = median.head\n        val median2 = median.tail\n        val\
    \ median3 = median2.sorted\n        val median4 = median3.head\n        val median5\
    \ = median3.tail\n        val median6 = median4.sorted\n        val median7 =\
    \ median6.head\n        val median8 = median6.tail\n        val median9 = median7.sorted\n\
    \        val median10 = median9.head\n        val median11 = median9.tail\n  \
    \      val median12 = median10.sorted\n        val median13 = median11.head\n\
    \        val median14 = median11.tail\n        val median15 = median12.sorted\n\
    \        val median16 = median13.head\n        val median17 = median13.tail\n\
    \        val median18 = median14.sorted\n        val median19 = median16.head\n\
    \        val median20 = median16.tail\n        val median21 = median17.sorted\n\
    \        val median22 = median18.head\n        val median23 = median18.tail\n\
    \        val median24 = median19.sorted\n        val median25 = median20.head\n\
    \        val median26 = median20.tail\n        val median27 = median21.sorted\n\
    \        val median28 = median22.head\n        val median29 = median22.tail\n\
    \        val median30 = median23.sorted\n        val median31 = median24.head\n\
    \        val median32 = median24.tail\n        val median33 = median25.sorted\n\
    \        val median34 = median26.head\n        val median35 = median26.tail\n\
    \        val median36 = median27.sorted\n        val median37 = median28.head\n\
    \        val median38 = median28.tail\n        val median39 = median29.sorted\n\
    \        val median40 = median30.head\n        val median41 = median30.tail\n\
    \        val median42 = median31.sorted\n        val median43 = median32.head\n\
    \        val median44 = median32.tail\n        val median45 = median33.sorted\n\
    \        val median46 = median34.head\n        val median47 = median34.tail\n\
    \        val median48 = median35.sorted\n        val median49 = median36.head\n\
    \        val median50 = median36.tail\n        val median51 = median37.sorted\n\
    \        val median52 = median38.head\n        val median53 = median38.tail\n\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaqkd37fq.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sorted\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0mvalue +\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpaqkd37fq.scala:70:5 ---------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659792624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ low = l.take(mid)\n            val high = l.drop(mid)\n            val midVal\
    \ = low.reduce((x, y) => x + y)\n            val lowVal = low.reduce((x, y) =>\
    \ x + y)\n            val highVal = high.reduce((x, y) => x + y)\n           \
    \ val median = midVal + (lowVal + highVal) / 2.0\n            median\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxpe0gpux.scala:20:12\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            median\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (median\
    \ : Double)\n\e[31m   |\e[0m            Required: Float\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659792624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = new Array[Long](n)\n        val right =\
    \ new Array[Long](n)\n        var i = 0\n        var j = 0\n        while (i <\
    \ n) {\n            left(i) = l(i)\n            i += 1\n        }\n        while\
    \ (j < n) {\n            right(j) = l(j)\n            j += 1\n        }\n    \
    \    val leftMedian = median(left)\n        val rightMedian = median(right)\n\
    \        val median = (leftMedian + rightMedian) / 2\n        if (n == 1) {\n\
    \            return median\n        }\n        if (leftMedian > rightMedian) {\n\
    \            return median\n        }\n        return median\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphrzbyq00.scala:26:22 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (leftMedian\
    \ + rightMedian) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                      ^\e\
    [0m\n\e[31m   |\e[0m                      Recursive \e[33mvalue\e[0m \e[35mleftMedian\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = new Array[Long](n)\n            val right = new Array[Long](n)\n    \
    \        System.arraycopy(l, 0, left, 0, mid)\n            System.arraycopy(l,\
    \ mid, right, 0, n - mid)\n            val leftMedian = median(left)\n       \
    \     val rightMedian = median(right)\n            val median = (leftMedian +\
    \ rightMedian) / 2\n            median\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprgcdos7_.scala:20:26 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (leftMedian\
    \ + rightMedian) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \   ^\e[0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e[0m\
    \ \e[35mleftMedian\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val median = if (n == 1) left else (left + right) / 2\n        median\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuf6j7yq2.scala:14:49 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = \e[33mif\e\
    [0m (n == \e[31m1\e[0m) left \e[33melse\e[0m (left + right) / \e[31m2\e[0m\n\e\
    [31m\e[31m   |\e[0m                                            ^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpuf6j7yq2.scala:15:8 ---------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        median\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    (median : List[Long])\n\e[31m   |\e[0m      \
    \  Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n <= 1) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = (left + right).sorted\n            val medianIndex = median.indexWhere(_ >\
    \ median(mid))\n            median(mid)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbflc62vm.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left\
    \ + right).sorted\n\e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792624
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = if (left.length == 0) right else left\n            val medianValue = median.sum\
    \ / median.length\n            medianValue\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgqsysl8h.scala:22)\n\tat Problem.main(tmpgqsysl8h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        val median = (l(half) + l(half+1)) / 2\n        median\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz3vy7g6q.scala:17)\n\tat Problem.main(tmpz3vy7g6q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val leftHalf = sorted.take(mid)\n        val rightHalf = sorted.drop(mid)\n\
    \        val medianOfLeftHalf = median(leftHalf)\n        val medianOfRightHalf\
    \ = median(rightHalf)\n        val medianOfBothHalfs = median(leftHalf ++ rightHalf)\n\
    \        val medianOfBothHalfsIfEven = median(leftHalf ++ rightHalf.take(1))\n\
    \        val medianOfBothHalfsIfOdd = median(leftHalf ++ rightHalf.drop(1))\n\
    \        val medianOfBothHalfsIfEvenIfOdd = median(leftHalf ++ rightHalf.take(2)\
    \ ++ rightHalf.drop(2))\n        val medianOfBothHalfsIfEvenIfOddIfEven = median(leftHalf\
    \ ++ rightHalf.take(3) ++ rightHalf.drop(3))\n        val medianOfBothHalfsIfEvenIfOddIfOdd\
    \ = median(leftHalf ++ rightHalf.take(4) ++ rightHalf.drop(4))\n        val medianOfBothHalfsIfEvenIfOddIfEvenIfOdd\
    \ = median(leftHalf ++ rightHalf.take(5) ++ rightHalf.drop(5))\n        val medianOfBothHalfsIfEvenIfOddIfEvenIfOddIfEven\
    \ = median(leftHalf ++ rightHalf.take(6) ++ rightHalf.drop(6))\n        val medianOfBothHalfsIfEvenIfOddIfEvenIfOddIfOdd\
    \ = median(leftHalf ++ rightHalf.take(7) ++ rightHalf.drop(7))\n        val medianOfBothHalfsIfEvenIfOddIfEvenIfOddIfEvenIfOdd\
    \ = median(leftHalf ++ rightHalf.take(8) ++ rightHalf.drop(8))\n        val medianOfBothHalfsIfEvenIfOddIfEvenIfOddIfEvenIfOddIfEven\
    \ = median(leftHalf ++ rightHalf.take(9) ++ rightHalf.drop(9))\n        val medianOfBothHalfsIfEvenIfOddIfEvenIfOddIfEvenIfOddIfOdd\
    \ = median(leftHalf ++ rightHalf.take(10) ++ rightHalf.drop(10))\n        val\
    \ medianOfBothHalfsIfEvenIf\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgdhky5eu.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpgdhky5eu.scala:15:31\
    \ -----------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e\
    [0m \e[36mmedianOfLeftHalf\e[0m = median(leftHalf)\n\e[31m\e[31m   |\e[0m    \
    \                           ^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \          \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpgdhky5eu.scala:16:32 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmedianOfRightHalf\e[0m =\
    \ median(rightHalf)\n\e[31m\e[31m   |\e[0m                                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                \e[33mvalue\e[0m \e[35mmedian\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmpgdhky5eu.scala:17:32 -----------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mmedianOfBothHalfs\e[0m = median(leftHalf\
    \ ++ rightHalf)\n\e[31m\e[31m   |\e[0m                                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                \e[33mvalue\e[0m \e[35mmedian\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmpgdhky5eu.scala:18:38 -----------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mmedianOfBothHalfsIfEven\e[0m = median(leftHalf\
    \ ++ rightHalf.take(\e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                    \
    \                  ^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \     \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpgdhky5eu.scala:19:37 ------------------------"
  stdout: ''
  timestamp: 1659792624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val median = if (n == 1) left else (left + right) / 2\n        median\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuf6j7yq2.scala:14:49 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = \e[33mif\e\
    [0m (n == \e[31m1\e[0m) left \e[33melse\e[0m (left + right) / \e[31m2\e[0m\n\e\
    [31m\e[31m   |\e[0m                                            ^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpuf6j7yq2.scala:15:8 ---------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        median\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    (median : List[Long])\n\e[31m   |\e[0m      \
    \  Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = (sorted take mid) +\
    \ (sorted drop mid)\n        val medianIndex = sorted.indexOf(median)\n      \
    \  val medianValue = sorted take medianIndex\n        val medianIndexInList =\
    \ medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValueInList = medianValue\n        val medianIndexInList\
    \ = medianIndex\n        val medianValue\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkr2p7cst.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkr2p7cst.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmedianIndexInList\e[0m = medianIndex\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmedianIndexInList is already defined as \e[33mvalue\e[0m \e\
    [35mmedianIndexInList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkr2p7cst.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmedianValueInList\e[0m =\
    \ medianValue\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmedianValueInList is already defined as \e[33mvalue\e[0m \e\
    [35mmedianValueInList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkr2p7cst.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmedianIndexInList\e[0m =\
    \ medianIndex\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmedianIndexInList is already defined as \e[33mvalue\e[0m \e\
    [35mmedianIndexInList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkr2p7cst.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmedianValueInList\e[0m =\
    \ medianValue\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmedianValueInList is already defined as \e[33mvalue\e[0m \e\
    [35mmedianValueInList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkr2"
  stdout: ''
  timestamp: 1659792625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = (left + right).sorted\n            median.last\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp30b_b5va.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left\
    \ + right).sorted\n\e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792617
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val half = sorted.length / 2\n        val median = sorted.take(half).last\
    \ + sorted.drop(half).take(half).last\n        median\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp647o6isc.scala:16)\n\tat Problem.main(tmp647o6isc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left  = l.take(mid)\n            val right = l.drop(mid)\n            val leftMedian\
    \ = median(left)\n            val rightMedian = median(right)\n            val\
    \ median = (leftMedian + rightMedian) / 2\n            median\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpm_0kwxu4.scala:18:26 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (leftMedian\
    \ + rightMedian) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \   ^\e[0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e[0m\
    \ \e[35mleftMedian\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792624
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val half = sorted.length / 2\n        if (sorted.length % 2 == 0) sorted.last\n\
    \        else sorted.last.toFloat + sorted.last.toFloat / 2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi4bi80dh.scala:16)\n\tat Problem.main(tmpi4bi80dh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n\
    \        val mid = math.floor(half)\n        val median = if (n == 1) left else\
    \ (left + right) / 2\n        val median1 = if (n == 1) left else (left + right)\
    \ / 2\n        val median2 = if (n == 1) left else (left + right) / 2\n      \
    \  val median3 = if (n == 1) left else (left + right) / 2\n        val median4\
    \ = if (n == 1) left else (left + right) / 2\n        val median5 = if (n == 1)\
    \ left else (left + right) / 2\n        val median6 = if (n == 1) left else (left\
    \ + right) / 2\n        val median7 = if (n == 1) left else (left + right) / 2\n\
    \        val median8 = if (n == 1) left else (left + right) / 2\n        val median9\
    \ = if (n == 1) left else (left + right) / 2\n        val median10 = if (n ==\
    \ 1) left else (left + right) / 2\n        val median11 = if (n == 1) left else\
    \ (left + right) / 2\n        val median12 = if (n == 1) left else (left + right)\
    \ / 2\n        val median13 = if (n == 1) left else (left + right) / 2\n     \
    \   val median14 = if (n == 1) left else (left + right) / 2\n        val median15\
    \ = if (n == 1) left else (left + right) / 2\n        val median16 = if (n ==\
    \ 1) left else (left + right) / 2\n        val median17 = if (n == 1) left else\
    \ (left + right) / 2\n        val median18 = if (n == 1) left else (left + right)\
    \ / 2\n        val median19 = if (n == 1) left else (left + right) / 2\n     \
    \   val median20 = if (n == 1) left else (left + right) / 2\n        val median21\
    \ = if (n == 1) left else (left + right) / 2\n        val median22 = if (n ==\
    \ 1) left else (left + right) / 2\n        val median23 = if (n == 1) left else\
    \ (left + right) / 2\n        val median24 = if (n == 1) left else (left + right)\
    \ / 2\n        val median25 = if (n == 1) left else (left + right) / 2\n     \
    \   val median26 = if (n == 1) left else (left + right) / 2\n        val median27\
    \ = if (n == 1) left else (left + right) / 2\n        val median28 = if (n ==\
    \ 1) left else (left + right) / 2\n        val median29 = if (n == 1) left else\
    \ (left + right) / 2\n        val median30 = if (n == 1) left else (left + right)\
    \ / 2\n        val median31 = if (n == 1) left else (left + right) / 2\n     \
    \   val median32 = if (\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp17rpti6a.scala:47:27 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mmedian32\e[0m = \e[33mif\e\
    [0m (\n\e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m\
    \                           expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp17rpti6a.scala:15:49 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = \e[33mif\e\
    [0m (n == \e[31m1\e[0m) left \e[33melse\e[0m (left + right) / \e[31m2\e[0m\n\e\
    [31m\e[31m   |\e[0m                                            ^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp17rpti6a.scala:16:50 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmedian1\e[0m = \e[33mif\e[0m\
    \ (n == \e[31m1\e[0m) left \e[33melse\e[0m (left + right) / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m                                             ^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue + is not a member of List[Long], but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp17rpti6a.scala:17:50\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mmedian2\e[0m = \e[33mif\e[0m (n == \e[31m1\e[0m) left \e[33melse\e[0m "
  stdout: ''
  timestamp: 1659792628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val median = (left.sum + right.sum) / 2\n        median\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk_ythzgy.scala:18)\n\tat Problem.main(tmpk_ythzgy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val median = (left.sum + right.sum) / 2.0\n        median\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0hiyka4m.scala:15:8\
    \ ---------------------\e[0m\e[0m\n\e[31m15 |\e[0m        median\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (median : Double)\n\
    \e[31m   |\e[0m        Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = new Array[Long](n)\n            val right = new Array[Long](n)\n    \
    \        for (i <- 0 until n) {\n                left(i) = l(i)\n            }\n\
    \            for (i <- 0 until n) {\n                right(i) = (i + mid)\n  \
    \          }\n            val leftMedian = median(left)\n            val rightMedian\
    \ = median(right)\n            val median = (leftMedian + rightMedian) / 2\n \
    \           if (n == 1) median\n            else median\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprr0nvioc.scala:24:26 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (leftMedian\
    \ + rightMedian) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \   ^\e[0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e[0m\
    \ \e[35mleftMedian\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = left.reduceLeft(_ + _) / mid\n            if (median.isNaN) 0.0\n \
    \           else median\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpxit_6cfg.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpxit_6cfg.scala:17:23 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (median.isNaN) \e[31m0.0\e[0m\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value\
    \ isNaN is not a member of Long.\n\e[31m   |\e[0m      An extension method was\
    \ tried, but could not be fully constructed:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \          float2Float(median)\n2 errors found\n"
  stdout: ''
  timestamp: 1659792625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = new Array[Long](n)\n            val right = new Array[Long](n)\n    \
    \        for (i <- 0 until n) {\n                left(i) = l(i)\n            \
    \    right(i) = (i + 1) % n\n            }\n            val leftMedian = median(left)\n\
    \            val rightMedian = median(right)\n            val median = (leftMedian\
    \ + rightMedian) / 2\n            if (n == 1) median\n            else {\n   \
    \             val leftCount = left.count(_ == median)\n                val rightCount\
    \ = right.count(_ == median)\n                if (leftCount + rightCount < n)\
    \ median\n                else {\n                    val leftMedianIndex = left.indexWhere(_\
    \ == median)\n                    val rightMedianIndex = right.indexWhere(_ ==\
    \ median)\n                    if (leftMedianIndex < rightMedianIndex) median\n\
    \                    else rightMedian\n                }\n            }\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8c5gpsyv.scala:22:26 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (leftMedian\
    \ + rightMedian) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \   ^\e[0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e[0m\
    \ \e[35mleftMedian\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792625
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = if (left.length == 0) right else left\n            val medianValue = median.sum\
    \ / median.length\n            medianValue\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgqsysl8h.scala:22)\n\tat Problem.main(tmpgqsysl8h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val median = (left + right).sorted\n        median.last\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpazllszq3.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sorted\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0mvalue +\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val median = (left + right).sorted\n        median.last\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpazllszq3.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sorted\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0mvalue +\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val m = (left + right).sorted\n        val median = m.last\n        median\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5vhwwbsl.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = (left + right).sorted\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not\
    \ a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792627
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = if (left.length == 0) right else left\n            median.sum / median.length\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjsxw5acd.scala:21)\n\tat Problem.main(tmpjsxw5acd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = median(left) + median(right)\n            median\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_mj5axct.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\
    \ + median(right)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m\
    \   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = (left + right).sorted\n            median.last\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp7t96jcx_.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp7t96jcx_.scala:16:31 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sorted\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659792615
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = (sorted take mid).sum\
    \ / mid\n        median\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwtnw9rv6.scala:16)\n\tat Problem.main(tmpwtnw9rv6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = (left + right).sorted\n            val medianIndex = median.indexWhere(_\
    \ > median.last)\n            median(medianIndex + 1) + median(medianIndex - 1)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpi1hrkxjq.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpi1hrkxjq.scala:16:31 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sorted\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659792627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n\
    \        val median = if (n == 1) left else (left + right) / 2\n        median.toFloat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5mabup8t.scala:14:49 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = \e[33mif\e\
    [0m (n == \e[31m1\e[0m) left \e[33melse\e[0m (left + right) / \e[31m2\e[0m\n\e\
    [31m\e[31m   |\e[0m                                            ^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp5mabup8t.scala:15:15 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        median.toFloat\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toFloat is not a member of List[Long], but could be\
    \ made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659792628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = (left + right).sortBy(_).last\n            median\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpkokuampa.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E081]\
    \ Type Error: /tmp/tmpkokuampa.scala:16:47 -----------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sortBy(_).last\n\
    \e[31m\e[31m   |\e[0m                                               ^\e[0m\n\e\
    [31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter _$1 of expanded function:\n\e[31m   |\e\
    [0m   _$1 => (left + right).sortBy(_$1).last.\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpkokuampa.scala:16:31 ------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sortBy(_).last\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1659792628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = new Array[Long](n)\n        val right =\
    \ new Array[Long](n)\n        for( i <- 0 until n ) {\n            if( i < mid\
    \ ) {\n                left(i) = l(i)\n            } else {\n                right(i)\
    \ = l(i)\n            }\n        }\n        val leftMedian = median(left)\n  \
    \      val rightMedian = median(right)\n        val median = (leftMedian + rightMedian)\
    \ / 2\n        return median\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpe4tna1mk.scala:23:22 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (leftMedian\
    \ + rightMedian) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                      ^\e\
    [0m\n\e[31m   |\e[0m                      Recursive \e[33mvalue\e[0m \e[35mleftMedian\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = (0 until n).map(i => l(i)).toList\n   \
    \     val right = (0 until n).map(i => l(n-i-1)).map(_.toLong).toList\n      \
    \  val leftMedian = median(left)\n        val rightMedian = median(right)\n  \
    \      val median = (leftMedian + rightMedian) / 2\n        if (n == 1) median\n\
    \        else median\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjyxp9mpy.scala:16:22 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (leftMedian\
    \ + rightMedian) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                      ^\e\
    [0m\n\e[31m   |\e[0m                      Recursive \e[33mvalue\e[0m \e[35mleftMedian\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n\
    \        val mid = left match {\n            case Nil => right\n            case\
    \ x :: xs => x\n        }\n        val median = (left + right) match {\n     \
    \       case Nil => mid\n            case x :: xs => x match {\n             \
    \   case x if x < mid => x\n                case x => mid\n            }\n   \
    \     }\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbfa1upnj.scala:18:27 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (left + right)\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpbfa1upnj.scala:20:28 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m x :: xs => x \e[33mmatch\e[0m\
    \ {\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = (sorted take mid) +\
    \ (sorted drop mid)\n        median.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2qvmhhxy.scala:12:39 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (sorted take\
    \ mid) + (sorted drop mid)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val leftMedian = sorted.take(mid).last\n        val rightMedian = sorted.last\n\
    \        val leftMedianIndex = sorted.lastIndexWhere(x => x < median)\n      \
    \  val rightMedianIndex = sorted.lastIndexWhere(x => x > median)\n        val\
    \ leftMedianValue = sorted.take(leftMedianIndex).last\n        val rightMedianValue\
    \ = sorted.take(rightMedianIndex).last\n        val leftMedianIndex = sorted.lastIndexWhere(x\
    \ => x < leftMedianValue)\n        val rightMedianIndex = sorted.lastIndexWhere(x\
    \ => x > rightMedianValue)\n        val leftMedianValue = sorted.take(leftMedianIndex).last\n\
    \        val rightMedianValue = sorted.take(rightMedianIndex).last\n        val\
    \ leftMedianIndex = sorted.lastIndexWhere(x => x < leftMedianValue)\n        val\
    \ rightMedianIndex = sorted.lastIndexWhere(x => x > rightMedianValue)\n      \
    \  val leftMedianValue = sorted.take(leftMedianIndex).last\n        val rightMedianValue\
    \ = sorted.take(rightMedianIndex).last\n        val leftMedianIndex = sorted.lastIndexWhere(x\
    \ => x < leftMedianValue)\n        val rightMedianIndex = sorted.lastIndexWhere(x\
    \ => x > rightMedianValue)\n        val leftMedianValue = sorted.take(leftMedianIndex).last\n\
    \        val rightMedianValue = sorted.take(rightMedianIndex).last\n        val\
    \ leftMedianIndex = sorted.lastIndexWhere(x => x < leftMedianValue)\n        val\
    \ rightMedianIndex = sorted.lastIndexWhere(x => x > rightMedianValue)\n      \
    \  val leftMedianValue = sorted.take(leftMedianIndex).last\n        val rightMedianValue\
    \ = sorted.take(rightMedianIndex).last\n        val leftMedianIndex = sorted.lastIndexWhere(x\
    \ => x < leftMedianValue)\n        val rightMedianIndex = sorted.lastIndexWhere(x\
    \ => x > rightMedianValue)\n        val leftMedianValue = sorted.take(leftMedianIndex).last\n\
    \        val rightMedianValue = sorted.take(rightMedianIndex).last\n        val\
    \ leftMedianIndex = sorted.lastIndexWhere(x => x < leftMedianValue)\n        val\
    \ rightMedianIndex = sorted.lastIndexWhere(x \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpawqlfdvb.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpawqlfdvb.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mleftMedianIndex\e[0m = sorted.lastIndexWhere(\e[36mx\e[0m => x < leftMedianValue)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mleftMedianIndex is already defined as \e[33mvalue\e[0m \e\
    [35mleftMedianIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpawqlfdvb.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mrightMedianIndex\e[0m =\
    \ sorted.lastIndexWhere(\e[36mx\e[0m => x > rightMedianValue)\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrightMedianIndex is already defined as \e[33mvalue\e[0m \e\
    [35mrightMedianIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpawqlfdvb.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mleftMedianValue\e[0m = sorted.take(leftMedianIndex).last\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mleftMedianValue is already defined as \e[33mvalue\e[0m \e\
    [35mleftMedianValue\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpawqlfdvb.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mrightMedianValue\e[0m =\
    \ sorted.take(rightMedianIndex).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrightMedianVa"
  stdout: ''
  timestamp: 1659792628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = if (sorted.length %\
    \ 2 == 0) sorted.apply(mid) else (sorted.apply(mid) + sorted.apply(mid - 1)).toFloat\n\
    \        median\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5eobe5ch.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        median\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (median : AnyVal)\n\
    \e[31m   |\e[0m        Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val half = sorted.length - mid\n        if (half % 2 == 0) median / 2.0\n\
    \        else (median + sorted.last) / 2.0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgfxqdp1n.scala:14:27\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (half %\
    \ \e[31m2\e[0m == \e[31m0\e[0m) median / \e[31m2.0\e[0m\n\e[31m\e[31m   |\e[0m\
    \                           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \            Found:    Double\n\e[31m   |\e[0m                           Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgfxqdp1n.scala:15:13\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (median\
    \ + sorted.last) / \e[31m2.0\e[0m\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    Double\n\e[31m   |\e[0m           \
    \  Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = median(left) + median(right)\n            median\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_mj5axct.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\
    \ + median(right)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m\
    \   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n <= 1) 0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ leftMedian = median(left)\n            val rightMedian = median(right)\n   \
    \         (leftMedian + rightMedian) / 2\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpqvuxtxhu.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n1 error found\n"
  stdout: ''
  timestamp: 1659792627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val half = n / 2\n            val\
    \ median = l.sortWith(_ < _).take(half).last\n            val lower = l.take(half).min\n\
    \            val upper = l.take(half).max\n            val medianOfLower = median(lower)\n\
    \            val medianOfUpper = median(upper)\n            val medianOfMedian\
    \ = median(median)\n            val lowerOfMedian = l.filter(x => x == medianOfLower).length\n\
    \            val upperOfMedian = l.filter(x => x == medianOfUpper).length\n  \
    \          val medianOfLowerOfMedian = l.filter(x => x == medianOfLower).length\n\
    \            val medianOfUpperOfMedian = l.filter(x => x == medianOfUpper).length\n\
    \            val medianOfMedianOfMedian = l.filter(x => x == medianOfMedian).length\n\
    \            val lowerOfMedianOfMedian = l.filter(x => x == medianOfLower).length\n\
    \            val upperOfMedianOfMedian = l.filter(x => x == medianOfUpper).length\n\
    \            val medianOfMedianOfMedianOfMedian = l.filter(x => x == medianOfMedian).length\n\
    \            val lowerOfMedianOfMedianOfMedian = l.filter(x => x == medianOfLower).length\n\
    \            val upperOfMedianOfMedianOfMedian = l.filter(x => x == medianOfUpper).length\n\
    \            val medianOfMedianOfMedianOfMedianOfMedian = l.filter(x => x == medianOfMedian).length\n\
    \            val lowerOfMedianOfMedianOfMedianOfMedian = l.filter(x => x == medianOfLower).length\n\
    \            val upperOfMedianOfMedianOfMedianOfMedian = l.filter(x => x == medianOfUpper).length\n\
    \            val medianOfMedianOfMedianOfMedianOfMedianOfMedian = l.filter(x =>\
    \ x == medianOfMedian).length\n            val lowerOfMedianOfMedianOfMedianOfMedianOfMedian\
    \ = l.filter(x => x == medianOfLower).length\n            val upperOfMedianOfMedianOfMedianOfMedianOfMedian\
    \ = l.filter(x => x == medianOfUpper).length\n            val medianOfMedianOfMedianOfMedianOfMedianOfMedianOfMedian\
    \ = l.filter(x => x == medianOfMedian).length\n            \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_vw4qmbn.scala:48:0 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp_vw4qmbn.scala:17:32\
    \ -----------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e\
    [0m \e[36mmedianOfLower\e[0m = median(lower)\n\e[31m\e[31m   |\e[0m          \
    \                      ^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \      \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmp_vw4qmbn.scala:18:32 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mmedianOfUpper\e[0m =\
    \ median(upper)\n\e[31m\e[31m   |\e[0m                                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                \e[33mvalue\e[0m \e[35mmedian\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmp_vw4qmbn.scala:19:33 -----------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m            \e[33mval\e[0m \e[36mmedianOfMedian\e[0m = median(median)\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 \e[33mvalue\e[0m \e[35mmedian\e[0m does not\
    \ take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_vw4qmbn.scala:47:1\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Float\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmp_vw4qmbn.scala:39:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m39 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 wa"
  stdout: ''
  timestamp: 1659792628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = if (sorted.length %\
    \ 2 == 0) sorted.apply(mid) else sorted.apply(mid + 1)\n        median\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmzf3013q.scala:16)\n\tat Problem.main(tmpmzf3013q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        val left = l.slice(0, half)\n        val right =\
    \ l.slice(half, n)\n        val mid = math.ceil((left + right) / 2)\n        val\
    \ median = (left + right).sum / 2\n        if (n == 1) median\n        else median\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9h6vdolp.scala:14:34 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmid\e[0m = math.ceil((left\
    \ + right) / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                            \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp9h6vdolp.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sum\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue + is not a member of List[Long], but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659792629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val half = n / 2\n            val\
    \ leftMedian = median(l.take(half))\n            val rightMedian = median(l.drop(half))\n\
    \            leftMedian + rightMedian / 2.0\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_nlmrhu1.scala:16:12\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            leftMedian + rightMedian\
    \ / \e[31m2.0\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    Double\n\e[31m   |\e[0m            Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = (left + right).sorted match {\n                case Nil => 0.0\n  \
    \              case x :: xs => x\n            }\n            median\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmppeul_q7m.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmppeul_q7m.scala:16:31 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sorted\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                          ^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmppeul_q7m.scala:18:32 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m                \e[33mcase\e[0m x :: xs => x\n\e[31m\e[31m\
    \   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m            \
    \                    Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmppeul_q7m.scala:20:12 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            median\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Found:    (median : Double)\n\e[31m   |\e[0m           \
    \ Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659792629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = (left + right).sorted match {\n                case Nil => 0.0\n  \
    \              case x :: xs => xs.last\n            }\n            median\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpocglydte.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpocglydte.scala:16:31 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sorted\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                          ^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpocglydte.scala:18:32 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m                \e[33mcase\e[0m x :: xs => xs.last\n\e[31m\e\
    [31m   |\e[0m                                ^^\e[0m\n\e[31m   |\e[0m        \
    \                        Not found: xs\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpocglydte.scala:20:12 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            median\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    (median : Double)\n\e[31m   |\e[0m \
    \           Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659792629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = new Array[Long](n)\n            val right = new Array[Long](n)\n    \
    \        val midVal = l(mid - 1)\n            val leftVal = l(mid - 1)\n     \
    \       val rightVal = l(mid + 1)\n            val leftSum = 0.0\n           \
    \ val rightSum = 0.0\n            for (i <- 0 until n) {\n                if (i\
    \ < mid) left(i) = l(i)\n                else right(i) = l(i)\n              \
    \  leftSum += l(i)\n                rightSum += l(i)\n            }\n        \
    \    val leftMedian = leftSum / n\n            val rightMedian = rightSum / n\n\
    \            val median = if (leftMedian < rightMedian) leftMedian\n         \
    \   else rightMedian\n            median\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6d01zwxr.scala:24:24 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                leftSum += l(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           value += is not a\
    \ member of Double - did you mean leftSum.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp6d01zwxr.scala:25:25 ------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m                rightSum += l(i)\n\e[31m\e[31m   |\e[0m              \
    \  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          value += is not a member of Double\
    \ - did you mean rightSum.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6d01zwxr.scala:31:12\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m            median\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (median\
    \ : Double)\n\e[31m   |\e[0m            Required: Float\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659792629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        if (n < 2) 0.0\n        else {\n            val median\
    \ = l.sortWith(_ < _).reverse.head\n            val leftMedian = l.sortWith(_\
    \ < _).reverse.take(half).head\n            val rightMedian = l.sortWith(_ < _).reverse.drop(half).head\n\
    \            val medianDiff = median.abs - leftMedian.abs\n            val leftMedianDiff\
    \ = leftMedian.abs - median.abs\n            val rightMedianDiff = rightMedian.abs\
    \ - median.abs\n            val medianDiffAbs = medianDiff.abs\n            val\
    \ leftMedianDiffAbs = leftMedianDiff.abs\n            val rightMedianDiffAbs =\
    \ rightMedianDiff.abs\n            val absDiff = medianDiffAbs + leftMedianDiffAbs\
    \ + rightMedianDiffAbs\n            val absDiffAbs = absDiff.abs\n           \
    \ val absDiffRatio = absDiffAbs / n\n            val medianDiffRatio = medianDiffAbs\
    \ / n\n            val leftMedianDiffRatio = leftMedianDiffAbs / n\n         \
    \   val rightMedianDiffRatio = rightMedianDiffAbs / n\n            val medianDiffRatioAbs\
    \ = medianDiffRatio * n\n            val leftMedianDiffRatioAbs = leftMedianDiffRatio\
    \ * n\n            val rightMedianDiffRatioAbs = rightMedianDiffRatio * n\n  \
    \          val medianDiffRatioAbsAbs = medianDiffRatioAbs * n\n            val\
    \ leftMedianDiffRatioAbsAbs = leftMedianDiffRatioAbs * n\n            val rightMedianDiffRatioAbsAbs\
    \ = rightMedianDiffRatioAbs * n\n            val medianDiffRatioAbsAbsAbs = medianDiffRatioAbsAbs\
    \ * n\n            val medianDiffRatioAbsAbsAbsAbs = medianDiffRatioAbsAbsAbs\
    \ * n\n            val medianDiffRatioAbsAbsAbsAbsAbs = medianDiffRatioAbsAbsAbsAbs\
    \ * n\n            val medianDiffRatioAbsAbsAbsAbsAbs = medianDiffRatioAbsAbsAbsAbsAbs\
    \ * n\n            val medianDiffRatioAbsAbsAbsAbsAbsAbs = medianDiffRatioAbsAbsAbsAbsAbsAbs\
    \ * n\n            val medianDiffRatioAbsAbsAbsAbsAbsAbsAb\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpik8m6dc1.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpik8m6dc1.scala:51:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m51 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpik8m6dc1.scala:38:16 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m            \e[33mval\e[0m \e[36mmedianDiffRatioAbsAbsAbsAbsAbs\e\
    [0m = medianDiffRatioAbsAbsAbsAbsAbs * n\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmedianDiffRatioAbsAbsAbsAbsAbs is already defined as \e[33mvalue\e\
    [0m \e[35mmedianDiffRatioAbsAbsAbsAbsAbs\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpik8m6dc1.scala:39:52 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m            \e[33mval\e[0m \e[36mmedianDiffRatioAbsAbsAbsAbsAbsAbs\e\
    [0m = medianDiffRatioAbsAbsAbsAbsAbsAbs * n\n\e[31m\e[31m   |\e[0m           \
    \                                         ^\e[0m\n\e[31m   |\e[0m            Recursive\
    \ \e[33mvalue\e[0m \e[35mmedianDiffRatioAbsAbsAbsAbsAbsAbs\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpik8m6dc1.scala:50:1\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Float\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpik8m6dc1.scala:42:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m42 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1659792629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        if (n < 1) throw new IllegalArgumentException(\"\
    List must have at least two elements\")\n        if (n == 1) return l(0)\n   \
    \     if (n == 2) return (l(1) + l(2))/2\n        val mid = l.length/2\n     \
    \   val left = l.take(half)\n        val right = l.drop(half)\n        val median\
    \ = median(left)\n        val leftMedian = median(right)\n        if (leftMedian\
    \ < median) left\n        else right\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpt84vmjk1.scala:18:21 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt84vmjk1.scala:20:33 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (leftMedian < median) left\n\e\
    [31m\e[31m   |\e[0m                                 ^^^^\e[0m\n\e[31m   |\e[0m\
    \                                 Found:    (left : List[Long])\n\e[31m   |\e\
    [0m                                 Required: Float\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpt84vmjk1.scala:21:13 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m right\n\e[31m\e[31m   |\e[0m\
    \             ^^^^^\e[0m\n\e[31m   |\e[0m             Found:    (right : List[Long])\n\
    \e[31m   |\e[0m             Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659792629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0\n        else {\n            val half = n / 2\n            val\
    \ median = (l(half) + l(half+1)) / 2\n            median\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmparkytodm.scala:20)\n\tat Problem.main(tmparkytodm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n <= 1) 0f\n        else {\n            val half = n / 2\n            val\
    \ left = l.take(half)\n            val right = l.drop(half)\n            val mid\
    \ = math.round((left + right) / 2)\n            val median = (left + right) /\
    \ 2\n            if (median == 0) 0f\n            else median\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphemae7dv.scala:16:39 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmid\e[0m = math.round((left\
    \ + right) / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                            \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmphemae7dv.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left\
    \ + right) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                          ^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659792630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 1) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = new Array[Long](n)\n            val right = new Array[Long](n)\n    \
    \        val i = 0\n            while (i < n) {\n                left(i) = l(i)\n\
    \                i += 1\n            }\n            i = 0\n            while (i\
    \ < n) {\n                right(i) = l(i)\n                i += 1\n          \
    \  }\n            val leftMedian = median(left)\n            val rightMedian =\
    \ median(right)\n            val median = (leftMedian + rightMedian) / 2\n   \
    \         if (n == 1) median\n            else median\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp503sjvv_.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                i += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean i.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp503sjvv_.scala:21:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            i = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp503sjvv_.scala:24:18\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                i += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m         \
    \       value += is not a member of Int - did you mean i.!=?\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp503sjvv_.scala:28:26 ---------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (leftMedian\
    \ + rightMedian) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \   ^\e[0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e[0m\
    \ \e[35mleftMedian\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659792630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val isEven = sorted.length%2 == 0\n        val medianIsEven = if (isEven)\
    \ median else median.toFloat\n        val medianIsOdd = if (isEven) median.toFloat\
    \ else median\n        val medianIsEvenIsOdd = if (isEven) medianIsEven else medianIsOdd\n\
    \        val medianIsEvenIsOddIsEven = if (isEven) medianIsEvenIsOdd else medianIsOdd\n\
    \        val medianIsEvenIsOddIsOdd = if (isEven) medianIsOdd else medianIsEven\n\
    \        val medianIsEvenIsOddIsEvenIsOdd = if (isEven) medianIsEvenIsOddIsEven\
    \ else medianIsOddIsEven\n        val medianIsEvenIsOddIsOddIsEven = if (isEven)\
    \ medianIsEvenIsOddIsOdd else medianIsOddIsEven\n        val medianIsEvenIsOddIsOddIsEvenIsOdd\
    \ = if (isEven) medianIsEvenIsOddIsEvenIsOdd else medianIsOddIsEvenIsOdd\n   \
    \     val medianIsEvenIsOddIsOddIsEvenIsOddIsEven = if (isEven) medianIsEvenIsOddIsOddIsEvenIsOdd\
    \ else medianIsOddIsEvenIsOddIsEvenIsOdd\n        val medianIsEvenIsOddIsOddIsEvenIsOddIsEvenIsOdd\
    \ = if (isEven) medianIsEvenIsOddIsOddIsEvenIsOddIsEven else medianIsOddIsEvenIsOddIsEvenIsOddIsEven\n\
    \        val medianIsEvenIsOddIsOddIsEvenIsOddIsEvenIsOddIsEven = if (isEven)\
    \ medianIsEvenIsOddIsOddIsEvenIsOddIsEvenIsOdd else medianIsOddIsEvenIsOddIsEvenIsOddIsEvenIsOddIsEven\n\
    \        val medianIsEvenIsOddIsOddIsEvenIsOddIsEvenIsOddIsEvenIsOdd = if (isEven)\
    \ medianIsEvenIsOddIsOddIsEvenIsOddIsEvenIsOddIsEven else medianIsOddIsEvenIsOddIsEvenIsOddIs\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_c2kloz9.scala:19:84 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmedianIsEvenIsOddIsEvenIsOdd\e\
    [0m = \e[33mif\e[0m (isEven) medianIsEvenIsOddIsEven \e[33melse\e[0m medianIsOddIsEven\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                                   Not found: medianIsOddIsEven\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_c2kloz9.scala:20:83 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmedianIsEvenIsOddIsOddIsEven\e\
    [0m = \e[33mif\e[0m (isEven) medianIsEvenIsOddIsOdd \e[33melse\e[0m medianIsOddIsEven\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                           ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                                  Not found: medianIsOddIsEven\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_c2kloz9.scala:21:94 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmedianIsEvenIsOddIsOddIsEvenIsOdd\e\
    [0m = \e[33mif\e[0m (isEven) medianIsEvenIsOddIsEvenIsOdd \e[33melse\e[0m medianIsOddIsEvenIsOdd\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                       Not found: medianIsOddIsEvenIsOdd\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_c2kloz9.scala:22:105\
    \ -----------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmedianIsEvenIsOddIsOddIsEvenIsOddIsEven\e[0m = \e[33mif\e[0m (isEven) medianIsEvenIsOddIsOddIsEvenIsOdd\
    \ \e[33melse\e[0m medianIsOddIsEvenIsOddIsEvenIsOdd\n\e[31m\e[31m   |\e[0m   \
    \                                                                    "
  stdout: ''
  timestamp: 1659792630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n <= 1) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = (left + right).sorted\n            val medianIndex = median.indexWhere(_ >\
    \ median.last)\n            median(medianIndex + 1) + median(medianIndex - 1)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpix0dttg7.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left\
    \ + right).sorted\n\e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792631
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        val median = if (n % 2 == 0) l.sorted.take(half).last\
    \ else l.sorted.take(half).last\n        median.toFloat\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1j6fv7of.scala:16)\n\tat Problem.main(tmp1j6fv7of.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792632
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        if (sorted.length % 2 == 0) sorted.apply(mid)\
    \ else (sorted.apply(mid) + sorted.apply(mid - 1)).toFloat\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8v7l2rrw.scala:15)\n\tat Problem.main(tmp8v7l2rrw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = new Array[Long](n)\n            val right = new Array[Long](n)\n    \
    \        val leftSum = 0\n            val rightSum = 0\n            for (i <-\
    \ 0 until n) {\n                left(i) = l(i)\n                right(i) = l(mid\
    \ - i)\n                leftSum += l(i)\n                rightSum += l(mid - i)\n\
    \            }\n            val leftMedian = leftSum / n\n            val rightMedian\
    \ = rightSum / n\n            val median = (leftMedian + rightMedian) / 2\n  \
    \          if (median == leftMedian) leftMedian\n            else rightMedian\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsdlrb0hp.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                leftSum += l(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              value += is not\
    \ a member of Int - did you mean leftSum.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpsdlrb0hp.scala:22:25 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m                rightSum += l(mid - i)\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value += is not a member\
    \ of Int - did you mean rightSum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659792631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val half = n / 2\n            val\
    \ left = l.take(half)\n            val right = l.drop(half)\n            val mid\
    \ = math.round((left + right) / 2)\n            val median = if (left == right)\
    \ mid\n            else math.round((left + right) / 2)\n            median\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp3fd04rq.scala:16:39 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmid\e[0m = math.round((left\
    \ + right) / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                            \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpp3fd04rq.scala:18:34 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33melse\e[0m math.round((left + right)\
    \ / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659792631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val median = if (n == 1) left else (left + right) / 2\n        median\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuf6j7yq2.scala:14:49 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = \e[33mif\e\
    [0m (n == \e[31m1\e[0m) left \e[33melse\e[0m (left + right) / \e[31m2\e[0m\n\e\
    [31m\e[31m   |\e[0m                                            ^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpuf6j7yq2.scala:15:8 ---------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        median\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    (median : List[Long])\n\e[31m   |\e[0m      \
    \  Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n\
    \        val median = (left + right).sorted\n        val medianIndex = median.indexWhere(_\
    \ > 0)\n        median(medianIndex)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp07co1rjr.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sorted\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0mvalue +\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = (left + right).sorted\n            median(median)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp767mt7lc.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left\
    \ + right).sorted\n\e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0\n        else {\n            val half = n / 2\n            val\
    \ left = l.take(half)\n            val right = l.drop(half)\n            val mid\
    \ = math.floor(half)\n            val median = (left + right).sorted\n       \
    \     val medianIndex = math.floor(n / 2)\n            val medianValue = median(medianIndex)\n\
    \            val medianIndex2 = math.floor((n - 1) / 2)\n            val medianValue2\
    \ = median(medianIndex2)\n            val medianDiff = medianValue - medianValue2\n\
    \            if (medianDiff == 0) medianValue\n            else medianValue +\
    \ medianDiff\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpma5i7y6h.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left\
    \ + right).sorted\n\e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = l.length / 2\n      \
    \      val left = l.slice(0, mid)\n            val right = l.slice(mid)\n    \
    \        val median = (left + right).sorted match {\n                case Nil\
    \ => 0.0\n                case x :: xs => xs.last\n            }\n           \
    \ median.toFloat\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpganvv89p.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpganvv89p.scala:16:31 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sorted\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                          ^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpganvv89p.scala:18:32 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m                \e[33mcase\e[0m x :: xs => xs.last\n\e[31m\e\
    [31m   |\e[0m                                ^^\e[0m\n\e[31m   |\e[0m        \
    \                        Not found: xs\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659792632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val leftHalf = sorted.drop(mid)\n        val rightHalf = sorted.takeRight(mid)\n\
    \        val medianOfLeftHalf = median(leftHalf)\n        val medianOfRightHalf\
    \ = median(rightHalf)\n        val medianOfBothHalfs = medianOfLeftHalf + medianOfRightHalf\n\
    \        val medianOfBothHalfsIsBetterThanMedian = medianOfBothHalfs > median\n\
    \        if (medianOfBothHalfsIsBetterThanMedian)\n            medianOfBothHalfs\n\
    \        else\n            median\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmp0hcsv_bo.scala:15:31 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmedianOfLeftHalf\e[0m =\
    \ median(leftHalf)\n\e[31m\e[31m   |\e[0m                               ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               \e[33mvalue\e[0m \e[35mmedian\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmp0hcsv_bo.scala:16:32 -----------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mmedianOfRightHalf\e[0m = median(rightHalf)\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                \e[33mvalue\e[0m \e[35mmedian\e[0m does not\
    \ take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        if (n % 2 == 0) {\n            val m1 = l.take(half)\n\
    \            val m2 = l.drop(half)\n            val m = (m1 + m2).sorted\n   \
    \         val mid = m.size / 2\n            val median = (m1.head + m2.head) /\
    \ 2\n            if (mid < median) {\n                median\n            } else\
    \ {\n                median\n            }\n        } else {\n            val\
    \ m1 = l.take(half)\n            val m2 = l.drop(half)\n            val m = (m1\
    \ + m2).sorted\n            val mid = m.size / 2\n            val median = (m1.head\
    \ + m2.head) / 2\n            if (mid < median) {\n                median\n  \
    \          } else {\n                median\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprkb6cxrt.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mm\e[0m = (m1 + m2).sorted\n\
    \e[31m\e[31m   |\e[0m                     ^^^^\e[0m\n\e[31m   |\e[0mvalue + is\
    \ not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmprkb6cxrt.scala:26:24 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mm\e[0m = (m1 + m2).sorted\n\
    \e[31m\e[31m   |\e[0m                     ^^^^\e[0m\n\e[31m   |\e[0mvalue + is\
    \ not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659792632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n\
    \        val median = if (n == 1) left else (left + right) / 2\n        median\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkg2649k8.scala:14:49 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = \e[33mif\e\
    [0m (n == \e[31m1\e[0m) left \e[33melse\e[0m (left + right) / \e[31m2\e[0m\n\e\
    [31m\e[31m   |\e[0m                                            ^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpkg2649k8.scala:15:8 ---------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        median\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    (median : List[Long])\n\e[31m   |\e[0m      \
    \  Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val median = (left + right).sorted match {\n            case Nil => 0f\n\
    \            case x :: Nil => x\n            case x :: y => if (x < y) x else\
    \ y\n        }\n        median\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8q0urv7h.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sorted\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp8q0urv7h.scala:16:29 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m x :: Nil => x\n\e[31m\e[31m  \
    \ |\e[0m                             ^\e[0m\n\e[31m   |\e[0m                 \
    \            Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp8q0urv7h.scala:17:31 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            \e[33mcase\e[0m x :: y => \e[33mif\e[0m (x < y) x \e[33melse\e\
    [0m y\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e\
    [0m                               Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8q0urv7h.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m x :: y => \e[33mif\e[0m (x\
    \ < y) x \e[33melse\e[0m y\n\e[31m\e[31m   |\e[0m                            \
    \          ^\e[0m\n\e[31m   |\e[0m                                      Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8q0urv7h.scala:17:45\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e\
    [0m x :: y => \e[33mif\e[0m (x < y) x \e[33melse\e[0m y\n\e[31m\e[31m   |\e[0m\
    \                                          "
  stdout: ''
  timestamp: 1659792632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val m = (left + right).sorted.last\n        m\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc41ww3su.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = (left + right).sorted.last\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not\
    \ a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792632
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val median = (left ++ right).sortWith(_ < _).head\n        median\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph2woix6a.scala:18)\n\tat Problem.main(tmph2woix6a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792633
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = new Array[Long](n)\n            val right = new Array[Long](n)\n    \
    \        for (i <- 0 until n) {\n                left(i) = l(i)\n            \
    \    right(i) = (i + 1) % n\n            }\n            val median = (left.sum\
    \ + right.sum) / 2\n            val leftMedian = median(left)\n            val\
    \ rightMedian = median(right)\n            if (leftMedian < rightMedian) leftMedian\n\
    \            else rightMedian\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmppzje3cdh.scala:21:29 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mleftMedian\e[0m = median(left)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             \e[33mvalue\e[0m \e[35mmedian\e[0m does not take\
    \ parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmppzje3cdh.scala:22:30\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e\
    [0m \e[36mrightMedian\e[0m = median(right)\n\e[31m\e[31m   |\e[0m            \
    \                  ^^^^^^\e[0m\n\e[31m   |\e[0m                              \e\
    [33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659792632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n\
    \        val median = left.reduceLeft(_ + _) / 2.0\n        val median2 = right.reduceRight(_\
    \ + _) / 2.0\n        val median3 = median * median\n        val median4 = median2\
    \ * median\n        if (median3 < median4)\n            median\n        else\n\
    \            median2\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcipeapml.scala:19:12\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            median\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (median\
    \ : Double)\n\e[31m   |\e[0m            Required: Float\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpcipeapml.scala:21:12 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            median2\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (median2 : Double)\n\e[31m\
    \   |\e[0m            Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792633
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val median = left.median + right.median\n        median.toFloat\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnqv9nnha.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = left.median\
    \ + right.median\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                     value median is not a member of List[Long]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792632
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.max\n        val half = n / 2\n        val left = (0 to half).map(i\
    \ => l(i)).sum\n        val right = (half to n).map(i => l(i)).sum\n        val\
    \ median = (left + right) / 2\n        median\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$2(tmp7ull73ko.scala:14)\n\tat scala.runtime.java8.JFunction1$mcJI$sp.apply(JFunction1$mcJI$sp.scala:17)\n\
    \tat scala.collection.immutable.Range.map(Range.scala:59)\n\tat Problem$.median(tmp7ull73ko.scala:14)\n\
    \tat Problem$.main(tmp7ull73ko.scala:19)\n\tat Problem.main(tmp7ull73ko.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792634
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = (left + right).sorted\n            val medianIndex = median.index\n      \
    \      val medianValue = median(medianIndex)\n            medianValue\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9o83tcj0.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left\
    \ + right).sorted\n\e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792633
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n\
    \        val median = (left + right).sorted match {\n            case Nil => 0.0\n\
    \            case x :: xs => xs.last\n        }\n        median.toFloat\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9ino71u5.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sorted\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9ino71u5.scala:16:28 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m x :: xs => xs.last\n\e[31m\e[31m\
    \   |\e[0m                            ^^\e[0m\n\e[31m   |\e[0m               \
    \             Not found: xs\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792634
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val leftHalf = sorted.take(mid)\n        val rightHalf = sorted.drop(mid)\n\
    \        val medianOfLeftHalf = median(leftHalf)\n        val medianOfRightHalf\
    \ = median(rightHalf)\n        val medianOfBothHalfs = median(leftHalf ++ rightHalf)\n\
    \        val medianOfBothHalfsIfEven = median(leftHalf ++ rightHalf.take(1))\n\
    \        val medianOfBothHalfsIfOdd = median(leftHalf ++ rightHalf.drop(1))\n\
    \        val medianOfBothHalfsIfEvenIfOdd = median(leftHalf ++ rightHalf.take(2)\
    \ ++ rightHalf.drop(2))\n        val medianOfBothHalfsIfEvenIfOddIfEven = median(leftHalf\
    \ ++ rightHalf.take(3) ++ rightHalf.drop(3))\n        val medianOfBothHalfsIfEvenIfOddIfOdd\
    \ = median(leftHalf ++ rightHalf.take(4) ++ rightHalf.drop(4))\n        val medianOfBothHalfsIfEvenIfOddIfEvenIfOdd\
    \ = median(leftHalf ++ rightHalf.take(5) ++ rightHalf.drop(5))\n        val medianOfBothHalfsIfEvenIfOddIfEvenIfOddIfEven\
    \ = median(leftHalf ++ rightHalf.take(6) ++ rightHalf.drop(6))\n        val medianOfBothHalfsIfEvenIfOddIfEvenIfOddIfOdd\
    \ = median(leftHalf ++ rightHalf.take(7) ++ rightHalf.drop(7))\n        val medianOfBothHalfsIfEvenIfOddIfEvenIfOddIfEvenIfOdd\
    \ = median(leftHalf ++ rightHalf.take(8) ++ rightHalf.drop(8))\n        val medianOfBothHalfsIfEvenIfOddIfEvenIfOddIfEvenIfOddIfEven\
    \ = median(leftHalf ++ rightHalf.take(9) ++ rightHalf.drop(9))\n        val medianOfBothHalfsIfEvenIfOddIfEvenIfOddIfEvenIfOddIfOdd\
    \ = median(leftHalf ++ rightHalf.take(10) ++ rightHalf.drop(10))\n        val\
    \ medianOfBothHalfsIfEvenIf\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgdhky5eu.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpgdhky5eu.scala:15:31\
    \ -----------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e\
    [0m \e[36mmedianOfLeftHalf\e[0m = median(leftHalf)\n\e[31m\e[31m   |\e[0m    \
    \                           ^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \          \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpgdhky5eu.scala:16:32 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmedianOfRightHalf\e[0m =\
    \ median(rightHalf)\n\e[31m\e[31m   |\e[0m                                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                \e[33mvalue\e[0m \e[35mmedian\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmpgdhky5eu.scala:17:32 -----------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mmedianOfBothHalfs\e[0m = median(leftHalf\
    \ ++ rightHalf)\n\e[31m\e[31m   |\e[0m                                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                \e[33mvalue\e[0m \e[35mmedian\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmpgdhky5eu.scala:18:38 -----------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mmedianOfBothHalfsIfEven\e[0m = median(leftHalf\
    \ ++ rightHalf.take(\e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                    \
    \                  ^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \     \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpgdhky5eu.scala:19:37 ------------------------"
  stdout: ''
  timestamp: 1659792624
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = if (left.length == 0) right else left\n            median.sum / median.length\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiammqb3k.scala:21)\n\tat Problem.main(tmpiammqb3k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792634
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val half = sorted.length / 2\n        val median = sorted.take(half).last\n\
    \        val lower = sorted.take(half).drop(1)\n        val upper = sorted.take(half).dropRight(1)\n\
    \        val medianOfLower = median(lower)\n        val medianOfUpper = median(upper)\n\
    \        val medianOfMedian = median(sorted)\n        val medianOfMedianOfLower\
    \ = medianOfLower + medianOfMedian\n        val medianOfMedianOfUpper = medianOfUpper\
    \ + medianOfMedian\n        val medianOfMedianOfMedian = medianOfMedianOfLower\
    \ + medianOfMedianOfUpper\n        val medianOfMedianOfMedianOfLower = medianOfMedianOfLower\
    \ + medianOfMedianOfMedian\n        val medianOfMedianOfMedianOfUpper = medianOfMedianOfUpper\
    \ + medianOfMedianOfMedian\n        val medianOfMedianOfMedianOfMedian = medianOfMedianOfMedianOfLower\
    \ + medianOfMedianOfMedianOfMedianOfUpper\n        val medianOfMedianOfMedianOfMedianOfLower\
    \ = medianOfMedianOfMedianOfLower + medianOfMedianOfMedianOfMedian\n        val\
    \ medianOfMedianOfMedianOfMedianOfUpper = medianOfMedianOfMedianOfUpper + medianOfMedianOfMedianOfMedian\n\
    \        val medianOfMedianOfMedianOfMedianOfMedian = medianOfMedianOfMedianOfMedianOfLower\
    \ + medianOfMedianOfMedianOfMedianOfMedianOfUpper\n        val medianOfMedianOfMedianOfMedianOfMedianOfLower\
    \ = medianOfMedianOfMedianOfMedianOfLower + medianOfMedianOfMedianOfMedianOfMedianOfUpper\n\
    \        val medianOfMedianOfMedianOfMedianOfMedianOfUpper = medianOfMedianOfMedianOfMedianOfUpper\
    \ + medianOfMedianOfMedianOfMedianOfMedianOfMedian\n        val medianOfMedianOfMedianOfMedianOfMedianOfMedian\
    \ = medianOfMedianOfMedianOfMedianOfMedianOfLower + medianOfMedianOfMedianOfMedianOfMedianOfMedian\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmp4fpp_v34.scala:15:28 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmedianOfLower\e[0m = median(lower)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            \e[33mvalue\e[0m \e[35mmedian\e[0m does not take\
    \ parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp4fpp_v34.scala:16:28\
    \ -----------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e\
    [0m \e[36mmedianOfUpper\e[0m = median(upper)\n\e[31m\e[31m   |\e[0m          \
    \                  ^^^^^^\e[0m\n\e[31m   |\e[0m                            \e\
    [33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmp4fpp_v34.scala:17:29 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmedianOfMedian\e[0m = median(sorted)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             \e[33mvalue\e[0m \e[35mmedian\e[0m does not take\
    \ parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4fpp_v34.scala:30:5\
    \ ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659792634
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = new Array[Long](n)\n            val right = new Array[Long](n)\n    \
    \        System.arraycopy(l, 0, left, 0, mid)\n            System.arraycopy(l,\
    \ mid, right, 0, n - mid)\n            val leftMedian = median(left)\n       \
    \     val rightMedian = median(right)\n            val median = (leftMedian +\
    \ rightMedian) / 2\n            median\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprgcdos7_.scala:20:26 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (leftMedian\
    \ + rightMedian) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \   ^\e[0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e[0m\
    \ \e[35mleftMedian\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        median\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpofqun_b_.scala:16)\n\tat Problem.main(tmpofqun_b_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = median(left) + median(right)\n            median\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpjf3b9lk2.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpjf3b9lk2.scala:16:25 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\
    \ + median(right)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m\
    \   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792633
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val half = sorted.length / 2\n        if (sorted.length == 1) sorted[0]\n\
    \        else sorted[half]\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpyu14oy79.scala:12:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (sorted.length == \e[31m1\e[0m)\
    \ sorted[\e[31m0\e[0m]\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mtrait\e\
    [0m \e[35mLinearSeqOps\e[0m does not take type parameters\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpyu14oy79.scala:13:20 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m sorted[half]\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ type half\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792633
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = if (sorted.length %\
    \ 2 == 0) sorted.apply(mid) else sorted.apply(mid - 1)\n        val lower = sorted.take(mid)\n\
    \        val upper = sorted.drop(mid)\n        val medianOfLower = median(lower)\n\
    \        val medianOfUpper = median(upper)\n        val medianOfMedian = median(sorted)\n\
    \        val medianOfMedianOfLower = median(lower.take(mid))\n        val medianOfMedianOfUpper\
    \ = median(upper.take(mid))\n        val medianOfMedianOfMedian = median(sorted.take(mid))\n\
    \        val medianOfMedianOfMedianOfLower = median(lower.take(mid).take(mid))\n\
    \        val medianOfMedianOfMedianOfUpper = median(upper.take(mid).take(mid))\n\
    \        val medianOfMedianOfMedianOfMedian = median(sorted.take(mid).take(mid))\n\
    \        val medianOfMedianOfMedianOfMedianOfLower = median(lower.take(mid).take(mid).take(mid))\n\
    \        val medianOfMedianOfMedianOfMedianOfUpper = median(upper.take(mid).take(mid).take(mid))\n\
    \        val medianOfMedianOfMedianOfMedianOfMedian = median(sorted.take(mid).take(mid).take(mid))\n\
    \        val medianOfMedianOfMedianOfMedianOfMedianOfLower = median(lower.take(mid).take(mid).take(mid).take(mid))\n\
    \        val medianOfMedianOfMedianOfMedianOfMedianOfUpper = median(upper.take(mid).take(mid).take(mid).take(mid))\n\
    \        val medianOfMedianOfMedianOfMedianOfMedianOfMedian = median(sorted.take(mid).take(mid).take(mid).take(mid))\n\
    \        val medianOfMedianOfMedianOfMedianOfMedianOfMedianOfLower = median(lower.take(mid).take(mid).take(mid).take(mid).take(mid))\n\
    \        val medianOfMedianOfMedianOfMedianOfMedianOfMedianOfUpper = median(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp4x39vz2i.scala:31:75 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mmedianOfMedianOfMedianOfMedianOfMedianOfMedianOfUpper\e\
    [0m = median(\n\e[31m\e[31m   |\e[0m                                         \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                    expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmp4x39vz2i.scala:15:28 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmedianOfLower\e[0m = median(lower)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            \e[33mvalue\e[0m \e[35mmedian\e[0m does not take\
    \ parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp4x39vz2i.scala:16:28\
    \ -----------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e\
    [0m \e[36mmedianOfUpper\e[0m = median(upper)\n\e[31m\e[31m   |\e[0m          \
    \                  ^^^^^^\e[0m\n\e[31m   |\e[0m                            \e\
    [33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmp4x39vz2i.scala:17:29 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmedianOfMedian\e[0m = median(sorted)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             \e[33mvalue\e[0m \e[35mmedian\e[0m does not take\
    \ parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp4x39vz2i.scala:18:36\
    \ -----------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e\
    [0m \e[36mmedianOfMedianOfLower\e[0m = median(lower.take(mid))\n\e[31m\e[31m \
    \  |\e[0m                                    ^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                               \e[33mvalue\e"
  stdout: ''
  timestamp: 1659792634
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.max\n        val median = (m + n) / 2\n        val l = l.filter(_\
    \ < median)\n        val r = l.filter(_ > median)\n        val l = l.filter(_\
    \ >= median)\n        val r = l.filter(_ <= median)\n        if (l.length == 0)\
    \ 0\n        else if (l.length == 1) l.head\n        else median\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3n_98lz0.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.filter(_ >= median)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0ml is already defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3n_98lz0.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mr\e[0m = l.filter(_ <= median)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mr is already defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp3n_98lz0.scala:13:16 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.filter(_ < median)\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659792633
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = if (sorted.length %\
    \ 2 == 0) sorted.apply(mid) else sorted.apply(mid + 1)\n        median\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmzf3013q.scala:16)\n\tat Problem.main(tmpmzf3013q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val median = if (n == 1) left else (left + right) / 2\n        median.toFloat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdgglzm0b.scala:14:49 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = \e[33mif\e\
    [0m (n == \e[31m1\e[0m) left \e[33melse\e[0m (left + right) / \e[31m2\e[0m\n\e\
    [31m\e[31m   |\e[0m                                            ^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpdgglzm0b.scala:15:15 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        median.toFloat\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toFloat is not a member of List[Long], but could be\
    \ made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659792635
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        median\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpofqun_b_.scala:16)\n\tat Problem.main(tmpofqun_b_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.groupBy(x => x).mapValues(_.size).maxBy(_._1)._1\n        val half\
    \ = n / 2\n        if (half == 0) 0\n        else if (half == 1) l(0)\n      \
    \  else l(half) + median(l.drop(half))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9izrvjyx.scala:18)\n\tat Problem.main(tmp9izrvjyx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792635
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.groupBy(x => x).mapValues(_.length).maxBy(_._2)._1\n        val half\
    \ = n / 2\n        val median = (l take half).sum / half\n        if (n < 2) median\n\
    \        else median * (n - 1) / 2\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcs11wa0w.scala:18)\n\tat Problem.main(tmpcs11wa0w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792635
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = new Array[Long](n)\n        val right =\
    \ new Array[Long](n)\n        var i = 0\n        var j = 0\n        while (i <\
    \ n) {\n            left(i) = l(i)\n            i += 1\n        }\n        while\
    \ (j < n) {\n            right(j) = l(j)\n            j += 1\n        }\n    \
    \    val leftMedian = median(left)\n        val rightMedian = median(right)\n\
    \        val median = (leftMedian + rightMedian) / 2\n        if (n == 1) {\n\
    \            median\n        } else {\n            if (leftMedian < rightMedian)\
    \ {\n                median\n            } else {\n                median\n  \
    \          }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpu63sofdc.scala:26:22 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (leftMedian\
    \ + rightMedian) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                      ^\e\
    [0m\n\e[31m   |\e[0m                      Recursive \e[33mvalue\e[0m \e[35mleftMedian\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792634
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val half = n / 2\n            val\
    \ left = l.slice(0, half)\n            val right = l.slice(half)\n           \
    \ val median = (left + right).sorted.last\n            median\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpp7l1q90f.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(half)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmissing argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m\
    \ in \e[33mclass\e[0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpp7l1q90f.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left\
    \ + right).sorted.last\n\e[31m\e[31m   |\e[0m                          ^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659792635
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 1) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = (left + right).sorted match {\n                case Nil => 0.0\n         \
    \       case head :: tail => head\n            }\n            median\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5x4hsoin.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left\
    \ + right).sorted \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                  \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5x4hsoin.scala:18:37 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mcase\e[0m head :: tail => head\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                     Not found: head\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5x4hsoin.scala:20:12 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            median\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (median : Double)\n\e[31m\
    \   |\e[0m            Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659792635
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val median = (left + right).sorted\n        median.last\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpazllszq3.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sorted\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0mvalue +\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.sorted.length / 2\n        if (m == 0) l.head\n        else if (m\
    \ == 1) l.last\n        else l.sorted take m reduce {\n            case x if x\
    \ < l.head => x\n            case x if x > l.last => x\n            case x =>\
    \ l.head\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1irr5pxk.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m x < l.head\
    \ => x\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ < is not a member of (Long, Long), but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1irr5pxk.scala:15:36 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m x < l.head\
    \ => x\n\e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m\
    \   |\e[0m                                    Found:    (x : (Long, Long))\n\e\
    [31m   |\e[0m                                    Required: Long\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1irr5pxk.scala:16:24 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m x > l.last\
    \ => x\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ > is not a member of (Long, Long), but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1irr5pxk.scala:16:36 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m x > l.last\
    \ => x\n\e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m\
    \   |\e[0m                                    Found:    (x : (Long, Long))\n\e\
    [31m   |\e[0m                                    Required: Long\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659792635
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = if (left.length < right.length) left else right\n            median.sum\
    \ / median.length\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpgebd3uz8.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n1 error found\n"
  stdout: ''
  timestamp: 1659792634
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = (left + right).sorted\n            median.last\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp30b_b5va.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left\
    \ + right).sorted\n\e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        val left = l.slice(0, half)\n        val right =\
    \ l.slice(half)\n        val median = math.min(left.last, right.last)\n      \
    \  val diff = (left.last + right.last) / 2\n        diff + median\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpq1t9p1xj.scala:13:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mright\e[0m = l.slice(half)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n1 error found\n"
  stdout: ''
  timestamp: 1659792634
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = if (sorted.length %\
    \ 2 == 0) sorted.apply(mid) else (sorted.apply(mid - 1) + sorted.apply(mid)) /\
    \ 2.0\n        median\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5norl_e6.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        median\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (median : AnyVal)\n\
    \e[31m   |\e[0m        Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792635
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = median(left) + median(right)\n            median\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpjf3b9lk2.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpjf3b9lk2.scala:16:25 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\
    \ + median(right)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m\
    \   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792633
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val median = if (left.length == 0) right else left\n        val medianValue\
    \ = median.sum / median.length\n        medianValue\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8xjr41xh.scala:19)\n\tat Problem.main(tmp8xjr41xh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792636
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val median = if (n == 1) left else (left + right) / 2\n        median\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuf6j7yq2.scala:14:49 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = \e[33mif\e\
    [0m (n == \e[31m1\e[0m) left \e[33melse\e[0m (left + right) / \e[31m2\e[0m\n\e\
    [31m\e[31m   |\e[0m                                            ^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpuf6j7yq2.scala:15:8 ---------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        median\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    (median : List[Long])\n\e[31m   |\e[0m      \
    \  Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = if (sorted.length %\
    \ 2 == 0) sorted.apply(mid) else sorted.apply(mid + 1)\n        median\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmzf3013q.scala:16)\n\tat Problem.main(tmpmzf3013q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792613
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = if (sorted.length %\
    \ 2 == 0) sorted.apply(mid) else sorted.apply(mid - 1)\n        median\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpggkh04z9.scala:16)\n\tat Problem.main(tmpggkh04z9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = (left + right).sorted match {\n                case Nil => 0.0\n         \
    \       case x :: xs => xs.last\n            }\n            median\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm_g5d3ol.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left\
    \ + right).sorted \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                  \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpm_g5d3ol.scala:18:32 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mcase\e[0m x :: xs => xs.last\n\e\
    [31m\e[31m   |\e[0m                                ^^\e[0m\n\e[31m   |\e[0m  \
    \                              Not found: xs\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpm_g5d3ol.scala:20:12 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            median\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (median : Double)\n\e[31m\
    \   |\e[0m            Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659792636
